
Blue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00003bc8  00003c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080013c  0080013c  00003c98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003622  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd8  00000000  00000000  000075aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001169  00000000  00000000  00008182  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000098c  00000000  00000000  000092ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000959  00000000  00000000  00009c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ef5  00000000  00000000  0000a5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000e4c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 01 	jmp	0x37c	; 0x37c <__ctors_end>
       4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       c:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__vector_3>
      10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      28:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__vector_10>
      2c:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__vector_11>
      30:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      68:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__vector_29>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      94:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      98:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      9c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      ac:	a1 05       	cpc	r26, r1
      ae:	b2 05       	cpc	r27, r2
      b0:	c3 05       	cpc	r28, r3
      b2:	d4 05       	cpc	r29, r4
      b4:	e5 05       	cpc	r30, r5
      b6:	f6 05       	cpc	r31, r6
      b8:	07 06       	cpc	r0, r23
      ba:	90 12       	cpse	r9, r16
      bc:	9b 12       	cpse	r9, r27
      be:	f0 12       	cpse	r15, r16
      c0:	0f 13       	cpse	r16, r31
      c2:	2e 13       	cpse	r18, r30
      c4:	93 13       	cpse	r25, r19
      c6:	3f 13       	cpse	r19, r31
      c8:	83 13       	cpse	r24, r19
      ca:	07 2c       	mov	r0, r7
      cc:	7a a5       	ldd	r23, Y+42	; 0x2a
      ce:	ba 6c       	ori	r27, 0xCA	; 202
      d0:	c5 90       	lpm	r12, Z+
      d2:	da 3b       	cpi	r29, 0xBA	; 186
      d4:	93 65       	ori	r25, 0x53	; 83
      d6:	fc 8b       	std	Y+20, r31	; 0x14
      d8:	bc 53       	subi	r27, 0x3C	; 60
      da:	f8 10       	cpse	r15, r8
      dc:	fd 3c       	cpi	r31, 0xCD	; 205
      de:	56 92       	lac	Z, r5
      e0:	83 4d       	sbci	r24, 0xD3	; 211
      e2:	bd 87       	std	Y+13, r27	; 0x0d
      e4:	9d 3a       	cpi	r25, 0xAD	; 173
      e6:	b6 3d       	cpi	r27, 0xD6	; 214
      e8:	cb c9       	rjmp	.-3178   	; 0xfffff480 <__eeprom_end+0xff7ef480>
      ea:	bf 5b       	subi	r27, 0xBF	; 191
      ec:	be 73       	andi	r27, 0x3E	; 62
      ee:	da 0f       	add	r29, r26
      f0:	c9 3f       	cpi	r28, 0xF9	; 249

000000f2 <__trampolines_end>:
      f2:	6c 6f       	ori	r22, 0xFC	; 252
      f4:	73 74       	andi	r23, 0x43	; 67
      f6:	20 74       	andi	r18, 0x40	; 64
      f8:	68 65       	ori	r22, 0x58	; 88
      fa:	20 70       	andi	r18, 0x00	; 0
      fc:	75 63       	ori	r23, 0x35	; 53
      fe:	6b 21       	and	r22, r11
     100:	0a 00       	.word	0x000a	; ????

00000102 <__c.2117>:
     102:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

00000111 <__c.2086>:
     111:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

0000011d <__c.2084>:
     11d:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000128 <__c.2080>:
     128:	50 49 44 0a 00                                      PID..

0000012d <__c.2078>:
     12d:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000139 <__c.2076>:
     139:	50 49 44 0a 00                                      PID..

0000013e <__c.2074>:
     13e:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000149 <__c.2071>:
     149:	0a 00                                               ..

0000014b <__c.2069>:
     14b:	2c 20 00                                            , .

0000014e <__c.2067>:
     14e:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     15e:	3a 20 00                                            : .

00000161 <__c.2063>:
     161:	0d 0a 00                                            ...

00000164 <__c.2061>:
     164:	0d 0a 00                                            ...

00000167 <__c.2059>:
     167:	50 68 6f 5b 36 5d 00                                Pho[6].

0000016e <__c.2057>:
     16e:	0d 0a 00                                            ...

00000171 <__c.2055>:
     171:	50 68 6f 5b 35 5d 00                                Pho[5].

00000178 <__c.2053>:
     178:	0d 0a 00                                            ...

0000017b <__c.2051>:
     17b:	50 68 6f 5b 34 5d 00                                Pho[4].

00000182 <__c.2049>:
     182:	0d 0a 00                                            ...

00000185 <__c.2047>:
     185:	50 68 6f 5b 33 5d 00                                Pho[3].

0000018c <__c.2045>:
     18c:	0d 0a 00                                            ...

0000018f <__c.2043>:
     18f:	50 68 6f 5b 32 5d 00                                Pho[2].

00000196 <__c.2041>:
     196:	0d 0a 00                                            ...

00000199 <__c.2039>:
     199:	50 68 6f 5b 31 5d 00                                Pho[1].

000001a0 <__c.2037>:
     1a0:	0d 0a 00                                            ...

000001a3 <__c.2035>:
     1a3:	50 68 6f 5b 30 5d 00                                Pho[0].

000001aa <__c.2033>:
     1aa:	0d 0a 00                                            ...

000001ad <__c.2166>:
     1ad:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001b8 <__c.2164>:
     1b8:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001c4 <__c.2162>:
     1c4:	0a 00                                               ..

000001c6 <__c.2160>:
     1c6:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

000001d0 <__c.2158>:
     1d0:	0a 00                                               ..

000001d2 <__c.2156>:
     1d2:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

000001dd <__c.2148>:
     1dd:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001e8 <__c.2146>:
     1e8:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001f4 <__c.2144>:
     1f4:	0a 00                                               ..

000001f6 <__c.2142>:
     1f6:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000200 <__c.2140>:
     200:	0a 00                                               ..

00000202 <__c.2138>:
     202:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

0000020d <__c.2130>:
     20d:	0a 00                                               ..

0000020f <__c.2128>:
     20f:	61 6c 70 68 61 3a 20 00                             alpha: .

00000217 <__c.2104>:
     217:	0a 00                                               ..

00000219 <__c.2102>:
     219:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000221 <__c.2100>:
     221:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000232 <__c.2098>:
     232:	0a 00                                               ..

00000234 <__c.2096>:
     234:	09 09 79 3a 00                                      ..y:.

00000239 <__c.2094>:
     239:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000245 <__c.2066>:
     245:	0a 00                                               ..

00000247 <__c.2064>:
     247:	64 6d 61 78 3a 00                                   dmax:.

0000024d <__c.2114>:
     24d:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

00000258 <__c.2111>:
     258:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000262 <__c.2108>:
     262:	50 61 75 73 65 0a 00                                Pause..

00000269 <__c.2105>:
     269:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000271 <__c.2102>:
     271:	47 6f 61 6c 20 41 0a 00                             Goal A..

00000279 <__c.2099>:
     279:	50 6c 61 79 20 0a 00                                Play ..

00000280 <__c.2095>:
     280:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

0000028c <__c.2086>:
     28c:	0a 00                                               ..

0000028e <__c.2084>:
     28e:	2c 20 00                                            , .

00000291 <__c.2082>:
     291:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

0000029a <__c.2078>:
     29a:	0a 00                                               ..

0000029c <__c.2076>:
     29c:	2c 20 00                                            , .

0000029f <__c.2074>:
     29f:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     2af:	3d 20 00                                            = .

000002b2 <__c.2071>:
     2b2:	0a 00                                               ..

000002b4 <__c.2069>:
     2b4:	2c 20 00                                            , .

000002b7 <__c.2067>:
     2b7:	67 6f 61 6c 20 3d 20 00                             goal = .

000002bf <__c.2060>:
     2bf:	0a 00                                               ..

000002c1 <__c.2058>:
     2c1:	73 74 61 74 65 3a 20 00                             state: .

000002c9 <descriptor_list>:
     2c9:	00 01 00 00 60 03 12 00 02 00 00 1d 03 43 00 03     ....`........C..
     2d9:	00 00 19 03 04 01 03 09 04 05 03 12 02 03 09 04     ................
     2e9:	fd 02 06 03 03 09 04 f3 02 08                       ..........

000002f3 <string3>:
     2f3:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000002fd <string2>:
     2fd:	06 03 4d 00 32 00 00 00                             ..M.2...

00000305 <string1>:
     305:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     315:	65 00 00 00                                         e...

00000319 <string0>:
     319:	04 03 09 04                                         ....

0000031d <config1_descriptor>:
     31d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     32d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     33d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     34d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     35d:	40 00 00                                            @..

00000360 <device_descriptor>:
     360:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     370:	03 01                                               ..

00000372 <endpoint_config_table>:
     372:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	da e0       	ldi	r29, 0x0A	; 10
     384:	de bf       	out	0x3e, r29	; 62
     386:	cd bf       	out	0x3d, r28	; 61

00000388 <__do_copy_data>:
     388:	11 e0       	ldi	r17, 0x01	; 1
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b1 e0       	ldi	r27, 0x01	; 1
     38e:	e8 ec       	ldi	r30, 0xC8	; 200
     390:	fb e3       	ldi	r31, 0x3B	; 59
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x10>
     394:	05 90       	lpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	ac 33       	cpi	r26, 0x3C	; 60
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0xc>

0000039e <__do_clear_bss>:
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	ac e3       	ldi	r26, 0x3C	; 60
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	a4 3b       	cpi	r26, 0xB4	; 180
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	0e 94 de 13 	call	0x27bc	; 0x27bc <main>
     3b2:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <_exit>

000003b6 <__bad_interrupt>:
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <init_ADC>:
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     3be:	ac e7       	ldi	r26, 0x7C	; 124
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	8c 91       	ld	r24, X
     3c4:	8f 77       	andi	r24, 0x7F	; 127
     3c6:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     3c8:	8c 91       	ld	r24, X
     3ca:	80 64       	ori	r24, 0x40	; 64
     3cc:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     3ce:	ea e7       	ldi	r30, 0x7A	; 122
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     3d8:	80 81       	ld	r24, Z
     3da:	82 60       	ori	r24, 0x02	; 2
     3dc:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     3de:	80 81       	ld	r24, Z
     3e0:	81 60       	ori	r24, 0x01	; 1
     3e2:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     3e4:	ce e7       	ldi	r28, 0x7E	; 126
     3e6:	d0 e0       	ldi	r29, 0x00	; 0
     3e8:	88 81       	ld	r24, Y
     3ea:	81 60       	ori	r24, 0x01	; 1
     3ec:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     3ee:	88 81       	ld	r24, Y
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     3f4:	cd e7       	ldi	r28, 0x7D	; 125
     3f6:	d0 e0       	ldi	r29, 0x00	; 0
     3f8:	88 81       	ld	r24, Y
     3fa:	82 60       	ori	r24, 0x02	; 2
     3fc:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     3fe:	88 81       	ld	r24, Y
     400:	84 60       	ori	r24, 0x04	; 4
     402:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     404:	88 81       	ld	r24, Y
     406:	88 60       	ori	r24, 0x08	; 8
     408:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     40a:	88 81       	ld	r24, Y
     40c:	80 61       	ori	r24, 0x10	; 16
     40e:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     410:	88 81       	ld	r24, Y
     412:	81 60       	ori	r24, 0x01	; 1
     414:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     416:	cb e7       	ldi	r28, 0x7B	; 123
     418:	d0 e0       	ldi	r29, 0x00	; 0
     41a:	88 81       	ld	r24, Y
     41c:	8f 7d       	andi	r24, 0xDF	; 223
     41e:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     420:	8c 91       	ld	r24, X
     422:	8b 7f       	andi	r24, 0xFB	; 251
     424:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     426:	8c 91       	ld	r24, X
     428:	8d 7f       	andi	r24, 0xFD	; 253
     42a:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     42c:	8c 91       	ld	r24, X
     42e:	8e 7f       	andi	r24, 0xFE	; 254
     430:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     432:	80 81       	ld	r24, Z
     434:	80 62       	ori	r24, 0x20	; 32
     436:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     438:	80 81       	ld	r24, Z
     43a:	88 60       	ori	r24, 0x08	; 8
     43c:	80 83       	st	Z, r24
	sei();
     43e:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     440:	80 81       	ld	r24, Z
     442:	80 68       	ori	r24, 0x80	; 128
     444:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     446:	80 81       	ld	r24, Z
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	80 83       	st	Z, r24
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <PID_Pho>:
			break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	6b 01       	movw	r12, r22
     46c:	7c 01       	movw	r14, r24
     46e:	49 01       	movw	r8, r18
     470:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     472:	e6 e4       	ldi	r30, 0x46	; 70
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	c0 81       	ld	r28, Z
     478:	d1 81       	ldd	r29, Z+1	; 0x01
     47a:	84 81       	ldd	r24, Z+4	; 0x04
     47c:	95 81       	ldd	r25, Z+5	; 0x05
     47e:	c8 0f       	add	r28, r24
     480:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     482:	22 81       	ldd	r18, Z+2	; 0x02
     484:	33 81       	ldd	r19, Z+3	; 0x03
     486:	86 81       	ldd	r24, Z+6	; 0x06
     488:	97 81       	ldd	r25, Z+7	; 0x07
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     48e:	c8 1b       	sub	r28, r24
     490:	d9 0b       	sbc	r29, r25
     492:	d0 93 b1 01 	sts	0x01B1, r29
     496:	c0 93 b0 01 	sts	0x01B0, r28
	diff_Pho = input - input_last;
     49a:	80 91 42 01 	lds	r24, 0x0142
     49e:	90 91 43 01 	lds	r25, 0x0143
     4a2:	8e 01       	movw	r16, r28
     4a4:	08 1b       	sub	r16, r24
     4a6:	19 0b       	sbc	r17, r25
     4a8:	10 93 3f 01 	sts	0x013F, r17
     4ac:	00 93 3e 01 	sts	0x013E, r16
	sum_Pho = sum_Pho + input;
     4b0:	80 91 40 01 	lds	r24, 0x0140
     4b4:	90 91 41 01 	lds	r25, 0x0141
     4b8:	8c 0f       	add	r24, r28
     4ba:	9d 1f       	adc	r25, r29
     4bc:	90 93 41 01 	sts	0x0141, r25
     4c0:	80 93 40 01 	sts	0x0140, r24
	output = Kp * input + Kd * diff_Pho;
     4c4:	be 01       	movw	r22, r28
     4c6:	0d 2e       	mov	r0, r29
     4c8:	00 0c       	add	r0, r0
     4ca:	88 0b       	sbc	r24, r24
     4cc:	99 0b       	sbc	r25, r25
     4ce:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
     4d2:	a7 01       	movw	r20, r14
     4d4:	96 01       	movw	r18, r12
     4d6:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     4da:	6b 01       	movw	r12, r22
     4dc:	7c 01       	movw	r14, r24
     4de:	b8 01       	movw	r22, r16
     4e0:	11 0f       	add	r17, r17
     4e2:	88 0b       	sbc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
     4ea:	a5 01       	movw	r20, r10
     4ec:	94 01       	movw	r18, r8
     4ee:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     4f2:	9b 01       	movw	r18, r22
     4f4:	ac 01       	movw	r20, r24
     4f6:	c7 01       	movw	r24, r14
     4f8:	b6 01       	movw	r22, r12
     4fa:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
     4fe:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
     502:	70 93 af 01 	sts	0x01AF, r23
     506:	60 93 ae 01 	sts	0x01AE, r22
	
	input_last = input;
     50a:	d0 93 43 01 	sts	0x0143, r29
     50e:	c0 93 42 01 	sts	0x0142, r28
	
	if(output>0){
     512:	16 16       	cp	r1, r22
     514:	17 06       	cpc	r1, r23
     516:	74 f5       	brge	.+92     	; 0x574 <PID_Pho+0x122>
		OCR1C = full_speed - abs(output);
     518:	9b 01       	movw	r18, r22
     51a:	77 23       	and	r23, r23
     51c:	24 f4       	brge	.+8      	; 0x526 <PID_Pho+0xd4>
     51e:	22 27       	eor	r18, r18
     520:	33 27       	eor	r19, r19
     522:	26 1b       	sub	r18, r22
     524:	37 0b       	sbc	r19, r23
     526:	8a e8       	ldi	r24, 0x8A	; 138
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	82 1b       	sub	r24, r18
     52c:	93 0b       	sbc	r25, r19
     52e:	90 93 8d 00 	sts	0x008D, r25
     532:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     536:	20 91 00 01 	lds	r18, 0x0100
     53a:	30 91 01 01 	lds	r19, 0x0101
     53e:	80 91 ae 01 	lds	r24, 0x01AE
     542:	90 91 af 01 	lds	r25, 0x01AF
     546:	99 23       	and	r25, r25
     548:	1c f4       	brge	.+6      	; 0x550 <PID_Pho+0xfe>
     54a:	91 95       	neg	r25
     54c:	81 95       	neg	r24
     54e:	91 09       	sbc	r25, r1
     550:	28 17       	cp	r18, r24
     552:	39 07       	cpc	r19, r25
     554:	44 f4       	brge	.+16     	; 0x566 <PID_Pho+0x114>
			OCR1C = full_speed - speed_diff_Pho;
     556:	8a e8       	ldi	r24, 0x8A	; 138
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	82 1b       	sub	r24, r18
     55c:	93 0b       	sbc	r25, r19
     55e:	90 93 8d 00 	sts	0x008D, r25
     562:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     566:	8a e8       	ldi	r24, 0x8A	; 138
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	90 93 8b 00 	sts	0x008B, r25
     56e:	80 93 8a 00 	sts	0x008A, r24
     572:	2d c0       	rjmp	.+90     	; 0x5ce <PID_Pho+0x17c>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     574:	9b 01       	movw	r18, r22
     576:	77 23       	and	r23, r23
     578:	24 f4       	brge	.+8      	; 0x582 <PID_Pho+0x130>
     57a:	22 27       	eor	r18, r18
     57c:	33 27       	eor	r19, r19
     57e:	26 1b       	sub	r18, r22
     580:	37 0b       	sbc	r19, r23
     582:	8a e8       	ldi	r24, 0x8A	; 138
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	82 1b       	sub	r24, r18
     588:	93 0b       	sbc	r25, r19
     58a:	90 93 8b 00 	sts	0x008B, r25
     58e:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     592:	20 91 00 01 	lds	r18, 0x0100
     596:	30 91 01 01 	lds	r19, 0x0101
     59a:	80 91 ae 01 	lds	r24, 0x01AE
     59e:	90 91 af 01 	lds	r25, 0x01AF
     5a2:	99 23       	and	r25, r25
     5a4:	1c f4       	brge	.+6      	; 0x5ac <PID_Pho+0x15a>
     5a6:	91 95       	neg	r25
     5a8:	81 95       	neg	r24
     5aa:	91 09       	sbc	r25, r1
     5ac:	28 17       	cp	r18, r24
     5ae:	39 07       	cpc	r19, r25
     5b0:	44 f4       	brge	.+16     	; 0x5c2 <PID_Pho+0x170>
			OCR1B = full_speed - speed_diff_Pho;
     5b2:	8a e8       	ldi	r24, 0x8A	; 138
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	82 1b       	sub	r24, r18
     5b8:	93 0b       	sbc	r25, r19
     5ba:	90 93 8b 00 	sts	0x008B, r25
     5be:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     5c2:	8a e8       	ldi	r24, 0x8A	; 138
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	90 93 8d 00 	sts	0x008D, r25
     5ca:	80 93 8c 00 	sts	0x008C, r24
	}
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	08 95       	ret

000005e8 <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	6b 01       	movw	r12, r22
     602:	7c 01       	movw	r14, r24
     604:	49 01       	movw	r8, r18
     606:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     608:	e6 e4       	ldi	r30, 0x46	; 70
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	c0 81       	ld	r28, Z
     60e:	d1 81       	ldd	r29, Z+1	; 0x01
     610:	84 81       	ldd	r24, Z+4	; 0x04
     612:	95 81       	ldd	r25, Z+5	; 0x05
     614:	c8 0f       	add	r28, r24
     616:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     618:	22 81       	ldd	r18, Z+2	; 0x02
     61a:	33 81       	ldd	r19, Z+3	; 0x03
     61c:	86 81       	ldd	r24, Z+6	; 0x06
     61e:	97 81       	ldd	r25, Z+7	; 0x07
     620:	82 0f       	add	r24, r18
     622:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     624:	c8 1b       	sub	r28, r24
     626:	d9 0b       	sbc	r29, r25
     628:	d0 93 b1 01 	sts	0x01B1, r29
     62c:	c0 93 b0 01 	sts	0x01B0, r28
	diff_stalk = input - input_last;
     630:	80 91 42 01 	lds	r24, 0x0142
     634:	90 91 43 01 	lds	r25, 0x0143
     638:	8e 01       	movw	r16, r28
     63a:	08 1b       	sub	r16, r24
     63c:	19 0b       	sbc	r17, r25
     63e:	10 93 3d 01 	sts	0x013D, r17
     642:	00 93 3c 01 	sts	0x013C, r16
	output = Kp * input + Kd * diff_stalk;
     646:	be 01       	movw	r22, r28
     648:	0d 2e       	mov	r0, r29
     64a:	00 0c       	add	r0, r0
     64c:	88 0b       	sbc	r24, r24
     64e:	99 0b       	sbc	r25, r25
     650:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
     654:	a7 01       	movw	r20, r14
     656:	96 01       	movw	r18, r12
     658:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     65c:	6b 01       	movw	r12, r22
     65e:	7c 01       	movw	r14, r24
     660:	b8 01       	movw	r22, r16
     662:	11 0f       	add	r17, r17
     664:	88 0b       	sbc	r24, r24
     666:	99 0b       	sbc	r25, r25
     668:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
     66c:	a5 01       	movw	r20, r10
     66e:	94 01       	movw	r18, r8
     670:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	c7 01       	movw	r24, r14
     67a:	b6 01       	movw	r22, r12
     67c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
     680:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
     684:	70 93 af 01 	sts	0x01AF, r23
     688:	60 93 ae 01 	sts	0x01AE, r22
	
	input_last = input;
     68c:	d0 93 43 01 	sts	0x0143, r29
     690:	c0 93 42 01 	sts	0x0142, r28
	
	if(abs(output) >= full_speed_stalk){
     694:	9b 01       	movw	r18, r22
     696:	77 23       	and	r23, r23
     698:	24 f4       	brge	.+8      	; 0x6a2 <PID_stalk+0xba>
     69a:	22 27       	eor	r18, r18
     69c:	33 27       	eor	r19, r19
     69e:	26 1b       	sub	r18, r22
     6a0:	37 0b       	sbc	r19, r23
     6a2:	2a 38       	cpi	r18, 0x8A	; 138
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	38 07       	cpc	r19, r24
     6a8:	5c f0       	brlt	.+22     	; 0x6c0 <PID_stalk+0xd8>
		OCR1C = full_speed_stalk;
     6aa:	8a e8       	ldi	r24, 0x8A	; 138
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	90 93 8d 00 	sts	0x008D, r25
     6b2:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     6b6:	90 93 8b 00 	sts	0x008B, r25
     6ba:	80 93 8a 00 	sts	0x008A, r24
     6be:	11 c0       	rjmp	.+34     	; 0x6e2 <PID_stalk+0xfa>
	}
	else{
		OCR1C = abs(output);
     6c0:	30 93 8d 00 	sts	0x008D, r19
     6c4:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     6c8:	80 91 ae 01 	lds	r24, 0x01AE
     6cc:	90 91 af 01 	lds	r25, 0x01AF
     6d0:	99 23       	and	r25, r25
     6d2:	1c f4       	brge	.+6      	; 0x6da <PID_stalk+0xf2>
     6d4:	91 95       	neg	r25
     6d6:	81 95       	neg	r24
     6d8:	91 09       	sbc	r25, r1
     6da:	90 93 8b 00 	sts	0x008B, r25
     6de:	80 93 8a 00 	sts	0x008A, r24
	}
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	08 95       	ret

000006fc <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	7c 01       	movw	r14, r24
	m_usb_tx_string("\r\n");
     712:	8a ea       	ldi	r24, 0xAA	; 170
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("Pho[0]");
     71a:	83 ea       	ldi	r24, 0xA3	; 163
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(Pho[0]);
     722:	c6 e4       	ldi	r28, 0x46	; 70
     724:	d1 e0       	ldi	r29, 0x01	; 1
     726:	88 81       	ld	r24, Y
     728:	99 81       	ldd	r25, Y+1	; 0x01
     72a:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     72e:	80 ea       	ldi	r24, 0xA0	; 160
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("Pho[1]");
     736:	89 e9       	ldi	r24, 0x99	; 153
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(Pho[1]);
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	9b 81       	ldd	r25, Y+3	; 0x03
     742:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     746:	86 e9       	ldi	r24, 0x96	; 150
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("Pho[2]");
     74e:	8f e8       	ldi	r24, 0x8F	; 143
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(Pho[2]);
     756:	8c 81       	ldd	r24, Y+4	; 0x04
     758:	9d 81       	ldd	r25, Y+5	; 0x05
     75a:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     75e:	8c e8       	ldi	r24, 0x8C	; 140
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("Pho[3]");
     766:	85 e8       	ldi	r24, 0x85	; 133
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(Pho[3]);
     76e:	8e 81       	ldd	r24, Y+6	; 0x06
     770:	9f 81       	ldd	r25, Y+7	; 0x07
     772:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     776:	82 e8       	ldi	r24, 0x82	; 130
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("Pho[4]");
     77e:	8b e7       	ldi	r24, 0x7B	; 123
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(Pho[4]);
     786:	88 85       	ldd	r24, Y+8	; 0x08
     788:	99 85       	ldd	r25, Y+9	; 0x09
     78a:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     78e:	88 e7       	ldi	r24, 0x78	; 120
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("Pho[5]");
     796:	81 e7       	ldi	r24, 0x71	; 113
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(Pho[5]);
     79e:	8a 85       	ldd	r24, Y+10	; 0x0a
     7a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a2:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7a6:	8e e6       	ldi	r24, 0x6E	; 110
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("Pho[6]");
     7ae:	87 e6       	ldi	r24, 0x67	; 103
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(Pho[6]);
     7b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7ba:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7be:	84 e6       	ldi	r24, 0x64	; 100
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_string("\r\n");
     7c6:	81 e6       	ldi	r24, 0x61	; 97
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     7ce:	28 81       	ld	r18, Y
     7d0:	39 81       	ldd	r19, Y+1	; 0x01
     7d2:	8c 81       	ldd	r24, Y+4	; 0x04
     7d4:	9d 81       	ldd	r25, Y+5	; 0x05
     7d6:	82 0f       	add	r24, r18
     7d8:	93 1f       	adc	r25, r19
     7da:	28 85       	ldd	r18, Y+8	; 0x08
     7dc:	39 85       	ldd	r19, Y+9	; 0x09
     7de:	82 0f       	add	r24, r18
     7e0:	93 1f       	adc	r25, r19
     7e2:	e3 e0       	ldi	r30, 0x03	; 3
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	bf 01       	movw	r22, r30
     7e8:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__divmodhi4>
     7ec:	8b 01       	movw	r16, r22
     7ee:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     7f0:	2a 81       	ldd	r18, Y+2	; 0x02
     7f2:	3b 81       	ldd	r19, Y+3	; 0x03
     7f4:	8e 81       	ldd	r24, Y+6	; 0x06
     7f6:	9f 81       	ldd	r25, Y+7	; 0x07
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	2a 85       	ldd	r18, Y+10	; 0x0a
     7fe:	3b 85       	ldd	r19, Y+11	; 0x0b
     800:	82 0f       	add	r24, r18
     802:	93 1f       	adc	r25, r19
     804:	bf 01       	movw	r22, r30
     806:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__divmodhi4>
     80a:	eb 01       	movw	r28, r22
     80c:	5b 01       	movw	r10, r22
	
	m_usb_tx_string("mean024, mean135: ");
     80e:	8e e4       	ldi	r24, 0x4E	; 78
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(mean024);
     816:	c8 01       	movw	r24, r16
     818:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string(", ");
     81c:	8b e4       	ldi	r24, 0x4B	; 75
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(mean135);
     824:	ce 01       	movw	r24, r28
     826:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
     82a:	89 e4       	ldi	r24, 0x49	; 73
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	switch(state){
     832:	42 e0       	ldi	r20, 0x02	; 2
     834:	e4 16       	cp	r14, r20
     836:	f1 04       	cpc	r15, r1
     838:	31 f0       	breq	.+12     	; 0x846 <findPuck+0x14a>
     83a:	55 e0       	ldi	r21, 0x05	; 5
     83c:	e5 16       	cp	r14, r21
     83e:	f1 04       	cpc	r15, r1
     840:	09 f4       	brne	.+2      	; 0x844 <findPuck+0x148>
     842:	b5 c0       	rjmp	.+362    	; 0x9ae <findPuck+0x2b2>
     844:	06 c1       	rjmp	.+524    	; 0xa52 <findPuck+0x356>
		case 2:
			if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     846:	c8 01       	movw	r24, r16
     848:	8c 1b       	sub	r24, r28
     84a:	9d 0b       	sbc	r25, r29
     84c:	c3 97       	sbiw	r24, 0x33	; 51
     84e:	74 f4       	brge	.+28     	; 0x86c <findPuck+0x170>
     850:	c0 17       	cp	r28, r16
     852:	d1 07       	cpc	r29, r17
     854:	0c f0       	brlt	.+2      	; 0x858 <findPuck+0x15c>
     856:	4c c0       	rjmp	.+152    	; 0x8f0 <findPuck+0x1f4>
     858:	e6 e4       	ldi	r30, 0x46	; 70
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	20 85       	ldd	r18, Z+8	; 0x08
     85e:	31 85       	ldd	r19, Z+9	; 0x09
     860:	84 81       	ldd	r24, Z+4	; 0x04
     862:	95 81       	ldd	r25, Z+5	; 0x05
     864:	82 17       	cp	r24, r18
     866:	93 07       	cpc	r25, r19
     868:	0c f0       	brlt	.+2      	; 0x86c <findPuck+0x170>
     86a:	42 c0       	rjmp	.+132    	; 0x8f0 <findPuck+0x1f4>
				m_usb_tx_string("turn left\n");
     86c:	8e e3       	ldi	r24, 0x3E	; 62
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				if(mean024 > revThres){
     874:	89 e9       	ldi	r24, 0x99	; 153
     876:	c8 16       	cp	r12, r24
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	d8 06       	cpc	r13, r24
     87c:	6c f0       	brlt	.+26     	; 0x898 <findPuck+0x19c>
					set(PORTB, 0);
     87e:	28 9a       	sbi	0x05, 0	; 5
					clear(PORTB, 1);
     880:	29 98       	cbi	0x05, 1	; 5
					OCR1C = full_speed;
     882:	8a e8       	ldi	r24, 0x8A	; 138
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	90 93 8d 00 	sts	0x008D, r25
     88a:	80 93 8c 00 	sts	0x008C, r24
					OCR1B = full_speed;
     88e:	90 93 8b 00 	sts	0x008B, r25
     892:	80 93 8a 00 	sts	0x008A, r24
     896:	dd c0       	rjmp	.+442    	; 0xa52 <findPuck+0x356>
				}
				else{
					set(PORTB, 0);
     898:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     89a:	29 9a       	sbi	0x05, 1	; 5
					OCR1C = full_speed - speed_diff_Pho;
     89c:	8a e8       	ldi	r24, 0x8A	; 138
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	20 91 00 01 	lds	r18, 0x0100
     8a4:	30 91 01 01 	lds	r19, 0x0101
     8a8:	ac 01       	movw	r20, r24
     8aa:	42 1b       	sub	r20, r18
     8ac:	53 0b       	sbc	r21, r19
     8ae:	50 93 8d 00 	sts	0x008D, r21
     8b2:	40 93 8c 00 	sts	0x008C, r20
					OCR1B = full_speed;
     8b6:	90 93 8b 00 	sts	0x008B, r25
     8ba:	80 93 8a 00 	sts	0x008A, r24
					if(Pho[2]>Pho[4]){
     8be:	e6 e4       	ldi	r30, 0x46	; 70
     8c0:	f1 e0       	ldi	r31, 0x01	; 1
     8c2:	24 81       	ldd	r18, Z+4	; 0x04
     8c4:	35 81       	ldd	r19, Z+5	; 0x05
     8c6:	80 85       	ldd	r24, Z+8	; 0x08
     8c8:	91 85       	ldd	r25, Z+9	; 0x09
     8ca:	82 17       	cp	r24, r18
     8cc:	93 07       	cpc	r25, r19
     8ce:	0c f0       	brlt	.+2      	; 0x8d2 <findPuck+0x1d6>
     8d0:	c0 c0       	rjmp	.+384    	; 0xa52 <findPuck+0x356>
						m_usb_tx_string("PID\n");
     8d2:	89 e3       	ldi	r24, 0x39	; 57
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e7       	ldi	r20, 0x70	; 112
     8e0:	51 e4       	ldi	r21, 0x41	; 65
     8e2:	6a e9       	ldi	r22, 0x9A	; 154
     8e4:	79 e9       	ldi	r23, 0x99	; 153
     8e6:	89 e9       	ldi	r24, 0x99	; 153
     8e8:	9e e3       	ldi	r25, 0x3E	; 62
     8ea:	0e 94 29 02 	call	0x452	; 0x452 <PID_Pho>
     8ee:	b1 c0       	rjmp	.+354    	; 0xa52 <findPuck+0x356>
					}
				}
			}
		
			else {
				if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     8f0:	c0 1b       	sub	r28, r16
     8f2:	d1 0b       	sbc	r29, r17
     8f4:	e3 97       	sbiw	r28, 0x33	; 51
     8f6:	74 f4       	brge	.+28     	; 0x914 <findPuck+0x218>
     8f8:	ca 14       	cp	r12, r10
     8fa:	db 04       	cpc	r13, r11
     8fc:	0c f0       	brlt	.+2      	; 0x900 <findPuck+0x204>
     8fe:	4c c0       	rjmp	.+152    	; 0x998 <findPuck+0x29c>
     900:	e6 e4       	ldi	r30, 0x46	; 70
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	22 85       	ldd	r18, Z+10	; 0x0a
     906:	33 85       	ldd	r19, Z+11	; 0x0b
     908:	86 81       	ldd	r24, Z+6	; 0x06
     90a:	97 81       	ldd	r25, Z+7	; 0x07
     90c:	82 17       	cp	r24, r18
     90e:	93 07       	cpc	r25, r19
     910:	0c f0       	brlt	.+2      	; 0x914 <findPuck+0x218>
     912:	42 c0       	rjmp	.+132    	; 0x998 <findPuck+0x29c>
					m_usb_tx_string("turn right\n");
     914:	8d e2       	ldi	r24, 0x2D	; 45
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
					if(mean135 > revThres){
     91c:	59 e9       	ldi	r21, 0x99	; 153
     91e:	a5 16       	cp	r10, r21
     920:	58 e0       	ldi	r21, 0x08	; 8
     922:	b5 06       	cpc	r11, r21
     924:	6c f0       	brlt	.+26     	; 0x940 <findPuck+0x244>
						set(PORTB, 1);
     926:	29 9a       	sbi	0x05, 1	; 5
						clear(PORTB, 0);
     928:	28 98       	cbi	0x05, 0	; 5
						OCR1B = full_speed;
     92a:	8a e8       	ldi	r24, 0x8A	; 138
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	90 93 8b 00 	sts	0x008B, r25
     932:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed;
     936:	90 93 8d 00 	sts	0x008D, r25
     93a:	80 93 8c 00 	sts	0x008C, r24
     93e:	89 c0       	rjmp	.+274    	; 0xa52 <findPuck+0x356>
					}
					else{
						set(PORTB, 0);
     940:	28 9a       	sbi	0x05, 0	; 5
						set(PORTB, 1);
     942:	29 9a       	sbi	0x05, 1	; 5
						OCR1B = full_speed - speed_diff_Pho;
     944:	8a e8       	ldi	r24, 0x8A	; 138
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	20 91 00 01 	lds	r18, 0x0100
     94c:	30 91 01 01 	lds	r19, 0x0101
     950:	ac 01       	movw	r20, r24
     952:	42 1b       	sub	r20, r18
     954:	53 0b       	sbc	r21, r19
     956:	50 93 8b 00 	sts	0x008B, r21
     95a:	40 93 8a 00 	sts	0x008A, r20
						OCR1C = full_speed;
     95e:	90 93 8d 00 	sts	0x008D, r25
     962:	80 93 8c 00 	sts	0x008C, r24
						if(Pho[3]>Pho[5]){
     966:	e6 e4       	ldi	r30, 0x46	; 70
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	26 81       	ldd	r18, Z+6	; 0x06
     96c:	37 81       	ldd	r19, Z+7	; 0x07
     96e:	82 85       	ldd	r24, Z+10	; 0x0a
     970:	93 85       	ldd	r25, Z+11	; 0x0b
     972:	82 17       	cp	r24, r18
     974:	93 07       	cpc	r25, r19
     976:	0c f0       	brlt	.+2      	; 0x97a <findPuck+0x27e>
     978:	6c c0       	rjmp	.+216    	; 0xa52 <findPuck+0x356>
							m_usb_tx_string("PID\n");
     97a:	88 e2       	ldi	r24, 0x28	; 40
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
							PID_Pho(Kp_Pho, Kd_Pho);
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e7       	ldi	r20, 0x70	; 112
     988:	51 e4       	ldi	r21, 0x41	; 65
     98a:	6a e9       	ldi	r22, 0x9A	; 154
     98c:	79 e9       	ldi	r23, 0x99	; 153
     98e:	89 e9       	ldi	r24, 0x99	; 153
     990:	9e e3       	ldi	r25, 0x3E	; 62
     992:	0e 94 29 02 	call	0x452	; 0x452 <PID_Pho>
     996:	5d c0       	rjmp	.+186    	; 0xa52 <findPuck+0x356>
						}
					}
				}
				else{
					PID_Pho(3*Kp_Pho, Kd_Pho);
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e7       	ldi	r20, 0x70	; 112
     99e:	51 e4       	ldi	r21, 0x41	; 65
     9a0:	67 e6       	ldi	r22, 0x67	; 103
     9a2:	76 e6       	ldi	r23, 0x66	; 102
     9a4:	86 e6       	ldi	r24, 0x66	; 102
     9a6:	9f e3       	ldi	r25, 0x3F	; 63
     9a8:	0e 94 29 02 	call	0x452	; 0x452 <PID_Pho>
     9ac:	52 c0       	rjmp	.+164    	; 0xa52 <findPuck+0x356>
				}
			}
			break;
		case 5:
			if(mean024 - mean135 > strThres){
     9ae:	c8 01       	movw	r24, r16
     9b0:	8c 1b       	sub	r24, r28
     9b2:	9d 0b       	sbc	r25, r29
     9b4:	c3 97       	sbiw	r24, 0x33	; 51
     9b6:	2c f1       	brlt	.+74     	; 0xa02 <findPuck+0x306>
				m_usb_tx_string("turn left\n");
     9b8:	8d e1       	ldi	r24, 0x1D	; 29
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				set(PORTB, 0);
     9c0:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
     9c2:	29 98       	cbi	0x05, 1	; 5
				if (Pho[2] > Pho[4]){
     9c4:	e6 e4       	ldi	r30, 0x46	; 70
     9c6:	f1 e0       	ldi	r31, 0x01	; 1
     9c8:	24 81       	ldd	r18, Z+4	; 0x04
     9ca:	35 81       	ldd	r19, Z+5	; 0x05
     9cc:	80 85       	ldd	r24, Z+8	; 0x08
     9ce:	91 85       	ldd	r25, Z+9	; 0x09
     9d0:	82 17       	cp	r24, r18
     9d2:	93 07       	cpc	r25, r19
     9d4:	5c f4       	brge	.+22     	; 0x9ec <findPuck+0x2f0>
					PID_stalk(Kp_stalk, Kd_stalk); 
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e4       	ldi	r21, 0x40	; 64
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	80 e8       	ldi	r24, 0x80	; 128
     9e4:	9f e3       	ldi	r25, 0x3F	; 63
     9e6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <PID_stalk>
     9ea:	33 c0       	rjmp	.+102    	; 0xa52 <findPuck+0x356>
				}
				else{
					OCR1B = full_speed_stalk;
     9ec:	8a e8       	ldi	r24, 0x8A	; 138
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	90 93 8b 00 	sts	0x008B, r25
     9f4:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
     9f8:	90 93 8d 00 	sts	0x008D, r25
     9fc:	80 93 8c 00 	sts	0x008C, r24
     a00:	28 c0       	rjmp	.+80     	; 0xa52 <findPuck+0x356>
				}
			}
			else{
				if(mean135 - mean024 > strThres){
     a02:	c0 1b       	sub	r28, r16
     a04:	d1 0b       	sbc	r29, r17
     a06:	e3 97       	sbiw	r28, 0x33	; 51
     a08:	24 f1       	brlt	.+72     	; 0xa52 <findPuck+0x356>
					m_usb_tx_string("turn right\n");
     a0a:	81 e1       	ldi	r24, 0x11	; 17
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
					clear(PORTB, 0);
     a12:	28 98       	cbi	0x05, 0	; 5
					set(PORTB, 1);
     a14:	29 9a       	sbi	0x05, 1	; 5
					if (Pho[3] > Pho[5]){
     a16:	e6 e4       	ldi	r30, 0x46	; 70
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	26 81       	ldd	r18, Z+6	; 0x06
     a1c:	37 81       	ldd	r19, Z+7	; 0x07
     a1e:	82 85       	ldd	r24, Z+10	; 0x0a
     a20:	93 85       	ldd	r25, Z+11	; 0x0b
     a22:	82 17       	cp	r24, r18
     a24:	93 07       	cpc	r25, r19
     a26:	5c f4       	brge	.+22     	; 0xa3e <findPuck+0x342>
						PID_stalk(Kp_stalk, Kd_stalk);
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e4       	ldi	r21, 0x40	; 64
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	9f e3       	ldi	r25, 0x3F	; 63
     a38:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <PID_stalk>
     a3c:	0a c0       	rjmp	.+20     	; 0xa52 <findPuck+0x356>
					}
					else{
						OCR1B = full_speed_stalk;
     a3e:	8a e8       	ldi	r24, 0x8A	; 138
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	90 93 8b 00 	sts	0x008B, r25
     a46:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed_stalk;
     a4a:	90 93 8d 00 	sts	0x008D, r25
     a4e:	80 93 8c 00 	sts	0x008C, r24
			break;
		default:
			break;
	}
	
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	08 95       	ret

00000a68 <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
     a68:	1f 92       	push	r1
     a6a:	0f 92       	push	r0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	0f 92       	push	r0
     a70:	11 24       	eor	r1, r1
     a72:	8f 92       	push	r8
     a74:	9f 92       	push	r9
     a76:	af 92       	push	r10
     a78:	bf 92       	push	r11
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     a9e:	c0 91 44 01 	lds	r28, 0x0144
     aa2:	d0 91 45 01 	lds	r29, 0x0145
     aa6:	e0 90 78 00 	lds	r14, 0x0078
     aaa:	f0 90 79 00 	lds	r15, 0x0079
     aae:	8e 01       	movw	r16, r28
     ab0:	00 0f       	add	r16, r16
     ab2:	11 1f       	adc	r17, r17
     ab4:	0a 5b       	subi	r16, 0xBA	; 186
     ab6:	1e 4f       	sbci	r17, 0xFE	; 254
     ab8:	f8 01       	movw	r30, r16
     aba:	60 81       	ld	r22, Z
     abc:	71 81       	ldd	r23, Z+1	; 0x01
     abe:	07 2e       	mov	r0, r23
     ac0:	00 0c       	add	r0, r0
     ac2:	88 0b       	sbc	r24, r24
     ac4:	99 0b       	sbc	r25, r25
     ac6:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
     aca:	2d ec       	ldi	r18, 0xCD	; 205
     acc:	3c ec       	ldi	r19, 0xCC	; 204
     ace:	4c e4       	ldi	r20, 0x4C	; 76
     ad0:	5f e3       	ldi	r21, 0x3F	; 63
     ad2:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     ad6:	4b 01       	movw	r8, r22
     ad8:	5c 01       	movw	r10, r24
     ada:	b7 01       	movw	r22, r14
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
     ae4:	2c ec       	ldi	r18, 0xCC	; 204
     ae6:	3c ec       	ldi	r19, 0xCC	; 204
     ae8:	4c e4       	ldi	r20, 0x4C	; 76
     aea:	5e e3       	ldi	r21, 0x3E	; 62
     aec:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     af0:	9b 01       	movw	r18, r22
     af2:	ac 01       	movw	r20, r24
     af4:	c5 01       	movw	r24, r10
     af6:	b4 01       	movw	r22, r8
     af8:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
     afc:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
     b00:	f8 01       	movw	r30, r16
     b02:	71 83       	std	Z+1, r23	; 0x01
     b04:	60 83       	st	Z, r22
	
	i = i + 1;
     b06:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     b08:	c8 30       	cpi	r28, 0x08	; 8
     b0a:	d1 05       	cpc	r29, r1
     b0c:	2c f4       	brge	.+10     	; 0xb18 <__stack+0x19>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     b0e:	d0 93 45 01 	sts	0x0145, r29
     b12:	c0 93 44 01 	sts	0x0144, r28
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x21>
	if(i > 7){
		i = 0;
     b18:	10 92 45 01 	sts	0x0145, r1
     b1c:	10 92 44 01 	sts	0x0144, r1
	}
	
	clear(ADCSRA, ADEN);
     b20:	ea e7       	ldi	r30, 0x7A	; 122
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	8f 77       	andi	r24, 0x7F	; 127
     b28:	80 83       	st	Z, r24
	switch(i){
     b2a:	e0 91 44 01 	lds	r30, 0x0144
     b2e:	f0 91 45 01 	lds	r31, 0x0145
     b32:	e7 30       	cpi	r30, 0x07	; 7
     b34:	f1 05       	cpc	r31, r1
     b36:	08 f0       	brcs	.+2      	; 0xb3a <__stack+0x3b>
     b38:	7a c0       	rjmp	.+244    	; 0xc2e <__stack+0x12f>
     b3a:	ea 5a       	subi	r30, 0xAA	; 170
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     b42:	eb e7       	ldi	r30, 0x7B	; 123
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 7d       	andi	r24, 0xDF	; 223
     b4a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b4c:	ec e7       	ldi	r30, 0x7C	; 124
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	8b 7f       	andi	r24, 0xFB	; 251
     b54:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b56:	80 81       	ld	r24, Z
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     b5c:	80 81       	ld	r24, Z
     b5e:	8e 7f       	andi	r24, 0xFE	; 254
     b60:	80 83       	st	Z, r24
			break;
     b62:	65 c0       	rjmp	.+202    	; 0xc2e <__stack+0x12f>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     b64:	eb e7       	ldi	r30, 0x7B	; 123
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7d       	andi	r24, 0xDF	; 223
     b6c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b6e:	ec e7       	ldi	r30, 0x7C	; 124
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8b 7f       	andi	r24, 0xFB	; 251
     b76:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b78:	80 81       	ld	r24, Z
     b7a:	8d 7f       	andi	r24, 0xFD	; 253
     b7c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     b7e:	80 81       	ld	r24, Z
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	80 83       	st	Z, r24
			break;
     b84:	54 c0       	rjmp	.+168    	; 0xc2e <__stack+0x12f>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     b86:	eb e7       	ldi	r30, 0x7B	; 123
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b90:	ec e7       	ldi	r30, 0x7C	; 124
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8b 7f       	andi	r24, 0xFB	; 251
     b98:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b9a:	80 81       	ld	r24, Z
     b9c:	8d 7f       	andi	r24, 0xFD	; 253
     b9e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     ba0:	80 81       	ld	r24, Z
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 83       	st	Z, r24
			break;
     ba6:	43 c0       	rjmp	.+134    	; 0xc2e <__stack+0x12f>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     ba8:	eb e7       	ldi	r30, 0x7B	; 123
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	80 62       	ori	r24, 0x20	; 32
     bb0:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     bb2:	ec e7       	ldi	r30, 0x7C	; 124
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8b 7f       	andi	r24, 0xFB	; 251
     bba:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     bbc:	80 81       	ld	r24, Z
     bbe:	82 60       	ori	r24, 0x02	; 2
     bc0:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     bc2:	80 81       	ld	r24, Z
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	80 83       	st	Z, r24
			break;
     bc8:	32 c0       	rjmp	.+100    	; 0xc2e <__stack+0x12f>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     bca:	eb e7       	ldi	r30, 0x7B	; 123
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	80 62       	ori	r24, 0x20	; 32
     bd2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     bd4:	ec e7       	ldi	r30, 0x7C	; 124
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8b 7f       	andi	r24, 0xFB	; 251
     bdc:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     bde:	80 81       	ld	r24, Z
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     be4:	80 81       	ld	r24, Z
     be6:	81 60       	ori	r24, 0x01	; 1
     be8:	80 83       	st	Z, r24
			break;
     bea:	21 c0       	rjmp	.+66     	; 0xc2e <__stack+0x12f>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     bec:	eb e7       	ldi	r30, 0x7B	; 123
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 62       	ori	r24, 0x20	; 32
     bf4:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     bf6:	ec e7       	ldi	r30, 0x7C	; 124
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	84 60       	ori	r24, 0x04	; 4
     bfe:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     c00:	80 81       	ld	r24, Z
     c02:	8d 7f       	andi	r24, 0xFD	; 253
     c04:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     c06:	80 81       	ld	r24, Z
     c08:	8e 7f       	andi	r24, 0xFE	; 254
     c0a:	80 83       	st	Z, r24
			break;
     c0c:	10 c0       	rjmp	.+32     	; 0xc2e <__stack+0x12f>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     c0e:	eb e7       	ldi	r30, 0x7B	; 123
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 62       	ori	r24, 0x20	; 32
     c16:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     c18:	ec e7       	ldi	r30, 0x7C	; 124
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8b 7f       	andi	r24, 0xFB	; 251
     c20:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     c22:	80 81       	ld	r24, Z
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     c28:	80 81       	ld	r24, Z
     c2a:	8e 7f       	andi	r24, 0xFE	; 254
     c2c:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     c2e:	ea e7       	ldi	r30, 0x7A	; 122
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	80 68       	ori	r24, 0x80	; 128
     c36:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     c38:	80 81       	ld	r24, Z
     c3a:	80 64       	ori	r24, 0x40	; 64
     c3c:	80 83       	st	Z, r24
	
}
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	bf 90       	pop	r11
     c64:	af 90       	pop	r10
     c66:	9f 90       	pop	r9
     c68:	8f 90       	pop	r8
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <deterState>:

void deterState(int *state){
	if (*state == 2 || *state == 3){
     c74:	fc 01       	movw	r30, r24
     c76:	20 81       	ld	r18, Z
     c78:	31 81       	ldd	r19, Z+1	; 0x01
     c7a:	22 50       	subi	r18, 0x02	; 2
     c7c:	31 09       	sbc	r19, r1
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	e0 f4       	brcc	.+56     	; 0xcbc <deterState+0x48>
		if (Pho[6] >gotThres){
     c84:	20 91 52 01 	lds	r18, 0x0152
     c88:	30 91 53 01 	lds	r19, 0x0153
     c8c:	25 38       	cpi	r18, 0x85	; 133
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	38 07       	cpc	r19, r24
     c92:	4c f0       	brlt	.+18     	; 0xca6 <deterState+0x32>
			
			*state = 3;
     c94:	23 e0       	ldi	r18, 0x03	; 3
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	31 83       	std	Z+1, r19	; 0x01
     c9a:	20 83       	st	Z, r18
			
			m_usb_tx_string("got the puck!\n");
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
     ca4:	08 95       	ret
			
		}
		else{
			if(Pho[6] < loseThres){
     ca6:	24 38       	cpi	r18, 0x84	; 132
     ca8:	33 40       	sbci	r19, 0x03	; 3
     caa:	44 f4       	brge	.+16     	; 0xcbc <deterState+0x48>
				*state = 2;
     cac:	22 e0       	ldi	r18, 0x02	; 2
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	31 83       	std	Z+1, r19	; 0x01
     cb2:	20 83       	st	Z, r18
				m_usb_tx_string("lost the puck!\n");
     cb4:	82 ef       	ldi	r24, 0xF2	; 242
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
     cbc:	08 95       	ret

00000cbe <ifGotoPuck>:
		}
	}
}

void ifGotoPuck(int *state, float *dir){
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres){
     cbe:	e6 e4       	ldi	r30, 0x46	; 70
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	40 81       	ld	r20, Z
     cc4:	51 81       	ldd	r21, Z+1	; 0x01
     cc6:	22 81       	ldd	r18, Z+2	; 0x02
     cc8:	33 81       	ldd	r19, Z+3	; 0x03
     cca:	24 0f       	add	r18, r20
     ccc:	35 1f       	adc	r19, r21
     cce:	44 81       	ldd	r20, Z+4	; 0x04
     cd0:	55 81       	ldd	r21, Z+5	; 0x05
     cd2:	24 0f       	add	r18, r20
     cd4:	35 1f       	adc	r19, r21
     cd6:	46 81       	ldd	r20, Z+6	; 0x06
     cd8:	57 81       	ldd	r21, Z+7	; 0x07
     cda:	24 0f       	add	r18, r20
     cdc:	35 1f       	adc	r19, r21
     cde:	40 91 02 01 	lds	r20, 0x0102
     ce2:	50 91 03 01 	lds	r21, 0x0103
     ce6:	42 17       	cp	r20, r18
     ce8:	53 07       	cpc	r21, r19
     cea:	2c f4       	brge	.+10     	; 0xcf6 <ifGotoPuck+0x38>
		*state = 2;
     cec:	22 e0       	ldi	r18, 0x02	; 2
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	fc 01       	movw	r30, r24
     cf2:	31 83       	std	Z+1, r19	; 0x01
     cf4:	20 83       	st	Z, r18
     cf6:	08 95       	ret

00000cf8 <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     cf8:	4f 92       	push	r4
     cfa:	5f 92       	push	r5
     cfc:	6f 92       	push	r6
     cfe:	7f 92       	push	r7
     d00:	8f 92       	push	r8
     d02:	9f 92       	push	r9
     d04:	af 92       	push	r10
     d06:	bf 92       	push	r11
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	60 97       	sbiw	r28, 0x10	; 16
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	2b 01       	movw	r4, r22
     d2a:	3c 01       	movw	r6, r24
     d2c:	29 83       	std	Y+1, r18	; 0x01
     d2e:	3a 83       	std	Y+2, r19	; 0x02
     d30:	4b 83       	std	Y+3, r20	; 0x03
     d32:	5c 83       	std	Y+4, r21	; 0x04
     d34:	58 01       	movw	r10, r16
     d36:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     d38:	f5 01       	movw	r30, r10
     d3a:	c0 80       	ld	r12, Z
     d3c:	d1 80       	ldd	r13, Z+1	; 0x01
     d3e:	e2 80       	ldd	r14, Z+2	; 0x02
     d40:	f3 80       	ldd	r15, Z+3	; 0x03
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c7 01       	movw	r24, r14
     d48:	b6 01       	movw	r22, r12
     d4a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     d4e:	f8 01       	movw	r30, r16
     d50:	20 81       	ld	r18, Z
     d52:	31 81       	ldd	r19, Z+1	; 0x01
     d54:	42 81       	ldd	r20, Z+2	; 0x02
     d56:	53 81       	ldd	r21, Z+3	; 0x03
     d58:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
     d5c:	6d 83       	std	Y+5, r22	; 0x05
     d5e:	7e 83       	std	Y+6, r23	; 0x06
     d60:	8f 83       	std	Y+7, r24	; 0x07
     d62:	98 87       	std	Y+8, r25	; 0x08
     d64:	f5 01       	movw	r30, r10
     d66:	84 80       	ldd	r8, Z+4	; 0x04
     d68:	95 80       	ldd	r9, Z+5	; 0x05
     d6a:	a6 80       	ldd	r10, Z+6	; 0x06
     d6c:	b7 80       	ldd	r11, Z+7	; 0x07
     d6e:	29 81       	ldd	r18, Y+1	; 0x01
     d70:	3a 81       	ldd	r19, Y+2	; 0x02
     d72:	4b 81       	ldd	r20, Y+3	; 0x03
     d74:	5c 81       	ldd	r21, Y+4	; 0x04
     d76:	c5 01       	movw	r24, r10
     d78:	b4 01       	movw	r22, r8
     d7a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     d7e:	69 87       	std	Y+9, r22	; 0x09
     d80:	7a 87       	std	Y+10, r23	; 0x0a
     d82:	8b 87       	std	Y+11, r24	; 0x0b
     d84:	9c 87       	std	Y+12, r25	; 0x0c
     d86:	9b 01       	movw	r18, r22
     d88:	ac 01       	movw	r20, r24
     d8a:	6d 81       	ldd	r22, Y+5	; 0x05
     d8c:	7e 81       	ldd	r23, Y+6	; 0x06
     d8e:	8f 81       	ldd	r24, Y+7	; 0x07
     d90:	98 85       	ldd	r25, Y+8	; 0x08
     d92:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
     d96:	6d 87       	std	Y+13, r22	; 0x0d
     d98:	7e 87       	std	Y+14, r23	; 0x0e
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
     d9c:	98 8b       	std	Y+16, r25	; 0x10
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     d9e:	a5 01       	movw	r20, r10
     da0:	94 01       	movw	r18, r8
     da2:	c3 01       	movw	r24, r6
     da4:	b2 01       	movw	r22, r4
     da6:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     daa:	f8 01       	movw	r30, r16
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
     db8:	2b 01       	movw	r4, r22
     dba:	3c 01       	movw	r6, r24
     dbc:	29 81       	ldd	r18, Y+1	; 0x01
     dbe:	3a 81       	ldd	r19, Y+2	; 0x02
     dc0:	4b 81       	ldd	r20, Y+3	; 0x03
     dc2:	5c 81       	ldd	r21, Y+4	; 0x04
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     dcc:	69 83       	std	Y+1, r22	; 0x01
     dce:	7a 83       	std	Y+2, r23	; 0x02
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	9c 83       	std	Y+4, r25	; 0x04
     dd4:	9b 01       	movw	r18, r22
     dd6:	ac 01       	movw	r20, r24
     dd8:	c3 01       	movw	r24, r6
     dda:	b2 01       	movw	r22, r4
     ddc:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
     de0:	6b 01       	movw	r12, r22
     de2:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     de4:	29 85       	ldd	r18, Y+9	; 0x09
     de6:	3a 85       	ldd	r19, Y+10	; 0x0a
     de8:	4b 85       	ldd	r20, Y+11	; 0x0b
     dea:	5c 85       	ldd	r21, Y+12	; 0x0c
     dec:	6d 81       	ldd	r22, Y+5	; 0x05
     dee:	7e 81       	ldd	r23, Y+6	; 0x06
     df0:	8f 81       	ldd	r24, Y+7	; 0x07
     df2:	98 85       	ldd	r25, Y+8	; 0x08
     df4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
     df8:	6d 83       	std	Y+5, r22	; 0x05
     dfa:	7e 83       	std	Y+6, r23	; 0x06
     dfc:	8f 83       	std	Y+7, r24	; 0x07
     dfe:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     e00:	29 81       	ldd	r18, Y+1	; 0x01
     e02:	3a 81       	ldd	r19, Y+2	; 0x02
     e04:	4b 81       	ldd	r20, Y+3	; 0x03
     e06:	5c 81       	ldd	r21, Y+4	; 0x04
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     e14:	2d 85       	ldd	r18, Y+13	; 0x0d
     e16:	3e 85       	ldd	r19, Y+14	; 0x0e
     e18:	4f 85       	ldd	r20, Y+15	; 0x0f
     e1a:	58 89       	ldd	r21, Y+16	; 0x10
     e1c:	ca 01       	movw	r24, r20
     e1e:	b9 01       	movw	r22, r18
     e20:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     e24:	4b 01       	movw	r8, r22
     e26:	5c 01       	movw	r10, r24
     e28:	a7 01       	movw	r20, r14
     e2a:	96 01       	movw	r18, r12
     e2c:	c7 01       	movw	r24, r14
     e2e:	b6 01       	movw	r22, r12
     e30:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c5 01       	movw	r24, r10
     e3a:	b4 01       	movw	r22, r8
     e3c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
     e40:	6b 01       	movw	r12, r22
     e42:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     e44:	2d 81       	ldd	r18, Y+5	; 0x05
     e46:	3e 81       	ldd	r19, Y+6	; 0x06
     e48:	4f 81       	ldd	r20, Y+7	; 0x07
     e4a:	58 85       	ldd	r21, Y+8	; 0x08
     e4c:	ca 01       	movw	r24, r20
     e4e:	b9 01       	movw	r22, r18
     e50:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     e54:	4b 01       	movw	r8, r22
     e56:	5c 01       	movw	r10, r24
     e58:	a3 01       	movw	r20, r6
     e5a:	92 01       	movw	r18, r4
     e5c:	c3 01       	movw	r24, r6
     e5e:	b2 01       	movw	r22, r4
     e60:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c5 01       	movw	r24, r10
     e6a:	b4 01       	movw	r22, r8
     e6c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     e74:	01 e0       	ldi	r16, 0x01	; 1
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	c7 01       	movw	r24, r14
     e7a:	b6 01       	movw	r22, r12
     e7c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
     e80:	88 23       	and	r24, r24
     e82:	14 f0       	brlt	.+4      	; 0xe88 <find_sign+0x190>
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     e88:	c8 01       	movw	r24, r16
     e8a:	60 96       	adiw	r28, 0x10	; 16
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	bf 90       	pop	r11
     ea8:	af 90       	pop	r10
     eaa:	9f 90       	pop	r9
     eac:	8f 90       	pop	r8
     eae:	7f 90       	pop	r7
     eb0:	6f 90       	pop	r6
     eb2:	5f 90       	pop	r5
     eb4:	4f 90       	pop	r4
     eb6:	08 95       	ret

00000eb8 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
     eb8:	2f 92       	push	r2
     eba:	3f 92       	push	r3
     ebc:	4f 92       	push	r4
     ebe:	5f 92       	push	r5
     ec0:	6f 92       	push	r6
     ec2:	7f 92       	push	r7
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	2c 97       	sbiw	r28, 0x0c	; 12
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	1c 01       	movw	r2, r24
     eee:	4d 83       	std	Y+5, r20	; 0x05
     ef0:	5e 83       	std	Y+6, r21	; 0x06
     ef2:	6f 83       	std	Y+7, r22	; 0x07
     ef4:	78 87       	std	Y+8, r23	; 0x08
     ef6:	09 87       	std	Y+9, r16	; 0x09
     ef8:	1a 87       	std	Y+10, r17	; 0x0a
     efa:	2b 87       	std	Y+11, r18	; 0x0b
     efc:	3c 87       	std	Y+12, r19	; 0x0c
     efe:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     f00:	f6 01       	movw	r30, r12
     f02:	20 81       	ld	r18, Z
     f04:	31 81       	ldd	r19, Z+1	; 0x01
     f06:	42 81       	ldd	r20, Z+2	; 0x02
     f08:	53 81       	ldd	r21, Z+3	; 0x03
     f0a:	f7 01       	movw	r30, r14
     f0c:	60 81       	ld	r22, Z
     f0e:	71 81       	ldd	r23, Z+1	; 0x01
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
     f18:	4b 01       	movw	r8, r22
     f1a:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
     f1c:	f6 01       	movw	r30, r12
     f1e:	24 81       	ldd	r18, Z+4	; 0x04
     f20:	35 81       	ldd	r19, Z+5	; 0x05
     f22:	46 81       	ldd	r20, Z+6	; 0x06
     f24:	57 81       	ldd	r21, Z+7	; 0x07
     f26:	f7 01       	movw	r30, r14
     f28:	64 81       	ldd	r22, Z+4	; 0x04
     f2a:	75 81       	ldd	r23, Z+5	; 0x05
     f2c:	86 81       	ldd	r24, Z+6	; 0x06
     f2e:	97 81       	ldd	r25, Z+7	; 0x07
     f30:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
     f34:	6b 01       	movw	r12, r22
     f36:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
     f38:	a5 01       	movw	r20, r10
     f3a:	94 01       	movw	r18, r8
     f3c:	c5 01       	movw	r24, r10
     f3e:	b4 01       	movw	r22, r8
     f40:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     f44:	2b 01       	movw	r4, r22
     f46:	3c 01       	movw	r6, r24
     f48:	a7 01       	movw	r20, r14
     f4a:	96 01       	movw	r18, r12
     f4c:	c7 01       	movw	r24, r14
     f4e:	b6 01       	movw	r22, r12
     f50:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     f54:	69 83       	std	Y+1, r22	; 0x01
     f56:	7a 83       	std	Y+2, r23	; 0x02
     f58:	8b 83       	std	Y+3, r24	; 0x03
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	29 81       	ldd	r18, Y+1	; 0x01
     f5e:	3a 81       	ldd	r19, Y+2	; 0x02
     f60:	4b 81       	ldd	r20, Y+3	; 0x03
     f62:	5c 81       	ldd	r21, Y+4	; 0x04
     f64:	c3 01       	movw	r24, r6
     f66:	b2 01       	movw	r22, r4
     f68:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
     f6c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <sqrt>
     f70:	2b 01       	movw	r4, r22
     f72:	3c 01       	movw	r6, r24
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	c5 01       	movw	r24, r10
     f7a:	b4 01       	movw	r22, r8
     f7c:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
     f80:	4b 01       	movw	r8, r22
     f82:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
     f84:	a3 01       	movw	r20, r6
     f86:	92 01       	movw	r18, r4
     f88:	c7 01       	movw	r24, r14
     f8a:	b6 01       	movw	r22, r12
     f8c:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
     f90:	6b 01       	movw	r12, r22
     f92:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
     f94:	f8 01       	movw	r30, r16
     f96:	20 81       	ld	r18, Z
     f98:	31 81       	ldd	r19, Z+1	; 0x01
     f9a:	42 81       	ldd	r20, Z+2	; 0x02
     f9c:	53 81       	ldd	r21, Z+3	; 0x03
     f9e:	c5 01       	movw	r24, r10
     fa0:	b4 01       	movw	r22, r8
     fa2:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     fa6:	2b 01       	movw	r4, r22
     fa8:	3c 01       	movw	r6, r24
     faa:	f8 01       	movw	r30, r16
     fac:	24 81       	ldd	r18, Z+4	; 0x04
     fae:	35 81       	ldd	r19, Z+5	; 0x05
     fb0:	46 81       	ldd	r20, Z+6	; 0x06
     fb2:	57 81       	ldd	r21, Z+7	; 0x07
     fb4:	c7 01       	movw	r24, r14
     fb6:	b6 01       	movw	r22, r12
     fb8:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     fbc:	9b 01       	movw	r18, r22
     fbe:	ac 01       	movw	r20, r24
     fc0:	c3 01       	movw	r24, r6
     fc2:	b2 01       	movw	r22, r4
     fc4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
	alpha = acos(cos_alpha);
     fc8:	0e 94 8e 1a 	call	0x351c	; 0x351c <acos>
     fcc:	2b 01       	movw	r4, r22
     fce:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
     fd0:	2a 94       	dec	r2
     fd2:	23 28       	or	r2, r3
     fd4:	d1 f4       	brne	.+52     	; 0x100a <cal_angle+0x152>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
     fd6:	29 85       	ldd	r18, Y+9	; 0x09
     fd8:	3a 85       	ldd	r19, Y+10	; 0x0a
     fda:	4b 85       	ldd	r20, Y+11	; 0x0b
     fdc:	5c 85       	ldd	r21, Y+12	; 0x0c
     fde:	50 58       	subi	r21, 0x80	; 128
     fe0:	c7 01       	movw	r24, r14
     fe2:	b6 01       	movw	r22, r12
     fe4:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     fe8:	6b 01       	movw	r12, r22
     fea:	7c 01       	movw	r14, r24
     fec:	2d 81       	ldd	r18, Y+5	; 0x05
     fee:	3e 81       	ldd	r19, Y+6	; 0x06
     ff0:	4f 81       	ldd	r20, Y+7	; 0x07
     ff2:	58 85       	ldd	r21, Y+8	; 0x08
     ff4:	c5 01       	movw	r24, r10
     ff6:	b4 01       	movw	r22, r8
     ff8:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1008:	19 c0       	rjmp	.+50     	; 0x103c <cal_angle+0x184>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    100a:	29 85       	ldd	r18, Y+9	; 0x09
    100c:	3a 85       	ldd	r19, Y+10	; 0x0a
    100e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1010:	5c 85       	ldd	r21, Y+12	; 0x0c
    1012:	50 58       	subi	r21, 0x80	; 128
    1014:	c7 01       	movw	r24, r14
    1016:	b6 01       	movw	r22, r12
    1018:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    101c:	6b 01       	movw	r12, r22
    101e:	7c 01       	movw	r14, r24
    1020:	2d 81       	ldd	r18, Y+5	; 0x05
    1022:	3e 81       	ldd	r19, Y+6	; 0x06
    1024:	4f 81       	ldd	r20, Y+7	; 0x07
    1026:	58 85       	ldd	r21, Y+8	; 0x08
    1028:	c5 01       	movw	r24, r10
    102a:	b4 01       	movw	r22, r8
    102c:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
	}
	if (c2g_wx < 0){
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	a9 01       	movw	r20, r18
    1042:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    1046:	88 23       	and	r24, r24
    1048:	4c f0       	brlt	.+18     	; 0x105c <cal_angle+0x1a4>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    104a:	40 92 60 01 	sts	0x0160, r4
    104e:	50 92 61 01 	sts	0x0161, r5
    1052:	60 92 62 01 	sts	0x0162, r6
    1056:	70 92 63 01 	sts	0x0163, r7
    105a:	0c c0       	rjmp	.+24     	; 0x1074 <cal_angle+0x1bc>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    105c:	77 fa       	bst	r7, 7
    105e:	70 94       	com	r7
    1060:	77 f8       	bld	r7, 7
    1062:	70 94       	com	r7
    1064:	40 92 60 01 	sts	0x0160, r4
    1068:	50 92 61 01 	sts	0x0161, r5
    106c:	60 92 62 01 	sts	0x0162, r6
    1070:	70 92 63 01 	sts	0x0163, r7
	};   

	m_usb_tx_string("alpha: ");
    1074:	8f e0       	ldi	r24, 0x0F	; 15
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(alpha*10);
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	51 e4       	ldi	r21, 0x41	; 65
    1084:	60 91 60 01 	lds	r22, 0x0160
    1088:	70 91 61 01 	lds	r23, 0x0161
    108c:	80 91 62 01 	lds	r24, 0x0162
    1090:	90 91 63 01 	lds	r25, 0x0163
    1094:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1098:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    109c:	cb 01       	movw	r24, r22
    109e:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    10a2:	8d e0       	ldi	r24, 0x0D	; 13
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
}
    10aa:	2c 96       	adiw	r28, 0x0c	; 12
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
    10ce:	7f 90       	pop	r7
    10d0:	6f 90       	pop	r6
    10d2:	5f 90       	pop	r5
    10d4:	4f 90       	pop	r4
    10d6:	3f 90       	pop	r3
    10d8:	2f 90       	pop	r2
    10da:	08 95       	ret

000010dc <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    10dc:	4f 92       	push	r4
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <PID_alpha+0x1e>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <PID_alpha+0x20>
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	4b 01       	movw	r8, r22
    1102:	5c 01       	movw	r10, r24
    1104:	29 83       	std	Y+1, r18	; 0x01
    1106:	3a 83       	std	Y+2, r19	; 0x02
    1108:	4b 83       	std	Y+3, r20	; 0x03
    110a:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    110c:	40 90 60 01 	lds	r4, 0x0160
    1110:	50 90 61 01 	lds	r5, 0x0161
    1114:	60 90 62 01 	lds	r6, 0x0162
    1118:	70 90 63 01 	lds	r7, 0x0163
    111c:	20 91 5c 01 	lds	r18, 0x015C
    1120:	30 91 5d 01 	lds	r19, 0x015D
    1124:	40 91 5e 01 	lds	r20, 0x015E
    1128:	50 91 5f 01 	lds	r21, 0x015F
    112c:	c3 01       	movw	r24, r6
    112e:	b2 01       	movw	r22, r4
    1130:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1134:	6b 01       	movw	r12, r22
    1136:	7c 01       	movw	r14, r24
    1138:	60 93 58 01 	sts	0x0158, r22
    113c:	70 93 59 01 	sts	0x0159, r23
    1140:	80 93 5a 01 	sts	0x015A, r24
    1144:	90 93 5b 01 	sts	0x015B, r25
	float P =0, D = 0;
	P = Kp * alpha;
    1148:	a5 01       	movw	r20, r10
    114a:	94 01       	movw	r18, r8
    114c:	c3 01       	movw	r24, r6
    114e:	b2 01       	movw	r22, r4
    1150:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1154:	4b 01       	movw	r8, r22
    1156:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;	gain_loc = P+D;
    1158:	29 81       	ldd	r18, Y+1	; 0x01
    115a:	3a 81       	ldd	r19, Y+2	; 0x02
    115c:	4b 81       	ldd	r20, Y+3	; 0x03
    115e:	5c 81       	ldd	r21, Y+4	; 0x04
    1160:	c7 01       	movw	r24, r14
    1162:	b6 01       	movw	r22, r12
    1164:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	c5 01       	movw	r24, r10
    116e:	b4 01       	movw	r22, r8
    1170:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1174:	60 93 54 01 	sts	0x0154, r22
    1178:	70 93 55 01 	sts	0x0155, r23
    117c:	80 93 56 01 	sts	0x0156, r24
    1180:	90 93 57 01 	sts	0x0157, r25
	
	alpha_last = alpha;
    1184:	40 92 5c 01 	sts	0x015C, r4
    1188:	50 92 5d 01 	sts	0x015D, r5
    118c:	60 92 5e 01 	sts	0x015E, r6
    1190:	70 92 5f 01 	sts	0x015F, r7
	
	m_usb_tx_string("alpha*10: ");
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	60 91 60 01 	lds	r22, 0x0160
    11a8:	70 91 61 01 	lds	r23, 0x0161
    11ac:	80 91 62 01 	lds	r24, 0x0162
    11b0:	90 91 63 01 	lds	r25, 0x0163
    11b4:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    11b8:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    11bc:	cb 01       	movw	r24, r22
    11be:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	m_usb_tx_string("gain*10: ");
    11ca:	86 ef       	ldi	r24, 0xF6	; 246
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e2       	ldi	r20, 0x20	; 32
    11d8:	51 e4       	ldi	r21, 0x41	; 65
    11da:	60 91 54 01 	lds	r22, 0x0154
    11de:	70 91 55 01 	lds	r23, 0x0155
    11e2:	80 91 56 01 	lds	r24, 0x0156
    11e6:	90 91 57 01 	lds	r25, 0x0157
    11ea:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    11ee:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    11f2:	cb 01       	movw	r24, r22
    11f4:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    11f8:	84 ef       	ldi	r24, 0xF4	; 244
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	if(gain_loc<0){  // turn right
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	60 91 54 01 	lds	r22, 0x0154
    120a:	70 91 55 01 	lds	r23, 0x0155
    120e:	80 91 56 01 	lds	r24, 0x0156
    1212:	90 91 57 01 	lds	r25, 0x0157
    1216:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    121a:	88 23       	and	r24, r24
    121c:	0c f0       	brlt	.+2      	; 0x1220 <PID_alpha+0x144>
    121e:	44 c0       	rjmp	.+136    	; 0x12a8 <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    1220:	88 ee       	ldi	r24, 0xE8	; 232
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1228:	60 91 54 01 	lds	r22, 0x0154
    122c:	70 91 55 01 	lds	r23, 0x0155
    1230:	80 91 56 01 	lds	r24, 0x0156
    1234:	90 91 57 01 	lds	r25, 0x0157
    1238:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    123c:	9b 01       	movw	r18, r22
    123e:	77 23       	and	r23, r23
    1240:	24 f4       	brge	.+8      	; 0x124a <PID_alpha+0x16e>
    1242:	22 27       	eor	r18, r18
    1244:	33 27       	eor	r19, r19
    1246:	26 1b       	sub	r18, r22
    1248:	37 0b       	sbc	r19, r23
    124a:	8a e8       	ldi	r24, 0x8A	; 138
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	82 1b       	sub	r24, r18
    1250:	93 0b       	sbc	r25, r19
    1252:	90 93 8b 00 	sts	0x008B, r25
    1256:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    125a:	e0 90 1a 01 	lds	r14, 0x011A
    125e:	f0 90 1b 01 	lds	r15, 0x011B
    1262:	60 91 54 01 	lds	r22, 0x0154
    1266:	70 91 55 01 	lds	r23, 0x0155
    126a:	80 91 56 01 	lds	r24, 0x0156
    126e:	90 91 57 01 	lds	r25, 0x0157
    1272:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    1276:	9b 01       	movw	r18, r22
    1278:	77 23       	and	r23, r23
    127a:	24 f4       	brge	.+8      	; 0x1284 <PID_alpha+0x1a8>
    127c:	22 27       	eor	r18, r18
    127e:	33 27       	eor	r19, r19
    1280:	26 1b       	sub	r18, r22
    1282:	37 0b       	sbc	r19, r23
    1284:	e2 16       	cp	r14, r18
    1286:	f3 06       	cpc	r15, r19
    1288:	44 f4       	brge	.+16     	; 0x129a <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    128a:	8a e8       	ldi	r24, 0x8A	; 138
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	8e 19       	sub	r24, r14
    1290:	9f 09       	sbc	r25, r15
    1292:	90 93 8b 00 	sts	0x008B, r25
    1296:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    129a:	8a e8       	ldi	r24, 0x8A	; 138
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	90 93 8d 00 	sts	0x008D, r25
    12a2:	80 93 8c 00 	sts	0x008C, r24
    12a6:	43 c0       	rjmp	.+134    	; 0x132e <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    12a8:	8d ed       	ldi	r24, 0xDD	; 221
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    12b0:	60 91 54 01 	lds	r22, 0x0154
    12b4:	70 91 55 01 	lds	r23, 0x0155
    12b8:	80 91 56 01 	lds	r24, 0x0156
    12bc:	90 91 57 01 	lds	r25, 0x0157
    12c0:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    12c4:	9b 01       	movw	r18, r22
    12c6:	77 23       	and	r23, r23
    12c8:	24 f4       	brge	.+8      	; 0x12d2 <PID_alpha+0x1f6>
    12ca:	22 27       	eor	r18, r18
    12cc:	33 27       	eor	r19, r19
    12ce:	26 1b       	sub	r18, r22
    12d0:	37 0b       	sbc	r19, r23
    12d2:	8a e8       	ldi	r24, 0x8A	; 138
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	82 1b       	sub	r24, r18
    12d8:	93 0b       	sbc	r25, r19
    12da:	90 93 8d 00 	sts	0x008D, r25
    12de:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    12e2:	e0 90 1a 01 	lds	r14, 0x011A
    12e6:	f0 90 1b 01 	lds	r15, 0x011B
    12ea:	60 91 54 01 	lds	r22, 0x0154
    12ee:	70 91 55 01 	lds	r23, 0x0155
    12f2:	80 91 56 01 	lds	r24, 0x0156
    12f6:	90 91 57 01 	lds	r25, 0x0157
    12fa:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    12fe:	9b 01       	movw	r18, r22
    1300:	77 23       	and	r23, r23
    1302:	24 f4       	brge	.+8      	; 0x130c <PID_alpha+0x230>
    1304:	22 27       	eor	r18, r18
    1306:	33 27       	eor	r19, r19
    1308:	26 1b       	sub	r18, r22
    130a:	37 0b       	sbc	r19, r23
    130c:	e2 16       	cp	r14, r18
    130e:	f3 06       	cpc	r15, r19
    1310:	44 f4       	brge	.+16     	; 0x1322 <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    1312:	8a e8       	ldi	r24, 0x8A	; 138
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	8e 19       	sub	r24, r14
    1318:	9f 09       	sbc	r25, r15
    131a:	90 93 8d 00 	sts	0x008D, r25
    131e:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1322:	8a e8       	ldi	r24, 0x8A	; 138
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	90 93 8b 00 	sts	0x008B, r25
    132a:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	bf 90       	pop	r11
    1344:	af 90       	pop	r10
    1346:	9f 90       	pop	r9
    1348:	8f 90       	pop	r8
    134a:	7f 90       	pop	r7
    134c:	6f 90       	pop	r6
    134e:	5f 90       	pop	r5
    1350:	4f 90       	pop	r4
    1352:	08 95       	ret

00001354 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    1354:	4f 92       	push	r4
    1356:	5f 92       	push	r5
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	00 d0       	rcall	.+0      	; 0x1372 <PID_p2p+0x1e>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <PID_p2p+0x20>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	4b 01       	movw	r8, r22
    137a:	5c 01       	movw	r10, r24
    137c:	29 83       	std	Y+1, r18	; 0x01
    137e:	3a 83       	std	Y+2, r19	; 0x02
    1380:	4b 83       	std	Y+3, r20	; 0x03
    1382:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1384:	40 90 60 01 	lds	r4, 0x0160
    1388:	50 90 61 01 	lds	r5, 0x0161
    138c:	60 90 62 01 	lds	r6, 0x0162
    1390:	70 90 63 01 	lds	r7, 0x0163
    1394:	20 91 5c 01 	lds	r18, 0x015C
    1398:	30 91 5d 01 	lds	r19, 0x015D
    139c:	40 91 5e 01 	lds	r20, 0x015E
    13a0:	50 91 5f 01 	lds	r21, 0x015F
    13a4:	c3 01       	movw	r24, r6
    13a6:	b2 01       	movw	r22, r4
    13a8:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    13ac:	6b 01       	movw	r12, r22
    13ae:	7c 01       	movw	r14, r24
    13b0:	60 93 58 01 	sts	0x0158, r22
    13b4:	70 93 59 01 	sts	0x0159, r23
    13b8:	80 93 5a 01 	sts	0x015A, r24
    13bc:	90 93 5b 01 	sts	0x015B, r25
	float P =0, D = 0;
	P = Kp * alpha;
    13c0:	a5 01       	movw	r20, r10
    13c2:	94 01       	movw	r18, r8
    13c4:	c3 01       	movw	r24, r6
    13c6:	b2 01       	movw	r22, r4
    13c8:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    13cc:	4b 01       	movw	r8, r22
    13ce:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    13d0:	29 81       	ldd	r18, Y+1	; 0x01
    13d2:	3a 81       	ldd	r19, Y+2	; 0x02
    13d4:	4b 81       	ldd	r20, Y+3	; 0x03
    13d6:	5c 81       	ldd	r21, Y+4	; 0x04
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    13e0:	9b 01       	movw	r18, r22
    13e2:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    13e4:	c5 01       	movw	r24, r10
    13e6:	b4 01       	movw	r22, r8
    13e8:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    13ec:	60 93 54 01 	sts	0x0154, r22
    13f0:	70 93 55 01 	sts	0x0155, r23
    13f4:	80 93 56 01 	sts	0x0156, r24
    13f8:	90 93 57 01 	sts	0x0157, r25
	
	alpha_last = alpha;
    13fc:	40 92 5c 01 	sts	0x015C, r4
    1400:	50 92 5d 01 	sts	0x015D, r5
    1404:	60 92 5e 01 	sts	0x015E, r6
    1408:	70 92 5f 01 	sts	0x015F, r7
	
	m_usb_tx_string("alpha*10: ");
    140c:	82 ed       	ldi	r24, 0xD2	; 210
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e2       	ldi	r20, 0x20	; 32
    141a:	51 e4       	ldi	r21, 0x41	; 65
    141c:	60 91 60 01 	lds	r22, 0x0160
    1420:	70 91 61 01 	lds	r23, 0x0161
    1424:	80 91 62 01 	lds	r24, 0x0162
    1428:	90 91 63 01 	lds	r25, 0x0163
    142c:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1430:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    1434:	cb 01       	movw	r24, r22
    1436:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    143a:	80 ed       	ldi	r24, 0xD0	; 208
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1442:	86 ec       	ldi	r24, 0xC6	; 198
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	60 91 54 01 	lds	r22, 0x0154
    1456:	70 91 55 01 	lds	r23, 0x0155
    145a:	80 91 56 01 	lds	r24, 0x0156
    145e:	90 91 57 01 	lds	r25, 0x0157
    1462:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1466:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    146a:	cb 01       	movw	r24, r22
    146c:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    1470:	84 ec       	ldi	r24, 0xC4	; 196
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	if(gain_loc<0){  // turn right
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	60 91 54 01 	lds	r22, 0x0154
    1482:	70 91 55 01 	lds	r23, 0x0155
    1486:	80 91 56 01 	lds	r24, 0x0156
    148a:	90 91 57 01 	lds	r25, 0x0157
    148e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    1492:	88 23       	and	r24, r24
    1494:	0c f0       	brlt	.+2      	; 0x1498 <PID_p2p+0x144>
    1496:	44 c0       	rjmp	.+136    	; 0x1520 <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    1498:	88 eb       	ldi	r24, 0xB8	; 184
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    14a0:	60 91 54 01 	lds	r22, 0x0154
    14a4:	70 91 55 01 	lds	r23, 0x0155
    14a8:	80 91 56 01 	lds	r24, 0x0156
    14ac:	90 91 57 01 	lds	r25, 0x0157
    14b0:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    14b4:	9b 01       	movw	r18, r22
    14b6:	77 23       	and	r23, r23
    14b8:	24 f4       	brge	.+8      	; 0x14c2 <PID_p2p+0x16e>
    14ba:	22 27       	eor	r18, r18
    14bc:	33 27       	eor	r19, r19
    14be:	26 1b       	sub	r18, r22
    14c0:	37 0b       	sbc	r19, r23
    14c2:	8a e8       	ldi	r24, 0x8A	; 138
    14c4:	92 e0       	ldi	r25, 0x02	; 2
    14c6:	82 1b       	sub	r24, r18
    14c8:	93 0b       	sbc	r25, r19
    14ca:	90 93 8b 00 	sts	0x008B, r25
    14ce:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    14d2:	e0 90 18 01 	lds	r14, 0x0118
    14d6:	f0 90 19 01 	lds	r15, 0x0119
    14da:	60 91 54 01 	lds	r22, 0x0154
    14de:	70 91 55 01 	lds	r23, 0x0155
    14e2:	80 91 56 01 	lds	r24, 0x0156
    14e6:	90 91 57 01 	lds	r25, 0x0157
    14ea:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    14ee:	9b 01       	movw	r18, r22
    14f0:	77 23       	and	r23, r23
    14f2:	24 f4       	brge	.+8      	; 0x14fc <PID_p2p+0x1a8>
    14f4:	22 27       	eor	r18, r18
    14f6:	33 27       	eor	r19, r19
    14f8:	26 1b       	sub	r18, r22
    14fa:	37 0b       	sbc	r19, r23
    14fc:	e2 16       	cp	r14, r18
    14fe:	f3 06       	cpc	r15, r19
    1500:	44 f4       	brge	.+16     	; 0x1512 <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    1502:	8a e8       	ldi	r24, 0x8A	; 138
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	8e 19       	sub	r24, r14
    1508:	9f 09       	sbc	r25, r15
    150a:	90 93 8b 00 	sts	0x008B, r25
    150e:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1512:	8a e8       	ldi	r24, 0x8A	; 138
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	90 93 8d 00 	sts	0x008D, r25
    151a:	80 93 8c 00 	sts	0x008C, r24
    151e:	43 c0       	rjmp	.+134    	; 0x15a6 <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1520:	8d ea       	ldi	r24, 0xAD	; 173
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1528:	60 91 54 01 	lds	r22, 0x0154
    152c:	70 91 55 01 	lds	r23, 0x0155
    1530:	80 91 56 01 	lds	r24, 0x0156
    1534:	90 91 57 01 	lds	r25, 0x0157
    1538:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    153c:	9b 01       	movw	r18, r22
    153e:	77 23       	and	r23, r23
    1540:	24 f4       	brge	.+8      	; 0x154a <PID_p2p+0x1f6>
    1542:	22 27       	eor	r18, r18
    1544:	33 27       	eor	r19, r19
    1546:	26 1b       	sub	r18, r22
    1548:	37 0b       	sbc	r19, r23
    154a:	8a e8       	ldi	r24, 0x8A	; 138
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	82 1b       	sub	r24, r18
    1550:	93 0b       	sbc	r25, r19
    1552:	90 93 8d 00 	sts	0x008D, r25
    1556:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    155a:	e0 90 18 01 	lds	r14, 0x0118
    155e:	f0 90 19 01 	lds	r15, 0x0119
    1562:	60 91 54 01 	lds	r22, 0x0154
    1566:	70 91 55 01 	lds	r23, 0x0155
    156a:	80 91 56 01 	lds	r24, 0x0156
    156e:	90 91 57 01 	lds	r25, 0x0157
    1572:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    1576:	9b 01       	movw	r18, r22
    1578:	77 23       	and	r23, r23
    157a:	24 f4       	brge	.+8      	; 0x1584 <PID_p2p+0x230>
    157c:	22 27       	eor	r18, r18
    157e:	33 27       	eor	r19, r19
    1580:	26 1b       	sub	r18, r22
    1582:	37 0b       	sbc	r19, r23
    1584:	e2 16       	cp	r14, r18
    1586:	f3 06       	cpc	r15, r19
    1588:	44 f4       	brge	.+16     	; 0x159a <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    158a:	8a e8       	ldi	r24, 0x8A	; 138
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	8e 19       	sub	r24, r14
    1590:	9f 09       	sbc	r25, r15
    1592:	90 93 8d 00 	sts	0x008D, r25
    1596:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    159a:	8a e8       	ldi	r24, 0x8A	; 138
    159c:	92 e0       	ldi	r25, 0x02	; 2
    159e:	90 93 8b 00 	sts	0x008B, r25
    15a2:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	af 90       	pop	r10
    15be:	9f 90       	pop	r9
    15c0:	8f 90       	pop	r8
    15c2:	7f 90       	pop	r7
    15c4:	6f 90       	pop	r6
    15c6:	5f 90       	pop	r5
    15c8:	4f 90       	pop	r4
    15ca:	08 95       	ret

000015cc <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	6b 01       	movw	r12, r22
    15de:	7c 01       	movw	r14, r24
	//unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	f8 01       	movw	r30, r16
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	7c f4       	brge	.+30     	; 0x1616 <find_if_reach+0x4a>
		if(x<0){
    15f8:	d1 e0       	ldi	r29, 0x01	; 1
    15fa:	c0 e0       	ldi	r28, 0x00	; 0
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	c7 01       	movw	r24, r14
    1604:	b6 01       	movw	r22, r12
    1606:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    160a:	88 23       	and	r24, r24
    160c:	0c f0       	brlt	.+2      	; 0x1610 <find_if_reach+0x44>
    160e:	d0 e0       	ldi	r29, 0x00	; 0
			return 1;
    1610:	8d 2f       	mov	r24, r29
    1612:	9c 2f       	mov	r25, r28
    1614:	0e c0       	rjmp	.+28     	; 0x1632 <find_if_reach+0x66>
			return 0;
		}
		
	}
	else{
		if(x>0){
    1616:	d1 e0       	ldi	r29, 0x01	; 1
    1618:	c0 e0       	ldi	r28, 0x00	; 0
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__gesf2>
    1628:	18 16       	cp	r1, r24
    162a:	0c f0       	brlt	.+2      	; 0x162e <find_if_reach+0x62>
    162c:	d0 e0       	ldi	r29, 0x00	; 0
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
		if(x<0){
			return 1;
    162e:	8d 2f       	mov	r24, r29
    1630:	9c 2f       	mov	r25, r28
		}else{
			return 0;
		}
		
	}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	08 95       	ret

00001644 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int *state, float *goal, float *c_wii, float *dir){
    1644:	2f 92       	push	r2
    1646:	3f 92       	push	r3
    1648:	4f 92       	push	r4
    164a:	5f 92       	push	r5
    164c:	6f 92       	push	r6
    164e:	7f 92       	push	r7
    1650:	8f 92       	push	r8
    1652:	9f 92       	push	r9
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	c6 58       	subi	r28, 0x86	; 134
    166e:	d1 09       	sbc	r29, r1
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	cd 57       	subi	r28, 0x7D	; 125
    167c:	df 4f       	sbci	r29, 0xFF	; 255
    167e:	99 83       	std	Y+1, r25	; 0x01
    1680:	88 83       	st	Y, r24
    1682:	c3 58       	subi	r28, 0x83	; 131
    1684:	d0 40       	sbci	r29, 0x00	; 0
    1686:	cb 57       	subi	r28, 0x7B	; 123
    1688:	df 4f       	sbci	r29, 0xFF	; 255
    168a:	79 83       	std	Y+1, r23	; 0x01
    168c:	68 83       	st	Y, r22
    168e:	c5 58       	subi	r28, 0x85	; 133
    1690:	d0 40       	sbci	r29, 0x00	; 0
    1692:	ef 96       	adiw	r28, 0x3f	; 63
    1694:	5f af       	std	Y+63, r21	; 0x3f
    1696:	4e af       	std	Y+62, r20	; 0x3e
    1698:	ef 97       	sbiw	r28, 0x3f	; 63
    169a:	c1 58       	subi	r28, 0x81	; 129
    169c:	df 4f       	sbci	r29, 0xFF	; 255
    169e:	39 83       	std	Y+1, r19	; 0x01
    16a0:	28 83       	st	Y, r18
    16a2:	cf 57       	subi	r28, 0x7F	; 127
    16a4:	d0 40       	sbci	r29, 0x00	; 0
	m_wii_read(&blobs[0]);
    16a6:	84 e7       	ldi	r24, 0x74	; 116
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    16ae:	04 e7       	ldi	r16, 0x74	; 116
    16b0:	11 e0       	ldi	r17, 0x01	; 1
    16b2:	d8 01       	movw	r26, r16
    16b4:	6d 91       	ld	r22, X+
    16b6:	7c 91       	ld	r23, X
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    16c0:	69 83       	std	Y+1, r22	; 0x01
    16c2:	7a 83       	std	Y+2, r23	; 0x02
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	f8 01       	movw	r30, r16
    16ca:	66 81       	ldd	r22, Z+6	; 0x06
    16cc:	77 81       	ldd	r23, Z+7	; 0x07
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    16d6:	6d 83       	std	Y+5, r22	; 0x05
    16d8:	7e 83       	std	Y+6, r23	; 0x06
    16da:	8f 83       	std	Y+7, r24	; 0x07
    16dc:	98 87       	std	Y+8, r25	; 0x08
    16de:	d8 01       	movw	r26, r16
    16e0:	1c 96       	adiw	r26, 0x0c	; 12
    16e2:	6d 91       	ld	r22, X+
    16e4:	7c 91       	ld	r23, X
    16e6:	1d 97       	sbiw	r26, 0x0d	; 13
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    16f0:	69 87       	std	Y+9, r22	; 0x09
    16f2:	7a 87       	std	Y+10, r23	; 0x0a
    16f4:	8b 87       	std	Y+11, r24	; 0x0b
    16f6:	9c 87       	std	Y+12, r25	; 0x0c
    16f8:	f8 01       	movw	r30, r16
    16fa:	62 89       	ldd	r22, Z+18	; 0x12
    16fc:	73 89       	ldd	r23, Z+19	; 0x13
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    1706:	6d 87       	std	Y+13, r22	; 0x0d
    1708:	7e 87       	std	Y+14, r23	; 0x0e
    170a:	8f 87       	std	Y+15, r24	; 0x0f
    170c:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    170e:	d8 01       	movw	r26, r16
    1710:	12 96       	adiw	r26, 0x02	; 2
    1712:	6d 91       	ld	r22, X+
    1714:	7c 91       	ld	r23, X
    1716:	13 97       	sbiw	r26, 0x03	; 3
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    1720:	69 8b       	std	Y+17, r22	; 0x11
    1722:	7a 8b       	std	Y+18, r23	; 0x12
    1724:	8b 8b       	std	Y+19, r24	; 0x13
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	f8 01       	movw	r30, r16
    172a:	60 85       	ldd	r22, Z+8	; 0x08
    172c:	71 85       	ldd	r23, Z+9	; 0x09
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    1736:	6d 8b       	std	Y+21, r22	; 0x15
    1738:	7e 8b       	std	Y+22, r23	; 0x16
    173a:	8f 8b       	std	Y+23, r24	; 0x17
    173c:	98 8f       	std	Y+24, r25	; 0x18
    173e:	d8 01       	movw	r26, r16
    1740:	1e 96       	adiw	r26, 0x0e	; 14
    1742:	6d 91       	ld	r22, X+
    1744:	7c 91       	ld	r23, X
    1746:	1f 97       	sbiw	r26, 0x0f	; 15
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    1750:	69 8f       	std	Y+25, r22	; 0x19
    1752:	7a 8f       	std	Y+26, r23	; 0x1a
    1754:	8b 8f       	std	Y+27, r24	; 0x1b
    1756:	9c 8f       	std	Y+28, r25	; 0x1c
    1758:	f8 01       	movw	r30, r16
    175a:	64 89       	ldd	r22, Z+20	; 0x14
    175c:	75 89       	ldd	r23, Z+21	; 0x15
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__floatunsisf>
    1766:	6d 8f       	std	Y+29, r22	; 0x1d
    1768:	7e 8f       	std	Y+30, r23	; 0x1e
    176a:	8f 8f       	std	Y+31, r24	; 0x1f
    176c:	98 a3       	std	Y+32, r25	; 0x20
    176e:	9e 01       	movw	r18, r28
    1770:	2f 5f       	subi	r18, 0xFF	; 255
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	e7 96       	adiw	r28, 0x37	; 55
    1776:	3f af       	std	Y+63, r19	; 0x3f
    1778:	2e af       	std	Y+62, r18	; 0x3e
    177a:	e7 97       	sbiw	r28, 0x37	; 55
    177c:	ce 01       	movw	r24, r28
    177e:	41 96       	adiw	r24, 0x11	; 17
    1780:	ab 96       	adiw	r28, 0x2b	; 43
    1782:	9f af       	std	Y+63, r25	; 0x3f
    1784:	8e af       	std	Y+62, r24	; 0x3e
    1786:	ab 97       	sbiw	r28, 0x2b	; 43
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1788:	61 2c       	mov	r6, r1
    178a:	71 2c       	mov	r7, r1
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    178c:	00 e0       	ldi	r16, 0x00	; 0
    178e:	10 e0       	ldi	r17, 0x00	; 0
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1790:	d3 01       	movw	r26, r6
    1792:	11 96       	adiw	r26, 0x01	; 1
    1794:	e3 96       	adiw	r28, 0x33	; 51
    1796:	bf af       	std	Y+63, r27	; 0x3f
    1798:	ae af       	std	Y+62, r26	; 0x3e
    179a:	e3 97       	sbiw	r28, 0x33	; 51
    179c:	14 97       	sbiw	r26, 0x04	; 4
    179e:	0c f0       	brlt	.+2      	; 0x17a2 <localization+0x15e>
    17a0:	68 c6       	rjmp	.+3280   	; 0x2472 <localization+0xe2e>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    17a2:	e7 96       	adiw	r28, 0x37	; 55
    17a4:	ae ad       	ldd	r26, Y+62	; 0x3e
    17a6:	bf ad       	ldd	r27, Y+63	; 0x3f
    17a8:	e7 97       	sbiw	r28, 0x37	; 55
    17aa:	8d 91       	ld	r24, X+
    17ac:	9d 91       	ld	r25, X+
    17ae:	0d 90       	ld	r0, X+
    17b0:	bc 91       	ld	r27, X
    17b2:	a0 2d       	mov	r26, r0
    17b4:	a9 96       	adiw	r28, 0x29	; 41
    17b6:	8c af       	std	Y+60, r24	; 0x3c
    17b8:	9d af       	std	Y+61, r25	; 0x3d
    17ba:	ae af       	std	Y+62, r26	; 0x3e
    17bc:	bf af       	std	Y+63, r27	; 0x3f
    17be:	a9 97       	sbiw	r28, 0x29	; 41
    17c0:	cf 57       	subi	r28, 0x7F	; 127
    17c2:	df 4f       	sbci	r29, 0xFF	; 255
    17c4:	19 83       	std	Y+1, r17	; 0x01
    17c6:	08 83       	st	Y, r16
    17c8:	c1 58       	subi	r28, 0x81	; 129
    17ca:	d0 40       	sbci	r29, 0x00	; 0
    17cc:	c8 01       	movw	r24, r16
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	e9 e3       	ldi	r30, 0x39	; 57
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	ec 0f       	add	r30, r28
    17d8:	fd 1f       	adc	r31, r29
    17da:	e8 0f       	add	r30, r24
    17dc:	f9 1f       	adc	r31, r25
    17de:	a3 96       	adiw	r28, 0x23	; 35
    17e0:	ff af       	std	Y+63, r31	; 0x3f
    17e2:	ee af       	std	Y+62, r30	; 0x3e
    17e4:	a3 97       	sbiw	r28, 0x23	; 35
    17e6:	0f 2e       	mov	r0, r31
    17e8:	f5 e4       	ldi	r31, 0x45	; 69
    17ea:	8f 2e       	mov	r8, r31
    17ec:	91 2c       	mov	r9, r1
    17ee:	f0 2d       	mov	r31, r0
    17f0:	8c 0e       	add	r8, r28
    17f2:	9d 1e       	adc	r9, r29
    17f4:	88 0e       	add	r8, r24
    17f6:	99 1e       	adc	r9, r25
    17f8:	18 01       	movw	r2, r16
    17fa:	22 0c       	add	r2, r2
    17fc:	33 1c       	adc	r3, r3
    17fe:	22 0c       	add	r2, r2
    1800:	33 1c       	adc	r3, r3
    1802:	21 e2       	ldi	r18, 0x21	; 33
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	2c 0f       	add	r18, r28
    1808:	3d 1f       	adc	r19, r29
    180a:	22 0e       	add	r2, r18
    180c:	33 1e       	adc	r3, r19
    180e:	ab 96       	adiw	r28, 0x2b	; 43
    1810:	ae ac       	ldd	r10, Y+62	; 0x3e
    1812:	bf ac       	ldd	r11, Y+63	; 0x3f
    1814:	ab 97       	sbiw	r28, 0x2b	; 43
    1816:	e7 96       	adiw	r28, 0x37	; 55
    1818:	4e ac       	ldd	r4, Y+62	; 0x3e
    181a:	5f ac       	ldd	r5, Y+63	; 0x3f
    181c:	e7 97       	sbiw	r28, 0x37	; 55
    181e:	e3 96       	adiw	r28, 0x33	; 51
    1820:	0e ad       	ldd	r16, Y+62	; 0x3e
    1822:	1f ad       	ldd	r17, Y+63	; 0x3f
    1824:	e3 97       	sbiw	r28, 0x33	; 51
    1826:	c1 01       	movw	r24, r2
    1828:	12 01       	movw	r2, r4
    182a:	24 01       	movw	r4, r8
    182c:	45 01       	movw	r8, r10
    182e:	53 01       	movw	r10, r6
    1830:	3c 01       	movw	r6, r24
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 ec       	ldi	r19, 0xC0	; 192
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	54 e4       	ldi	r21, 0x44	; 68
    183a:	a9 96       	adiw	r28, 0x29	; 41
    183c:	6c ad       	ldd	r22, Y+60	; 0x3c
    183e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1840:	8e ad       	ldd	r24, Y+62	; 0x3e
    1842:	9f ad       	ldd	r25, Y+63	; 0x3f
    1844:	a9 97       	sbiw	r28, 0x29	; 41
    1846:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    184a:	88 23       	and	r24, r24
    184c:	09 f4       	brne	.+2      	; 0x1850 <localization+0x20c>
    184e:	9a c0       	rjmp	.+308    	; 0x1984 <localization+0x340>
    1850:	ab 96       	adiw	r28, 0x2b	; 43
    1852:	ae ad       	ldd	r26, Y+62	; 0x3e
    1854:	bf ad       	ldd	r27, Y+63	; 0x3f
    1856:	ab 97       	sbiw	r28, 0x2b	; 43
    1858:	cd 90       	ld	r12, X+
    185a:	dd 90       	ld	r13, X+
    185c:	ed 90       	ld	r14, X+
    185e:	fc 90       	ld	r15, X
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 ec       	ldi	r19, 0xC0	; 192
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	c7 01       	movw	r24, r14
    186a:	b6 01       	movw	r22, r12
    186c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    1870:	88 23       	and	r24, r24
    1872:	09 f4       	brne	.+2      	; 0x1876 <localization+0x232>
    1874:	87 c0       	rjmp	.+270    	; 0x1984 <localization+0x340>
    1876:	d1 01       	movw	r26, r2
    1878:	14 96       	adiw	r26, 0x04	; 4
    187a:	8d 91       	ld	r24, X+
    187c:	9d 91       	ld	r25, X+
    187e:	0d 90       	ld	r0, X+
    1880:	bc 91       	ld	r27, X
    1882:	a0 2d       	mov	r26, r0
    1884:	e1 96       	adiw	r28, 0x31	; 49
    1886:	8c af       	std	Y+60, r24	; 0x3c
    1888:	9d af       	std	Y+61, r25	; 0x3d
    188a:	ae af       	std	Y+62, r26	; 0x3e
    188c:	bf af       	std	Y+63, r27	; 0x3f
    188e:	e1 97       	sbiw	r28, 0x31	; 49
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 ec       	ldi	r19, 0xC0	; 192
    1894:	4f e7       	ldi	r20, 0x7F	; 127
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <localization+0x262>
    18a4:	6f c0       	rjmp	.+222    	; 0x1984 <localization+0x340>
    18a6:	d4 01       	movw	r26, r8
    18a8:	14 96       	adiw	r26, 0x04	; 4
    18aa:	8d 91       	ld	r24, X+
    18ac:	9d 91       	ld	r25, X+
    18ae:	0d 90       	ld	r0, X+
    18b0:	bc 91       	ld	r27, X
    18b2:	a0 2d       	mov	r26, r0
    18b4:	ed 96       	adiw	r28, 0x3d	; 61
    18b6:	8c af       	std	Y+60, r24	; 0x3c
    18b8:	9d af       	std	Y+61, r25	; 0x3d
    18ba:	ae af       	std	Y+62, r26	; 0x3e
    18bc:	bf af       	std	Y+63, r27	; 0x3f
    18be:	ed 97       	sbiw	r28, 0x3d	; 61
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 ec       	ldi	r19, 0xC0	; 192
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <localization+0x292>
    18d4:	57 c0       	rjmp	.+174    	; 0x1984 <localization+0x340>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    18d6:	e1 96       	adiw	r28, 0x31	; 49
    18d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18da:	3d ad       	ldd	r19, Y+61	; 0x3d
    18dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18de:	5f ad       	ldd	r21, Y+63	; 0x3f
    18e0:	e1 97       	sbiw	r28, 0x31	; 49
    18e2:	a9 96       	adiw	r28, 0x29	; 41
    18e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    18e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    18e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    18ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    18ec:	a9 97       	sbiw	r28, 0x29	; 41
    18ee:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    18f2:	e1 96       	adiw	r28, 0x31	; 49
    18f4:	6c af       	std	Y+60, r22	; 0x3c
    18f6:	7d af       	std	Y+61, r23	; 0x3d
    18f8:	8e af       	std	Y+62, r24	; 0x3e
    18fa:	9f af       	std	Y+63, r25	; 0x3f
    18fc:	e1 97       	sbiw	r28, 0x31	; 49
    18fe:	ed 96       	adiw	r28, 0x3d	; 61
    1900:	2c ad       	ldd	r18, Y+60	; 0x3c
    1902:	3d ad       	ldd	r19, Y+61	; 0x3d
    1904:	4e ad       	ldd	r20, Y+62	; 0x3e
    1906:	5f ad       	ldd	r21, Y+63	; 0x3f
    1908:	ed 97       	sbiw	r28, 0x3d	; 61
    190a:	c7 01       	movw	r24, r14
    190c:	b6 01       	movw	r22, r12
    190e:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1912:	6b 01       	movw	r12, r22
    1914:	7c 01       	movw	r14, r24
    1916:	e1 96       	adiw	r28, 0x31	; 49
    1918:	2c ad       	ldd	r18, Y+60	; 0x3c
    191a:	3d ad       	ldd	r19, Y+61	; 0x3d
    191c:	4e ad       	ldd	r20, Y+62	; 0x3e
    191e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1920:	e1 97       	sbiw	r28, 0x31	; 49
    1922:	ca 01       	movw	r24, r20
    1924:	b9 01       	movw	r22, r18
    1926:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    192a:	ed 96       	adiw	r28, 0x3d	; 61
    192c:	6c af       	std	Y+60, r22	; 0x3c
    192e:	7d af       	std	Y+61, r23	; 0x3d
    1930:	8e af       	std	Y+62, r24	; 0x3e
    1932:	9f af       	std	Y+63, r25	; 0x3f
    1934:	ed 97       	sbiw	r28, 0x3d	; 61
    1936:	e1 96       	adiw	r28, 0x31	; 49
    1938:	2c ad       	ldd	r18, Y+60	; 0x3c
    193a:	3d ad       	ldd	r19, Y+61	; 0x3d
    193c:	4e ad       	ldd	r20, Y+62	; 0x3e
    193e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1940:	e1 97       	sbiw	r28, 0x31	; 49
    1942:	ca 01       	movw	r24, r20
    1944:	b9 01       	movw	r22, r18
    1946:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    194a:	e1 96       	adiw	r28, 0x31	; 49
    194c:	6c af       	std	Y+60, r22	; 0x3c
    194e:	7d af       	std	Y+61, r23	; 0x3d
    1950:	8e af       	std	Y+62, r24	; 0x3e
    1952:	9f af       	std	Y+63, r25	; 0x3f
    1954:	e1 97       	sbiw	r28, 0x31	; 49
    1956:	a7 01       	movw	r20, r14
    1958:	96 01       	movw	r18, r12
    195a:	c7 01       	movw	r24, r14
    195c:	b6 01       	movw	r22, r12
    195e:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1962:	9b 01       	movw	r18, r22
    1964:	ac 01       	movw	r20, r24
    1966:	e1 96       	adiw	r28, 0x31	; 49
    1968:	6c ad       	ldd	r22, Y+60	; 0x3c
    196a:	7d ad       	ldd	r23, Y+61	; 0x3d
    196c:	8e ad       	ldd	r24, Y+62	; 0x3e
    196e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1970:	e1 97       	sbiw	r28, 0x31	; 49
    1972:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1976:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <sqrt>
    197a:	f3 01       	movw	r30, r6
    197c:	60 83       	st	Z, r22
    197e:	71 83       	std	Z+1, r23	; 0x01
    1980:	82 83       	std	Z+2, r24	; 0x02
    1982:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1984:	a3 96       	adiw	r28, 0x23	; 35
    1986:	ae ad       	ldd	r26, Y+62	; 0x3e
    1988:	bf ad       	ldd	r27, Y+63	; 0x3f
    198a:	a3 97       	sbiw	r28, 0x23	; 35
    198c:	ad 92       	st	X+, r10
    198e:	bd 92       	st	X+, r11
    1990:	a3 96       	adiw	r28, 0x23	; 35
    1992:	bf af       	std	Y+63, r27	; 0x3f
    1994:	ae af       	std	Y+62, r26	; 0x3e
    1996:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1998:	f2 01       	movw	r30, r4
    199a:	01 93       	st	Z+, r16
    199c:	11 93       	st	Z+, r17
    199e:	2f 01       	movw	r4, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    19a0:	0f 5f       	subi	r16, 0xFF	; 255
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	f4 e0       	ldi	r31, 0x04	; 4
    19a6:	2f 0e       	add	r2, r31
    19a8:	31 1c       	adc	r3, r1
    19aa:	24 e0       	ldi	r18, 0x04	; 4
    19ac:	82 0e       	add	r8, r18
    19ae:	91 1c       	adc	r9, r1
    19b0:	34 e0       	ldi	r19, 0x04	; 4
    19b2:	63 0e       	add	r6, r19
    19b4:	71 1c       	adc	r7, r1
    19b6:	04 30       	cpi	r16, 0x04	; 4
    19b8:	11 05       	cpc	r17, r1
    19ba:	09 f0       	breq	.+2      	; 0x19be <localization+0x37a>
    19bc:	3a cf       	rjmp	.-396    	; 0x1832 <localization+0x1ee>
    19be:	cf 57       	subi	r28, 0x7F	; 127
    19c0:	df 4f       	sbci	r29, 0xFF	; 255
    19c2:	08 81       	ld	r16, Y
    19c4:	19 81       	ldd	r17, Y+1	; 0x01
    19c6:	c1 58       	subi	r28, 0x81	; 129
    19c8:	d0 40       	sbci	r29, 0x00	; 0
    19ca:	e3 96       	adiw	r28, 0x33	; 51
    19cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    19ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    19d0:	e3 97       	sbiw	r28, 0x33	; 51
    19d2:	08 1b       	sub	r16, r24
    19d4:	19 0b       	sbc	r17, r25
    19d6:	0c 5f       	subi	r16, 0xFC	; 252
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	e7 96       	adiw	r28, 0x37	; 55
    19dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    19de:	bf ad       	ldd	r27, Y+63	; 0x3f
    19e0:	e7 97       	sbiw	r28, 0x37	; 55
    19e2:	14 96       	adiw	r26, 0x04	; 4
    19e4:	e7 96       	adiw	r28, 0x37	; 55
    19e6:	bf af       	std	Y+63, r27	; 0x3f
    19e8:	ae af       	std	Y+62, r26	; 0x3e
    19ea:	e7 97       	sbiw	r28, 0x37	; 55
    19ec:	ab 96       	adiw	r28, 0x2b	; 43
    19ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    19f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    19f2:	ab 97       	sbiw	r28, 0x2b	; 43
    19f4:	34 96       	adiw	r30, 0x04	; 4
    19f6:	ab 96       	adiw	r28, 0x2b	; 43
    19f8:	ff af       	std	Y+63, r31	; 0x3f
    19fa:	ee af       	std	Y+62, r30	; 0x3e
    19fc:	ab 97       	sbiw	r28, 0x2b	; 43
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    19fe:	3c 01       	movw	r6, r24
    1a00:	03 97       	sbiw	r24, 0x03	; 3
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <localization+0x3c2>
    1a04:	c5 ce       	rjmp	.-630    	; 0x1790 <localization+0x14c>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1a06:	10 16       	cp	r1, r16
    1a08:	11 06       	cpc	r1, r17
    1a0a:	64 f5       	brge	.+88     	; 0x1a64 <localization+0x420>
    1a0c:	5e 01       	movw	r10, r28
    1a0e:	21 e2       	ldi	r18, 0x21	; 33
    1a10:	a2 0e       	add	r10, r18
    1a12:	b1 1c       	adc	r11, r1
    1a14:	21 2c       	mov	r2, r1
    1a16:	31 2c       	mov	r3, r1
    1a18:	e1 2c       	mov	r14, r1
    1a1a:	f1 2c       	mov	r15, r1
    1a1c:	c1 2c       	mov	r12, r1
    1a1e:	d1 2c       	mov	r13, r1
		if(d[i] > dmax){
    1a20:	d5 01       	movw	r26, r10
    1a22:	4d 90       	ld	r4, X+
    1a24:	5d 90       	ld	r5, X+
    1a26:	6d 90       	ld	r6, X+
    1a28:	7d 90       	ld	r7, X+
    1a2a:	5d 01       	movw	r10, r26
    1a2c:	b7 01       	movw	r22, r14
    1a2e:	0f 2c       	mov	r0, r15
    1a30:	00 0c       	add	r0, r0
    1a32:	88 0b       	sbc	r24, r24
    1a34:	99 0b       	sbc	r25, r25
    1a36:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	c3 01       	movw	r24, r6
    1a40:	b2 01       	movw	r22, r4
    1a42:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__gesf2>
    1a46:	18 16       	cp	r1, r24
    1a48:	34 f4       	brge	.+12     	; 0x1a56 <localization+0x412>
			indmax = i;
			dmax = d[i];
    1a4a:	c3 01       	movw	r24, r6
    1a4c:	b2 01       	movw	r22, r4
    1a4e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    1a52:	7b 01       	movw	r14, r22
    1a54:	16 01       	movw	r2, r12
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1a56:	bf ef       	ldi	r27, 0xFF	; 255
    1a58:	cb 1a       	sub	r12, r27
    1a5a:	db 0a       	sbc	r13, r27
    1a5c:	c0 16       	cp	r12, r16
    1a5e:	d1 06       	cpc	r13, r17
    1a60:	f9 f6       	brne	.-66     	; 0x1a20 <localization+0x3dc>
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <localization+0x428>
    1a64:	21 2c       	mov	r2, r1
    1a66:	31 2c       	mov	r3, r1
    1a68:	e1 2c       	mov	r14, r1
    1a6a:	f1 2c       	mov	r15, r1
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1a6c:	87 e4       	ldi	r24, 0x47	; 71
    1a6e:	92 e0       	ldi	r25, 0x02	; 2
    1a70:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(dmax);
    1a74:	c7 01       	movw	r24, r14
    1a76:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    1a7a:	85 e4       	ldi	r24, 0x45	; 69
    1a7c:	92 e0       	ldi	r25, 0x02	; 2
    1a7e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1a82:	10 16       	cp	r1, r16
    1a84:	11 06       	cpc	r1, r17
    1a86:	ac f5       	brge	.+106    	; 0x1af2 <localization+0x4ae>
    1a88:	4e 01       	movw	r8, r28
    1a8a:	e1 e2       	ldi	r30, 0x21	; 33
    1a8c:	8e 0e       	add	r8, r30
    1a8e:	91 1c       	adc	r9, r1
    1a90:	a3 96       	adiw	r28, 0x23	; 35
    1a92:	1f ae       	std	Y+63, r1	; 0x3f
    1a94:	1e ae       	std	Y+62, r1	; 0x3e
    1a96:	a3 97       	sbiw	r28, 0x23	; 35
    1a98:	0f 2e       	mov	r0, r31
    1a9a:	f0 e1       	ldi	r31, 0x10	; 16
    1a9c:	af 2e       	mov	r10, r31
    1a9e:	f7 e2       	ldi	r31, 0x27	; 39
    1aa0:	bf 2e       	mov	r11, r31
    1aa2:	f0 2d       	mov	r31, r0
    1aa4:	c1 2c       	mov	r12, r1
    1aa6:	d1 2c       	mov	r13, r1
		if(d[i] < dmin){
    1aa8:	d4 01       	movw	r26, r8
    1aaa:	4d 90       	ld	r4, X+
    1aac:	5d 90       	ld	r5, X+
    1aae:	6d 90       	ld	r6, X+
    1ab0:	7d 90       	ld	r7, X+
    1ab2:	4d 01       	movw	r8, r26
    1ab4:	b5 01       	movw	r22, r10
    1ab6:	0b 2c       	mov	r0, r11
    1ab8:	00 0c       	add	r0, r0
    1aba:	88 0b       	sbc	r24, r24
    1abc:	99 0b       	sbc	r25, r25
    1abe:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	c3 01       	movw	r24, r6
    1ac8:	b2 01       	movw	r22, r4
    1aca:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	4c f4       	brge	.+18     	; 0x1ae4 <localization+0x4a0>
			indmin = i;
			dmin = d[i];
    1ad2:	c3 01       	movw	r24, r6
    1ad4:	b2 01       	movw	r22, r4
    1ad6:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    1ada:	5b 01       	movw	r10, r22
    1adc:	a3 96       	adiw	r28, 0x23	; 35
    1ade:	df ae       	std	Y+63, r13	; 0x3f
    1ae0:	ce ae       	std	Y+62, r12	; 0x3e
    1ae2:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1ae4:	bf ef       	ldi	r27, 0xFF	; 255
    1ae6:	cb 1a       	sub	r12, r27
    1ae8:	db 0a       	sbc	r13, r27
    1aea:	c0 16       	cp	r12, r16
    1aec:	d1 06       	cpc	r13, r17
    1aee:	e1 f6       	brne	.-72     	; 0x1aa8 <localization+0x464>
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <localization+0x4b6>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1af2:	a3 96       	adiw	r28, 0x23	; 35
    1af4:	1f ae       	std	Y+63, r1	; 0x3f
    1af6:	1e ae       	std	Y+62, r1	; 0x3e
    1af8:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1afa:	80 90 10 01 	lds	r8, 0x0110
    1afe:	90 90 11 01 	lds	r9, 0x0111
    1b02:	a0 90 12 01 	lds	r10, 0x0112
    1b06:	b0 90 13 01 	lds	r11, 0x0113
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	ff 0c       	add	r15, r15
    1b0e:	88 0b       	sbc	r24, r24
    1b10:	99 0b       	sbc	r25, r25
    1b12:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    1b16:	a5 01       	movw	r20, r10
    1b18:	94 01       	movw	r18, r8
    1b1a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1b1e:	a9 96       	adiw	r28, 0x29	; 41
    1b20:	6c af       	std	Y+60, r22	; 0x3c
    1b22:	7d af       	std	Y+61, r23	; 0x3d
    1b24:	8e af       	std	Y+62, r24	; 0x3e
    1b26:	9f af       	std	Y+63, r25	; 0x3f
    1b28:	a9 97       	sbiw	r28, 0x29	; 41
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    1b2a:	40 90 14 01 	lds	r4, 0x0114
    1b2e:	50 90 15 01 	lds	r5, 0x0115
    1b32:	60 90 16 01 	lds	r6, 0x0116
    1b36:	70 90 17 01 	lds	r7, 0x0117
    1b3a:	0f 2e       	mov	r0, r31
    1b3c:	f4 e0       	ldi	r31, 0x04	; 4
    1b3e:	ef 2e       	mov	r14, r31
    1b40:	f1 e0       	ldi	r31, 0x01	; 1
    1b42:	ff 2e       	mov	r15, r31
    1b44:	f0 2d       	mov	r31, r0
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1b46:	c1 2c       	mov	r12, r1
    1b48:	d1 2c       	mov	r13, r1
	for(i = 1; i<4; i++){
    1b4a:	01 e0       	ldi	r16, 0x01	; 1
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
		if(abs(actdmax - actmax[i-1])<threshold){
    1b4e:	f7 01       	movw	r30, r14
    1b50:	21 91       	ld	r18, Z+
    1b52:	31 91       	ld	r19, Z+
    1b54:	41 91       	ld	r20, Z+
    1b56:	51 91       	ld	r21, Z+
    1b58:	7f 01       	movw	r14, r30
    1b5a:	a9 96       	adiw	r28, 0x29	; 41
    1b5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b64:	a9 97       	sbiw	r28, 0x29	; 41
    1b66:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1b6a:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    1b6e:	9b 01       	movw	r18, r22
    1b70:	77 23       	and	r23, r23
    1b72:	24 f4       	brge	.+8      	; 0x1b7c <localization+0x538>
    1b74:	22 27       	eor	r18, r18
    1b76:	33 27       	eor	r19, r19
    1b78:	26 1b       	sub	r18, r22
    1b7a:	37 0b       	sbc	r19, r23
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	33 0f       	add	r19, r19
    1b80:	88 0b       	sbc	r24, r24
    1b82:	99 0b       	sbc	r25, r25
    1b84:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    1b88:	a3 01       	movw	r20, r6
    1b8a:	92 01       	movw	r18, r4
    1b8c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__cmpsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	0c f4       	brge	.+2      	; 0x1b96 <localization+0x552>
    1b94:	68 01       	movw	r12, r16
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1b96:	0f 5f       	subi	r16, 0xFF	; 255
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	04 30       	cpi	r16, 0x04	; 4
    1b9c:	11 05       	cpc	r17, r1
    1b9e:	b9 f6       	brne	.-82     	; 0x1b4e <localization+0x50a>
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    1ba0:	65 96       	adiw	r28, 0x15	; 21
    1ba2:	1c ae       	std	Y+60, r1	; 0x3c
    1ba4:	1d ae       	std	Y+61, r1	; 0x3d
    1ba6:	1e ae       	std	Y+62, r1	; 0x3e
    1ba8:	1f ae       	std	Y+63, r1	; 0x3f
    1baa:	65 97       	sbiw	r28, 0x15	; 21
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e8       	ldi	r26, 0x80	; 128
    1bb2:	bf e3       	ldi	r27, 0x3F	; 63
    1bb4:	69 96       	adiw	r28, 0x19	; 25
    1bb6:	8c af       	std	Y+60, r24	; 0x3c
    1bb8:	9d af       	std	Y+61, r25	; 0x3d
    1bba:	ae af       	std	Y+62, r26	; 0x3e
    1bbc:	bf af       	std	Y+63, r27	; 0x3f
    1bbe:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1bc0:	f2 e0       	ldi	r31, 0x02	; 2
    1bc2:	cf 16       	cp	r12, r31
    1bc4:	d1 04       	cpc	r13, r1
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <localization+0x58e>
    1bc8:	23 e0       	ldi	r18, 0x03	; 3
    1bca:	c2 16       	cp	r12, r18
    1bcc:	d1 04       	cpc	r13, r1
    1bce:	51 f1       	breq	.+84     	; 0x1c24 <localization+0x5e0>
    1bd0:	5a c0       	rjmp	.+180    	; 0x1c86 <localization+0x642>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1bd2:	a5 01       	movw	r20, r10
    1bd4:	94 01       	movw	r18, r8
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	88 e6       	ldi	r24, 0x68	; 104
    1bdc:	91 e4       	ldi	r25, 0x41	; 65
    1bde:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
    1be2:	e5 96       	adiw	r28, 0x35	; 53
    1be4:	6c af       	std	Y+60, r22	; 0x3c
    1be6:	7d af       	std	Y+61, r23	; 0x3d
    1be8:	8e af       	std	Y+62, r24	; 0x3e
    1bea:	9f af       	std	Y+63, r25	; 0x3f
    1bec:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    1bee:	84 e9       	ldi	r24, 0x94	; 148
    1bf0:	97 e8       	ldi	r25, 0x87	; 135
    1bf2:	a5 ee       	ldi	r26, 0xE5	; 229
    1bf4:	be e3       	ldi	r27, 0x3E	; 62
    1bf6:	65 96       	adiw	r28, 0x15	; 21
    1bf8:	8c af       	std	Y+60, r24	; 0x3c
    1bfa:	9d af       	std	Y+61, r25	; 0x3d
    1bfc:	ae af       	std	Y+62, r26	; 0x3e
    1bfe:	bf af       	std	Y+63, r27	; 0x3f
    1c00:	65 97       	sbiw	r28, 0x15	; 21
    1c02:	81 ea       	ldi	r24, 0xA1	; 161
    1c04:	96 ed       	ldi	r25, 0xD6	; 214
    1c06:	a4 e6       	ldi	r26, 0x64	; 100
    1c08:	bf eb       	ldi	r27, 0xBF	; 191
    1c0a:	69 96       	adiw	r28, 0x19	; 25
    1c0c:	8c af       	std	Y+60, r24	; 0x3c
    1c0e:	9d af       	std	Y+61, r25	; 0x3d
    1c10:	ae af       	std	Y+62, r26	; 0x3e
    1c12:	bf af       	std	Y+63, r27	; 0x3f
    1c14:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1c16:	e9 96       	adiw	r28, 0x39	; 57
    1c18:	1c ae       	std	Y+60, r1	; 0x3c
    1c1a:	1d ae       	std	Y+61, r1	; 0x3d
    1c1c:	1e ae       	std	Y+62, r1	; 0x3e
    1c1e:	1f ae       	std	Y+63, r1	; 0x3f
    1c20:	e9 97       	sbiw	r28, 0x39	; 57
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1c22:	41 c0       	rjmp	.+130    	; 0x1ca6 <localization+0x662>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1c24:	a5 01       	movw	r20, r10
    1c26:	94 01       	movw	r18, r8
    1c28:	61 ee       	ldi	r22, 0xE1	; 225
    1c2a:	7a e7       	ldi	r23, 0x7A	; 122
    1c2c:	8a e3       	ldi	r24, 0x3A	; 58
    1c2e:	91 e4       	ldi	r25, 0x41	; 65
    1c30:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
    1c34:	e9 96       	adiw	r28, 0x39	; 57
    1c36:	6c af       	std	Y+60, r22	; 0x3c
    1c38:	7d af       	std	Y+61, r23	; 0x3d
    1c3a:	8e af       	std	Y+62, r24	; 0x3e
    1c3c:	9f af       	std	Y+63, r25	; 0x3f
    1c3e:	e9 97       	sbiw	r28, 0x39	; 57
    1c40:	a5 01       	movw	r20, r10
    1c42:	94 01       	movw	r18, r8
    1c44:	63 e2       	ldi	r22, 0x23	; 35
    1c46:	7b ed       	ldi	r23, 0xDB	; 219
    1c48:	8b e0       	ldi	r24, 0x0B	; 11
    1c4a:	91 ec       	ldi	r25, 0xC1	; 193
    1c4c:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
    1c50:	e5 96       	adiw	r28, 0x35	; 53
    1c52:	6c af       	std	Y+60, r22	; 0x3c
    1c54:	7d af       	std	Y+61, r23	; 0x3d
    1c56:	8e af       	std	Y+62, r24	; 0x3e
    1c58:	9f af       	std	Y+63, r25	; 0x3f
    1c5a:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1c5c:	86 e6       	ldi	r24, 0x66	; 102
    1c5e:	96 e6       	ldi	r25, 0x66	; 102
    1c60:	a6 e7       	ldi	r26, 0x76	; 118
    1c62:	bf eb       	ldi	r27, 0xBF	; 191
    1c64:	65 96       	adiw	r28, 0x15	; 21
    1c66:	8c af       	std	Y+60, r24	; 0x3c
    1c68:	9d af       	std	Y+61, r25	; 0x3d
    1c6a:	ae af       	std	Y+62, r26	; 0x3e
    1c6c:	bf af       	std	Y+63, r27	; 0x3f
    1c6e:	65 97       	sbiw	r28, 0x15	; 21
    1c70:	8f e9       	ldi	r24, 0x9F	; 159
    1c72:	9d ec       	ldi	r25, 0xCD	; 205
    1c74:	aa e8       	ldi	r26, 0x8A	; 138
    1c76:	be e3       	ldi	r27, 0x3E	; 62
    1c78:	69 96       	adiw	r28, 0x19	; 25
    1c7a:	8c af       	std	Y+60, r24	; 0x3c
    1c7c:	9d af       	std	Y+61, r25	; 0x3d
    1c7e:	ae af       	std	Y+62, r26	; 0x3e
    1c80:	bf af       	std	Y+63, r27	; 0x3f
    1c82:	69 97       	sbiw	r28, 0x19	; 25
			break;
    1c84:	10 c0       	rjmp	.+32     	; 0x1ca6 <localization+0x662>
		default:
			break;
	}
	
	if (ca > 0){
    1c86:	1c 14       	cp	r1, r12
    1c88:	1d 04       	cpc	r1, r13
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <localization+0x64a>
    1c8c:	59 c3       	rjmp	.+1714   	; 0x2340 <localization+0xcfc>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1c8e:	e9 96       	adiw	r28, 0x39	; 57
    1c90:	1c ae       	std	Y+60, r1	; 0x3c
    1c92:	1d ae       	std	Y+61, r1	; 0x3d
    1c94:	1e ae       	std	Y+62, r1	; 0x3e
    1c96:	1f ae       	std	Y+63, r1	; 0x3f
    1c98:	e9 97       	sbiw	r28, 0x39	; 57
    1c9a:	e5 96       	adiw	r28, 0x35	; 53
    1c9c:	1c ae       	std	Y+60, r1	; 0x3c
    1c9e:	1d ae       	std	Y+61, r1	; 0x3d
    1ca0:	1e ae       	std	Y+62, r1	; 0x3e
    1ca2:	1f ae       	std	Y+63, r1	; 0x3f
    1ca4:	e5 97       	sbiw	r28, 0x35	; 53
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    1ca6:	f1 01       	movw	r30, r2
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	8c 0f       	add	r24, r28
    1cb2:	9d 1f       	adc	r25, r29
    1cb4:	e8 0f       	add	r30, r24
    1cb6:	f9 1f       	adc	r31, r25
    1cb8:	00 ad       	ldd	r16, Z+56	; 0x38
    1cba:	11 ad       	ldd	r17, Z+57	; 0x39
    1cbc:	a3 96       	adiw	r28, 0x23	; 35
    1cbe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cc0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cc2:	a3 97       	sbiw	r28, 0x23	; 35
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	e8 0f       	add	r30, r24
    1cca:	f9 1f       	adc	r31, r25
    1ccc:	80 ad       	ldd	r24, Z+56	; 0x38
    1cce:	91 ad       	ldd	r25, Z+57	; 0x39
    1cd0:	80 17       	cp	r24, r16
    1cd2:	91 07       	cpc	r25, r17
    1cd4:	89 f0       	breq	.+34     	; 0x1cf8 <localization+0x6b4>
    1cd6:	a3 96       	adiw	r28, 0x23	; 35
    1cd8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cda:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cdc:	a3 97       	sbiw	r28, 0x23	; 35
    1cde:	ee 0f       	add	r30, r30
    1ce0:	ff 1f       	adc	r31, r31
    1ce2:	a5 e4       	ldi	r26, 0x45	; 69
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	ac 0f       	add	r26, r28
    1ce8:	bd 1f       	adc	r27, r29
    1cea:	ea 0f       	add	r30, r26
    1cec:	fb 1f       	adc	r31, r27
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	08 17       	cp	r16, r24
    1cf4:	19 07       	cpc	r17, r25
    1cf6:	61 f4       	brne	.+24     	; 0x1d10 <localization+0x6cc>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1cf8:	22 0c       	add	r2, r2
    1cfa:	33 1c       	adc	r3, r3
    1cfc:	a5 e4       	ldi	r26, 0x45	; 69
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	ac 0f       	add	r26, r28
    1d02:	bd 1f       	adc	r27, r29
    1d04:	a2 0d       	add	r26, r2
    1d06:	b3 1d       	adc	r27, r3
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1d08:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    1d0a:	0d 91       	ld	r16, X+
    1d0c:	1c 91       	ld	r17, X
    1d0e:	0b c0       	rjmp	.+22     	; 0x1d26 <localization+0x6e2>
		}
		else{
			coin_ind = to[indmax];
    1d10:	22 0c       	add	r2, r2
    1d12:	33 1c       	adc	r3, r3
    1d14:	e5 e4       	ldi	r30, 0x45	; 69
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	ec 0f       	add	r30, r28
    1d1a:	fd 1f       	adc	r31, r29
    1d1c:	e2 0d       	add	r30, r2
    1d1e:	f3 1d       	adc	r31, r3
    1d20:	01 90       	ld	r0, Z+
    1d22:	f0 81       	ld	r31, Z
    1d24:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1d26:	ca 94       	dec	r12
    1d28:	cd 28       	or	r12, r13
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <localization+0x6ea>
    1d2c:	49 c0       	rjmp	.+146    	; 0x1dc0 <localization+0x77c>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    1d2e:	ee 0f       	add	r30, r30
    1d30:	ff 1f       	adc	r31, r31
    1d32:	ee 0f       	add	r30, r30
    1d34:	ff 1f       	adc	r31, r31
    1d36:	ee 24       	eor	r14, r14
    1d38:	e3 94       	inc	r14
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	ec 0e       	add	r14, r28
    1d3e:	fd 1e       	adc	r15, r29
    1d40:	ee 0e       	add	r14, r30
    1d42:	ff 1e       	adc	r15, r31
    1d44:	68 01       	movw	r12, r16
    1d46:	cc 0c       	add	r12, r12
    1d48:	dd 1c       	adc	r13, r13
    1d4a:	cc 0c       	add	r12, r12
    1d4c:	dd 1c       	adc	r13, r13
    1d4e:	e1 e0       	ldi	r30, 0x01	; 1
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	ec 0f       	add	r30, r28
    1d54:	fd 1f       	adc	r31, r29
    1d56:	ce 0e       	add	r12, r30
    1d58:	df 1e       	adc	r13, r31
    1d5a:	d6 01       	movw	r26, r12
    1d5c:	2d 91       	ld	r18, X+
    1d5e:	3d 91       	ld	r19, X+
    1d60:	4d 91       	ld	r20, X+
    1d62:	5c 91       	ld	r21, X
    1d64:	f7 01       	movw	r30, r14
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1d7e:	ad 96       	adiw	r28, 0x2d	; 45
    1d80:	6c af       	std	Y+60, r22	; 0x3c
    1d82:	7d af       	std	Y+61, r23	; 0x3d
    1d84:	8e af       	std	Y+62, r24	; 0x3e
    1d86:	9f af       	std	Y+63, r25	; 0x3f
    1d88:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    1d8a:	d6 01       	movw	r26, r12
    1d8c:	50 96       	adiw	r26, 0x10	; 16
    1d8e:	2d 91       	ld	r18, X+
    1d90:	3d 91       	ld	r19, X+
    1d92:	4d 91       	ld	r20, X+
    1d94:	5c 91       	ld	r21, X
    1d96:	53 97       	sbiw	r26, 0x13	; 19
    1d98:	f7 01       	movw	r30, r14
    1d9a:	60 89       	ldd	r22, Z+16	; 0x10
    1d9c:	71 89       	ldd	r23, Z+17	; 0x11
    1d9e:	82 89       	ldd	r24, Z+18	; 0x12
    1da0:	93 89       	ldd	r25, Z+19	; 0x13
    1da2:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1db2:	a9 96       	adiw	r28, 0x29	; 41
    1db4:	6c af       	std	Y+60, r22	; 0x3c
    1db6:	7d af       	std	Y+61, r23	; 0x3d
    1db8:	8e af       	std	Y+62, r24	; 0x3e
    1dba:	9f af       	std	Y+63, r25	; 0x3f
    1dbc:	a9 97       	sbiw	r28, 0x29	; 41
    1dbe:	1e c0       	rjmp	.+60     	; 0x1dfc <localization+0x7b8>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1dc0:	ee 0f       	add	r30, r30
    1dc2:	ff 1f       	adc	r31, r31
    1dc4:	ee 0f       	add	r30, r30
    1dc6:	ff 1f       	adc	r31, r31
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	2c 0f       	add	r18, r28
    1dce:	3d 1f       	adc	r19, r29
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	a2 81       	ldd	r26, Z+2	; 0x02
    1dda:	b3 81       	ldd	r27, Z+3	; 0x03
    1ddc:	ad 96       	adiw	r28, 0x2d	; 45
    1dde:	8c af       	std	Y+60, r24	; 0x3c
    1de0:	9d af       	std	Y+61, r25	; 0x3d
    1de2:	ae af       	std	Y+62, r26	; 0x3e
    1de4:	bf af       	std	Y+63, r27	; 0x3f
    1de6:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    1de8:	80 89       	ldd	r24, Z+16	; 0x10
    1dea:	91 89       	ldd	r25, Z+17	; 0x11
    1dec:	a2 89       	ldd	r26, Z+18	; 0x12
    1dee:	b3 89       	ldd	r27, Z+19	; 0x13
    1df0:	a9 96       	adiw	r28, 0x29	; 41
    1df2:	8c af       	std	Y+60, r24	; 0x3c
    1df4:	9d af       	std	Y+61, r25	; 0x3d
    1df6:	ae af       	std	Y+62, r26	; 0x3e
    1df8:	bf af       	std	Y+63, r27	; 0x3f
    1dfa:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    1dfc:	00 0f       	add	r16, r16
    1dfe:	11 1f       	adc	r17, r17
    1e00:	00 0f       	add	r16, r16
    1e02:	11 1f       	adc	r17, r17
    1e04:	a1 e0       	ldi	r26, 0x01	; 1
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ac 0f       	add	r26, r28
    1e0a:	bd 1f       	adc	r27, r29
    1e0c:	0a 0f       	add	r16, r26
    1e0e:	1b 1f       	adc	r17, r27
    1e10:	ad 96       	adiw	r28, 0x2d	; 45
    1e12:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e14:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e16:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e18:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e1a:	ad 97       	sbiw	r28, 0x2d	; 45
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1e2a:	6b 01       	movw	r12, r22
    1e2c:	7c 01       	movw	r14, r24
    1e2e:	a9 96       	adiw	r28, 0x29	; 41
    1e30:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e32:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e34:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e36:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e38:	a9 97       	sbiw	r28, 0x29	; 41
    1e3a:	d8 01       	movw	r26, r16
    1e3c:	50 96       	adiw	r26, 0x10	; 16
    1e3e:	6d 91       	ld	r22, X+
    1e40:	7d 91       	ld	r23, X+
    1e42:	8d 91       	ld	r24, X+
    1e44:	9c 91       	ld	r25, X
    1e46:	53 97       	sbiw	r26, 0x13	; 19
    1e48:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1e4c:	2b 01       	movw	r4, r22
    1e4e:	3c 01       	movw	r6, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    1e50:	a7 01       	movw	r20, r14
    1e52:	96 01       	movw	r18, r12
    1e54:	c7 01       	movw	r24, r14
    1e56:	b6 01       	movw	r22, r12
    1e58:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1e5c:	4b 01       	movw	r8, r22
    1e5e:	5c 01       	movw	r10, r24
    1e60:	a3 01       	movw	r20, r6
    1e62:	92 01       	movw	r18, r4
    1e64:	c3 01       	movw	r24, r6
    1e66:	b2 01       	movw	r22, r4
    1e68:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1e6c:	a5 96       	adiw	r28, 0x25	; 37
    1e6e:	6c af       	std	Y+60, r22	; 0x3c
    1e70:	7d af       	std	Y+61, r23	; 0x3d
    1e72:	8e af       	std	Y+62, r24	; 0x3e
    1e74:	9f af       	std	Y+63, r25	; 0x3f
    1e76:	a5 97       	sbiw	r28, 0x25	; 37
    1e78:	a5 96       	adiw	r28, 0x25	; 37
    1e7a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e7c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e7e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e80:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e82:	a5 97       	sbiw	r28, 0x25	; 37
    1e84:	c5 01       	movw	r24, r10
    1e86:	b4 01       	movw	r22, r8
    1e88:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1e8c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <sqrt>
    1e90:	4b 01       	movw	r8, r22
    1e92:	5c 01       	movw	r10, r24
		ref_vc[0] = ref_vc[0] / norm;
    1e94:	9b 01       	movw	r18, r22
    1e96:	ac 01       	movw	r20, r24
    1e98:	c7 01       	movw	r24, r14
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
    1ea0:	6b 01       	movw	r12, r22
    1ea2:	7c 01       	movw	r14, r24
    1ea4:	6d 96       	adiw	r28, 0x1d	; 29
    1ea6:	6c af       	std	Y+60, r22	; 0x3c
    1ea8:	7d af       	std	Y+61, r23	; 0x3d
    1eaa:	8e af       	std	Y+62, r24	; 0x3e
    1eac:	9f af       	std	Y+63, r25	; 0x3f
    1eae:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    1eb0:	a5 01       	movw	r20, r10
    1eb2:	94 01       	movw	r18, r8
    1eb4:	c3 01       	movw	r24, r6
    1eb6:	b2 01       	movw	r22, r4
    1eb8:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
    1ebc:	4b 01       	movw	r8, r22
    1ebe:	5c 01       	movw	r10, r24
    1ec0:	a1 96       	adiw	r28, 0x21	; 33
    1ec2:	6c af       	std	Y+60, r22	; 0x3c
    1ec4:	7d af       	std	Y+61, r23	; 0x3d
    1ec6:	8e af       	std	Y+62, r24	; 0x3e
    1ec8:	9f af       	std	Y+63, r25	; 0x3f
    1eca:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    1ecc:	65 96       	adiw	r28, 0x15	; 21
    1ece:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ed0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ed2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ed4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ed6:	65 97       	sbiw	r28, 0x15	; 21
    1ed8:	c7 01       	movw	r24, r14
    1eda:	b6 01       	movw	r22, r12
    1edc:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1ee0:	6b 01       	movw	r12, r22
    1ee2:	7c 01       	movw	r14, r24
    1ee4:	69 96       	adiw	r28, 0x19	; 25
    1ee6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1eea:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eec:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eee:	69 97       	sbiw	r28, 0x19	; 25
    1ef0:	c5 01       	movw	r24, r10
    1ef2:	b4 01       	movw	r22, r8
    1ef4:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1ef8:	9b 01       	movw	r18, r22
    1efa:	ac 01       	movw	r20, r24
    1efc:	c7 01       	movw	r24, r14
    1efe:	b6 01       	movw	r22, r12
    1f00:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1f04:	2b 01       	movw	r4, r22
    1f06:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    1f08:	9b 01       	movw	r18, r22
    1f0a:	ac 01       	movw	r20, r24
    1f0c:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1f10:	6b 01       	movw	r12, r22
    1f12:	7c 01       	movw	r14, r24
    1f14:	a7 01       	movw	r20, r14
    1f16:	96 01       	movw	r18, r12
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	80 e8       	ldi	r24, 0x80	; 128
    1f1e:	9f e3       	ldi	r25, 0x3F	; 63
    1f20:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1f24:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <sqrt>
    1f28:	a5 96       	adiw	r28, 0x25	; 37
    1f2a:	6c af       	std	Y+60, r22	; 0x3c
    1f2c:	7d af       	std	Y+61, r23	; 0x3d
    1f2e:	8e af       	std	Y+62, r24	; 0x3e
    1f30:	9f af       	std	Y+63, r25	; 0x3f
    1f32:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    1f34:	fe 01       	movw	r30, r28
    1f36:	ef 5a       	subi	r30, 0xAF	; 175
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	7f 01       	movw	r14, r30
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	07 5a       	subi	r16, 0xA7	; 167
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	9b 01       	movw	r18, r22
    1f44:	ac 01       	movw	r20, r24
    1f46:	c3 01       	movw	r24, r6
    1f48:	b2 01       	movw	r22, r4
    1f4a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <find_sign>
    1f4e:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <localization+0x912>
    1f54:	9f c0       	rjmp	.+318    	; 0x2094 <localization+0xa50>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    1f56:	0c e1       	ldi	r16, 0x1C	; 28
    1f58:	11 e0       	ldi	r17, 0x01	; 1
    1f5a:	d8 01       	movw	r26, r16
    1f5c:	2d 91       	ld	r18, X+
    1f5e:	3d 91       	ld	r19, X+
    1f60:	4d 91       	ld	r20, X+
    1f62:	5c 91       	ld	r21, X
    1f64:	ad 96       	adiw	r28, 0x2d	; 45
    1f66:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f68:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f6e:	ad 97       	sbiw	r28, 0x2d	; 45
    1f70:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1f74:	a3 01       	movw	r20, r6
    1f76:	92 01       	movw	r18, r4
    1f78:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1f7c:	9b 01       	movw	r18, r22
    1f7e:	ac 01       	movw	r20, r24
    1f80:	e9 96       	adiw	r28, 0x39	; 57
    1f82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f8a:	e9 97       	sbiw	r28, 0x39	; 57
    1f8c:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1f90:	6b 01       	movw	r12, r22
    1f92:	7c 01       	movw	r14, r24
    1f94:	f8 01       	movw	r30, r16
    1f96:	24 81       	ldd	r18, Z+4	; 0x04
    1f98:	35 81       	ldd	r19, Z+5	; 0x05
    1f9a:	46 81       	ldd	r20, Z+6	; 0x06
    1f9c:	57 81       	ldd	r21, Z+7	; 0x07
    1f9e:	a9 96       	adiw	r28, 0x29	; 41
    1fa0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fa2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fa4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fa8:	a9 97       	sbiw	r28, 0x29	; 41
    1faa:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1fae:	a5 96       	adiw	r28, 0x25	; 37
    1fb0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fb2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fb4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fb6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fb8:	a5 97       	sbiw	r28, 0x25	; 37
    1fba:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1fbe:	9b 01       	movw	r18, r22
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	b6 01       	movw	r22, r12
    1fc6:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    1fca:	ef 96       	adiw	r28, 0x3f	; 63
    1fcc:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fce:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fd0:	ef 97       	sbiw	r28, 0x3f	; 63
    1fd2:	6d 93       	st	X+, r22
    1fd4:	7d 93       	st	X+, r23
    1fd6:	8d 93       	st	X+, r24
    1fd8:	9c 93       	st	X, r25
    1fda:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    1fdc:	f8 01       	movw	r30, r16
    1fde:	24 81       	ldd	r18, Z+4	; 0x04
    1fe0:	35 81       	ldd	r19, Z+5	; 0x05
    1fe2:	46 81       	ldd	r20, Z+6	; 0x06
    1fe4:	57 81       	ldd	r21, Z+7	; 0x07
    1fe6:	a9 96       	adiw	r28, 0x29	; 41
    1fe8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fea:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fec:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fee:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ff0:	a9 97       	sbiw	r28, 0x29	; 41
    1ff2:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    1ff6:	a3 01       	movw	r20, r6
    1ff8:	92 01       	movw	r18, r4
    1ffa:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    1ffe:	9b 01       	movw	r18, r22
    2000:	ac 01       	movw	r20, r24
    2002:	e5 96       	adiw	r28, 0x35	; 53
    2004:	6c ad       	ldd	r22, Y+60	; 0x3c
    2006:	7d ad       	ldd	r23, Y+61	; 0x3d
    2008:	8e ad       	ldd	r24, Y+62	; 0x3e
    200a:	9f ad       	ldd	r25, Y+63	; 0x3f
    200c:	e5 97       	sbiw	r28, 0x35	; 53
    200e:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    2012:	6b 01       	movw	r12, r22
    2014:	7c 01       	movw	r14, r24
    2016:	d8 01       	movw	r26, r16
    2018:	2d 91       	ld	r18, X+
    201a:	3d 91       	ld	r19, X+
    201c:	4d 91       	ld	r20, X+
    201e:	5c 91       	ld	r21, X
    2020:	ad 96       	adiw	r28, 0x2d	; 45
    2022:	6c ad       	ldd	r22, Y+60	; 0x3c
    2024:	7d ad       	ldd	r23, Y+61	; 0x3d
    2026:	8e ad       	ldd	r24, Y+62	; 0x3e
    2028:	9f ad       	ldd	r25, Y+63	; 0x3f
    202a:	ad 97       	sbiw	r28, 0x2d	; 45
    202c:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    2030:	a5 96       	adiw	r28, 0x25	; 37
    2032:	2c ad       	ldd	r18, Y+60	; 0x3c
    2034:	3d ad       	ldd	r19, Y+61	; 0x3d
    2036:	4e ad       	ldd	r20, Y+62	; 0x3e
    2038:	5f ad       	ldd	r21, Y+63	; 0x3f
    203a:	a5 97       	sbiw	r28, 0x25	; 37
    203c:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    2040:	9b 01       	movw	r18, r22
    2042:	ac 01       	movw	r20, r24
    2044:	c7 01       	movw	r24, r14
    2046:	b6 01       	movw	r22, r12
    2048:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    204c:	ef 96       	adiw	r28, 0x3f	; 63
    204e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2050:	ff ad       	ldd	r31, Y+63	; 0x3f
    2052:	ef 97       	sbiw	r28, 0x3f	; 63
    2054:	64 83       	std	Z+4, r22	; 0x04
    2056:	75 83       	std	Z+5, r23	; 0x05
    2058:	86 83       	std	Z+6, r24	; 0x06
    205a:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    205c:	c1 58       	subi	r28, 0x81	; 129
    205e:	df 4f       	sbci	r29, 0xFF	; 255
    2060:	a8 81       	ld	r26, Y
    2062:	b9 81       	ldd	r27, Y+1	; 0x01
    2064:	cf 57       	subi	r28, 0x7F	; 127
    2066:	d0 40       	sbci	r29, 0x00	; 0
    2068:	4d 92       	st	X+, r4
    206a:	5d 92       	st	X+, r5
    206c:	6d 92       	st	X+, r6
    206e:	7c 92       	st	X, r7
    2070:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    2072:	a5 96       	adiw	r28, 0x25	; 37
    2074:	8c ad       	ldd	r24, Y+60	; 0x3c
    2076:	9d ad       	ldd	r25, Y+61	; 0x3d
    2078:	ae ad       	ldd	r26, Y+62	; 0x3e
    207a:	bf ad       	ldd	r27, Y+63	; 0x3f
    207c:	a5 97       	sbiw	r28, 0x25	; 37
    207e:	c1 58       	subi	r28, 0x81	; 129
    2080:	df 4f       	sbci	r29, 0xFF	; 255
    2082:	e8 81       	ld	r30, Y
    2084:	f9 81       	ldd	r31, Y+1	; 0x01
    2086:	cf 57       	subi	r28, 0x7F	; 127
    2088:	d0 40       	sbci	r29, 0x00	; 0
    208a:	84 83       	std	Z+4, r24	; 0x04
    208c:	95 83       	std	Z+5, r25	; 0x05
    208e:	a6 83       	std	Z+6, r26	; 0x06
    2090:	b7 83       	std	Z+7, r27	; 0x07
    2092:	9f c0       	rjmp	.+318    	; 0x21d2 <localization+0xb8e>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    2094:	0c e1       	ldi	r16, 0x1C	; 28
    2096:	11 e0       	ldi	r17, 0x01	; 1
    2098:	d8 01       	movw	r26, r16
    209a:	2d 91       	ld	r18, X+
    209c:	3d 91       	ld	r19, X+
    209e:	4d 91       	ld	r20, X+
    20a0:	5c 91       	ld	r21, X
    20a2:	ad 96       	adiw	r28, 0x2d	; 45
    20a4:	6c ad       	ldd	r22, Y+60	; 0x3c
    20a6:	7d ad       	ldd	r23, Y+61	; 0x3d
    20a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    20aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ac:	ad 97       	sbiw	r28, 0x2d	; 45
    20ae:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    20b2:	a3 01       	movw	r20, r6
    20b4:	92 01       	movw	r18, r4
    20b6:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    20ba:	9b 01       	movw	r18, r22
    20bc:	ac 01       	movw	r20, r24
    20be:	e9 96       	adiw	r28, 0x39	; 57
    20c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    20c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    20c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20c8:	e9 97       	sbiw	r28, 0x39	; 57
    20ca:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    20ce:	6b 01       	movw	r12, r22
    20d0:	7c 01       	movw	r14, r24
    20d2:	f8 01       	movw	r30, r16
    20d4:	24 81       	ldd	r18, Z+4	; 0x04
    20d6:	35 81       	ldd	r19, Z+5	; 0x05
    20d8:	46 81       	ldd	r20, Z+6	; 0x06
    20da:	57 81       	ldd	r21, Z+7	; 0x07
    20dc:	a9 96       	adiw	r28, 0x29	; 41
    20de:	6c ad       	ldd	r22, Y+60	; 0x3c
    20e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    20e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    20e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    20e6:	a9 97       	sbiw	r28, 0x29	; 41
    20e8:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    20ec:	a5 96       	adiw	r28, 0x25	; 37
    20ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    20f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    20f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    20f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    20f6:	a5 97       	sbiw	r28, 0x25	; 37
    20f8:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
    2100:	c7 01       	movw	r24, r14
    2102:	b6 01       	movw	r22, r12
    2104:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    2108:	ef 96       	adiw	r28, 0x3f	; 63
    210a:	ae ad       	ldd	r26, Y+62	; 0x3e
    210c:	bf ad       	ldd	r27, Y+63	; 0x3f
    210e:	ef 97       	sbiw	r28, 0x3f	; 63
    2110:	6d 93       	st	X+, r22
    2112:	7d 93       	st	X+, r23
    2114:	8d 93       	st	X+, r24
    2116:	9c 93       	st	X, r25
    2118:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    211a:	f8 01       	movw	r30, r16
    211c:	24 81       	ldd	r18, Z+4	; 0x04
    211e:	35 81       	ldd	r19, Z+5	; 0x05
    2120:	46 81       	ldd	r20, Z+6	; 0x06
    2122:	57 81       	ldd	r21, Z+7	; 0x07
    2124:	a9 96       	adiw	r28, 0x29	; 41
    2126:	6c ad       	ldd	r22, Y+60	; 0x3c
    2128:	7d ad       	ldd	r23, Y+61	; 0x3d
    212a:	8e ad       	ldd	r24, Y+62	; 0x3e
    212c:	9f ad       	ldd	r25, Y+63	; 0x3f
    212e:	a9 97       	sbiw	r28, 0x29	; 41
    2130:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    2134:	a3 01       	movw	r20, r6
    2136:	92 01       	movw	r18, r4
    2138:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    213c:	9b 01       	movw	r18, r22
    213e:	ac 01       	movw	r20, r24
    2140:	e5 96       	adiw	r28, 0x35	; 53
    2142:	6c ad       	ldd	r22, Y+60	; 0x3c
    2144:	7d ad       	ldd	r23, Y+61	; 0x3d
    2146:	8e ad       	ldd	r24, Y+62	; 0x3e
    2148:	9f ad       	ldd	r25, Y+63	; 0x3f
    214a:	e5 97       	sbiw	r28, 0x35	; 53
    214c:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    2150:	6b 01       	movw	r12, r22
    2152:	7c 01       	movw	r14, r24
    2154:	d8 01       	movw	r26, r16
    2156:	2d 91       	ld	r18, X+
    2158:	3d 91       	ld	r19, X+
    215a:	4d 91       	ld	r20, X+
    215c:	5c 91       	ld	r21, X
    215e:	ad 96       	adiw	r28, 0x2d	; 45
    2160:	6c ad       	ldd	r22, Y+60	; 0x3c
    2162:	7d ad       	ldd	r23, Y+61	; 0x3d
    2164:	8e ad       	ldd	r24, Y+62	; 0x3e
    2166:	9f ad       	ldd	r25, Y+63	; 0x3f
    2168:	ad 97       	sbiw	r28, 0x2d	; 45
    216a:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    216e:	a5 96       	adiw	r28, 0x25	; 37
    2170:	2c ad       	ldd	r18, Y+60	; 0x3c
    2172:	3d ad       	ldd	r19, Y+61	; 0x3d
    2174:	4e ad       	ldd	r20, Y+62	; 0x3e
    2176:	5f ad       	ldd	r21, Y+63	; 0x3f
    2178:	a5 97       	sbiw	r28, 0x25	; 37
    217a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    217e:	9b 01       	movw	r18, r22
    2180:	ac 01       	movw	r20, r24
    2182:	c7 01       	movw	r24, r14
    2184:	b6 01       	movw	r22, r12
    2186:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3>
    218a:	ef 96       	adiw	r28, 0x3f	; 63
    218c:	ee ad       	ldd	r30, Y+62	; 0x3e
    218e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2190:	ef 97       	sbiw	r28, 0x3f	; 63
    2192:	64 83       	std	Z+4, r22	; 0x04
    2194:	75 83       	std	Z+5, r23	; 0x05
    2196:	86 83       	std	Z+6, r24	; 0x06
    2198:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    219a:	c1 58       	subi	r28, 0x81	; 129
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	a8 81       	ld	r26, Y
    21a0:	b9 81       	ldd	r27, Y+1	; 0x01
    21a2:	cf 57       	subi	r28, 0x7F	; 127
    21a4:	d0 40       	sbci	r29, 0x00	; 0
    21a6:	4d 92       	st	X+, r4
    21a8:	5d 92       	st	X+, r5
    21aa:	6d 92       	st	X+, r6
    21ac:	7c 92       	st	X, r7
    21ae:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    21b0:	a5 96       	adiw	r28, 0x25	; 37
    21b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    21b4:	9d ad       	ldd	r25, Y+61	; 0x3d
    21b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    21b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    21ba:	a5 97       	sbiw	r28, 0x25	; 37
    21bc:	b0 58       	subi	r27, 0x80	; 128
    21be:	c1 58       	subi	r28, 0x81	; 129
    21c0:	df 4f       	sbci	r29, 0xFF	; 255
    21c2:	e8 81       	ld	r30, Y
    21c4:	f9 81       	ldd	r31, Y+1	; 0x01
    21c6:	cf 57       	subi	r28, 0x7F	; 127
    21c8:	d0 40       	sbci	r29, 0x00	; 0
    21ca:	84 83       	std	Z+4, r24	; 0x04
    21cc:	95 83       	std	Z+5, r25	; 0x05
    21ce:	a6 83       	std	Z+6, r26	; 0x06
    21d0:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    21d2:	ef 96       	adiw	r28, 0x3f	; 63
    21d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    21d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    21d8:	ef 97       	sbiw	r28, 0x3f	; 63
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	a2 81       	ldd	r26, Z+2	; 0x02
    21e0:	b3 81       	ldd	r27, Z+3	; 0x03
    21e2:	2c e6       	ldi	r18, 0x6C	; 108
    21e4:	31 e0       	ldi	r19, 0x01	; 1
    21e6:	f9 01       	movw	r30, r18
    21e8:	80 83       	st	Z, r24
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	a2 83       	std	Z+2, r26	; 0x02
    21ee:	b3 83       	std	Z+3, r27	; 0x03
		c_wii_last[1] = c_wii[1];
    21f0:	ef 96       	adiw	r28, 0x3f	; 63
    21f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    21f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    21f6:	ef 97       	sbiw	r28, 0x3f	; 63
    21f8:	84 81       	ldd	r24, Z+4	; 0x04
    21fa:	95 81       	ldd	r25, Z+5	; 0x05
    21fc:	a6 81       	ldd	r26, Z+6	; 0x06
    21fe:	b7 81       	ldd	r27, Z+7	; 0x07
    2200:	f9 01       	movw	r30, r18
    2202:	84 83       	std	Z+4, r24	; 0x04
    2204:	95 83       	std	Z+5, r25	; 0x05
    2206:	a6 83       	std	Z+6, r26	; 0x06
    2208:	b7 83       	std	Z+7, r27	; 0x07
		dir_last[0] = dir[0];
    220a:	c1 58       	subi	r28, 0x81	; 129
    220c:	df 4f       	sbci	r29, 0xFF	; 255
    220e:	e8 81       	ld	r30, Y
    2210:	f9 81       	ldd	r31, Y+1	; 0x01
    2212:	cf 57       	subi	r28, 0x7F	; 127
    2214:	d0 40       	sbci	r29, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	a2 81       	ldd	r26, Z+2	; 0x02
    221c:	b3 81       	ldd	r27, Z+3	; 0x03
    221e:	24 e6       	ldi	r18, 0x64	; 100
    2220:	31 e0       	ldi	r19, 0x01	; 1
    2222:	f9 01       	movw	r30, r18
    2224:	80 83       	st	Z, r24
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	a2 83       	std	Z+2, r26	; 0x02
    222a:	b3 83       	std	Z+3, r27	; 0x03
		dir_last[1] = dir[1];
    222c:	c1 58       	subi	r28, 0x81	; 129
    222e:	df 4f       	sbci	r29, 0xFF	; 255
    2230:	e8 81       	ld	r30, Y
    2232:	f9 81       	ldd	r31, Y+1	; 0x01
    2234:	cf 57       	subi	r28, 0x7F	; 127
    2236:	d0 40       	sbci	r29, 0x00	; 0
    2238:	84 81       	ldd	r24, Z+4	; 0x04
    223a:	95 81       	ldd	r25, Z+5	; 0x05
    223c:	a6 81       	ldd	r26, Z+6	; 0x06
    223e:	b7 81       	ldd	r27, Z+7	; 0x07
    2240:	f9 01       	movw	r30, r18
    2242:	84 83       	std	Z+4, r24	; 0x04
    2244:	95 83       	std	Z+5, r25	; 0x05
    2246:	a6 83       	std	Z+6, r26	; 0x06
    2248:	b7 83       	std	Z+7, r27	; 0x07
		
		if (*state == 4){
    224a:	cd 57       	subi	r28, 0x7D	; 125
    224c:	df 4f       	sbci	r29, 0xFF	; 255
    224e:	a8 81       	ld	r26, Y
    2250:	b9 81       	ldd	r27, Y+1	; 0x01
    2252:	c3 58       	subi	r28, 0x83	; 131
    2254:	d0 40       	sbci	r29, 0x00	; 0
    2256:	8d 91       	ld	r24, X+
    2258:	9c 91       	ld	r25, X
    225a:	04 97       	sbiw	r24, 0x04	; 4
    225c:	09 f0       	breq	.+2      	; 0x2260 <localization+0xc1c>
    225e:	3f c0       	rjmp	.+126    	; 0x22de <localization+0xc9a>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    2260:	ef 96       	adiw	r28, 0x3f	; 63
    2262:	ee ad       	ldd	r30, Y+62	; 0x3e
    2264:	ff ad       	ldd	r31, Y+63	; 0x3f
    2266:	ef 97       	sbiw	r28, 0x3f	; 63
    2268:	24 81       	ldd	r18, Z+4	; 0x04
    226a:	35 81       	ldd	r19, Z+5	; 0x05
    226c:	46 81       	ldd	r20, Z+6	; 0x06
    226e:	57 81       	ldd	r21, Z+7	; 0x07
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	cb 57       	subi	r28, 0x7B	; 123
    227a:	df 4f       	sbci	r29, 0xFF	; 255
    227c:	08 81       	ld	r16, Y
    227e:	19 81       	ldd	r17, Y+1	; 0x01
    2280:	c5 58       	subi	r28, 0x85	; 133
    2282:	d0 40       	sbci	r29, 0x00	; 0
    2284:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <find_if_reach>
			if (!if_reach){
    2288:	89 2b       	or	r24, r25
    228a:	09 f5       	brne	.+66     	; 0x22ce <localization+0xc8a>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    228c:	c1 58       	subi	r28, 0x81	; 129
    228e:	df 4f       	sbci	r29, 0xFF	; 255
    2290:	a8 80       	ld	r10, Y
    2292:	b9 80       	ldd	r11, Y+1	; 0x01
    2294:	cf 57       	subi	r28, 0x7F	; 127
    2296:	d0 40       	sbci	r29, 0x00	; 0
    2298:	ef 96       	adiw	r28, 0x3f	; 63
    229a:	ce ac       	ldd	r12, Y+62	; 0x3e
    229c:	df ac       	ldd	r13, Y+63	; 0x3f
    229e:	ef 97       	sbiw	r28, 0x3f	; 63
    22a0:	78 01       	movw	r14, r16
    22a2:	93 01       	movw	r18, r6
    22a4:	82 01       	movw	r16, r4
    22a6:	a5 96       	adiw	r28, 0x25	; 37
    22a8:	4c ad       	ldd	r20, Y+60	; 0x3c
    22aa:	5d ad       	ldd	r21, Y+61	; 0x3d
    22ac:	6e ad       	ldd	r22, Y+62	; 0x3e
    22ae:	7f ad       	ldd	r23, Y+63	; 0x3f
    22b0:	a5 97       	sbiw	r28, 0x25	; 37
    22b2:	c4 01       	movw	r24, r8
    22b4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <cal_angle>
				PID_p2p(Kp_p2p, Kd_p2p);
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	48 ec       	ldi	r20, 0xC8	; 200
    22be:	53 e4       	ldi	r21, 0x43	; 67
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	88 ec       	ldi	r24, 0xC8	; 200
    22c6:	92 e4       	ldi	r25, 0x42	; 66
    22c8:	0e 94 aa 09 	call	0x1354	; 0x1354 <PID_p2p>
    22cc:	08 c0       	rjmp	.+16     	; 0x22de <localization+0xc9a>
			}
			else{ // reach goal, stop
				OCR1B = 0;
    22ce:	10 92 8b 00 	sts	0x008B, r1
    22d2:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    22d6:	10 92 8d 00 	sts	0x008D, r1
    22da:	10 92 8c 00 	sts	0x008C, r1
				//if (*state == 4){
					//*state = 5;
				//}
			}
		}
		if (*state == 3){
    22de:	cd 57       	subi	r28, 0x7D	; 125
    22e0:	df 4f       	sbci	r29, 0xFF	; 255
    22e2:	a8 81       	ld	r26, Y
    22e4:	b9 81       	ldd	r27, Y+1	; 0x01
    22e6:	c3 58       	subi	r28, 0x83	; 131
    22e8:	d0 40       	sbci	r29, 0x00	; 0
    22ea:	8d 91       	ld	r24, X+
    22ec:	9c 91       	ld	r25, X
    22ee:	03 97       	sbiw	r24, 0x03	; 3
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <localization+0xcb0>
    22f2:	62 c0       	rjmp	.+196    	; 0x23b8 <localization+0xd74>
			cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    22f4:	c1 58       	subi	r28, 0x81	; 129
    22f6:	df 4f       	sbci	r29, 0xFF	; 255
    22f8:	a8 80       	ld	r10, Y
    22fa:	b9 80       	ldd	r11, Y+1	; 0x01
    22fc:	cf 57       	subi	r28, 0x7F	; 127
    22fe:	d0 40       	sbci	r29, 0x00	; 0
    2300:	ef 96       	adiw	r28, 0x3f	; 63
    2302:	ce ac       	ldd	r12, Y+62	; 0x3e
    2304:	df ac       	ldd	r13, Y+63	; 0x3f
    2306:	ef 97       	sbiw	r28, 0x3f	; 63
    2308:	cb 57       	subi	r28, 0x7B	; 123
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	e8 80       	ld	r14, Y
    230e:	f9 80       	ldd	r15, Y+1	; 0x01
    2310:	c5 58       	subi	r28, 0x85	; 133
    2312:	d0 40       	sbci	r29, 0x00	; 0
    2314:	93 01       	movw	r18, r6
    2316:	82 01       	movw	r16, r4
    2318:	a5 96       	adiw	r28, 0x25	; 37
    231a:	4c ad       	ldd	r20, Y+60	; 0x3c
    231c:	5d ad       	ldd	r21, Y+61	; 0x3d
    231e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2320:	7f ad       	ldd	r23, Y+63	; 0x3f
    2322:	a5 97       	sbiw	r28, 0x25	; 37
    2324:	c4 01       	movw	r24, r8
    2326:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <cal_angle>
			PID_alpha(Kp_loc, Kd_loc);
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	48 ec       	ldi	r20, 0xC8	; 200
    2330:	53 e4       	ldi	r21, 0x43	; 67
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	92 e4       	ldi	r25, 0x42	; 66
    233a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <PID_alpha>
    233e:	3c c0       	rjmp	.+120    	; 0x23b8 <localization+0xd74>
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    2340:	2c e6       	ldi	r18, 0x6C	; 108
    2342:	31 e0       	ldi	r19, 0x01	; 1
    2344:	f9 01       	movw	r30, r18
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	a2 81       	ldd	r26, Z+2	; 0x02
    234c:	b3 81       	ldd	r27, Z+3	; 0x03
    234e:	ef 96       	adiw	r28, 0x3f	; 63
    2350:	ee ad       	ldd	r30, Y+62	; 0x3e
    2352:	ff ad       	ldd	r31, Y+63	; 0x3f
    2354:	ef 97       	sbiw	r28, 0x3f	; 63
    2356:	80 83       	st	Z, r24
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	a2 83       	std	Z+2, r26	; 0x02
    235c:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    235e:	f9 01       	movw	r30, r18
    2360:	84 81       	ldd	r24, Z+4	; 0x04
    2362:	95 81       	ldd	r25, Z+5	; 0x05
    2364:	a6 81       	ldd	r26, Z+6	; 0x06
    2366:	b7 81       	ldd	r27, Z+7	; 0x07
    2368:	ef 96       	adiw	r28, 0x3f	; 63
    236a:	ee ad       	ldd	r30, Y+62	; 0x3e
    236c:	ff ad       	ldd	r31, Y+63	; 0x3f
    236e:	ef 97       	sbiw	r28, 0x3f	; 63
    2370:	84 83       	std	Z+4, r24	; 0x04
    2372:	95 83       	std	Z+5, r25	; 0x05
    2374:	a6 83       	std	Z+6, r26	; 0x06
    2376:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    2378:	24 e6       	ldi	r18, 0x64	; 100
    237a:	31 e0       	ldi	r19, 0x01	; 1
    237c:	f9 01       	movw	r30, r18
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	a2 81       	ldd	r26, Z+2	; 0x02
    2384:	b3 81       	ldd	r27, Z+3	; 0x03
    2386:	c1 58       	subi	r28, 0x81	; 129
    2388:	df 4f       	sbci	r29, 0xFF	; 255
    238a:	e8 81       	ld	r30, Y
    238c:	f9 81       	ldd	r31, Y+1	; 0x01
    238e:	cf 57       	subi	r28, 0x7F	; 127
    2390:	d0 40       	sbci	r29, 0x00	; 0
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    239a:	f9 01       	movw	r30, r18
    239c:	84 81       	ldd	r24, Z+4	; 0x04
    239e:	95 81       	ldd	r25, Z+5	; 0x05
    23a0:	a6 81       	ldd	r26, Z+6	; 0x06
    23a2:	b7 81       	ldd	r27, Z+7	; 0x07
    23a4:	c1 58       	subi	r28, 0x81	; 129
    23a6:	df 4f       	sbci	r29, 0xFF	; 255
    23a8:	e8 81       	ld	r30, Y
    23aa:	f9 81       	ldd	r31, Y+1	; 0x01
    23ac:	cf 57       	subi	r28, 0x7F	; 127
    23ae:	d0 40       	sbci	r29, 0x00	; 0
    23b0:	84 83       	std	Z+4, r24	; 0x04
    23b2:	95 83       	std	Z+5, r25	; 0x05
    23b4:	a6 83       	std	Z+6, r26	; 0x06
    23b6:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    23b8:	89 e3       	ldi	r24, 0x39	; 57
    23ba:	92 e0       	ldi	r25, 0x02	; 2
    23bc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(c_wii[0]);
    23c0:	ef 96       	adiw	r28, 0x3f	; 63
    23c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    23c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    23c6:	ef 97       	sbiw	r28, 0x3f	; 63
    23c8:	6d 91       	ld	r22, X+
    23ca:	7d 91       	ld	r23, X+
    23cc:	8d 91       	ld	r24, X+
    23ce:	9c 91       	ld	r25, X
    23d0:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    23d4:	cb 01       	movw	r24, r22
    23d6:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("		y:");
    23da:	84 e3       	ldi	r24, 0x34	; 52
    23dc:	92 e0       	ldi	r25, 0x02	; 2
    23de:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(c_wii[1]);
    23e2:	ef 96       	adiw	r28, 0x3f	; 63
    23e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    23e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    23e8:	ef 97       	sbiw	r28, 0x3f	; 63
    23ea:	64 81       	ldd	r22, Z+4	; 0x04
    23ec:	75 81       	ldd	r23, Z+5	; 0x05
    23ee:	86 81       	ldd	r24, Z+6	; 0x06
    23f0:	97 81       	ldd	r25, Z+7	; 0x07
    23f2:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    23f6:	cb 01       	movw	r24, r22
    23f8:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    23fc:	82 e3       	ldi	r24, 0x32	; 50
    23fe:	92 e0       	ldi	r25, 0x02	; 2
    2400:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    2404:	81 e2       	ldi	r24, 0x21	; 33
    2406:	92 e0       	ldi	r25, 0x02	; 2
    2408:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(dir[0]*1000);
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a e7       	ldi	r20, 0x7A	; 122
    2412:	54 e4       	ldi	r21, 0x44	; 68
    2414:	c1 58       	subi	r28, 0x81	; 129
    2416:	df 4f       	sbci	r29, 0xFF	; 255
    2418:	a8 81       	ld	r26, Y
    241a:	b9 81       	ldd	r27, Y+1	; 0x01
    241c:	cf 57       	subi	r28, 0x7F	; 127
    241e:	d0 40       	sbci	r29, 0x00	; 0
    2420:	6d 91       	ld	r22, X+
    2422:	7d 91       	ld	r23, X+
    2424:	8d 91       	ld	r24, X+
    2426:	9c 91       	ld	r25, X
    2428:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    242c:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    2430:	cb 01       	movw	r24, r22
    2432:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2436:	89 e1       	ldi	r24, 0x19	; 25
    2438:	92 e0       	ldi	r25, 0x02	; 2
    243a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
	m_usb_tx_int(dir[1]*1000);
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a e7       	ldi	r20, 0x7A	; 122
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	c1 58       	subi	r28, 0x81	; 129
    2448:	df 4f       	sbci	r29, 0xFF	; 255
    244a:	e8 81       	ld	r30, Y
    244c:	f9 81       	ldd	r31, Y+1	; 0x01
    244e:	cf 57       	subi	r28, 0x7F	; 127
    2450:	d0 40       	sbci	r29, 0x00	; 0
    2452:	64 81       	ldd	r22, Z+4	; 0x04
    2454:	75 81       	ldd	r23, Z+5	; 0x05
    2456:	86 81       	ldd	r24, Z+6	; 0x06
    2458:	97 81       	ldd	r25, Z+7	; 0x07
    245a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__mulsf3>
    245e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    2462:	cb 01       	movw	r24, r22
    2464:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
	m_usb_tx_string("\n");
    2468:	87 e1       	ldi	r24, 0x17	; 23
    246a:	92 e0       	ldi	r25, 0x02	; 2
    246c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
    2470:	18 c0       	rjmp	.+48     	; 0x24a2 <localization+0xe5e>
    2472:	e7 96       	adiw	r28, 0x37	; 55
    2474:	2e ad       	ldd	r18, Y+62	; 0x3e
    2476:	3f ad       	ldd	r19, Y+63	; 0x3f
    2478:	e7 97       	sbiw	r28, 0x37	; 55
    247a:	2c 5f       	subi	r18, 0xFC	; 252
    247c:	3f 4f       	sbci	r19, 0xFF	; 255
    247e:	e7 96       	adiw	r28, 0x37	; 55
    2480:	3f af       	std	Y+63, r19	; 0x3f
    2482:	2e af       	std	Y+62, r18	; 0x3e
    2484:	e7 97       	sbiw	r28, 0x37	; 55
    2486:	ab 96       	adiw	r28, 0x2b	; 43
    2488:	8e ad       	ldd	r24, Y+62	; 0x3e
    248a:	9f ad       	ldd	r25, Y+63	; 0x3f
    248c:	ab 97       	sbiw	r28, 0x2b	; 43
    248e:	04 96       	adiw	r24, 0x04	; 4
    2490:	ab 96       	adiw	r28, 0x2b	; 43
    2492:	9f af       	std	Y+63, r25	; 0x3f
    2494:	8e af       	std	Y+62, r24	; 0x3e
    2496:	ab 97       	sbiw	r28, 0x2b	; 43
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    2498:	e3 96       	adiw	r28, 0x33	; 51
    249a:	6e ac       	ldd	r6, Y+62	; 0x3e
    249c:	7f ac       	ldd	r7, Y+63	; 0x3f
    249e:	e3 97       	sbiw	r28, 0x33	; 51
    24a0:	77 c9       	rjmp	.-3346   	; 0x1790 <localization+0x14c>
	m_usb_tx_string("Direction vx: 0.");
	m_usb_tx_int(dir[0]*1000);
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}
    24a2:	ca 57       	subi	r28, 0x7A	; 122
    24a4:	df 4f       	sbci	r29, 0xFF	; 255
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	9f 90       	pop	r9
    24c6:	8f 90       	pop	r8
    24c8:	7f 90       	pop	r7
    24ca:	6f 90       	pop	r6
    24cc:	5f 90       	pop	r5
    24ce:	4f 90       	pop	r4
    24d0:	3f 90       	pop	r3
    24d2:	2f 90       	pop	r2
    24d4:	08 95       	ret

000024d6 <__vector_3>:
		m_wait(wait);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){	
    24d6:	1f 92       	push	r1
    24d8:	0f 92       	push	r0
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	0f 92       	push	r0
    24de:	11 24       	eor	r1, r1
    24e0:	2f 93       	push	r18
    24e2:	3f 93       	push	r19
    24e4:	4f 93       	push	r20
    24e6:	5f 93       	push	r21
    24e8:	6f 93       	push	r22
    24ea:	7f 93       	push	r23
    24ec:	8f 93       	push	r24
    24ee:	9f 93       	push	r25
    24f0:	af 93       	push	r26
    24f2:	bf 93       	push	r27
    24f4:	ef 93       	push	r30
    24f6:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    24f8:	6a e0       	ldi	r22, 0x0A	; 10
    24fa:	80 ea       	ldi	r24, 0xA0	; 160
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <m_rf_read>
	switch(buffer[0]){
    2502:	e0 91 a0 01 	lds	r30, 0x01A0
    2506:	8e 2f       	mov	r24, r30
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	fc 01       	movw	r30, r24
    250c:	e0 5a       	subi	r30, 0xA0	; 160
    250e:	f1 09       	sbc	r31, r1
    2510:	e8 30       	cpi	r30, 0x08	; 8
    2512:	f1 05       	cpc	r31, r1
    2514:	08 f0       	brcs	.+2      	; 0x2518 <__vector_3+0x42>
    2516:	07 c1       	rjmp	.+526    	; 0x2726 <__vector_3+0x250>
    2518:	e3 5a       	subi	r30, 0xA3	; 163
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    2520:	80 e8       	ldi	r24, 0x80	; 128
    2522:	92 e0       	ldi	r25, 0x02	; 2
    2524:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
			state = 1;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	90 93 b3 01 	sts	0x01B3, r25
    2530:	80 93 b2 01 	sts	0x01B2, r24
			break;
    2534:	f8 c0       	rjmp	.+496    	; 0x2726 <__vector_3+0x250>
		case 0xA1:
			m_usb_tx_string("Play \n");
    2536:	89 e7       	ldi	r24, 0x79	; 121
    2538:	92 e0       	ldi	r25, 0x02	; 2
    253a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
			if(check(PINC, 7)){
    253e:	37 9b       	sbis	0x06, 7	; 6
    2540:	19 c0       	rjmp	.+50     	; 0x2574 <__vector_3+0x9e>
				goal[0] = GateB;  // left gate
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a8 ec       	ldi	r26, 0xC8	; 200
    2548:	b3 ec       	ldi	r27, 0xC3	; 195
    254a:	80 93 2c 01 	sts	0x012C, r24
    254e:	90 93 2d 01 	sts	0x012D, r25
    2552:	a0 93 2e 01 	sts	0x012E, r26
    2556:	b0 93 2f 01 	sts	0x012F, r27
				desPos[0] = -xline;  // left defense line
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a8 e4       	ldi	r26, 0x48	; 72
    2560:	b3 ec       	ldi	r27, 0xC3	; 195
    2562:	80 93 24 01 	sts	0x0124, r24
    2566:	90 93 25 01 	sts	0x0125, r25
    256a:	a0 93 26 01 	sts	0x0126, r26
    256e:	b0 93 27 01 	sts	0x0127, r27
    2572:	18 c0       	rjmp	.+48     	; 0x25a4 <__vector_3+0xce>
			}
			else{
				goal[0] = GateA;  // right gate
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a8 ec       	ldi	r26, 0xC8	; 200
    257a:	b3 e4       	ldi	r27, 0x43	; 67
    257c:	80 93 2c 01 	sts	0x012C, r24
    2580:	90 93 2d 01 	sts	0x012D, r25
    2584:	a0 93 2e 01 	sts	0x012E, r26
    2588:	b0 93 2f 01 	sts	0x012F, r27
				desPos[0] = xline;	// right defense line
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a8 e4       	ldi	r26, 0x48	; 72
    2592:	b3 e4       	ldi	r27, 0x43	; 67
    2594:	80 93 24 01 	sts	0x0124, r24
    2598:	90 93 25 01 	sts	0x0125, r25
    259c:	a0 93 26 01 	sts	0x0126, r26
    25a0:	b0 93 27 01 	sts	0x0127, r27
			}
			if(check(PINC, 6)){
    25a4:	36 9b       	sbis	0x06, 6	; 6
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <__vector_3+0xd8>
				set(PORTB, 2); // red light
    25a8:	2a 9a       	sbi	0x05, 2	; 5
				clear(PORTB, 3);
    25aa:	2b 98       	cbi	0x05, 3	; 5
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <__vector_3+0xdc>
			}
			else{
				set(PORTB, 3); // blue light
    25ae:	2b 9a       	sbi	0x05, 3	; 5
				clear(PORTB, 2);
    25b0:	2a 98       	cbi	0x05, 2	; 5
			}
			state = 2; 
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	90 93 b3 01 	sts	0x01B3, r25
    25ba:	80 93 b2 01 	sts	0x01B2, r24
			findPuck(state);
    25be:	0e 94 7e 03 	call	0x6fc	; 0x6fc <findPuck>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
    25c2:	2c e8       	ldi	r18, 0x8C	; 140
    25c4:	31 e0       	ldi	r19, 0x01	; 1
    25c6:	44 e9       	ldi	r20, 0x94	; 148
    25c8:	51 e0       	ldi	r21, 0x01	; 1
    25ca:	6c e2       	ldi	r22, 0x2C	; 44
    25cc:	71 e0       	ldi	r23, 0x01	; 1
    25ce:	82 eb       	ldi	r24, 0xB2	; 178
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	0e 94 22 0b 	call	0x1644	; 0x1644 <localization>
			deterState(&state);
    25d6:	82 eb       	ldi	r24, 0xB2	; 178
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	0e 94 3a 06 	call	0xc74	; 0xc74 <deterState>
			break;
    25de:	a3 c0       	rjmp	.+326    	; 0x2726 <__vector_3+0x250>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    25e0:	81 e7       	ldi	r24, 0x71	; 113
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
			scoreR = buffer[1];
    25e8:	e0 ea       	ldi	r30, 0xA0	; 160
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	81 81       	ldd	r24, Z+1	; 0x01
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	90 93 9f 01 	sts	0x019F, r25
    25f4:	80 93 9e 01 	sts	0x019E, r24
			scoreB = buffer[2];
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	90 93 9d 01 	sts	0x019D, r25
    2600:	80 93 9c 01 	sts	0x019C, r24
			OCR1B = 0;
    2604:	10 92 8b 00 	sts	0x008B, r1
    2608:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    260c:	10 92 8d 00 	sts	0x008D, r1
    2610:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    2614:	10 92 b3 01 	sts	0x01B3, r1
    2618:	10 92 b2 01 	sts	0x01B2, r1
			break;
    261c:	84 c0       	rjmp	.+264    	; 0x2726 <__vector_3+0x250>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    261e:	89 e6       	ldi	r24, 0x69	; 105
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
			scoreR = buffer[1];
    2626:	e0 ea       	ldi	r30, 0xA0	; 160
    2628:	f1 e0       	ldi	r31, 0x01	; 1
    262a:	81 81       	ldd	r24, Z+1	; 0x01
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	90 93 9f 01 	sts	0x019F, r25
    2632:	80 93 9e 01 	sts	0x019E, r24
			scoreB = buffer[2];
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	90 93 9d 01 	sts	0x019D, r25
    263e:	80 93 9c 01 	sts	0x019C, r24
			OCR1B = 0;
    2642:	10 92 8b 00 	sts	0x008B, r1
    2646:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    264a:	10 92 8d 00 	sts	0x008D, r1
    264e:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    2652:	10 92 b3 01 	sts	0x01B3, r1
    2656:	10 92 b2 01 	sts	0x01B2, r1
			break;
    265a:	65 c0       	rjmp	.+202    	; 0x2726 <__vector_3+0x250>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    265c:	82 e6       	ldi	r24, 0x62	; 98
    265e:	92 e0       	ldi	r25, 0x02	; 2
    2660:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
			state = 0;
    2664:	10 92 b3 01 	sts	0x01B3, r1
    2668:	10 92 b2 01 	sts	0x01B2, r1
			OCR1B = 0;
    266c:	10 92 8b 00 	sts	0x008B, r1
    2670:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    2674:	10 92 8d 00 	sts	0x008D, r1
    2678:	10 92 8c 00 	sts	0x008C, r1
			break;
    267c:	54 c0       	rjmp	.+168    	; 0x2726 <__vector_3+0x250>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    267e:	88 e5       	ldi	r24, 0x58	; 88
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
			if(check(PINC, 6)){
    2686:	36 9b       	sbis	0x06, 6	; 6
    2688:	19 c0       	rjmp	.+50     	; 0x26bc <__vector_3+0x1e6>
				goal[0] = GateB;  // left gate
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a8 ec       	ldi	r26, 0xC8	; 200
    2690:	b3 ec       	ldi	r27, 0xC3	; 195
    2692:	80 93 2c 01 	sts	0x012C, r24
    2696:	90 93 2d 01 	sts	0x012D, r25
    269a:	a0 93 2e 01 	sts	0x012E, r26
    269e:	b0 93 2f 01 	sts	0x012F, r27
				desPos[0] = -xline;  // left defense line
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a8 e4       	ldi	r26, 0x48	; 72
    26a8:	b3 ec       	ldi	r27, 0xC3	; 195
    26aa:	80 93 24 01 	sts	0x0124, r24
    26ae:	90 93 25 01 	sts	0x0125, r25
    26b2:	a0 93 26 01 	sts	0x0126, r26
    26b6:	b0 93 27 01 	sts	0x0127, r27
    26ba:	18 c0       	rjmp	.+48     	; 0x26ec <__vector_3+0x216>
			}
			else{
				goal[0] = GateA;  // right gate
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a8 ec       	ldi	r26, 0xC8	; 200
    26c2:	b3 e4       	ldi	r27, 0x43	; 67
    26c4:	80 93 2c 01 	sts	0x012C, r24
    26c8:	90 93 2d 01 	sts	0x012D, r25
    26cc:	a0 93 2e 01 	sts	0x012E, r26
    26d0:	b0 93 2f 01 	sts	0x012F, r27
				desPos[0] = xline;	// right defense line
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a8 e4       	ldi	r26, 0x48	; 72
    26da:	b3 e4       	ldi	r27, 0x43	; 67
    26dc:	80 93 24 01 	sts	0x0124, r24
    26e0:	90 93 25 01 	sts	0x0125, r25
    26e4:	a0 93 26 01 	sts	0x0126, r26
    26e8:	b0 93 27 01 	sts	0x0127, r27
			}

			state = 0;
    26ec:	10 92 b3 01 	sts	0x01B3, r1
    26f0:	10 92 b2 01 	sts	0x01B2, r1
			OCR1B = 0;
    26f4:	10 92 8b 00 	sts	0x008B, r1
    26f8:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;			
    26fc:	10 92 8d 00 	sts	0x008D, r1
    2700:	10 92 8c 00 	sts	0x008C, r1
			break;
    2704:	10 c0       	rjmp	.+32     	; 0x2726 <__vector_3+0x250>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    2706:	8d e4       	ldi	r24, 0x4D	; 77
    2708:	92 e0       	ldi	r25, 0x02	; 2
    270a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
			state = 0;
    270e:	10 92 b3 01 	sts	0x01B3, r1
    2712:	10 92 b2 01 	sts	0x01B2, r1
			OCR1B = 0;
    2716:	10 92 8b 00 	sts	0x008B, r1
    271a:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    271e:	10 92 8d 00 	sts	0x008D, r1
    2722:	10 92 8c 00 	sts	0x008C, r1
			break;
			
		default:
			break;
	}
}
    2726:	ff 91       	pop	r31
    2728:	ef 91       	pop	r30
    272a:	bf 91       	pop	r27
    272c:	af 91       	pop	r26
    272e:	9f 91       	pop	r25
    2730:	8f 91       	pop	r24
    2732:	7f 91       	pop	r23
    2734:	6f 91       	pop	r22
    2736:	5f 91       	pop	r21
    2738:	4f 91       	pop	r20
    273a:	3f 91       	pop	r19
    273c:	2f 91       	pop	r18
    273e:	0f 90       	pop	r0
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	0f 90       	pop	r0
    2744:	1f 90       	pop	r1
    2746:	18 95       	reti

00002748 <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    2748:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    274a:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    274c:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    274e:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
    2750:	80 e2       	ldi	r24, 0x20	; 32
    2752:	93 e0       	ldi	r25, 0x03	; 3
    2754:	90 93 89 00 	sts	0x0089, r25
    2758:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    275c:	10 92 8b 00 	sts	0x008B, r1
    2760:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
    2764:	10 92 8d 00 	sts	0x008D, r1
    2768:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    276c:	a1 e8       	ldi	r26, 0x81	; 129
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	8c 91       	ld	r24, X
    2772:	80 61       	ori	r24, 0x10	; 16
    2774:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    2776:	8c 91       	ld	r24, X
    2778:	88 60       	ori	r24, 0x08	; 8
    277a:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    277c:	e0 e8       	ldi	r30, 0x80	; 128
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	82 60       	ori	r24, 0x02	; 2
    2784:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    2786:	80 81       	ld	r24, Z
    2788:	81 60       	ori	r24, 0x01	; 1
    278a:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    278c:	80 81       	ld	r24, Z
    278e:	80 62       	ori	r24, 0x20	; 32
    2790:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    2792:	80 81       	ld	r24, Z
    2794:	8f 7e       	andi	r24, 0xEF	; 239
    2796:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    2798:	80 81       	ld	r24, Z
    279a:	88 60       	ori	r24, 0x08	; 8
    279c:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    279e:	80 81       	ld	r24, Z
    27a0:	8b 7f       	andi	r24, 0xFB	; 251
    27a2:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    27a4:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    27a6:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    27a8:	8c 91       	ld	r24, X
    27aa:	8b 7f       	andi	r24, 0xFB	; 251
    27ac:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    27ae:	8c 91       	ld	r24, X
    27b0:	8d 7f       	andi	r24, 0xFD	; 253
    27b2:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    27b4:	8c 91       	ld	r24, X
    27b6:	81 60       	ori	r24, 0x01	; 1
    27b8:	8c 93       	st	X, r24
    27ba:	08 95       	ret

000027bc <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    27bc:	e1 e6       	ldi	r30, 0x61	; 97
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 e8       	ldi	r24, 0x80	; 128
    27c2:	80 83       	st	Z, r24
    27c4:	10 82       	st	Z, r1
	
	state = 0;
    27c6:	10 92 b3 01 	sts	0x01B3, r1
    27ca:	10 92 b2 01 	sts	0x01B2, r1
	
	m_usb_init();
    27ce:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <m_usb_init>
	
	m_wii_open();
    27d2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <m_wii_open>
	//m_red(ON);
	//while(!m_wii_open());
	//m_red(OFF);
	
	m_red(ON);
    27d6:	6e 9a       	sbi	0x0d, 6	; 13
    27d8:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    27da:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    27de:	4a e0       	ldi	r20, 0x0A	; 10
    27e0:	6d e0       	ldi	r22, 0x0D	; 13
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <m_rf_open>
	m_red(OFF);
    27e8:	6e 9a       	sbi	0x0d, 6	; 13
    27ea:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    27ec:	0e 94 a4 13 	call	0x2748	; 0x2748 <init_timer>
	init_ADC();
    27f0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    27f4:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
    27f6:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
    27f8:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
    27fa:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    27fc:	23 9a       	sbi	0x04, 3	; 4

	if(check(PINC, 7)){
    27fe:	37 9b       	sbis	0x06, 7	; 6
    2800:	19 c0       	rjmp	.+50     	; 0x2834 <main+0x78>
		goal[0] = GateB;  // left gate
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a8 ec       	ldi	r26, 0xC8	; 200
    2808:	b3 ec       	ldi	r27, 0xC3	; 195
    280a:	80 93 2c 01 	sts	0x012C, r24
    280e:	90 93 2d 01 	sts	0x012D, r25
    2812:	a0 93 2e 01 	sts	0x012E, r26
    2816:	b0 93 2f 01 	sts	0x012F, r27
		desPos[0] = xline;  // right defense line
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a8 e4       	ldi	r26, 0x48	; 72
    2820:	b3 e4       	ldi	r27, 0x43	; 67
    2822:	80 93 24 01 	sts	0x0124, r24
    2826:	90 93 25 01 	sts	0x0125, r25
    282a:	a0 93 26 01 	sts	0x0126, r26
    282e:	b0 93 27 01 	sts	0x0127, r27
    2832:	18 c0       	rjmp	.+48     	; 0x2864 <main+0xa8>
	}
	else{
		goal[0] = GateA;  // right gate
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a8 ec       	ldi	r26, 0xC8	; 200
    283a:	b3 e4       	ldi	r27, 0x43	; 67
    283c:	80 93 2c 01 	sts	0x012C, r24
    2840:	90 93 2d 01 	sts	0x012D, r25
    2844:	a0 93 2e 01 	sts	0x012E, r26
    2848:	b0 93 2f 01 	sts	0x012F, r27
		desPos[0] = -xline;	// left defense line
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a8 e4       	ldi	r26, 0x48	; 72
    2852:	b3 ec       	ldi	r27, 0xC3	; 195
    2854:	80 93 24 01 	sts	0x0124, r24
    2858:	90 93 25 01 	sts	0x0125, r25
    285c:	a0 93 26 01 	sts	0x0126, r26
    2860:	b0 93 27 01 	sts	0x0127, r27
	}
	if(check(PINC, 6)){
    2864:	36 9b       	sbis	0x06, 6	; 6
    2866:	10 c0       	rjmp	.+32     	; 0x2888 <main+0xcc>
		set(PORTB, 2); // red light
    2868:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
    286a:	2b 98       	cbi	0x05, 3	; 5
				}
				m_red(TOGGLE);
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    286c:	68 94       	set
    286e:	ff 24       	eor	r15, r15
    2870:	f6 f8       	bld	r15, 6
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
				m_usb_tx_string("\n");
				break;
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    2872:	68 94       	set
    2874:	ee 24       	eor	r14, r14
    2876:	e2 f8       	bld	r14, 2
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
    2878:	0a e8       	ldi	r16, 0x8A	; 138
    287a:	10 e0       	ldi	r17, 0x00	; 0
				OCR1C = 0;
    287c:	cc e8       	ldi	r28, 0x8C	; 140
    287e:	d0 e0       	ldi	r29, 0x00	; 0
				if(check(PINC, 6)){
					toggle(PORTB, 2); // blue Red
					clear(PORTB, 3);
				}
				else{
					toggle(PORTB, 3); // red blue
    2880:	68 94       	set
    2882:	dd 24       	eor	r13, r13
    2884:	d3 f8       	bld	r13, 3
    2886:	03 c0       	rjmp	.+6      	; 0x288e <main+0xd2>
	if(check(PINC, 6)){
		set(PORTB, 2); // red light
		clear(PORTB, 3);
	}
	else{
		set(PORTB, 3); // blue light
    2888:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
    288a:	2a 98       	cbi	0x05, 2	; 5
    288c:	ef cf       	rjmp	.-34     	; 0x286c <main+0xb0>
	}
	while(1)
	{	
		m_usb_tx_string("state: ");
    288e:	81 ec       	ldi	r24, 0xC1	; 193
    2890:	92 e0       	ldi	r25, 0x02	; 2
    2892:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		m_usb_tx_int(state);
    2896:	80 91 b2 01 	lds	r24, 0x01B2
    289a:	90 91 b3 01 	lds	r25, 0x01B3
    289e:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
		m_usb_tx_string("\n");
    28a2:	8f eb       	ldi	r24, 0xBF	; 191
    28a4:	92 e0       	ldi	r25, 0x02	; 2
    28a6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		switch(state){
    28aa:	80 91 b2 01 	lds	r24, 0x01B2
    28ae:	90 91 b3 01 	lds	r25, 0x01B3
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	91 05       	cpc	r25, r1
    28b6:	71 f1       	breq	.+92     	; 0x2914 <main+0x158>
    28b8:	2c f4       	brge	.+10     	; 0x28c4 <main+0x108>
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	61 f0       	breq	.+24     	; 0x28d6 <main+0x11a>
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	81 f0       	breq	.+32     	; 0x28e2 <main+0x126>
    28c2:	d5 c0       	rjmp	.+426    	; 0x2a6e <main+0x2b2>
    28c4:	84 30       	cpi	r24, 0x04	; 4
    28c6:	91 05       	cpc	r25, r1
    28c8:	09 f4       	brne	.+2      	; 0x28cc <main+0x110>
    28ca:	7a c0       	rjmp	.+244    	; 0x29c0 <main+0x204>
    28cc:	f4 f1       	brlt	.+124    	; 0x294a <main+0x18e>
    28ce:	05 97       	sbiw	r24, 0x05	; 5
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <main+0x118>
    28d2:	af c0       	rjmp	.+350    	; 0x2a32 <main+0x276>
    28d4:	cc c0       	rjmp	.+408    	; 0x2a6e <main+0x2b2>
			case 0:
				// stop
				OCR1B = 0;
    28d6:	f8 01       	movw	r30, r16
    28d8:	11 82       	std	Z+1, r1	; 0x01
    28da:	10 82       	st	Z, r1
				OCR1C = 0;
    28dc:	19 82       	std	Y+1, r1	; 0x01
    28de:	18 82       	st	Y, r1
				break;
    28e0:	c6 c0       	rjmp	.+396    	; 0x2a6e <main+0x2b2>
			case 1:		// comm test, flash a LED
				if(check(PINC, 6)){
    28e2:	36 9b       	sbis	0x06, 6	; 6
    28e4:	05 c0       	rjmp	.+10     	; 0x28f0 <main+0x134>
					toggle(PORTB, 2); // blue Red
    28e6:	85 b1       	in	r24, 0x05	; 5
    28e8:	8e 25       	eor	r24, r14
    28ea:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 3);
    28ec:	2b 98       	cbi	0x05, 3	; 5
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <main+0x13c>
				}
				else{
					toggle(PORTB, 3); // red blue
    28f0:	85 b1       	in	r24, 0x05	; 5
    28f2:	8d 25       	eor	r24, r13
    28f4:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 2);
    28f6:	2a 98       	cbi	0x05, 2	; 5
				}
				m_red(TOGGLE);
    28f8:	6e 9a       	sbi	0x0d, 6	; 13
    28fa:	8e b1       	in	r24, 0x0e	; 14
    28fc:	8f 25       	eor	r24, r15
    28fe:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2900:	ff e3       	ldi	r31, 0x3F	; 63
    2902:	2d e0       	ldi	r18, 0x0D	; 13
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	f1 50       	subi	r31, 0x01	; 1
    2908:	20 40       	sbci	r18, 0x00	; 0
    290a:	80 40       	sbci	r24, 0x00	; 0
    290c:	e1 f7       	brne	.-8      	; 0x2906 <main+0x14a>
    290e:	00 c0       	rjmp	.+0      	; 0x2910 <main+0x154>
    2910:	00 00       	nop
    2912:	ad c0       	rjmp	.+346    	; 0x2a6e <main+0x2b2>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    2914:	6e 9a       	sbi	0x0d, 6	; 13
    2916:	8e b1       	in	r24, 0x0e	; 14
    2918:	8f 25       	eor	r24, r15
    291a:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    291c:	6a 9a       	sbi	0x0d, 2	; 13
    291e:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    2920:	80 91 b2 01 	lds	r24, 0x01B2
    2924:	90 91 b3 01 	lds	r25, 0x01B3
    2928:	0e 94 7e 03 	call	0x6fc	; 0x6fc <findPuck>
				deterState(&state);
    292c:	82 eb       	ldi	r24, 0xB2	; 178
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	0e 94 3a 06 	call	0xc74	; 0xc74 <deterState>
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    2934:	2c e8       	ldi	r18, 0x8C	; 140
    2936:	31 e0       	ldi	r19, 0x01	; 1
    2938:	44 e9       	ldi	r20, 0x94	; 148
    293a:	51 e0       	ldi	r21, 0x01	; 1
    293c:	6c e2       	ldi	r22, 0x2C	; 44
    293e:	71 e0       	ldi	r23, 0x01	; 1
    2940:	82 eb       	ldi	r24, 0xB2	; 178
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	0e 94 22 0b 	call	0x1644	; 0x1644 <localization>
				break;
    2948:	92 c0       	rjmp	.+292    	; 0x2a6e <main+0x2b2>
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    294a:	6a 9a       	sbi	0x0d, 2	; 13
    294c:	8e b1       	in	r24, 0x0e	; 14
    294e:	8e 25       	eor	r24, r14
    2950:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    2952:	6e 9a       	sbi	0x0d, 6	; 13
    2954:	76 9a       	sbi	0x0e, 6	; 14
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    2956:	2c e8       	ldi	r18, 0x8C	; 140
    2958:	31 e0       	ldi	r19, 0x01	; 1
    295a:	44 e9       	ldi	r20, 0x94	; 148
    295c:	51 e0       	ldi	r21, 0x01	; 1
    295e:	6c e2       	ldi	r22, 0x2C	; 44
    2960:	71 e0       	ldi	r23, 0x01	; 1
    2962:	82 eb       	ldi	r24, 0xB2	; 178
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	0e 94 22 0b 	call	0x1644	; 0x1644 <localization>
				deterState(&state);
    296a:	82 eb       	ldi	r24, 0xB2	; 178
    296c:	91 e0       	ldi	r25, 0x01	; 1
    296e:	0e 94 3a 06 	call	0xc74	; 0xc74 <deterState>
				m_usb_tx_string("goal = ");
    2972:	87 eb       	ldi	r24, 0xB7	; 183
    2974:	92 e0       	ldi	r25, 0x02	; 2
    2976:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				m_usb_tx_int(goal[0]);
    297a:	0f 2e       	mov	r0, r31
    297c:	fc e2       	ldi	r31, 0x2C	; 44
    297e:	af 2e       	mov	r10, r31
    2980:	f1 e0       	ldi	r31, 0x01	; 1
    2982:	bf 2e       	mov	r11, r31
    2984:	f0 2d       	mov	r31, r0
    2986:	f5 01       	movw	r30, r10
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    2994:	cb 01       	movw	r24, r22
    2996:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
				m_usb_tx_string(", ");
    299a:	84 eb       	ldi	r24, 0xB4	; 180
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				m_usb_tx_int(goal[1]);
    29a2:	f5 01       	movw	r30, r10
    29a4:	64 81       	ldd	r22, Z+4	; 0x04
    29a6:	75 81       	ldd	r23, Z+5	; 0x05
    29a8:	86 81       	ldd	r24, Z+6	; 0x06
    29aa:	97 81       	ldd	r25, Z+7	; 0x07
    29ac:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    29b0:	cb 01       	movw	r24, r22
    29b2:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
				m_usb_tx_string("\n");
    29b6:	82 eb       	ldi	r24, 0xB2	; 178
    29b8:	92 e0       	ldi	r25, 0x02	; 2
    29ba:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				break;
    29be:	57 c0       	rjmp	.+174    	; 0x2a6e <main+0x2b2>
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    29c0:	6a 9a       	sbi	0x0d, 2	; 13
    29c2:	8e b1       	in	r24, 0x0e	; 14
    29c4:	8e 25       	eor	r24, r14
    29c6:	8e b9       	out	0x0e, r24	; 14
				m_red(TOGGLE);
    29c8:	6e 9a       	sbi	0x0d, 6	; 13
    29ca:	8e b1       	in	r24, 0x0e	; 14
    29cc:	8f 25       	eor	r24, r15
    29ce:	8e b9       	out	0x0e, r24	; 14
				localization(&state, &desPos[0], &c_wii[0], &dir[0]);
    29d0:	2c e8       	ldi	r18, 0x8C	; 140
    29d2:	31 e0       	ldi	r19, 0x01	; 1
    29d4:	44 e9       	ldi	r20, 0x94	; 148
    29d6:	51 e0       	ldi	r21, 0x01	; 1
    29d8:	64 e2       	ldi	r22, 0x24	; 36
    29da:	71 e0       	ldi	r23, 0x01	; 1
    29dc:	82 eb       	ldi	r24, 0xB2	; 178
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	0e 94 22 0b 	call	0x1644	; 0x1644 <localization>
				
				m_usb_tx_string("Desire Position = ");
    29e4:	8f e9       	ldi	r24, 0x9F	; 159
    29e6:	92 e0       	ldi	r25, 0x02	; 2
    29e8:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				m_usb_tx_int(desPos[0]);
    29ec:	0f 2e       	mov	r0, r31
    29ee:	f4 e2       	ldi	r31, 0x24	; 36
    29f0:	af 2e       	mov	r10, r31
    29f2:	f1 e0       	ldi	r31, 0x01	; 1
    29f4:	bf 2e       	mov	r11, r31
    29f6:	f0 2d       	mov	r31, r0
    29f8:	f5 01       	movw	r30, r10
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    2a06:	cb 01       	movw	r24, r22
    2a08:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
				m_usb_tx_string(", ");
    2a0c:	8c e9       	ldi	r24, 0x9C	; 156
    2a0e:	92 e0       	ldi	r25, 0x02	; 2
    2a10:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				m_usb_tx_int(desPos[1]);
    2a14:	f5 01       	movw	r30, r10
    2a16:	64 81       	ldd	r22, Z+4	; 0x04
    2a18:	75 81       	ldd	r23, Z+5	; 0x05
    2a1a:	86 81       	ldd	r24, Z+6	; 0x06
    2a1c:	97 81       	ldd	r25, Z+7	; 0x07
    2a1e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    2a22:	cb 01       	movw	r24, r22
    2a24:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
				m_usb_tx_string("\n");
    2a28:	8a e9       	ldi	r24, 0x9A	; 154
    2a2a:	92 e0       	ldi	r25, 0x02	; 2
    2a2c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
				break;
    2a30:	1e c0       	rjmp	.+60     	; 0x2a6e <main+0x2b2>
			case 5:		// defense mode
				m_red(TOGGLE);
    2a32:	6e 9a       	sbi	0x0d, 6	; 13
    2a34:	8e b1       	in	r24, 0x0e	; 14
    2a36:	8f 25       	eor	r24, r15
    2a38:	8e b9       	out	0x0e, r24	; 14
				m_green(TOGGLE);
    2a3a:	6a 9a       	sbi	0x0d, 2	; 13
    2a3c:	8e b1       	in	r24, 0x0e	; 14
    2a3e:	8e 25       	eor	r24, r14
    2a40:	8e b9       	out	0x0e, r24	; 14
				findPuck(state);
    2a42:	80 91 b2 01 	lds	r24, 0x01B2
    2a46:	90 91 b3 01 	lds	r25, 0x01B3
    2a4a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <findPuck>
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    2a4e:	2c e8       	ldi	r18, 0x8C	; 140
    2a50:	31 e0       	ldi	r19, 0x01	; 1
    2a52:	44 e9       	ldi	r20, 0x94	; 148
    2a54:	51 e0       	ldi	r21, 0x01	; 1
    2a56:	6c e2       	ldi	r22, 0x2C	; 44
    2a58:	71 e0       	ldi	r23, 0x01	; 1
    2a5a:	82 eb       	ldi	r24, 0xB2	; 178
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	0e 94 22 0b 	call	0x1644	; 0x1644 <localization>
				ifGotoPuck(&state, &dir[0]);
    2a62:	6c e8       	ldi	r22, 0x8C	; 140
    2a64:	71 e0       	ldi	r23, 0x01	; 1
    2a66:	82 eb       	ldi	r24, 0xB2	; 178
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <ifGotoPuck>
				break;
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    2a6e:	81 e9       	ldi	r24, 0x91	; 145
    2a70:	92 e0       	ldi	r25, 0x02	; 2
    2a72:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		m_usb_tx_int(OCR1B);
    2a76:	f8 01       	movw	r30, r16
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
		m_usb_tx_string(", ");
    2a80:	8e e8       	ldi	r24, 0x8E	; 142
    2a82:	92 e0       	ldi	r25, 0x02	; 2
    2a84:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
		m_usb_tx_int(OCR1C);
    2a88:	88 81       	ld	r24, Y
    2a8a:	99 81       	ldd	r25, Y+1	; 0x01
    2a8c:	0e 94 6f 18 	call	0x30de	; 0x30de <m_usb_tx_int>
		m_usb_tx_string("\n");
    2a90:	8c e8       	ldi	r24, 0x8C	; 140
    2a92:	92 e0       	ldi	r25, 0x02	; 2
    2a94:	0e 94 53 18 	call	0x30a6	; 0x30a6 <print_P>
    2a98:	85 ea       	ldi	r24, 0xA5	; 165
    2a9a:	9e e0       	ldi	r25, 0x0E	; 14
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <main+0x2e0>
    2aa0:	00 c0       	rjmp	.+0      	; 0x2aa2 <main+0x2e6>
    2aa2:	00 00       	nop
    2aa4:	f4 ce       	rjmp	.-536    	; 0x288e <main+0xd2>

00002aa6 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2aa6:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2aa8:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2aaa:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2aac:	8c e0       	ldi	r24, 0x0C	; 12
    2aae:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2ab2:	e9 e6       	ldi	r30, 0x69	; 105
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	80 62       	ori	r24, 0x20	; 32
    2aba:	80 83       	st	Z, r24
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 7e       	andi	r24, 0xEF	; 239
    2ac0:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2ac2:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2ac4:	78 94       	sei
    2ac6:	08 95       	ret

00002ac8 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	18 2f       	mov	r17, r24
    2ad0:	d6 2f       	mov	r29, r22
    2ad2:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2ad4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2ad8:	94 ea       	ldi	r25, 0xA4	; 164
    2ada:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2ade:	ec eb       	ldi	r30, 0xBC	; 188
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	90 81       	ld	r25, Z
    2ae4:	99 23       	and	r25, r25
    2ae6:	ec f7       	brge	.-6      	; 0x2ae2 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2ae8:	90 e5       	ldi	r25, 0x50	; 80
    2aea:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2aee:	94 e8       	ldi	r25, 0x84	; 132
    2af0:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2af4:	ec eb       	ldi	r30, 0xBC	; 188
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	90 81       	ld	r25, Z
    2afa:	99 23       	and	r25, r25
    2afc:	ec f7       	brge	.-6      	; 0x2af8 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2afe:	90 91 b9 00 	lds	r25, 0x00B9
    2b02:	98 7f       	andi	r25, 0xF8	; 248
    2b04:	90 32       	cpi	r25, 0x20	; 32
    2b06:	29 f4       	brne	.+10     	; 0x2b12 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2b08:	84 e9       	ldi	r24, 0x94	; 148
    2b0a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	2d c0       	rjmp	.+90     	; 0x2b6c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b18:	84 e8       	ldi	r24, 0x84	; 132
    2b1a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b1e:	ec eb       	ldi	r30, 0xBC	; 188
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	90 81       	ld	r25, Z
    2b24:	99 23       	and	r25, r25
    2b26:	ec f7       	brge	.-6      	; 0x2b22 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2b28:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b2c:	84 e8       	ldi	r24, 0x84	; 132
    2b2e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b32:	ec eb       	ldi	r30, 0xBC	; 188
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	88 23       	and	r24, r24
    2b3a:	ec f7       	brge	.-6      	; 0x2b36 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2b3c:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b40:	84 e8       	ldi	r24, 0x84	; 132
    2b42:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b46:	ec eb       	ldi	r30, 0xBC	; 188
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	88 23       	and	r24, r24
    2b4e:	ec f7       	brge	.-6      	; 0x2b4a <m_rf_open+0x82>
	
	TWDR = packet_length;
    2b50:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b54:	84 e8       	ldi	r24, 0x84	; 132
    2b56:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b5a:	ec eb       	ldi	r30, 0xBC	; 188
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	88 23       	and	r24, r24
    2b62:	ec f7       	brge	.-6      	; 0x2b5e <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2b64:	84 e9       	ldi	r24, 0x94	; 148
    2b66:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
}
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	08 95       	ret

00002b74 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2b7a:	84 ea       	ldi	r24, 0xA4	; 164
    2b7c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b80:	ec eb       	ldi	r30, 0xBC	; 188
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	90 81       	ld	r25, Z
    2b86:	99 23       	and	r25, r25
    2b88:	ec f7       	brge	.-6      	; 0x2b84 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2b8a:	81 e5       	ldi	r24, 0x51	; 81
    2b8c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b90:	84 e8       	ldi	r24, 0x84	; 132
    2b92:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2b96:	ec eb       	ldi	r30, 0xBC	; 188
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	90 81       	ld	r25, Z
    2b9c:	99 23       	and	r25, r25
    2b9e:	ec f7       	brge	.-6      	; 0x2b9a <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2ba0:	80 91 b9 00 	lds	r24, 0x00B9
    2ba4:	88 7f       	andi	r24, 0xF8	; 248
    2ba6:	88 34       	cpi	r24, 0x48	; 72
    2ba8:	29 f4       	brne	.+10     	; 0x2bb4 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2baa:	84 e9       	ldi	r24, 0x94	; 148
    2bac:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	41 c0       	rjmp	.+130    	; 0x2c36 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2bb4:	84 ec       	ldi	r24, 0xC4	; 196
    2bb6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2bba:	ec eb       	ldi	r30, 0xBC	; 188
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	90 81       	ld	r25, Z
    2bc0:	99 23       	and	r25, r25
    2bc2:	ec f7       	brge	.-6      	; 0x2bbe <m_rf_read+0x4a>
	bytes = TWDR;
    2bc4:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    2bc8:	46 13       	cpse	r20, r22
    2bca:	09 c0       	rjmp	.+18     	; 0x2bde <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2bcc:	84 2f       	mov	r24, r20
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	18 16       	cp	r1, r24
    2bd4:	19 06       	cpc	r1, r25
    2bd6:	44 f0       	brlt	.+16     	; 0x2be8 <m_rf_read+0x74>
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	1a c0       	rjmp	.+52     	; 0x2c12 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2bde:	84 e9       	ldi	r24, 0x94	; 148
    2be0:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	27 c0       	rjmp	.+78     	; 0x2c36 <m_rf_read+0xc2>
    2be8:	d9 01       	movw	r26, r18
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	41 50       	subi	r20, 0x01	; 1
    2bee:	51 09       	sbc	r21, r1
    2bf0:	b9 01       	movw	r22, r18
    2bf2:	64 0f       	add	r22, r20
    2bf4:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2bf6:	ec eb       	ldi	r30, 0xBC	; 188
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2bfc:	cb eb       	ldi	r28, 0xBB	; 187
    2bfe:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2c00:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2c02:	90 81       	ld	r25, Z
    2c04:	99 23       	and	r25, r25
    2c06:	ec f7       	brge	.-6      	; 0x2c02 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    2c08:	98 81       	ld	r25, Y
    2c0a:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2c0c:	a6 17       	cp	r26, r22
    2c0e:	b7 07       	cpc	r27, r23
    2c10:	b9 f7       	brne	.-18     	; 0x2c00 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2c12:	84 e8       	ldi	r24, 0x84	; 132
    2c14:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2c18:	ec eb       	ldi	r30, 0xBC	; 188
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	90 81       	ld	r25, Z
    2c1e:	99 23       	and	r25, r25
    2c20:	ec f7       	brge	.-6      	; 0x2c1c <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    2c22:	80 91 bb 00 	lds	r24, 0x00BB
    2c26:	f9 01       	movw	r30, r18
    2c28:	e4 0f       	add	r30, r20
    2c2a:	f5 1f       	adc	r31, r21
    2c2c:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2c2e:	84 e9       	ldi	r24, 0x94	; 148
    2c30:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
}
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	08 95       	ret

00002c3c <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    2c42:	80 ea       	ldi	r24, 0xA0	; 160
    2c44:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2c48:	82 e1       	ldi	r24, 0x12	; 18
    2c4a:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2c4c:	09 b4       	in	r0, 0x29	; 41
    2c4e:	00 fe       	sbrs	r0, 0
    2c50:	fd cf       	rjmp	.-6      	; 0x2c4c <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    2c52:	80 e9       	ldi	r24, 0x90	; 144
    2c54:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2c58:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2c5c:	10 92 ad 01 	sts	0x01AD, r1
	cdc_line_rtsdtr = 0;
    2c60:	10 92 aa 01 	sts	0x01AA, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    2c64:	8c e0       	ldi	r24, 0x0C	; 12
    2c66:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2c6a:	78 94       	sei
    2c6c:	08 95       	ret

00002c6e <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2c72:	90 91 ad 01 	lds	r25, 0x01AD
    2c76:	99 23       	and	r25, r25
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <m_usb_tx_char+0xe>
    2c7a:	4c c0       	rjmp	.+152    	; 0x2d14 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2c7c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2c7e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2c80:	24 e0       	ldi	r18, 0x04	; 4
    2c82:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2c86:	20 91 ab 01 	lds	r18, 0x01AB
    2c8a:	22 23       	and	r18, r18
    2c8c:	49 f0       	breq	.+18     	; 0x2ca0 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    2c8e:	20 91 e8 00 	lds	r18, 0x00E8
    2c92:	25 fd       	sbrc	r18, 5
    2c94:	03 c0       	rjmp	.+6      	; 0x2c9c <m_usb_tx_char+0x2e>
			SREG = intr_state;
    2c96:	9f bf       	out	0x3f, r25	; 63
			return -1;
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	41 c0       	rjmp	.+130    	; 0x2d1e <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    2c9c:	10 92 ab 01 	sts	0x01AB, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2ca0:	30 91 e4 00 	lds	r19, 0x00E4
    2ca4:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2ca6:	20 91 e8 00 	lds	r18, 0x00E8
    2caa:	25 fd       	sbrc	r18, 5
    2cac:	24 c0       	rjmp	.+72     	; 0x2cf6 <m_usb_tx_char+0x88>
		SREG = intr_state;
    2cae:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2cb0:	90 91 e4 00 	lds	r25, 0x00E4
    2cb4:	93 17       	cp	r25, r19
    2cb6:	81 f0       	breq	.+32     	; 0x2cd8 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2cb8:	90 91 ad 01 	lds	r25, 0x01AD
    2cbc:	99 23       	and	r25, r25
    2cbe:	61 f1       	breq	.+88     	; 0x2d18 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    2cc0:	a9 ee       	ldi	r26, 0xE9	; 233
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2cc6:	e8 ee       	ldi	r30, 0xE8	; 232
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2cca:	c4 ee       	ldi	r28, 0xE4	; 228
    2ccc:	d0 e0       	ldi	r29, 0x00	; 0
    2cce:	0d c0       	rjmp	.+26     	; 0x2cea <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2cd0:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2cd2:	98 81       	ld	r25, Y
    2cd4:	93 13       	cpse	r25, r19
    2cd6:	05 c0       	rjmp	.+10     	; 0x2ce2 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	80 93 ab 01 	sts	0x01AB, r24
			return -1;
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	1e c0       	rjmp	.+60     	; 0x2d1e <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2ce2:	90 91 ad 01 	lds	r25, 0x01AD
    2ce6:	99 23       	and	r25, r25
    2ce8:	c9 f0       	breq	.+50     	; 0x2d1c <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    2cea:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2cec:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2cee:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2cf0:	20 81       	ld	r18, Z
    2cf2:	25 ff       	sbrs	r18, 5
    2cf4:	ed cf       	rjmp	.-38     	; 0x2cd0 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2cf6:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2cfa:	80 91 e8 00 	lds	r24, 0x00E8
    2cfe:	85 fd       	sbrc	r24, 5
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <m_usb_tx_char+0x9a>
    2d02:	8a e3       	ldi	r24, 0x3A	; 58
    2d04:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2d08:	85 e0       	ldi	r24, 0x05	; 5
    2d0a:	80 93 ac 01 	sts	0x01AC, r24
	SREG = intr_state;
    2d0e:	9f bf       	out	0x3f, r25	; 63
	return 0;
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	05 c0       	rjmp	.+10     	; 0x2d1e <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2d14:	8f ef       	ldi	r24, 0xFF	; 255
    2d16:	03 c0       	rjmp	.+6      	; 0x2d1e <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2d18:	8f ef       	ldi	r24, 0xFF	; 255
    2d1a:	01 c0       	rjmp	.+2      	; 0x2d1e <m_usb_tx_char+0xb0>
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	08 95       	ret

00002d24 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2d24:	1f 92       	push	r1
    2d26:	0f 92       	push	r0
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	0f 92       	push	r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	8f 93       	push	r24
    2d30:	9f 93       	push	r25
    2d32:	ef 93       	push	r30
    2d34:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2d36:	e1 ee       	ldi	r30, 0xE1	; 225
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
        UDINT = 0;
    2d3c:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2d3e:	83 ff       	sbrs	r24, 3
    2d40:	11 c0       	rjmp	.+34     	; 0x2d64 <__vector_10+0x40>
		UENUM = 0;
    2d42:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2d4c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2d50:	92 e1       	ldi	r25, 0x12	; 18
    2d52:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2d56:	98 e0       	ldi	r25, 0x08	; 8
    2d58:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2d5c:	10 92 ad 01 	sts	0x01AD, r1
		cdc_line_rtsdtr = 0;
    2d60:	10 92 aa 01 	sts	0x01AA, r1
        }
	if (intbits & (1<<SOFI)) {
    2d64:	82 ff       	sbrs	r24, 2
    2d66:	13 c0       	rjmp	.+38     	; 0x2d8e <__vector_10+0x6a>
		if (usb_configuration) {
    2d68:	80 91 ad 01 	lds	r24, 0x01AD
    2d6c:	88 23       	and	r24, r24
    2d6e:	79 f0       	breq	.+30     	; 0x2d8e <__vector_10+0x6a>
			t = transmit_flush_timer;
    2d70:	80 91 ac 01 	lds	r24, 0x01AC
			if (t) {
    2d74:	88 23       	and	r24, r24
    2d76:	59 f0       	breq	.+22     	; 0x2d8e <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2d78:	81 50       	subi	r24, 0x01	; 1
    2d7a:	80 93 ac 01 	sts	0x01AC, r24
				if (!t) {
    2d7e:	81 11       	cpse	r24, r1
    2d80:	06 c0       	rjmp	.+12     	; 0x2d8e <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2d82:	84 e0       	ldi	r24, 0x04	; 4
    2d84:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2d88:	8a e3       	ldi	r24, 0x3A	; 58
    2d8a:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2d8e:	ff 91       	pop	r31
    2d90:	ef 91       	pop	r30
    2d92:	9f 91       	pop	r25
    2d94:	8f 91       	pop	r24
    2d96:	0f 90       	pop	r0
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	0f 90       	pop	r0
    2d9c:	1f 90       	pop	r1
    2d9e:	18 95       	reti

00002da0 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2da0:	1f 92       	push	r1
    2da2:	0f 92       	push	r0
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	0f 92       	push	r0
    2da8:	11 24       	eor	r1, r1
    2daa:	0f 93       	push	r16
    2dac:	1f 93       	push	r17
    2dae:	2f 93       	push	r18
    2db0:	3f 93       	push	r19
    2db2:	4f 93       	push	r20
    2db4:	5f 93       	push	r21
    2db6:	6f 93       	push	r22
    2db8:	7f 93       	push	r23
    2dba:	8f 93       	push	r24
    2dbc:	9f 93       	push	r25
    2dbe:	af 93       	push	r26
    2dc0:	bf 93       	push	r27
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	ef 93       	push	r30
    2dc8:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2dca:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2dce:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2dd2:	83 ff       	sbrs	r24, 3
    2dd4:	4c c1       	rjmp	.+664    	; 0x306e <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    2dd6:	e1 ef       	ldi	r30, 0xF1	; 241
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    2ddc:	80 81       	ld	r24, Z
                wValue = UEDATX;
    2dde:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2de0:	90 81       	ld	r25, Z
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    2de6:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    2de8:	90 81       	ld	r25, Z
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	59 2b       	or	r21, r25
                wLength = UEDATX;
    2dee:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    2df0:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2df2:	92 ef       	ldi	r25, 0xF2	; 242
    2df4:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    2df8:	86 30       	cpi	r24, 0x06	; 6
    2dfa:	09 f0       	breq	.+2      	; 0x2dfe <__vector_11+0x5e>
    2dfc:	58 c0       	rjmp	.+176    	; 0x2eae <__vector_11+0x10e>
    2dfe:	04 c0       	rjmp	.+8      	; 0x2e08 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2e00:	81 e2       	ldi	r24, 0x21	; 33
    2e02:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2e06:	3a c1       	rjmp	.+628    	; 0x307c <__vector_11+0x2dc>
    2e08:	66 e0       	ldi	r22, 0x06	; 6
    2e0a:	89 ec       	ldi	r24, 0xC9	; 201
    2e0c:	92 e0       	ldi	r25, 0x02	; 2
				}
				desc_val = pgm_read_word(list);
    2e0e:	fc 01       	movw	r30, r24
    2e10:	a5 91       	lpm	r26, Z+
    2e12:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    2e14:	2a 17       	cp	r18, r26
    2e16:	3b 07       	cpc	r19, r27
    2e18:	11 f0       	breq	.+4      	; 0x2e1e <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    2e1a:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2e1c:	23 c0       	rjmp	.+70     	; 0x2e64 <__vector_11+0xc4>
				}
				list += 2;
    2e1e:	fc 01       	movw	r30, r24
    2e20:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2e22:	a5 91       	lpm	r26, Z+
    2e24:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    2e26:	4a 17       	cp	r20, r26
    2e28:	5b 07       	cpc	r21, r27
    2e2a:	11 f0       	breq	.+4      	; 0x2e30 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    2e2c:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2e2e:	1a c0       	rjmp	.+52     	; 0x2e64 <__vector_11+0xc4>
				}
				list += 2;
    2e30:	fc 01       	movw	r30, r24
    2e32:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2e34:	45 91       	lpm	r20, Z+
    2e36:	54 91       	lpm	r21, Z
				list += 2;
    2e38:	fc 01       	movw	r30, r24
    2e3a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2e3c:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2e3e:	87 2f       	mov	r24, r23
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2e44:	8f 3f       	cpi	r24, 0xFF	; 255
    2e46:	91 05       	cpc	r25, r1
    2e48:	19 f0       	breq	.+6      	; 0x2e50 <__vector_11+0xb0>
    2e4a:	10 f0       	brcs	.+4      	; 0x2e50 <__vector_11+0xb0>
    2e4c:	8f ef       	ldi	r24, 0xFF	; 255
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	82 17       	cp	r24, r18
    2e52:	08 f4       	brcc	.+2      	; 0x2e56 <__vector_11+0xb6>
    2e54:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2e56:	a8 ee       	ldi	r26, 0xE8	; 232
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2e5a:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2e5c:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2e5e:	c1 ef       	ldi	r28, 0xF1	; 241
    2e60:	d0 e0       	ldi	r29, 0x00	; 0
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <__vector_11+0xca>
    2e64:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2e66:	99 f6       	brne	.-90     	; 0x2e0e <__vector_11+0x6e>
    2e68:	cb cf       	rjmp	.-106    	; 0x2e00 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2e6a:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2e6c:	98 2f       	mov	r25, r24
    2e6e:	95 70       	andi	r25, 0x05	; 5
    2e70:	e1 f3       	breq	.-8      	; 0x2e6a <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    2e72:	82 fd       	sbrc	r24, 2
    2e74:	03 c1       	rjmp	.+518    	; 0x307c <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2e76:	32 2f       	mov	r19, r18
    2e78:	21 31       	cpi	r18, 0x11	; 17
    2e7a:	08 f0       	brcs	.+2      	; 0x2e7e <__vector_11+0xde>
    2e7c:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    2e7e:	33 23       	and	r19, r19
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <__vector_11+0xe4>
    2e82:	f9 c0       	rjmp	.+498    	; 0x3076 <__vector_11+0x2d6>
    2e84:	fa 01       	movw	r30, r20
    2e86:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    2e88:	94 91       	lpm	r25, Z
    2e8a:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2e8c:	81 50       	subi	r24, 0x01	; 1
    2e8e:	31 96       	adiw	r30, 0x01	; 1
    2e90:	81 11       	cpse	r24, r1
    2e92:	fa cf       	rjmp	.-12     	; 0x2e88 <__vector_11+0xe8>
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	83 0f       	add	r24, r19
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	48 0f       	add	r20, r24
    2e9e:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2ea0:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2ea2:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2ea4:	21 11       	cpse	r18, r1
    2ea6:	e1 cf       	rjmp	.-62     	; 0x2e6a <__vector_11+0xca>
    2ea8:	30 31       	cpi	r19, 0x10	; 16
    2eaa:	f9 f2       	breq	.-66     	; 0x2e6a <__vector_11+0xca>
    2eac:	e7 c0       	rjmp	.+462    	; 0x307c <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2eae:	85 30       	cpi	r24, 0x05	; 5
    2eb0:	61 f4       	brne	.+24     	; 0x2eca <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2eb2:	8e ef       	ldi	r24, 0xFE	; 254
    2eb4:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2eb8:	e8 ee       	ldi	r30, 0xE8	; 232
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	80 ff       	sbrs	r24, 0
    2ec0:	fd cf       	rjmp	.-6      	; 0x2ebc <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2ec2:	20 68       	ori	r18, 0x80	; 128
    2ec4:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2ec8:	d9 c0       	rjmp	.+434    	; 0x307c <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2eca:	89 30       	cpi	r24, 0x09	; 9
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <__vector_11+0x130>
    2ece:	35 c0       	rjmp	.+106    	; 0x2f3a <__vector_11+0x19a>
    2ed0:	61 11       	cpse	r22, r1
    2ed2:	cd c0       	rjmp	.+410    	; 0x306e <__vector_11+0x2ce>
			usb_configuration = wValue;
    2ed4:	20 93 ad 01 	sts	0x01AD, r18
			cdc_line_rtsdtr = 0;
    2ed8:	10 92 aa 01 	sts	0x01AA, r1
			transmit_flush_timer = 0;
    2edc:	10 92 ac 01 	sts	0x01AC, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2ee0:	8e ef       	ldi	r24, 0xFE	; 254
    2ee2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2ee8:	22 e7       	ldi	r18, 0x72	; 114
    2eea:	33 e0       	ldi	r19, 0x03	; 3
			for (i=1; i<5; i++) {
				UENUM = i;
    2eec:	c9 ee       	ldi	r28, 0xE9	; 233
    2eee:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2ef0:	ab ee       	ldi	r26, 0xEB	; 235
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2ef4:	0c ee       	ldi	r16, 0xEC	; 236
    2ef6:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2ef8:	6d ee       	ldi	r22, 0xED	; 237
    2efa:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2efc:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    2efe:	a9 01       	movw	r20, r18
    2f00:	4f 5f       	subi	r20, 0xFF	; 255
    2f02:	5f 4f       	sbci	r21, 0xFF	; 255
    2f04:	f9 01       	movw	r30, r18
    2f06:	94 91       	lpm	r25, Z
				UECONX = en;
    2f08:	9c 93       	st	X, r25
				if (en) {
    2f0a:	99 23       	and	r25, r25
    2f0c:	61 f0       	breq	.+24     	; 0x2f26 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    2f0e:	fa 01       	movw	r30, r20
    2f10:	44 91       	lpm	r20, Z
    2f12:	f8 01       	movw	r30, r16
    2f14:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    2f16:	f9 01       	movw	r30, r18
    2f18:	32 96       	adiw	r30, 0x02	; 2
    2f1a:	94 91       	lpm	r25, Z
    2f1c:	2d 5f       	subi	r18, 0xFD	; 253
    2f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f20:	fb 01       	movw	r30, r22
    2f22:	90 83       	st	Z, r25
    2f24:	01 c0       	rjmp	.+2      	; 0x2f28 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2f26:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2f28:	8f 5f       	subi	r24, 0xFF	; 255
    2f2a:	85 30       	cpi	r24, 0x05	; 5
    2f2c:	39 f7       	brne	.-50     	; 0x2efc <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2f2e:	ea ee       	ldi	r30, 0xEA	; 234
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	8e e1       	ldi	r24, 0x1E	; 30
    2f34:	80 83       	st	Z, r24
        		UERST = 0;
    2f36:	10 82       	st	Z, r1
			return;
    2f38:	a1 c0       	rjmp	.+322    	; 0x307c <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2f3a:	88 30       	cpi	r24, 0x08	; 8
    2f3c:	81 f4       	brne	.+32     	; 0x2f5e <__vector_11+0x1be>
    2f3e:	60 38       	cpi	r22, 0x80	; 128
    2f40:	09 f0       	breq	.+2      	; 0x2f44 <__vector_11+0x1a4>
    2f42:	95 c0       	rjmp	.+298    	; 0x306e <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2f44:	e8 ee       	ldi	r30, 0xE8	; 232
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	80 ff       	sbrs	r24, 0
    2f4c:	fd cf       	rjmp	.-6      	; 0x2f48 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2f4e:	80 91 ad 01 	lds	r24, 0x01AD
    2f52:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f56:	8e ef       	ldi	r24, 0xFE	; 254
    2f58:	80 93 e8 00 	sts	0x00E8, r24
    2f5c:	8f c0       	rjmp	.+286    	; 0x307c <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2f5e:	81 32       	cpi	r24, 0x21	; 33
    2f60:	b9 f4       	brne	.+46     	; 0x2f90 <__vector_11+0x1f0>
    2f62:	61 3a       	cpi	r22, 0xA1	; 161
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <__vector_11+0x1c8>
    2f66:	83 c0       	rjmp	.+262    	; 0x306e <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2f68:	e8 ee       	ldi	r30, 0xE8	; 232
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	80 ff       	sbrs	r24, 0
    2f70:	fd cf       	rjmp	.-6      	; 0x2f6c <__vector_11+0x1cc>
    2f72:	e4 e3       	ldi	r30, 0x34	; 52
    2f74:	f1 e0       	ldi	r31, 0x01	; 1
    2f76:	2b e3       	ldi	r18, 0x3B	; 59
    2f78:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2f7a:	a1 ef       	ldi	r26, 0xF1	; 241
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	81 91       	ld	r24, Z+
    2f80:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2f82:	e2 17       	cp	r30, r18
    2f84:	f3 07       	cpc	r31, r19
    2f86:	d9 f7       	brne	.-10     	; 0x2f7e <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f88:	8e ef       	ldi	r24, 0xFE	; 254
    2f8a:	80 93 e8 00 	sts	0x00E8, r24
    2f8e:	76 c0       	rjmp	.+236    	; 0x307c <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2f90:	80 32       	cpi	r24, 0x20	; 32
    2f92:	d1 f4       	brne	.+52     	; 0x2fc8 <__vector_11+0x228>
    2f94:	61 32       	cpi	r22, 0x21	; 33
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <__vector_11+0x1fa>
    2f98:	6a c0       	rjmp	.+212    	; 0x306e <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2f9a:	e8 ee       	ldi	r30, 0xE8	; 232
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	82 ff       	sbrs	r24, 2
    2fa2:	fd cf       	rjmp	.-6      	; 0x2f9e <__vector_11+0x1fe>
    2fa4:	e4 e3       	ldi	r30, 0x34	; 52
    2fa6:	f1 e0       	ldi	r31, 0x01	; 1
    2fa8:	2b e3       	ldi	r18, 0x3B	; 59
    2faa:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2fac:	a1 ef       	ldi	r26, 0xF1	; 241
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	8c 91       	ld	r24, X
    2fb2:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2fb4:	e2 17       	cp	r30, r18
    2fb6:	f3 07       	cpc	r31, r19
    2fb8:	d9 f7       	brne	.-10     	; 0x2fb0 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2fba:	e8 ee       	ldi	r30, 0xE8	; 232
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	8b ef       	ldi	r24, 0xFB	; 251
    2fc0:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2fc2:	8e ef       	ldi	r24, 0xFE	; 254
    2fc4:	80 83       	st	Z, r24
    2fc6:	5a c0       	rjmp	.+180    	; 0x307c <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2fc8:	82 32       	cpi	r24, 0x22	; 34
    2fca:	71 f4       	brne	.+28     	; 0x2fe8 <__vector_11+0x248>
    2fcc:	61 32       	cpi	r22, 0x21	; 33
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <__vector_11+0x232>
    2fd0:	4e c0       	rjmp	.+156    	; 0x306e <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    2fd2:	20 93 aa 01 	sts	0x01AA, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2fd6:	e8 ee       	ldi	r30, 0xE8	; 232
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	80 ff       	sbrs	r24, 0
    2fde:	fd cf       	rjmp	.-6      	; 0x2fda <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2fe0:	8e ef       	ldi	r24, 0xFE	; 254
    2fe2:	80 93 e8 00 	sts	0x00E8, r24
    2fe6:	4a c0       	rjmp	.+148    	; 0x307c <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2fe8:	81 11       	cpse	r24, r1
    2fea:	1a c0       	rjmp	.+52     	; 0x3020 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2fec:	e8 ee       	ldi	r30, 0xE8	; 232
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	80 ff       	sbrs	r24, 0
    2ff4:	fd cf       	rjmp	.-6      	; 0x2ff0 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2ff6:	62 38       	cpi	r22, 0x82	; 130
    2ff8:	51 f4       	brne	.+20     	; 0x300e <__vector_11+0x26e>
				UENUM = wIndex;
    2ffa:	e9 ee       	ldi	r30, 0xE9	; 233
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    3000:	80 91 eb 00 	lds	r24, 0x00EB
    3004:	85 fb       	bst	r24, 5
    3006:	88 27       	eor	r24, r24
    3008:	80 f9       	bld	r24, 0
				UENUM = 0;
    300a:	10 82       	st	Z, r1
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    300e:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    3010:	e1 ef       	ldi	r30, 0xF1	; 241
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 83       	st	Z, r24
			UEDATX = 0;
    3016:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3018:	8e ef       	ldi	r24, 0xFE	; 254
    301a:	80 93 e8 00 	sts	0x00E8, r24
    301e:	2e c0       	rjmp	.+92     	; 0x307c <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    3020:	98 2f       	mov	r25, r24
    3022:	9d 7f       	andi	r25, 0xFD	; 253
    3024:	91 30       	cpi	r25, 0x01	; 1
    3026:	19 f5       	brne	.+70     	; 0x306e <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    3028:	62 30       	cpi	r22, 0x02	; 2
    302a:	09 f5       	brne	.+66     	; 0x306e <__vector_11+0x2ce>
    302c:	23 2b       	or	r18, r19
    302e:	f9 f4       	brne	.+62     	; 0x306e <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    3030:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    3032:	9f ef       	ldi	r25, 0xFF	; 255
    3034:	94 0f       	add	r25, r20
    3036:	94 30       	cpi	r25, 0x04	; 4
    3038:	d0 f4       	brcc	.+52     	; 0x306e <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    303a:	9e ef       	ldi	r25, 0xFE	; 254
    303c:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    3040:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    3044:	83 30       	cpi	r24, 0x03	; 3
    3046:	21 f4       	brne	.+8      	; 0x3050 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    3048:	81 e2       	ldi	r24, 0x21	; 33
    304a:	80 93 eb 00 	sts	0x00EB, r24
    304e:	16 c0       	rjmp	.+44     	; 0x307c <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    3050:	89 e1       	ldi	r24, 0x19	; 25
    3052:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <__vector_11+0x2c0>
    305c:	88 0f       	add	r24, r24
    305e:	99 1f       	adc	r25, r25
    3060:	4a 95       	dec	r20
    3062:	e2 f7       	brpl	.-8      	; 0x305c <__vector_11+0x2bc>
    3064:	ea ee       	ldi	r30, 0xEA	; 234
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 83       	st	Z, r24
					UERST = 0;
    306a:	10 82       	st	Z, r1
    306c:	07 c0       	rjmp	.+14     	; 0x307c <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    306e:	81 e2       	ldi	r24, 0x21	; 33
    3070:	80 93 eb 00 	sts	0x00EB, r24
    3074:	03 c0       	rjmp	.+6      	; 0x307c <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3076:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    3078:	21 11       	cpse	r18, r1
    307a:	f7 ce       	rjmp	.-530    	; 0x2e6a <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    307c:	ff 91       	pop	r31
    307e:	ef 91       	pop	r30
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	bf 91       	pop	r27
    3086:	af 91       	pop	r26
    3088:	9f 91       	pop	r25
    308a:	8f 91       	pop	r24
    308c:	7f 91       	pop	r23
    308e:	6f 91       	pop	r22
    3090:	5f 91       	pop	r21
    3092:	4f 91       	pop	r20
    3094:	3f 91       	pop	r19
    3096:	2f 91       	pop	r18
    3098:	1f 91       	pop	r17
    309a:	0f 91       	pop	r16
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    30ac:	8c 01       	movw	r16, r24
    30ae:	0f 5f       	subi	r16, 0xFF	; 255
    30b0:	1f 4f       	sbci	r17, 0xFF	; 255
    30b2:	fc 01       	movw	r30, r24
    30b4:	c4 91       	lpm	r28, Z
		if (!c) break;
    30b6:	cc 23       	and	r28, r28
    30b8:	71 f0       	breq	.+28     	; 0x30d6 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
    30ba:	ca 30       	cpi	r28, 0x0A	; 10
    30bc:	19 f4       	brne	.+6      	; 0x30c4 <print_P+0x1e>
    30be:	8d e0       	ldi	r24, 0x0D	; 13
    30c0:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <m_usb_tx_char>
		usb_tx_char(c);
    30c4:	8c 2f       	mov	r24, r28
    30c6:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    30ca:	f8 01       	movw	r30, r16
    30cc:	c4 91       	lpm	r28, Z
    30ce:	0f 5f       	subi	r16, 0xFF	; 255
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
    30d2:	c1 11       	cpse	r28, r1
    30d4:	f2 cf       	rjmp	.-28     	; 0x30ba <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    30d6:	cf 91       	pop	r28
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	08 95       	ret

000030de <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	27 97       	sbiw	r28, 0x07	; 7
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    30fa:	8e 01       	movw	r16, r28
    30fc:	0f 5f       	subi	r16, 0xFF	; 255
    30fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3100:	27 e0       	ldi	r18, 0x07	; 7
    3102:	f8 01       	movw	r30, r16
    3104:	11 92       	st	Z+, r1
    3106:	2a 95       	dec	r18
    3108:	e9 f7       	brne	.-6      	; 0x3104 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    310a:	4a e0       	ldi	r20, 0x0A	; 10
    310c:	b8 01       	movw	r22, r16
    310e:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__itoa_ncheck>
    3112:	7e 01       	movw	r14, r28
    3114:	f8 e0       	ldi	r31, 0x08	; 8
    3116:	ef 0e       	add	r14, r31
    3118:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    311a:	f8 01       	movw	r30, r16
    311c:	81 91       	ld	r24, Z+
    311e:	8f 01       	movw	r16, r30
    3120:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    3122:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    3126:	0e 15       	cp	r16, r14
    3128:	1f 05       	cpc	r17, r15
    312a:	b9 f7       	brne	.-18     	; 0x311a <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    312c:	27 96       	adiw	r28, 0x07	; 7
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	08 95       	ret

00003146 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    314a:	ec eb       	ldi	r30, 0xBC	; 188
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	88 23       	and	r24, r24
    3152:	34 f0       	brlt	.+12     	; 0x3160 <twi_wait+0x1a>
    3154:	2f 5f       	subi	r18, 0xFF	; 255
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	29 3e       	cpi	r18, 0xE9	; 233
    315a:	83 e0       	ldi	r24, 0x03	; 3
    315c:	38 07       	cpc	r19, r24
    315e:	b9 f7       	brne	.-18     	; 0x314e <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	28 3e       	cpi	r18, 0xE8	; 232
    3164:	33 40       	sbci	r19, 0x03	; 3
    3166:	09 f4       	brne	.+2      	; 0x316a <twi_wait+0x24>
    3168:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    316a:	08 95       	ret

0000316c <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    316c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    3170:	84 e8       	ldi	r24, 0x84	; 132
    3172:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    3176:	0e 94 a3 18 	call	0x3146	; 0x3146 <twi_wait>
    317a:	88 23       	and	r24, r24
    317c:	19 f0       	breq	.+6      	; 0x3184 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    317e:	80 91 b9 00 	lds	r24, 0x00B9
    3182:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    3184:	08 95       	ret

00003186 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    3186:	cf 93       	push	r28
    3188:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    318a:	94 ea       	ldi	r25, 0xA4	; 164
    318c:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    3190:	0e 94 a3 18 	call	0x3146	; 0x3146 <twi_wait>
    3194:	88 23       	and	r24, r24
    3196:	61 f0       	breq	.+24     	; 0x31b0 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    3198:	8c 2f       	mov	r24, r28
    319a:	88 0f       	add	r24, r24
    319c:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    31a0:	80 32       	cpi	r24, 0x20	; 32
    31a2:	29 f4       	brne	.+10     	; 0x31ae <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    31a4:	84 e9       	ldi	r24, 0x94	; 148
    31a6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	01 c0       	rjmp	.+2      	; 0x31b0 <start_write+0x2a>
	}	
	return 1;	// success
    31ae:	81 e0       	ldi	r24, 0x01	; 1
}	
    31b0:	cf 91       	pop	r28
    31b2:	08 95       	ret

000031b4 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    31b4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    31b8:	88 e5       	ldi	r24, 0x58	; 88
    31ba:	0e 94 c3 18 	call	0x3186	; 0x3186 <start_write>
    31be:	88 23       	and	r24, r24
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <m_wii_open+0x10>
    31c2:	cd c0       	rjmp	.+410    	; 0x335e <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    31c4:	80 e3       	ldi	r24, 0x30	; 48
    31c6:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    31ca:	88 23       	and	r24, r24
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <m_wii_open+0x1c>
    31ce:	c9 c0       	rjmp	.+402    	; 0x3362 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    31d6:	88 23       	and	r24, r24
    31d8:	09 f4       	brne	.+2      	; 0x31dc <m_wii_open+0x28>
    31da:	c5 c0       	rjmp	.+394    	; 0x3366 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    31dc:	84 e9       	ldi	r24, 0x94	; 148
    31de:	80 93 bc 00 	sts	0x00BC, r24
    31e2:	83 ec       	ldi	r24, 0xC3	; 195
    31e4:	99 e0       	ldi	r25, 0x09	; 9
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <m_wii_open+0x32>
    31ea:	00 c0       	rjmp	.+0      	; 0x31ec <m_wii_open+0x38>
    31ec:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    31ee:	88 e5       	ldi	r24, 0x58	; 88
    31f0:	0e 94 c3 18 	call	0x3186	; 0x3186 <start_write>
    31f4:	88 23       	and	r24, r24
    31f6:	09 f4       	brne	.+2      	; 0x31fa <m_wii_open+0x46>
    31f8:	b8 c0       	rjmp	.+368    	; 0x336a <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3200:	88 23       	and	r24, r24
    3202:	09 f4       	brne	.+2      	; 0x3206 <m_wii_open+0x52>
    3204:	b4 c0       	rjmp	.+360    	; 0x336e <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    320c:	88 23       	and	r24, r24
    320e:	09 f4       	brne	.+2      	; 0x3212 <m_wii_open+0x5e>
    3210:	b0 c0       	rjmp	.+352    	; 0x3372 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3218:	88 23       	and	r24, r24
    321a:	09 f4       	brne	.+2      	; 0x321e <m_wii_open+0x6a>
    321c:	ac c0       	rjmp	.+344    	; 0x3376 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3224:	88 23       	and	r24, r24
    3226:	09 f4       	brne	.+2      	; 0x322a <m_wii_open+0x76>
    3228:	a8 c0       	rjmp	.+336    	; 0x337a <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3230:	88 23       	and	r24, r24
    3232:	09 f4       	brne	.+2      	; 0x3236 <m_wii_open+0x82>
    3234:	a4 c0       	rjmp	.+328    	; 0x337e <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    323c:	88 23       	and	r24, r24
    323e:	09 f4       	brne	.+2      	; 0x3242 <m_wii_open+0x8e>
    3240:	a0 c0       	rjmp	.+320    	; 0x3382 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3248:	88 23       	and	r24, r24
    324a:	09 f4       	brne	.+2      	; 0x324e <m_wii_open+0x9a>
    324c:	9c c0       	rjmp	.+312    	; 0x3386 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    324e:	80 e9       	ldi	r24, 0x90	; 144
    3250:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3254:	88 23       	and	r24, r24
    3256:	09 f4       	brne	.+2      	; 0x325a <m_wii_open+0xa6>
    3258:	98 c0       	rjmp	.+304    	; 0x338a <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    325a:	84 e9       	ldi	r24, 0x94	; 148
    325c:	80 93 bc 00 	sts	0x00BC, r24
    3260:	83 ec       	ldi	r24, 0xC3	; 195
    3262:	99 e0       	ldi	r25, 0x09	; 9
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <m_wii_open+0xb0>
    3268:	00 c0       	rjmp	.+0      	; 0x326a <m_wii_open+0xb6>
    326a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    326c:	88 e5       	ldi	r24, 0x58	; 88
    326e:	0e 94 c3 18 	call	0x3186	; 0x3186 <start_write>
    3272:	88 23       	and	r24, r24
    3274:	09 f4       	brne	.+2      	; 0x3278 <m_wii_open+0xc4>
    3276:	8b c0       	rjmp	.+278    	; 0x338e <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    3278:	87 e0       	ldi	r24, 0x07	; 7
    327a:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    327e:	88 23       	and	r24, r24
    3280:	09 f4       	brne	.+2      	; 0x3284 <m_wii_open+0xd0>
    3282:	87 c0       	rjmp	.+270    	; 0x3392 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    328a:	88 23       	and	r24, r24
    328c:	09 f4       	brne	.+2      	; 0x3290 <m_wii_open+0xdc>
    328e:	83 c0       	rjmp	.+262    	; 0x3396 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    3290:	81 e4       	ldi	r24, 0x41	; 65
    3292:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3296:	88 23       	and	r24, r24
    3298:	09 f4       	brne	.+2      	; 0x329c <m_wii_open+0xe8>
    329a:	7f c0       	rjmp	.+254    	; 0x339a <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    329c:	84 e9       	ldi	r24, 0x94	; 148
    329e:	80 93 bc 00 	sts	0x00BC, r24
    32a2:	83 ec       	ldi	r24, 0xC3	; 195
    32a4:	99 e0       	ldi	r25, 0x09	; 9
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <m_wii_open+0xf2>
    32aa:	00 c0       	rjmp	.+0      	; 0x32ac <m_wii_open+0xf8>
    32ac:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    32ae:	88 e5       	ldi	r24, 0x58	; 88
    32b0:	0e 94 c3 18 	call	0x3186	; 0x3186 <start_write>
    32b4:	88 23       	and	r24, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <m_wii_open+0x106>
    32b8:	72 c0       	rjmp	.+228    	; 0x339e <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    32ba:	8a e1       	ldi	r24, 0x1A	; 26
    32bc:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    32c0:	88 23       	and	r24, r24
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <m_wii_open+0x112>
    32c4:	6e c0       	rjmp	.+220    	; 0x33a2 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    32c6:	80 e4       	ldi	r24, 0x40	; 64
    32c8:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    32cc:	88 23       	and	r24, r24
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <m_wii_open+0x11e>
    32d0:	6a c0       	rjmp	.+212    	; 0x33a6 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    32d8:	88 23       	and	r24, r24
    32da:	09 f4       	brne	.+2      	; 0x32de <m_wii_open+0x12a>
    32dc:	66 c0       	rjmp	.+204    	; 0x33aa <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    32de:	84 e9       	ldi	r24, 0x94	; 148
    32e0:	80 93 bc 00 	sts	0x00BC, r24
    32e4:	83 ec       	ldi	r24, 0xC3	; 195
    32e6:	99 e0       	ldi	r25, 0x09	; 9
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <m_wii_open+0x134>
    32ec:	00 c0       	rjmp	.+0      	; 0x32ee <m_wii_open+0x13a>
    32ee:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    32f0:	88 e5       	ldi	r24, 0x58	; 88
    32f2:	0e 94 c3 18 	call	0x3186	; 0x3186 <start_write>
    32f6:	88 23       	and	r24, r24
    32f8:	09 f4       	brne	.+2      	; 0x32fc <m_wii_open+0x148>
    32fa:	59 c0       	rjmp	.+178    	; 0x33ae <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    32fc:	83 e3       	ldi	r24, 0x33	; 51
    32fe:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3302:	88 23       	and	r24, r24
    3304:	09 f4       	brne	.+2      	; 0x3308 <m_wii_open+0x154>
    3306:	55 c0       	rjmp	.+170    	; 0x33b2 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    3308:	83 e0       	ldi	r24, 0x03	; 3
    330a:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    330e:	88 23       	and	r24, r24
    3310:	09 f4       	brne	.+2      	; 0x3314 <m_wii_open+0x160>
    3312:	51 c0       	rjmp	.+162    	; 0x33b6 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3314:	84 e9       	ldi	r24, 0x94	; 148
    3316:	80 93 bc 00 	sts	0x00BC, r24
    331a:	83 ec       	ldi	r24, 0xC3	; 195
    331c:	99 e0       	ldi	r25, 0x09	; 9
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <m_wii_open+0x16a>
    3322:	00 c0       	rjmp	.+0      	; 0x3324 <m_wii_open+0x170>
    3324:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    3326:	88 e5       	ldi	r24, 0x58	; 88
    3328:	0e 94 c3 18 	call	0x3186	; 0x3186 <start_write>
    332c:	88 23       	and	r24, r24
    332e:	09 f4       	brne	.+2      	; 0x3332 <m_wii_open+0x17e>
    3330:	44 c0       	rjmp	.+136    	; 0x33ba <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    3332:	80 e3       	ldi	r24, 0x30	; 48
    3334:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3338:	88 23       	and	r24, r24
    333a:	09 f4       	brne	.+2      	; 0x333e <m_wii_open+0x18a>
    333c:	40 c0       	rjmp	.+128    	; 0x33be <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    333e:	88 e0       	ldi	r24, 0x08	; 8
    3340:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3344:	88 23       	and	r24, r24
    3346:	e9 f1       	breq	.+122    	; 0x33c2 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3348:	84 e9       	ldi	r24, 0x94	; 148
    334a:	80 93 bc 00 	sts	0x00BC, r24
    334e:	83 ec       	ldi	r24, 0xC3	; 195
    3350:	99 e0       	ldi	r25, 0x09	; 9
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <m_wii_open+0x19e>
    3356:	00 c0       	rjmp	.+0      	; 0x3358 <m_wii_open+0x1a4>
    3358:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    33c2:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    33c4:	08 95       	ret

000033c6 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    33c6:	cf 93       	push	r28
    33c8:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    33ca:	84 ea       	ldi	r24, 0xA4	; 164
    33cc:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    33d0:	0e 94 a3 18 	call	0x3146	; 0x3146 <twi_wait>
    33d4:	88 23       	and	r24, r24
    33d6:	69 f0       	breq	.+26     	; 0x33f2 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    33d8:	8c 2f       	mov	r24, r28
    33da:	88 0f       	add	r24, r24
    33dc:	8f 5f       	subi	r24, 0xFF	; 255
    33de:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    33e2:	88 34       	cpi	r24, 0x48	; 72
    33e4:	29 f4       	brne	.+10     	; 0x33f0 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    33e6:	84 e9       	ldi	r24, 0x94	; 148
    33e8:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	01 c0       	rjmp	.+2      	; 0x33f2 <start_read+0x2c>
	}	
	return 1;	// success
    33f0:	81 e0       	ldi	r24, 0x01	; 1
}	
    33f2:	cf 91       	pop	r28
    33f4:	08 95       	ret

000033f6 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	60 97       	sbiw	r28, 0x10	; 16
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    3410:	fe 01       	movw	r30, r28
    3412:	31 96       	adiw	r30, 0x01	; 1
    3414:	80 e1       	ldi	r24, 0x10	; 16
    3416:	df 01       	movw	r26, r30
    3418:	1d 92       	st	X+, r1
    341a:	8a 95       	dec	r24
    341c:	e9 f7       	brne	.-6      	; 0x3418 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    341e:	88 e5       	ldi	r24, 0x58	; 88
    3420:	0e 94 c3 18 	call	0x3186	; 0x3186 <start_write>
    3424:	88 23       	and	r24, r24
    3426:	09 f4       	brne	.+2      	; 0x342a <m_wii_read+0x34>
    3428:	69 c0       	rjmp	.+210    	; 0x34fc <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    342a:	86 e3       	ldi	r24, 0x36	; 54
    342c:	0e 94 b6 18 	call	0x316c	; 0x316c <send_byte>
    3430:	88 23       	and	r24, r24
    3432:	09 f4       	brne	.+2      	; 0x3436 <m_wii_read+0x40>
    3434:	65 c0       	rjmp	.+202    	; 0x3500 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3436:	84 e9       	ldi	r24, 0x94	; 148
    3438:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    343c:	b8 e0       	ldi	r27, 0x08	; 8
    343e:	ba 95       	dec	r27
    3440:	f1 f7       	brne	.-4      	; 0x343e <m_wii_read+0x48>
    3442:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    3444:	88 e5       	ldi	r24, 0x58	; 88
    3446:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <start_read>
    344a:	88 23       	and	r24, r24
    344c:	09 f4       	brne	.+2      	; 0x3450 <m_wii_read+0x5a>
    344e:	5a c0       	rjmp	.+180    	; 0x3504 <m_wii_read+0x10e>
    3450:	be 01       	movw	r22, r28
    3452:	6f 5f       	subi	r22, 0xFF	; 255
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	ae 01       	movw	r20, r28
    3458:	40 5f       	subi	r20, 0xF0	; 240
    345a:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    345c:	ec eb       	ldi	r30, 0xBC	; 188
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    3462:	2b eb       	ldi	r18, 0xBB	; 187
    3464:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    3466:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    3468:	90 81       	ld	r25, Z
    346a:	99 23       	and	r25, r25
    346c:	ec f7       	brge	.-6      	; 0x3468 <m_wii_read+0x72>
		temp[i] = TWDR;
    346e:	d9 01       	movw	r26, r18
    3470:	9c 91       	ld	r25, X
    3472:	db 01       	movw	r26, r22
    3474:	9d 93       	st	X+, r25
    3476:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    3478:	a4 17       	cp	r26, r20
    347a:	b5 07       	cpc	r27, r21
    347c:	a1 f7       	brne	.-24     	; 0x3466 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    347e:	84 e8       	ldi	r24, 0x84	; 132
    3480:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    3484:	ec eb       	ldi	r30, 0xBC	; 188
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	88 23       	and	r24, r24
    348c:	ec f7       	brge	.-6      	; 0x3488 <m_wii_read+0x92>
	temp[15] = TWDR;
    348e:	80 91 bb 00 	lds	r24, 0x00BB
    3492:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3494:	84 e9       	ldi	r24, 0x94	; 148
    3496:	80 93 bc 00 	sts	0x00BC, r24
    349a:	be 01       	movw	r22, r28
    349c:	6c 5f       	subi	r22, 0xFC	; 252
    349e:	7f 4f       	sbci	r23, 0xFF	; 255
    34a0:	f8 01       	movw	r30, r16
    34a2:	08 5e       	subi	r16, 0xE8	; 232
    34a4:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    34a6:	db 01       	movw	r26, r22
    34a8:	2c 91       	ld	r18, X
    34aa:	32 2f       	mov	r19, r18
    34ac:	30 73       	andi	r19, 0x30	; 48
    34ae:	cb 01       	movw	r24, r22
    34b0:	02 97       	sbiw	r24, 0x02	; 2
    34b2:	dc 01       	movw	r26, r24
    34b4:	8c 91       	ld	r24, X
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	b0 e1       	ldi	r27, 0x10	; 16
    34ba:	3b 9f       	mul	r19, r27
    34bc:	80 0d       	add	r24, r0
    34be:	91 1d       	adc	r25, r1
    34c0:	11 24       	eor	r1, r1
    34c2:	91 83       	std	Z+1, r25	; 0x01
    34c4:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    34c6:	42 2f       	mov	r20, r18
    34c8:	40 7c       	andi	r20, 0xC0	; 192
    34ca:	50 e0       	ldi	r21, 0x00	; 0
    34cc:	44 0f       	add	r20, r20
    34ce:	55 1f       	adc	r21, r21
    34d0:	44 0f       	add	r20, r20
    34d2:	55 1f       	adc	r21, r21
    34d4:	cb 01       	movw	r24, r22
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	dc 01       	movw	r26, r24
    34da:	8c 91       	ld	r24, X
    34dc:	48 0f       	add	r20, r24
    34de:	51 1d       	adc	r21, r1
    34e0:	53 83       	std	Z+3, r21	; 0x03
    34e2:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    34e4:	2f 70       	andi	r18, 0x0F	; 15
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	35 83       	std	Z+5, r19	; 0x05
    34ea:	24 83       	std	Z+4, r18	; 0x04
    34ec:	6d 5f       	subi	r22, 0xFD	; 253
    34ee:	7f 4f       	sbci	r23, 0xFF	; 255
    34f0:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    34f2:	e0 17       	cp	r30, r16
    34f4:	f1 07       	cpc	r31, r17
    34f6:	b9 f6       	brne	.-82     	; 0x34a6 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	05 c0       	rjmp	.+10     	; 0x3506 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	03 c0       	rjmp	.+6      	; 0x3506 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    3504:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    3506:	60 96       	adiw	r28, 0x10	; 16
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	df 91       	pop	r29
    3514:	cf 91       	pop	r28
    3516:	1f 91       	pop	r17
    3518:	0f 91       	pop	r16
    351a:	08 95       	ret

0000351c <acos>:
    351c:	9f 93       	push	r25
    351e:	9f 77       	andi	r25, 0x7F	; 127
    3520:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__fp_arccos>
    3524:	0f 90       	pop	r0
    3526:	00 20       	and	r0, r0
    3528:	42 f4       	brpl	.+16     	; 0x353a <acos+0x1e>
    352a:	90 58       	subi	r25, 0x80	; 128
    352c:	a2 ea       	ldi	r26, 0xA2	; 162
    352e:	2a ed       	ldi	r18, 0xDA	; 218
    3530:	3f e0       	ldi	r19, 0x0F	; 15
    3532:	49 e4       	ldi	r20, 0x49	; 73
    3534:	50 e4       	ldi	r21, 0x40	; 64
    3536:	0e 94 b7 1a 	call	0x356e	; 0x356e <__addsf3x>
    353a:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__fp_round>

0000353e <__subsf3>:
    353e:	50 58       	subi	r21, 0x80	; 128

00003540 <__addsf3>:
    3540:	bb 27       	eor	r27, r27
    3542:	aa 27       	eor	r26, r26
    3544:	0e 94 b7 1a 	call	0x356e	; 0x356e <__addsf3x>
    3548:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__fp_round>
    354c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fp_pscA>
    3550:	38 f0       	brcs	.+14     	; 0x3560 <__addsf3+0x20>
    3552:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__fp_pscB>
    3556:	20 f0       	brcs	.+8      	; 0x3560 <__addsf3+0x20>
    3558:	39 f4       	brne	.+14     	; 0x3568 <__addsf3+0x28>
    355a:	9f 3f       	cpi	r25, 0xFF	; 255
    355c:	19 f4       	brne	.+6      	; 0x3564 <__addsf3+0x24>
    355e:	26 f4       	brtc	.+8      	; 0x3568 <__addsf3+0x28>
    3560:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__fp_nan>
    3564:	0e f4       	brtc	.+2      	; 0x3568 <__addsf3+0x28>
    3566:	e0 95       	com	r30
    3568:	e7 fb       	bst	r30, 7
    356a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__fp_inf>

0000356e <__addsf3x>:
    356e:	e9 2f       	mov	r30, r25
    3570:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_split3>
    3574:	58 f3       	brcs	.-42     	; 0x354c <__addsf3+0xc>
    3576:	ba 17       	cp	r27, r26
    3578:	62 07       	cpc	r22, r18
    357a:	73 07       	cpc	r23, r19
    357c:	84 07       	cpc	r24, r20
    357e:	95 07       	cpc	r25, r21
    3580:	20 f0       	brcs	.+8      	; 0x358a <__addsf3x+0x1c>
    3582:	79 f4       	brne	.+30     	; 0x35a2 <__addsf3x+0x34>
    3584:	a6 f5       	brtc	.+104    	; 0x35ee <__addsf3x+0x80>
    3586:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__fp_zero>
    358a:	0e f4       	brtc	.+2      	; 0x358e <__addsf3x+0x20>
    358c:	e0 95       	com	r30
    358e:	0b 2e       	mov	r0, r27
    3590:	ba 2f       	mov	r27, r26
    3592:	a0 2d       	mov	r26, r0
    3594:	0b 01       	movw	r0, r22
    3596:	b9 01       	movw	r22, r18
    3598:	90 01       	movw	r18, r0
    359a:	0c 01       	movw	r0, r24
    359c:	ca 01       	movw	r24, r20
    359e:	a0 01       	movw	r20, r0
    35a0:	11 24       	eor	r1, r1
    35a2:	ff 27       	eor	r31, r31
    35a4:	59 1b       	sub	r21, r25
    35a6:	99 f0       	breq	.+38     	; 0x35ce <__addsf3x+0x60>
    35a8:	59 3f       	cpi	r21, 0xF9	; 249
    35aa:	50 f4       	brcc	.+20     	; 0x35c0 <__addsf3x+0x52>
    35ac:	50 3e       	cpi	r21, 0xE0	; 224
    35ae:	68 f1       	brcs	.+90     	; 0x360a <__addsf3x+0x9c>
    35b0:	1a 16       	cp	r1, r26
    35b2:	f0 40       	sbci	r31, 0x00	; 0
    35b4:	a2 2f       	mov	r26, r18
    35b6:	23 2f       	mov	r18, r19
    35b8:	34 2f       	mov	r19, r20
    35ba:	44 27       	eor	r20, r20
    35bc:	58 5f       	subi	r21, 0xF8	; 248
    35be:	f3 cf       	rjmp	.-26     	; 0x35a6 <__addsf3x+0x38>
    35c0:	46 95       	lsr	r20
    35c2:	37 95       	ror	r19
    35c4:	27 95       	ror	r18
    35c6:	a7 95       	ror	r26
    35c8:	f0 40       	sbci	r31, 0x00	; 0
    35ca:	53 95       	inc	r21
    35cc:	c9 f7       	brne	.-14     	; 0x35c0 <__addsf3x+0x52>
    35ce:	7e f4       	brtc	.+30     	; 0x35ee <__addsf3x+0x80>
    35d0:	1f 16       	cp	r1, r31
    35d2:	ba 0b       	sbc	r27, r26
    35d4:	62 0b       	sbc	r22, r18
    35d6:	73 0b       	sbc	r23, r19
    35d8:	84 0b       	sbc	r24, r20
    35da:	ba f0       	brmi	.+46     	; 0x360a <__addsf3x+0x9c>
    35dc:	91 50       	subi	r25, 0x01	; 1
    35de:	a1 f0       	breq	.+40     	; 0x3608 <__addsf3x+0x9a>
    35e0:	ff 0f       	add	r31, r31
    35e2:	bb 1f       	adc	r27, r27
    35e4:	66 1f       	adc	r22, r22
    35e6:	77 1f       	adc	r23, r23
    35e8:	88 1f       	adc	r24, r24
    35ea:	c2 f7       	brpl	.-16     	; 0x35dc <__addsf3x+0x6e>
    35ec:	0e c0       	rjmp	.+28     	; 0x360a <__addsf3x+0x9c>
    35ee:	ba 0f       	add	r27, r26
    35f0:	62 1f       	adc	r22, r18
    35f2:	73 1f       	adc	r23, r19
    35f4:	84 1f       	adc	r24, r20
    35f6:	48 f4       	brcc	.+18     	; 0x360a <__addsf3x+0x9c>
    35f8:	87 95       	ror	r24
    35fa:	77 95       	ror	r23
    35fc:	67 95       	ror	r22
    35fe:	b7 95       	ror	r27
    3600:	f7 95       	ror	r31
    3602:	9e 3f       	cpi	r25, 0xFE	; 254
    3604:	08 f0       	brcs	.+2      	; 0x3608 <__addsf3x+0x9a>
    3606:	b0 cf       	rjmp	.-160    	; 0x3568 <__addsf3+0x28>
    3608:	93 95       	inc	r25
    360a:	88 0f       	add	r24, r24
    360c:	08 f0       	brcs	.+2      	; 0x3610 <__addsf3x+0xa2>
    360e:	99 27       	eor	r25, r25
    3610:	ee 0f       	add	r30, r30
    3612:	97 95       	ror	r25
    3614:	87 95       	ror	r24
    3616:	08 95       	ret

00003618 <__cmpsf2>:
    3618:	0e 94 16 1c 	call	0x382c	; 0x382c <__fp_cmp>
    361c:	08 f4       	brcc	.+2      	; 0x3620 <__cmpsf2+0x8>
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	08 95       	ret

00003622 <__divsf3>:
    3622:	0e 94 25 1b 	call	0x364a	; 0x364a <__divsf3x>
    3626:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__fp_round>
    362a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__fp_pscB>
    362e:	58 f0       	brcs	.+22     	; 0x3646 <__divsf3+0x24>
    3630:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fp_pscA>
    3634:	40 f0       	brcs	.+16     	; 0x3646 <__divsf3+0x24>
    3636:	29 f4       	brne	.+10     	; 0x3642 <__divsf3+0x20>
    3638:	5f 3f       	cpi	r21, 0xFF	; 255
    363a:	29 f0       	breq	.+10     	; 0x3646 <__divsf3+0x24>
    363c:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__fp_inf>
    3640:	51 11       	cpse	r21, r1
    3642:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__fp_szero>
    3646:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__fp_nan>

0000364a <__divsf3x>:
    364a:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_split3>
    364e:	68 f3       	brcs	.-38     	; 0x362a <__divsf3+0x8>

00003650 <__divsf3_pse>:
    3650:	99 23       	and	r25, r25
    3652:	b1 f3       	breq	.-20     	; 0x3640 <__divsf3+0x1e>
    3654:	55 23       	and	r21, r21
    3656:	91 f3       	breq	.-28     	; 0x363c <__divsf3+0x1a>
    3658:	95 1b       	sub	r25, r21
    365a:	55 0b       	sbc	r21, r21
    365c:	bb 27       	eor	r27, r27
    365e:	aa 27       	eor	r26, r26
    3660:	62 17       	cp	r22, r18
    3662:	73 07       	cpc	r23, r19
    3664:	84 07       	cpc	r24, r20
    3666:	38 f0       	brcs	.+14     	; 0x3676 <__divsf3_pse+0x26>
    3668:	9f 5f       	subi	r25, 0xFF	; 255
    366a:	5f 4f       	sbci	r21, 0xFF	; 255
    366c:	22 0f       	add	r18, r18
    366e:	33 1f       	adc	r19, r19
    3670:	44 1f       	adc	r20, r20
    3672:	aa 1f       	adc	r26, r26
    3674:	a9 f3       	breq	.-22     	; 0x3660 <__divsf3_pse+0x10>
    3676:	35 d0       	rcall	.+106    	; 0x36e2 <__divsf3_pse+0x92>
    3678:	0e 2e       	mov	r0, r30
    367a:	3a f0       	brmi	.+14     	; 0x368a <__divsf3_pse+0x3a>
    367c:	e0 e8       	ldi	r30, 0x80	; 128
    367e:	32 d0       	rcall	.+100    	; 0x36e4 <__divsf3_pse+0x94>
    3680:	91 50       	subi	r25, 0x01	; 1
    3682:	50 40       	sbci	r21, 0x00	; 0
    3684:	e6 95       	lsr	r30
    3686:	00 1c       	adc	r0, r0
    3688:	ca f7       	brpl	.-14     	; 0x367c <__divsf3_pse+0x2c>
    368a:	2b d0       	rcall	.+86     	; 0x36e2 <__divsf3_pse+0x92>
    368c:	fe 2f       	mov	r31, r30
    368e:	29 d0       	rcall	.+82     	; 0x36e2 <__divsf3_pse+0x92>
    3690:	66 0f       	add	r22, r22
    3692:	77 1f       	adc	r23, r23
    3694:	88 1f       	adc	r24, r24
    3696:	bb 1f       	adc	r27, r27
    3698:	26 17       	cp	r18, r22
    369a:	37 07       	cpc	r19, r23
    369c:	48 07       	cpc	r20, r24
    369e:	ab 07       	cpc	r26, r27
    36a0:	b0 e8       	ldi	r27, 0x80	; 128
    36a2:	09 f0       	breq	.+2      	; 0x36a6 <__divsf3_pse+0x56>
    36a4:	bb 0b       	sbc	r27, r27
    36a6:	80 2d       	mov	r24, r0
    36a8:	bf 01       	movw	r22, r30
    36aa:	ff 27       	eor	r31, r31
    36ac:	93 58       	subi	r25, 0x83	; 131
    36ae:	5f 4f       	sbci	r21, 0xFF	; 255
    36b0:	3a f0       	brmi	.+14     	; 0x36c0 <__divsf3_pse+0x70>
    36b2:	9e 3f       	cpi	r25, 0xFE	; 254
    36b4:	51 05       	cpc	r21, r1
    36b6:	78 f0       	brcs	.+30     	; 0x36d6 <__divsf3_pse+0x86>
    36b8:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__fp_inf>
    36bc:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__fp_szero>
    36c0:	5f 3f       	cpi	r21, 0xFF	; 255
    36c2:	e4 f3       	brlt	.-8      	; 0x36bc <__divsf3_pse+0x6c>
    36c4:	98 3e       	cpi	r25, 0xE8	; 232
    36c6:	d4 f3       	brlt	.-12     	; 0x36bc <__divsf3_pse+0x6c>
    36c8:	86 95       	lsr	r24
    36ca:	77 95       	ror	r23
    36cc:	67 95       	ror	r22
    36ce:	b7 95       	ror	r27
    36d0:	f7 95       	ror	r31
    36d2:	9f 5f       	subi	r25, 0xFF	; 255
    36d4:	c9 f7       	brne	.-14     	; 0x36c8 <__divsf3_pse+0x78>
    36d6:	88 0f       	add	r24, r24
    36d8:	91 1d       	adc	r25, r1
    36da:	96 95       	lsr	r25
    36dc:	87 95       	ror	r24
    36de:	97 f9       	bld	r25, 7
    36e0:	08 95       	ret
    36e2:	e1 e0       	ldi	r30, 0x01	; 1
    36e4:	66 0f       	add	r22, r22
    36e6:	77 1f       	adc	r23, r23
    36e8:	88 1f       	adc	r24, r24
    36ea:	bb 1f       	adc	r27, r27
    36ec:	62 17       	cp	r22, r18
    36ee:	73 07       	cpc	r23, r19
    36f0:	84 07       	cpc	r24, r20
    36f2:	ba 07       	cpc	r27, r26
    36f4:	20 f0       	brcs	.+8      	; 0x36fe <__divsf3_pse+0xae>
    36f6:	62 1b       	sub	r22, r18
    36f8:	73 0b       	sbc	r23, r19
    36fa:	84 0b       	sbc	r24, r20
    36fc:	ba 0b       	sbc	r27, r26
    36fe:	ee 1f       	adc	r30, r30
    3700:	88 f7       	brcc	.-30     	; 0x36e4 <__divsf3_pse+0x94>
    3702:	e0 95       	com	r30
    3704:	08 95       	ret

00003706 <__fixsfsi>:
    3706:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    370a:	68 94       	set
    370c:	b1 11       	cpse	r27, r1
    370e:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__fp_szero>
    3712:	08 95       	ret

00003714 <__fixunssfsi>:
    3714:	0e 94 91 1c 	call	0x3922	; 0x3922 <__fp_splitA>
    3718:	88 f0       	brcs	.+34     	; 0x373c <__fixunssfsi+0x28>
    371a:	9f 57       	subi	r25, 0x7F	; 127
    371c:	98 f0       	brcs	.+38     	; 0x3744 <__fixunssfsi+0x30>
    371e:	b9 2f       	mov	r27, r25
    3720:	99 27       	eor	r25, r25
    3722:	b7 51       	subi	r27, 0x17	; 23
    3724:	b0 f0       	brcs	.+44     	; 0x3752 <__fixunssfsi+0x3e>
    3726:	e1 f0       	breq	.+56     	; 0x3760 <__fixunssfsi+0x4c>
    3728:	66 0f       	add	r22, r22
    372a:	77 1f       	adc	r23, r23
    372c:	88 1f       	adc	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	1a f0       	brmi	.+6      	; 0x3738 <__fixunssfsi+0x24>
    3732:	ba 95       	dec	r27
    3734:	c9 f7       	brne	.-14     	; 0x3728 <__fixunssfsi+0x14>
    3736:	14 c0       	rjmp	.+40     	; 0x3760 <__fixunssfsi+0x4c>
    3738:	b1 30       	cpi	r27, 0x01	; 1
    373a:	91 f0       	breq	.+36     	; 0x3760 <__fixunssfsi+0x4c>
    373c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__fp_zero>
    3740:	b1 e0       	ldi	r27, 0x01	; 1
    3742:	08 95       	ret
    3744:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__fp_zero>
    3748:	67 2f       	mov	r22, r23
    374a:	78 2f       	mov	r23, r24
    374c:	88 27       	eor	r24, r24
    374e:	b8 5f       	subi	r27, 0xF8	; 248
    3750:	39 f0       	breq	.+14     	; 0x3760 <__fixunssfsi+0x4c>
    3752:	b9 3f       	cpi	r27, 0xF9	; 249
    3754:	cc f3       	brlt	.-14     	; 0x3748 <__fixunssfsi+0x34>
    3756:	86 95       	lsr	r24
    3758:	77 95       	ror	r23
    375a:	67 95       	ror	r22
    375c:	b3 95       	inc	r27
    375e:	d9 f7       	brne	.-10     	; 0x3756 <__fixunssfsi+0x42>
    3760:	3e f4       	brtc	.+14     	; 0x3770 <__fixunssfsi+0x5c>
    3762:	90 95       	com	r25
    3764:	80 95       	com	r24
    3766:	70 95       	com	r23
    3768:	61 95       	neg	r22
    376a:	7f 4f       	sbci	r23, 0xFF	; 255
    376c:	8f 4f       	sbci	r24, 0xFF	; 255
    376e:	9f 4f       	sbci	r25, 0xFF	; 255
    3770:	08 95       	ret

00003772 <__floatunsisf>:
    3772:	e8 94       	clt
    3774:	09 c0       	rjmp	.+18     	; 0x3788 <__floatsisf+0x12>

00003776 <__floatsisf>:
    3776:	97 fb       	bst	r25, 7
    3778:	3e f4       	brtc	.+14     	; 0x3788 <__floatsisf+0x12>
    377a:	90 95       	com	r25
    377c:	80 95       	com	r24
    377e:	70 95       	com	r23
    3780:	61 95       	neg	r22
    3782:	7f 4f       	sbci	r23, 0xFF	; 255
    3784:	8f 4f       	sbci	r24, 0xFF	; 255
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	99 23       	and	r25, r25
    378a:	a9 f0       	breq	.+42     	; 0x37b6 <__floatsisf+0x40>
    378c:	f9 2f       	mov	r31, r25
    378e:	96 e9       	ldi	r25, 0x96	; 150
    3790:	bb 27       	eor	r27, r27
    3792:	93 95       	inc	r25
    3794:	f6 95       	lsr	r31
    3796:	87 95       	ror	r24
    3798:	77 95       	ror	r23
    379a:	67 95       	ror	r22
    379c:	b7 95       	ror	r27
    379e:	f1 11       	cpse	r31, r1
    37a0:	f8 cf       	rjmp	.-16     	; 0x3792 <__floatsisf+0x1c>
    37a2:	fa f4       	brpl	.+62     	; 0x37e2 <__floatsisf+0x6c>
    37a4:	bb 0f       	add	r27, r27
    37a6:	11 f4       	brne	.+4      	; 0x37ac <__floatsisf+0x36>
    37a8:	60 ff       	sbrs	r22, 0
    37aa:	1b c0       	rjmp	.+54     	; 0x37e2 <__floatsisf+0x6c>
    37ac:	6f 5f       	subi	r22, 0xFF	; 255
    37ae:	7f 4f       	sbci	r23, 0xFF	; 255
    37b0:	8f 4f       	sbci	r24, 0xFF	; 255
    37b2:	9f 4f       	sbci	r25, 0xFF	; 255
    37b4:	16 c0       	rjmp	.+44     	; 0x37e2 <__floatsisf+0x6c>
    37b6:	88 23       	and	r24, r24
    37b8:	11 f0       	breq	.+4      	; 0x37be <__floatsisf+0x48>
    37ba:	96 e9       	ldi	r25, 0x96	; 150
    37bc:	11 c0       	rjmp	.+34     	; 0x37e0 <__floatsisf+0x6a>
    37be:	77 23       	and	r23, r23
    37c0:	21 f0       	breq	.+8      	; 0x37ca <__floatsisf+0x54>
    37c2:	9e e8       	ldi	r25, 0x8E	; 142
    37c4:	87 2f       	mov	r24, r23
    37c6:	76 2f       	mov	r23, r22
    37c8:	05 c0       	rjmp	.+10     	; 0x37d4 <__floatsisf+0x5e>
    37ca:	66 23       	and	r22, r22
    37cc:	71 f0       	breq	.+28     	; 0x37ea <__floatsisf+0x74>
    37ce:	96 e8       	ldi	r25, 0x86	; 134
    37d0:	86 2f       	mov	r24, r22
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	2a f0       	brmi	.+10     	; 0x37e2 <__floatsisf+0x6c>
    37d8:	9a 95       	dec	r25
    37da:	66 0f       	add	r22, r22
    37dc:	77 1f       	adc	r23, r23
    37de:	88 1f       	adc	r24, r24
    37e0:	da f7       	brpl	.-10     	; 0x37d8 <__floatsisf+0x62>
    37e2:	88 0f       	add	r24, r24
    37e4:	96 95       	lsr	r25
    37e6:	87 95       	ror	r24
    37e8:	97 f9       	bld	r25, 7
    37ea:	08 95       	ret

000037ec <__fp_arccos>:
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	1f 93       	push	r17
    37f2:	0f 93       	push	r16
    37f4:	8b 01       	movw	r16, r22
    37f6:	ec 01       	movw	r28, r24
    37f8:	ea ec       	ldi	r30, 0xCA	; 202
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	0e 94 43 1c 	call	0x3886	; 0x3886 <__fp_powser>
    3800:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__fp_round>
    3804:	98 01       	movw	r18, r16
    3806:	ae 01       	movw	r20, r28
    3808:	8b 01       	movw	r16, r22
    380a:	ec 01       	movw	r28, r24
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	80 e8       	ldi	r24, 0x80	; 128
    3812:	9f e3       	ldi	r25, 0x3F	; 63
    3814:	0e 94 9f 1a 	call	0x353e	; 0x353e <__subsf3>
    3818:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <sqrt>
    381c:	98 01       	movw	r18, r16
    381e:	ae 01       	movw	r20, r28
    3820:	0f 91       	pop	r16
    3822:	1f 91       	pop	r17
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__mulsf3x>

0000382c <__fp_cmp>:
    382c:	99 0f       	add	r25, r25
    382e:	00 08       	sbc	r0, r0
    3830:	55 0f       	add	r21, r21
    3832:	aa 0b       	sbc	r26, r26
    3834:	e0 e8       	ldi	r30, 0x80	; 128
    3836:	fe ef       	ldi	r31, 0xFE	; 254
    3838:	16 16       	cp	r1, r22
    383a:	17 06       	cpc	r1, r23
    383c:	e8 07       	cpc	r30, r24
    383e:	f9 07       	cpc	r31, r25
    3840:	c0 f0       	brcs	.+48     	; 0x3872 <__fp_cmp+0x46>
    3842:	12 16       	cp	r1, r18
    3844:	13 06       	cpc	r1, r19
    3846:	e4 07       	cpc	r30, r20
    3848:	f5 07       	cpc	r31, r21
    384a:	98 f0       	brcs	.+38     	; 0x3872 <__fp_cmp+0x46>
    384c:	62 1b       	sub	r22, r18
    384e:	73 0b       	sbc	r23, r19
    3850:	84 0b       	sbc	r24, r20
    3852:	95 0b       	sbc	r25, r21
    3854:	39 f4       	brne	.+14     	; 0x3864 <__fp_cmp+0x38>
    3856:	0a 26       	eor	r0, r26
    3858:	61 f0       	breq	.+24     	; 0x3872 <__fp_cmp+0x46>
    385a:	23 2b       	or	r18, r19
    385c:	24 2b       	or	r18, r20
    385e:	25 2b       	or	r18, r21
    3860:	21 f4       	brne	.+8      	; 0x386a <__fp_cmp+0x3e>
    3862:	08 95       	ret
    3864:	0a 26       	eor	r0, r26
    3866:	09 f4       	brne	.+2      	; 0x386a <__fp_cmp+0x3e>
    3868:	a1 40       	sbci	r26, 0x01	; 1
    386a:	a6 95       	lsr	r26
    386c:	8f ef       	ldi	r24, 0xFF	; 255
    386e:	81 1d       	adc	r24, r1
    3870:	81 1d       	adc	r24, r1
    3872:	08 95       	ret

00003874 <__fp_inf>:
    3874:	97 f9       	bld	r25, 7
    3876:	9f 67       	ori	r25, 0x7F	; 127
    3878:	80 e8       	ldi	r24, 0x80	; 128
    387a:	70 e0       	ldi	r23, 0x00	; 0
    387c:	60 e0       	ldi	r22, 0x00	; 0
    387e:	08 95       	ret

00003880 <__fp_nan>:
    3880:	9f ef       	ldi	r25, 0xFF	; 255
    3882:	80 ec       	ldi	r24, 0xC0	; 192
    3884:	08 95       	ret

00003886 <__fp_powser>:
    3886:	df 93       	push	r29
    3888:	cf 93       	push	r28
    388a:	1f 93       	push	r17
    388c:	0f 93       	push	r16
    388e:	ff 92       	push	r15
    3890:	ef 92       	push	r14
    3892:	df 92       	push	r13
    3894:	7b 01       	movw	r14, r22
    3896:	8c 01       	movw	r16, r24
    3898:	68 94       	set
    389a:	06 c0       	rjmp	.+12     	; 0x38a8 <__fp_powser+0x22>
    389c:	da 2e       	mov	r13, r26
    389e:	ef 01       	movw	r28, r30
    38a0:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__mulsf3x>
    38a4:	fe 01       	movw	r30, r28
    38a6:	e8 94       	clt
    38a8:	a5 91       	lpm	r26, Z+
    38aa:	25 91       	lpm	r18, Z+
    38ac:	35 91       	lpm	r19, Z+
    38ae:	45 91       	lpm	r20, Z+
    38b0:	55 91       	lpm	r21, Z+
    38b2:	a6 f3       	brts	.-24     	; 0x389c <__fp_powser+0x16>
    38b4:	ef 01       	movw	r28, r30
    38b6:	0e 94 b7 1a 	call	0x356e	; 0x356e <__addsf3x>
    38ba:	fe 01       	movw	r30, r28
    38bc:	97 01       	movw	r18, r14
    38be:	a8 01       	movw	r20, r16
    38c0:	da 94       	dec	r13
    38c2:	69 f7       	brne	.-38     	; 0x389e <__fp_powser+0x18>
    38c4:	df 90       	pop	r13
    38c6:	ef 90       	pop	r14
    38c8:	ff 90       	pop	r15
    38ca:	0f 91       	pop	r16
    38cc:	1f 91       	pop	r17
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <__fp_pscA>:
    38d4:	00 24       	eor	r0, r0
    38d6:	0a 94       	dec	r0
    38d8:	16 16       	cp	r1, r22
    38da:	17 06       	cpc	r1, r23
    38dc:	18 06       	cpc	r1, r24
    38de:	09 06       	cpc	r0, r25
    38e0:	08 95       	ret

000038e2 <__fp_pscB>:
    38e2:	00 24       	eor	r0, r0
    38e4:	0a 94       	dec	r0
    38e6:	12 16       	cp	r1, r18
    38e8:	13 06       	cpc	r1, r19
    38ea:	14 06       	cpc	r1, r20
    38ec:	05 06       	cpc	r0, r21
    38ee:	08 95       	ret

000038f0 <__fp_round>:
    38f0:	09 2e       	mov	r0, r25
    38f2:	03 94       	inc	r0
    38f4:	00 0c       	add	r0, r0
    38f6:	11 f4       	brne	.+4      	; 0x38fc <__fp_round+0xc>
    38f8:	88 23       	and	r24, r24
    38fa:	52 f0       	brmi	.+20     	; 0x3910 <__fp_round+0x20>
    38fc:	bb 0f       	add	r27, r27
    38fe:	40 f4       	brcc	.+16     	; 0x3910 <__fp_round+0x20>
    3900:	bf 2b       	or	r27, r31
    3902:	11 f4       	brne	.+4      	; 0x3908 <__fp_round+0x18>
    3904:	60 ff       	sbrs	r22, 0
    3906:	04 c0       	rjmp	.+8      	; 0x3910 <__fp_round+0x20>
    3908:	6f 5f       	subi	r22, 0xFF	; 255
    390a:	7f 4f       	sbci	r23, 0xFF	; 255
    390c:	8f 4f       	sbci	r24, 0xFF	; 255
    390e:	9f 4f       	sbci	r25, 0xFF	; 255
    3910:	08 95       	ret

00003912 <__fp_split3>:
    3912:	57 fd       	sbrc	r21, 7
    3914:	90 58       	subi	r25, 0x80	; 128
    3916:	44 0f       	add	r20, r20
    3918:	55 1f       	adc	r21, r21
    391a:	59 f0       	breq	.+22     	; 0x3932 <__fp_splitA+0x10>
    391c:	5f 3f       	cpi	r21, 0xFF	; 255
    391e:	71 f0       	breq	.+28     	; 0x393c <__fp_splitA+0x1a>
    3920:	47 95       	ror	r20

00003922 <__fp_splitA>:
    3922:	88 0f       	add	r24, r24
    3924:	97 fb       	bst	r25, 7
    3926:	99 1f       	adc	r25, r25
    3928:	61 f0       	breq	.+24     	; 0x3942 <__fp_splitA+0x20>
    392a:	9f 3f       	cpi	r25, 0xFF	; 255
    392c:	79 f0       	breq	.+30     	; 0x394c <__fp_splitA+0x2a>
    392e:	87 95       	ror	r24
    3930:	08 95       	ret
    3932:	12 16       	cp	r1, r18
    3934:	13 06       	cpc	r1, r19
    3936:	14 06       	cpc	r1, r20
    3938:	55 1f       	adc	r21, r21
    393a:	f2 cf       	rjmp	.-28     	; 0x3920 <__fp_split3+0xe>
    393c:	46 95       	lsr	r20
    393e:	f1 df       	rcall	.-30     	; 0x3922 <__fp_splitA>
    3940:	08 c0       	rjmp	.+16     	; 0x3952 <__fp_splitA+0x30>
    3942:	16 16       	cp	r1, r22
    3944:	17 06       	cpc	r1, r23
    3946:	18 06       	cpc	r1, r24
    3948:	99 1f       	adc	r25, r25
    394a:	f1 cf       	rjmp	.-30     	; 0x392e <__fp_splitA+0xc>
    394c:	86 95       	lsr	r24
    394e:	71 05       	cpc	r23, r1
    3950:	61 05       	cpc	r22, r1
    3952:	08 94       	sec
    3954:	08 95       	ret

00003956 <__fp_zero>:
    3956:	e8 94       	clt

00003958 <__fp_szero>:
    3958:	bb 27       	eor	r27, r27
    395a:	66 27       	eor	r22, r22
    395c:	77 27       	eor	r23, r23
    395e:	cb 01       	movw	r24, r22
    3960:	97 f9       	bld	r25, 7
    3962:	08 95       	ret

00003964 <__gesf2>:
    3964:	0e 94 16 1c 	call	0x382c	; 0x382c <__fp_cmp>
    3968:	08 f4       	brcc	.+2      	; 0x396c <__gesf2+0x8>
    396a:	8f ef       	ldi	r24, 0xFF	; 255
    396c:	08 95       	ret

0000396e <__mulsf3>:
    396e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__mulsf3x>
    3972:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__fp_round>
    3976:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fp_pscA>
    397a:	38 f0       	brcs	.+14     	; 0x398a <__mulsf3+0x1c>
    397c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__fp_pscB>
    3980:	20 f0       	brcs	.+8      	; 0x398a <__mulsf3+0x1c>
    3982:	95 23       	and	r25, r21
    3984:	11 f0       	breq	.+4      	; 0x398a <__mulsf3+0x1c>
    3986:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__fp_inf>
    398a:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__fp_nan>
    398e:	11 24       	eor	r1, r1
    3990:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__fp_szero>

00003994 <__mulsf3x>:
    3994:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_split3>
    3998:	70 f3       	brcs	.-36     	; 0x3976 <__mulsf3+0x8>

0000399a <__mulsf3_pse>:
    399a:	95 9f       	mul	r25, r21
    399c:	c1 f3       	breq	.-16     	; 0x398e <__mulsf3+0x20>
    399e:	95 0f       	add	r25, r21
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	55 1f       	adc	r21, r21
    39a4:	62 9f       	mul	r22, r18
    39a6:	f0 01       	movw	r30, r0
    39a8:	72 9f       	mul	r23, r18
    39aa:	bb 27       	eor	r27, r27
    39ac:	f0 0d       	add	r31, r0
    39ae:	b1 1d       	adc	r27, r1
    39b0:	63 9f       	mul	r22, r19
    39b2:	aa 27       	eor	r26, r26
    39b4:	f0 0d       	add	r31, r0
    39b6:	b1 1d       	adc	r27, r1
    39b8:	aa 1f       	adc	r26, r26
    39ba:	64 9f       	mul	r22, r20
    39bc:	66 27       	eor	r22, r22
    39be:	b0 0d       	add	r27, r0
    39c0:	a1 1d       	adc	r26, r1
    39c2:	66 1f       	adc	r22, r22
    39c4:	82 9f       	mul	r24, r18
    39c6:	22 27       	eor	r18, r18
    39c8:	b0 0d       	add	r27, r0
    39ca:	a1 1d       	adc	r26, r1
    39cc:	62 1f       	adc	r22, r18
    39ce:	73 9f       	mul	r23, r19
    39d0:	b0 0d       	add	r27, r0
    39d2:	a1 1d       	adc	r26, r1
    39d4:	62 1f       	adc	r22, r18
    39d6:	83 9f       	mul	r24, r19
    39d8:	a0 0d       	add	r26, r0
    39da:	61 1d       	adc	r22, r1
    39dc:	22 1f       	adc	r18, r18
    39de:	74 9f       	mul	r23, r20
    39e0:	33 27       	eor	r19, r19
    39e2:	a0 0d       	add	r26, r0
    39e4:	61 1d       	adc	r22, r1
    39e6:	23 1f       	adc	r18, r19
    39e8:	84 9f       	mul	r24, r20
    39ea:	60 0d       	add	r22, r0
    39ec:	21 1d       	adc	r18, r1
    39ee:	82 2f       	mov	r24, r18
    39f0:	76 2f       	mov	r23, r22
    39f2:	6a 2f       	mov	r22, r26
    39f4:	11 24       	eor	r1, r1
    39f6:	9f 57       	subi	r25, 0x7F	; 127
    39f8:	50 40       	sbci	r21, 0x00	; 0
    39fa:	9a f0       	brmi	.+38     	; 0x3a22 <__mulsf3_pse+0x88>
    39fc:	f1 f0       	breq	.+60     	; 0x3a3a <__mulsf3_pse+0xa0>
    39fe:	88 23       	and	r24, r24
    3a00:	4a f0       	brmi	.+18     	; 0x3a14 <__mulsf3_pse+0x7a>
    3a02:	ee 0f       	add	r30, r30
    3a04:	ff 1f       	adc	r31, r31
    3a06:	bb 1f       	adc	r27, r27
    3a08:	66 1f       	adc	r22, r22
    3a0a:	77 1f       	adc	r23, r23
    3a0c:	88 1f       	adc	r24, r24
    3a0e:	91 50       	subi	r25, 0x01	; 1
    3a10:	50 40       	sbci	r21, 0x00	; 0
    3a12:	a9 f7       	brne	.-22     	; 0x39fe <__mulsf3_pse+0x64>
    3a14:	9e 3f       	cpi	r25, 0xFE	; 254
    3a16:	51 05       	cpc	r21, r1
    3a18:	80 f0       	brcs	.+32     	; 0x3a3a <__mulsf3_pse+0xa0>
    3a1a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__fp_inf>
    3a1e:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__fp_szero>
    3a22:	5f 3f       	cpi	r21, 0xFF	; 255
    3a24:	e4 f3       	brlt	.-8      	; 0x3a1e <__mulsf3_pse+0x84>
    3a26:	98 3e       	cpi	r25, 0xE8	; 232
    3a28:	d4 f3       	brlt	.-12     	; 0x3a1e <__mulsf3_pse+0x84>
    3a2a:	86 95       	lsr	r24
    3a2c:	77 95       	ror	r23
    3a2e:	67 95       	ror	r22
    3a30:	b7 95       	ror	r27
    3a32:	f7 95       	ror	r31
    3a34:	e7 95       	ror	r30
    3a36:	9f 5f       	subi	r25, 0xFF	; 255
    3a38:	c1 f7       	brne	.-16     	; 0x3a2a <__mulsf3_pse+0x90>
    3a3a:	fe 2b       	or	r31, r30
    3a3c:	88 0f       	add	r24, r24
    3a3e:	91 1d       	adc	r25, r1
    3a40:	96 95       	lsr	r25
    3a42:	87 95       	ror	r24
    3a44:	97 f9       	bld	r25, 7
    3a46:	08 95       	ret
    3a48:	19 f4       	brne	.+6      	; 0x3a50 <__mulsf3_pse+0xb6>
    3a4a:	16 f4       	brtc	.+4      	; 0x3a50 <__mulsf3_pse+0xb6>
    3a4c:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__fp_nan>
    3a50:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <__fp_mpack>

00003a54 <sqrt>:
    3a54:	0e 94 91 1c 	call	0x3922	; 0x3922 <__fp_splitA>
    3a58:	b8 f3       	brcs	.-18     	; 0x3a48 <__mulsf3_pse+0xae>
    3a5a:	99 23       	and	r25, r25
    3a5c:	c9 f3       	breq	.-14     	; 0x3a50 <__mulsf3_pse+0xb6>
    3a5e:	b6 f3       	brts	.-20     	; 0x3a4c <__mulsf3_pse+0xb2>
    3a60:	9f 57       	subi	r25, 0x7F	; 127
    3a62:	55 0b       	sbc	r21, r21
    3a64:	87 ff       	sbrs	r24, 7
    3a66:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fp_norm2>
    3a6a:	00 24       	eor	r0, r0
    3a6c:	a0 e6       	ldi	r26, 0x60	; 96
    3a6e:	40 ea       	ldi	r20, 0xA0	; 160
    3a70:	90 01       	movw	r18, r0
    3a72:	80 58       	subi	r24, 0x80	; 128
    3a74:	56 95       	lsr	r21
    3a76:	97 95       	ror	r25
    3a78:	28 f4       	brcc	.+10     	; 0x3a84 <sqrt+0x30>
    3a7a:	80 5c       	subi	r24, 0xC0	; 192
    3a7c:	66 0f       	add	r22, r22
    3a7e:	77 1f       	adc	r23, r23
    3a80:	88 1f       	adc	r24, r24
    3a82:	20 f0       	brcs	.+8      	; 0x3a8c <sqrt+0x38>
    3a84:	26 17       	cp	r18, r22
    3a86:	37 07       	cpc	r19, r23
    3a88:	48 07       	cpc	r20, r24
    3a8a:	30 f4       	brcc	.+12     	; 0x3a98 <sqrt+0x44>
    3a8c:	62 1b       	sub	r22, r18
    3a8e:	73 0b       	sbc	r23, r19
    3a90:	84 0b       	sbc	r24, r20
    3a92:	20 29       	or	r18, r0
    3a94:	31 29       	or	r19, r1
    3a96:	4a 2b       	or	r20, r26
    3a98:	a6 95       	lsr	r26
    3a9a:	17 94       	ror	r1
    3a9c:	07 94       	ror	r0
    3a9e:	20 25       	eor	r18, r0
    3aa0:	31 25       	eor	r19, r1
    3aa2:	4a 27       	eor	r20, r26
    3aa4:	58 f7       	brcc	.-42     	; 0x3a7c <sqrt+0x28>
    3aa6:	66 0f       	add	r22, r22
    3aa8:	77 1f       	adc	r23, r23
    3aaa:	88 1f       	adc	r24, r24
    3aac:	20 f0       	brcs	.+8      	; 0x3ab6 <sqrt+0x62>
    3aae:	26 17       	cp	r18, r22
    3ab0:	37 07       	cpc	r19, r23
    3ab2:	48 07       	cpc	r20, r24
    3ab4:	30 f4       	brcc	.+12     	; 0x3ac2 <sqrt+0x6e>
    3ab6:	62 0b       	sbc	r22, r18
    3ab8:	73 0b       	sbc	r23, r19
    3aba:	84 0b       	sbc	r24, r20
    3abc:	20 0d       	add	r18, r0
    3abe:	31 1d       	adc	r19, r1
    3ac0:	41 1d       	adc	r20, r1
    3ac2:	a0 95       	com	r26
    3ac4:	81 f7       	brne	.-32     	; 0x3aa6 <sqrt+0x52>
    3ac6:	b9 01       	movw	r22, r18
    3ac8:	84 2f       	mov	r24, r20
    3aca:	91 58       	subi	r25, 0x81	; 129
    3acc:	88 0f       	add	r24, r24
    3ace:	96 95       	lsr	r25
    3ad0:	87 95       	ror	r24
    3ad2:	08 95       	ret

00003ad4 <__fp_mpack>:
    3ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ad6:	31 f0       	breq	.+12     	; 0x3ae4 <__fp_mpack_finite+0xc>

00003ad8 <__fp_mpack_finite>:
    3ad8:	91 50       	subi	r25, 0x01	; 1
    3ada:	20 f4       	brcc	.+8      	; 0x3ae4 <__fp_mpack_finite+0xc>
    3adc:	87 95       	ror	r24
    3ade:	77 95       	ror	r23
    3ae0:	67 95       	ror	r22
    3ae2:	b7 95       	ror	r27
    3ae4:	88 0f       	add	r24, r24
    3ae6:	91 1d       	adc	r25, r1
    3ae8:	96 95       	lsr	r25
    3aea:	87 95       	ror	r24
    3aec:	97 f9       	bld	r25, 7
    3aee:	08 95       	ret

00003af0 <__fp_norm2>:
    3af0:	91 50       	subi	r25, 0x01	; 1
    3af2:	50 40       	sbci	r21, 0x00	; 0
    3af4:	66 0f       	add	r22, r22
    3af6:	77 1f       	adc	r23, r23
    3af8:	88 1f       	adc	r24, r24
    3afa:	d2 f7       	brpl	.-12     	; 0x3af0 <__fp_norm2>
    3afc:	08 95       	ret

00003afe <__divmodhi4>:
    3afe:	97 fb       	bst	r25, 7
    3b00:	07 2e       	mov	r0, r23
    3b02:	16 f4       	brtc	.+4      	; 0x3b08 <__divmodhi4+0xa>
    3b04:	00 94       	com	r0
    3b06:	07 d0       	rcall	.+14     	; 0x3b16 <__divmodhi4_neg1>
    3b08:	77 fd       	sbrc	r23, 7
    3b0a:	09 d0       	rcall	.+18     	; 0x3b1e <__divmodhi4_neg2>
    3b0c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    3b10:	07 fc       	sbrc	r0, 7
    3b12:	05 d0       	rcall	.+10     	; 0x3b1e <__divmodhi4_neg2>
    3b14:	3e f4       	brtc	.+14     	; 0x3b24 <__divmodhi4_exit>

00003b16 <__divmodhi4_neg1>:
    3b16:	90 95       	com	r25
    3b18:	81 95       	neg	r24
    3b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1c:	08 95       	ret

00003b1e <__divmodhi4_neg2>:
    3b1e:	70 95       	com	r23
    3b20:	61 95       	neg	r22
    3b22:	7f 4f       	sbci	r23, 0xFF	; 255

00003b24 <__divmodhi4_exit>:
    3b24:	08 95       	ret

00003b26 <__tablejump2__>:
    3b26:	ee 0f       	add	r30, r30
    3b28:	ff 1f       	adc	r31, r31
    3b2a:	05 90       	lpm	r0, Z+
    3b2c:	f4 91       	lpm	r31, Z
    3b2e:	e0 2d       	mov	r30, r0
    3b30:	09 94       	ijmp

00003b32 <__udivmodhi4>:
    3b32:	aa 1b       	sub	r26, r26
    3b34:	bb 1b       	sub	r27, r27
    3b36:	51 e1       	ldi	r21, 0x11	; 17
    3b38:	07 c0       	rjmp	.+14     	; 0x3b48 <__udivmodhi4_ep>

00003b3a <__udivmodhi4_loop>:
    3b3a:	aa 1f       	adc	r26, r26
    3b3c:	bb 1f       	adc	r27, r27
    3b3e:	a6 17       	cp	r26, r22
    3b40:	b7 07       	cpc	r27, r23
    3b42:	10 f0       	brcs	.+4      	; 0x3b48 <__udivmodhi4_ep>
    3b44:	a6 1b       	sub	r26, r22
    3b46:	b7 0b       	sbc	r27, r23

00003b48 <__udivmodhi4_ep>:
    3b48:	88 1f       	adc	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	5a 95       	dec	r21
    3b4e:	a9 f7       	brne	.-22     	; 0x3b3a <__udivmodhi4_loop>
    3b50:	80 95       	com	r24
    3b52:	90 95       	com	r25
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	08 95       	ret

00003b5a <__itoa_ncheck>:
    3b5a:	bb 27       	eor	r27, r27
    3b5c:	4a 30       	cpi	r20, 0x0A	; 10
    3b5e:	31 f4       	brne	.+12     	; 0x3b6c <__itoa_ncheck+0x12>
    3b60:	99 23       	and	r25, r25
    3b62:	22 f4       	brpl	.+8      	; 0x3b6c <__itoa_ncheck+0x12>
    3b64:	bd e2       	ldi	r27, 0x2D	; 45
    3b66:	90 95       	com	r25
    3b68:	81 95       	neg	r24
    3b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6c:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__utoa_common>

00003b70 <__utoa_ncheck>:
    3b70:	bb 27       	eor	r27, r27

00003b72 <__utoa_common>:
    3b72:	fb 01       	movw	r30, r22
    3b74:	55 27       	eor	r21, r21
    3b76:	aa 27       	eor	r26, r26
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	aa 1f       	adc	r26, r26
    3b7e:	a4 17       	cp	r26, r20
    3b80:	10 f0       	brcs	.+4      	; 0x3b86 <__utoa_common+0x14>
    3b82:	a4 1b       	sub	r26, r20
    3b84:	83 95       	inc	r24
    3b86:	50 51       	subi	r21, 0x10	; 16
    3b88:	b9 f7       	brne	.-18     	; 0x3b78 <__utoa_common+0x6>
    3b8a:	a0 5d       	subi	r26, 0xD0	; 208
    3b8c:	aa 33       	cpi	r26, 0x3A	; 58
    3b8e:	08 f0       	brcs	.+2      	; 0x3b92 <__utoa_common+0x20>
    3b90:	a9 5d       	subi	r26, 0xD9	; 217
    3b92:	a1 93       	st	Z+, r26
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	79 f7       	brne	.-34     	; 0x3b76 <__utoa_common+0x4>
    3b98:	b1 11       	cpse	r27, r1
    3b9a:	b1 93       	st	Z+, r27
    3b9c:	11 92       	st	Z+, r1
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <strrev>

00003ba4 <strrev>:
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	67 2f       	mov	r22, r23
    3baa:	71 91       	ld	r23, Z+
    3bac:	77 23       	and	r23, r23
    3bae:	e1 f7       	brne	.-8      	; 0x3ba8 <strrev+0x4>
    3bb0:	32 97       	sbiw	r30, 0x02	; 2
    3bb2:	04 c0       	rjmp	.+8      	; 0x3bbc <strrev+0x18>
    3bb4:	7c 91       	ld	r23, X
    3bb6:	6d 93       	st	X+, r22
    3bb8:	70 83       	st	Z, r23
    3bba:	62 91       	ld	r22, -Z
    3bbc:	ae 17       	cp	r26, r30
    3bbe:	bf 07       	cpc	r27, r31
    3bc0:	c8 f3       	brcs	.-14     	; 0x3bb4 <strrev+0x10>
    3bc2:	08 95       	ret

00003bc4 <_exit>:
    3bc4:	f8 94       	cli

00003bc6 <__stop_program>:
    3bc6:	ff cf       	rjmp	.-2      	; 0x3bc6 <__stop_program>

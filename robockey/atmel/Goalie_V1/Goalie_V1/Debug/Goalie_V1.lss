
Goalie_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000038ba  0000394e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800136  00800136  00003984  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000298  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035f6  00000000  00000000  00003c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d00  00000000  00000000  00007242  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012bd  00000000  00000000  00007f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000984  00000000  00000000  00009200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000096e  00000000  00000000  00009b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000402b  00000000  00000000  0000a4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  0000e51d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__ctors_end>
       4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
       8:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
       c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      10:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      14:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      18:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      1c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      20:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      24:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      28:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__vector_10>
      2c:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__vector_11>
      30:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      34:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      38:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      3c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      40:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      44:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      48:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      4c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      50:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      54:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      58:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      5c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      60:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      64:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      68:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      6c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      70:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      74:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_29>
      78:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      7c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      80:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      84:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      88:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      8c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      90:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      94:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      98:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      9c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      a0:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      a4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      a8:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      ac:	11 06       	cpc	r1, r17
      ae:	22 06       	cpc	r2, r18
      b0:	33 06       	cpc	r3, r19
      b2:	44 06       	cpc	r4, r20
      b4:	55 06       	cpc	r5, r21
      b6:	66 06       	cpc	r6, r22
      b8:	77 06       	cpc	r7, r23
      ba:	07 2c       	mov	r0, r7
      bc:	7a a5       	ldd	r23, Y+42	; 0x2a
      be:	ba 6c       	ori	r27, 0xCA	; 202
      c0:	c5 90       	lpm	r12, Z+
      c2:	da 3b       	cpi	r29, 0xBA	; 186
      c4:	93 65       	ori	r25, 0x53	; 83
      c6:	fc 8b       	std	Y+20, r31	; 0x14
      c8:	bc 53       	subi	r27, 0x3C	; 60
      ca:	f8 10       	cpse	r15, r8
      cc:	fd 3c       	cpi	r31, 0xCD	; 205
      ce:	56 92       	lac	Z, r5
      d0:	83 4d       	sbci	r24, 0xD3	; 211
      d2:	bd 87       	std	Y+13, r27	; 0x0d
      d4:	9d 3a       	cpi	r25, 0xAD	; 173
      d6:	b6 3d       	cpi	r27, 0xD6	; 214
      d8:	cb c9       	rjmp	.-3178   	; 0xfffff470 <__eeprom_end+0xff7ef470>
      da:	bf 5b       	subi	r27, 0xBF	; 191
      dc:	be 73       	andi	r27, 0x3E	; 62
      de:	da 0f       	add	r29, r26
      e0:	c9 3f       	cpi	r28, 0xF9	; 249

000000e2 <__trampolines_end>:
      e2:	44 6f       	ori	r20, 0xF4	; 244
      e4:	6e 65       	ori	r22, 0x5E	; 94
      e6:	20 0a       	sbc	r2, r16
	...

000000e9 <__c.2099>:
      e9:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

000000f9 <__c.2097>:
      f9:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

00000108 <__c.2066>:
     108:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000114 <__c.2064>:
     114:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000011f <__c.2060>:
     11f:	50 49 44 0a 00                                      PID..

00000124 <__c.2058>:
     124:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000130 <__c.2056>:
     130:	50 49 44 0a 00                                      PID..

00000135 <__c.2054>:
     135:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000140 <__c.2051>:
     140:	0a 00                                               ..

00000142 <__c.2049>:
     142:	2c 20 00                                            , .

00000145 <__c.2047>:
     145:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     155:	3a 20 00                                            : .

00000158 <__c.2043>:
     158:	0d 0a 00                                            ...

0000015b <__c.2041>:
     15b:	0d 0a 00                                            ...

0000015e <__c.2039>:
     15e:	50 68 6f 5b 36 5d 00                                Pho[6].

00000165 <__c.2037>:
     165:	0d 0a 00                                            ...

00000168 <__c.2035>:
     168:	50 68 6f 5b 35 5d 00                                Pho[5].

0000016f <__c.2033>:
     16f:	0d 0a 00                                            ...

00000172 <__c.2031>:
     172:	50 68 6f 5b 34 5d 00                                Pho[4].

00000179 <__c.2029>:
     179:	0d 0a 00                                            ...

0000017c <__c.2027>:
     17c:	50 68 6f 5b 33 5d 00                                Pho[3].

00000183 <__c.2025>:
     183:	0d 0a 00                                            ...

00000186 <__c.2023>:
     186:	50 68 6f 5b 32 5d 00                                Pho[2].

0000018d <__c.2021>:
     18d:	0d 0a 00                                            ...

00000190 <__c.2019>:
     190:	50 68 6f 5b 31 5d 00                                Pho[1].

00000197 <__c.2017>:
     197:	0d 0a 00                                            ...

0000019a <__c.2015>:
     19a:	50 68 6f 5b 30 5d 00                                Pho[0].

000001a1 <__c.2013>:
     1a1:	0d 0a 00                                            ...

000001a4 <__c.2059>:
     1a4:	0a 00                                               ..

000001a6 <__c.2057>:
     1a6:	2c 20 00                                            , .

000001a9 <__c.2055>:
     1a9:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

000001b2 <__c.2051>:
     1b2:	0a 00                                               ..

000001b4 <__c.2049>:
     1b4:	2c 20 00                                            , .

000001b7 <__c.2047>:
     1b7:	67 6f 61 6c 20 3d 20 00                             goal = .

000001bf <__c.2045>:
     1bf:	73 65 6e 74 20 6d 65 73 73 73 61 67 65 2e 0a 00     sent messsage...

000001cf <__c.2040>:
     1cf:	0a 00                                               ..

000001d1 <__c.2038>:
     1d1:	73 74 61 74 65 3a 20 00                             state: .

000001d9 <__c.2155>:
     1d9:	0a 00                                               ..

000001db <__c.2153>:
     1db:	64 69 73 74 3a 20 00                                dist: .

000001e2 <__c.2145>:
     1e2:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001ed <__c.2143>:
     1ed:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001f9 <__c.2141>:
     1f9:	0a 00                                               ..

000001fb <__c.2139>:
     1fb:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000205 <__c.2137>:
     205:	0a 00                                               ..

00000207 <__c.2135>:
     207:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000212 <__c.2127>:
     212:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000021d <__c.2125>:
     21d:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000229 <__c.2123>:
     229:	0a 00                                               ..

0000022b <__c.2121>:
     22b:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000235 <__c.2119>:
     235:	0a 00                                               ..

00000237 <__c.2117>:
     237:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000242 <__c.2109>:
     242:	0a 00                                               ..

00000244 <__c.2107>:
     244:	61 6c 70 68 61 3a 20 00                             alpha: .

0000024c <__c.2083>:
     24c:	0a 00                                               ..

0000024e <__c.2081>:
     24e:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000256 <__c.2079>:
     256:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000267 <__c.2077>:
     267:	0a 00                                               ..

00000269 <__c.2075>:
     269:	09 09 79 3a 00                                      ..y:.

0000026e <__c.2073>:
     26e:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

0000027a <__c.2043>:
     27a:	0a 00                                               ..

0000027c <__c.2041>:
     27c:	64 6d 61 78 3a 00                                   dmax:.

00000282 <descriptor_list>:
     282:	00 01 00 00 19 03 12 00 02 00 00 d6 02 43 00 03     .............C..
     292:	00 00 d2 02 04 01 03 09 04 be 02 12 02 03 09 04     ................
     2a2:	b6 02 06 03 03 09 04 ac 02 08                       ..........

000002ac <string3>:
     2ac:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000002b6 <string2>:
     2b6:	06 03 4d 00 32 00 00 00                             ..M.2...

000002be <string1>:
     2be:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     2ce:	65 00 00 00                                         e...

000002d2 <string0>:
     2d2:	04 03 09 04                                         ....

000002d6 <config1_descriptor>:
     2d6:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     2e6:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2f6:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     306:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     316:	40 00 00                                            @..

00000319 <device_descriptor>:
     319:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     329:	03 01                                               ..

0000032b <endpoint_config_table>:
     32b:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000336 <__ctors_end>:
     336:	11 24       	eor	r1, r1
     338:	1f be       	out	0x3f, r1	; 63
     33a:	cf ef       	ldi	r28, 0xFF	; 255
     33c:	da e0       	ldi	r29, 0x0A	; 10
     33e:	de bf       	out	0x3e, r29	; 62
     340:	cd bf       	out	0x3d, r28	; 61

00000342 <__do_copy_data>:
     342:	11 e0       	ldi	r17, 0x01	; 1
     344:	a0 e0       	ldi	r26, 0x00	; 0
     346:	b1 e0       	ldi	r27, 0x01	; 1
     348:	ea eb       	ldi	r30, 0xBA	; 186
     34a:	f8 e3       	ldi	r31, 0x38	; 56
     34c:	02 c0       	rjmp	.+4      	; 0x352 <__do_copy_data+0x10>
     34e:	05 90       	lpm	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	a6 33       	cpi	r26, 0x36	; 54
     354:	b1 07       	cpc	r27, r17
     356:	d9 f7       	brne	.-10     	; 0x34e <__do_copy_data+0xc>

00000358 <__do_clear_bss>:
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	a6 e3       	ldi	r26, 0x36	; 54
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <.do_clear_bss_start>

00000360 <.do_clear_bss_loop>:
     360:	1d 92       	st	X+, r1

00000362 <.do_clear_bss_start>:
     362:	ac 3a       	cpi	r26, 0xAC	; 172
     364:	b2 07       	cpc	r27, r18
     366:	e1 f7       	brne	.-8      	; 0x360 <.do_clear_bss_loop>
     368:	0e 94 26 07 	call	0xe4c	; 0xe4c <main>
     36c:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <_exit>

00000370 <__bad_interrupt>:
     370:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000374 <send_message>:
 */ 

#include "communication.h"


void send_message(int state, int num, char *buffer, float *c_wii){
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ea 01       	movw	r28, r20
     37e:	89 01       	movw	r16, r18
	switch(state){ 
     380:	03 97       	sbiw	r24, 0x03	; 3
     382:	b9 f5       	brne	.+110    	; 0x3f2 <send_message+0x7e>
		case 3:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xA9;
     384:	89 ea       	ldi	r24, 0xA9	; 169
     386:	88 83       	st	Y, r24
			buffer[1] = num;
     388:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     38a:	f9 01       	movw	r30, r18
     38c:	60 81       	ld	r22, Z
     38e:	71 81       	ldd	r23, Z+1	; 0x01
     390:	82 81       	ldd	r24, Z+2	; 0x02
     392:	93 81       	ldd	r25, Z+3	; 0x03
     394:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fixunssfsi>
     398:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     39a:	f8 01       	movw	r30, r16
     39c:	60 81       	ld	r22, Z
     39e:	71 81       	ldd	r23, Z+1	; 0x01
     3a0:	82 81       	ldd	r24, Z+2	; 0x02
     3a2:	93 81       	ldd	r25, Z+3	; 0x03
     3a4:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fixunssfsi>
     3a8:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     3aa:	f8 01       	movw	r30, r16
     3ac:	64 81       	ldd	r22, Z+4	; 0x04
     3ae:	75 81       	ldd	r23, Z+5	; 0x05
     3b0:	86 81       	ldd	r24, Z+6	; 0x06
     3b2:	97 81       	ldd	r25, Z+7	; 0x07
     3b4:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fixunssfsi>
     3b8:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     3ba:	f8 01       	movw	r30, r16
     3bc:	64 81       	ldd	r22, Z+4	; 0x04
     3be:	75 81       	ldd	r23, Z+5	; 0x05
     3c0:	86 81       	ldd	r24, Z+6	; 0x06
     3c2:	97 81       	ldd	r25, Z+7	; 0x07
     3c4:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fixunssfsi>
     3c8:	7d 83       	std	Y+5, r23	; 0x05
			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     3ca:	4a e0       	ldi	r20, 0x0A	; 10
     3cc:	be 01       	movw	r22, r28
     3ce:	8d e0       	ldi	r24, 0x0D	; 13
     3d0:	0e 94 66 14 	call	0x28cc	; 0x28cc <m_rf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d4:	83 ec       	ldi	r24, 0xC3	; 195
     3d6:	99 e0       	ldi	r25, 0x09	; 9
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <send_message+0x64>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <send_message+0x6a>
     3de:	00 00       	nop
			m_wait(10);
			m_rf_send(TXADDRESS2,buffer,PACKET_LENGTH);
     3e0:	4a e0       	ldi	r20, 0x0A	; 10
     3e2:	be 01       	movw	r22, r28
     3e4:	8e e0       	ldi	r24, 0x0E	; 14
     3e6:	0e 94 66 14 	call	0x28cc	; 0x28cc <m_rf_send>
			usb_tx_string("Done \n");
     3ea:	82 ee       	ldi	r24, 0xE2	; 226
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <init_ADC>:
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     400:	ac e7       	ldi	r26, 0x7C	; 124
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	8c 91       	ld	r24, X
     406:	8f 77       	andi	r24, 0x7F	; 127
     408:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     40a:	8c 91       	ld	r24, X
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     410:	ea e7       	ldi	r30, 0x7A	; 122
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	84 60       	ori	r24, 0x04	; 4
     418:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     41a:	80 81       	ld	r24, Z
     41c:	82 60       	ori	r24, 0x02	; 2
     41e:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     420:	80 81       	ld	r24, Z
     422:	81 60       	ori	r24, 0x01	; 1
     424:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     426:	ce e7       	ldi	r28, 0x7E	; 126
     428:	d0 e0       	ldi	r29, 0x00	; 0
     42a:	88 81       	ld	r24, Y
     42c:	81 60       	ori	r24, 0x01	; 1
     42e:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     430:	88 81       	ld	r24, Y
     432:	82 60       	ori	r24, 0x02	; 2
     434:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     436:	cd e7       	ldi	r28, 0x7D	; 125
     438:	d0 e0       	ldi	r29, 0x00	; 0
     43a:	88 81       	ld	r24, Y
     43c:	82 60       	ori	r24, 0x02	; 2
     43e:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     440:	88 81       	ld	r24, Y
     442:	84 60       	ori	r24, 0x04	; 4
     444:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     446:	88 81       	ld	r24, Y
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     44c:	88 81       	ld	r24, Y
     44e:	80 61       	ori	r24, 0x10	; 16
     450:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     452:	88 81       	ld	r24, Y
     454:	81 60       	ori	r24, 0x01	; 1
     456:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     458:	cb e7       	ldi	r28, 0x7B	; 123
     45a:	d0 e0       	ldi	r29, 0x00	; 0
     45c:	88 81       	ld	r24, Y
     45e:	8f 7d       	andi	r24, 0xDF	; 223
     460:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     462:	8c 91       	ld	r24, X
     464:	8b 7f       	andi	r24, 0xFB	; 251
     466:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     468:	8c 91       	ld	r24, X
     46a:	8d 7f       	andi	r24, 0xFD	; 253
     46c:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     46e:	8c 91       	ld	r24, X
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     474:	80 81       	ld	r24, Z
     476:	80 62       	ori	r24, 0x20	; 32
     478:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     47a:	80 81       	ld	r24, Z
     47c:	88 60       	ori	r24, 0x08	; 8
     47e:	80 83       	st	Z, r24
	sei();
     480:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     482:	80 81       	ld	r24, Z
     484:	80 68       	ori	r24, 0x80	; 128
     486:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     488:	80 81       	ld	r24, Z
     48a:	80 64       	ori	r24, 0x40	; 64
     48c:	80 83       	st	Z, r24
}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <PID_Pho>:
			break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     494:	8f 92       	push	r8
     496:	9f 92       	push	r9
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	6b 01       	movw	r12, r22
     4ae:	7c 01       	movw	r14, r24
     4b0:	49 01       	movw	r8, r18
     4b2:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     4b4:	c0 91 42 01 	lds	r28, 0x0142
     4b8:	d0 91 43 01 	lds	r29, 0x0143
     4bc:	80 91 46 01 	lds	r24, 0x0146
     4c0:	90 91 47 01 	lds	r25, 0x0147
     4c4:	c8 0f       	add	r28, r24
     4c6:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     4c8:	20 91 44 01 	lds	r18, 0x0144
     4cc:	30 91 45 01 	lds	r19, 0x0145
     4d0:	80 91 48 01 	lds	r24, 0x0148
     4d4:	90 91 49 01 	lds	r25, 0x0149
     4d8:	82 0f       	add	r24, r18
     4da:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     4dc:	c8 1b       	sub	r28, r24
     4de:	d9 0b       	sbc	r29, r25
     4e0:	d0 93 a9 01 	sts	0x01A9, r29
     4e4:	c0 93 a8 01 	sts	0x01A8, r28
	diff_Pho = input - input_last;
     4e8:	80 91 3e 01 	lds	r24, 0x013E
     4ec:	90 91 3f 01 	lds	r25, 0x013F
     4f0:	8e 01       	movw	r16, r28
     4f2:	08 1b       	sub	r16, r24
     4f4:	19 0b       	sbc	r17, r25
     4f6:	10 93 39 01 	sts	0x0139, r17
     4fa:	00 93 38 01 	sts	0x0138, r16
	sum_Pho = sum_Pho + input;
     4fe:	80 91 3c 01 	lds	r24, 0x013C
     502:	90 91 3d 01 	lds	r25, 0x013D
     506:	8c 0f       	add	r24, r28
     508:	9d 1f       	adc	r25, r29
     50a:	90 93 3d 01 	sts	0x013D, r25
     50e:	80 93 3c 01 	sts	0x013C, r24
	output = Kp * input + Kd * diff_Pho;
     512:	be 01       	movw	r22, r28
     514:	88 27       	eor	r24, r24
     516:	77 fd       	sbrc	r23, 7
     518:	80 95       	com	r24
     51a:	98 2f       	mov	r25, r24
     51c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
     52c:	b8 01       	movw	r22, r16
     52e:	88 27       	eor	r24, r24
     530:	77 fd       	sbrc	r23, 7
     532:	80 95       	com	r24
     534:	98 2f       	mov	r25, r24
     536:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
     53a:	a5 01       	movw	r20, r10
     53c:	94 01       	movw	r18, r8
     53e:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
     542:	9b 01       	movw	r18, r22
     544:	ac 01       	movw	r20, r24
     546:	c7 01       	movw	r24, r14
     548:	b6 01       	movw	r22, r12
     54a:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
     54e:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
     552:	70 93 a7 01 	sts	0x01A7, r23
     556:	60 93 a6 01 	sts	0x01A6, r22
	
	input_last = input;
     55a:	d0 93 3f 01 	sts	0x013F, r29
     55e:	c0 93 3e 01 	sts	0x013E, r28
	
	if(output>0){
     562:	16 16       	cp	r1, r22
     564:	17 06       	cpc	r1, r23
     566:	74 f5       	brge	.+92     	; 0x5c4 <PID_Pho+0x130>
		OCR1C = full_speed - abs(output);
     568:	9b 01       	movw	r18, r22
     56a:	77 23       	and	r23, r23
     56c:	24 f4       	brge	.+8      	; 0x576 <PID_Pho+0xe2>
     56e:	22 27       	eor	r18, r18
     570:	33 27       	eor	r19, r19
     572:	26 1b       	sub	r18, r22
     574:	37 0b       	sbc	r19, r23
     576:	8a e8       	ldi	r24, 0x8A	; 138
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	82 1b       	sub	r24, r18
     57c:	93 0b       	sbc	r25, r19
     57e:	90 93 8d 00 	sts	0x008D, r25
     582:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     586:	20 91 00 01 	lds	r18, 0x0100
     58a:	30 91 01 01 	lds	r19, 0x0101
     58e:	80 91 a6 01 	lds	r24, 0x01A6
     592:	90 91 a7 01 	lds	r25, 0x01A7
     596:	99 23       	and	r25, r25
     598:	1c f4       	brge	.+6      	; 0x5a0 <PID_Pho+0x10c>
     59a:	91 95       	neg	r25
     59c:	81 95       	neg	r24
     59e:	91 09       	sbc	r25, r1
     5a0:	28 17       	cp	r18, r24
     5a2:	39 07       	cpc	r19, r25
     5a4:	44 f4       	brge	.+16     	; 0x5b6 <PID_Pho+0x122>
			OCR1C = full_speed - speed_diff_Pho;
     5a6:	8a e8       	ldi	r24, 0x8A	; 138
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	82 1b       	sub	r24, r18
     5ac:	93 0b       	sbc	r25, r19
     5ae:	90 93 8d 00 	sts	0x008D, r25
     5b2:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     5b6:	8a e8       	ldi	r24, 0x8A	; 138
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	90 93 8b 00 	sts	0x008B, r25
     5be:	80 93 8a 00 	sts	0x008A, r24
     5c2:	2d c0       	rjmp	.+90     	; 0x61e <PID_Pho+0x18a>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     5c4:	9b 01       	movw	r18, r22
     5c6:	77 23       	and	r23, r23
     5c8:	24 f4       	brge	.+8      	; 0x5d2 <PID_Pho+0x13e>
     5ca:	22 27       	eor	r18, r18
     5cc:	33 27       	eor	r19, r19
     5ce:	26 1b       	sub	r18, r22
     5d0:	37 0b       	sbc	r19, r23
     5d2:	8a e8       	ldi	r24, 0x8A	; 138
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	82 1b       	sub	r24, r18
     5d8:	93 0b       	sbc	r25, r19
     5da:	90 93 8b 00 	sts	0x008B, r25
     5de:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     5e2:	20 91 00 01 	lds	r18, 0x0100
     5e6:	30 91 01 01 	lds	r19, 0x0101
     5ea:	80 91 a6 01 	lds	r24, 0x01A6
     5ee:	90 91 a7 01 	lds	r25, 0x01A7
     5f2:	99 23       	and	r25, r25
     5f4:	1c f4       	brge	.+6      	; 0x5fc <PID_Pho+0x168>
     5f6:	91 95       	neg	r25
     5f8:	81 95       	neg	r24
     5fa:	91 09       	sbc	r25, r1
     5fc:	28 17       	cp	r18, r24
     5fe:	39 07       	cpc	r19, r25
     600:	44 f4       	brge	.+16     	; 0x612 <PID_Pho+0x17e>
			OCR1B = full_speed - speed_diff_Pho;
     602:	8a e8       	ldi	r24, 0x8A	; 138
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	82 1b       	sub	r24, r18
     608:	93 0b       	sbc	r25, r19
     60a:	90 93 8b 00 	sts	0x008B, r25
     60e:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     612:	8a e8       	ldi	r24, 0x8A	; 138
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	90 93 8d 00 	sts	0x008D, r25
     61a:	80 93 8c 00 	sts	0x008C, r24
	}
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	9f 90       	pop	r9
     634:	8f 90       	pop	r8
     636:	08 95       	ret

00000638 <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     638:	8f 92       	push	r8
     63a:	9f 92       	push	r9
     63c:	af 92       	push	r10
     63e:	bf 92       	push	r11
     640:	cf 92       	push	r12
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	6b 01       	movw	r12, r22
     652:	7c 01       	movw	r14, r24
     654:	49 01       	movw	r8, r18
     656:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     658:	c0 91 42 01 	lds	r28, 0x0142
     65c:	d0 91 43 01 	lds	r29, 0x0143
     660:	80 91 46 01 	lds	r24, 0x0146
     664:	90 91 47 01 	lds	r25, 0x0147
     668:	c8 0f       	add	r28, r24
     66a:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     66c:	20 91 44 01 	lds	r18, 0x0144
     670:	30 91 45 01 	lds	r19, 0x0145
     674:	80 91 48 01 	lds	r24, 0x0148
     678:	90 91 49 01 	lds	r25, 0x0149
     67c:	82 0f       	add	r24, r18
     67e:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     680:	c8 1b       	sub	r28, r24
     682:	d9 0b       	sbc	r29, r25
     684:	d0 93 a9 01 	sts	0x01A9, r29
     688:	c0 93 a8 01 	sts	0x01A8, r28
	diff_stalk = input - input_last;
     68c:	80 91 3e 01 	lds	r24, 0x013E
     690:	90 91 3f 01 	lds	r25, 0x013F
     694:	8e 01       	movw	r16, r28
     696:	08 1b       	sub	r16, r24
     698:	19 0b       	sbc	r17, r25
     69a:	10 93 37 01 	sts	0x0137, r17
     69e:	00 93 36 01 	sts	0x0136, r16
	sum_stalk = sum_stalk + input;
     6a2:	80 91 3a 01 	lds	r24, 0x013A
     6a6:	90 91 3b 01 	lds	r25, 0x013B
     6aa:	8c 0f       	add	r24, r28
     6ac:	9d 1f       	adc	r25, r29
     6ae:	90 93 3b 01 	sts	0x013B, r25
     6b2:	80 93 3a 01 	sts	0x013A, r24
	output = Kp * input + Kd * diff_stalk;
     6b6:	be 01       	movw	r22, r28
     6b8:	88 27       	eor	r24, r24
     6ba:	77 fd       	sbrc	r23, 7
     6bc:	80 95       	com	r24
     6be:	98 2f       	mov	r25, r24
     6c0:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
     6c4:	a7 01       	movw	r20, r14
     6c6:	96 01       	movw	r18, r12
     6c8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
     6cc:	6b 01       	movw	r12, r22
     6ce:	7c 01       	movw	r14, r24
     6d0:	b8 01       	movw	r22, r16
     6d2:	88 27       	eor	r24, r24
     6d4:	77 fd       	sbrc	r23, 7
     6d6:	80 95       	com	r24
     6d8:	98 2f       	mov	r25, r24
     6da:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
     6de:	a5 01       	movw	r20, r10
     6e0:	94 01       	movw	r18, r8
     6e2:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	c7 01       	movw	r24, r14
     6ec:	b6 01       	movw	r22, r12
     6ee:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
     6f2:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
     6f6:	70 93 a7 01 	sts	0x01A7, r23
     6fa:	60 93 a6 01 	sts	0x01A6, r22
	
	input_last = input;
     6fe:	d0 93 3f 01 	sts	0x013F, r29
     702:	c0 93 3e 01 	sts	0x013E, r28
	
	if(abs(output) >= full_speed_stalk){
     706:	9b 01       	movw	r18, r22
     708:	77 23       	and	r23, r23
     70a:	24 f4       	brge	.+8      	; 0x714 <PID_stalk+0xdc>
     70c:	22 27       	eor	r18, r18
     70e:	33 27       	eor	r19, r19
     710:	26 1b       	sub	r18, r22
     712:	37 0b       	sbc	r19, r23
     714:	24 3f       	cpi	r18, 0xF4	; 244
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	38 07       	cpc	r19, r24
     71a:	5c f0       	brlt	.+22     	; 0x732 <PID_stalk+0xfa>
		OCR1C = full_speed_stalk;
     71c:	84 ef       	ldi	r24, 0xF4	; 244
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	90 93 8d 00 	sts	0x008D, r25
     724:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     728:	90 93 8b 00 	sts	0x008B, r25
     72c:	80 93 8a 00 	sts	0x008A, r24
     730:	11 c0       	rjmp	.+34     	; 0x754 <PID_stalk+0x11c>
	}
	else{
		OCR1C = abs(output);
     732:	30 93 8d 00 	sts	0x008D, r19
     736:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     73a:	80 91 a6 01 	lds	r24, 0x01A6
     73e:	90 91 a7 01 	lds	r25, 0x01A7
     742:	99 23       	and	r25, r25
     744:	1c f4       	brge	.+6      	; 0x74c <PID_stalk+0x114>
     746:	91 95       	neg	r25
     748:	81 95       	neg	r24
     74a:	91 09       	sbc	r25, r1
     74c:	90 93 8b 00 	sts	0x008B, r25
     750:	80 93 8a 00 	sts	0x008A, r24
	}
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	08 95       	ret

0000076e <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	5c 01       	movw	r10, r24
	m_usb_tx_string("\r\n");
     78c:	81 ea       	ldi	r24, 0xA1	; 161
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("Pho[0]");
     794:	8a e9       	ldi	r24, 0x9A	; 154
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(Pho[0]);
     79c:	0f 2e       	mov	r0, r31
     79e:	f2 e4       	ldi	r31, 0x42	; 66
     7a0:	8f 2e       	mov	r8, r31
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	9f 2e       	mov	r9, r31
     7a6:	f0 2d       	mov	r31, r0
     7a8:	f4 01       	movw	r30, r8
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7b2:	87 e9       	ldi	r24, 0x97	; 151
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("Pho[1]");
     7ba:	80 e9       	ldi	r24, 0x90	; 144
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(Pho[1]);
     7c2:	04 e4       	ldi	r16, 0x44	; 68
     7c4:	11 e0       	ldi	r17, 0x01	; 1
     7c6:	f8 01       	movw	r30, r16
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7d0:	8d e8       	ldi	r24, 0x8D	; 141
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("Pho[2]");
     7d8:	86 e8       	ldi	r24, 0x86	; 134
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(Pho[2]);
     7e0:	0f 2e       	mov	r0, r31
     7e2:	f6 e4       	ldi	r31, 0x46	; 70
     7e4:	cf 2e       	mov	r12, r31
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	df 2e       	mov	r13, r31
     7ea:	f0 2d       	mov	r31, r0
     7ec:	f6 01       	movw	r30, r12
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7f6:	83 e8       	ldi	r24, 0x83	; 131
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("Pho[3]");
     7fe:	8c e7       	ldi	r24, 0x7C	; 124
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(Pho[3]);
     806:	c8 e4       	ldi	r28, 0x48	; 72
     808:	d1 e0       	ldi	r29, 0x01	; 1
     80a:	88 81       	ld	r24, Y
     80c:	99 81       	ldd	r25, Y+1	; 0x01
     80e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     812:	89 e7       	ldi	r24, 0x79	; 121
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("Pho[4]");
     81a:	82 e7       	ldi	r24, 0x72	; 114
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(Pho[4]);
     822:	0f 2e       	mov	r0, r31
     824:	fa e4       	ldi	r31, 0x4A	; 74
     826:	ef 2e       	mov	r14, r31
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	ff 2e       	mov	r15, r31
     82c:	f0 2d       	mov	r31, r0
     82e:	f7 01       	movw	r30, r14
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     838:	8f e6       	ldi	r24, 0x6F	; 111
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("Pho[5]");
     840:	88 e6       	ldi	r24, 0x68	; 104
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(Pho[5]);
     848:	0f 2e       	mov	r0, r31
     84a:	fc e4       	ldi	r31, 0x4C	; 76
     84c:	6f 2e       	mov	r6, r31
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	7f 2e       	mov	r7, r31
     852:	f0 2d       	mov	r31, r0
     854:	f3 01       	movw	r30, r6
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     85e:	85 e6       	ldi	r24, 0x65	; 101
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("Pho[6]");
     866:	8e e5       	ldi	r24, 0x5E	; 94
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(Pho[6]);
     86e:	80 91 4e 01 	lds	r24, 0x014E
     872:	90 91 4f 01 	lds	r25, 0x014F
     876:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     87a:	8b e5       	ldi	r24, 0x5B	; 91
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_string("\r\n");
     882:	88 e5       	ldi	r24, 0x58	; 88
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     88a:	f4 01       	movw	r30, r8
     88c:	20 81       	ld	r18, Z
     88e:	31 81       	ldd	r19, Z+1	; 0x01
     890:	f6 01       	movw	r30, r12
     892:	80 81       	ld	r24, Z
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	82 0f       	add	r24, r18
     898:	93 1f       	adc	r25, r19
     89a:	f7 01       	movw	r30, r14
     89c:	20 81       	ld	r18, Z
     89e:	31 81       	ldd	r19, Z+1	; 0x01
     8a0:	82 0f       	add	r24, r18
     8a2:	93 1f       	adc	r25, r19
     8a4:	23 e0       	ldi	r18, 0x03	; 3
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	b9 01       	movw	r22, r18
     8aa:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__divmodhi4>
     8ae:	7b 01       	movw	r14, r22
     8b0:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     8b2:	f8 01       	movw	r30, r16
     8b4:	40 81       	ld	r20, Z
     8b6:	51 81       	ldd	r21, Z+1	; 0x01
     8b8:	88 81       	ld	r24, Y
     8ba:	99 81       	ldd	r25, Y+1	; 0x01
     8bc:	84 0f       	add	r24, r20
     8be:	95 1f       	adc	r25, r21
     8c0:	f3 01       	movw	r30, r6
     8c2:	40 81       	ld	r20, Z
     8c4:	51 81       	ldd	r21, Z+1	; 0x01
     8c6:	84 0f       	add	r24, r20
     8c8:	95 1f       	adc	r25, r21
     8ca:	b9 01       	movw	r22, r18
     8cc:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__divmodhi4>
     8d0:	eb 01       	movw	r28, r22
     8d2:	8b 01       	movw	r16, r22
	
	m_usb_tx_string("mean024, mean135: ");
     8d4:	85 e4       	ldi	r24, 0x45	; 69
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(mean024);
     8dc:	c7 01       	movw	r24, r14
     8de:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string(", ");
     8e2:	82 e4       	ldi	r24, 0x42	; 66
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(mean135);
     8ea:	ce 01       	movw	r24, r28
     8ec:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
     8f0:	80 e4       	ldi	r24, 0x40	; 64
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	switch(state){
     8f8:	f2 e0       	ldi	r31, 0x02	; 2
     8fa:	af 16       	cp	r10, r31
     8fc:	b1 04       	cpc	r11, r1
     8fe:	31 f0       	breq	.+12     	; 0x90c <findPuck+0x19e>
     900:	45 e0       	ldi	r20, 0x05	; 5
     902:	a4 16       	cp	r10, r20
     904:	b1 04       	cpc	r11, r1
     906:	09 f4       	brne	.+2      	; 0x90a <findPuck+0x19c>
     908:	bb c0       	rjmp	.+374    	; 0xa80 <findPuck+0x312>
     90a:	0e c1       	rjmp	.+540    	; 0xb28 <__stack+0x29>
		case 2:
			if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     90c:	c7 01       	movw	r24, r14
     90e:	8c 1b       	sub	r24, r28
     910:	9d 0b       	sbc	r25, r29
     912:	c3 97       	sbiw	r24, 0x33	; 51
     914:	84 f4       	brge	.+32     	; 0x936 <findPuck+0x1c8>
     916:	ce 15       	cp	r28, r14
     918:	df 05       	cpc	r29, r15
     91a:	0c f0       	brlt	.+2      	; 0x91e <findPuck+0x1b0>
     91c:	50 c0       	rjmp	.+160    	; 0x9be <findPuck+0x250>
     91e:	20 91 4a 01 	lds	r18, 0x014A
     922:	30 91 4b 01 	lds	r19, 0x014B
     926:	80 91 46 01 	lds	r24, 0x0146
     92a:	90 91 47 01 	lds	r25, 0x0147
     92e:	82 17       	cp	r24, r18
     930:	93 07       	cpc	r25, r19
     932:	0c f0       	brlt	.+2      	; 0x936 <findPuck+0x1c8>
     934:	44 c0       	rjmp	.+136    	; 0x9be <findPuck+0x250>
				m_usb_tx_string("turn left\n");
     936:	85 e3       	ldi	r24, 0x35	; 53
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
				if(mean024 > revThres){
     93e:	51 eb       	ldi	r21, 0xB1	; 177
     940:	c5 16       	cp	r12, r21
     942:	54 e0       	ldi	r21, 0x04	; 4
     944:	d5 06       	cpc	r13, r21
     946:	6c f0       	brlt	.+26     	; 0x962 <findPuck+0x1f4>
					set(PORTB, 0);
     948:	28 9a       	sbi	0x05, 0	; 5
					clear(PORTB, 1);
     94a:	29 98       	cbi	0x05, 1	; 5
					OCR1C = full_speed;
     94c:	8a e8       	ldi	r24, 0x8A	; 138
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	90 93 8d 00 	sts	0x008D, r25
     954:	80 93 8c 00 	sts	0x008C, r24
					OCR1B = full_speed;
     958:	90 93 8b 00 	sts	0x008B, r25
     95c:	80 93 8a 00 	sts	0x008A, r24
     960:	e3 c0       	rjmp	.+454    	; 0xb28 <__stack+0x29>
				}
				else{
					set(PORTB, 0);
     962:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     964:	29 9a       	sbi	0x05, 1	; 5
					OCR1C = full_speed - speed_diff_Pho;
     966:	8a e8       	ldi	r24, 0x8A	; 138
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	20 91 00 01 	lds	r18, 0x0100
     96e:	30 91 01 01 	lds	r19, 0x0101
     972:	fc 01       	movw	r30, r24
     974:	e2 1b       	sub	r30, r18
     976:	f3 0b       	sbc	r31, r19
     978:	f0 93 8d 00 	sts	0x008D, r31
     97c:	e0 93 8c 00 	sts	0x008C, r30
					OCR1B = full_speed;
     980:	90 93 8b 00 	sts	0x008B, r25
     984:	80 93 8a 00 	sts	0x008A, r24
					if(Pho[2]>Pho[4]){
     988:	20 91 46 01 	lds	r18, 0x0146
     98c:	30 91 47 01 	lds	r19, 0x0147
     990:	80 91 4a 01 	lds	r24, 0x014A
     994:	90 91 4b 01 	lds	r25, 0x014B
     998:	82 17       	cp	r24, r18
     99a:	93 07       	cpc	r25, r19
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <findPuck+0x232>
     99e:	c4 c0       	rjmp	.+392    	; 0xb28 <__stack+0x29>
						m_usb_tx_string("PID\n");
     9a0:	80 e3       	ldi	r24, 0x30	; 48
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e7       	ldi	r20, 0x70	; 112
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	9f e3       	ldi	r25, 0x3F	; 63
     9b8:	0e 94 4a 02 	call	0x494	; 0x494 <PID_Pho>
     9bc:	b5 c0       	rjmp	.+362    	; 0xb28 <__stack+0x29>
					}
				}
			}
		
			else {
				if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     9be:	ce 19       	sub	r28, r14
     9c0:	df 09       	sbc	r29, r15
     9c2:	e3 97       	sbiw	r28, 0x33	; 51
     9c4:	84 f4       	brge	.+32     	; 0x9e6 <findPuck+0x278>
     9c6:	c0 16       	cp	r12, r16
     9c8:	d1 06       	cpc	r13, r17
     9ca:	0c f0       	brlt	.+2      	; 0x9ce <findPuck+0x260>
     9cc:	4e c0       	rjmp	.+156    	; 0xa6a <findPuck+0x2fc>
     9ce:	20 91 4c 01 	lds	r18, 0x014C
     9d2:	30 91 4d 01 	lds	r19, 0x014D
     9d6:	80 91 48 01 	lds	r24, 0x0148
     9da:	90 91 49 01 	lds	r25, 0x0149
     9de:	82 17       	cp	r24, r18
     9e0:	93 07       	cpc	r25, r19
     9e2:	0c f0       	brlt	.+2      	; 0x9e6 <findPuck+0x278>
     9e4:	42 c0       	rjmp	.+132    	; 0xa6a <findPuck+0x2fc>
					m_usb_tx_string("turn right\n");
     9e6:	84 e2       	ldi	r24, 0x24	; 36
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
					if(mean135 > revThres){
     9ee:	01 3b       	cpi	r16, 0xB1	; 177
     9f0:	14 40       	sbci	r17, 0x04	; 4
     9f2:	6c f0       	brlt	.+26     	; 0xa0e <findPuck+0x2a0>
						set(PORTB, 1);
     9f4:	29 9a       	sbi	0x05, 1	; 5
						clear(PORTB, 0);
     9f6:	28 98       	cbi	0x05, 0	; 5
						OCR1B = full_speed;
     9f8:	8a e8       	ldi	r24, 0x8A	; 138
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	90 93 8b 00 	sts	0x008B, r25
     a00:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed;
     a04:	90 93 8d 00 	sts	0x008D, r25
     a08:	80 93 8c 00 	sts	0x008C, r24
     a0c:	8d c0       	rjmp	.+282    	; 0xb28 <__stack+0x29>
					}
					else{
						set(PORTB, 0);
     a0e:	28 9a       	sbi	0x05, 0	; 5
						set(PORTB, 1);
     a10:	29 9a       	sbi	0x05, 1	; 5
						OCR1B = full_speed - speed_diff_Pho;
     a12:	8a e8       	ldi	r24, 0x8A	; 138
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	20 91 00 01 	lds	r18, 0x0100
     a1a:	30 91 01 01 	lds	r19, 0x0101
     a1e:	ac 01       	movw	r20, r24
     a20:	42 1b       	sub	r20, r18
     a22:	53 0b       	sbc	r21, r19
     a24:	50 93 8b 00 	sts	0x008B, r21
     a28:	40 93 8a 00 	sts	0x008A, r20
						OCR1C = full_speed;
     a2c:	90 93 8d 00 	sts	0x008D, r25
     a30:	80 93 8c 00 	sts	0x008C, r24
						if(Pho[3]>Pho[5]){
     a34:	20 91 48 01 	lds	r18, 0x0148
     a38:	30 91 49 01 	lds	r19, 0x0149
     a3c:	80 91 4c 01 	lds	r24, 0x014C
     a40:	90 91 4d 01 	lds	r25, 0x014D
     a44:	82 17       	cp	r24, r18
     a46:	93 07       	cpc	r25, r19
     a48:	0c f0       	brlt	.+2      	; 0xa4c <findPuck+0x2de>
     a4a:	6e c0       	rjmp	.+220    	; 0xb28 <__stack+0x29>
							m_usb_tx_string("PID\n");
     a4c:	8f e1       	ldi	r24, 0x1F	; 31
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
							PID_Pho(Kp_Pho, Kd_Pho);
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e7       	ldi	r20, 0x70	; 112
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	9f e3       	ldi	r25, 0x3F	; 63
     a64:	0e 94 4a 02 	call	0x494	; 0x494 <PID_Pho>
     a68:	5f c0       	rjmp	.+190    	; 0xb28 <__stack+0x29>
						}
					}
				}
				else{
					PID_Pho(2*Kp_Pho, Kd_Pho);
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	40 e7       	ldi	r20, 0x70	; 112
     a70:	51 e4       	ldi	r21, 0x41	; 65
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e8       	ldi	r24, 0x80	; 128
     a78:	9f e3       	ldi	r25, 0x3F	; 63
     a7a:	0e 94 4a 02 	call	0x494	; 0x494 <PID_Pho>
     a7e:	54 c0       	rjmp	.+168    	; 0xb28 <__stack+0x29>
				}
			}
			break;
		case 5:
			if(mean024 - mean135 > strThres){
     a80:	c7 01       	movw	r24, r14
     a82:	8c 1b       	sub	r24, r28
     a84:	9d 0b       	sbc	r25, r29
     a86:	c3 97       	sbiw	r24, 0x33	; 51
     a88:	34 f1       	brlt	.+76     	; 0xad6 <findPuck+0x368>
				m_usb_tx_string("turn left\n");
     a8a:	84 e1       	ldi	r24, 0x14	; 20
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
				set(PORTB, 0);
     a92:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
     a94:	29 98       	cbi	0x05, 1	; 5
				if (Pho[2] > Pho[4]){
     a96:	20 91 46 01 	lds	r18, 0x0146
     a9a:	30 91 47 01 	lds	r19, 0x0147
     a9e:	80 91 4a 01 	lds	r24, 0x014A
     aa2:	90 91 4b 01 	lds	r25, 0x014B
     aa6:	82 17       	cp	r24, r18
     aa8:	93 07       	cpc	r25, r19
     aaa:	54 f4       	brge	.+20     	; 0xac0 <findPuck+0x352>
					PID_stalk(Kp_stalk, Kd_stalk); 
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	a9 01       	movw	r20, r18
     ab2:	63 e3       	ldi	r22, 0x33	; 51
     ab4:	73 e3       	ldi	r23, 0x33	; 51
     ab6:	83 e3       	ldi	r24, 0x33	; 51
     ab8:	9f e3       	ldi	r25, 0x3F	; 63
     aba:	0e 94 1c 03 	call	0x638	; 0x638 <PID_stalk>
     abe:	34 c0       	rjmp	.+104    	; 0xb28 <__stack+0x29>
				}
				else{
					OCR1B = full_speed_stalk;
     ac0:	84 ef       	ldi	r24, 0xF4	; 244
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	90 93 8b 00 	sts	0x008B, r25
     ac8:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
     acc:	90 93 8d 00 	sts	0x008D, r25
     ad0:	80 93 8c 00 	sts	0x008C, r24
     ad4:	29 c0       	rjmp	.+82     	; 0xb28 <__stack+0x29>
				}
			}
			else{
				if(mean135 - mean024 > strThres){
     ad6:	ce 19       	sub	r28, r14
     ad8:	df 09       	sbc	r29, r15
     ada:	e3 97       	sbiw	r28, 0x33	; 51
     adc:	2c f1       	brlt	.+74     	; 0xb28 <__stack+0x29>
					m_usb_tx_string("turn right\n");
     ade:	88 e0       	ldi	r24, 0x08	; 8
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
					clear(PORTB, 0);
     ae6:	28 98       	cbi	0x05, 0	; 5
					set(PORTB, 1);
     ae8:	29 9a       	sbi	0x05, 1	; 5
					if (Pho[3] > Pho[5]){
     aea:	20 91 48 01 	lds	r18, 0x0148
     aee:	30 91 49 01 	lds	r19, 0x0149
     af2:	80 91 4c 01 	lds	r24, 0x014C
     af6:	90 91 4d 01 	lds	r25, 0x014D
     afa:	82 17       	cp	r24, r18
     afc:	93 07       	cpc	r25, r19
     afe:	54 f4       	brge	.+20     	; 0xb14 <__stack+0x15>
						PID_stalk(Kp_stalk, Kd_stalk);
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	a9 01       	movw	r20, r18
     b06:	63 e3       	ldi	r22, 0x33	; 51
     b08:	73 e3       	ldi	r23, 0x33	; 51
     b0a:	83 e3       	ldi	r24, 0x33	; 51
     b0c:	9f e3       	ldi	r25, 0x3F	; 63
     b0e:	0e 94 1c 03 	call	0x638	; 0x638 <PID_stalk>
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <__stack+0x29>
					}
					else{
						OCR1B = full_speed_stalk;
     b14:	84 ef       	ldi	r24, 0xF4	; 244
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	90 93 8b 00 	sts	0x008B, r25
     b1c:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed_stalk;
     b20:	90 93 8d 00 	sts	0x008D, r25
     b24:	80 93 8c 00 	sts	0x008C, r24
			break;
		default:
			break;
	}
	
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	7f 90       	pop	r7
     b42:	6f 90       	pop	r6
     b44:	08 95       	ret

00000b46 <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	2f 93       	push	r18
     b62:	3f 93       	push	r19
     b64:	4f 93       	push	r20
     b66:	5f 93       	push	r21
     b68:	6f 93       	push	r22
     b6a:	7f 93       	push	r23
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
     b70:	af 93       	push	r26
     b72:	bf 93       	push	r27
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ef 93       	push	r30
     b7a:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     b7c:	c0 91 40 01 	lds	r28, 0x0140
     b80:	d0 91 41 01 	lds	r29, 0x0141
     b84:	a0 90 78 00 	lds	r10, 0x0078
     b88:	b0 90 79 00 	lds	r11, 0x0079
     b8c:	8e 01       	movw	r16, r28
     b8e:	00 0f       	add	r16, r16
     b90:	11 1f       	adc	r17, r17
     b92:	0e 5b       	subi	r16, 0xBE	; 190
     b94:	1e 4f       	sbci	r17, 0xFE	; 254
     b96:	f8 01       	movw	r30, r16
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	88 27       	eor	r24, r24
     b9e:	77 fd       	sbrc	r23, 7
     ba0:	80 95       	com	r24
     ba2:	98 2f       	mov	r25, r24
     ba4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
     ba8:	2d ec       	ldi	r18, 0xCD	; 205
     baa:	3c ec       	ldi	r19, 0xCC	; 204
     bac:	4c e4       	ldi	r20, 0x4C	; 76
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
     bb8:	b5 01       	movw	r22, r10
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
     bc2:	2c ec       	ldi	r18, 0xCC	; 204
     bc4:	3c ec       	ldi	r19, 0xCC	; 204
     bc6:	4c e4       	ldi	r20, 0x4C	; 76
     bc8:	5e e3       	ldi	r21, 0x3E	; 62
     bca:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c7 01       	movw	r24, r14
     bd4:	b6 01       	movw	r22, r12
     bd6:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
     bda:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
     bde:	f8 01       	movw	r30, r16
     be0:	71 83       	std	Z+1, r23	; 0x01
     be2:	60 83       	st	Z, r22
	
	i = i + 1;
     be4:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     be6:	c8 30       	cpi	r28, 0x08	; 8
     be8:	d1 05       	cpc	r29, r1
     bea:	2c f4       	brge	.+10     	; 0xbf6 <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     bec:	d0 93 41 01 	sts	0x0141, r29
     bf0:	c0 93 40 01 	sts	0x0140, r28
     bf4:	04 c0       	rjmp	.+8      	; 0xbfe <__vector_29+0xb8>
	if(i > 7){
		i = 0;
     bf6:	10 92 41 01 	sts	0x0141, r1
     bfa:	10 92 40 01 	sts	0x0140, r1
	}
	
	clear(ADCSRA, ADEN);
     bfe:	ea e7       	ldi	r30, 0x7A	; 122
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	8f 77       	andi	r24, 0x7F	; 127
     c06:	80 83       	st	Z, r24
	switch(i){
     c08:	80 91 40 01 	lds	r24, 0x0140
     c0c:	90 91 41 01 	lds	r25, 0x0141
     c10:	87 30       	cpi	r24, 0x07	; 7
     c12:	91 05       	cpc	r25, r1
     c14:	08 f0       	brcs	.+2      	; 0xc18 <__vector_29+0xd2>
     c16:	7b c0       	rjmp	.+246    	; 0xd0e <__vector_29+0x1c8>
     c18:	fc 01       	movw	r30, r24
     c1a:	ea 5a       	subi	r30, 0xAA	; 170
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     c22:	eb e7       	ldi	r30, 0x7B	; 123
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8f 7d       	andi	r24, 0xDF	; 223
     c2a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     c2c:	ec e7       	ldi	r30, 0x7C	; 124
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8b 7f       	andi	r24, 0xFB	; 251
     c34:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     c36:	80 81       	ld	r24, Z
     c38:	8d 7f       	andi	r24, 0xFD	; 253
     c3a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     c3c:	80 81       	ld	r24, Z
     c3e:	8e 7f       	andi	r24, 0xFE	; 254
     c40:	80 83       	st	Z, r24
			break;
     c42:	65 c0       	rjmp	.+202    	; 0xd0e <__vector_29+0x1c8>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     c44:	eb e7       	ldi	r30, 0x7B	; 123
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     c4e:	ec e7       	ldi	r30, 0x7C	; 124
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     c58:	80 81       	ld	r24, Z
     c5a:	8d 7f       	andi	r24, 0xFD	; 253
     c5c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     c5e:	80 81       	ld	r24, Z
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	80 83       	st	Z, r24
			break;
     c64:	54 c0       	rjmp	.+168    	; 0xd0e <__vector_29+0x1c8>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     c66:	eb e7       	ldi	r30, 0x7B	; 123
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	80 62       	ori	r24, 0x20	; 32
     c6e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     c70:	ec e7       	ldi	r30, 0x7C	; 124
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8b 7f       	andi	r24, 0xFB	; 251
     c78:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     c7a:	80 81       	ld	r24, Z
     c7c:	8d 7f       	andi	r24, 0xFD	; 253
     c7e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     c80:	80 81       	ld	r24, Z
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24
			break;
     c86:	43 c0       	rjmp	.+134    	; 0xd0e <__vector_29+0x1c8>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     c88:	eb e7       	ldi	r30, 0x7B	; 123
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	80 62       	ori	r24, 0x20	; 32
     c90:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     c92:	ec e7       	ldi	r30, 0x7C	; 124
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8b 7f       	andi	r24, 0xFB	; 251
     c9a:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     c9c:	80 81       	ld	r24, Z
     c9e:	82 60       	ori	r24, 0x02	; 2
     ca0:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     ca2:	80 81       	ld	r24, Z
     ca4:	8e 7f       	andi	r24, 0xFE	; 254
     ca6:	80 83       	st	Z, r24
			break;
     ca8:	32 c0       	rjmp	.+100    	; 0xd0e <__vector_29+0x1c8>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     caa:	eb e7       	ldi	r30, 0x7B	; 123
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 62       	ori	r24, 0x20	; 32
     cb2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     cb4:	ec e7       	ldi	r30, 0x7C	; 124
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8b 7f       	andi	r24, 0xFB	; 251
     cbc:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     cbe:	80 81       	ld	r24, Z
     cc0:	82 60       	ori	r24, 0x02	; 2
     cc2:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     cc4:	80 81       	ld	r24, Z
     cc6:	81 60       	ori	r24, 0x01	; 1
     cc8:	80 83       	st	Z, r24
			break;
     cca:	21 c0       	rjmp	.+66     	; 0xd0e <__vector_29+0x1c8>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     ccc:	eb e7       	ldi	r30, 0x7B	; 123
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     cd6:	ec e7       	ldi	r30, 0x7C	; 124
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     ce0:	80 81       	ld	r24, Z
     ce2:	8d 7f       	andi	r24, 0xFD	; 253
     ce4:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	80 83       	st	Z, r24
			break;
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__vector_29+0x1c8>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     cee:	eb e7       	ldi	r30, 0x7B	; 123
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 62       	ori	r24, 0x20	; 32
     cf6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     cf8:	ec e7       	ldi	r30, 0x7C	; 124
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8b 7f       	andi	r24, 0xFB	; 251
     d00:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     d02:	80 81       	ld	r24, Z
     d04:	8d 7f       	andi	r24, 0xFD	; 253
     d06:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     d08:	80 81       	ld	r24, Z
     d0a:	8e 7f       	andi	r24, 0xFE	; 254
     d0c:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     d0e:	ea e7       	ldi	r30, 0x7A	; 122
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 68       	ori	r24, 0x80	; 128
     d16:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     d18:	80 81       	ld	r24, Z
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	80 83       	st	Z, r24
	
}
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	bf 90       	pop	r11
     d48:	af 90       	pop	r10
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <deterState>:

void deterState(int *state){
	if (Pho[6] >gotThres){
     d54:	20 91 4e 01 	lds	r18, 0x014E
     d58:	30 91 4f 01 	lds	r19, 0x014F
     d5c:	2d 32       	cpi	r18, 0x2D	; 45
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	34 07       	cpc	r19, r20
     d62:	54 f0       	brlt	.+20     	; 0xd78 <deterState+0x24>
		*state = 3;
     d64:	23 e0       	ldi	r18, 0x03	; 3
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	fc 01       	movw	r30, r24
     d6a:	31 83       	std	Z+1, r19	; 0x01
     d6c:	20 83       	st	Z, r18
		m_usb_tx_string("got the puck!\n");
     d6e:	89 ef       	ldi	r24, 0xF9	; 249
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
     d76:	08 95       	ret
		
	}
	else{
		if(Pho[6] < loseThres){
     d78:	24 36       	cpi	r18, 0x64	; 100
     d7a:	31 05       	cpc	r19, r1
     d7c:	4c f4       	brge	.+18     	; 0xd90 <deterState+0x3c>
			*state = 2;
     d7e:	22 e0       	ldi	r18, 0x02	; 2
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	fc 01       	movw	r30, r24
     d84:	31 83       	std	Z+1, r19	; 0x01
     d86:	20 83       	st	Z, r18
			m_usb_tx_string("lost the puck!\n");
     d88:	89 ee       	ldi	r24, 0xE9	; 233
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
     d90:	08 95       	ret

00000d92 <ifGotoPuck>:
		}
	}
}

void ifGotoPuck(int *state, float *dir){
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres){
     d92:	40 91 42 01 	lds	r20, 0x0142
     d96:	50 91 43 01 	lds	r21, 0x0143
     d9a:	20 91 44 01 	lds	r18, 0x0144
     d9e:	30 91 45 01 	lds	r19, 0x0145
     da2:	42 0f       	add	r20, r18
     da4:	53 1f       	adc	r21, r19
     da6:	20 91 46 01 	lds	r18, 0x0146
     daa:	30 91 47 01 	lds	r19, 0x0147
     dae:	42 0f       	add	r20, r18
     db0:	53 1f       	adc	r21, r19
     db2:	20 91 48 01 	lds	r18, 0x0148
     db6:	30 91 49 01 	lds	r19, 0x0149
     dba:	42 0f       	add	r20, r18
     dbc:	53 1f       	adc	r21, r19
     dbe:	20 91 02 01 	lds	r18, 0x0102
     dc2:	30 91 03 01 	lds	r19, 0x0103
     dc6:	24 17       	cp	r18, r20
     dc8:	35 07       	cpc	r19, r21
     dca:	2c f4       	brge	.+10     	; 0xdd6 <ifGotoPuck+0x44>
		*state = 2;
     dcc:	22 e0       	ldi	r18, 0x02	; 2
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	31 83       	std	Z+1, r19	; 0x01
     dd4:	20 83       	st	Z, r18
     dd6:	08 95       	ret

00000dd8 <init_timer>:
	}
}

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
     dd8:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
     dda:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
     ddc:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
     dde:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
     de0:	80 e2       	ldi	r24, 0x20	; 32
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	90 93 89 00 	sts	0x0089, r25
     de8:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     dec:	10 92 8b 00 	sts	0x008B, r1
     df0:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     df4:	10 92 8d 00 	sts	0x008D, r1
     df8:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
     dfc:	a1 e8       	ldi	r26, 0x81	; 129
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	8c 91       	ld	r24, X
     e02:	80 61       	ori	r24, 0x10	; 16
     e04:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
     e06:	8c 91       	ld	r24, X
     e08:	88 60       	ori	r24, 0x08	; 8
     e0a:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
     e0c:	e0 e8       	ldi	r30, 0x80	; 128
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	82 60       	ori	r24, 0x02	; 2
     e14:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     e16:	80 81       	ld	r24, Z
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
     e1c:	80 81       	ld	r24, Z
     e1e:	80 62       	ori	r24, 0x20	; 32
     e20:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
     e22:	80 81       	ld	r24, Z
     e24:	8f 7e       	andi	r24, 0xEF	; 239
     e26:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
     e28:	80 81       	ld	r24, Z
     e2a:	88 60       	ori	r24, 0x08	; 8
     e2c:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
     e2e:	80 81       	ld	r24, Z
     e30:	8b 7f       	andi	r24, 0xFB	; 251
     e32:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
     e34:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
     e36:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
     e38:	8c 91       	ld	r24, X
     e3a:	8b 7f       	andi	r24, 0xFB	; 251
     e3c:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
     e3e:	8c 91       	ld	r24, X
     e40:	8d 7f       	andi	r24, 0xFD	; 253
     e42:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
     e44:	8c 91       	ld	r24, X
     e46:	81 60       	ori	r24, 0x01	; 1
     e48:	8c 93       	st	X, r24
     e4a:	08 95       	ret

00000e4c <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
     e4c:	e1 e6       	ldi	r30, 0x61	; 97
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 e8       	ldi	r24, 0x80	; 128
     e52:	80 83       	st	Z, r24
     e54:	10 82       	st	Z, r1
	
	m_usb_init();
     e56:	0e 94 bc 14 	call	0x2978	; 0x2978 <m_usb_init>
	
	m_red(ON);
     e5a:	6e 9a       	sbi	0x0d, 6	; 13
     e5c:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     e5e:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <m_wii_open>
     e62:	88 23       	and	r24, r24
     e64:	e1 f3       	breq	.-8      	; 0xe5e <main+0x12>
	m_red(OFF);
     e66:	6e 9a       	sbi	0x0d, 6	; 13
     e68:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);
     e6a:	6e 9a       	sbi	0x0d, 6	; 13
     e6c:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
     e6e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
     e72:	4a e0       	ldi	r20, 0x0A	; 10
     e74:	6c e0       	ldi	r22, 0x0C	; 12
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	0e 94 10 14 	call	0x2820	; 0x2820 <m_rf_open>
	m_red(OFF);
     e7c:	6e 9a       	sbi	0x0d, 6	; 13
     e7e:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
     e80:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <init_timer>
	init_ADC();
     e84:	0e 94 fe 01 	call	0x3fc	; 0x3fc <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
     e88:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
     e8a:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
     e8c:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
     e8e:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
     e90:	23 9a       	sbi	0x04, 3	; 4
	state = 5;
     e92:	85 e0       	ldi	r24, 0x05	; 5
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	90 93 ab 01 	sts	0x01AB, r25
     e9a:	80 93 aa 01 	sts	0x01AA, r24
	
	if(check(PINC, 6)){
     e9e:	36 9b       	sbis	0x06, 6	; 6
     ea0:	1f c0       	rjmp	.+62     	; 0xee0 <main+0x94>
		set(PORTB, 2); // red light
     ea2:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
     ea4:	2b 98       	cbi	0x05, 3	; 5
		goal[0] = GateB;  // left gate
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a9 eb       	ldi	r26, 0xB9	; 185
     eac:	b3 ec       	ldi	r27, 0xC3	; 195
     eae:	80 93 04 01 	sts	0x0104, r24
     eb2:	90 93 05 01 	sts	0x0105, r25
     eb6:	a0 93 06 01 	sts	0x0106, r26
     eba:	b0 93 07 01 	sts	0x0107, r27
				findPuck(state);
				localization(state, &goal[0], &c_wii[0], &dir[0]);
				deterState(&state);
				break;
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
     ebe:	68 94       	set
     ec0:	cc 24       	eor	r12, r12
     ec2:	c2 f8       	bld	r12, 2
				m_usb_tx_string("sent messsage.\n");
				deterState(&state);
				m_usb_tx_string("goal = ");
				m_usb_tx_int(goal[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
     ec4:	0f 2e       	mov	r0, r31
     ec6:	f8 e0       	ldi	r31, 0x08	; 8
     ec8:	ef 2e       	mov	r14, r31
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	ff 2e       	mov	r15, r31
     ece:	f0 2d       	mov	r31, r0
				m_usb_tx_string("\n");
				break;
			case 5:		// defense mode
				m_red(TOGGLE);
     ed0:	68 94       	set
     ed2:	dd 24       	eor	r13, r13
     ed4:	d6 f8       	bld	r13, 6
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
		m_usb_tx_int(OCR1B);
     ed6:	0a e8       	ldi	r16, 0x8A	; 138
     ed8:	10 e0       	ldi	r17, 0x00	; 0
		m_usb_tx_string(", ");
		m_usb_tx_int(OCR1C);
     eda:	cc e8       	ldi	r28, 0x8C	; 140
     edc:	d0 e0       	ldi	r29, 0x00	; 0
     ede:	0f c0       	rjmp	.+30     	; 0xefe <main+0xb2>
		set(PORTB, 2); // red light
		clear(PORTB, 3);
		goal[0] = GateB;  // left gate
	}
	else{
		set(PORTB, 3); // blue light
     ee0:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
     ee2:	2a 98       	cbi	0x05, 2	; 5
		goal[0] = GateA;  // right gate
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a9 eb       	ldi	r26, 0xB9	; 185
     eea:	b3 e4       	ldi	r27, 0x43	; 67
     eec:	80 93 04 01 	sts	0x0104, r24
     ef0:	90 93 05 01 	sts	0x0105, r25
     ef4:	a0 93 06 01 	sts	0x0106, r26
     ef8:	b0 93 07 01 	sts	0x0107, r27
     efc:	e0 cf       	rjmp	.-64     	; 0xebe <main+0x72>
	}
	while(1)
	{	
		m_usb_tx_string("state: ");
     efe:	81 ed       	ldi	r24, 0xD1	; 209
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		m_usb_tx_int(state);
     f06:	80 91 aa 01 	lds	r24, 0x01AA
     f0a:	90 91 ab 01 	lds	r25, 0x01AB
     f0e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
		m_usb_tx_string("\n");
     f12:	8f ec       	ldi	r24, 0xCF	; 207
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		switch(state){
     f1a:	80 91 aa 01 	lds	r24, 0x01AA
     f1e:	90 91 ab 01 	lds	r25, 0x01AB
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	91 05       	cpc	r25, r1
     f26:	21 f1       	breq	.+72     	; 0xf70 <main+0x124>
     f28:	85 30       	cpi	r24, 0x05	; 5
     f2a:	91 05       	cpc	r25, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <main+0xe4>
     f2e:	6a c0       	rjmp	.+212    	; 0x1004 <main+0x1b8>
     f30:	02 97       	sbiw	r24, 0x02	; 2
     f32:	09 f0       	breq	.+2      	; 0xf36 <main+0xea>
     f34:	85 c0       	rjmp	.+266    	; 0x1040 <main+0x1f4>
			case 2:		// attack mode, find puck
				m_red(TOGGLE);
     f36:	6e 9a       	sbi	0x0d, 6	; 13
     f38:	8e b1       	in	r24, 0x0e	; 14
     f3a:	8d 25       	eor	r24, r13
     f3c:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
     f3e:	6a 9a       	sbi	0x0d, 2	; 13
     f40:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
     f42:	80 91 aa 01 	lds	r24, 0x01AA
     f46:	90 91 ab 01 	lds	r25, 0x01AB
     f4a:	0e 94 b7 03 	call	0x76e	; 0x76e <findPuck>
				localization(state, &goal[0], &c_wii[0], &dir[0]);
     f4e:	20 e5       	ldi	r18, 0x50	; 80
     f50:	31 e0       	ldi	r19, 0x01	; 1
     f52:	48 e5       	ldi	r20, 0x58	; 88
     f54:	51 e0       	ldi	r21, 0x01	; 1
     f56:	64 e0       	ldi	r22, 0x04	; 4
     f58:	71 e0       	ldi	r23, 0x01	; 1
     f5a:	80 91 aa 01 	lds	r24, 0x01AA
     f5e:	90 91 ab 01 	lds	r25, 0x01AB
     f62:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <localization>
				deterState(&state);
     f66:	8a ea       	ldi	r24, 0xAA	; 170
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 aa 06 	call	0xd54	; 0xd54 <deterState>
				break;
     f6e:	68 c0       	rjmp	.+208    	; 0x1040 <main+0x1f4>
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
     f70:	6a 9a       	sbi	0x0d, 2	; 13
     f72:	8e b1       	in	r24, 0x0e	; 14
     f74:	8c 25       	eor	r24, r12
     f76:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
     f78:	6e 9a       	sbi	0x0d, 6	; 13
     f7a:	76 9a       	sbi	0x0e, 6	; 14
				localization(state, &goal[0], &c_wii[0], &dir[0]);
     f7c:	20 e5       	ldi	r18, 0x50	; 80
     f7e:	31 e0       	ldi	r19, 0x01	; 1
     f80:	48 e5       	ldi	r20, 0x58	; 88
     f82:	51 e0       	ldi	r21, 0x01	; 1
     f84:	64 e0       	ldi	r22, 0x04	; 4
     f86:	71 e0       	ldi	r23, 0x01	; 1
     f88:	80 91 aa 01 	lds	r24, 0x01AA
     f8c:	90 91 ab 01 	lds	r25, 0x01AB
     f90:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <localization>
				send_message(state, No, &buffer[0], &c_wii[0]);
     f94:	28 e5       	ldi	r18, 0x58	; 88
     f96:	31 e0       	ldi	r19, 0x01	; 1
     f98:	40 e6       	ldi	r20, 0x60	; 96
     f9a:	51 e0       	ldi	r21, 0x01	; 1
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	80 91 aa 01 	lds	r24, 0x01AA
     fa4:	90 91 ab 01 	lds	r25, 0x01AB
     fa8:	0e 94 ba 01 	call	0x374	; 0x374 <send_message>
				m_usb_tx_string("sent messsage.\n");
     fac:	8f eb       	ldi	r24, 0xBF	; 191
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
				deterState(&state);
     fb4:	8a ea       	ldi	r24, 0xAA	; 170
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 aa 06 	call	0xd54	; 0xd54 <deterState>
				m_usb_tx_string("goal = ");
     fbc:	87 eb       	ldi	r24, 0xB7	; 183
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
				m_usb_tx_int(goal[0]);
     fc4:	60 91 04 01 	lds	r22, 0x0104
     fc8:	70 91 05 01 	lds	r23, 0x0105
     fcc:	80 91 06 01 	lds	r24, 0x0106
     fd0:	90 91 07 01 	lds	r25, 0x0107
     fd4:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
     fd8:	cb 01       	movw	r24, r22
     fda:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
				m_usb_tx_string(", ");
     fde:	84 eb       	ldi	r24, 0xB4	; 180
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
				m_usb_tx_int(goal[1]);
     fe6:	f7 01       	movw	r30, r14
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
     ff4:	cb 01       	movw	r24, r22
     ff6:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
				m_usb_tx_string("\n");
     ffa:	82 eb       	ldi	r24, 0xB2	; 178
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
				break;
    1002:	1e c0       	rjmp	.+60     	; 0x1040 <main+0x1f4>
			case 5:		// defense mode
				m_red(TOGGLE);
    1004:	6e 9a       	sbi	0x0d, 6	; 13
    1006:	8e b1       	in	r24, 0x0e	; 14
    1008:	8d 25       	eor	r24, r13
    100a:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    100c:	6a 9a       	sbi	0x0d, 2	; 13
    100e:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    1010:	80 91 aa 01 	lds	r24, 0x01AA
    1014:	90 91 ab 01 	lds	r25, 0x01AB
    1018:	0e 94 b7 03 	call	0x76e	; 0x76e <findPuck>
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    101c:	20 e5       	ldi	r18, 0x50	; 80
    101e:	31 e0       	ldi	r19, 0x01	; 1
    1020:	48 e5       	ldi	r20, 0x58	; 88
    1022:	51 e0       	ldi	r21, 0x01	; 1
    1024:	64 e0       	ldi	r22, 0x04	; 4
    1026:	71 e0       	ldi	r23, 0x01	; 1
    1028:	80 91 aa 01 	lds	r24, 0x01AA
    102c:	90 91 ab 01 	lds	r25, 0x01AB
    1030:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <localization>
				ifGotoPuck(&state, &dir[0]);
    1034:	60 e5       	ldi	r22, 0x50	; 80
    1036:	71 e0       	ldi	r23, 0x01	; 1
    1038:	8a ea       	ldi	r24, 0xAA	; 170
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	0e 94 c9 06 	call	0xd92	; 0xd92 <ifGotoPuck>
				break;
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    1040:	89 ea       	ldi	r24, 0xA9	; 169
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		m_usb_tx_int(OCR1B);
    1048:	f8 01       	movw	r30, r16
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
		m_usb_tx_string(", ");
    1052:	86 ea       	ldi	r24, 0xA6	; 166
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		m_usb_tx_int(OCR1C);
    105a:	88 81       	ld	r24, Y
    105c:	99 81       	ldd	r25, Y+1	; 0x01
    105e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
		m_usb_tx_string("\n");
    1062:	84 ea       	ldi	r24, 0xA4	; 164
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
    106a:	85 ea       	ldi	r24, 0xA5	; 165
    106c:	9e e0       	ldi	r25, 0x0E	; 14
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <main+0x222>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <main+0x228>
    1074:	00 00       	nop
    1076:	43 cf       	rjmp	.-378    	; 0xefe <main+0xb2>

00001078 <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
    1078:	4f 92       	push	r4
    107a:	5f 92       	push	r5
    107c:	6f 92       	push	r6
    107e:	7f 92       	push	r7
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	60 97       	sbiw	r28, 0x10	; 16
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	2b 01       	movw	r4, r22
    10aa:	3c 01       	movw	r6, r24
    10ac:	2d 83       	std	Y+5, r18	; 0x05
    10ae:	3e 83       	std	Y+6, r19	; 0x06
    10b0:	4f 83       	std	Y+7, r20	; 0x07
    10b2:	58 87       	std	Y+8, r21	; 0x08
    10b4:	58 01       	movw	r10, r16
    10b6:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
    10b8:	d5 01       	movw	r26, r10
    10ba:	cd 90       	ld	r12, X+
    10bc:	dd 90       	ld	r13, X+
    10be:	ed 90       	ld	r14, X+
    10c0:	fc 90       	ld	r15, X
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	c7 01       	movw	r24, r14
    10c8:	b6 01       	movw	r22, r12
    10ca:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    10ce:	f8 01       	movw	r30, r16
    10d0:	20 81       	ld	r18, Z
    10d2:	31 81       	ldd	r19, Z+1	; 0x01
    10d4:	42 81       	ldd	r20, Z+2	; 0x02
    10d6:	53 81       	ldd	r21, Z+3	; 0x03
    10d8:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    10dc:	69 87       	std	Y+9, r22	; 0x09
    10de:	7a 87       	std	Y+10, r23	; 0x0a
    10e0:	8b 87       	std	Y+11, r24	; 0x0b
    10e2:	9c 87       	std	Y+12, r25	; 0x0c
    10e4:	d5 01       	movw	r26, r10
    10e6:	14 96       	adiw	r26, 0x04	; 4
    10e8:	8d 91       	ld	r24, X+
    10ea:	9d 91       	ld	r25, X+
    10ec:	0d 90       	ld	r0, X+
    10ee:	bc 91       	ld	r27, X
    10f0:	a0 2d       	mov	r26, r0
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	ab 83       	std	Y+3, r26	; 0x03
    10f8:	bc 83       	std	Y+4, r27	; 0x04
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1100:	58 85       	ldd	r21, Y+8	; 0x08
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    110a:	6d 87       	std	Y+13, r22	; 0x0d
    110c:	7e 87       	std	Y+14, r23	; 0x0e
    110e:	8f 87       	std	Y+15, r24	; 0x0f
    1110:	98 8b       	std	Y+16, r25	; 0x10
    1112:	9b 01       	movw	r18, r22
    1114:	ac 01       	movw	r20, r24
    1116:	69 85       	ldd	r22, Y+9	; 0x09
    1118:	7a 85       	ldd	r23, Y+10	; 0x0a
    111a:	8b 85       	ldd	r24, Y+11	; 0x0b
    111c:	9c 85       	ldd	r25, Y+12	; 0x0c
    111e:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    1122:	4b 01       	movw	r8, r22
    1124:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
    1126:	29 81       	ldd	r18, Y+1	; 0x01
    1128:	3a 81       	ldd	r19, Y+2	; 0x02
    112a:	4b 81       	ldd	r20, Y+3	; 0x03
    112c:	5c 81       	ldd	r21, Y+4	; 0x04
    112e:	c3 01       	movw	r24, r6
    1130:	b2 01       	movw	r22, r4
    1132:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1136:	f8 01       	movw	r30, r16
    1138:	24 81       	ldd	r18, Z+4	; 0x04
    113a:	35 81       	ldd	r19, Z+5	; 0x05
    113c:	46 81       	ldd	r20, Z+6	; 0x06
    113e:	57 81       	ldd	r21, Z+7	; 0x07
    1140:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    1144:	2b 01       	movw	r4, r22
    1146:	3c 01       	movw	r6, r24
    1148:	2d 81       	ldd	r18, Y+5	; 0x05
    114a:	3e 81       	ldd	r19, Y+6	; 0x06
    114c:	4f 81       	ldd	r20, Y+7	; 0x07
    114e:	58 85       	ldd	r21, Y+8	; 0x08
    1150:	c7 01       	movw	r24, r14
    1152:	b6 01       	movw	r22, r12
    1154:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1158:	69 83       	std	Y+1, r22	; 0x01
    115a:	7a 83       	std	Y+2, r23	; 0x02
    115c:	8b 83       	std	Y+3, r24	; 0x03
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	9b 01       	movw	r18, r22
    1162:	ac 01       	movw	r20, r24
    1164:	c3 01       	movw	r24, r6
    1166:	b2 01       	movw	r22, r4
    1168:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    116c:	6b 01       	movw	r12, r22
    116e:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
    1170:	2d 85       	ldd	r18, Y+13	; 0x0d
    1172:	3e 85       	ldd	r19, Y+14	; 0x0e
    1174:	4f 85       	ldd	r20, Y+15	; 0x0f
    1176:	58 89       	ldd	r21, Y+16	; 0x10
    1178:	69 85       	ldd	r22, Y+9	; 0x09
    117a:	7a 85       	ldd	r23, Y+10	; 0x0a
    117c:	8b 85       	ldd	r24, Y+11	; 0x0b
    117e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1180:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    1184:	6d 83       	std	Y+5, r22	; 0x05
    1186:	7e 83       	std	Y+6, r23	; 0x06
    1188:	8f 83       	std	Y+7, r24	; 0x07
    118a:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
    118c:	29 81       	ldd	r18, Y+1	; 0x01
    118e:	3a 81       	ldd	r19, Y+2	; 0x02
    1190:	4b 81       	ldd	r20, Y+3	; 0x03
    1192:	5c 81       	ldd	r21, Y+4	; 0x04
    1194:	c3 01       	movw	r24, r6
    1196:	b2 01       	movw	r22, r4
    1198:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    119c:	2b 01       	movw	r4, r22
    119e:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
    11a0:	a5 01       	movw	r20, r10
    11a2:	94 01       	movw	r18, r8
    11a4:	c5 01       	movw	r24, r10
    11a6:	b4 01       	movw	r22, r8
    11a8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    11ac:	4b 01       	movw	r8, r22
    11ae:	5c 01       	movw	r10, r24
    11b0:	a7 01       	movw	r20, r14
    11b2:	96 01       	movw	r18, r12
    11b4:	c7 01       	movw	r24, r14
    11b6:	b6 01       	movw	r22, r12
    11b8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    11bc:	9b 01       	movw	r18, r22
    11be:	ac 01       	movw	r20, r24
    11c0:	c5 01       	movw	r24, r10
    11c2:	b4 01       	movw	r22, r8
    11c4:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    11c8:	6b 01       	movw	r12, r22
    11ca:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
    11cc:	2d 81       	ldd	r18, Y+5	; 0x05
    11ce:	3e 81       	ldd	r19, Y+6	; 0x06
    11d0:	4f 81       	ldd	r20, Y+7	; 0x07
    11d2:	58 85       	ldd	r21, Y+8	; 0x08
    11d4:	ca 01       	movw	r24, r20
    11d6:	b9 01       	movw	r22, r18
    11d8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    11dc:	4b 01       	movw	r8, r22
    11de:	5c 01       	movw	r10, r24
    11e0:	a3 01       	movw	r20, r6
    11e2:	92 01       	movw	r18, r4
    11e4:	c3 01       	movw	r24, r6
    11e6:	b2 01       	movw	r22, r4
    11e8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    11ec:	9b 01       	movw	r18, r22
    11ee:	ac 01       	movw	r20, r24
    11f0:	c5 01       	movw	r24, r10
    11f2:	b4 01       	movw	r22, r8
    11f4:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    11f8:	9b 01       	movw	r18, r22
    11fa:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
    11fc:	01 e0       	ldi	r16, 0x01	; 1
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	c7 01       	movw	r24, r14
    1202:	b6 01       	movw	r22, r12
    1204:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1208:	88 23       	and	r24, r24
    120a:	14 f0       	brlt	.+4      	; 0x1210 <find_sign+0x198>
    120c:	00 e0       	ldi	r16, 0x00	; 0
    120e:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
    1210:	c8 01       	movw	r24, r16
    1212:	60 96       	adiw	r28, 0x10	; 16
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
    1234:	8f 90       	pop	r8
    1236:	7f 90       	pop	r7
    1238:	6f 90       	pop	r6
    123a:	5f 90       	pop	r5
    123c:	4f 90       	pop	r4
    123e:	08 95       	ret

00001240 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
    1240:	2f 92       	push	r2
    1242:	3f 92       	push	r3
    1244:	4f 92       	push	r4
    1246:	5f 92       	push	r5
    1248:	6f 92       	push	r6
    124a:	7f 92       	push	r7
    124c:	8f 92       	push	r8
    124e:	9f 92       	push	r9
    1250:	af 92       	push	r10
    1252:	bf 92       	push	r11
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	28 97       	sbiw	r28, 0x08	; 8
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	1c 01       	movw	r2, r24
    1276:	49 83       	std	Y+1, r20	; 0x01
    1278:	5a 83       	std	Y+2, r21	; 0x02
    127a:	6b 83       	std	Y+3, r22	; 0x03
    127c:	7c 83       	std	Y+4, r23	; 0x04
    127e:	0d 83       	std	Y+5, r16	; 0x05
    1280:	1e 83       	std	Y+6, r17	; 0x06
    1282:	2f 83       	std	Y+7, r18	; 0x07
    1284:	38 87       	std	Y+8, r19	; 0x08
    1286:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
    1288:	f6 01       	movw	r30, r12
    128a:	20 81       	ld	r18, Z
    128c:	31 81       	ldd	r19, Z+1	; 0x01
    128e:	42 81       	ldd	r20, Z+2	; 0x02
    1290:	53 81       	ldd	r21, Z+3	; 0x03
    1292:	f7 01       	movw	r30, r14
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    12a0:	4b 01       	movw	r8, r22
    12a2:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
    12a4:	f6 01       	movw	r30, r12
    12a6:	24 81       	ldd	r18, Z+4	; 0x04
    12a8:	35 81       	ldd	r19, Z+5	; 0x05
    12aa:	46 81       	ldd	r20, Z+6	; 0x06
    12ac:	57 81       	ldd	r21, Z+7	; 0x07
    12ae:	f7 01       	movw	r30, r14
    12b0:	64 81       	ldd	r22, Z+4	; 0x04
    12b2:	75 81       	ldd	r23, Z+5	; 0x05
    12b4:	86 81       	ldd	r24, Z+6	; 0x06
    12b6:	97 81       	ldd	r25, Z+7	; 0x07
    12b8:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    12bc:	6b 01       	movw	r12, r22
    12be:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
    12c0:	a5 01       	movw	r20, r10
    12c2:	94 01       	movw	r18, r8
    12c4:	c5 01       	movw	r24, r10
    12c6:	b4 01       	movw	r22, r8
    12c8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    12cc:	2b 01       	movw	r4, r22
    12ce:	3c 01       	movw	r6, r24
    12d0:	a7 01       	movw	r20, r14
    12d2:	96 01       	movw	r18, r12
    12d4:	c7 01       	movw	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    12dc:	9b 01       	movw	r18, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	c3 01       	movw	r24, r6
    12e2:	b2 01       	movw	r22, r4
    12e4:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
    12e8:	0e 94 a5 1b 	call	0x374a	; 0x374a <sqrt>
    12ec:	2b 01       	movw	r4, r22
    12ee:	3c 01       	movw	r6, r24
    12f0:	9b 01       	movw	r18, r22
    12f2:	ac 01       	movw	r20, r24
    12f4:	c5 01       	movw	r24, r10
    12f6:	b4 01       	movw	r22, r8
    12f8:	0e 94 af 19 	call	0x335e	; 0x335e <__divsf3>
    12fc:	4b 01       	movw	r8, r22
    12fe:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
    1300:	a3 01       	movw	r20, r6
    1302:	92 01       	movw	r18, r4
    1304:	c7 01       	movw	r24, r14
    1306:	b6 01       	movw	r22, r12
    1308:	0e 94 af 19 	call	0x335e	; 0x335e <__divsf3>
    130c:	6b 01       	movw	r12, r22
    130e:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
    1310:	f8 01       	movw	r30, r16
    1312:	20 81       	ld	r18, Z
    1314:	31 81       	ldd	r19, Z+1	; 0x01
    1316:	42 81       	ldd	r20, Z+2	; 0x02
    1318:	53 81       	ldd	r21, Z+3	; 0x03
    131a:	c5 01       	movw	r24, r10
    131c:	b4 01       	movw	r22, r8
    131e:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1322:	2b 01       	movw	r4, r22
    1324:	3c 01       	movw	r6, r24
    1326:	f8 01       	movw	r30, r16
    1328:	24 81       	ldd	r18, Z+4	; 0x04
    132a:	35 81       	ldd	r19, Z+5	; 0x05
    132c:	46 81       	ldd	r20, Z+6	; 0x06
    132e:	57 81       	ldd	r21, Z+7	; 0x07
    1330:	c7 01       	movw	r24, r14
    1332:	b6 01       	movw	r22, r12
    1334:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1338:	9b 01       	movw	r18, r22
    133a:	ac 01       	movw	r20, r24
    133c:	c3 01       	movw	r24, r6
    133e:	b2 01       	movw	r22, r4
    1340:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
	alpha = acos(cos_alpha);
    1344:	0e 94 38 19 	call	0x3270	; 0x3270 <acos>
    1348:	2b 01       	movw	r4, r22
    134a:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
    134c:	2a 94       	dec	r2
    134e:	23 28       	or	r2, r3
    1350:	d1 f4       	brne	.+52     	; 0x1386 <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
    1352:	2d 81       	ldd	r18, Y+5	; 0x05
    1354:	3e 81       	ldd	r19, Y+6	; 0x06
    1356:	4f 81       	ldd	r20, Y+7	; 0x07
    1358:	58 85       	ldd	r21, Y+8	; 0x08
    135a:	50 58       	subi	r21, 0x80	; 128
    135c:	c7 01       	movw	r24, r14
    135e:	b6 01       	movw	r22, r12
    1360:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1364:	6b 01       	movw	r12, r22
    1366:	7c 01       	movw	r14, r24
    1368:	29 81       	ldd	r18, Y+1	; 0x01
    136a:	3a 81       	ldd	r19, Y+2	; 0x02
    136c:	4b 81       	ldd	r20, Y+3	; 0x03
    136e:	5c 81       	ldd	r21, Y+4	; 0x04
    1370:	c5 01       	movw	r24, r10
    1372:	b4 01       	movw	r22, r8
    1374:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1378:	9b 01       	movw	r18, r22
    137a:	ac 01       	movw	r20, r24
    137c:	c7 01       	movw	r24, r14
    137e:	b6 01       	movw	r22, r12
    1380:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    1384:	19 c0       	rjmp	.+50     	; 0x13b8 <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    1386:	2d 81       	ldd	r18, Y+5	; 0x05
    1388:	3e 81       	ldd	r19, Y+6	; 0x06
    138a:	4f 81       	ldd	r20, Y+7	; 0x07
    138c:	58 85       	ldd	r21, Y+8	; 0x08
    138e:	50 58       	subi	r21, 0x80	; 128
    1390:	c7 01       	movw	r24, r14
    1392:	b6 01       	movw	r22, r12
    1394:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1398:	6b 01       	movw	r12, r22
    139a:	7c 01       	movw	r14, r24
    139c:	29 81       	ldd	r18, Y+1	; 0x01
    139e:	3a 81       	ldd	r19, Y+2	; 0x02
    13a0:	4b 81       	ldd	r20, Y+3	; 0x03
    13a2:	5c 81       	ldd	r21, Y+4	; 0x04
    13a4:	c5 01       	movw	r24, r10
    13a6:	b4 01       	movw	r22, r8
    13a8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	c7 01       	movw	r24, r14
    13b2:	b6 01       	movw	r22, r12
    13b4:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
	}
	if (c2g_wx < 0){
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	4c f0       	brlt	.+18     	; 0x13d8 <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    13c6:	40 92 76 01 	sts	0x0176, r4
    13ca:	50 92 77 01 	sts	0x0177, r5
    13ce:	60 92 78 01 	sts	0x0178, r6
    13d2:	70 92 79 01 	sts	0x0179, r7
    13d6:	0c c0       	rjmp	.+24     	; 0x13f0 <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    13d8:	77 fa       	bst	r7, 7
    13da:	70 94       	com	r7
    13dc:	77 f8       	bld	r7, 7
    13de:	70 94       	com	r7
    13e0:	40 92 76 01 	sts	0x0176, r4
    13e4:	50 92 77 01 	sts	0x0177, r5
    13e8:	60 92 78 01 	sts	0x0178, r6
    13ec:	70 92 79 01 	sts	0x0179, r7
	}
	m_usb_tx_string("alpha: ");
    13f0:	84 e4       	ldi	r24, 0x44	; 68
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(alpha*10);
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e2       	ldi	r20, 0x20	; 32
    13fe:	51 e4       	ldi	r21, 0x41	; 65
    1400:	60 91 76 01 	lds	r22, 0x0176
    1404:	70 91 77 01 	lds	r23, 0x0177
    1408:	80 91 78 01 	lds	r24, 0x0178
    140c:	90 91 79 01 	lds	r25, 0x0179
    1410:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1414:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1418:	cb 01       	movw	r24, r22
    141a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    141e:	82 e4       	ldi	r24, 0x42	; 66
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
}
    1426:	28 96       	adiw	r28, 0x08	; 8
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	df 90       	pop	r13
    1440:	cf 90       	pop	r12
    1442:	bf 90       	pop	r11
    1444:	af 90       	pop	r10
    1446:	9f 90       	pop	r9
    1448:	8f 90       	pop	r8
    144a:	7f 90       	pop	r7
    144c:	6f 90       	pop	r6
    144e:	5f 90       	pop	r5
    1450:	4f 90       	pop	r4
    1452:	3f 90       	pop	r3
    1454:	2f 90       	pop	r2
    1456:	08 95       	ret

00001458 <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    1458:	4f 92       	push	r4
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	00 d0       	rcall	.+0      	; 0x1476 <PID_alpha+0x1e>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <PID_alpha+0x20>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	4b 01       	movw	r8, r22
    147e:	5c 01       	movw	r10, r24
    1480:	29 83       	std	Y+1, r18	; 0x01
    1482:	3a 83       	std	Y+2, r19	; 0x02
    1484:	4b 83       	std	Y+3, r20	; 0x03
    1486:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1488:	40 90 76 01 	lds	r4, 0x0176
    148c:	50 90 77 01 	lds	r5, 0x0177
    1490:	60 90 78 01 	lds	r6, 0x0178
    1494:	70 90 79 01 	lds	r7, 0x0179
    1498:	20 91 72 01 	lds	r18, 0x0172
    149c:	30 91 73 01 	lds	r19, 0x0173
    14a0:	40 91 74 01 	lds	r20, 0x0174
    14a4:	50 91 75 01 	lds	r21, 0x0175
    14a8:	c3 01       	movw	r24, r6
    14aa:	b2 01       	movw	r22, r4
    14ac:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    14b0:	6b 01       	movw	r12, r22
    14b2:	7c 01       	movw	r14, r24
    14b4:	60 93 6e 01 	sts	0x016E, r22
    14b8:	70 93 6f 01 	sts	0x016F, r23
    14bc:	80 93 70 01 	sts	0x0170, r24
    14c0:	90 93 71 01 	sts	0x0171, r25
	float P =0, D = 0;
	P = Kp * alpha;
    14c4:	a5 01       	movw	r20, r10
    14c6:	94 01       	movw	r18, r8
    14c8:	c3 01       	movw	r24, r6
    14ca:	b2 01       	movw	r22, r4
    14cc:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    14d0:	4b 01       	movw	r8, r22
    14d2:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    14d4:	29 81       	ldd	r18, Y+1	; 0x01
    14d6:	3a 81       	ldd	r19, Y+2	; 0x02
    14d8:	4b 81       	ldd	r20, Y+3	; 0x03
    14da:	5c 81       	ldd	r21, Y+4	; 0x04
    14dc:	c7 01       	movw	r24, r14
    14de:	b6 01       	movw	r22, r12
    14e0:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    14e4:	9b 01       	movw	r18, r22
    14e6:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    14e8:	c5 01       	movw	r24, r10
    14ea:	b4 01       	movw	r22, r8
    14ec:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    14f0:	60 93 6a 01 	sts	0x016A, r22
    14f4:	70 93 6b 01 	sts	0x016B, r23
    14f8:	80 93 6c 01 	sts	0x016C, r24
    14fc:	90 93 6d 01 	sts	0x016D, r25
	
	alpha_last = alpha;
    1500:	40 92 72 01 	sts	0x0172, r4
    1504:	50 92 73 01 	sts	0x0173, r5
    1508:	60 92 74 01 	sts	0x0174, r6
    150c:	70 92 75 01 	sts	0x0175, r7
	
	m_usb_tx_string("alpha*10: ");
    1510:	87 e3       	ldi	r24, 0x37	; 55
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e2       	ldi	r20, 0x20	; 32
    151e:	51 e4       	ldi	r21, 0x41	; 65
    1520:	60 91 76 01 	lds	r22, 0x0176
    1524:	70 91 77 01 	lds	r23, 0x0177
    1528:	80 91 78 01 	lds	r24, 0x0178
    152c:	90 91 79 01 	lds	r25, 0x0179
    1530:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1534:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1538:	cb 01       	movw	r24, r22
    153a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    153e:	85 e3       	ldi	r24, 0x35	; 53
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1546:	8b e2       	ldi	r24, 0x2B	; 43
    1548:	92 e0       	ldi	r25, 0x02	; 2
    154a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e2       	ldi	r20, 0x20	; 32
    1554:	51 e4       	ldi	r21, 0x41	; 65
    1556:	60 91 6a 01 	lds	r22, 0x016A
    155a:	70 91 6b 01 	lds	r23, 0x016B
    155e:	80 91 6c 01 	lds	r24, 0x016C
    1562:	90 91 6d 01 	lds	r25, 0x016D
    1566:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    156a:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    156e:	cb 01       	movw	r24, r22
    1570:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    1574:	89 e2       	ldi	r24, 0x29	; 41
    1576:	92 e0       	ldi	r25, 0x02	; 2
    1578:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	if(gain_loc<0){  // turn right
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	a9 01       	movw	r20, r18
    1582:	60 91 6a 01 	lds	r22, 0x016A
    1586:	70 91 6b 01 	lds	r23, 0x016B
    158a:	80 91 6c 01 	lds	r24, 0x016C
    158e:	90 91 6d 01 	lds	r25, 0x016D
    1592:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1596:	88 23       	and	r24, r24
    1598:	0c f0       	brlt	.+2      	; 0x159c <PID_alpha+0x144>
    159a:	44 c0       	rjmp	.+136    	; 0x1624 <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    159c:	8d e1       	ldi	r24, 0x1D	; 29
    159e:	92 e0       	ldi	r25, 0x02	; 2
    15a0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    15a4:	60 91 6a 01 	lds	r22, 0x016A
    15a8:	70 91 6b 01 	lds	r23, 0x016B
    15ac:	80 91 6c 01 	lds	r24, 0x016C
    15b0:	90 91 6d 01 	lds	r25, 0x016D
    15b4:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    15b8:	9b 01       	movw	r18, r22
    15ba:	77 23       	and	r23, r23
    15bc:	24 f4       	brge	.+8      	; 0x15c6 <PID_alpha+0x16e>
    15be:	22 27       	eor	r18, r18
    15c0:	33 27       	eor	r19, r19
    15c2:	26 1b       	sub	r18, r22
    15c4:	37 0b       	sbc	r19, r23
    15c6:	8a e8       	ldi	r24, 0x8A	; 138
    15c8:	92 e0       	ldi	r25, 0x02	; 2
    15ca:	82 1b       	sub	r24, r18
    15cc:	93 0b       	sbc	r25, r19
    15ce:	90 93 8b 00 	sts	0x008B, r25
    15d2:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    15d6:	e0 90 22 01 	lds	r14, 0x0122
    15da:	f0 90 23 01 	lds	r15, 0x0123
    15de:	60 91 6a 01 	lds	r22, 0x016A
    15e2:	70 91 6b 01 	lds	r23, 0x016B
    15e6:	80 91 6c 01 	lds	r24, 0x016C
    15ea:	90 91 6d 01 	lds	r25, 0x016D
    15ee:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    15f2:	9b 01       	movw	r18, r22
    15f4:	77 23       	and	r23, r23
    15f6:	24 f4       	brge	.+8      	; 0x1600 <PID_alpha+0x1a8>
    15f8:	22 27       	eor	r18, r18
    15fa:	33 27       	eor	r19, r19
    15fc:	26 1b       	sub	r18, r22
    15fe:	37 0b       	sbc	r19, r23
    1600:	e2 16       	cp	r14, r18
    1602:	f3 06       	cpc	r15, r19
    1604:	44 f4       	brge	.+16     	; 0x1616 <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    1606:	8a e8       	ldi	r24, 0x8A	; 138
    1608:	92 e0       	ldi	r25, 0x02	; 2
    160a:	8e 19       	sub	r24, r14
    160c:	9f 09       	sbc	r25, r15
    160e:	90 93 8b 00 	sts	0x008B, r25
    1612:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1616:	8a e8       	ldi	r24, 0x8A	; 138
    1618:	92 e0       	ldi	r25, 0x02	; 2
    161a:	90 93 8d 00 	sts	0x008D, r25
    161e:	80 93 8c 00 	sts	0x008C, r24
    1622:	43 c0       	rjmp	.+134    	; 0x16aa <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1624:	82 e1       	ldi	r24, 0x12	; 18
    1626:	92 e0       	ldi	r25, 0x02	; 2
    1628:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    162c:	60 91 6a 01 	lds	r22, 0x016A
    1630:	70 91 6b 01 	lds	r23, 0x016B
    1634:	80 91 6c 01 	lds	r24, 0x016C
    1638:	90 91 6d 01 	lds	r25, 0x016D
    163c:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1640:	9b 01       	movw	r18, r22
    1642:	77 23       	and	r23, r23
    1644:	24 f4       	brge	.+8      	; 0x164e <PID_alpha+0x1f6>
    1646:	22 27       	eor	r18, r18
    1648:	33 27       	eor	r19, r19
    164a:	26 1b       	sub	r18, r22
    164c:	37 0b       	sbc	r19, r23
    164e:	8a e8       	ldi	r24, 0x8A	; 138
    1650:	92 e0       	ldi	r25, 0x02	; 2
    1652:	82 1b       	sub	r24, r18
    1654:	93 0b       	sbc	r25, r19
    1656:	90 93 8d 00 	sts	0x008D, r25
    165a:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    165e:	e0 90 22 01 	lds	r14, 0x0122
    1662:	f0 90 23 01 	lds	r15, 0x0123
    1666:	60 91 6a 01 	lds	r22, 0x016A
    166a:	70 91 6b 01 	lds	r23, 0x016B
    166e:	80 91 6c 01 	lds	r24, 0x016C
    1672:	90 91 6d 01 	lds	r25, 0x016D
    1676:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    167a:	9b 01       	movw	r18, r22
    167c:	77 23       	and	r23, r23
    167e:	24 f4       	brge	.+8      	; 0x1688 <PID_alpha+0x230>
    1680:	22 27       	eor	r18, r18
    1682:	33 27       	eor	r19, r19
    1684:	26 1b       	sub	r18, r22
    1686:	37 0b       	sbc	r19, r23
    1688:	e2 16       	cp	r14, r18
    168a:	f3 06       	cpc	r15, r19
    168c:	44 f4       	brge	.+16     	; 0x169e <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    168e:	8a e8       	ldi	r24, 0x8A	; 138
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	8e 19       	sub	r24, r14
    1694:	9f 09       	sbc	r25, r15
    1696:	90 93 8d 00 	sts	0x008D, r25
    169a:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    169e:	8a e8       	ldi	r24, 0x8A	; 138
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	90 93 8b 00 	sts	0x008B, r25
    16a6:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	df 90       	pop	r13
    16bc:	cf 90       	pop	r12
    16be:	bf 90       	pop	r11
    16c0:	af 90       	pop	r10
    16c2:	9f 90       	pop	r9
    16c4:	8f 90       	pop	r8
    16c6:	7f 90       	pop	r7
    16c8:	6f 90       	pop	r6
    16ca:	5f 90       	pop	r5
    16cc:	4f 90       	pop	r4
    16ce:	08 95       	ret

000016d0 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    16d0:	4f 92       	push	r4
    16d2:	5f 92       	push	r5
    16d4:	6f 92       	push	r6
    16d6:	7f 92       	push	r7
    16d8:	8f 92       	push	r8
    16da:	9f 92       	push	r9
    16dc:	af 92       	push	r10
    16de:	bf 92       	push	r11
    16e0:	cf 92       	push	r12
    16e2:	df 92       	push	r13
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <PID_p2p+0x1e>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <PID_p2p+0x20>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	4b 01       	movw	r8, r22
    16f6:	5c 01       	movw	r10, r24
    16f8:	29 83       	std	Y+1, r18	; 0x01
    16fa:	3a 83       	std	Y+2, r19	; 0x02
    16fc:	4b 83       	std	Y+3, r20	; 0x03
    16fe:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1700:	40 90 76 01 	lds	r4, 0x0176
    1704:	50 90 77 01 	lds	r5, 0x0177
    1708:	60 90 78 01 	lds	r6, 0x0178
    170c:	70 90 79 01 	lds	r7, 0x0179
    1710:	20 91 72 01 	lds	r18, 0x0172
    1714:	30 91 73 01 	lds	r19, 0x0173
    1718:	40 91 74 01 	lds	r20, 0x0174
    171c:	50 91 75 01 	lds	r21, 0x0175
    1720:	c3 01       	movw	r24, r6
    1722:	b2 01       	movw	r22, r4
    1724:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    1728:	6b 01       	movw	r12, r22
    172a:	7c 01       	movw	r14, r24
    172c:	60 93 6e 01 	sts	0x016E, r22
    1730:	70 93 6f 01 	sts	0x016F, r23
    1734:	80 93 70 01 	sts	0x0170, r24
    1738:	90 93 71 01 	sts	0x0171, r25
	float P =0, D = 0;
	P = Kp * alpha;
    173c:	a5 01       	movw	r20, r10
    173e:	94 01       	movw	r18, r8
    1740:	c3 01       	movw	r24, r6
    1742:	b2 01       	movw	r22, r4
    1744:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1748:	4b 01       	movw	r8, r22
    174a:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    174c:	29 81       	ldd	r18, Y+1	; 0x01
    174e:	3a 81       	ldd	r19, Y+2	; 0x02
    1750:	4b 81       	ldd	r20, Y+3	; 0x03
    1752:	5c 81       	ldd	r21, Y+4	; 0x04
    1754:	c7 01       	movw	r24, r14
    1756:	b6 01       	movw	r22, r12
    1758:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    175c:	9b 01       	movw	r18, r22
    175e:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    1760:	c5 01       	movw	r24, r10
    1762:	b4 01       	movw	r22, r8
    1764:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    1768:	60 93 6a 01 	sts	0x016A, r22
    176c:	70 93 6b 01 	sts	0x016B, r23
    1770:	80 93 6c 01 	sts	0x016C, r24
    1774:	90 93 6d 01 	sts	0x016D, r25
	
	alpha_last = alpha;
    1778:	40 92 72 01 	sts	0x0172, r4
    177c:	50 92 73 01 	sts	0x0173, r5
    1780:	60 92 74 01 	sts	0x0174, r6
    1784:	70 92 75 01 	sts	0x0175, r7
	
	m_usb_tx_string("alpha*10: ");
    1788:	87 e0       	ldi	r24, 0x07	; 7
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	60 91 76 01 	lds	r22, 0x0176
    179c:	70 91 77 01 	lds	r23, 0x0177
    17a0:	80 91 78 01 	lds	r24, 0x0178
    17a4:	90 91 79 01 	lds	r25, 0x0179
    17a8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    17ac:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    17b0:	cb 01       	movw	r24, r22
    17b2:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	92 e0       	ldi	r25, 0x02	; 2
    17ba:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	m_usb_tx_string("gain*10: ");
    17be:	8b ef       	ldi	r24, 0xFB	; 251
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e2       	ldi	r20, 0x20	; 32
    17cc:	51 e4       	ldi	r21, 0x41	; 65
    17ce:	60 91 6a 01 	lds	r22, 0x016A
    17d2:	70 91 6b 01 	lds	r23, 0x016B
    17d6:	80 91 6c 01 	lds	r24, 0x016C
    17da:	90 91 6d 01 	lds	r25, 0x016D
    17de:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    17e2:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    17e6:	cb 01       	movw	r24, r22
    17e8:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    17ec:	89 ef       	ldi	r24, 0xF9	; 249
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	if(gain_loc<0){  // turn right
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	60 91 6a 01 	lds	r22, 0x016A
    17fe:	70 91 6b 01 	lds	r23, 0x016B
    1802:	80 91 6c 01 	lds	r24, 0x016C
    1806:	90 91 6d 01 	lds	r25, 0x016D
    180a:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    180e:	88 23       	and	r24, r24
    1810:	0c f0       	brlt	.+2      	; 0x1814 <PID_p2p+0x144>
    1812:	44 c0       	rjmp	.+136    	; 0x189c <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    1814:	8d ee       	ldi	r24, 0xED	; 237
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    181c:	60 91 6a 01 	lds	r22, 0x016A
    1820:	70 91 6b 01 	lds	r23, 0x016B
    1824:	80 91 6c 01 	lds	r24, 0x016C
    1828:	90 91 6d 01 	lds	r25, 0x016D
    182c:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1830:	9b 01       	movw	r18, r22
    1832:	77 23       	and	r23, r23
    1834:	24 f4       	brge	.+8      	; 0x183e <PID_p2p+0x16e>
    1836:	22 27       	eor	r18, r18
    1838:	33 27       	eor	r19, r19
    183a:	26 1b       	sub	r18, r22
    183c:	37 0b       	sbc	r19, r23
    183e:	8a e8       	ldi	r24, 0x8A	; 138
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	82 1b       	sub	r24, r18
    1844:	93 0b       	sbc	r25, r19
    1846:	90 93 8b 00 	sts	0x008B, r25
    184a:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    184e:	e0 90 20 01 	lds	r14, 0x0120
    1852:	f0 90 21 01 	lds	r15, 0x0121
    1856:	60 91 6a 01 	lds	r22, 0x016A
    185a:	70 91 6b 01 	lds	r23, 0x016B
    185e:	80 91 6c 01 	lds	r24, 0x016C
    1862:	90 91 6d 01 	lds	r25, 0x016D
    1866:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    186a:	9b 01       	movw	r18, r22
    186c:	77 23       	and	r23, r23
    186e:	24 f4       	brge	.+8      	; 0x1878 <PID_p2p+0x1a8>
    1870:	22 27       	eor	r18, r18
    1872:	33 27       	eor	r19, r19
    1874:	26 1b       	sub	r18, r22
    1876:	37 0b       	sbc	r19, r23
    1878:	e2 16       	cp	r14, r18
    187a:	f3 06       	cpc	r15, r19
    187c:	44 f4       	brge	.+16     	; 0x188e <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    187e:	8a e8       	ldi	r24, 0x8A	; 138
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	8e 19       	sub	r24, r14
    1884:	9f 09       	sbc	r25, r15
    1886:	90 93 8b 00 	sts	0x008B, r25
    188a:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    188e:	8a e8       	ldi	r24, 0x8A	; 138
    1890:	92 e0       	ldi	r25, 0x02	; 2
    1892:	90 93 8d 00 	sts	0x008D, r25
    1896:	80 93 8c 00 	sts	0x008C, r24
    189a:	43 c0       	rjmp	.+134    	; 0x1922 <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    189c:	82 ee       	ldi	r24, 0xE2	; 226
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    18a4:	60 91 6a 01 	lds	r22, 0x016A
    18a8:	70 91 6b 01 	lds	r23, 0x016B
    18ac:	80 91 6c 01 	lds	r24, 0x016C
    18b0:	90 91 6d 01 	lds	r25, 0x016D
    18b4:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    18b8:	9b 01       	movw	r18, r22
    18ba:	77 23       	and	r23, r23
    18bc:	24 f4       	brge	.+8      	; 0x18c6 <PID_p2p+0x1f6>
    18be:	22 27       	eor	r18, r18
    18c0:	33 27       	eor	r19, r19
    18c2:	26 1b       	sub	r18, r22
    18c4:	37 0b       	sbc	r19, r23
    18c6:	8a e8       	ldi	r24, 0x8A	; 138
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	82 1b       	sub	r24, r18
    18cc:	93 0b       	sbc	r25, r19
    18ce:	90 93 8d 00 	sts	0x008D, r25
    18d2:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    18d6:	e0 90 20 01 	lds	r14, 0x0120
    18da:	f0 90 21 01 	lds	r15, 0x0121
    18de:	60 91 6a 01 	lds	r22, 0x016A
    18e2:	70 91 6b 01 	lds	r23, 0x016B
    18e6:	80 91 6c 01 	lds	r24, 0x016C
    18ea:	90 91 6d 01 	lds	r25, 0x016D
    18ee:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    18f2:	9b 01       	movw	r18, r22
    18f4:	77 23       	and	r23, r23
    18f6:	24 f4       	brge	.+8      	; 0x1900 <PID_p2p+0x230>
    18f8:	22 27       	eor	r18, r18
    18fa:	33 27       	eor	r19, r19
    18fc:	26 1b       	sub	r18, r22
    18fe:	37 0b       	sbc	r19, r23
    1900:	e2 16       	cp	r14, r18
    1902:	f3 06       	cpc	r15, r19
    1904:	44 f4       	brge	.+16     	; 0x1916 <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    1906:	8a e8       	ldi	r24, 0x8A	; 138
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	8e 19       	sub	r24, r14
    190c:	9f 09       	sbc	r25, r15
    190e:	90 93 8d 00 	sts	0x008D, r25
    1912:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1916:	8a e8       	ldi	r24, 0x8A	; 138
    1918:	92 e0       	ldi	r25, 0x02	; 2
    191a:	90 93 8b 00 	sts	0x008B, r25
    191e:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	7f 90       	pop	r7
    1940:	6f 90       	pop	r6
    1942:	5f 90       	pop	r5
    1944:	4f 90       	pop	r4
    1946:	08 95       	ret

00001948 <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
	unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
    1950:	f8 01       	movw	r30, r16
    1952:	20 81       	ld	r18, Z
    1954:	31 81       	ldd	r19, Z+1	; 0x01
    1956:	42 81       	ldd	r20, Z+2	; 0x02
    1958:	53 81       	ldd	r21, Z+3	; 0x03
    195a:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    195e:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1962:	9b 01       	movw	r18, r22
    1964:	77 23       	and	r23, r23
    1966:	24 f4       	brge	.+8      	; 0x1970 <find_if_reach+0x28>
    1968:	22 27       	eor	r18, r18
    196a:	33 27       	eor	r19, r19
    196c:	26 1b       	sub	r18, r22
    196e:	37 0b       	sbc	r19, r23
    1970:	22 9f       	mul	r18, r18
    1972:	e0 01       	movw	r28, r0
    1974:	23 9f       	mul	r18, r19
    1976:	d0 0d       	add	r29, r0
    1978:	d0 0d       	add	r29, r0
    197a:	11 24       	eor	r1, r1
	m_usb_tx_string("dist: ");
    197c:	8b ed       	ldi	r24, 0xDB	; 219
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(dist); 
    1984:	ce 01       	movw	r24, r28
    1986:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    198a:	89 ed       	ldi	r24, 0xD9	; 217
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	if (dist < dist_threshold){
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	20 91 24 01 	lds	r18, 0x0124
    199a:	30 91 25 01 	lds	r19, 0x0125
    199e:	c2 17       	cp	r28, r18
    19a0:	d3 07       	cpc	r29, r19
    19a2:	10 f0       	brcs	.+4      	; 0x19a8 <find_if_reach+0x60>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int state, float *goal, float *c_wii, float *dir){
    19b2:	2f 92       	push	r2
    19b4:	3f 92       	push	r3
    19b6:	4f 92       	push	r4
    19b8:	5f 92       	push	r5
    19ba:	6f 92       	push	r6
    19bc:	7f 92       	push	r7
    19be:	8f 92       	push	r8
    19c0:	9f 92       	push	r9
    19c2:	af 92       	push	r10
    19c4:	bf 92       	push	r11
    19c6:	cf 92       	push	r12
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	c6 58       	subi	r28, 0x86	; 134
    19dc:	d1 09       	sbc	r29, r1
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cd 57       	subi	r28, 0x7D	; 125
    19ea:	df 4f       	sbci	r29, 0xFF	; 255
    19ec:	99 83       	std	Y+1, r25	; 0x01
    19ee:	88 83       	st	Y, r24
    19f0:	c3 58       	subi	r28, 0x83	; 131
    19f2:	d0 40       	sbci	r29, 0x00	; 0
    19f4:	cb 57       	subi	r28, 0x7B	; 123
    19f6:	df 4f       	sbci	r29, 0xFF	; 255
    19f8:	79 83       	std	Y+1, r23	; 0x01
    19fa:	68 83       	st	Y, r22
    19fc:	c5 58       	subi	r28, 0x85	; 133
    19fe:	d0 40       	sbci	r29, 0x00	; 0
    1a00:	ed 96       	adiw	r28, 0x3d	; 61
    1a02:	5f af       	std	Y+63, r21	; 0x3f
    1a04:	4e af       	std	Y+62, r20	; 0x3e
    1a06:	ed 97       	sbiw	r28, 0x3d	; 61
    1a08:	ef 96       	adiw	r28, 0x3f	; 63
    1a0a:	3f af       	std	Y+63, r19	; 0x3f
    1a0c:	2e af       	std	Y+62, r18	; 0x3e
    1a0e:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    1a10:	8a e8       	ldi	r24, 0x8A	; 138
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 99 18 	call	0x3132	; 0x3132 <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    1a18:	60 91 8a 01 	lds	r22, 0x018A
    1a1c:	70 91 8b 01 	lds	r23, 0x018B
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1a28:	69 83       	std	Y+1, r22	; 0x01
    1a2a:	7a 83       	std	Y+2, r23	; 0x02
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	60 91 90 01 	lds	r22, 0x0190
    1a34:	70 91 91 01 	lds	r23, 0x0191
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1a40:	6d 83       	std	Y+5, r22	; 0x05
    1a42:	7e 83       	std	Y+6, r23	; 0x06
    1a44:	8f 83       	std	Y+7, r24	; 0x07
    1a46:	98 87       	std	Y+8, r25	; 0x08
    1a48:	60 91 96 01 	lds	r22, 0x0196
    1a4c:	70 91 97 01 	lds	r23, 0x0197
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1a58:	69 87       	std	Y+9, r22	; 0x09
    1a5a:	7a 87       	std	Y+10, r23	; 0x0a
    1a5c:	8b 87       	std	Y+11, r24	; 0x0b
    1a5e:	9c 87       	std	Y+12, r25	; 0x0c
    1a60:	60 91 9c 01 	lds	r22, 0x019C
    1a64:	70 91 9d 01 	lds	r23, 0x019D
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1a70:	6d 87       	std	Y+13, r22	; 0x0d
    1a72:	7e 87       	std	Y+14, r23	; 0x0e
    1a74:	8f 87       	std	Y+15, r24	; 0x0f
    1a76:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    1a78:	60 91 8c 01 	lds	r22, 0x018C
    1a7c:	70 91 8d 01 	lds	r23, 0x018D
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1a88:	69 8b       	std	Y+17, r22	; 0x11
    1a8a:	7a 8b       	std	Y+18, r23	; 0x12
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
    1a8e:	9c 8b       	std	Y+20, r25	; 0x14
    1a90:	60 91 92 01 	lds	r22, 0x0192
    1a94:	70 91 93 01 	lds	r23, 0x0193
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1aa0:	6d 8b       	std	Y+21, r22	; 0x15
    1aa2:	7e 8b       	std	Y+22, r23	; 0x16
    1aa4:	8f 8b       	std	Y+23, r24	; 0x17
    1aa6:	98 8f       	std	Y+24, r25	; 0x18
    1aa8:	60 91 98 01 	lds	r22, 0x0198
    1aac:	70 91 99 01 	lds	r23, 0x0199
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1ab8:	69 8f       	std	Y+25, r22	; 0x19
    1aba:	7a 8f       	std	Y+26, r23	; 0x1a
    1abc:	8b 8f       	std	Y+27, r24	; 0x1b
    1abe:	9c 8f       	std	Y+28, r25	; 0x1c
    1ac0:	60 91 9e 01 	lds	r22, 0x019E
    1ac4:	70 91 9f 01 	lds	r23, 0x019F
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    1ad0:	6d 8f       	std	Y+29, r22	; 0x1d
    1ad2:	7e 8f       	std	Y+30, r23	; 0x1e
    1ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad6:	98 a3       	std	Y+32, r25	; 0x20
    1ad8:	9e 01       	movw	r18, r28
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	eb 96       	adiw	r28, 0x3b	; 59
    1ae0:	3f af       	std	Y+63, r19	; 0x3f
    1ae2:	2e af       	std	Y+62, r18	; 0x3e
    1ae4:	eb 97       	sbiw	r28, 0x3b	; 59
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	41 96       	adiw	r24, 0x11	; 17
    1aea:	e3 96       	adiw	r28, 0x33	; 51
    1aec:	9f af       	std	Y+63, r25	; 0x3f
    1aee:	8e af       	std	Y+62, r24	; 0x3e
    1af0:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1af2:	ab 96       	adiw	r28, 0x2b	; 43
    1af4:	1f ae       	std	Y+63, r1	; 0x3f
    1af6:	1e ae       	std	Y+62, r1	; 0x3e
    1af8:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    1afa:	e9 96       	adiw	r28, 0x39	; 57
    1afc:	1f ae       	std	Y+63, r1	; 0x3f
    1afe:	1e ae       	std	Y+62, r1	; 0x3e
    1b00:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1b02:	ab 96       	adiw	r28, 0x2b	; 43
    1b04:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b06:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b08:	ab 97       	sbiw	r28, 0x2b	; 43
    1b0a:	11 96       	adiw	r26, 0x01	; 1
    1b0c:	e7 96       	adiw	r28, 0x37	; 55
    1b0e:	bf af       	std	Y+63, r27	; 0x3f
    1b10:	ae af       	std	Y+62, r26	; 0x3e
    1b12:	e7 97       	sbiw	r28, 0x37	; 55
    1b14:	14 97       	sbiw	r26, 0x04	; 4
    1b16:	0c f0       	brlt	.+2      	; 0x1b1a <localization+0x168>
    1b18:	44 c6       	rjmp	.+3208   	; 0x27a2 <localization+0xdf0>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1b1a:	eb 96       	adiw	r28, 0x3b	; 59
    1b1c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b1e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b20:	eb 97       	sbiw	r28, 0x3b	; 59
    1b22:	81 90       	ld	r8, Z+
    1b24:	91 90       	ld	r9, Z+
    1b26:	a1 90       	ld	r10, Z+
    1b28:	b1 90       	ld	r11, Z+
    1b2a:	e9 96       	adiw	r28, 0x39	; 57
    1b2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b30:	e9 97       	sbiw	r28, 0x39	; 57
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	29 e3       	ldi	r18, 0x39	; 57
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	2c 0f       	add	r18, r28
    1b3c:	3d 1f       	adc	r19, r29
    1b3e:	28 0f       	add	r18, r24
    1b40:	39 1f       	adc	r19, r25
    1b42:	a3 96       	adiw	r28, 0x23	; 35
    1b44:	3f af       	std	Y+63, r19	; 0x3f
    1b46:	2e af       	std	Y+62, r18	; 0x3e
    1b48:	a3 97       	sbiw	r28, 0x23	; 35
    1b4a:	a5 e4       	ldi	r26, 0x45	; 69
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ac 0f       	add	r26, r28
    1b50:	bd 1f       	adc	r27, r29
    1b52:	a8 0f       	add	r26, r24
    1b54:	b9 1f       	adc	r27, r25
    1b56:	a7 96       	adiw	r28, 0x27	; 39
    1b58:	bf af       	std	Y+63, r27	; 0x3f
    1b5a:	ae af       	std	Y+62, r26	; 0x3e
    1b5c:	a7 97       	sbiw	r28, 0x27	; 39
    1b5e:	e9 96       	adiw	r28, 0x39	; 57
    1b60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b64:	e9 97       	sbiw	r28, 0x39	; 57
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0f 2e       	mov	r0, r31
    1b70:	f1 e2       	ldi	r31, 0x21	; 33
    1b72:	6f 2e       	mov	r6, r31
    1b74:	71 2c       	mov	r7, r1
    1b76:	f0 2d       	mov	r31, r0
    1b78:	6c 0e       	add	r6, r28
    1b7a:	7d 1e       	adc	r7, r29
    1b7c:	68 0e       	add	r6, r24
    1b7e:	79 1e       	adc	r7, r25
    1b80:	e3 96       	adiw	r28, 0x33	; 51
    1b82:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b84:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b86:	e3 97       	sbiw	r28, 0x33	; 51
    1b88:	2c 5f       	subi	r18, 0xFC	; 252
    1b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8c:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1b8e:	e7 96       	adiw	r28, 0x37	; 55
    1b90:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b92:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b94:	e7 97       	sbiw	r28, 0x37	; 55
    1b96:	e1 96       	adiw	r28, 0x31	; 49
    1b98:	8c ae       	std	Y+60, r8	; 0x3c
    1b9a:	9d ae       	std	Y+61, r9	; 0x3d
    1b9c:	ae ae       	std	Y+62, r10	; 0x3e
    1b9e:	bf ae       	std	Y+63, r11	; 0x3f
    1ba0:	e1 97       	sbiw	r28, 0x31	; 49
    1ba2:	59 01       	movw	r10, r18
    1ba4:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 ec       	ldi	r19, 0xC0	; 192
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	54 e4       	ldi	r21, 0x44	; 68
    1bae:	e1 96       	adiw	r28, 0x31	; 49
    1bb0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bb2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bb4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bb8:	e1 97       	sbiw	r28, 0x31	; 49
    1bba:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <localization+0x212>
    1bc2:	70 c0       	rjmp	.+224    	; 0x1ca4 <localization+0x2f2>
    1bc4:	e3 96       	adiw	r28, 0x33	; 51
    1bc6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bc8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bca:	e3 97       	sbiw	r28, 0x33	; 51
    1bcc:	cd 90       	ld	r12, X+
    1bce:	dd 90       	ld	r13, X+
    1bd0:	ed 90       	ld	r14, X+
    1bd2:	fc 90       	ld	r15, X
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 ec       	ldi	r19, 0xC0	; 192
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	c7 01       	movw	r24, r14
    1bde:	b6 01       	movw	r22, r12
    1be0:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	09 f4       	brne	.+2      	; 0x1bea <localization+0x238>
    1be8:	5d c0       	rjmp	.+186    	; 0x1ca4 <localization+0x2f2>
    1bea:	f1 01       	movw	r30, r2
    1bec:	40 80       	ld	r4, Z
    1bee:	51 80       	ldd	r5, Z+1	; 0x01
    1bf0:	62 80       	ldd	r6, Z+2	; 0x02
    1bf2:	73 80       	ldd	r7, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 ec       	ldi	r19, 0xC0	; 192
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	54 e4       	ldi	r21, 0x44	; 68
    1bfc:	c3 01       	movw	r24, r6
    1bfe:	b2 01       	movw	r22, r4
    1c00:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <localization+0x258>
    1c08:	4d c0       	rjmp	.+154    	; 0x1ca4 <localization+0x2f2>
    1c0a:	d5 01       	movw	r26, r10
    1c0c:	8d 91       	ld	r24, X+
    1c0e:	9d 91       	ld	r25, X+
    1c10:	0d 90       	ld	r0, X+
    1c12:	bc 91       	ld	r27, X
    1c14:	a0 2d       	mov	r26, r0
    1c16:	c1 58       	subi	r28, 0x81	; 129
    1c18:	df 4f       	sbci	r29, 0xFF	; 255
    1c1a:	88 83       	st	Y, r24
    1c1c:	99 83       	std	Y+1, r25	; 0x01
    1c1e:	aa 83       	std	Y+2, r26	; 0x02
    1c20:	bb 83       	std	Y+3, r27	; 0x03
    1c22:	cf 57       	subi	r28, 0x7F	; 127
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 ec       	ldi	r19, 0xC0	; 192
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	54 e4       	ldi	r21, 0x44	; 68
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	a9 f1       	breq	.+106    	; 0x1ca4 <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    1c3a:	a3 01       	movw	r20, r6
    1c3c:	92 01       	movw	r18, r4
    1c3e:	e1 96       	adiw	r28, 0x31	; 49
    1c40:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c42:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c44:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c46:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c48:	e1 97       	sbiw	r28, 0x31	; 49
    1c4a:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    1c4e:	2b 01       	movw	r4, r22
    1c50:	3c 01       	movw	r6, r24
    1c52:	c1 58       	subi	r28, 0x81	; 129
    1c54:	df 4f       	sbci	r29, 0xFF	; 255
    1c56:	28 81       	ld	r18, Y
    1c58:	39 81       	ldd	r19, Y+1	; 0x01
    1c5a:	4a 81       	ldd	r20, Y+2	; 0x02
    1c5c:	5b 81       	ldd	r21, Y+3	; 0x03
    1c5e:	cf 57       	subi	r28, 0x7F	; 127
    1c60:	d0 40       	sbci	r29, 0x00	; 0
    1c62:	c7 01       	movw	r24, r14
    1c64:	b6 01       	movw	r22, r12
    1c66:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    1c6a:	6b 01       	movw	r12, r22
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	a3 01       	movw	r20, r6
    1c70:	92 01       	movw	r18, r4
    1c72:	c3 01       	movw	r24, r6
    1c74:	b2 01       	movw	r22, r4
    1c76:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1c7a:	2b 01       	movw	r4, r22
    1c7c:	3c 01       	movw	r6, r24
    1c7e:	a7 01       	movw	r20, r14
    1c80:	96 01       	movw	r18, r12
    1c82:	c7 01       	movw	r24, r14
    1c84:	b6 01       	movw	r22, r12
    1c86:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	c3 01       	movw	r24, r6
    1c90:	b2 01       	movw	r22, r4
    1c92:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    1c96:	0e 94 a5 1b 	call	0x374a	; 0x374a <sqrt>
    1c9a:	f4 01       	movw	r30, r8
    1c9c:	60 83       	st	Z, r22
    1c9e:	71 83       	std	Z+1, r23	; 0x01
    1ca0:	82 83       	std	Z+2, r24	; 0x02
    1ca2:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1ca4:	a3 96       	adiw	r28, 0x23	; 35
    1ca6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ca8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1caa:	a3 97       	sbiw	r28, 0x23	; 35
    1cac:	ab 96       	adiw	r28, 0x2b	; 43
    1cae:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cb0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cb2:	ab 97       	sbiw	r28, 0x2b	; 43
    1cb4:	ed 93       	st	X+, r30
    1cb6:	fd 93       	st	X+, r31
    1cb8:	a3 96       	adiw	r28, 0x23	; 35
    1cba:	bf af       	std	Y+63, r27	; 0x3f
    1cbc:	ae af       	std	Y+62, r26	; 0x3e
    1cbe:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1cc0:	a7 96       	adiw	r28, 0x27	; 39
    1cc2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1cc4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1cc6:	a7 97       	sbiw	r28, 0x27	; 39
    1cc8:	0d 93       	st	X+, r16
    1cca:	1d 93       	st	X+, r17
    1ccc:	a7 96       	adiw	r28, 0x27	; 39
    1cce:	bf af       	std	Y+63, r27	; 0x3f
    1cd0:	ae af       	std	Y+62, r26	; 0x3e
    1cd2:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1cd4:	0f 5f       	subi	r16, 0xFF	; 255
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	b4 e0       	ldi	r27, 0x04	; 4
    1cda:	2b 0e       	add	r2, r27
    1cdc:	31 1c       	adc	r3, r1
    1cde:	e4 e0       	ldi	r30, 0x04	; 4
    1ce0:	ae 0e       	add	r10, r30
    1ce2:	b1 1c       	adc	r11, r1
    1ce4:	f4 e0       	ldi	r31, 0x04	; 4
    1ce6:	8f 0e       	add	r8, r31
    1ce8:	91 1c       	adc	r9, r1
    1cea:	04 30       	cpi	r16, 0x04	; 4
    1cec:	11 05       	cpc	r17, r1
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <localization+0x340>
    1cf0:	5a cf       	rjmp	.-332    	; 0x1ba6 <localization+0x1f4>
    1cf2:	e9 96       	adiw	r28, 0x39	; 57
    1cf4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cf6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cf8:	e9 97       	sbiw	r28, 0x39	; 57
    1cfa:	e7 96       	adiw	r28, 0x37	; 55
    1cfc:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cfe:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d00:	e7 97       	sbiw	r28, 0x37	; 55
    1d02:	82 1b       	sub	r24, r18
    1d04:	93 0b       	sbc	r25, r19
    1d06:	dc 01       	movw	r26, r24
    1d08:	14 96       	adiw	r26, 0x04	; 4
    1d0a:	e9 96       	adiw	r28, 0x39	; 57
    1d0c:	bf af       	std	Y+63, r27	; 0x3f
    1d0e:	ae af       	std	Y+62, r26	; 0x3e
    1d10:	e9 97       	sbiw	r28, 0x39	; 57
    1d12:	eb 96       	adiw	r28, 0x3b	; 59
    1d14:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d18:	eb 97       	sbiw	r28, 0x3b	; 59
    1d1a:	34 96       	adiw	r30, 0x04	; 4
    1d1c:	eb 96       	adiw	r28, 0x3b	; 59
    1d1e:	ff af       	std	Y+63, r31	; 0x3f
    1d20:	ee af       	std	Y+62, r30	; 0x3e
    1d22:	eb 97       	sbiw	r28, 0x3b	; 59
    1d24:	e3 96       	adiw	r28, 0x33	; 51
    1d26:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d28:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d2a:	e3 97       	sbiw	r28, 0x33	; 51
    1d2c:	2c 5f       	subi	r18, 0xFC	; 252
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	e3 96       	adiw	r28, 0x33	; 51
    1d32:	3f af       	std	Y+63, r19	; 0x3f
    1d34:	2e af       	std	Y+62, r18	; 0x3e
    1d36:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1d38:	e7 96       	adiw	r28, 0x37	; 55
    1d3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d3e:	e7 97       	sbiw	r28, 0x37	; 55
    1d40:	03 97       	sbiw	r24, 0x03	; 3
    1d42:	49 f0       	breq	.+18     	; 0x1d56 <localization+0x3a4>
    1d44:	e7 96       	adiw	r28, 0x37	; 55
    1d46:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d48:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d4a:	e7 97       	sbiw	r28, 0x37	; 55
    1d4c:	ab 96       	adiw	r28, 0x2b	; 43
    1d4e:	bf af       	std	Y+63, r27	; 0x3f
    1d50:	ae af       	std	Y+62, r26	; 0x3e
    1d52:	ab 97       	sbiw	r28, 0x2b	; 43
    1d54:	d6 ce       	rjmp	.-596    	; 0x1b02 <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1d56:	e9 96       	adiw	r28, 0x39	; 57
    1d58:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d5a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d5c:	e9 97       	sbiw	r28, 0x39	; 57
    1d5e:	1e 16       	cp	r1, r30
    1d60:	1f 06       	cpc	r1, r31
    1d62:	84 f5       	brge	.+96     	; 0x1dc4 <localization+0x412>
    1d64:	6e 01       	movw	r12, r28
    1d66:	f1 e2       	ldi	r31, 0x21	; 33
    1d68:	cf 0e       	add	r12, r31
    1d6a:	d1 1c       	adc	r13, r1
    1d6c:	21 2c       	mov	r2, r1
    1d6e:	31 2c       	mov	r3, r1
    1d70:	00 e0       	ldi	r16, 0x00	; 0
    1d72:	10 e0       	ldi	r17, 0x00	; 0
    1d74:	e1 2c       	mov	r14, r1
    1d76:	f1 2c       	mov	r15, r1
    1d78:	e9 96       	adiw	r28, 0x39	; 57
    1d7a:	ae ac       	ldd	r10, Y+62	; 0x3e
    1d7c:	bf ac       	ldd	r11, Y+63	; 0x3f
    1d7e:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    1d80:	d6 01       	movw	r26, r12
    1d82:	4d 90       	ld	r4, X+
    1d84:	5d 90       	ld	r5, X+
    1d86:	6d 90       	ld	r6, X+
    1d88:	7d 90       	ld	r7, X+
    1d8a:	6d 01       	movw	r12, r26
    1d8c:	b8 01       	movw	r22, r16
    1d8e:	88 27       	eor	r24, r24
    1d90:	77 fd       	sbrc	r23, 7
    1d92:	80 95       	com	r24
    1d94:	98 2f       	mov	r25, r24
    1d96:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
    1d9a:	9b 01       	movw	r18, r22
    1d9c:	ac 01       	movw	r20, r24
    1d9e:	c3 01       	movw	r24, r6
    1da0:	b2 01       	movw	r22, r4
    1da2:	0e 94 3a 1b 	call	0x3674	; 0x3674 <__gesf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	34 f4       	brge	.+12     	; 0x1db6 <localization+0x404>
			indmax = i;
			dmax = d[i];
    1daa:	c3 01       	movw	r24, r6
    1dac:	b2 01       	movw	r22, r4
    1dae:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1db2:	8b 01       	movw	r16, r22
    1db4:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1db6:	bf ef       	ldi	r27, 0xFF	; 255
    1db8:	eb 1a       	sub	r14, r27
    1dba:	fb 0a       	sbc	r15, r27
    1dbc:	ea 14       	cp	r14, r10
    1dbe:	fb 04       	cpc	r15, r11
    1dc0:	f9 f6       	brne	.-66     	; 0x1d80 <localization+0x3ce>
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <localization+0x41a>
    1dc4:	21 2c       	mov	r2, r1
    1dc6:	31 2c       	mov	r3, r1
    1dc8:	00 e0       	ldi	r16, 0x00	; 0
    1dca:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1dcc:	8c e7       	ldi	r24, 0x7C	; 124
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(dmax);
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    1dda:	8a e7       	ldi	r24, 0x7A	; 122
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1de2:	e9 96       	adiw	r28, 0x39	; 57
    1de4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1de6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1de8:	e9 97       	sbiw	r28, 0x39	; 57
    1dea:	1e 16       	cp	r1, r30
    1dec:	1f 06       	cpc	r1, r31
    1dee:	dc f5       	brge	.+118    	; 0x1e66 <localization+0x4b4>
    1df0:	6e 01       	movw	r12, r28
    1df2:	f1 e2       	ldi	r31, 0x21	; 33
    1df4:	cf 0e       	add	r12, r31
    1df6:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1df8:	a3 96       	adiw	r28, 0x23	; 35
    1dfa:	1f ae       	std	Y+63, r1	; 0x3f
    1dfc:	1e ae       	std	Y+62, r1	; 0x3e
    1dfe:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    1e00:	0f 2e       	mov	r0, r31
    1e02:	f0 e1       	ldi	r31, 0x10	; 16
    1e04:	af 2e       	mov	r10, r31
    1e06:	f7 e2       	ldi	r31, 0x27	; 39
    1e08:	bf 2e       	mov	r11, r31
    1e0a:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    1e0c:	e1 2c       	mov	r14, r1
    1e0e:	f1 2c       	mov	r15, r1
    1e10:	48 01       	movw	r8, r16
    1e12:	e9 96       	adiw	r28, 0x39	; 57
    1e14:	0e ad       	ldd	r16, Y+62	; 0x3e
    1e16:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e18:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    1e1a:	d6 01       	movw	r26, r12
    1e1c:	4d 90       	ld	r4, X+
    1e1e:	5d 90       	ld	r5, X+
    1e20:	6d 90       	ld	r6, X+
    1e22:	7d 90       	ld	r7, X+
    1e24:	6d 01       	movw	r12, r26
    1e26:	b5 01       	movw	r22, r10
    1e28:	88 27       	eor	r24, r24
    1e2a:	77 fd       	sbrc	r23, 7
    1e2c:	80 95       	com	r24
    1e2e:	98 2f       	mov	r25, r24
    1e30:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
    1e34:	9b 01       	movw	r18, r22
    1e36:	ac 01       	movw	r20, r24
    1e38:	c3 01       	movw	r24, r6
    1e3a:	b2 01       	movw	r22, r4
    1e3c:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1e40:	88 23       	and	r24, r24
    1e42:	4c f4       	brge	.+18     	; 0x1e56 <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    1e44:	c3 01       	movw	r24, r6
    1e46:	b2 01       	movw	r22, r4
    1e48:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1e4c:	5b 01       	movw	r10, r22
    1e4e:	a3 96       	adiw	r28, 0x23	; 35
    1e50:	ff ae       	std	Y+63, r15	; 0x3f
    1e52:	ee ae       	std	Y+62, r14	; 0x3e
    1e54:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1e56:	bf ef       	ldi	r27, 0xFF	; 255
    1e58:	eb 1a       	sub	r14, r27
    1e5a:	fb 0a       	sbc	r15, r27
    1e5c:	e0 16       	cp	r14, r16
    1e5e:	f1 06       	cpc	r15, r17
    1e60:	e1 f6       	brne	.-72     	; 0x1e1a <localization+0x468>
    1e62:	84 01       	movw	r16, r8
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1e66:	a3 96       	adiw	r28, 0x23	; 35
    1e68:	1f ae       	std	Y+63, r1	; 0x3f
    1e6a:	1e ae       	std	Y+62, r1	; 0x3e
    1e6c:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1e6e:	80 90 18 01 	lds	r8, 0x0118
    1e72:	90 90 19 01 	lds	r9, 0x0119
    1e76:	a0 90 1a 01 	lds	r10, 0x011A
    1e7a:	b0 90 1b 01 	lds	r11, 0x011B
    1e7e:	b8 01       	movw	r22, r16
    1e80:	88 27       	eor	r24, r24
    1e82:	77 fd       	sbrc	r23, 7
    1e84:	80 95       	com	r24
    1e86:	98 2f       	mov	r25, r24
    1e88:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
    1e8c:	a5 01       	movw	r20, r10
    1e8e:	94 01       	movw	r18, r8
    1e90:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    1e94:	2b 01       	movw	r4, r22
    1e96:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    1e98:	c0 90 1c 01 	lds	r12, 0x011C
    1e9c:	d0 90 1d 01 	lds	r13, 0x011D
    1ea0:	e0 90 1e 01 	lds	r14, 0x011E
    1ea4:	f0 90 1f 01 	lds	r15, 0x011F
    1ea8:	ec e0       	ldi	r30, 0x0C	; 12
    1eaa:	f1 e0       	ldi	r31, 0x01	; 1
    1eac:	ab 96       	adiw	r28, 0x2b	; 43
    1eae:	ff af       	std	Y+63, r31	; 0x3f
    1eb0:	ee af       	std	Y+62, r30	; 0x3e
    1eb2:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1eb4:	a7 96       	adiw	r28, 0x27	; 39
    1eb6:	1f ae       	std	Y+63, r1	; 0x3f
    1eb8:	1e ae       	std	Y+62, r1	; 0x3e
    1eba:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    1ebc:	01 e0       	ldi	r16, 0x01	; 1
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
    1ec0:	af 96       	adiw	r28, 0x2f	; 47
    1ec2:	3f ae       	std	Y+63, r3	; 0x3f
    1ec4:	2e ae       	std	Y+62, r2	; 0x3e
    1ec6:	af 97       	sbiw	r28, 0x2f	; 47
    1ec8:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    1eca:	d1 01       	movw	r26, r2
    1ecc:	2d 91       	ld	r18, X+
    1ece:	3d 91       	ld	r19, X+
    1ed0:	4d 91       	ld	r20, X+
    1ed2:	5d 91       	ld	r21, X+
    1ed4:	1d 01       	movw	r2, r26
    1ed6:	c3 01       	movw	r24, r6
    1ed8:	b2 01       	movw	r22, r4
    1eda:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    1ede:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    1ee2:	9b 01       	movw	r18, r22
    1ee4:	77 23       	and	r23, r23
    1ee6:	24 f4       	brge	.+8      	; 0x1ef0 <localization+0x53e>
    1ee8:	22 27       	eor	r18, r18
    1eea:	33 27       	eor	r19, r19
    1eec:	26 1b       	sub	r18, r22
    1eee:	37 0b       	sbc	r19, r23
    1ef0:	b9 01       	movw	r22, r18
    1ef2:	88 27       	eor	r24, r24
    1ef4:	77 fd       	sbrc	r23, 7
    1ef6:	80 95       	com	r24
    1ef8:	98 2f       	mov	r25, r24
    1efa:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
    1efe:	a7 01       	movw	r20, r14
    1f00:	96 01       	movw	r18, r12
    1f02:	0e 94 ab 19 	call	0x3356	; 0x3356 <__cmpsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	24 f4       	brge	.+8      	; 0x1f12 <localization+0x560>
    1f0a:	a7 96       	adiw	r28, 0x27	; 39
    1f0c:	1f af       	std	Y+63, r17	; 0x3f
    1f0e:	0e af       	std	Y+62, r16	; 0x3e
    1f10:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1f12:	0f 5f       	subi	r16, 0xFF	; 255
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	04 30       	cpi	r16, 0x04	; 4
    1f18:	11 05       	cpc	r17, r1
    1f1a:	b9 f6       	brne	.-82     	; 0x1eca <localization+0x518>
    1f1c:	af 96       	adiw	r28, 0x2f	; 47
    1f1e:	2e ac       	ldd	r2, Y+62	; 0x3e
    1f20:	3f ac       	ldd	r3, Y+63	; 0x3f
    1f22:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    1f24:	65 96       	adiw	r28, 0x15	; 21
    1f26:	1c ae       	std	Y+60, r1	; 0x3c
    1f28:	1d ae       	std	Y+61, r1	; 0x3d
    1f2a:	1e ae       	std	Y+62, r1	; 0x3e
    1f2c:	1f ae       	std	Y+63, r1	; 0x3f
    1f2e:	65 97       	sbiw	r28, 0x15	; 21
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e8       	ldi	r26, 0x80	; 128
    1f36:	bf e3       	ldi	r27, 0x3F	; 63
    1f38:	69 96       	adiw	r28, 0x19	; 25
    1f3a:	8c af       	std	Y+60, r24	; 0x3c
    1f3c:	9d af       	std	Y+61, r25	; 0x3d
    1f3e:	ae af       	std	Y+62, r26	; 0x3e
    1f40:	bf af       	std	Y+63, r27	; 0x3f
    1f42:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1f44:	a7 96       	adiw	r28, 0x27	; 39
    1f46:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f48:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f4a:	a7 97       	sbiw	r28, 0x27	; 39
    1f4c:	e2 30       	cpi	r30, 0x02	; 2
    1f4e:	f1 05       	cpc	r31, r1
    1f50:	19 f0       	breq	.+6      	; 0x1f58 <localization+0x5a6>
    1f52:	33 97       	sbiw	r30, 0x03	; 3
    1f54:	51 f1       	breq	.+84     	; 0x1faa <localization+0x5f8>
    1f56:	5a c0       	rjmp	.+180    	; 0x200c <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1f58:	a5 01       	movw	r20, r10
    1f5a:	94 01       	movw	r18, r8
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	88 e6       	ldi	r24, 0x68	; 104
    1f62:	91 e4       	ldi	r25, 0x41	; 65
    1f64:	0e 94 af 19 	call	0x335e	; 0x335e <__divsf3>
    1f68:	e1 96       	adiw	r28, 0x31	; 49
    1f6a:	6c af       	std	Y+60, r22	; 0x3c
    1f6c:	7d af       	std	Y+61, r23	; 0x3d
    1f6e:	8e af       	std	Y+62, r24	; 0x3e
    1f70:	9f af       	std	Y+63, r25	; 0x3f
    1f72:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    1f74:	84 e9       	ldi	r24, 0x94	; 148
    1f76:	97 e8       	ldi	r25, 0x87	; 135
    1f78:	a5 ee       	ldi	r26, 0xE5	; 229
    1f7a:	be e3       	ldi	r27, 0x3E	; 62
    1f7c:	65 96       	adiw	r28, 0x15	; 21
    1f7e:	8c af       	std	Y+60, r24	; 0x3c
    1f80:	9d af       	std	Y+61, r25	; 0x3d
    1f82:	ae af       	std	Y+62, r26	; 0x3e
    1f84:	bf af       	std	Y+63, r27	; 0x3f
    1f86:	65 97       	sbiw	r28, 0x15	; 21
    1f88:	81 ea       	ldi	r24, 0xA1	; 161
    1f8a:	96 ed       	ldi	r25, 0xD6	; 214
    1f8c:	a4 e6       	ldi	r26, 0x64	; 100
    1f8e:	bf eb       	ldi	r27, 0xBF	; 191
    1f90:	69 96       	adiw	r28, 0x19	; 25
    1f92:	8c af       	std	Y+60, r24	; 0x3c
    1f94:	9d af       	std	Y+61, r25	; 0x3d
    1f96:	ae af       	std	Y+62, r26	; 0x3e
    1f98:	bf af       	std	Y+63, r27	; 0x3f
    1f9a:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1f9c:	e5 96       	adiw	r28, 0x35	; 53
    1f9e:	1c ae       	std	Y+60, r1	; 0x3c
    1fa0:	1d ae       	std	Y+61, r1	; 0x3d
    1fa2:	1e ae       	std	Y+62, r1	; 0x3e
    1fa4:	1f ae       	std	Y+63, r1	; 0x3f
    1fa6:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1fa8:	45 c0       	rjmp	.+138    	; 0x2034 <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1faa:	a5 01       	movw	r20, r10
    1fac:	94 01       	movw	r18, r8
    1fae:	61 ee       	ldi	r22, 0xE1	; 225
    1fb0:	7a e7       	ldi	r23, 0x7A	; 122
    1fb2:	8a e3       	ldi	r24, 0x3A	; 58
    1fb4:	91 e4       	ldi	r25, 0x41	; 65
    1fb6:	0e 94 af 19 	call	0x335e	; 0x335e <__divsf3>
    1fba:	e5 96       	adiw	r28, 0x35	; 53
    1fbc:	6c af       	std	Y+60, r22	; 0x3c
    1fbe:	7d af       	std	Y+61, r23	; 0x3d
    1fc0:	8e af       	std	Y+62, r24	; 0x3e
    1fc2:	9f af       	std	Y+63, r25	; 0x3f
    1fc4:	e5 97       	sbiw	r28, 0x35	; 53
    1fc6:	a5 01       	movw	r20, r10
    1fc8:	94 01       	movw	r18, r8
    1fca:	63 e2       	ldi	r22, 0x23	; 35
    1fcc:	7b ed       	ldi	r23, 0xDB	; 219
    1fce:	8b e0       	ldi	r24, 0x0B	; 11
    1fd0:	91 ec       	ldi	r25, 0xC1	; 193
    1fd2:	0e 94 af 19 	call	0x335e	; 0x335e <__divsf3>
    1fd6:	e1 96       	adiw	r28, 0x31	; 49
    1fd8:	6c af       	std	Y+60, r22	; 0x3c
    1fda:	7d af       	std	Y+61, r23	; 0x3d
    1fdc:	8e af       	std	Y+62, r24	; 0x3e
    1fde:	9f af       	std	Y+63, r25	; 0x3f
    1fe0:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1fe2:	86 e6       	ldi	r24, 0x66	; 102
    1fe4:	96 e6       	ldi	r25, 0x66	; 102
    1fe6:	a6 e7       	ldi	r26, 0x76	; 118
    1fe8:	bf eb       	ldi	r27, 0xBF	; 191
    1fea:	65 96       	adiw	r28, 0x15	; 21
    1fec:	8c af       	std	Y+60, r24	; 0x3c
    1fee:	9d af       	std	Y+61, r25	; 0x3d
    1ff0:	ae af       	std	Y+62, r26	; 0x3e
    1ff2:	bf af       	std	Y+63, r27	; 0x3f
    1ff4:	65 97       	sbiw	r28, 0x15	; 21
    1ff6:	8f e9       	ldi	r24, 0x9F	; 159
    1ff8:	9d ec       	ldi	r25, 0xCD	; 205
    1ffa:	aa e8       	ldi	r26, 0x8A	; 138
    1ffc:	be e3       	ldi	r27, 0x3E	; 62
    1ffe:	69 96       	adiw	r28, 0x19	; 25
    2000:	8c af       	std	Y+60, r24	; 0x3c
    2002:	9d af       	std	Y+61, r25	; 0x3d
    2004:	ae af       	std	Y+62, r26	; 0x3e
    2006:	bf af       	std	Y+63, r27	; 0x3f
    2008:	69 97       	sbiw	r28, 0x19	; 25
			break;
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    200c:	a7 96       	adiw	r28, 0x27	; 39
    200e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2010:	3f ad       	ldd	r19, Y+63	; 0x3f
    2012:	a7 97       	sbiw	r28, 0x27	; 39
    2014:	12 16       	cp	r1, r18
    2016:	13 06       	cpc	r1, r19
    2018:	0c f0       	brlt	.+2      	; 0x201c <localization+0x66a>
    201a:	32 c3       	rjmp	.+1636   	; 0x2680 <localization+0xcce>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    201c:	e5 96       	adiw	r28, 0x35	; 53
    201e:	1c ae       	std	Y+60, r1	; 0x3c
    2020:	1d ae       	std	Y+61, r1	; 0x3d
    2022:	1e ae       	std	Y+62, r1	; 0x3e
    2024:	1f ae       	std	Y+63, r1	; 0x3f
    2026:	e5 97       	sbiw	r28, 0x35	; 53
    2028:	e1 96       	adiw	r28, 0x31	; 49
    202a:	1c ae       	std	Y+60, r1	; 0x3c
    202c:	1d ae       	std	Y+61, r1	; 0x3d
    202e:	1e ae       	std	Y+62, r1	; 0x3e
    2030:	1f ae       	std	Y+63, r1	; 0x3f
    2032:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    2034:	f1 01       	movw	r30, r2
    2036:	ee 0f       	add	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	8c 0f       	add	r24, r28
    2040:	9d 1f       	adc	r25, r29
    2042:	e8 0f       	add	r30, r24
    2044:	f9 1f       	adc	r31, r25
    2046:	00 ad       	ldd	r16, Z+56	; 0x38
    2048:	11 ad       	ldd	r17, Z+57	; 0x39
    204a:	a3 96       	adiw	r28, 0x23	; 35
    204c:	ee ad       	ldd	r30, Y+62	; 0x3e
    204e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2050:	a3 97       	sbiw	r28, 0x23	; 35
    2052:	ee 0f       	add	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	e8 0f       	add	r30, r24
    2058:	f9 1f       	adc	r31, r25
    205a:	80 ad       	ldd	r24, Z+56	; 0x38
    205c:	91 ad       	ldd	r25, Z+57	; 0x39
    205e:	80 17       	cp	r24, r16
    2060:	91 07       	cpc	r25, r17
    2062:	89 f0       	breq	.+34     	; 0x2086 <localization+0x6d4>
    2064:	a3 96       	adiw	r28, 0x23	; 35
    2066:	ee ad       	ldd	r30, Y+62	; 0x3e
    2068:	ff ad       	ldd	r31, Y+63	; 0x3f
    206a:	a3 97       	sbiw	r28, 0x23	; 35
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	a5 e4       	ldi	r26, 0x45	; 69
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	ac 0f       	add	r26, r28
    2076:	bd 1f       	adc	r27, r29
    2078:	ea 0f       	add	r30, r26
    207a:	fb 1f       	adc	r31, r27
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	08 17       	cp	r16, r24
    2082:	19 07       	cpc	r17, r25
    2084:	69 f4       	brne	.+26     	; 0x20a0 <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    2086:	d1 01       	movw	r26, r2
    2088:	aa 0f       	add	r26, r26
    208a:	bb 1f       	adc	r27, r27
    208c:	e5 e4       	ldi	r30, 0x45	; 69
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	ec 0f       	add	r30, r28
    2092:	fd 1f       	adc	r31, r29
    2094:	ae 0f       	add	r26, r30
    2096:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    2098:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    209a:	0d 91       	ld	r16, X+
    209c:	1c 91       	ld	r17, X
    209e:	0c c0       	rjmp	.+24     	; 0x20b8 <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    20a0:	f1 01       	movw	r30, r2
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	25 e4       	ldi	r18, 0x45	; 69
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	2c 0f       	add	r18, r28
    20ac:	3d 1f       	adc	r19, r29
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	01 90       	ld	r0, Z+
    20b4:	f0 81       	ld	r31, Z
    20b6:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    20b8:	a7 96       	adiw	r28, 0x27	; 39
    20ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    20bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    20be:	a7 97       	sbiw	r28, 0x27	; 39
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <localization+0x714>
    20c4:	45 c0       	rjmp	.+138    	; 0x2150 <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    20c6:	6f 01       	movw	r12, r30
    20c8:	cc 0c       	add	r12, r12
    20ca:	dd 1c       	adc	r13, r13
    20cc:	cc 0c       	add	r12, r12
    20ce:	dd 1c       	adc	r13, r13
    20d0:	a1 e0       	ldi	r26, 0x01	; 1
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	ac 0f       	add	r26, r28
    20d6:	bd 1f       	adc	r27, r29
    20d8:	ca 0e       	add	r12, r26
    20da:	db 1e       	adc	r13, r27
    20dc:	78 01       	movw	r14, r16
    20de:	ee 0c       	add	r14, r14
    20e0:	ff 1c       	adc	r15, r15
    20e2:	ee 0c       	add	r14, r14
    20e4:	ff 1c       	adc	r15, r15
    20e6:	ea 0e       	add	r14, r26
    20e8:	fb 1e       	adc	r15, r27
    20ea:	f7 01       	movw	r30, r14
    20ec:	20 81       	ld	r18, Z
    20ee:	31 81       	ldd	r19, Z+1	; 0x01
    20f0:	42 81       	ldd	r20, Z+2	; 0x02
    20f2:	53 81       	ldd	r21, Z+3	; 0x03
    20f4:	d6 01       	movw	r26, r12
    20f6:	6d 91       	ld	r22, X+
    20f8:	7d 91       	ld	r23, X+
    20fa:	8d 91       	ld	r24, X+
    20fc:	9c 91       	ld	r25, X
    20fe:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    210e:	ad 96       	adiw	r28, 0x2d	; 45
    2110:	6c af       	std	Y+60, r22	; 0x3c
    2112:	7d af       	std	Y+61, r23	; 0x3d
    2114:	8e af       	std	Y+62, r24	; 0x3e
    2116:	9f af       	std	Y+63, r25	; 0x3f
    2118:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    211a:	f7 01       	movw	r30, r14
    211c:	20 89       	ldd	r18, Z+16	; 0x10
    211e:	31 89       	ldd	r19, Z+17	; 0x11
    2120:	42 89       	ldd	r20, Z+18	; 0x12
    2122:	53 89       	ldd	r21, Z+19	; 0x13
    2124:	d6 01       	movw	r26, r12
    2126:	50 96       	adiw	r26, 0x10	; 16
    2128:	6d 91       	ld	r22, X+
    212a:	7d 91       	ld	r23, X+
    212c:	8d 91       	ld	r24, X+
    212e:	9c 91       	ld	r25, X
    2130:	53 97       	sbiw	r26, 0x13	; 19
    2132:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2142:	a9 96       	adiw	r28, 0x29	; 41
    2144:	6c af       	std	Y+60, r22	; 0x3c
    2146:	7d af       	std	Y+61, r23	; 0x3d
    2148:	8e af       	std	Y+62, r24	; 0x3e
    214a:	9f af       	std	Y+63, r25	; 0x3f
    214c:	a9 97       	sbiw	r28, 0x29	; 41
    214e:	1e c0       	rjmp	.+60     	; 0x218c <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	21 e0       	ldi	r18, 0x01	; 1
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	2c 0f       	add	r18, r28
    215e:	3d 1f       	adc	r19, r29
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	a2 81       	ldd	r26, Z+2	; 0x02
    216a:	b3 81       	ldd	r27, Z+3	; 0x03
    216c:	ad 96       	adiw	r28, 0x2d	; 45
    216e:	8c af       	std	Y+60, r24	; 0x3c
    2170:	9d af       	std	Y+61, r25	; 0x3d
    2172:	ae af       	std	Y+62, r26	; 0x3e
    2174:	bf af       	std	Y+63, r27	; 0x3f
    2176:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    2178:	80 89       	ldd	r24, Z+16	; 0x10
    217a:	91 89       	ldd	r25, Z+17	; 0x11
    217c:	a2 89       	ldd	r26, Z+18	; 0x12
    217e:	b3 89       	ldd	r27, Z+19	; 0x13
    2180:	a9 96       	adiw	r28, 0x29	; 41
    2182:	8c af       	std	Y+60, r24	; 0x3c
    2184:	9d af       	std	Y+61, r25	; 0x3d
    2186:	ae af       	std	Y+62, r26	; 0x3e
    2188:	bf af       	std	Y+63, r27	; 0x3f
    218a:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    218c:	00 0f       	add	r16, r16
    218e:	11 1f       	adc	r17, r17
    2190:	00 0f       	add	r16, r16
    2192:	11 1f       	adc	r17, r17
    2194:	a1 e0       	ldi	r26, 0x01	; 1
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	ac 0f       	add	r26, r28
    219a:	bd 1f       	adc	r27, r29
    219c:	0a 0f       	add	r16, r26
    219e:	1b 1f       	adc	r17, r27
    21a0:	ad 96       	adiw	r28, 0x2d	; 45
    21a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    21a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    21a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    21a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    21aa:	ad 97       	sbiw	r28, 0x2d	; 45
    21ac:	f8 01       	movw	r30, r16
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    21ba:	4b 01       	movw	r8, r22
    21bc:	5c 01       	movw	r10, r24
    21be:	a9 96       	adiw	r28, 0x29	; 41
    21c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    21c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    21c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    21c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    21c8:	a9 97       	sbiw	r28, 0x29	; 41
    21ca:	d8 01       	movw	r26, r16
    21cc:	50 96       	adiw	r26, 0x10	; 16
    21ce:	6d 91       	ld	r22, X+
    21d0:	7d 91       	ld	r23, X+
    21d2:	8d 91       	ld	r24, X+
    21d4:	9c 91       	ld	r25, X
    21d6:	53 97       	sbiw	r26, 0x13	; 19
    21d8:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    21dc:	6b 01       	movw	r12, r22
    21de:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    21e0:	a5 01       	movw	r20, r10
    21e2:	94 01       	movw	r18, r8
    21e4:	c5 01       	movw	r24, r10
    21e6:	b4 01       	movw	r22, r8
    21e8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    21ec:	2b 01       	movw	r4, r22
    21ee:	3c 01       	movw	r6, r24
    21f0:	a7 01       	movw	r20, r14
    21f2:	96 01       	movw	r18, r12
    21f4:	c7 01       	movw	r24, r14
    21f6:	b6 01       	movw	r22, r12
    21f8:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    21fc:	9b 01       	movw	r18, r22
    21fe:	ac 01       	movw	r20, r24
    2200:	c3 01       	movw	r24, r6
    2202:	b2 01       	movw	r22, r4
    2204:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    2208:	0e 94 a5 1b 	call	0x374a	; 0x374a <sqrt>
    220c:	2b 01       	movw	r4, r22
    220e:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    2210:	9b 01       	movw	r18, r22
    2212:	ac 01       	movw	r20, r24
    2214:	c5 01       	movw	r24, r10
    2216:	b4 01       	movw	r22, r8
    2218:	0e 94 af 19 	call	0x335e	; 0x335e <__divsf3>
    221c:	4b 01       	movw	r8, r22
    221e:	5c 01       	movw	r10, r24
    2220:	6d 96       	adiw	r28, 0x1d	; 29
    2222:	6c af       	std	Y+60, r22	; 0x3c
    2224:	7d af       	std	Y+61, r23	; 0x3d
    2226:	8e af       	std	Y+62, r24	; 0x3e
    2228:	9f af       	std	Y+63, r25	; 0x3f
    222a:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    222c:	a3 01       	movw	r20, r6
    222e:	92 01       	movw	r18, r4
    2230:	c7 01       	movw	r24, r14
    2232:	b6 01       	movw	r22, r12
    2234:	0e 94 af 19 	call	0x335e	; 0x335e <__divsf3>
    2238:	6b 01       	movw	r12, r22
    223a:	7c 01       	movw	r14, r24
    223c:	a1 96       	adiw	r28, 0x21	; 33
    223e:	6c af       	std	Y+60, r22	; 0x3c
    2240:	7d af       	std	Y+61, r23	; 0x3d
    2242:	8e af       	std	Y+62, r24	; 0x3e
    2244:	9f af       	std	Y+63, r25	; 0x3f
    2246:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    2248:	65 96       	adiw	r28, 0x15	; 21
    224a:	2c ad       	ldd	r18, Y+60	; 0x3c
    224c:	3d ad       	ldd	r19, Y+61	; 0x3d
    224e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2250:	5f ad       	ldd	r21, Y+63	; 0x3f
    2252:	65 97       	sbiw	r28, 0x15	; 21
    2254:	c5 01       	movw	r24, r10
    2256:	b4 01       	movw	r22, r8
    2258:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    225c:	4b 01       	movw	r8, r22
    225e:	5c 01       	movw	r10, r24
    2260:	69 96       	adiw	r28, 0x19	; 25
    2262:	2c ad       	ldd	r18, Y+60	; 0x3c
    2264:	3d ad       	ldd	r19, Y+61	; 0x3d
    2266:	4e ad       	ldd	r20, Y+62	; 0x3e
    2268:	5f ad       	ldd	r21, Y+63	; 0x3f
    226a:	69 97       	sbiw	r28, 0x19	; 25
    226c:	c7 01       	movw	r24, r14
    226e:	b6 01       	movw	r22, r12
    2270:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2274:	9b 01       	movw	r18, r22
    2276:	ac 01       	movw	r20, r24
    2278:	c5 01       	movw	r24, r10
    227a:	b4 01       	movw	r22, r8
    227c:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    2280:	2b 01       	movw	r4, r22
    2282:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    2284:	9b 01       	movw	r18, r22
    2286:	ac 01       	movw	r20, r24
    2288:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    228c:	9b 01       	movw	r18, r22
    228e:	ac 01       	movw	r20, r24
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	80 e8       	ldi	r24, 0x80	; 128
    2296:	9f e3       	ldi	r25, 0x3F	; 63
    2298:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    229c:	0e 94 a5 1b 	call	0x374a	; 0x374a <sqrt>
    22a0:	a5 96       	adiw	r28, 0x25	; 37
    22a2:	6c af       	std	Y+60, r22	; 0x3c
    22a4:	7d af       	std	Y+61, r23	; 0x3d
    22a6:	8e af       	std	Y+62, r24	; 0x3e
    22a8:	9f af       	std	Y+63, r25	; 0x3f
    22aa:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    22ac:	fe 01       	movw	r30, r28
    22ae:	ef 5a       	subi	r30, 0xAF	; 175
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	7f 01       	movw	r14, r30
    22b4:	8e 01       	movw	r16, r28
    22b6:	07 5a       	subi	r16, 0xA7	; 167
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	9b 01       	movw	r18, r22
    22bc:	ac 01       	movw	r20, r24
    22be:	c3 01       	movw	r24, r6
    22c0:	b2 01       	movw	r22, r4
    22c2:	0e 94 3c 08 	call	0x1078	; 0x1078 <find_sign>
    22c6:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <localization+0x91e>
    22ce:	a1 c0       	rjmp	.+322    	; 0x2412 <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    22d0:	0f 2e       	mov	r0, r31
    22d2:	f6 e2       	ldi	r31, 0x26	; 38
    22d4:	af 2e       	mov	r10, r31
    22d6:	f1 e0       	ldi	r31, 0x01	; 1
    22d8:	bf 2e       	mov	r11, r31
    22da:	f0 2d       	mov	r31, r0
    22dc:	d5 01       	movw	r26, r10
    22de:	2d 91       	ld	r18, X+
    22e0:	3d 91       	ld	r19, X+
    22e2:	4d 91       	ld	r20, X+
    22e4:	5c 91       	ld	r21, X
    22e6:	ad 96       	adiw	r28, 0x2d	; 45
    22e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    22ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    22ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    22ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    22f0:	ad 97       	sbiw	r28, 0x2d	; 45
    22f2:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    22f6:	a3 01       	movw	r20, r6
    22f8:	92 01       	movw	r18, r4
    22fa:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    22fe:	9b 01       	movw	r18, r22
    2300:	ac 01       	movw	r20, r24
    2302:	e5 96       	adiw	r28, 0x35	; 53
    2304:	6c ad       	ldd	r22, Y+60	; 0x3c
    2306:	7d ad       	ldd	r23, Y+61	; 0x3d
    2308:	8e ad       	ldd	r24, Y+62	; 0x3e
    230a:	9f ad       	ldd	r25, Y+63	; 0x3f
    230c:	e5 97       	sbiw	r28, 0x35	; 53
    230e:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    2312:	6b 01       	movw	r12, r22
    2314:	7c 01       	movw	r14, r24
    2316:	0a e2       	ldi	r16, 0x2A	; 42
    2318:	11 e0       	ldi	r17, 0x01	; 1
    231a:	f8 01       	movw	r30, r16
    231c:	20 81       	ld	r18, Z
    231e:	31 81       	ldd	r19, Z+1	; 0x01
    2320:	42 81       	ldd	r20, Z+2	; 0x02
    2322:	53 81       	ldd	r21, Z+3	; 0x03
    2324:	a9 96       	adiw	r28, 0x29	; 41
    2326:	6c ad       	ldd	r22, Y+60	; 0x3c
    2328:	7d ad       	ldd	r23, Y+61	; 0x3d
    232a:	8e ad       	ldd	r24, Y+62	; 0x3e
    232c:	9f ad       	ldd	r25, Y+63	; 0x3f
    232e:	a9 97       	sbiw	r28, 0x29	; 41
    2330:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    2334:	a5 96       	adiw	r28, 0x25	; 37
    2336:	2c ad       	ldd	r18, Y+60	; 0x3c
    2338:	3d ad       	ldd	r19, Y+61	; 0x3d
    233a:	4e ad       	ldd	r20, Y+62	; 0x3e
    233c:	5f ad       	ldd	r21, Y+63	; 0x3f
    233e:	a5 97       	sbiw	r28, 0x25	; 37
    2340:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2344:	9b 01       	movw	r18, r22
    2346:	ac 01       	movw	r20, r24
    2348:	c7 01       	movw	r24, r14
    234a:	b6 01       	movw	r22, r12
    234c:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    2350:	ed 96       	adiw	r28, 0x3d	; 61
    2352:	ae ad       	ldd	r26, Y+62	; 0x3e
    2354:	bf ad       	ldd	r27, Y+63	; 0x3f
    2356:	ed 97       	sbiw	r28, 0x3d	; 61
    2358:	6d 93       	st	X+, r22
    235a:	7d 93       	st	X+, r23
    235c:	8d 93       	st	X+, r24
    235e:	9c 93       	st	X, r25
    2360:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    2362:	f8 01       	movw	r30, r16
    2364:	20 81       	ld	r18, Z
    2366:	31 81       	ldd	r19, Z+1	; 0x01
    2368:	42 81       	ldd	r20, Z+2	; 0x02
    236a:	53 81       	ldd	r21, Z+3	; 0x03
    236c:	a9 96       	adiw	r28, 0x29	; 41
    236e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2370:	7d ad       	ldd	r23, Y+61	; 0x3d
    2372:	8e ad       	ldd	r24, Y+62	; 0x3e
    2374:	9f ad       	ldd	r25, Y+63	; 0x3f
    2376:	a9 97       	sbiw	r28, 0x29	; 41
    2378:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    237c:	a3 01       	movw	r20, r6
    237e:	92 01       	movw	r18, r4
    2380:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2384:	9b 01       	movw	r18, r22
    2386:	ac 01       	movw	r20, r24
    2388:	e1 96       	adiw	r28, 0x31	; 49
    238a:	6c ad       	ldd	r22, Y+60	; 0x3c
    238c:	7d ad       	ldd	r23, Y+61	; 0x3d
    238e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2390:	9f ad       	ldd	r25, Y+63	; 0x3f
    2392:	e1 97       	sbiw	r28, 0x31	; 49
    2394:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    2398:	6b 01       	movw	r12, r22
    239a:	7c 01       	movw	r14, r24
    239c:	d5 01       	movw	r26, r10
    239e:	2d 91       	ld	r18, X+
    23a0:	3d 91       	ld	r19, X+
    23a2:	4d 91       	ld	r20, X+
    23a4:	5c 91       	ld	r21, X
    23a6:	ad 96       	adiw	r28, 0x2d	; 45
    23a8:	6c ad       	ldd	r22, Y+60	; 0x3c
    23aa:	7d ad       	ldd	r23, Y+61	; 0x3d
    23ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    23ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    23b0:	ad 97       	sbiw	r28, 0x2d	; 45
    23b2:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    23b6:	a5 96       	adiw	r28, 0x25	; 37
    23b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    23ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    23bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    23be:	5f ad       	ldd	r21, Y+63	; 0x3f
    23c0:	a5 97       	sbiw	r28, 0x25	; 37
    23c2:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    23c6:	9b 01       	movw	r18, r22
    23c8:	ac 01       	movw	r20, r24
    23ca:	c7 01       	movw	r24, r14
    23cc:	b6 01       	movw	r22, r12
    23ce:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    23d2:	ed 96       	adiw	r28, 0x3d	; 61
    23d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    23d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    23d8:	ed 97       	sbiw	r28, 0x3d	; 61
    23da:	64 83       	std	Z+4, r22	; 0x04
    23dc:	75 83       	std	Z+5, r23	; 0x05
    23de:	86 83       	std	Z+6, r24	; 0x06
    23e0:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    23e2:	ef 96       	adiw	r28, 0x3f	; 63
    23e4:	ae ad       	ldd	r26, Y+62	; 0x3e
    23e6:	bf ad       	ldd	r27, Y+63	; 0x3f
    23e8:	ef 97       	sbiw	r28, 0x3f	; 63
    23ea:	4d 92       	st	X+, r4
    23ec:	5d 92       	st	X+, r5
    23ee:	6d 92       	st	X+, r6
    23f0:	7c 92       	st	X, r7
    23f2:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    23f4:	a5 96       	adiw	r28, 0x25	; 37
    23f6:	8c ad       	ldd	r24, Y+60	; 0x3c
    23f8:	9d ad       	ldd	r25, Y+61	; 0x3d
    23fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    23fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    23fe:	a5 97       	sbiw	r28, 0x25	; 37
    2400:	ef 96       	adiw	r28, 0x3f	; 63
    2402:	ee ad       	ldd	r30, Y+62	; 0x3e
    2404:	ff ad       	ldd	r31, Y+63	; 0x3f
    2406:	ef 97       	sbiw	r28, 0x3f	; 63
    2408:	84 83       	std	Z+4, r24	; 0x04
    240a:	95 83       	std	Z+5, r25	; 0x05
    240c:	a6 83       	std	Z+6, r26	; 0x06
    240e:	b7 83       	std	Z+7, r27	; 0x07
    2410:	a1 c0       	rjmp	.+322    	; 0x2554 <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    2412:	0f 2e       	mov	r0, r31
    2414:	f6 e2       	ldi	r31, 0x26	; 38
    2416:	af 2e       	mov	r10, r31
    2418:	f1 e0       	ldi	r31, 0x01	; 1
    241a:	bf 2e       	mov	r11, r31
    241c:	f0 2d       	mov	r31, r0
    241e:	d5 01       	movw	r26, r10
    2420:	2d 91       	ld	r18, X+
    2422:	3d 91       	ld	r19, X+
    2424:	4d 91       	ld	r20, X+
    2426:	5c 91       	ld	r21, X
    2428:	ad 96       	adiw	r28, 0x2d	; 45
    242a:	6c ad       	ldd	r22, Y+60	; 0x3c
    242c:	7d ad       	ldd	r23, Y+61	; 0x3d
    242e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2430:	9f ad       	ldd	r25, Y+63	; 0x3f
    2432:	ad 97       	sbiw	r28, 0x2d	; 45
    2434:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    2438:	a3 01       	movw	r20, r6
    243a:	92 01       	movw	r18, r4
    243c:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2440:	9b 01       	movw	r18, r22
    2442:	ac 01       	movw	r20, r24
    2444:	e5 96       	adiw	r28, 0x35	; 53
    2446:	6c ad       	ldd	r22, Y+60	; 0x3c
    2448:	7d ad       	ldd	r23, Y+61	; 0x3d
    244a:	8e ad       	ldd	r24, Y+62	; 0x3e
    244c:	9f ad       	ldd	r25, Y+63	; 0x3f
    244e:	e5 97       	sbiw	r28, 0x35	; 53
    2450:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    2454:	6b 01       	movw	r12, r22
    2456:	7c 01       	movw	r14, r24
    2458:	0a e2       	ldi	r16, 0x2A	; 42
    245a:	11 e0       	ldi	r17, 0x01	; 1
    245c:	f8 01       	movw	r30, r16
    245e:	20 81       	ld	r18, Z
    2460:	31 81       	ldd	r19, Z+1	; 0x01
    2462:	42 81       	ldd	r20, Z+2	; 0x02
    2464:	53 81       	ldd	r21, Z+3	; 0x03
    2466:	a9 96       	adiw	r28, 0x29	; 41
    2468:	6c ad       	ldd	r22, Y+60	; 0x3c
    246a:	7d ad       	ldd	r23, Y+61	; 0x3d
    246c:	8e ad       	ldd	r24, Y+62	; 0x3e
    246e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2470:	a9 97       	sbiw	r28, 0x29	; 41
    2472:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    2476:	a5 96       	adiw	r28, 0x25	; 37
    2478:	2c ad       	ldd	r18, Y+60	; 0x3c
    247a:	3d ad       	ldd	r19, Y+61	; 0x3d
    247c:	4e ad       	ldd	r20, Y+62	; 0x3e
    247e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2480:	a5 97       	sbiw	r28, 0x25	; 37
    2482:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2486:	9b 01       	movw	r18, r22
    2488:	ac 01       	movw	r20, r24
    248a:	c7 01       	movw	r24, r14
    248c:	b6 01       	movw	r22, r12
    248e:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    2492:	ed 96       	adiw	r28, 0x3d	; 61
    2494:	ae ad       	ldd	r26, Y+62	; 0x3e
    2496:	bf ad       	ldd	r27, Y+63	; 0x3f
    2498:	ed 97       	sbiw	r28, 0x3d	; 61
    249a:	6d 93       	st	X+, r22
    249c:	7d 93       	st	X+, r23
    249e:	8d 93       	st	X+, r24
    24a0:	9c 93       	st	X, r25
    24a2:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    24a4:	f8 01       	movw	r30, r16
    24a6:	20 81       	ld	r18, Z
    24a8:	31 81       	ldd	r19, Z+1	; 0x01
    24aa:	42 81       	ldd	r20, Z+2	; 0x02
    24ac:	53 81       	ldd	r21, Z+3	; 0x03
    24ae:	a9 96       	adiw	r28, 0x29	; 41
    24b0:	6c ad       	ldd	r22, Y+60	; 0x3c
    24b2:	7d ad       	ldd	r23, Y+61	; 0x3d
    24b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    24b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    24b8:	a9 97       	sbiw	r28, 0x29	; 41
    24ba:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    24be:	a3 01       	movw	r20, r6
    24c0:	92 01       	movw	r18, r4
    24c2:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    24c6:	9b 01       	movw	r18, r22
    24c8:	ac 01       	movw	r20, r24
    24ca:	e1 96       	adiw	r28, 0x31	; 49
    24cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    24ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    24d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    24d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    24d4:	e1 97       	sbiw	r28, 0x31	; 49
    24d6:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    24da:	6b 01       	movw	r12, r22
    24dc:	7c 01       	movw	r14, r24
    24de:	d5 01       	movw	r26, r10
    24e0:	2d 91       	ld	r18, X+
    24e2:	3d 91       	ld	r19, X+
    24e4:	4d 91       	ld	r20, X+
    24e6:	5c 91       	ld	r21, X
    24e8:	ad 96       	adiw	r28, 0x2d	; 45
    24ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    24ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    24ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    24f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    24f2:	ad 97       	sbiw	r28, 0x2d	; 45
    24f4:	0e 94 46 19 	call	0x328c	; 0x328c <__subsf3>
    24f8:	a5 96       	adiw	r28, 0x25	; 37
    24fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    24fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    24fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2500:	5f ad       	ldd	r21, Y+63	; 0x3f
    2502:	a5 97       	sbiw	r28, 0x25	; 37
    2504:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2508:	9b 01       	movw	r18, r22
    250a:	ac 01       	movw	r20, r24
    250c:	c7 01       	movw	r24, r14
    250e:	b6 01       	movw	r22, r12
    2510:	0e 94 47 19 	call	0x328e	; 0x328e <__addsf3>
    2514:	ed 96       	adiw	r28, 0x3d	; 61
    2516:	ee ad       	ldd	r30, Y+62	; 0x3e
    2518:	ff ad       	ldd	r31, Y+63	; 0x3f
    251a:	ed 97       	sbiw	r28, 0x3d	; 61
    251c:	64 83       	std	Z+4, r22	; 0x04
    251e:	75 83       	std	Z+5, r23	; 0x05
    2520:	86 83       	std	Z+6, r24	; 0x06
    2522:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    2524:	ef 96       	adiw	r28, 0x3f	; 63
    2526:	ae ad       	ldd	r26, Y+62	; 0x3e
    2528:	bf ad       	ldd	r27, Y+63	; 0x3f
    252a:	ef 97       	sbiw	r28, 0x3f	; 63
    252c:	4d 92       	st	X+, r4
    252e:	5d 92       	st	X+, r5
    2530:	6d 92       	st	X+, r6
    2532:	7c 92       	st	X, r7
    2534:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    2536:	a5 96       	adiw	r28, 0x25	; 37
    2538:	8c ad       	ldd	r24, Y+60	; 0x3c
    253a:	9d ad       	ldd	r25, Y+61	; 0x3d
    253c:	ae ad       	ldd	r26, Y+62	; 0x3e
    253e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2540:	a5 97       	sbiw	r28, 0x25	; 37
    2542:	b0 58       	subi	r27, 0x80	; 128
    2544:	ef 96       	adiw	r28, 0x3f	; 63
    2546:	ee ad       	ldd	r30, Y+62	; 0x3e
    2548:	ff ad       	ldd	r31, Y+63	; 0x3f
    254a:	ef 97       	sbiw	r28, 0x3f	; 63
    254c:	84 83       	std	Z+4, r24	; 0x04
    254e:	95 83       	std	Z+5, r25	; 0x05
    2550:	a6 83       	std	Z+6, r26	; 0x06
    2552:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    2554:	ed 96       	adiw	r28, 0x3d	; 61
    2556:	ee ad       	ldd	r30, Y+62	; 0x3e
    2558:	ff ad       	ldd	r31, Y+63	; 0x3f
    255a:	ed 97       	sbiw	r28, 0x3d	; 61
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	a2 81       	ldd	r26, Z+2	; 0x02
    2562:	b3 81       	ldd	r27, Z+3	; 0x03
    2564:	80 93 82 01 	sts	0x0182, r24
    2568:	90 93 83 01 	sts	0x0183, r25
    256c:	a0 93 84 01 	sts	0x0184, r26
    2570:	b0 93 85 01 	sts	0x0185, r27
		c_wii_last[1] = c_wii[1];
    2574:	84 81       	ldd	r24, Z+4	; 0x04
    2576:	95 81       	ldd	r25, Z+5	; 0x05
    2578:	a6 81       	ldd	r26, Z+6	; 0x06
    257a:	b7 81       	ldd	r27, Z+7	; 0x07
    257c:	80 93 86 01 	sts	0x0186, r24
    2580:	90 93 87 01 	sts	0x0187, r25
    2584:	a0 93 88 01 	sts	0x0188, r26
    2588:	b0 93 89 01 	sts	0x0189, r27
		dir_last[0] = dir[0];
    258c:	ef 96       	adiw	r28, 0x3f	; 63
    258e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2590:	ff ad       	ldd	r31, Y+63	; 0x3f
    2592:	ef 97       	sbiw	r28, 0x3f	; 63
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	a2 81       	ldd	r26, Z+2	; 0x02
    259a:	b3 81       	ldd	r27, Z+3	; 0x03
    259c:	80 93 7a 01 	sts	0x017A, r24
    25a0:	90 93 7b 01 	sts	0x017B, r25
    25a4:	a0 93 7c 01 	sts	0x017C, r26
    25a8:	b0 93 7d 01 	sts	0x017D, r27
		dir_last[1] = dir[1];
    25ac:	84 81       	ldd	r24, Z+4	; 0x04
    25ae:	95 81       	ldd	r25, Z+5	; 0x05
    25b0:	a6 81       	ldd	r26, Z+6	; 0x06
    25b2:	b7 81       	ldd	r27, Z+7	; 0x07
    25b4:	80 93 7e 01 	sts	0x017E, r24
    25b8:	90 93 7f 01 	sts	0x017F, r25
    25bc:	a0 93 80 01 	sts	0x0180, r26
    25c0:	b0 93 81 01 	sts	0x0181, r27
		
		if (state == 3 || state == 4){
    25c4:	cd 57       	subi	r28, 0x7D	; 125
    25c6:	df 4f       	sbci	r29, 0xFF	; 255
    25c8:	88 81       	ld	r24, Y
    25ca:	99 81       	ldd	r25, Y+1	; 0x01
    25cc:	c3 58       	subi	r28, 0x83	; 131
    25ce:	d0 40       	sbci	r29, 0x00	; 0
    25d0:	03 97       	sbiw	r24, 0x03	; 3
    25d2:	02 97       	sbiw	r24, 0x02	; 2
    25d4:	08 f0       	brcs	.+2      	; 0x25d8 <localization+0xc26>
    25d6:	8c c0       	rjmp	.+280    	; 0x26f0 <localization+0xd3e>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    25d8:	ed 96       	adiw	r28, 0x3d	; 61
    25da:	ae ad       	ldd	r26, Y+62	; 0x3e
    25dc:	bf ad       	ldd	r27, Y+63	; 0x3f
    25de:	ed 97       	sbiw	r28, 0x3d	; 61
    25e0:	14 96       	adiw	r26, 0x04	; 4
    25e2:	2d 91       	ld	r18, X+
    25e4:	3d 91       	ld	r19, X+
    25e6:	4d 91       	ld	r20, X+
    25e8:	5c 91       	ld	r21, X
    25ea:	17 97       	sbiw	r26, 0x07	; 7
    25ec:	6d 91       	ld	r22, X+
    25ee:	7d 91       	ld	r23, X+
    25f0:	8d 91       	ld	r24, X+
    25f2:	9c 91       	ld	r25, X
    25f4:	cb 57       	subi	r28, 0x7B	; 123
    25f6:	df 4f       	sbci	r29, 0xFF	; 255
    25f8:	08 81       	ld	r16, Y
    25fa:	19 81       	ldd	r17, Y+1	; 0x01
    25fc:	c5 58       	subi	r28, 0x85	; 133
    25fe:	d0 40       	sbci	r29, 0x00	; 0
    2600:	0e 94 a4 0c 	call	0x1948	; 0x1948 <find_if_reach>
			if (!if_reach){
    2604:	89 2b       	or	r24, r25
    2606:	99 f5       	brne	.+102    	; 0x266e <localization+0xcbc>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    2608:	ef 96       	adiw	r28, 0x3f	; 63
    260a:	ae ac       	ldd	r10, Y+62	; 0x3e
    260c:	bf ac       	ldd	r11, Y+63	; 0x3f
    260e:	ef 97       	sbiw	r28, 0x3f	; 63
    2610:	ed 96       	adiw	r28, 0x3d	; 61
    2612:	ce ac       	ldd	r12, Y+62	; 0x3e
    2614:	df ac       	ldd	r13, Y+63	; 0x3f
    2616:	ed 97       	sbiw	r28, 0x3d	; 61
    2618:	cb 57       	subi	r28, 0x7B	; 123
    261a:	df 4f       	sbci	r29, 0xFF	; 255
    261c:	e8 80       	ld	r14, Y
    261e:	f9 80       	ldd	r15, Y+1	; 0x01
    2620:	c5 58       	subi	r28, 0x85	; 133
    2622:	d0 40       	sbci	r29, 0x00	; 0
    2624:	93 01       	movw	r18, r6
    2626:	82 01       	movw	r16, r4
    2628:	a5 96       	adiw	r28, 0x25	; 37
    262a:	4c ad       	ldd	r20, Y+60	; 0x3c
    262c:	5d ad       	ldd	r21, Y+61	; 0x3d
    262e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2630:	7f ad       	ldd	r23, Y+63	; 0x3f
    2632:	a5 97       	sbiw	r28, 0x25	; 37
    2634:	c4 01       	movw	r24, r8
    2636:	0e 94 20 09 	call	0x1240	; 0x1240 <cal_angle>
				if (state == 3){
    263a:	cd 57       	subi	r28, 0x7D	; 125
    263c:	df 4f       	sbci	r29, 0xFF	; 255
    263e:	e8 81       	ld	r30, Y
    2640:	f9 81       	ldd	r31, Y+1	; 0x01
    2642:	c3 58       	subi	r28, 0x83	; 131
    2644:	d0 40       	sbci	r29, 0x00	; 0
    2646:	33 97       	sbiw	r30, 0x03	; 3
    2648:	59 f4       	brne	.+22     	; 0x2660 <localization+0xcae>
					PID_alpha(Kp_loc, Kd_loc);
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	48 ec       	ldi	r20, 0xC8	; 200
    2650:	53 e4       	ldi	r21, 0x43	; 67
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	80 e7       	ldi	r24, 0x70	; 112
    2658:	92 e4       	ldi	r25, 0x42	; 66
    265a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <PID_alpha>
    265e:	48 c0       	rjmp	.+144    	; 0x26f0 <localization+0xd3e>
				}
				else{
					PID_p2p(Kp_p2p, Kd_p2p);
    2660:	60 e9       	ldi	r22, 0x90	; 144
    2662:	71 e0       	ldi	r23, 0x01	; 1
    2664:	84 ef       	ldi	r24, 0xF4	; 244
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <PID_p2p>
    266c:	41 c0       	rjmp	.+130    	; 0x26f0 <localization+0xd3e>
				}
			}
			else{ // reach goal, stop
				OCR1B = 0;
    266e:	10 92 8b 00 	sts	0x008B, r1
    2672:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    2676:	10 92 8d 00 	sts	0x008D, r1
    267a:	10 92 8c 00 	sts	0x008C, r1
    267e:	38 c0       	rjmp	.+112    	; 0x26f0 <localization+0xd3e>
			}
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    2680:	80 91 82 01 	lds	r24, 0x0182
    2684:	90 91 83 01 	lds	r25, 0x0183
    2688:	a0 91 84 01 	lds	r26, 0x0184
    268c:	b0 91 85 01 	lds	r27, 0x0185
    2690:	ed 96       	adiw	r28, 0x3d	; 61
    2692:	ee ad       	ldd	r30, Y+62	; 0x3e
    2694:	ff ad       	ldd	r31, Y+63	; 0x3f
    2696:	ed 97       	sbiw	r28, 0x3d	; 61
    2698:	80 83       	st	Z, r24
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	a2 83       	std	Z+2, r26	; 0x02
    269e:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    26a0:	80 91 86 01 	lds	r24, 0x0186
    26a4:	90 91 87 01 	lds	r25, 0x0187
    26a8:	a0 91 88 01 	lds	r26, 0x0188
    26ac:	b0 91 89 01 	lds	r27, 0x0189
    26b0:	84 83       	std	Z+4, r24	; 0x04
    26b2:	95 83       	std	Z+5, r25	; 0x05
    26b4:	a6 83       	std	Z+6, r26	; 0x06
    26b6:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    26b8:	80 91 7a 01 	lds	r24, 0x017A
    26bc:	90 91 7b 01 	lds	r25, 0x017B
    26c0:	a0 91 7c 01 	lds	r26, 0x017C
    26c4:	b0 91 7d 01 	lds	r27, 0x017D
    26c8:	ef 96       	adiw	r28, 0x3f	; 63
    26ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    26cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ce:	ef 97       	sbiw	r28, 0x3f	; 63
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    26d8:	80 91 7e 01 	lds	r24, 0x017E
    26dc:	90 91 7f 01 	lds	r25, 0x017F
    26e0:	a0 91 80 01 	lds	r26, 0x0180
    26e4:	b0 91 81 01 	lds	r27, 0x0181
    26e8:	84 83       	std	Z+4, r24	; 0x04
    26ea:	95 83       	std	Z+5, r25	; 0x05
    26ec:	a6 83       	std	Z+6, r26	; 0x06
    26ee:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    26f0:	8e e6       	ldi	r24, 0x6E	; 110
    26f2:	92 e0       	ldi	r25, 0x02	; 2
    26f4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(c_wii[0]);
    26f8:	ed 96       	adiw	r28, 0x3d	; 61
    26fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    26fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    26fe:	ed 97       	sbiw	r28, 0x3d	; 61
    2700:	6d 91       	ld	r22, X+
    2702:	7d 91       	ld	r23, X+
    2704:	8d 91       	ld	r24, X+
    2706:	9c 91       	ld	r25, X
    2708:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    270c:	cb 01       	movw	r24, r22
    270e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("		y:");
    2712:	89 e6       	ldi	r24, 0x69	; 105
    2714:	92 e0       	ldi	r25, 0x02	; 2
    2716:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(c_wii[1]);
    271a:	ed 96       	adiw	r28, 0x3d	; 61
    271c:	ee ad       	ldd	r30, Y+62	; 0x3e
    271e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2720:	ed 97       	sbiw	r28, 0x3d	; 61
    2722:	64 81       	ldd	r22, Z+4	; 0x04
    2724:	75 81       	ldd	r23, Z+5	; 0x05
    2726:	86 81       	ldd	r24, Z+6	; 0x06
    2728:	97 81       	ldd	r25, Z+7	; 0x07
    272a:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    272e:	cb 01       	movw	r24, r22
    2730:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    2734:	87 e6       	ldi	r24, 0x67	; 103
    2736:	92 e0       	ldi	r25, 0x02	; 2
    2738:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    273c:	86 e5       	ldi	r24, 0x56	; 86
    273e:	92 e0       	ldi	r25, 0x02	; 2
    2740:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(dir[0]*1000);
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a e7       	ldi	r20, 0x7A	; 122
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	ef 96       	adiw	r28, 0x3f	; 63
    274e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2750:	bf ad       	ldd	r27, Y+63	; 0x3f
    2752:	ef 97       	sbiw	r28, 0x3f	; 63
    2754:	6d 91       	ld	r22, X+
    2756:	7d 91       	ld	r23, X+
    2758:	8d 91       	ld	r24, X+
    275a:	9c 91       	ld	r25, X
    275c:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    2760:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    2764:	cb 01       	movw	r24, r22
    2766:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    276a:	8e e4       	ldi	r24, 0x4E	; 78
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
	m_usb_tx_int(dir[1]*1000);
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	54 e4       	ldi	r21, 0x44	; 68
    277a:	ef 96       	adiw	r28, 0x3f	; 63
    277c:	ee ad       	ldd	r30, Y+62	; 0x3e
    277e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2780:	ef 97       	sbiw	r28, 0x3f	; 63
    2782:	64 81       	ldd	r22, Z+4	; 0x04
    2784:	75 81       	ldd	r23, Z+5	; 0x05
    2786:	86 81       	ldd	r24, Z+6	; 0x06
    2788:	97 81       	ldd	r25, Z+7	; 0x07
    278a:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsf3>
    278e:	0e 94 17 1a 	call	0x342e	; 0x342e <__fixsfsi>
    2792:	cb 01       	movw	r24, r22
    2794:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <m_usb_tx_int>
	m_usb_tx_string("\n");
    2798:	8c e4       	ldi	r24, 0x4C	; 76
    279a:	92 e0       	ldi	r25, 0x02	; 2
    279c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <print_P>
    27a0:	14 c0       	rjmp	.+40     	; 0x27ca <localization+0xe18>
    27a2:	eb 96       	adiw	r28, 0x3b	; 59
    27a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    27a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    27a8:	eb 97       	sbiw	r28, 0x3b	; 59
    27aa:	2c 5f       	subi	r18, 0xFC	; 252
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	eb 96       	adiw	r28, 0x3b	; 59
    27b0:	3f af       	std	Y+63, r19	; 0x3f
    27b2:	2e af       	std	Y+62, r18	; 0x3e
    27b4:	eb 97       	sbiw	r28, 0x3b	; 59
    27b6:	e3 96       	adiw	r28, 0x33	; 51
    27b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    27ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    27bc:	e3 97       	sbiw	r28, 0x33	; 51
    27be:	04 96       	adiw	r24, 0x04	; 4
    27c0:	e3 96       	adiw	r28, 0x33	; 51
    27c2:	9f af       	std	Y+63, r25	; 0x3f
    27c4:	8e af       	std	Y+62, r24	; 0x3e
    27c6:	e3 97       	sbiw	r28, 0x33	; 51
    27c8:	bd ca       	rjmp	.-2694   	; 0x1d44 <localization+0x392>
}
    27ca:	ca 57       	subi	r28, 0x7A	; 122
    27cc:	df 4f       	sbci	r29, 0xFF	; 255
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	ff 90       	pop	r15
    27e2:	ef 90       	pop	r14
    27e4:	df 90       	pop	r13
    27e6:	cf 90       	pop	r12
    27e8:	bf 90       	pop	r11
    27ea:	af 90       	pop	r10
    27ec:	9f 90       	pop	r9
    27ee:	8f 90       	pop	r8
    27f0:	7f 90       	pop	r7
    27f2:	6f 90       	pop	r6
    27f4:	5f 90       	pop	r5
    27f6:	4f 90       	pop	r4
    27f8:	3f 90       	pop	r3
    27fa:	2f 90       	pop	r2
    27fc:	08 95       	ret

000027fe <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    27fe:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2800:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2802:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2804:	8c e0       	ldi	r24, 0x0C	; 12
    2806:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    280a:	e9 e6       	ldi	r30, 0x69	; 105
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 62       	ori	r24, 0x20	; 32
    2812:	80 83       	st	Z, r24
    2814:	80 81       	ld	r24, Z
    2816:	8f 7e       	andi	r24, 0xEF	; 239
    2818:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    281a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    281c:	78 94       	sei
    281e:	08 95       	ret

00002820 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	18 2f       	mov	r17, r24
    2828:	d6 2f       	mov	r29, r22
    282a:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    282c:	0e 94 ff 13 	call	0x27fe	; 0x27fe <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2830:	94 ea       	ldi	r25, 0xA4	; 164
    2832:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2836:	ec eb       	ldi	r30, 0xBC	; 188
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	90 81       	ld	r25, Z
    283c:	99 23       	and	r25, r25
    283e:	ec f7       	brge	.-6      	; 0x283a <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2840:	90 e5       	ldi	r25, 0x50	; 80
    2842:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2846:	94 e8       	ldi	r25, 0x84	; 132
    2848:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    284c:	ec eb       	ldi	r30, 0xBC	; 188
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	90 81       	ld	r25, Z
    2852:	99 23       	and	r25, r25
    2854:	ec f7       	brge	.-6      	; 0x2850 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2856:	90 91 b9 00 	lds	r25, 0x00B9
    285a:	98 7f       	andi	r25, 0xF8	; 248
    285c:	90 32       	cpi	r25, 0x20	; 32
    285e:	29 f4       	brne	.+10     	; 0x286a <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2860:	84 e9       	ldi	r24, 0x94	; 148
    2862:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	2d c0       	rjmp	.+90     	; 0x28c4 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2870:	84 e8       	ldi	r24, 0x84	; 132
    2872:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2876:	ec eb       	ldi	r30, 0xBC	; 188
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	90 81       	ld	r25, Z
    287c:	99 23       	and	r25, r25
    287e:	ec f7       	brge	.-6      	; 0x287a <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2880:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2884:	84 e8       	ldi	r24, 0x84	; 132
    2886:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    288a:	ec eb       	ldi	r30, 0xBC	; 188
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	88 23       	and	r24, r24
    2892:	ec f7       	brge	.-6      	; 0x288e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2894:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2898:	84 e8       	ldi	r24, 0x84	; 132
    289a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    289e:	ec eb       	ldi	r30, 0xBC	; 188
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	88 23       	and	r24, r24
    28a6:	ec f7       	brge	.-6      	; 0x28a2 <m_rf_open+0x82>
	
	TWDR = packet_length;
    28a8:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    28ac:	84 e8       	ldi	r24, 0x84	; 132
    28ae:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    28b2:	ec eb       	ldi	r30, 0xBC	; 188
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	88 23       	and	r24, r24
    28ba:	ec f7       	brge	.-6      	; 0x28b6 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28bc:	84 e9       	ldi	r24, 0x94	; 148
    28be:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
}
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	08 95       	ret

000028cc <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    28d0:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    28d2:	94 ea       	ldi	r25, 0xA4	; 164
    28d4:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    28d8:	ec eb       	ldi	r30, 0xBC	; 188
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	90 81       	ld	r25, Z
    28de:	99 23       	and	r25, r25
    28e0:	ec f7       	brge	.-6      	; 0x28dc <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    28e2:	90 e5       	ldi	r25, 0x50	; 80
    28e4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    28e8:	94 e8       	ldi	r25, 0x84	; 132
    28ea:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    28ee:	ec eb       	ldi	r30, 0xBC	; 188
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	90 81       	ld	r25, Z
    28f4:	99 23       	and	r25, r25
    28f6:	ec f7       	brge	.-6      	; 0x28f2 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    28f8:	90 91 b9 00 	lds	r25, 0x00B9
    28fc:	98 7f       	andi	r25, 0xF8	; 248
    28fe:	90 32       	cpi	r25, 0x20	; 32
    2900:	31 f4       	brne	.+12     	; 0x290e <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2902:	84 e9       	ldi	r24, 0x94	; 148
    2904:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    2908:	78 94       	sei
		return 0;
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	32 c0       	rjmp	.+100    	; 0x2972 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    290e:	93 e0       	ldi	r25, 0x03	; 3
    2910:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2914:	94 e8       	ldi	r25, 0x84	; 132
    2916:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    291a:	ec eb       	ldi	r30, 0xBC	; 188
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	90 81       	ld	r25, Z
    2920:	99 23       	and	r25, r25
    2922:	ec f7       	brge	.-6      	; 0x291e <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    2924:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2928:	84 e8       	ldi	r24, 0x84	; 132
    292a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    292e:	ec eb       	ldi	r30, 0xBC	; 188
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	88 23       	and	r24, r24
    2936:	ec f7       	brge	.-6      	; 0x2932 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2938:	24 2f       	mov	r18, r20
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	12 16       	cp	r1, r18
    293e:	13 06       	cpc	r1, r19
    2940:	9c f4       	brge	.+38     	; 0x2968 <m_rf_send+0x9c>
    2942:	a6 2f       	mov	r26, r22
    2944:	b7 2f       	mov	r27, r23
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    294a:	cb eb       	ldi	r28, 0xBB	; 187
    294c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    294e:	ec eb       	ldi	r30, 0xBC	; 188
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    2954:	4d 91       	ld	r20, X+
    2956:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    2958:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    295a:	40 81       	ld	r20, Z
    295c:	44 23       	and	r20, r20
    295e:	ec f7       	brge	.-6      	; 0x295a <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2960:	01 96       	adiw	r24, 0x01	; 1
    2962:	82 17       	cp	r24, r18
    2964:	93 07       	cpc	r25, r19
    2966:	b4 f3       	brlt	.-20     	; 0x2954 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2968:	84 e9       	ldi	r24, 0x94	; 148
    296a:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    296e:	78 94       	sei
	
	return 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
}
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	08 95       	ret

00002978 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    297e:	80 ea       	ldi	r24, 0xA0	; 160
    2980:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2984:	82 e1       	ldi	r24, 0x12	; 18
    2986:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2988:	09 b4       	in	r0, 0x29	; 41
    298a:	00 fe       	sbrs	r0, 0
    298c:	fd cf       	rjmp	.-6      	; 0x2988 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    298e:	80 e9       	ldi	r24, 0x90	; 144
    2990:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2994:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2998:	10 92 a5 01 	sts	0x01A5, r1
	cdc_line_rtsdtr = 0;
    299c:	10 92 a2 01 	sts	0x01A2, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    29a0:	8c e0       	ldi	r24, 0x0C	; 12
    29a2:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    29a6:	78 94       	sei
    29a8:	08 95       	ret

000029aa <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    29ae:	90 91 a5 01 	lds	r25, 0x01A5
    29b2:	99 23       	and	r25, r25
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <m_usb_tx_char+0xe>
    29b6:	4c c0       	rjmp	.+152    	; 0x2a50 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    29b8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    29ba:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    29bc:	24 e0       	ldi	r18, 0x04	; 4
    29be:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    29c2:	20 91 a3 01 	lds	r18, 0x01A3
    29c6:	22 23       	and	r18, r18
    29c8:	49 f0       	breq	.+18     	; 0x29dc <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    29ca:	20 91 e8 00 	lds	r18, 0x00E8
    29ce:	25 fd       	sbrc	r18, 5
    29d0:	03 c0       	rjmp	.+6      	; 0x29d8 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    29d2:	9f bf       	out	0x3f, r25	; 63
			return -1;
    29d4:	8f ef       	ldi	r24, 0xFF	; 255
    29d6:	41 c0       	rjmp	.+130    	; 0x2a5a <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    29d8:	10 92 a3 01 	sts	0x01A3, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    29dc:	30 91 e4 00 	lds	r19, 0x00E4
    29e0:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    29e2:	20 91 e8 00 	lds	r18, 0x00E8
    29e6:	25 fd       	sbrc	r18, 5
    29e8:	24 c0       	rjmp	.+72     	; 0x2a32 <m_usb_tx_char+0x88>
		SREG = intr_state;
    29ea:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    29ec:	90 91 e4 00 	lds	r25, 0x00E4
    29f0:	93 17       	cp	r25, r19
    29f2:	81 f0       	breq	.+32     	; 0x2a14 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    29f4:	90 91 a5 01 	lds	r25, 0x01A5
    29f8:	99 23       	and	r25, r25
    29fa:	61 f1       	breq	.+88     	; 0x2a54 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    29fc:	a9 ee       	ldi	r26, 0xE9	; 233
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2a02:	e8 ee       	ldi	r30, 0xE8	; 232
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2a06:	c4 ee       	ldi	r28, 0xE4	; 228
    2a08:	d0 e0       	ldi	r29, 0x00	; 0
    2a0a:	0d c0       	rjmp	.+26     	; 0x2a26 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2a0c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2a0e:	98 81       	ld	r25, Y
    2a10:	93 13       	cpse	r25, r19
    2a12:	05 c0       	rjmp	.+10     	; 0x2a1e <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	80 93 a3 01 	sts	0x01A3, r24
			return -1;
    2a1a:	8f ef       	ldi	r24, 0xFF	; 255
    2a1c:	1e c0       	rjmp	.+60     	; 0x2a5a <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2a1e:	90 91 a5 01 	lds	r25, 0x01A5
    2a22:	99 23       	and	r25, r25
    2a24:	c9 f0       	breq	.+50     	; 0x2a58 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    2a26:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2a28:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2a2a:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2a2c:	20 81       	ld	r18, Z
    2a2e:	25 ff       	sbrs	r18, 5
    2a30:	ed cf       	rjmp	.-38     	; 0x2a0c <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2a32:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2a36:	80 91 e8 00 	lds	r24, 0x00E8
    2a3a:	85 fd       	sbrc	r24, 5
    2a3c:	03 c0       	rjmp	.+6      	; 0x2a44 <m_usb_tx_char+0x9a>
    2a3e:	8a e3       	ldi	r24, 0x3A	; 58
    2a40:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2a44:	85 e0       	ldi	r24, 0x05	; 5
    2a46:	80 93 a4 01 	sts	0x01A4, r24
	SREG = intr_state;
    2a4a:	9f bf       	out	0x3f, r25	; 63
	return 0;
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2a50:	8f ef       	ldi	r24, 0xFF	; 255
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2a54:	8f ef       	ldi	r24, 0xFF	; 255
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <m_usb_tx_char+0xb0>
    2a58:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	08 95       	ret

00002a60 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2a60:	1f 92       	push	r1
    2a62:	0f 92       	push	r0
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	0f 92       	push	r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	8f 93       	push	r24
    2a6c:	9f 93       	push	r25
    2a6e:	ef 93       	push	r30
    2a70:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2a72:	e1 ee       	ldi	r30, 0xE1	; 225
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
        UDINT = 0;
    2a78:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2a7a:	83 ff       	sbrs	r24, 3
    2a7c:	11 c0       	rjmp	.+34     	; 0x2aa0 <__vector_10+0x40>
		UENUM = 0;
    2a7e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2a88:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2a8c:	92 e1       	ldi	r25, 0x12	; 18
    2a8e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2a92:	98 e0       	ldi	r25, 0x08	; 8
    2a94:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2a98:	10 92 a5 01 	sts	0x01A5, r1
		cdc_line_rtsdtr = 0;
    2a9c:	10 92 a2 01 	sts	0x01A2, r1
        }
	if (intbits & (1<<SOFI)) {
    2aa0:	82 ff       	sbrs	r24, 2
    2aa2:	13 c0       	rjmp	.+38     	; 0x2aca <__vector_10+0x6a>
		if (usb_configuration) {
    2aa4:	80 91 a5 01 	lds	r24, 0x01A5
    2aa8:	88 23       	and	r24, r24
    2aaa:	79 f0       	breq	.+30     	; 0x2aca <__vector_10+0x6a>
			t = transmit_flush_timer;
    2aac:	80 91 a4 01 	lds	r24, 0x01A4
			if (t) {
    2ab0:	88 23       	and	r24, r24
    2ab2:	59 f0       	breq	.+22     	; 0x2aca <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2ab4:	81 50       	subi	r24, 0x01	; 1
    2ab6:	80 93 a4 01 	sts	0x01A4, r24
				if (!t) {
    2aba:	81 11       	cpse	r24, r1
    2abc:	06 c0       	rjmp	.+12     	; 0x2aca <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2abe:	84 e0       	ldi	r24, 0x04	; 4
    2ac0:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2ac4:	8a e3       	ldi	r24, 0x3A	; 58
    2ac6:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	9f 91       	pop	r25
    2ad0:	8f 91       	pop	r24
    2ad2:	0f 90       	pop	r0
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	0f 90       	pop	r0
    2ad8:	1f 90       	pop	r1
    2ada:	18 95       	reti

00002adc <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2adc:	1f 92       	push	r1
    2ade:	0f 92       	push	r0
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	0f 92       	push	r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	2f 93       	push	r18
    2aec:	3f 93       	push	r19
    2aee:	4f 93       	push	r20
    2af0:	5f 93       	push	r21
    2af2:	6f 93       	push	r22
    2af4:	7f 93       	push	r23
    2af6:	8f 93       	push	r24
    2af8:	9f 93       	push	r25
    2afa:	af 93       	push	r26
    2afc:	bf 93       	push	r27
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	ef 93       	push	r30
    2b04:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2b06:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2b0a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2b0e:	83 ff       	sbrs	r24, 3
    2b10:	4e c1       	rjmp	.+668    	; 0x2dae <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    2b12:	e1 ef       	ldi	r30, 0xF1	; 241
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    2b18:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2b1a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2b1c:	80 81       	ld	r24, Z
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    2b22:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    2b24:	50 81       	ld	r21, Z
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	bc 01       	movw	r22, r24
    2b2a:	75 2b       	or	r23, r21
                wLength = UEDATX;
    2b2c:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    2b2e:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2b30:	82 ef       	ldi	r24, 0xF2	; 242
    2b32:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    2b36:	46 30       	cpi	r20, 0x06	; 6
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <__vector_11+0x60>
    2b3a:	58 c0       	rjmp	.+176    	; 0x2bec <__vector_11+0x110>
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2b3e:	81 e2       	ldi	r24, 0x21	; 33
    2b40:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2b44:	3b c1       	rjmp	.+630    	; 0x2dbc <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2b46:	c6 e0       	ldi	r28, 0x06	; 6
    2b48:	82 e8       	ldi	r24, 0x82	; 130
    2b4a:	92 e0       	ldi	r25, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	45 91       	lpm	r20, Z+
    2b50:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    2b52:	24 17       	cp	r18, r20
    2b54:	35 07       	cpc	r19, r21
    2b56:	11 f0       	breq	.+4      	; 0x2b5c <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    2b58:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2b5a:	23 c0       	rjmp	.+70     	; 0x2ba2 <__vector_11+0xc6>
				}
				list += 2;
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2b60:	45 91       	lpm	r20, Z+
    2b62:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    2b64:	64 17       	cp	r22, r20
    2b66:	75 07       	cpc	r23, r21
    2b68:	11 f0       	breq	.+4      	; 0x2b6e <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    2b6a:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2b6c:	1a c0       	rjmp	.+52     	; 0x2ba2 <__vector_11+0xc6>
				}
				list += 2;
    2b6e:	fc 01       	movw	r30, r24
    2b70:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2b72:	25 91       	lpm	r18, Z+
    2b74:	34 91       	lpm	r19, Z
				list += 2;
    2b76:	fc 01       	movw	r30, r24
    2b78:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2b7a:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2b7c:	8b 2f       	mov	r24, r27
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2b82:	8f 3f       	cpi	r24, 0xFF	; 255
    2b84:	91 05       	cpc	r25, r1
    2b86:	19 f0       	breq	.+6      	; 0x2b8e <__vector_11+0xb2>
    2b88:	10 f0       	brcs	.+4      	; 0x2b8e <__vector_11+0xb2>
    2b8a:	8f ef       	ldi	r24, 0xFF	; 255
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	85 17       	cp	r24, r21
    2b90:	08 f4       	brcc	.+2      	; 0x2b94 <__vector_11+0xb8>
    2b92:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2b94:	a8 ee       	ldi	r26, 0xE8	; 232
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2b98:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2b9a:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2b9c:	c1 ef       	ldi	r28, 0xF1	; 241
    2b9e:	d0 e0       	ldi	r29, 0x00	; 0
    2ba0:	03 c0       	rjmp	.+6      	; 0x2ba8 <__vector_11+0xcc>
    2ba2:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2ba4:	99 f6       	brne	.-90     	; 0x2b4c <__vector_11+0x70>
    2ba6:	cb cf       	rjmp	.-106    	; 0x2b3e <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2ba8:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2baa:	98 2f       	mov	r25, r24
    2bac:	95 70       	andi	r25, 0x05	; 5
    2bae:	e1 f3       	breq	.-8      	; 0x2ba8 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    2bb0:	82 fd       	sbrc	r24, 2
    2bb2:	04 c1       	rjmp	.+520    	; 0x2dbc <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2bb4:	45 2f       	mov	r20, r21
    2bb6:	51 31       	cpi	r21, 0x11	; 17
    2bb8:	08 f0       	brcs	.+2      	; 0x2bbc <__vector_11+0xe0>
    2bba:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    2bbc:	44 23       	and	r20, r20
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <__vector_11+0xe6>
    2bc0:	fa c0       	rjmp	.+500    	; 0x2db6 <__vector_11+0x2da>
    2bc2:	f9 01       	movw	r30, r18
    2bc4:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    2bc6:	94 91       	lpm	r25, Z
    2bc8:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2bca:	81 50       	subi	r24, 0x01	; 1
    2bcc:	31 96       	adiw	r30, 0x01	; 1
    2bce:	81 11       	cpse	r24, r1
    2bd0:	fa cf       	rjmp	.-12     	; 0x2bc6 <__vector_11+0xea>
    2bd2:	8f ef       	ldi	r24, 0xFF	; 255
    2bd4:	84 0f       	add	r24, r20
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	28 0f       	add	r18, r24
    2bdc:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2bde:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2be0:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2be2:	51 11       	cpse	r21, r1
    2be4:	e1 cf       	rjmp	.-62     	; 0x2ba8 <__vector_11+0xcc>
    2be6:	40 31       	cpi	r20, 0x10	; 16
    2be8:	f9 f2       	breq	.-66     	; 0x2ba8 <__vector_11+0xcc>
    2bea:	e8 c0       	rjmp	.+464    	; 0x2dbc <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2bec:	45 30       	cpi	r20, 0x05	; 5
    2bee:	61 f4       	brne	.+24     	; 0x2c08 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2bf0:	8e ef       	ldi	r24, 0xFE	; 254
    2bf2:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2bf6:	e8 ee       	ldi	r30, 0xE8	; 232
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	80 ff       	sbrs	r24, 0
    2bfe:	fd cf       	rjmp	.-6      	; 0x2bfa <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2c00:	20 68       	ori	r18, 0x80	; 128
    2c02:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2c06:	da c0       	rjmp	.+436    	; 0x2dbc <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2c08:	49 30       	cpi	r20, 0x09	; 9
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <__vector_11+0x132>
    2c0c:	36 c0       	rjmp	.+108    	; 0x2c7a <__vector_11+0x19e>
    2c0e:	c1 11       	cpse	r28, r1
    2c10:	5f c0       	rjmp	.+190    	; 0x2cd0 <__vector_11+0x1f4>
			usb_configuration = wValue;
    2c12:	20 93 a5 01 	sts	0x01A5, r18
			cdc_line_rtsdtr = 0;
    2c16:	10 92 a2 01 	sts	0x01A2, r1
			transmit_flush_timer = 0;
    2c1a:	10 92 a4 01 	sts	0x01A4, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2c1e:	8e ef       	ldi	r24, 0xFE	; 254
    2c20:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2c24:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2c26:	8b e2       	ldi	r24, 0x2B	; 43
    2c28:	93 e0       	ldi	r25, 0x03	; 3
			for (i=1; i<5; i++) {
				UENUM = i;
    2c2a:	c9 ee       	ldi	r28, 0xE9	; 233
    2c2c:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2c2e:	ab ee       	ldi	r26, 0xEB	; 235
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2c32:	6c ee       	ldi	r22, 0xEC	; 236
    2c34:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2c36:	4d ee       	ldi	r20, 0xED	; 237
    2c38:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2c3a:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2c3c:	9c 01       	movw	r18, r24
    2c3e:	2f 5f       	subi	r18, 0xFF	; 255
    2c40:	3f 4f       	sbci	r19, 0xFF	; 255
    2c42:	fc 01       	movw	r30, r24
    2c44:	04 91       	lpm	r16, Z
				UECONX = en;
    2c46:	0c 93       	st	X, r16
				if (en) {
    2c48:	00 23       	and	r16, r16
    2c4a:	61 f0       	breq	.+24     	; 0x2c64 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    2c4c:	f9 01       	movw	r30, r18
    2c4e:	24 91       	lpm	r18, Z
    2c50:	fb 01       	movw	r30, r22
    2c52:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    2c54:	9c 01       	movw	r18, r24
    2c56:	2d 5f       	subi	r18, 0xFD	; 253
    2c58:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	32 96       	adiw	r30, 0x02	; 2
    2c5e:	84 91       	lpm	r24, Z
    2c60:	fa 01       	movw	r30, r20
    2c62:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2c64:	1f 5f       	subi	r17, 0xFF	; 255
    2c66:	15 30       	cpi	r17, 0x05	; 5
    2c68:	11 f0       	breq	.+4      	; 0x2c6e <__vector_11+0x192>
    2c6a:	c9 01       	movw	r24, r18
    2c6c:	e6 cf       	rjmp	.-52     	; 0x2c3a <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2c6e:	ea ee       	ldi	r30, 0xEA	; 234
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	8e e1       	ldi	r24, 0x1E	; 30
    2c74:	80 83       	st	Z, r24
        		UERST = 0;
    2c76:	10 82       	st	Z, r1
			return;
    2c78:	a1 c0       	rjmp	.+322    	; 0x2dbc <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2c7a:	48 30       	cpi	r20, 0x08	; 8
    2c7c:	81 f4       	brne	.+32     	; 0x2c9e <__vector_11+0x1c2>
    2c7e:	c0 38       	cpi	r28, 0x80	; 128
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <__vector_11+0x1a8>
    2c82:	42 c0       	rjmp	.+132    	; 0x2d08 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2c84:	e8 ee       	ldi	r30, 0xE8	; 232
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	80 ff       	sbrs	r24, 0
    2c8c:	fd cf       	rjmp	.-6      	; 0x2c88 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2c8e:	80 91 a5 01 	lds	r24, 0x01A5
    2c92:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2c96:	8e ef       	ldi	r24, 0xFE	; 254
    2c98:	80 93 e8 00 	sts	0x00E8, r24
    2c9c:	8f c0       	rjmp	.+286    	; 0x2dbc <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2c9e:	41 32       	cpi	r20, 0x21	; 33
    2ca0:	b9 f4       	brne	.+46     	; 0x2cd0 <__vector_11+0x1f4>
    2ca2:	c1 3a       	cpi	r28, 0xA1	; 161
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <__vector_11+0x1cc>
    2ca6:	40 c0       	rjmp	.+128    	; 0x2d28 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2ca8:	e8 ee       	ldi	r30, 0xE8	; 232
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	80 ff       	sbrs	r24, 0
    2cb0:	fd cf       	rjmp	.-6      	; 0x2cac <__vector_11+0x1d0>
    2cb2:	ee e2       	ldi	r30, 0x2E	; 46
    2cb4:	f1 e0       	ldi	r31, 0x01	; 1
    2cb6:	85 e3       	ldi	r24, 0x35	; 53
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2cba:	a1 ef       	ldi	r26, 0xF1	; 241
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	21 91       	ld	r18, Z+
    2cc0:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2cc2:	e8 17       	cp	r30, r24
    2cc4:	f9 07       	cpc	r31, r25
    2cc6:	d9 f7       	brne	.-10     	; 0x2cbe <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2cc8:	8e ef       	ldi	r24, 0xFE	; 254
    2cca:	80 93 e8 00 	sts	0x00E8, r24
    2cce:	76 c0       	rjmp	.+236    	; 0x2dbc <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2cd0:	40 32       	cpi	r20, 0x20	; 32
    2cd2:	d1 f4       	brne	.+52     	; 0x2d08 <__vector_11+0x22c>
    2cd4:	c1 32       	cpi	r28, 0x21	; 33
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <__vector_11+0x1fe>
    2cd8:	43 c0       	rjmp	.+134    	; 0x2d60 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2cda:	e8 ee       	ldi	r30, 0xE8	; 232
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	82 ff       	sbrs	r24, 2
    2ce2:	fd cf       	rjmp	.-6      	; 0x2cde <__vector_11+0x202>
    2ce4:	ee e2       	ldi	r30, 0x2E	; 46
    2ce6:	f1 e0       	ldi	r31, 0x01	; 1
    2ce8:	85 e3       	ldi	r24, 0x35	; 53
    2cea:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2cec:	a1 ef       	ldi	r26, 0xF1	; 241
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	2c 91       	ld	r18, X
    2cf2:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2cf4:	e8 17       	cp	r30, r24
    2cf6:	f9 07       	cpc	r31, r25
    2cf8:	d9 f7       	brne	.-10     	; 0x2cf0 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2cfa:	e8 ee       	ldi	r30, 0xE8	; 232
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	8b ef       	ldi	r24, 0xFB	; 251
    2d00:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d02:	8e ef       	ldi	r24, 0xFE	; 254
    2d04:	80 83       	st	Z, r24
    2d06:	5a c0       	rjmp	.+180    	; 0x2dbc <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2d08:	42 32       	cpi	r20, 0x22	; 34
    2d0a:	71 f4       	brne	.+28     	; 0x2d28 <__vector_11+0x24c>
    2d0c:	c1 32       	cpi	r28, 0x21	; 33
    2d0e:	09 f0       	breq	.+2      	; 0x2d12 <__vector_11+0x236>
    2d10:	4e c0       	rjmp	.+156    	; 0x2dae <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    2d12:	20 93 a2 01 	sts	0x01A2, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2d16:	e8 ee       	ldi	r30, 0xE8	; 232
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	80 ff       	sbrs	r24, 0
    2d1e:	fd cf       	rjmp	.-6      	; 0x2d1a <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d20:	8e ef       	ldi	r24, 0xFE	; 254
    2d22:	80 93 e8 00 	sts	0x00E8, r24
    2d26:	4a c0       	rjmp	.+148    	; 0x2dbc <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2d28:	41 11       	cpse	r20, r1
    2d2a:	1a c0       	rjmp	.+52     	; 0x2d60 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2d2c:	e8 ee       	ldi	r30, 0xE8	; 232
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	80 ff       	sbrs	r24, 0
    2d34:	fd cf       	rjmp	.-6      	; 0x2d30 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2d36:	c2 38       	cpi	r28, 0x82	; 130
    2d38:	51 f4       	brne	.+20     	; 0x2d4e <__vector_11+0x272>
				UENUM = wIndex;
    2d3a:	e9 ee       	ldi	r30, 0xE9	; 233
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    2d40:	80 91 eb 00 	lds	r24, 0x00EB
    2d44:	85 fb       	bst	r24, 5
    2d46:	88 27       	eor	r24, r24
    2d48:	80 f9       	bld	r24, 0
				UENUM = 0;
    2d4a:	10 82       	st	Z, r1
    2d4c:	01 c0       	rjmp	.+2      	; 0x2d50 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    2d50:	e1 ef       	ldi	r30, 0xF1	; 241
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 83       	st	Z, r24
			UEDATX = 0;
    2d56:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d58:	8e ef       	ldi	r24, 0xFE	; 254
    2d5a:	80 93 e8 00 	sts	0x00E8, r24
    2d5e:	2e c0       	rjmp	.+92     	; 0x2dbc <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2d60:	84 2f       	mov	r24, r20
    2d62:	8d 7f       	andi	r24, 0xFD	; 253
    2d64:	81 30       	cpi	r24, 0x01	; 1
    2d66:	19 f5       	brne	.+70     	; 0x2dae <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    2d68:	c2 30       	cpi	r28, 0x02	; 2
    2d6a:	09 f5       	brne	.+66     	; 0x2dae <__vector_11+0x2d2>
    2d6c:	23 2b       	or	r18, r19
    2d6e:	f9 f4       	brne	.+62     	; 0x2dae <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    2d70:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2d72:	8f ef       	ldi	r24, 0xFF	; 255
    2d74:	86 0f       	add	r24, r22
    2d76:	84 30       	cpi	r24, 0x04	; 4
    2d78:	d0 f4       	brcc	.+52     	; 0x2dae <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d7a:	8e ef       	ldi	r24, 0xFE	; 254
    2d7c:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2d80:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    2d84:	43 30       	cpi	r20, 0x03	; 3
    2d86:	21 f4       	brne	.+8      	; 0x2d90 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2d88:	81 e2       	ldi	r24, 0x21	; 33
    2d8a:	80 93 eb 00 	sts	0x00EB, r24
    2d8e:	16 c0       	rjmp	.+44     	; 0x2dbc <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2d90:	89 e1       	ldi	r24, 0x19	; 25
    2d92:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <__vector_11+0x2c4>
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	6a 95       	dec	r22
    2da2:	e2 f7       	brpl	.-8      	; 0x2d9c <__vector_11+0x2c0>
    2da4:	ea ee       	ldi	r30, 0xEA	; 234
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 83       	st	Z, r24
					UERST = 0;
    2daa:	10 82       	st	Z, r1
    2dac:	07 c0       	rjmp	.+14     	; 0x2dbc <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2dae:	81 e2       	ldi	r24, 0x21	; 33
    2db0:	80 93 eb 00 	sts	0x00EB, r24
    2db4:	03 c0       	rjmp	.+6      	; 0x2dbc <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2db6:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2db8:	51 11       	cpse	r21, r1
    2dba:	f6 ce       	rjmp	.-532    	; 0x2ba8 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2dbc:	ff 91       	pop	r31
    2dbe:	ef 91       	pop	r30
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	bf 91       	pop	r27
    2dc6:	af 91       	pop	r26
    2dc8:	9f 91       	pop	r25
    2dca:	8f 91       	pop	r24
    2dcc:	7f 91       	pop	r23
    2dce:	6f 91       	pop	r22
    2dd0:	5f 91       	pop	r21
    2dd2:	4f 91       	pop	r20
    2dd4:	3f 91       	pop	r19
    2dd6:	2f 91       	pop	r18
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	0f 90       	pop	r0
    2de2:	1f 90       	pop	r1
    2de4:	18 95       	reti

00002de6 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2dec:	ec 01       	movw	r28, r24
    2dee:	21 96       	adiw	r28, 0x01	; 1
    2df0:	fc 01       	movw	r30, r24
    2df2:	14 91       	lpm	r17, Z
		if (!c) break;
    2df4:	11 23       	and	r17, r17
    2df6:	69 f0       	breq	.+26     	; 0x2e12 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    2df8:	1a 30       	cpi	r17, 0x0A	; 10
    2dfa:	19 f4       	brne	.+6      	; 0x2e02 <print_P+0x1c>
    2dfc:	8d e0       	ldi	r24, 0x0D	; 13
    2dfe:	0e 94 d5 14 	call	0x29aa	; 0x29aa <m_usb_tx_char>
		usb_tx_char(c);
    2e02:	81 2f       	mov	r24, r17
    2e04:	0e 94 d5 14 	call	0x29aa	; 0x29aa <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2e08:	fe 01       	movw	r30, r28
    2e0a:	14 91       	lpm	r17, Z
    2e0c:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    2e0e:	11 11       	cpse	r17, r1
    2e10:	f3 cf       	rjmp	.-26     	; 0x2df8 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    2e12:	df 91       	pop	r29
    2e14:	cf 91       	pop	r28
    2e16:	1f 91       	pop	r17
    2e18:	08 95       	ret

00002e1a <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	27 97       	sbiw	r28, 0x07	; 7
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    2e36:	8e 01       	movw	r16, r28
    2e38:	0f 5f       	subi	r16, 0xFF	; 255
    2e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3c:	27 e0       	ldi	r18, 0x07	; 7
    2e3e:	f8 01       	movw	r30, r16
    2e40:	11 92       	st	Z+, r1
    2e42:	2a 95       	dec	r18
    2e44:	e9 f7       	brne	.-6      	; 0x2e40 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2e46:	4a e0       	ldi	r20, 0x0A	; 10
    2e48:	b8 01       	movw	r22, r16
    2e4a:	0e 94 26 1c 	call	0x384c	; 0x384c <__itoa_ncheck>
    2e4e:	7e 01       	movw	r14, r28
    2e50:	f8 e0       	ldi	r31, 0x08	; 8
    2e52:	ef 0e       	add	r14, r31
    2e54:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    2e56:	f8 01       	movw	r30, r16
    2e58:	81 91       	ld	r24, Z+
    2e5a:	8f 01       	movw	r16, r30
    2e5c:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    2e5e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    2e62:	0e 15       	cp	r16, r14
    2e64:	1f 05       	cpc	r17, r15
    2e66:	b9 f7       	brne	.-18     	; 0x2e56 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2e68:	27 96       	adiw	r28, 0x07	; 7
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	ff 90       	pop	r15
    2e7e:	ef 90       	pop	r14
    2e80:	08 95       	ret

00002e82 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2e86:	ec eb       	ldi	r30, 0xBC	; 188
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 23       	and	r24, r24
    2e8e:	34 f0       	brlt	.+12     	; 0x2e9c <twi_wait+0x1a>
    2e90:	2f 5f       	subi	r18, 0xFF	; 255
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	29 3e       	cpi	r18, 0xE9	; 233
    2e96:	83 e0       	ldi	r24, 0x03	; 3
    2e98:	38 07       	cpc	r19, r24
    2e9a:	b9 f7       	brne	.-18     	; 0x2e8a <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	28 3e       	cpi	r18, 0xE8	; 232
    2ea0:	33 40       	sbci	r19, 0x03	; 3
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <twi_wait+0x24>
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2ea6:	08 95       	ret

00002ea8 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2ea8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2eac:	84 e8       	ldi	r24, 0x84	; 132
    2eae:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2eb2:	0e 94 41 17 	call	0x2e82	; 0x2e82 <twi_wait>
    2eb6:	88 23       	and	r24, r24
    2eb8:	19 f0       	breq	.+6      	; 0x2ec0 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2eba:	80 91 b9 00 	lds	r24, 0x00B9
    2ebe:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    2ec0:	08 95       	ret

00002ec2 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2ec2:	cf 93       	push	r28
    2ec4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2ec6:	94 ea       	ldi	r25, 0xA4	; 164
    2ec8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2ecc:	0e 94 41 17 	call	0x2e82	; 0x2e82 <twi_wait>
    2ed0:	88 23       	and	r24, r24
    2ed2:	61 f0       	breq	.+24     	; 0x2eec <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2ed4:	8c 2f       	mov	r24, r28
    2ed6:	88 0f       	add	r24, r24
    2ed8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2edc:	80 32       	cpi	r24, 0x20	; 32
    2ede:	29 f4       	brne	.+10     	; 0x2eea <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2ee0:	84 e9       	ldi	r24, 0x94	; 148
    2ee2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <start_write+0x2a>
	}	
	return 1;	// success
    2eea:	81 e0       	ldi	r24, 0x01	; 1
}	
    2eec:	cf 91       	pop	r28
    2eee:	08 95       	ret

00002ef0 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2ef0:	0e 94 ff 13 	call	0x27fe	; 0x27fe <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2ef4:	88 e5       	ldi	r24, 0x58	; 88
    2ef6:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <start_write>
    2efa:	88 23       	and	r24, r24
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <m_wii_open+0x10>
    2efe:	cd c0       	rjmp	.+410    	; 0x309a <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2f00:	80 e3       	ldi	r24, 0x30	; 48
    2f02:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f06:	88 23       	and	r24, r24
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <m_wii_open+0x1c>
    2f0a:	c9 c0       	rjmp	.+402    	; 0x309e <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f12:	88 23       	and	r24, r24
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <m_wii_open+0x28>
    2f16:	c5 c0       	rjmp	.+394    	; 0x30a2 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2f18:	84 e9       	ldi	r24, 0x94	; 148
    2f1a:	80 93 bc 00 	sts	0x00BC, r24
    2f1e:	83 ec       	ldi	r24, 0xC3	; 195
    2f20:	99 e0       	ldi	r25, 0x09	; 9
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <m_wii_open+0x32>
    2f26:	00 c0       	rjmp	.+0      	; 0x2f28 <m_wii_open+0x38>
    2f28:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2f2a:	88 e5       	ldi	r24, 0x58	; 88
    2f2c:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <start_write>
    2f30:	88 23       	and	r24, r24
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <m_wii_open+0x46>
    2f34:	b8 c0       	rjmp	.+368    	; 0x30a6 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f3c:	88 23       	and	r24, r24
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <m_wii_open+0x52>
    2f40:	b4 c0       	rjmp	.+360    	; 0x30aa <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f48:	88 23       	and	r24, r24
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <m_wii_open+0x5e>
    2f4c:	b0 c0       	rjmp	.+352    	; 0x30ae <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f54:	88 23       	and	r24, r24
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <m_wii_open+0x6a>
    2f58:	ac c0       	rjmp	.+344    	; 0x30b2 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f60:	88 23       	and	r24, r24
    2f62:	09 f4       	brne	.+2      	; 0x2f66 <m_wii_open+0x76>
    2f64:	a8 c0       	rjmp	.+336    	; 0x30b6 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <m_wii_open+0x82>
    2f70:	a4 c0       	rjmp	.+328    	; 0x30ba <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f78:	88 23       	and	r24, r24
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <m_wii_open+0x8e>
    2f7c:	a0 c0       	rjmp	.+320    	; 0x30be <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f84:	88 23       	and	r24, r24
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <m_wii_open+0x9a>
    2f88:	9c c0       	rjmp	.+312    	; 0x30c2 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2f8a:	80 e9       	ldi	r24, 0x90	; 144
    2f8c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2f90:	88 23       	and	r24, r24
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <m_wii_open+0xa6>
    2f94:	98 c0       	rjmp	.+304    	; 0x30c6 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2f96:	84 e9       	ldi	r24, 0x94	; 148
    2f98:	80 93 bc 00 	sts	0x00BC, r24
    2f9c:	83 ec       	ldi	r24, 0xC3	; 195
    2f9e:	99 e0       	ldi	r25, 0x09	; 9
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <m_wii_open+0xb0>
    2fa4:	00 c0       	rjmp	.+0      	; 0x2fa6 <m_wii_open+0xb6>
    2fa6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2fa8:	88 e5       	ldi	r24, 0x58	; 88
    2faa:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <start_write>
    2fae:	88 23       	and	r24, r24
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <m_wii_open+0xc4>
    2fb2:	8b c0       	rjmp	.+278    	; 0x30ca <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2fb4:	87 e0       	ldi	r24, 0x07	; 7
    2fb6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2fba:	88 23       	and	r24, r24
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <m_wii_open+0xd0>
    2fbe:	87 c0       	rjmp	.+270    	; 0x30ce <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2fc6:	88 23       	and	r24, r24
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <m_wii_open+0xdc>
    2fca:	83 c0       	rjmp	.+262    	; 0x30d2 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    2fcc:	81 e4       	ldi	r24, 0x41	; 65
    2fce:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2fd2:	88 23       	and	r24, r24
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <m_wii_open+0xe8>
    2fd6:	7f c0       	rjmp	.+254    	; 0x30d6 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2fd8:	84 e9       	ldi	r24, 0x94	; 148
    2fda:	80 93 bc 00 	sts	0x00BC, r24
    2fde:	83 ec       	ldi	r24, 0xC3	; 195
    2fe0:	99 e0       	ldi	r25, 0x09	; 9
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <m_wii_open+0xf2>
    2fe6:	00 c0       	rjmp	.+0      	; 0x2fe8 <m_wii_open+0xf8>
    2fe8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2fea:	88 e5       	ldi	r24, 0x58	; 88
    2fec:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <start_write>
    2ff0:	88 23       	and	r24, r24
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <m_wii_open+0x106>
    2ff4:	72 c0       	rjmp	.+228    	; 0x30da <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2ff6:	8a e1       	ldi	r24, 0x1A	; 26
    2ff8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    2ffc:	88 23       	and	r24, r24
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <m_wii_open+0x112>
    3000:	6e c0       	rjmp	.+220    	; 0x30de <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    3002:	80 e4       	ldi	r24, 0x40	; 64
    3004:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    3008:	88 23       	and	r24, r24
    300a:	09 f4       	brne	.+2      	; 0x300e <m_wii_open+0x11e>
    300c:	6a c0       	rjmp	.+212    	; 0x30e2 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    3014:	88 23       	and	r24, r24
    3016:	09 f4       	brne	.+2      	; 0x301a <m_wii_open+0x12a>
    3018:	66 c0       	rjmp	.+204    	; 0x30e6 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    301a:	84 e9       	ldi	r24, 0x94	; 148
    301c:	80 93 bc 00 	sts	0x00BC, r24
    3020:	83 ec       	ldi	r24, 0xC3	; 195
    3022:	99 e0       	ldi	r25, 0x09	; 9
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <m_wii_open+0x134>
    3028:	00 c0       	rjmp	.+0      	; 0x302a <m_wii_open+0x13a>
    302a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    302c:	88 e5       	ldi	r24, 0x58	; 88
    302e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <start_write>
    3032:	88 23       	and	r24, r24
    3034:	09 f4       	brne	.+2      	; 0x3038 <m_wii_open+0x148>
    3036:	59 c0       	rjmp	.+178    	; 0x30ea <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    3038:	83 e3       	ldi	r24, 0x33	; 51
    303a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    303e:	88 23       	and	r24, r24
    3040:	09 f4       	brne	.+2      	; 0x3044 <m_wii_open+0x154>
    3042:	55 c0       	rjmp	.+170    	; 0x30ee <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    3044:	83 e0       	ldi	r24, 0x03	; 3
    3046:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    304a:	88 23       	and	r24, r24
    304c:	09 f4       	brne	.+2      	; 0x3050 <m_wii_open+0x160>
    304e:	51 c0       	rjmp	.+162    	; 0x30f2 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3050:	84 e9       	ldi	r24, 0x94	; 148
    3052:	80 93 bc 00 	sts	0x00BC, r24
    3056:	83 ec       	ldi	r24, 0xC3	; 195
    3058:	99 e0       	ldi	r25, 0x09	; 9
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <m_wii_open+0x16a>
    305e:	00 c0       	rjmp	.+0      	; 0x3060 <m_wii_open+0x170>
    3060:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    3062:	88 e5       	ldi	r24, 0x58	; 88
    3064:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <start_write>
    3068:	88 23       	and	r24, r24
    306a:	09 f4       	brne	.+2      	; 0x306e <m_wii_open+0x17e>
    306c:	44 c0       	rjmp	.+136    	; 0x30f6 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    306e:	80 e3       	ldi	r24, 0x30	; 48
    3070:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    3074:	88 23       	and	r24, r24
    3076:	09 f4       	brne	.+2      	; 0x307a <m_wii_open+0x18a>
    3078:	40 c0       	rjmp	.+128    	; 0x30fa <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    307a:	88 e0       	ldi	r24, 0x08	; 8
    307c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    3080:	88 23       	and	r24, r24
    3082:	e9 f1       	breq	.+122    	; 0x30fe <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3084:	84 e9       	ldi	r24, 0x94	; 148
    3086:	80 93 bc 00 	sts	0x00BC, r24
    308a:	83 ec       	ldi	r24, 0xC3	; 195
    308c:	99 e0       	ldi	r25, 0x09	; 9
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <m_wii_open+0x19e>
    3092:	00 c0       	rjmp	.+0      	; 0x3094 <m_wii_open+0x1a4>
    3094:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    30fe:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    3100:	08 95       	ret

00003102 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    3102:	cf 93       	push	r28
    3104:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    3106:	94 ea       	ldi	r25, 0xA4	; 164
    3108:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    310c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <twi_wait>
    3110:	88 23       	and	r24, r24
    3112:	69 f0       	breq	.+26     	; 0x312e <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    3114:	8c 2f       	mov	r24, r28
    3116:	88 0f       	add	r24, r24
    3118:	8f 5f       	subi	r24, 0xFF	; 255
    311a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    311e:	88 34       	cpi	r24, 0x48	; 72
    3120:	29 f4       	brne	.+10     	; 0x312c <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    3122:	84 e9       	ldi	r24, 0x94	; 148
    3124:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	01 c0       	rjmp	.+2      	; 0x312e <start_read+0x2c>
	}	
	return 1;	// success
    312c:	81 e0       	ldi	r24, 0x01	; 1
}	
    312e:	cf 91       	pop	r28
    3130:	08 95       	ret

00003132 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    3132:	ef 92       	push	r14
    3134:	ff 92       	push	r15
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	60 97       	sbiw	r28, 0x10	; 16
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	08 2f       	mov	r16, r24
    3150:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    3152:	fe 01       	movw	r30, r28
    3154:	31 96       	adiw	r30, 0x01	; 1
    3156:	80 e1       	ldi	r24, 0x10	; 16
    3158:	df 01       	movw	r26, r30
    315a:	1d 92       	st	X+, r1
    315c:	8a 95       	dec	r24
    315e:	e9 f7       	brne	.-6      	; 0x315a <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    3160:	88 e5       	ldi	r24, 0x58	; 88
    3162:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <start_write>
    3166:	88 23       	and	r24, r24
    3168:	09 f4       	brne	.+2      	; 0x316c <m_wii_read+0x3a>
    316a:	6e c0       	rjmp	.+220    	; 0x3248 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    316c:	86 e3       	ldi	r24, 0x36	; 54
    316e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <send_byte>
    3172:	88 23       	and	r24, r24
    3174:	09 f4       	brne	.+2      	; 0x3178 <m_wii_read+0x46>
    3176:	6a c0       	rjmp	.+212    	; 0x324c <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3178:	84 e9       	ldi	r24, 0x94	; 148
    317a:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    317e:	b8 e0       	ldi	r27, 0x08	; 8
    3180:	ba 95       	dec	r27
    3182:	f1 f7       	brne	.-4      	; 0x3180 <m_wii_read+0x4e>
    3184:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    3186:	88 e5       	ldi	r24, 0x58	; 88
    3188:	0e 94 81 18 	call	0x3102	; 0x3102 <start_read>
    318c:	88 23       	and	r24, r24
    318e:	09 f4       	brne	.+2      	; 0x3192 <m_wii_read+0x60>
    3190:	5f c0       	rjmp	.+190    	; 0x3250 <m_wii_read+0x11e>
    3192:	be 01       	movw	r22, r28
    3194:	6f 5f       	subi	r22, 0xFF	; 255
    3196:	7f 4f       	sbci	r23, 0xFF	; 255
    3198:	9e 01       	movw	r18, r28
    319a:	20 5f       	subi	r18, 0xF0	; 240
    319c:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    319e:	ec eb       	ldi	r30, 0xBC	; 188
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    31a4:	4b eb       	ldi	r20, 0xBB	; 187
    31a6:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    31a8:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    31aa:	80 81       	ld	r24, Z
    31ac:	88 23       	and	r24, r24
    31ae:	ec f7       	brge	.-6      	; 0x31aa <m_wii_read+0x78>
		temp[i] = TWDR;
    31b0:	da 01       	movw	r26, r20
    31b2:	8c 91       	ld	r24, X
    31b4:	db 01       	movw	r26, r22
    31b6:	8d 93       	st	X+, r24
    31b8:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    31ba:	a2 17       	cp	r26, r18
    31bc:	b3 07       	cpc	r27, r19
    31be:	a1 f7       	brne	.-24     	; 0x31a8 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    31c0:	84 e8       	ldi	r24, 0x84	; 132
    31c2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    31c6:	ec eb       	ldi	r30, 0xBC	; 188
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	88 23       	and	r24, r24
    31ce:	ec f7       	brge	.-6      	; 0x31ca <m_wii_read+0x98>
	temp[15] = TWDR;
    31d0:	80 91 bb 00 	lds	r24, 0x00BB
    31d4:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    31d6:	84 e9       	ldi	r24, 0x94	; 148
    31d8:	80 93 bc 00 	sts	0x00BC, r24
    31dc:	fe 01       	movw	r30, r28
    31de:	34 96       	adiw	r30, 0x04	; 4
    31e0:	e0 2e       	mov	r14, r16
    31e2:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    31e4:	80 81       	ld	r24, Z
    31e6:	98 2f       	mov	r25, r24
    31e8:	90 73       	andi	r25, 0x30	; 48
    31ea:	af 01       	movw	r20, r30
    31ec:	42 50       	subi	r20, 0x02	; 2
    31ee:	51 09       	sbc	r21, r1
    31f0:	da 01       	movw	r26, r20
    31f2:	4c 91       	ld	r20, X
    31f4:	50 e0       	ldi	r21, 0x00	; 0
    31f6:	b0 e1       	ldi	r27, 0x10	; 16
    31f8:	9b 9f       	mul	r25, r27
    31fa:	40 0d       	add	r20, r0
    31fc:	51 1d       	adc	r21, r1
    31fe:	11 24       	eor	r1, r1
    3200:	d7 01       	movw	r26, r14
    3202:	4d 93       	st	X+, r20
    3204:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    3206:	48 2f       	mov	r20, r24
    3208:	40 7c       	andi	r20, 0xC0	; 192
    320a:	50 e0       	ldi	r21, 0x00	; 0
    320c:	44 0f       	add	r20, r20
    320e:	55 1f       	adc	r21, r21
    3210:	44 0f       	add	r20, r20
    3212:	55 1f       	adc	r21, r21
    3214:	bf 01       	movw	r22, r30
    3216:	61 50       	subi	r22, 0x01	; 1
    3218:	71 09       	sbc	r23, r1
    321a:	db 01       	movw	r26, r22
    321c:	9c 91       	ld	r25, X
    321e:	49 0f       	add	r20, r25
    3220:	51 1d       	adc	r21, r1
    3222:	d7 01       	movw	r26, r14
    3224:	13 96       	adiw	r26, 0x03	; 3
    3226:	5c 93       	st	X, r21
    3228:	4e 93       	st	-X, r20
    322a:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    322c:	8f 70       	andi	r24, 0x0F	; 15
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	15 96       	adiw	r26, 0x05	; 5
    3232:	9c 93       	st	X, r25
    3234:	8e 93       	st	-X, r24
    3236:	14 97       	sbiw	r26, 0x04	; 4
    3238:	33 96       	adiw	r30, 0x03	; 3
    323a:	b6 e0       	ldi	r27, 0x06	; 6
    323c:	eb 0e       	add	r14, r27
    323e:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    3240:	2e 17       	cp	r18, r30
    3242:	3f 07       	cpc	r19, r31
    3244:	79 f6       	brne	.-98     	; 0x31e4 <m_wii_read+0xb2>
    3246:	06 c0       	rjmp	.+12     	; 0x3254 <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	05 c0       	rjmp	.+10     	; 0x3256 <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	03 c0       	rjmp	.+6      	; 0x3256 <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	01 c0       	rjmp	.+2      	; 0x3256 <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
}
    3256:	60 96       	adiw	r28, 0x10	; 16
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	1f 91       	pop	r17
    3268:	0f 91       	pop	r16
    326a:	ff 90       	pop	r15
    326c:	ef 90       	pop	r14
    326e:	08 95       	ret

00003270 <acos>:
    3270:	9f 93       	push	r25
    3272:	9f 77       	andi	r25, 0x7F	; 127
    3274:	4a d1       	rcall	.+660    	; 0x350a <__fp_arccos>
    3276:	0f 90       	pop	r0
    3278:	00 20       	and	r0, r0
    327a:	3a f4       	brpl	.+14     	; 0x328a <acos+0x1a>
    327c:	90 58       	subi	r25, 0x80	; 128
    327e:	a2 ea       	ldi	r26, 0xA2	; 162
    3280:	2a ed       	ldi	r18, 0xDA	; 218
    3282:	3f e0       	ldi	r19, 0x0F	; 15
    3284:	49 e4       	ldi	r20, 0x49	; 73
    3286:	50 e4       	ldi	r21, 0x40	; 64
    3288:	13 d0       	rcall	.+38     	; 0x32b0 <__addsf3x>
    328a:	ba c1       	rjmp	.+884    	; 0x3600 <__fp_round>

0000328c <__subsf3>:
    328c:	50 58       	subi	r21, 0x80	; 128

0000328e <__addsf3>:
    328e:	bb 27       	eor	r27, r27
    3290:	aa 27       	eor	r26, r26
    3292:	0e d0       	rcall	.+28     	; 0x32b0 <__addsf3x>
    3294:	b5 c1       	rjmp	.+874    	; 0x3600 <__fp_round>
    3296:	a6 d1       	rcall	.+844    	; 0x35e4 <__fp_pscA>
    3298:	30 f0       	brcs	.+12     	; 0x32a6 <__addsf3+0x18>
    329a:	ab d1       	rcall	.+854    	; 0x35f2 <__fp_pscB>
    329c:	20 f0       	brcs	.+8      	; 0x32a6 <__addsf3+0x18>
    329e:	31 f4       	brne	.+12     	; 0x32ac <__addsf3+0x1e>
    32a0:	9f 3f       	cpi	r25, 0xFF	; 255
    32a2:	11 f4       	brne	.+4      	; 0x32a8 <__addsf3+0x1a>
    32a4:	1e f4       	brtc	.+6      	; 0x32ac <__addsf3+0x1e>
    32a6:	76 c1       	rjmp	.+748    	; 0x3594 <__fp_nan>
    32a8:	0e f4       	brtc	.+2      	; 0x32ac <__addsf3+0x1e>
    32aa:	e0 95       	com	r30
    32ac:	e7 fb       	bst	r30, 7
    32ae:	6c c1       	rjmp	.+728    	; 0x3588 <__fp_inf>

000032b0 <__addsf3x>:
    32b0:	e9 2f       	mov	r30, r25
    32b2:	b7 d1       	rcall	.+878    	; 0x3622 <__fp_split3>
    32b4:	80 f3       	brcs	.-32     	; 0x3296 <__addsf3+0x8>
    32b6:	ba 17       	cp	r27, r26
    32b8:	62 07       	cpc	r22, r18
    32ba:	73 07       	cpc	r23, r19
    32bc:	84 07       	cpc	r24, r20
    32be:	95 07       	cpc	r25, r21
    32c0:	18 f0       	brcs	.+6      	; 0x32c8 <__addsf3x+0x18>
    32c2:	71 f4       	brne	.+28     	; 0x32e0 <__addsf3x+0x30>
    32c4:	9e f5       	brtc	.+102    	; 0x332c <__addsf3x+0x7c>
    32c6:	cf c1       	rjmp	.+926    	; 0x3666 <__fp_zero>
    32c8:	0e f4       	brtc	.+2      	; 0x32cc <__addsf3x+0x1c>
    32ca:	e0 95       	com	r30
    32cc:	0b 2e       	mov	r0, r27
    32ce:	ba 2f       	mov	r27, r26
    32d0:	a0 2d       	mov	r26, r0
    32d2:	0b 01       	movw	r0, r22
    32d4:	b9 01       	movw	r22, r18
    32d6:	90 01       	movw	r18, r0
    32d8:	0c 01       	movw	r0, r24
    32da:	ca 01       	movw	r24, r20
    32dc:	a0 01       	movw	r20, r0
    32de:	11 24       	eor	r1, r1
    32e0:	ff 27       	eor	r31, r31
    32e2:	59 1b       	sub	r21, r25
    32e4:	99 f0       	breq	.+38     	; 0x330c <__addsf3x+0x5c>
    32e6:	59 3f       	cpi	r21, 0xF9	; 249
    32e8:	50 f4       	brcc	.+20     	; 0x32fe <__addsf3x+0x4e>
    32ea:	50 3e       	cpi	r21, 0xE0	; 224
    32ec:	68 f1       	brcs	.+90     	; 0x3348 <__addsf3x+0x98>
    32ee:	1a 16       	cp	r1, r26
    32f0:	f0 40       	sbci	r31, 0x00	; 0
    32f2:	a2 2f       	mov	r26, r18
    32f4:	23 2f       	mov	r18, r19
    32f6:	34 2f       	mov	r19, r20
    32f8:	44 27       	eor	r20, r20
    32fa:	58 5f       	subi	r21, 0xF8	; 248
    32fc:	f3 cf       	rjmp	.-26     	; 0x32e4 <__addsf3x+0x34>
    32fe:	46 95       	lsr	r20
    3300:	37 95       	ror	r19
    3302:	27 95       	ror	r18
    3304:	a7 95       	ror	r26
    3306:	f0 40       	sbci	r31, 0x00	; 0
    3308:	53 95       	inc	r21
    330a:	c9 f7       	brne	.-14     	; 0x32fe <__addsf3x+0x4e>
    330c:	7e f4       	brtc	.+30     	; 0x332c <__addsf3x+0x7c>
    330e:	1f 16       	cp	r1, r31
    3310:	ba 0b       	sbc	r27, r26
    3312:	62 0b       	sbc	r22, r18
    3314:	73 0b       	sbc	r23, r19
    3316:	84 0b       	sbc	r24, r20
    3318:	ba f0       	brmi	.+46     	; 0x3348 <__addsf3x+0x98>
    331a:	91 50       	subi	r25, 0x01	; 1
    331c:	a1 f0       	breq	.+40     	; 0x3346 <__addsf3x+0x96>
    331e:	ff 0f       	add	r31, r31
    3320:	bb 1f       	adc	r27, r27
    3322:	66 1f       	adc	r22, r22
    3324:	77 1f       	adc	r23, r23
    3326:	88 1f       	adc	r24, r24
    3328:	c2 f7       	brpl	.-16     	; 0x331a <__addsf3x+0x6a>
    332a:	0e c0       	rjmp	.+28     	; 0x3348 <__addsf3x+0x98>
    332c:	ba 0f       	add	r27, r26
    332e:	62 1f       	adc	r22, r18
    3330:	73 1f       	adc	r23, r19
    3332:	84 1f       	adc	r24, r20
    3334:	48 f4       	brcc	.+18     	; 0x3348 <__addsf3x+0x98>
    3336:	87 95       	ror	r24
    3338:	77 95       	ror	r23
    333a:	67 95       	ror	r22
    333c:	b7 95       	ror	r27
    333e:	f7 95       	ror	r31
    3340:	9e 3f       	cpi	r25, 0xFE	; 254
    3342:	08 f0       	brcs	.+2      	; 0x3346 <__addsf3x+0x96>
    3344:	b3 cf       	rjmp	.-154    	; 0x32ac <__addsf3+0x1e>
    3346:	93 95       	inc	r25
    3348:	88 0f       	add	r24, r24
    334a:	08 f0       	brcs	.+2      	; 0x334e <__addsf3x+0x9e>
    334c:	99 27       	eor	r25, r25
    334e:	ee 0f       	add	r30, r30
    3350:	97 95       	ror	r25
    3352:	87 95       	ror	r24
    3354:	08 95       	ret

00003356 <__cmpsf2>:
    3356:	f4 d0       	rcall	.+488    	; 0x3540 <__fp_cmp>
    3358:	08 f4       	brcc	.+2      	; 0x335c <__cmpsf2+0x6>
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	08 95       	ret

0000335e <__divsf3>:
    335e:	0c d0       	rcall	.+24     	; 0x3378 <__divsf3x>
    3360:	4f c1       	rjmp	.+670    	; 0x3600 <__fp_round>
    3362:	47 d1       	rcall	.+654    	; 0x35f2 <__fp_pscB>
    3364:	40 f0       	brcs	.+16     	; 0x3376 <__divsf3+0x18>
    3366:	3e d1       	rcall	.+636    	; 0x35e4 <__fp_pscA>
    3368:	30 f0       	brcs	.+12     	; 0x3376 <__divsf3+0x18>
    336a:	21 f4       	brne	.+8      	; 0x3374 <__divsf3+0x16>
    336c:	5f 3f       	cpi	r21, 0xFF	; 255
    336e:	19 f0       	breq	.+6      	; 0x3376 <__divsf3+0x18>
    3370:	0b c1       	rjmp	.+534    	; 0x3588 <__fp_inf>
    3372:	51 11       	cpse	r21, r1
    3374:	79 c1       	rjmp	.+754    	; 0x3668 <__fp_szero>
    3376:	0e c1       	rjmp	.+540    	; 0x3594 <__fp_nan>

00003378 <__divsf3x>:
    3378:	54 d1       	rcall	.+680    	; 0x3622 <__fp_split3>
    337a:	98 f3       	brcs	.-26     	; 0x3362 <__divsf3+0x4>

0000337c <__divsf3_pse>:
    337c:	99 23       	and	r25, r25
    337e:	c9 f3       	breq	.-14     	; 0x3372 <__divsf3+0x14>
    3380:	55 23       	and	r21, r21
    3382:	b1 f3       	breq	.-20     	; 0x3370 <__divsf3+0x12>
    3384:	95 1b       	sub	r25, r21
    3386:	55 0b       	sbc	r21, r21
    3388:	bb 27       	eor	r27, r27
    338a:	aa 27       	eor	r26, r26
    338c:	62 17       	cp	r22, r18
    338e:	73 07       	cpc	r23, r19
    3390:	84 07       	cpc	r24, r20
    3392:	38 f0       	brcs	.+14     	; 0x33a2 <__divsf3_pse+0x26>
    3394:	9f 5f       	subi	r25, 0xFF	; 255
    3396:	5f 4f       	sbci	r21, 0xFF	; 255
    3398:	22 0f       	add	r18, r18
    339a:	33 1f       	adc	r19, r19
    339c:	44 1f       	adc	r20, r20
    339e:	aa 1f       	adc	r26, r26
    33a0:	a9 f3       	breq	.-22     	; 0x338c <__divsf3_pse+0x10>
    33a2:	33 d0       	rcall	.+102    	; 0x340a <__divsf3_pse+0x8e>
    33a4:	0e 2e       	mov	r0, r30
    33a6:	3a f0       	brmi	.+14     	; 0x33b6 <__divsf3_pse+0x3a>
    33a8:	e0 e8       	ldi	r30, 0x80	; 128
    33aa:	30 d0       	rcall	.+96     	; 0x340c <__divsf3_pse+0x90>
    33ac:	91 50       	subi	r25, 0x01	; 1
    33ae:	50 40       	sbci	r21, 0x00	; 0
    33b0:	e6 95       	lsr	r30
    33b2:	00 1c       	adc	r0, r0
    33b4:	ca f7       	brpl	.-14     	; 0x33a8 <__divsf3_pse+0x2c>
    33b6:	29 d0       	rcall	.+82     	; 0x340a <__divsf3_pse+0x8e>
    33b8:	fe 2f       	mov	r31, r30
    33ba:	27 d0       	rcall	.+78     	; 0x340a <__divsf3_pse+0x8e>
    33bc:	66 0f       	add	r22, r22
    33be:	77 1f       	adc	r23, r23
    33c0:	88 1f       	adc	r24, r24
    33c2:	bb 1f       	adc	r27, r27
    33c4:	26 17       	cp	r18, r22
    33c6:	37 07       	cpc	r19, r23
    33c8:	48 07       	cpc	r20, r24
    33ca:	ab 07       	cpc	r26, r27
    33cc:	b0 e8       	ldi	r27, 0x80	; 128
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <__divsf3_pse+0x56>
    33d0:	bb 0b       	sbc	r27, r27
    33d2:	80 2d       	mov	r24, r0
    33d4:	bf 01       	movw	r22, r30
    33d6:	ff 27       	eor	r31, r31
    33d8:	93 58       	subi	r25, 0x83	; 131
    33da:	5f 4f       	sbci	r21, 0xFF	; 255
    33dc:	2a f0       	brmi	.+10     	; 0x33e8 <__divsf3_pse+0x6c>
    33de:	9e 3f       	cpi	r25, 0xFE	; 254
    33e0:	51 05       	cpc	r21, r1
    33e2:	68 f0       	brcs	.+26     	; 0x33fe <__divsf3_pse+0x82>
    33e4:	d1 c0       	rjmp	.+418    	; 0x3588 <__fp_inf>
    33e6:	40 c1       	rjmp	.+640    	; 0x3668 <__fp_szero>
    33e8:	5f 3f       	cpi	r21, 0xFF	; 255
    33ea:	ec f3       	brlt	.-6      	; 0x33e6 <__divsf3_pse+0x6a>
    33ec:	98 3e       	cpi	r25, 0xE8	; 232
    33ee:	dc f3       	brlt	.-10     	; 0x33e6 <__divsf3_pse+0x6a>
    33f0:	86 95       	lsr	r24
    33f2:	77 95       	ror	r23
    33f4:	67 95       	ror	r22
    33f6:	b7 95       	ror	r27
    33f8:	f7 95       	ror	r31
    33fa:	9f 5f       	subi	r25, 0xFF	; 255
    33fc:	c9 f7       	brne	.-14     	; 0x33f0 <__divsf3_pse+0x74>
    33fe:	88 0f       	add	r24, r24
    3400:	91 1d       	adc	r25, r1
    3402:	96 95       	lsr	r25
    3404:	87 95       	ror	r24
    3406:	97 f9       	bld	r25, 7
    3408:	08 95       	ret
    340a:	e1 e0       	ldi	r30, 0x01	; 1
    340c:	66 0f       	add	r22, r22
    340e:	77 1f       	adc	r23, r23
    3410:	88 1f       	adc	r24, r24
    3412:	bb 1f       	adc	r27, r27
    3414:	62 17       	cp	r22, r18
    3416:	73 07       	cpc	r23, r19
    3418:	84 07       	cpc	r24, r20
    341a:	ba 07       	cpc	r27, r26
    341c:	20 f0       	brcs	.+8      	; 0x3426 <__divsf3_pse+0xaa>
    341e:	62 1b       	sub	r22, r18
    3420:	73 0b       	sbc	r23, r19
    3422:	84 0b       	sbc	r24, r20
    3424:	ba 0b       	sbc	r27, r26
    3426:	ee 1f       	adc	r30, r30
    3428:	88 f7       	brcc	.-30     	; 0x340c <__divsf3_pse+0x90>
    342a:	e0 95       	com	r30
    342c:	08 95       	ret

0000342e <__fixsfsi>:
    342e:	04 d0       	rcall	.+8      	; 0x3438 <__fixunssfsi>
    3430:	68 94       	set
    3432:	b1 11       	cpse	r27, r1
    3434:	19 c1       	rjmp	.+562    	; 0x3668 <__fp_szero>
    3436:	08 95       	ret

00003438 <__fixunssfsi>:
    3438:	fc d0       	rcall	.+504    	; 0x3632 <__fp_splitA>
    343a:	88 f0       	brcs	.+34     	; 0x345e <__fixunssfsi+0x26>
    343c:	9f 57       	subi	r25, 0x7F	; 127
    343e:	90 f0       	brcs	.+36     	; 0x3464 <__fixunssfsi+0x2c>
    3440:	b9 2f       	mov	r27, r25
    3442:	99 27       	eor	r25, r25
    3444:	b7 51       	subi	r27, 0x17	; 23
    3446:	a0 f0       	brcs	.+40     	; 0x3470 <__fixunssfsi+0x38>
    3448:	d1 f0       	breq	.+52     	; 0x347e <__fixunssfsi+0x46>
    344a:	66 0f       	add	r22, r22
    344c:	77 1f       	adc	r23, r23
    344e:	88 1f       	adc	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	1a f0       	brmi	.+6      	; 0x345a <__fixunssfsi+0x22>
    3454:	ba 95       	dec	r27
    3456:	c9 f7       	brne	.-14     	; 0x344a <__fixunssfsi+0x12>
    3458:	12 c0       	rjmp	.+36     	; 0x347e <__fixunssfsi+0x46>
    345a:	b1 30       	cpi	r27, 0x01	; 1
    345c:	81 f0       	breq	.+32     	; 0x347e <__fixunssfsi+0x46>
    345e:	03 d1       	rcall	.+518    	; 0x3666 <__fp_zero>
    3460:	b1 e0       	ldi	r27, 0x01	; 1
    3462:	08 95       	ret
    3464:	00 c1       	rjmp	.+512    	; 0x3666 <__fp_zero>
    3466:	67 2f       	mov	r22, r23
    3468:	78 2f       	mov	r23, r24
    346a:	88 27       	eor	r24, r24
    346c:	b8 5f       	subi	r27, 0xF8	; 248
    346e:	39 f0       	breq	.+14     	; 0x347e <__fixunssfsi+0x46>
    3470:	b9 3f       	cpi	r27, 0xF9	; 249
    3472:	cc f3       	brlt	.-14     	; 0x3466 <__fixunssfsi+0x2e>
    3474:	86 95       	lsr	r24
    3476:	77 95       	ror	r23
    3478:	67 95       	ror	r22
    347a:	b3 95       	inc	r27
    347c:	d9 f7       	brne	.-10     	; 0x3474 <__fixunssfsi+0x3c>
    347e:	3e f4       	brtc	.+14     	; 0x348e <__fixunssfsi+0x56>
    3480:	90 95       	com	r25
    3482:	80 95       	com	r24
    3484:	70 95       	com	r23
    3486:	61 95       	neg	r22
    3488:	7f 4f       	sbci	r23, 0xFF	; 255
    348a:	8f 4f       	sbci	r24, 0xFF	; 255
    348c:	9f 4f       	sbci	r25, 0xFF	; 255
    348e:	08 95       	ret

00003490 <__floatunsisf>:
    3490:	e8 94       	clt
    3492:	09 c0       	rjmp	.+18     	; 0x34a6 <__floatsisf+0x12>

00003494 <__floatsisf>:
    3494:	97 fb       	bst	r25, 7
    3496:	3e f4       	brtc	.+14     	; 0x34a6 <__floatsisf+0x12>
    3498:	90 95       	com	r25
    349a:	80 95       	com	r24
    349c:	70 95       	com	r23
    349e:	61 95       	neg	r22
    34a0:	7f 4f       	sbci	r23, 0xFF	; 255
    34a2:	8f 4f       	sbci	r24, 0xFF	; 255
    34a4:	9f 4f       	sbci	r25, 0xFF	; 255
    34a6:	99 23       	and	r25, r25
    34a8:	a9 f0       	breq	.+42     	; 0x34d4 <__floatsisf+0x40>
    34aa:	f9 2f       	mov	r31, r25
    34ac:	96 e9       	ldi	r25, 0x96	; 150
    34ae:	bb 27       	eor	r27, r27
    34b0:	93 95       	inc	r25
    34b2:	f6 95       	lsr	r31
    34b4:	87 95       	ror	r24
    34b6:	77 95       	ror	r23
    34b8:	67 95       	ror	r22
    34ba:	b7 95       	ror	r27
    34bc:	f1 11       	cpse	r31, r1
    34be:	f8 cf       	rjmp	.-16     	; 0x34b0 <__floatsisf+0x1c>
    34c0:	fa f4       	brpl	.+62     	; 0x3500 <__floatsisf+0x6c>
    34c2:	bb 0f       	add	r27, r27
    34c4:	11 f4       	brne	.+4      	; 0x34ca <__floatsisf+0x36>
    34c6:	60 ff       	sbrs	r22, 0
    34c8:	1b c0       	rjmp	.+54     	; 0x3500 <__floatsisf+0x6c>
    34ca:	6f 5f       	subi	r22, 0xFF	; 255
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	8f 4f       	sbci	r24, 0xFF	; 255
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	16 c0       	rjmp	.+44     	; 0x3500 <__floatsisf+0x6c>
    34d4:	88 23       	and	r24, r24
    34d6:	11 f0       	breq	.+4      	; 0x34dc <__floatsisf+0x48>
    34d8:	96 e9       	ldi	r25, 0x96	; 150
    34da:	11 c0       	rjmp	.+34     	; 0x34fe <__floatsisf+0x6a>
    34dc:	77 23       	and	r23, r23
    34de:	21 f0       	breq	.+8      	; 0x34e8 <__floatsisf+0x54>
    34e0:	9e e8       	ldi	r25, 0x8E	; 142
    34e2:	87 2f       	mov	r24, r23
    34e4:	76 2f       	mov	r23, r22
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <__floatsisf+0x5e>
    34e8:	66 23       	and	r22, r22
    34ea:	71 f0       	breq	.+28     	; 0x3508 <__floatsisf+0x74>
    34ec:	96 e8       	ldi	r25, 0x86	; 134
    34ee:	86 2f       	mov	r24, r22
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	2a f0       	brmi	.+10     	; 0x3500 <__floatsisf+0x6c>
    34f6:	9a 95       	dec	r25
    34f8:	66 0f       	add	r22, r22
    34fa:	77 1f       	adc	r23, r23
    34fc:	88 1f       	adc	r24, r24
    34fe:	da f7       	brpl	.-10     	; 0x34f6 <__floatsisf+0x62>
    3500:	88 0f       	add	r24, r24
    3502:	96 95       	lsr	r25
    3504:	87 95       	ror	r24
    3506:	97 f9       	bld	r25, 7
    3508:	08 95       	ret

0000350a <__fp_arccos>:
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	1f 93       	push	r17
    3510:	0f 93       	push	r16
    3512:	8b 01       	movw	r16, r22
    3514:	ec 01       	movw	r28, r24
    3516:	ea eb       	ldi	r30, 0xBA	; 186
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	3f d0       	rcall	.+126    	; 0x359a <__fp_powser>
    351c:	71 d0       	rcall	.+226    	; 0x3600 <__fp_round>
    351e:	98 01       	movw	r18, r16
    3520:	ae 01       	movw	r20, r28
    3522:	8b 01       	movw	r16, r22
    3524:	ec 01       	movw	r28, r24
    3526:	60 e0       	ldi	r22, 0x00	; 0
    3528:	70 e0       	ldi	r23, 0x00	; 0
    352a:	80 e8       	ldi	r24, 0x80	; 128
    352c:	9f e3       	ldi	r25, 0x3F	; 63
    352e:	ae de       	rcall	.-676    	; 0x328c <__subsf3>
    3530:	0c d1       	rcall	.+536    	; 0x374a <sqrt>
    3532:	98 01       	movw	r18, r16
    3534:	ae 01       	movw	r20, r28
    3536:	0f 91       	pop	r16
    3538:	1f 91       	pop	r17
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	aa c0       	rjmp	.+340    	; 0x3694 <__mulsf3x>

00003540 <__fp_cmp>:
    3540:	99 0f       	add	r25, r25
    3542:	00 08       	sbc	r0, r0
    3544:	55 0f       	add	r21, r21
    3546:	aa 0b       	sbc	r26, r26
    3548:	e0 e8       	ldi	r30, 0x80	; 128
    354a:	fe ef       	ldi	r31, 0xFE	; 254
    354c:	16 16       	cp	r1, r22
    354e:	17 06       	cpc	r1, r23
    3550:	e8 07       	cpc	r30, r24
    3552:	f9 07       	cpc	r31, r25
    3554:	c0 f0       	brcs	.+48     	; 0x3586 <__fp_cmp+0x46>
    3556:	12 16       	cp	r1, r18
    3558:	13 06       	cpc	r1, r19
    355a:	e4 07       	cpc	r30, r20
    355c:	f5 07       	cpc	r31, r21
    355e:	98 f0       	brcs	.+38     	; 0x3586 <__fp_cmp+0x46>
    3560:	62 1b       	sub	r22, r18
    3562:	73 0b       	sbc	r23, r19
    3564:	84 0b       	sbc	r24, r20
    3566:	95 0b       	sbc	r25, r21
    3568:	39 f4       	brne	.+14     	; 0x3578 <__fp_cmp+0x38>
    356a:	0a 26       	eor	r0, r26
    356c:	61 f0       	breq	.+24     	; 0x3586 <__fp_cmp+0x46>
    356e:	23 2b       	or	r18, r19
    3570:	24 2b       	or	r18, r20
    3572:	25 2b       	or	r18, r21
    3574:	21 f4       	brne	.+8      	; 0x357e <__fp_cmp+0x3e>
    3576:	08 95       	ret
    3578:	0a 26       	eor	r0, r26
    357a:	09 f4       	brne	.+2      	; 0x357e <__fp_cmp+0x3e>
    357c:	a1 40       	sbci	r26, 0x01	; 1
    357e:	a6 95       	lsr	r26
    3580:	8f ef       	ldi	r24, 0xFF	; 255
    3582:	81 1d       	adc	r24, r1
    3584:	81 1d       	adc	r24, r1
    3586:	08 95       	ret

00003588 <__fp_inf>:
    3588:	97 f9       	bld	r25, 7
    358a:	9f 67       	ori	r25, 0x7F	; 127
    358c:	80 e8       	ldi	r24, 0x80	; 128
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	60 e0       	ldi	r22, 0x00	; 0
    3592:	08 95       	ret

00003594 <__fp_nan>:
    3594:	9f ef       	ldi	r25, 0xFF	; 255
    3596:	80 ec       	ldi	r24, 0xC0	; 192
    3598:	08 95       	ret

0000359a <__fp_powser>:
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	1f 93       	push	r17
    35a0:	0f 93       	push	r16
    35a2:	ff 92       	push	r15
    35a4:	ef 92       	push	r14
    35a6:	df 92       	push	r13
    35a8:	7b 01       	movw	r14, r22
    35aa:	8c 01       	movw	r16, r24
    35ac:	68 94       	set
    35ae:	05 c0       	rjmp	.+10     	; 0x35ba <__fp_powser+0x20>
    35b0:	da 2e       	mov	r13, r26
    35b2:	ef 01       	movw	r28, r30
    35b4:	6f d0       	rcall	.+222    	; 0x3694 <__mulsf3x>
    35b6:	fe 01       	movw	r30, r28
    35b8:	e8 94       	clt
    35ba:	a5 91       	lpm	r26, Z+
    35bc:	25 91       	lpm	r18, Z+
    35be:	35 91       	lpm	r19, Z+
    35c0:	45 91       	lpm	r20, Z+
    35c2:	55 91       	lpm	r21, Z+
    35c4:	ae f3       	brts	.-22     	; 0x35b0 <__fp_powser+0x16>
    35c6:	ef 01       	movw	r28, r30
    35c8:	73 de       	rcall	.-794    	; 0x32b0 <__addsf3x>
    35ca:	fe 01       	movw	r30, r28
    35cc:	97 01       	movw	r18, r14
    35ce:	a8 01       	movw	r20, r16
    35d0:	da 94       	dec	r13
    35d2:	79 f7       	brne	.-34     	; 0x35b2 <__fp_powser+0x18>
    35d4:	df 90       	pop	r13
    35d6:	ef 90       	pop	r14
    35d8:	ff 90       	pop	r15
    35da:	0f 91       	pop	r16
    35dc:	1f 91       	pop	r17
    35de:	cf 91       	pop	r28
    35e0:	df 91       	pop	r29
    35e2:	08 95       	ret

000035e4 <__fp_pscA>:
    35e4:	00 24       	eor	r0, r0
    35e6:	0a 94       	dec	r0
    35e8:	16 16       	cp	r1, r22
    35ea:	17 06       	cpc	r1, r23
    35ec:	18 06       	cpc	r1, r24
    35ee:	09 06       	cpc	r0, r25
    35f0:	08 95       	ret

000035f2 <__fp_pscB>:
    35f2:	00 24       	eor	r0, r0
    35f4:	0a 94       	dec	r0
    35f6:	12 16       	cp	r1, r18
    35f8:	13 06       	cpc	r1, r19
    35fa:	14 06       	cpc	r1, r20
    35fc:	05 06       	cpc	r0, r21
    35fe:	08 95       	ret

00003600 <__fp_round>:
    3600:	09 2e       	mov	r0, r25
    3602:	03 94       	inc	r0
    3604:	00 0c       	add	r0, r0
    3606:	11 f4       	brne	.+4      	; 0x360c <__fp_round+0xc>
    3608:	88 23       	and	r24, r24
    360a:	52 f0       	brmi	.+20     	; 0x3620 <__fp_round+0x20>
    360c:	bb 0f       	add	r27, r27
    360e:	40 f4       	brcc	.+16     	; 0x3620 <__fp_round+0x20>
    3610:	bf 2b       	or	r27, r31
    3612:	11 f4       	brne	.+4      	; 0x3618 <__fp_round+0x18>
    3614:	60 ff       	sbrs	r22, 0
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <__fp_round+0x20>
    3618:	6f 5f       	subi	r22, 0xFF	; 255
    361a:	7f 4f       	sbci	r23, 0xFF	; 255
    361c:	8f 4f       	sbci	r24, 0xFF	; 255
    361e:	9f 4f       	sbci	r25, 0xFF	; 255
    3620:	08 95       	ret

00003622 <__fp_split3>:
    3622:	57 fd       	sbrc	r21, 7
    3624:	90 58       	subi	r25, 0x80	; 128
    3626:	44 0f       	add	r20, r20
    3628:	55 1f       	adc	r21, r21
    362a:	59 f0       	breq	.+22     	; 0x3642 <__fp_splitA+0x10>
    362c:	5f 3f       	cpi	r21, 0xFF	; 255
    362e:	71 f0       	breq	.+28     	; 0x364c <__fp_splitA+0x1a>
    3630:	47 95       	ror	r20

00003632 <__fp_splitA>:
    3632:	88 0f       	add	r24, r24
    3634:	97 fb       	bst	r25, 7
    3636:	99 1f       	adc	r25, r25
    3638:	61 f0       	breq	.+24     	; 0x3652 <__fp_splitA+0x20>
    363a:	9f 3f       	cpi	r25, 0xFF	; 255
    363c:	79 f0       	breq	.+30     	; 0x365c <__fp_splitA+0x2a>
    363e:	87 95       	ror	r24
    3640:	08 95       	ret
    3642:	12 16       	cp	r1, r18
    3644:	13 06       	cpc	r1, r19
    3646:	14 06       	cpc	r1, r20
    3648:	55 1f       	adc	r21, r21
    364a:	f2 cf       	rjmp	.-28     	; 0x3630 <__fp_split3+0xe>
    364c:	46 95       	lsr	r20
    364e:	f1 df       	rcall	.-30     	; 0x3632 <__fp_splitA>
    3650:	08 c0       	rjmp	.+16     	; 0x3662 <__fp_splitA+0x30>
    3652:	16 16       	cp	r1, r22
    3654:	17 06       	cpc	r1, r23
    3656:	18 06       	cpc	r1, r24
    3658:	99 1f       	adc	r25, r25
    365a:	f1 cf       	rjmp	.-30     	; 0x363e <__fp_splitA+0xc>
    365c:	86 95       	lsr	r24
    365e:	71 05       	cpc	r23, r1
    3660:	61 05       	cpc	r22, r1
    3662:	08 94       	sec
    3664:	08 95       	ret

00003666 <__fp_zero>:
    3666:	e8 94       	clt

00003668 <__fp_szero>:
    3668:	bb 27       	eor	r27, r27
    366a:	66 27       	eor	r22, r22
    366c:	77 27       	eor	r23, r23
    366e:	cb 01       	movw	r24, r22
    3670:	97 f9       	bld	r25, 7
    3672:	08 95       	ret

00003674 <__gesf2>:
    3674:	65 df       	rcall	.-310    	; 0x3540 <__fp_cmp>
    3676:	08 f4       	brcc	.+2      	; 0x367a <__gesf2+0x6>
    3678:	8f ef       	ldi	r24, 0xFF	; 255
    367a:	08 95       	ret

0000367c <__mulsf3>:
    367c:	0b d0       	rcall	.+22     	; 0x3694 <__mulsf3x>
    367e:	c0 cf       	rjmp	.-128    	; 0x3600 <__fp_round>
    3680:	b1 df       	rcall	.-158    	; 0x35e4 <__fp_pscA>
    3682:	28 f0       	brcs	.+10     	; 0x368e <__mulsf3+0x12>
    3684:	b6 df       	rcall	.-148    	; 0x35f2 <__fp_pscB>
    3686:	18 f0       	brcs	.+6      	; 0x368e <__mulsf3+0x12>
    3688:	95 23       	and	r25, r21
    368a:	09 f0       	breq	.+2      	; 0x368e <__mulsf3+0x12>
    368c:	7d cf       	rjmp	.-262    	; 0x3588 <__fp_inf>
    368e:	82 cf       	rjmp	.-252    	; 0x3594 <__fp_nan>
    3690:	11 24       	eor	r1, r1
    3692:	ea cf       	rjmp	.-44     	; 0x3668 <__fp_szero>

00003694 <__mulsf3x>:
    3694:	c6 df       	rcall	.-116    	; 0x3622 <__fp_split3>
    3696:	a0 f3       	brcs	.-24     	; 0x3680 <__mulsf3+0x4>

00003698 <__mulsf3_pse>:
    3698:	95 9f       	mul	r25, r21
    369a:	d1 f3       	breq	.-12     	; 0x3690 <__mulsf3+0x14>
    369c:	95 0f       	add	r25, r21
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	55 1f       	adc	r21, r21
    36a2:	62 9f       	mul	r22, r18
    36a4:	f0 01       	movw	r30, r0
    36a6:	72 9f       	mul	r23, r18
    36a8:	bb 27       	eor	r27, r27
    36aa:	f0 0d       	add	r31, r0
    36ac:	b1 1d       	adc	r27, r1
    36ae:	63 9f       	mul	r22, r19
    36b0:	aa 27       	eor	r26, r26
    36b2:	f0 0d       	add	r31, r0
    36b4:	b1 1d       	adc	r27, r1
    36b6:	aa 1f       	adc	r26, r26
    36b8:	64 9f       	mul	r22, r20
    36ba:	66 27       	eor	r22, r22
    36bc:	b0 0d       	add	r27, r0
    36be:	a1 1d       	adc	r26, r1
    36c0:	66 1f       	adc	r22, r22
    36c2:	82 9f       	mul	r24, r18
    36c4:	22 27       	eor	r18, r18
    36c6:	b0 0d       	add	r27, r0
    36c8:	a1 1d       	adc	r26, r1
    36ca:	62 1f       	adc	r22, r18
    36cc:	73 9f       	mul	r23, r19
    36ce:	b0 0d       	add	r27, r0
    36d0:	a1 1d       	adc	r26, r1
    36d2:	62 1f       	adc	r22, r18
    36d4:	83 9f       	mul	r24, r19
    36d6:	a0 0d       	add	r26, r0
    36d8:	61 1d       	adc	r22, r1
    36da:	22 1f       	adc	r18, r18
    36dc:	74 9f       	mul	r23, r20
    36de:	33 27       	eor	r19, r19
    36e0:	a0 0d       	add	r26, r0
    36e2:	61 1d       	adc	r22, r1
    36e4:	23 1f       	adc	r18, r19
    36e6:	84 9f       	mul	r24, r20
    36e8:	60 0d       	add	r22, r0
    36ea:	21 1d       	adc	r18, r1
    36ec:	82 2f       	mov	r24, r18
    36ee:	76 2f       	mov	r23, r22
    36f0:	6a 2f       	mov	r22, r26
    36f2:	11 24       	eor	r1, r1
    36f4:	9f 57       	subi	r25, 0x7F	; 127
    36f6:	50 40       	sbci	r21, 0x00	; 0
    36f8:	8a f0       	brmi	.+34     	; 0x371c <__mulsf3_pse+0x84>
    36fa:	e1 f0       	breq	.+56     	; 0x3734 <__mulsf3_pse+0x9c>
    36fc:	88 23       	and	r24, r24
    36fe:	4a f0       	brmi	.+18     	; 0x3712 <__mulsf3_pse+0x7a>
    3700:	ee 0f       	add	r30, r30
    3702:	ff 1f       	adc	r31, r31
    3704:	bb 1f       	adc	r27, r27
    3706:	66 1f       	adc	r22, r22
    3708:	77 1f       	adc	r23, r23
    370a:	88 1f       	adc	r24, r24
    370c:	91 50       	subi	r25, 0x01	; 1
    370e:	50 40       	sbci	r21, 0x00	; 0
    3710:	a9 f7       	brne	.-22     	; 0x36fc <__mulsf3_pse+0x64>
    3712:	9e 3f       	cpi	r25, 0xFE	; 254
    3714:	51 05       	cpc	r21, r1
    3716:	70 f0       	brcs	.+28     	; 0x3734 <__mulsf3_pse+0x9c>
    3718:	37 cf       	rjmp	.-402    	; 0x3588 <__fp_inf>
    371a:	a6 cf       	rjmp	.-180    	; 0x3668 <__fp_szero>
    371c:	5f 3f       	cpi	r21, 0xFF	; 255
    371e:	ec f3       	brlt	.-6      	; 0x371a <__mulsf3_pse+0x82>
    3720:	98 3e       	cpi	r25, 0xE8	; 232
    3722:	dc f3       	brlt	.-10     	; 0x371a <__mulsf3_pse+0x82>
    3724:	86 95       	lsr	r24
    3726:	77 95       	ror	r23
    3728:	67 95       	ror	r22
    372a:	b7 95       	ror	r27
    372c:	f7 95       	ror	r31
    372e:	e7 95       	ror	r30
    3730:	9f 5f       	subi	r25, 0xFF	; 255
    3732:	c1 f7       	brne	.-16     	; 0x3724 <__mulsf3_pse+0x8c>
    3734:	fe 2b       	or	r31, r30
    3736:	88 0f       	add	r24, r24
    3738:	91 1d       	adc	r25, r1
    373a:	96 95       	lsr	r25
    373c:	87 95       	ror	r24
    373e:	97 f9       	bld	r25, 7
    3740:	08 95       	ret
    3742:	11 f4       	brne	.+4      	; 0x3748 <__mulsf3_pse+0xb0>
    3744:	0e f4       	brtc	.+2      	; 0x3748 <__mulsf3_pse+0xb0>
    3746:	26 cf       	rjmp	.-436    	; 0x3594 <__fp_nan>
    3748:	3e c0       	rjmp	.+124    	; 0x37c6 <__fp_mpack>

0000374a <sqrt>:
    374a:	73 df       	rcall	.-282    	; 0x3632 <__fp_splitA>
    374c:	d0 f3       	brcs	.-12     	; 0x3742 <__mulsf3_pse+0xaa>
    374e:	99 23       	and	r25, r25
    3750:	d9 f3       	breq	.-10     	; 0x3748 <__mulsf3_pse+0xb0>
    3752:	ce f3       	brts	.-14     	; 0x3746 <__mulsf3_pse+0xae>
    3754:	9f 57       	subi	r25, 0x7F	; 127
    3756:	55 0b       	sbc	r21, r21
    3758:	87 ff       	sbrs	r24, 7
    375a:	43 d0       	rcall	.+134    	; 0x37e2 <__fp_norm2>
    375c:	00 24       	eor	r0, r0
    375e:	a0 e6       	ldi	r26, 0x60	; 96
    3760:	40 ea       	ldi	r20, 0xA0	; 160
    3762:	90 01       	movw	r18, r0
    3764:	80 58       	subi	r24, 0x80	; 128
    3766:	56 95       	lsr	r21
    3768:	97 95       	ror	r25
    376a:	28 f4       	brcc	.+10     	; 0x3776 <sqrt+0x2c>
    376c:	80 5c       	subi	r24, 0xC0	; 192
    376e:	66 0f       	add	r22, r22
    3770:	77 1f       	adc	r23, r23
    3772:	88 1f       	adc	r24, r24
    3774:	20 f0       	brcs	.+8      	; 0x377e <sqrt+0x34>
    3776:	26 17       	cp	r18, r22
    3778:	37 07       	cpc	r19, r23
    377a:	48 07       	cpc	r20, r24
    377c:	30 f4       	brcc	.+12     	; 0x378a <sqrt+0x40>
    377e:	62 1b       	sub	r22, r18
    3780:	73 0b       	sbc	r23, r19
    3782:	84 0b       	sbc	r24, r20
    3784:	20 29       	or	r18, r0
    3786:	31 29       	or	r19, r1
    3788:	4a 2b       	or	r20, r26
    378a:	a6 95       	lsr	r26
    378c:	17 94       	ror	r1
    378e:	07 94       	ror	r0
    3790:	20 25       	eor	r18, r0
    3792:	31 25       	eor	r19, r1
    3794:	4a 27       	eor	r20, r26
    3796:	58 f7       	brcc	.-42     	; 0x376e <sqrt+0x24>
    3798:	66 0f       	add	r22, r22
    379a:	77 1f       	adc	r23, r23
    379c:	88 1f       	adc	r24, r24
    379e:	20 f0       	brcs	.+8      	; 0x37a8 <sqrt+0x5e>
    37a0:	26 17       	cp	r18, r22
    37a2:	37 07       	cpc	r19, r23
    37a4:	48 07       	cpc	r20, r24
    37a6:	30 f4       	brcc	.+12     	; 0x37b4 <sqrt+0x6a>
    37a8:	62 0b       	sbc	r22, r18
    37aa:	73 0b       	sbc	r23, r19
    37ac:	84 0b       	sbc	r24, r20
    37ae:	20 0d       	add	r18, r0
    37b0:	31 1d       	adc	r19, r1
    37b2:	41 1d       	adc	r20, r1
    37b4:	a0 95       	com	r26
    37b6:	81 f7       	brne	.-32     	; 0x3798 <sqrt+0x4e>
    37b8:	b9 01       	movw	r22, r18
    37ba:	84 2f       	mov	r24, r20
    37bc:	91 58       	subi	r25, 0x81	; 129
    37be:	88 0f       	add	r24, r24
    37c0:	96 95       	lsr	r25
    37c2:	87 95       	ror	r24
    37c4:	08 95       	ret

000037c6 <__fp_mpack>:
    37c6:	9f 3f       	cpi	r25, 0xFF	; 255
    37c8:	31 f0       	breq	.+12     	; 0x37d6 <__fp_mpack_finite+0xc>

000037ca <__fp_mpack_finite>:
    37ca:	91 50       	subi	r25, 0x01	; 1
    37cc:	20 f4       	brcc	.+8      	; 0x37d6 <__fp_mpack_finite+0xc>
    37ce:	87 95       	ror	r24
    37d0:	77 95       	ror	r23
    37d2:	67 95       	ror	r22
    37d4:	b7 95       	ror	r27
    37d6:	88 0f       	add	r24, r24
    37d8:	91 1d       	adc	r25, r1
    37da:	96 95       	lsr	r25
    37dc:	87 95       	ror	r24
    37de:	97 f9       	bld	r25, 7
    37e0:	08 95       	ret

000037e2 <__fp_norm2>:
    37e2:	91 50       	subi	r25, 0x01	; 1
    37e4:	50 40       	sbci	r21, 0x00	; 0
    37e6:	66 0f       	add	r22, r22
    37e8:	77 1f       	adc	r23, r23
    37ea:	88 1f       	adc	r24, r24
    37ec:	d2 f7       	brpl	.-12     	; 0x37e2 <__fp_norm2>
    37ee:	08 95       	ret

000037f0 <__divmodhi4>:
    37f0:	97 fb       	bst	r25, 7
    37f2:	07 2e       	mov	r0, r23
    37f4:	16 f4       	brtc	.+4      	; 0x37fa <__divmodhi4+0xa>
    37f6:	00 94       	com	r0
    37f8:	07 d0       	rcall	.+14     	; 0x3808 <__divmodhi4_neg1>
    37fa:	77 fd       	sbrc	r23, 7
    37fc:	09 d0       	rcall	.+18     	; 0x3810 <__divmodhi4_neg2>
    37fe:	0e 94 12 1c 	call	0x3824	; 0x3824 <__udivmodhi4>
    3802:	07 fc       	sbrc	r0, 7
    3804:	05 d0       	rcall	.+10     	; 0x3810 <__divmodhi4_neg2>
    3806:	3e f4       	brtc	.+14     	; 0x3816 <__divmodhi4_exit>

00003808 <__divmodhi4_neg1>:
    3808:	90 95       	com	r25
    380a:	81 95       	neg	r24
    380c:	9f 4f       	sbci	r25, 0xFF	; 255
    380e:	08 95       	ret

00003810 <__divmodhi4_neg2>:
    3810:	70 95       	com	r23
    3812:	61 95       	neg	r22
    3814:	7f 4f       	sbci	r23, 0xFF	; 255

00003816 <__divmodhi4_exit>:
    3816:	08 95       	ret

00003818 <__tablejump2__>:
    3818:	ee 0f       	add	r30, r30
    381a:	ff 1f       	adc	r31, r31

0000381c <__tablejump__>:
    381c:	05 90       	lpm	r0, Z+
    381e:	f4 91       	lpm	r31, Z
    3820:	e0 2d       	mov	r30, r0
    3822:	09 94       	ijmp

00003824 <__udivmodhi4>:
    3824:	aa 1b       	sub	r26, r26
    3826:	bb 1b       	sub	r27, r27
    3828:	51 e1       	ldi	r21, 0x11	; 17
    382a:	07 c0       	rjmp	.+14     	; 0x383a <__udivmodhi4_ep>

0000382c <__udivmodhi4_loop>:
    382c:	aa 1f       	adc	r26, r26
    382e:	bb 1f       	adc	r27, r27
    3830:	a6 17       	cp	r26, r22
    3832:	b7 07       	cpc	r27, r23
    3834:	10 f0       	brcs	.+4      	; 0x383a <__udivmodhi4_ep>
    3836:	a6 1b       	sub	r26, r22
    3838:	b7 0b       	sbc	r27, r23

0000383a <__udivmodhi4_ep>:
    383a:	88 1f       	adc	r24, r24
    383c:	99 1f       	adc	r25, r25
    383e:	5a 95       	dec	r21
    3840:	a9 f7       	brne	.-22     	; 0x382c <__udivmodhi4_loop>
    3842:	80 95       	com	r24
    3844:	90 95       	com	r25
    3846:	bc 01       	movw	r22, r24
    3848:	cd 01       	movw	r24, r26
    384a:	08 95       	ret

0000384c <__itoa_ncheck>:
    384c:	bb 27       	eor	r27, r27
    384e:	4a 30       	cpi	r20, 0x0A	; 10
    3850:	31 f4       	brne	.+12     	; 0x385e <__itoa_ncheck+0x12>
    3852:	99 23       	and	r25, r25
    3854:	22 f4       	brpl	.+8      	; 0x385e <__itoa_ncheck+0x12>
    3856:	bd e2       	ldi	r27, 0x2D	; 45
    3858:	90 95       	com	r25
    385a:	81 95       	neg	r24
    385c:	9f 4f       	sbci	r25, 0xFF	; 255
    385e:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__utoa_common>

00003862 <__utoa_ncheck>:
    3862:	bb 27       	eor	r27, r27

00003864 <__utoa_common>:
    3864:	fb 01       	movw	r30, r22
    3866:	55 27       	eor	r21, r21
    3868:	aa 27       	eor	r26, r26
    386a:	88 0f       	add	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	aa 1f       	adc	r26, r26
    3870:	a4 17       	cp	r26, r20
    3872:	10 f0       	brcs	.+4      	; 0x3878 <__utoa_common+0x14>
    3874:	a4 1b       	sub	r26, r20
    3876:	83 95       	inc	r24
    3878:	50 51       	subi	r21, 0x10	; 16
    387a:	b9 f7       	brne	.-18     	; 0x386a <__utoa_common+0x6>
    387c:	a0 5d       	subi	r26, 0xD0	; 208
    387e:	aa 33       	cpi	r26, 0x3A	; 58
    3880:	08 f0       	brcs	.+2      	; 0x3884 <__utoa_common+0x20>
    3882:	a9 5d       	subi	r26, 0xD9	; 217
    3884:	a1 93       	st	Z+, r26
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	79 f7       	brne	.-34     	; 0x3868 <__utoa_common+0x4>
    388a:	b1 11       	cpse	r27, r1
    388c:	b1 93       	st	Z+, r27
    388e:	11 92       	st	Z+, r1
    3890:	cb 01       	movw	r24, r22
    3892:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <strrev>

00003896 <strrev>:
    3896:	dc 01       	movw	r26, r24
    3898:	fc 01       	movw	r30, r24
    389a:	67 2f       	mov	r22, r23
    389c:	71 91       	ld	r23, Z+
    389e:	77 23       	and	r23, r23
    38a0:	e1 f7       	brne	.-8      	; 0x389a <strrev+0x4>
    38a2:	32 97       	sbiw	r30, 0x02	; 2
    38a4:	04 c0       	rjmp	.+8      	; 0x38ae <strrev+0x18>
    38a6:	7c 91       	ld	r23, X
    38a8:	6d 93       	st	X+, r22
    38aa:	70 83       	st	Z, r23
    38ac:	62 91       	ld	r22, -Z
    38ae:	ae 17       	cp	r26, r30
    38b0:	bf 07       	cpc	r27, r31
    38b2:	c8 f3       	brcs	.-14     	; 0x38a6 <strrev+0x10>
    38b4:	08 95       	ret

000038b6 <_exit>:
    38b6:	f8 94       	cli

000038b8 <__stop_program>:
    38b8:	ff cf       	rjmp	.-2      	; 0x38b8 <__stop_program>

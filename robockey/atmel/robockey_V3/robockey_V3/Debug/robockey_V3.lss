
robockey_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00003ab8  00003b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  0080013c  0080013c  00003b88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036a9  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce7  00000000  00000000  000074f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e3  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000994  00000000  00000000  000094bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000094c  00000000  00000000  00009e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003feb  00000000  00000000  0000a79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0000e787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__ctors_end>
       4:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
       8:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
       c:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__vector_3>
      10:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      14:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      18:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      1c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      20:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      24:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      28:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__vector_10>
      2c:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__vector_11>
      30:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      34:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      38:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      3c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      40:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      44:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      48:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      4c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      50:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      54:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      58:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      5c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      60:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      64:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      68:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      6c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      70:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      74:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__vector_29>
      78:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      7c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      80:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      84:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      88:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      8c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      90:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      94:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      98:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      9c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      a0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      a4:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      a8:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      ac:	83 05       	cpc	r24, r3
      ae:	94 05       	cpc	r25, r4
      b0:	a5 05       	cpc	r26, r5
      b2:	b6 05       	cpc	r27, r6
      b4:	c7 05       	cpc	r28, r7
      b6:	d8 05       	cpc	r29, r8
      b8:	e9 05       	cpc	r30, r9
      ba:	a6 17       	cp	r26, r22
      bc:	b1 17       	cp	r27, r17
      be:	cd 17       	cp	r28, r29
      c0:	ec 17       	cp	r30, r28
      c2:	0b 18       	sub	r0, r11
      c4:	7d 18       	sub	r7, r13
      c6:	1c 18       	sub	r1, r12
      c8:	2d 18       	sub	r2, r13
      ca:	7d 18       	sub	r7, r13
      cc:	3e 18       	sub	r3, r14
      ce:	07 2c       	mov	r0, r7
      d0:	7a a5       	ldd	r23, Y+42	; 0x2a
      d2:	ba 6c       	ori	r27, 0xCA	; 202
      d4:	c5 90       	lpm	r12, Z+
      d6:	da 3b       	cpi	r29, 0xBA	; 186
      d8:	93 65       	ori	r25, 0x53	; 83
      da:	fc 8b       	std	Y+20, r31	; 0x14
      dc:	bc 53       	subi	r27, 0x3C	; 60
      de:	f8 10       	cpse	r15, r8
      e0:	fd 3c       	cpi	r31, 0xCD	; 205
      e2:	56 92       	lac	Z, r5
      e4:	83 4d       	sbci	r24, 0xD3	; 211
      e6:	bd 87       	std	Y+13, r27	; 0x0d
      e8:	9d 3a       	cpi	r25, 0xAD	; 173
      ea:	b6 3d       	cpi	r27, 0xD6	; 214
      ec:	cb c9       	rjmp	.-3178   	; 0xfffff484 <__eeprom_end+0xff7ef484>
      ee:	bf 5b       	subi	r27, 0xBF	; 191
      f0:	be 73       	andi	r27, 0x3E	; 62
      f2:	da 0f       	add	r29, r26
      f4:	c9 3f       	cpi	r28, 0xF9	; 249

000000f6 <__trampolines_end>:
      f6:	44 6f       	ori	r20, 0xF4	; 244
      f8:	6e 65       	ori	r22, 0x5E	; 94
      fa:	20 0a       	sbc	r2, r16
	...

000000fd <__c.2064>:
      fd:	0d 0a 00                                            ...

00000100 <__c.2062>:
     100:	6f 75 74 70 75 74 3d 00                             output=.

00000108 <__c.2060>:
     108:	0d 0a 00                                            ...

0000010b <__c.2058>:
     10b:	73 75 6d 3d 00                                      sum=.

00000110 <__c.2056>:
     110:	0d 0a 00                                            ...

00000113 <__c.2054>:
     113:	49 6e 70 75 74 3d 00                                Input=.

0000011a <__c.2045>:
     11a:	50 49 44 0a 00                                      PID..

0000011f <__c.2043>:
     11f:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

0000012b <__c.2041>:
     12b:	50 49 44 0a 00                                      PID..

00000130 <__c.2039>:
     130:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000013b <__c.2035>:
     13b:	0d 0a 00                                            ...

0000013e <__c.2033>:
     13e:	0d 0a 00                                            ...

00000141 <__c.2031>:
     141:	50 68 6f 5b 36 5d 00                                Pho[6].

00000148 <__c.2029>:
     148:	0d 0a 00                                            ...

0000014b <__c.2027>:
     14b:	50 68 6f 5b 35 5d 00                                Pho[5].

00000152 <__c.2025>:
     152:	0d 0a 00                                            ...

00000155 <__c.2023>:
     155:	50 68 6f 5b 34 5d 00                                Pho[4].

0000015c <__c.2021>:
     15c:	0d 0a 00                                            ...

0000015f <__c.2019>:
     15f:	50 68 6f 5b 33 5d 00                                Pho[3].

00000166 <__c.2017>:
     166:	0d 0a 00                                            ...

00000169 <__c.2015>:
     169:	50 68 6f 5b 32 5d 00                                Pho[2].

00000170 <__c.2013>:
     170:	0d 0a 00                                            ...

00000173 <__c.2011>:
     173:	50 68 6f 5b 31 5d 00                                Pho[1].

0000017a <__c.2009>:
     17a:	0d 0a 00                                            ...

0000017d <__c.2007>:
     17d:	50 68 6f 5b 30 5d 00                                Pho[0].

00000184 <__c.2005>:
     184:	0d 0a 00                                            ...

00000187 <__c.2156>:
     187:	0a 00                                               ..

00000189 <__c.2154>:
     189:	64 69 73 74 3a 20 00                                dist: .

00000190 <__c.2146>:
     190:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000019b <__c.2144>:
     19b:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001a7 <__c.2142>:
     1a7:	0a 00                                               ..

000001a9 <__c.2140>:
     1a9:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

000001b3 <__c.2138>:
     1b3:	0a 00                                               ..

000001b5 <__c.2136>:
     1b5:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

000001c0 <__c.2128>:
     1c0:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001cb <__c.2126>:
     1cb:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001d7 <__c.2124>:
     1d7:	0a 00                                               ..

000001d9 <__c.2122>:
     1d9:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

000001e3 <__c.2120>:
     1e3:	0a 00                                               ..

000001e5 <__c.2118>:
     1e5:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

000001f0 <__c.2110>:
     1f0:	0a 00                                               ..

000001f2 <__c.2108>:
     1f2:	61 6c 70 68 61 3a 20 00                             alpha: .

000001fa <__c.2084>:
     1fa:	0a 00                                               ..

000001fc <__c.2082>:
     1fc:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000204 <__c.2080>:
     204:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000215 <__c.2078>:
     215:	0a 00                                               ..

00000217 <__c.2076>:
     217:	09 09 79 3a 00                                      ..y:.

0000021c <__c.2074>:
     21c:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000228 <__c.2046>:
     228:	0a 00                                               ..

0000022a <__c.2044>:
     22a:	64 6d 61 78 3a 00                                   dmax:.

00000230 <descriptor_list>:
     230:	00 01 00 00 c7 02 12 00 02 00 00 84 02 43 00 03     .............C..
     240:	00 00 80 02 04 01 03 09 04 6c 02 12 02 03 09 04     .........l......
     250:	64 02 06 03 03 09 04 5a 02 08                       d......Z..

0000025a <string3>:
     25a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000264 <string2>:
     264:	06 03 4d 00 32 00 00 00                             ..M.2...

0000026c <string1>:
     26c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     27c:	65 00 00 00                                         e...

00000280 <string0>:
     280:	04 03 09 04                                         ....

00000284 <config1_descriptor>:
     284:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     294:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2a4:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     2b4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2c4:	40 00 00                                            @..

000002c7 <device_descriptor>:
     2c7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2d7:	03 01                                               ..

000002d9 <endpoint_config_table>:
     2d9:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000002e3 <__c.2104>:
     2e3:	0a 00                                               ..

000002e5 <__c.2102>:
     2e5:	09 09 79 3a 00                                      ..y:.

000002ea <__c.2100>:
     2ea:	49 74 73 20 6c 6f 63 61 74 69 6f 6e 20 69 73 3a     Its location is:
     2fa:	20 00                                                .

000002fc <__c.2098>:
     2fc:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

0000030b <__c.2096>:
     30b:	4e 6f 2e 20 00                                      No. .

00000310 <__c.2093>:
     310:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

0000031b <__c.2090>:
     31b:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000325 <__c.2087>:
     325:	50 61 75 73 65 0a 00                                Pause..

0000032c <__c.2084>:
     32c:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000334 <__c.2081>:
     334:	47 6f 61 6c 20 41 0a 00                             Goal A..

0000033c <__c.2078>:
     33c:	50 6c 61 79 20 0a 00                                Play ..

00000343 <__c.2074>:
     343:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

0000034f <__c.2065>:
     34f:	0a 00                                               ..

00000351 <__c.2063>:
     351:	2c 20 00                                            , .

00000354 <__c.2061>:
     354:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

0000035d <__c.2058>:
     35d:	0a 00                                               ..

0000035f <__c.2056>:
     35f:	2c 20 00                                            , .

00000362 <__c.2054>:
     362:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     372:	3d 20 00                                            = .

00000375 <__c.2051>:
     375:	0a 00                                               ..

00000377 <__c.2049>:
     377:	2c 20 00                                            , .

0000037a <__c.2047>:
     37a:	67 6f 61 6c 20 3d 20 00                             goal = .

00000382 <__c.2045>:
     382:	73 65 6e 74 20 6d 65 73 73 73 61 67 65 2e 0a 00     sent messsage...

00000392 <__c.2038>:
     392:	0a 00                                               ..

00000394 <__c.2036>:
     394:	73 74 61 74 65 3a 20 00                             state: .

0000039c <__ctors_end>:
     39c:	11 24       	eor	r1, r1
     39e:	1f be       	out	0x3f, r1	; 63
     3a0:	cf ef       	ldi	r28, 0xFF	; 255
     3a2:	da e0       	ldi	r29, 0x0A	; 10
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	cd bf       	out	0x3d, r28	; 61

000003a8 <__do_copy_data>:
     3a8:	11 e0       	ldi	r17, 0x01	; 1
     3aa:	a0 e0       	ldi	r26, 0x00	; 0
     3ac:	b1 e0       	ldi	r27, 0x01	; 1
     3ae:	e8 eb       	ldi	r30, 0xB8	; 184
     3b0:	fa e3       	ldi	r31, 0x3A	; 58
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <__do_copy_data+0x10>
     3b4:	05 90       	lpm	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	ac 33       	cpi	r26, 0x3C	; 60
     3ba:	b1 07       	cpc	r27, r17
     3bc:	d9 f7       	brne	.-10     	; 0x3b4 <__do_copy_data+0xc>

000003be <__do_clear_bss>:
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	ac e3       	ldi	r26, 0x3C	; 60
     3c2:	b1 e0       	ldi	r27, 0x01	; 1
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <.do_clear_bss_start>

000003c6 <.do_clear_bss_loop>:
     3c6:	1d 92       	st	X+, r1

000003c8 <.do_clear_bss_start>:
     3c8:	a8 3b       	cpi	r26, 0xB8	; 184
     3ca:	b2 07       	cpc	r27, r18
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <.do_clear_bss_loop>
     3ce:	0e 94 cc 18 	call	0x3198	; 0x3198 <main>
     3d2:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <_exit>

000003d6 <__bad_interrupt>:
     3d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003da <send_message>:
 */ 

#include "communication.h"


void send_message(int state, int num, char *buffer, float *c_wii){
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ea 01       	movw	r28, r20
     3e4:	89 01       	movw	r16, r18
	switch(state){ 
     3e6:	03 97       	sbiw	r24, 0x03	; 3
     3e8:	b9 f5       	brne	.+110    	; 0x458 <send_message+0x7e>
		case 3:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xA9;
     3ea:	89 ea       	ldi	r24, 0xA9	; 169
     3ec:	88 83       	st	Y, r24
			buffer[1] = num;
     3ee:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     3f0:	f9 01       	movw	r30, r18
     3f2:	60 81       	ld	r22, Z
     3f4:	71 81       	ldd	r23, Z+1	; 0x01
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	93 81       	ldd	r25, Z+3	; 0x03
     3fa:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__fixunssfsi>
     3fe:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     400:	f8 01       	movw	r30, r16
     402:	60 81       	ld	r22, Z
     404:	71 81       	ldd	r23, Z+1	; 0x01
     406:	82 81       	ldd	r24, Z+2	; 0x02
     408:	93 81       	ldd	r25, Z+3	; 0x03
     40a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__fixunssfsi>
     40e:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     410:	f8 01       	movw	r30, r16
     412:	64 81       	ldd	r22, Z+4	; 0x04
     414:	75 81       	ldd	r23, Z+5	; 0x05
     416:	86 81       	ldd	r24, Z+6	; 0x06
     418:	97 81       	ldd	r25, Z+7	; 0x07
     41a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__fixunssfsi>
     41e:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     420:	f8 01       	movw	r30, r16
     422:	64 81       	ldd	r22, Z+4	; 0x04
     424:	75 81       	ldd	r23, Z+5	; 0x05
     426:	86 81       	ldd	r24, Z+6	; 0x06
     428:	97 81       	ldd	r25, Z+7	; 0x07
     42a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__fixunssfsi>
     42e:	7d 83       	std	Y+5, r23	; 0x05
			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     430:	4a e0       	ldi	r20, 0x0A	; 10
     432:	be 01       	movw	r22, r28
     434:	8d e0       	ldi	r24, 0x0D	; 13
     436:	0e 94 ac 12 	call	0x2558	; 0x2558 <m_rf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43a:	83 ec       	ldi	r24, 0xC3	; 195
     43c:	99 e0       	ldi	r25, 0x09	; 9
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <send_message+0x64>
     442:	00 c0       	rjmp	.+0      	; 0x444 <send_message+0x6a>
     444:	00 00       	nop
			m_wait(10);
			m_rf_send(TXADDRESS2,buffer,PACKET_LENGTH);
     446:	4a e0       	ldi	r20, 0x0A	; 10
     448:	be 01       	movw	r22, r28
     44a:	8e e0       	ldi	r24, 0x0E	; 14
     44c:	0e 94 ac 12 	call	0x2558	; 0x2558 <m_rf_send>
			usb_tx_string("Done \n");
     450:	86 ef       	ldi	r24, 0xF6	; 246
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <init_ADC>:
int output;
int sum_Pho = 0;
int diff_Pho = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     466:	ac e7       	ldi	r26, 0x7C	; 124
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	8c 91       	ld	r24, X
     46c:	8f 77       	andi	r24, 0x7F	; 127
     46e:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     470:	8c 91       	ld	r24, X
     472:	80 64       	ori	r24, 0x40	; 64
     474:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     476:	ea e7       	ldi	r30, 0x7A	; 122
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	84 60       	ori	r24, 0x04	; 4
     47e:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     480:	80 81       	ld	r24, Z
     482:	82 60       	ori	r24, 0x02	; 2
     484:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     486:	80 81       	ld	r24, Z
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     48c:	ce e7       	ldi	r28, 0x7E	; 126
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	88 81       	ld	r24, Y
     492:	81 60       	ori	r24, 0x01	; 1
     494:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     496:	88 81       	ld	r24, Y
     498:	82 60       	ori	r24, 0x02	; 2
     49a:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     49c:	cd e7       	ldi	r28, 0x7D	; 125
     49e:	d0 e0       	ldi	r29, 0x00	; 0
     4a0:	88 81       	ld	r24, Y
     4a2:	82 60       	ori	r24, 0x02	; 2
     4a4:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     4a6:	88 81       	ld	r24, Y
     4a8:	84 60       	ori	r24, 0x04	; 4
     4aa:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     4ac:	88 81       	ld	r24, Y
     4ae:	88 60       	ori	r24, 0x08	; 8
     4b0:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     4b2:	88 81       	ld	r24, Y
     4b4:	80 61       	ori	r24, 0x10	; 16
     4b6:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     4b8:	88 81       	ld	r24, Y
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     4be:	cb e7       	ldi	r28, 0x7B	; 123
     4c0:	d0 e0       	ldi	r29, 0x00	; 0
     4c2:	88 81       	ld	r24, Y
     4c4:	8f 7d       	andi	r24, 0xDF	; 223
     4c6:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     4c8:	8c 91       	ld	r24, X
     4ca:	8b 7f       	andi	r24, 0xFB	; 251
     4cc:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     4ce:	8c 91       	ld	r24, X
     4d0:	8d 7f       	andi	r24, 0xFD	; 253
     4d2:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     4d4:	8c 91       	ld	r24, X
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     4da:	80 81       	ld	r24, Z
     4dc:	80 62       	ori	r24, 0x20	; 32
     4de:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     4e0:	80 81       	ld	r24, Z
     4e2:	88 60       	ori	r24, 0x08	; 8
     4e4:	80 83       	st	Z, r24
	sei();
     4e6:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     4e8:	80 81       	ld	r24, Z
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     4ee:	80 81       	ld	r24, Z
     4f0:	80 64       	ori	r24, 0x40	; 64
     4f2:	80 83       	st	Z, r24
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <PID_Pho>:
			PID_Pho(2*Kp_Pho, Ki_Pho, Kd_Pho);
		}
	}
}

void PID_Pho(float Kp, float Ki, float Kd) {
     4fa:	4f 92       	push	r4
     4fc:	5f 92       	push	r5
     4fe:	6f 92       	push	r6
     500:	7f 92       	push	r7
     502:	8f 92       	push	r8
     504:	9f 92       	push	r9
     506:	af 92       	push	r10
     508:	bf 92       	push	r11
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	2b 01       	movw	r4, r22
     518:	3c 01       	movw	r6, r24
     51a:	49 01       	movw	r8, r18
     51c:	5a 01       	movw	r10, r20
     51e:	67 01       	movw	r12, r14
     520:	78 01       	movw	r14, r16
	int sum02 = Pho[0] + Pho[2];
     522:	20 91 44 01 	lds	r18, 0x0144
     526:	30 91 45 01 	lds	r19, 0x0145
     52a:	80 91 48 01 	lds	r24, 0x0148
     52e:	90 91 49 01 	lds	r25, 0x0149
     532:	82 0f       	add	r24, r18
     534:	93 1f       	adc	r25, r19
	int sum13 = Pho[1] + Pho[3];
     536:	40 91 46 01 	lds	r20, 0x0146
     53a:	50 91 47 01 	lds	r21, 0x0147
     53e:	20 91 4a 01 	lds	r18, 0x014A
     542:	30 91 4b 01 	lds	r19, 0x014B
     546:	24 0f       	add	r18, r20
     548:	35 1f       	adc	r19, r21
	input = sum02 - sum13;
     54a:	82 1b       	sub	r24, r18
     54c:	93 0b       	sbc	r25, r19
     54e:	90 93 b5 01 	sts	0x01B5, r25
     552:	80 93 b4 01 	sts	0x01B4, r24
	m_usb_tx_string("Input=");
     556:	83 e1       	ldi	r24, 0x13	; 19
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(input);
     55e:	80 91 b4 01 	lds	r24, 0x01B4
     562:	90 91 b5 01 	lds	r25, 0x01B5
     566:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     56a:	80 e1       	ldi	r24, 0x10	; 16
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	diff_Pho = input - input_last;
     572:	80 91 b4 01 	lds	r24, 0x01B4
     576:	90 91 b5 01 	lds	r25, 0x01B5
     57a:	20 91 40 01 	lds	r18, 0x0140
     57e:	30 91 41 01 	lds	r19, 0x0141
     582:	ac 01       	movw	r20, r24
     584:	42 1b       	sub	r20, r18
     586:	53 0b       	sbc	r21, r19
     588:	50 93 3d 01 	sts	0x013D, r21
     58c:	40 93 3c 01 	sts	0x013C, r20
	sum_Pho = sum_Pho + input;
     590:	20 91 3e 01 	lds	r18, 0x013E
     594:	30 91 3f 01 	lds	r19, 0x013F
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	90 93 3f 01 	sts	0x013F, r25
     5a0:	80 93 3e 01 	sts	0x013E, r24
	m_usb_tx_string("sum=");
     5a4:	8b e0       	ldi	r24, 0x0B	; 11
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(sum_Pho);
     5ac:	80 91 3e 01 	lds	r24, 0x013E
     5b0:	90 91 3f 01 	lds	r25, 0x013F
     5b4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     5b8:	88 e0       	ldi	r24, 0x08	; 8
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>

	output = Kp * input + Ki*sum_Pho + Kd * diff_Pho;
     5c0:	60 91 b4 01 	lds	r22, 0x01B4
     5c4:	70 91 b5 01 	lds	r23, 0x01B5
     5c8:	88 27       	eor	r24, r24
     5ca:	77 fd       	sbrc	r23, 7
     5cc:	80 95       	com	r24
     5ce:	98 2f       	mov	r25, r24
     5d0:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
     5d4:	a3 01       	movw	r20, r6
     5d6:	92 01       	movw	r18, r4
     5d8:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     5dc:	2b 01       	movw	r4, r22
     5de:	3c 01       	movw	r6, r24
     5e0:	60 91 3e 01 	lds	r22, 0x013E
     5e4:	70 91 3f 01 	lds	r23, 0x013F
     5e8:	88 27       	eor	r24, r24
     5ea:	77 fd       	sbrc	r23, 7
     5ec:	80 95       	com	r24
     5ee:	98 2f       	mov	r25, r24
     5f0:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
     5f4:	a5 01       	movw	r20, r10
     5f6:	94 01       	movw	r18, r8
     5f8:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     5fc:	9b 01       	movw	r18, r22
     5fe:	ac 01       	movw	r20, r24
     600:	c3 01       	movw	r24, r6
     602:	b2 01       	movw	r22, r4
     604:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     608:	4b 01       	movw	r8, r22
     60a:	5c 01       	movw	r10, r24
     60c:	60 91 3c 01 	lds	r22, 0x013C
     610:	70 91 3d 01 	lds	r23, 0x013D
     614:	88 27       	eor	r24, r24
     616:	77 fd       	sbrc	r23, 7
     618:	80 95       	com	r24
     61a:	98 2f       	mov	r25, r24
     61c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
     620:	a7 01       	movw	r20, r14
     622:	96 01       	movw	r18, r12
     624:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     634:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
     638:	70 93 b3 01 	sts	0x01B3, r23
     63c:	60 93 b2 01 	sts	0x01B2, r22
	m_usb_tx_string("output=");
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(output);
     648:	80 91 b2 01 	lds	r24, 0x01B2
     64c:	90 91 b3 01 	lds	r25, 0x01B3
     650:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     654:	8d ef       	ldi	r24, 0xFD	; 253
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	input_last = input;
     65c:	80 91 b4 01 	lds	r24, 0x01B4
     660:	90 91 b5 01 	lds	r25, 0x01B5
     664:	90 93 41 01 	sts	0x0141, r25
     668:	80 93 40 01 	sts	0x0140, r24
	
	if(output>0){
     66c:	80 91 b2 01 	lds	r24, 0x01B2
     670:	90 91 b3 01 	lds	r25, 0x01B3
     674:	18 16       	cp	r1, r24
     676:	19 06       	cpc	r1, r25
     678:	74 f5       	brge	.+92     	; 0x6d6 <PID_Pho+0x1dc>
		OCR1C = full_speed - abs(output);
     67a:	9c 01       	movw	r18, r24
     67c:	99 23       	and	r25, r25
     67e:	24 f4       	brge	.+8      	; 0x688 <PID_Pho+0x18e>
     680:	22 27       	eor	r18, r18
     682:	33 27       	eor	r19, r19
     684:	28 1b       	sub	r18, r24
     686:	39 0b       	sbc	r19, r25
     688:	8c eb       	ldi	r24, 0xBC	; 188
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	82 1b       	sub	r24, r18
     68e:	93 0b       	sbc	r25, r19
     690:	90 93 8d 00 	sts	0x008D, r25
     694:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     698:	20 91 00 01 	lds	r18, 0x0100
     69c:	30 91 01 01 	lds	r19, 0x0101
     6a0:	80 91 b2 01 	lds	r24, 0x01B2
     6a4:	90 91 b3 01 	lds	r25, 0x01B3
     6a8:	99 23       	and	r25, r25
     6aa:	1c f4       	brge	.+6      	; 0x6b2 <PID_Pho+0x1b8>
     6ac:	91 95       	neg	r25
     6ae:	81 95       	neg	r24
     6b0:	91 09       	sbc	r25, r1
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	44 f4       	brge	.+16     	; 0x6c8 <PID_Pho+0x1ce>
			OCR1C = full_speed - speed_diff_Pho;
     6b8:	8c eb       	ldi	r24, 0xBC	; 188
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	82 1b       	sub	r24, r18
     6be:	93 0b       	sbc	r25, r19
     6c0:	90 93 8d 00 	sts	0x008D, r25
     6c4:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     6c8:	8c eb       	ldi	r24, 0xBC	; 188
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	90 93 8b 00 	sts	0x008B, r25
     6d0:	80 93 8a 00 	sts	0x008A, r24
     6d4:	2d c0       	rjmp	.+90     	; 0x730 <PID_Pho+0x236>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     6d6:	9c 01       	movw	r18, r24
     6d8:	99 23       	and	r25, r25
     6da:	24 f4       	brge	.+8      	; 0x6e4 <PID_Pho+0x1ea>
     6dc:	22 27       	eor	r18, r18
     6de:	33 27       	eor	r19, r19
     6e0:	28 1b       	sub	r18, r24
     6e2:	39 0b       	sbc	r19, r25
     6e4:	8c eb       	ldi	r24, 0xBC	; 188
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	82 1b       	sub	r24, r18
     6ea:	93 0b       	sbc	r25, r19
     6ec:	90 93 8b 00 	sts	0x008B, r25
     6f0:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     6f4:	20 91 00 01 	lds	r18, 0x0100
     6f8:	30 91 01 01 	lds	r19, 0x0101
     6fc:	80 91 b2 01 	lds	r24, 0x01B2
     700:	90 91 b3 01 	lds	r25, 0x01B3
     704:	99 23       	and	r25, r25
     706:	1c f4       	brge	.+6      	; 0x70e <PID_Pho+0x214>
     708:	91 95       	neg	r25
     70a:	81 95       	neg	r24
     70c:	91 09       	sbc	r25, r1
     70e:	28 17       	cp	r18, r24
     710:	39 07       	cpc	r19, r25
     712:	44 f4       	brge	.+16     	; 0x724 <PID_Pho+0x22a>
			OCR1B = full_speed - speed_diff_Pho;
     714:	8c eb       	ldi	r24, 0xBC	; 188
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	82 1b       	sub	r24, r18
     71a:	93 0b       	sbc	r25, r19
     71c:	90 93 8b 00 	sts	0x008B, r25
     720:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     724:	8c eb       	ldi	r24, 0xBC	; 188
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	90 93 8d 00 	sts	0x008D, r25
     72c:	80 93 8c 00 	sts	0x008C, r24
	}
}
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	7f 90       	pop	r7
     746:	6f 90       	pop	r6
     748:	5f 90       	pop	r5
     74a:	4f 90       	pop	r4
     74c:	08 95       	ret

0000074e <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
	m_usb_tx_string("\r\n");
     766:	84 e8       	ldi	r24, 0x84	; 132
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("Pho[0]");
     76e:	8d e7       	ldi	r24, 0x7D	; 125
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(Pho[0]);
     776:	0f 2e       	mov	r0, r31
     778:	f4 e4       	ldi	r31, 0x44	; 68
     77a:	cf 2e       	mov	r12, r31
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	df 2e       	mov	r13, r31
     780:	f0 2d       	mov	r31, r0
     782:	d6 01       	movw	r26, r12
     784:	8d 91       	ld	r24, X+
     786:	9c 91       	ld	r25, X
     788:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     78c:	8a e7       	ldi	r24, 0x7A	; 122
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("Pho[1]");
     794:	83 e7       	ldi	r24, 0x73	; 115
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(Pho[1]);
     79c:	c6 e4       	ldi	r28, 0x46	; 70
     79e:	d1 e0       	ldi	r29, 0x01	; 1
     7a0:	88 81       	ld	r24, Y
     7a2:	99 81       	ldd	r25, Y+1	; 0x01
     7a4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7a8:	80 e7       	ldi	r24, 0x70	; 112
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("Pho[2]");
     7b0:	89 e6       	ldi	r24, 0x69	; 105
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(Pho[2]);
     7b8:	0f 2e       	mov	r0, r31
     7ba:	f8 e4       	ldi	r31, 0x48	; 72
     7bc:	8f 2e       	mov	r8, r31
     7be:	f1 e0       	ldi	r31, 0x01	; 1
     7c0:	9f 2e       	mov	r9, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	f4 01       	movw	r30, r8
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7ce:	86 e6       	ldi	r24, 0x66	; 102
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("Pho[3]");
     7d6:	8f e5       	ldi	r24, 0x5F	; 95
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(Pho[3]);
     7de:	0f 2e       	mov	r0, r31
     7e0:	fa e4       	ldi	r31, 0x4A	; 74
     7e2:	ef 2e       	mov	r14, r31
     7e4:	f1 e0       	ldi	r31, 0x01	; 1
     7e6:	ff 2e       	mov	r15, r31
     7e8:	f0 2d       	mov	r31, r0
     7ea:	d7 01       	movw	r26, r14
     7ec:	8d 91       	ld	r24, X+
     7ee:	9c 91       	ld	r25, X
     7f0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7f4:	8c e5       	ldi	r24, 0x5C	; 92
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("Pho[4]");
     7fc:	85 e5       	ldi	r24, 0x55	; 85
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(Pho[4]);
     804:	0f 2e       	mov	r0, r31
     806:	fc e4       	ldi	r31, 0x4C	; 76
     808:	af 2e       	mov	r10, r31
     80a:	f1 e0       	ldi	r31, 0x01	; 1
     80c:	bf 2e       	mov	r11, r31
     80e:	f0 2d       	mov	r31, r0
     810:	f5 01       	movw	r30, r10
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     81a:	82 e5       	ldi	r24, 0x52	; 82
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("Pho[5]");
     822:	8b e4       	ldi	r24, 0x4B	; 75
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(Pho[5]);
     82a:	0e e4       	ldi	r16, 0x4E	; 78
     82c:	11 e0       	ldi	r17, 0x01	; 1
     82e:	d8 01       	movw	r26, r16
     830:	8d 91       	ld	r24, X+
     832:	9c 91       	ld	r25, X
     834:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     838:	88 e4       	ldi	r24, 0x48	; 72
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("Pho[6]");
     840:	81 e4       	ldi	r24, 0x41	; 65
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(Pho[6]);
     848:	80 91 50 01 	lds	r24, 0x0150
     84c:	90 91 51 01 	lds	r25, 0x0151
     850:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     854:	8e e3       	ldi	r24, 0x3E	; 62
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_string("\r\n");
     85c:	8b e3       	ldi	r24, 0x3B	; 59
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     864:	f4 01       	movw	r30, r8
     866:	80 80       	ld	r8, Z
     868:	91 80       	ldd	r9, Z+1	; 0x01
     86a:	d5 01       	movw	r26, r10
     86c:	ad 90       	ld	r10, X+
     86e:	bc 90       	ld	r11, X
     870:	f6 01       	movw	r30, r12
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	88 0d       	add	r24, r8
     878:	99 1d       	adc	r25, r9
     87a:	8a 0d       	add	r24, r10
     87c:	9b 1d       	adc	r25, r11
     87e:	e3 e0       	ldi	r30, 0x03	; 3
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	bf 01       	movw	r22, r30
     884:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__divmodhi4>
     888:	9b 01       	movw	r18, r22
     88a:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     88c:	d7 01       	movw	r26, r14
     88e:	ed 90       	ld	r14, X+
     890:	fc 90       	ld	r15, X
     892:	d8 01       	movw	r26, r16
     894:	0d 91       	ld	r16, X+
     896:	1c 91       	ld	r17, X
     898:	88 81       	ld	r24, Y
     89a:	99 81       	ldd	r25, Y+1	; 0x01
     89c:	8e 0d       	add	r24, r14
     89e:	9f 1d       	adc	r25, r15
     8a0:	80 0f       	add	r24, r16
     8a2:	91 1f       	adc	r25, r17
     8a4:	bf 01       	movw	r22, r30
     8a6:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__divmodhi4>
     8aa:	eb 01       	movw	r28, r22
	
	if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     8ac:	c9 01       	movw	r24, r18
     8ae:	86 1b       	sub	r24, r22
     8b0:	97 0b       	sbc	r25, r23
     8b2:	c3 97       	sbiw	r24, 0x33	; 51
     8b4:	44 f4       	brge	.+16     	; 0x8c6 <findPuck+0x178>
     8b6:	62 17       	cp	r22, r18
     8b8:	73 07       	cpc	r23, r19
     8ba:	0c f0       	brlt	.+2      	; 0x8be <findPuck+0x170>
     8bc:	4b c0       	rjmp	.+150    	; 0x954 <findPuck+0x206>
     8be:	8a 14       	cp	r8, r10
     8c0:	9b 04       	cpc	r9, r11
     8c2:	0c f0       	brlt	.+2      	; 0x8c6 <findPuck+0x178>
     8c4:	47 c0       	rjmp	.+142    	; 0x954 <findPuck+0x206>
		m_usb_tx_string("turn left\n");
     8c6:	80 e3       	ldi	r24, 0x30	; 48
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		if(mean024 > revThres){
     8ce:	b1 eb       	ldi	r27, 0xB1	; 177
     8d0:	cb 16       	cp	r12, r27
     8d2:	b4 e0       	ldi	r27, 0x04	; 4
     8d4:	db 06       	cpc	r13, r27
     8d6:	6c f0       	brlt	.+26     	; 0x8f2 <findPuck+0x1a4>
			set(PORTB, 0);
     8d8:	28 9a       	sbi	0x05, 0	; 5
			clear(PORTB, 1);
     8da:	29 98       	cbi	0x05, 1	; 5
			OCR1C = full_speed;
     8dc:	8c eb       	ldi	r24, 0xBC	; 188
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	90 93 8d 00 	sts	0x008D, r25
     8e4:	80 93 8c 00 	sts	0x008C, r24
			OCR1B = full_speed;
     8e8:	90 93 8b 00 	sts	0x008B, r25
     8ec:	80 93 8a 00 	sts	0x008A, r24
     8f0:	8f c0       	rjmp	.+286    	; 0xa10 <findPuck+0x2c2>
		}
		else{
			set(PORTB, 0);
     8f2:	28 9a       	sbi	0x05, 0	; 5
			set(PORTB, 1);
     8f4:	29 9a       	sbi	0x05, 1	; 5
			OCR1C = full_speed - speed_diff_Pho;
     8f6:	8c eb       	ldi	r24, 0xBC	; 188
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	20 91 00 01 	lds	r18, 0x0100
     8fe:	30 91 01 01 	lds	r19, 0x0101
     902:	fc 01       	movw	r30, r24
     904:	e2 1b       	sub	r30, r18
     906:	f3 0b       	sbc	r31, r19
     908:	f0 93 8d 00 	sts	0x008D, r31
     90c:	e0 93 8c 00 	sts	0x008C, r30
			OCR1B = full_speed;
     910:	90 93 8b 00 	sts	0x008B, r25
     914:	80 93 8a 00 	sts	0x008A, r24
			if(Pho[2]>Pho[4]){
     918:	20 91 48 01 	lds	r18, 0x0148
     91c:	30 91 49 01 	lds	r19, 0x0149
     920:	80 91 4c 01 	lds	r24, 0x014C
     924:	90 91 4d 01 	lds	r25, 0x014D
     928:	82 17       	cp	r24, r18
     92a:	93 07       	cpc	r25, r19
     92c:	0c f0       	brlt	.+2      	; 0x930 <findPuck+0x1e2>
     92e:	70 c0       	rjmp	.+224    	; 0xa10 <findPuck+0x2c2>
				m_usb_tx_string("PID\n");
     930:	8b e2       	ldi	r24, 0x2B	; 43
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				PID_Pho(Kp_Pho, Ki_Pho, Kd_Pho);
     938:	e1 2c       	mov	r14, r1
     93a:	f1 2c       	mov	r15, r1
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	10 e4       	ldi	r17, 0x40	; 64
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	a9 01       	movw	r20, r18
     946:	6d ec       	ldi	r22, 0xCD	; 205
     948:	7c ec       	ldi	r23, 0xCC	; 204
     94a:	8c e4       	ldi	r24, 0x4C	; 76
     94c:	9e e3       	ldi	r25, 0x3E	; 62
     94e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <PID_Pho>
     952:	5e c0       	rjmp	.+188    	; 0xa10 <findPuck+0x2c2>
			}
		}
	}
	
	else {
		if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     954:	62 1b       	sub	r22, r18
     956:	73 0b       	sbc	r23, r19
     958:	63 33       	cpi	r22, 0x33	; 51
     95a:	71 05       	cpc	r23, r1
     95c:	44 f4       	brge	.+16     	; 0x96e <findPuck+0x220>
     95e:	cc 16       	cp	r12, r28
     960:	dd 06       	cpc	r13, r29
     962:	0c f0       	brlt	.+2      	; 0x966 <findPuck+0x218>
     964:	48 c0       	rjmp	.+144    	; 0x9f6 <findPuck+0x2a8>
     966:	e0 16       	cp	r14, r16
     968:	f1 06       	cpc	r15, r17
     96a:	0c f0       	brlt	.+2      	; 0x96e <findPuck+0x220>
     96c:	44 c0       	rjmp	.+136    	; 0x9f6 <findPuck+0x2a8>
			m_usb_tx_string("turn right\n");
     96e:	8f e1       	ldi	r24, 0x1F	; 31
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			if(mean135 > revThres){
     976:	c1 3b       	cpi	r28, 0xB1	; 177
     978:	d4 40       	sbci	r29, 0x04	; 4
     97a:	6c f0       	brlt	.+26     	; 0x996 <findPuck+0x248>
				set(PORTB, 1);
     97c:	29 9a       	sbi	0x05, 1	; 5
				clear(PORTB, 0);
     97e:	28 98       	cbi	0x05, 0	; 5
				OCR1B = full_speed;
     980:	8c eb       	ldi	r24, 0xBC	; 188
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	90 93 8b 00 	sts	0x008B, r25
     988:	80 93 8a 00 	sts	0x008A, r24
				OCR1C = full_speed;
     98c:	90 93 8d 00 	sts	0x008D, r25
     990:	80 93 8c 00 	sts	0x008C, r24
     994:	3d c0       	rjmp	.+122    	; 0xa10 <findPuck+0x2c2>
			}
			else{
				set(PORTB, 0);
     996:	28 9a       	sbi	0x05, 0	; 5
				set(PORTB, 1);
     998:	29 9a       	sbi	0x05, 1	; 5
				OCR1B = full_speed - speed_diff_Pho;
     99a:	8c eb       	ldi	r24, 0xBC	; 188
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	20 91 00 01 	lds	r18, 0x0100
     9a2:	30 91 01 01 	lds	r19, 0x0101
     9a6:	ac 01       	movw	r20, r24
     9a8:	42 1b       	sub	r20, r18
     9aa:	53 0b       	sbc	r21, r19
     9ac:	50 93 8b 00 	sts	0x008B, r21
     9b0:	40 93 8a 00 	sts	0x008A, r20
				OCR1C = full_speed;
     9b4:	90 93 8d 00 	sts	0x008D, r25
     9b8:	80 93 8c 00 	sts	0x008C, r24
				if(Pho[3]>Pho[5]){
     9bc:	20 91 4a 01 	lds	r18, 0x014A
     9c0:	30 91 4b 01 	lds	r19, 0x014B
     9c4:	80 91 4e 01 	lds	r24, 0x014E
     9c8:	90 91 4f 01 	lds	r25, 0x014F
     9cc:	82 17       	cp	r24, r18
     9ce:	93 07       	cpc	r25, r19
     9d0:	fc f4       	brge	.+62     	; 0xa10 <findPuck+0x2c2>
					m_usb_tx_string("PID\n");
     9d2:	8a e1       	ldi	r24, 0x1A	; 26
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
					PID_Pho(Kp_Pho, Ki_Pho, Kd_Pho);
     9da:	e1 2c       	mov	r14, r1
     9dc:	f1 2c       	mov	r15, r1
     9de:	00 e0       	ldi	r16, 0x00	; 0
     9e0:	10 e4       	ldi	r17, 0x40	; 64
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	a9 01       	movw	r20, r18
     9e8:	6d ec       	ldi	r22, 0xCD	; 205
     9ea:	7c ec       	ldi	r23, 0xCC	; 204
     9ec:	8c e4       	ldi	r24, 0x4C	; 76
     9ee:	9e e3       	ldi	r25, 0x3E	; 62
     9f0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <PID_Pho>
     9f4:	0d c0       	rjmp	.+26     	; 0xa10 <findPuck+0x2c2>
				}
			}
		}
		else{
			PID_Pho(2*Kp_Pho, Ki_Pho, Kd_Pho);
     9f6:	e1 2c       	mov	r14, r1
     9f8:	f1 2c       	mov	r15, r1
     9fa:	00 e0       	ldi	r16, 0x00	; 0
     9fc:	10 e4       	ldi	r17, 0x40	; 64
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	a9 01       	movw	r20, r18
     a04:	6d ec       	ldi	r22, 0xCD	; 205
     a06:	7c ec       	ldi	r23, 0xCC	; 204
     a08:	8c ec       	ldi	r24, 0xCC	; 204
     a0a:	9e e3       	ldi	r25, 0x3E	; 62
     a0c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <PID_Pho>
		}
	}
}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	af 90       	pop	r10
     a24:	9f 90       	pop	r9
     a26:	8f 90       	pop	r8
     a28:	08 95       	ret

00000a2a <__vector_29>:
		}
		OCR1C = full_speed;
	}
}

ISR(ADC_vect){
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ef 93       	push	r30
     a5e:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     a60:	c0 91 42 01 	lds	r28, 0x0142
     a64:	d0 91 43 01 	lds	r29, 0x0143
     a68:	a0 90 78 00 	lds	r10, 0x0078
     a6c:	b0 90 79 00 	lds	r11, 0x0079
     a70:	8e 01       	movw	r16, r28
     a72:	00 0f       	add	r16, r16
     a74:	11 1f       	adc	r17, r17
     a76:	0c 5b       	subi	r16, 0xBC	; 188
     a78:	1e 4f       	sbci	r17, 0xFE	; 254
     a7a:	f8 01       	movw	r30, r16
     a7c:	60 81       	ld	r22, Z
     a7e:	71 81       	ldd	r23, Z+1	; 0x01
     a80:	88 27       	eor	r24, r24
     a82:	77 fd       	sbrc	r23, 7
     a84:	80 95       	com	r24
     a86:	98 2f       	mov	r25, r24
     a88:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
     a8c:	2d ec       	ldi	r18, 0xCD	; 205
     a8e:	3c ec       	ldi	r19, 0xCC	; 204
     a90:	4c e4       	ldi	r20, 0x4C	; 76
     a92:	5f e3       	ldi	r21, 0x3F	; 63
     a94:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     a98:	6b 01       	movw	r12, r22
     a9a:	7c 01       	movw	r14, r24
     a9c:	b5 01       	movw	r22, r10
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
     aa6:	2c ec       	ldi	r18, 0xCC	; 204
     aa8:	3c ec       	ldi	r19, 0xCC	; 204
     aaa:	4c e4       	ldi	r20, 0x4C	; 76
     aac:	5e e3       	ldi	r21, 0x3E	; 62
     aae:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     abe:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
     ac2:	f8 01       	movw	r30, r16
     ac4:	71 83       	std	Z+1, r23	; 0x01
     ac6:	60 83       	st	Z, r22
	
	i = i + 1;
     ac8:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     aca:	c8 30       	cpi	r28, 0x08	; 8
     acc:	d1 05       	cpc	r29, r1
     ace:	2c f4       	brge	.+10     	; 0xada <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     ad0:	d0 93 43 01 	sts	0x0143, r29
     ad4:	c0 93 42 01 	sts	0x0142, r28
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__vector_29+0xb8>
	if(i > 7){
		i = 0;
     ada:	10 92 43 01 	sts	0x0143, r1
     ade:	10 92 42 01 	sts	0x0142, r1
	}
	
	clear(ADCSRA, ADEN);
     ae2:	ea e7       	ldi	r30, 0x7A	; 122
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	8f 77       	andi	r24, 0x7F	; 127
     aea:	80 83       	st	Z, r24
	switch(i){
     aec:	80 91 42 01 	lds	r24, 0x0142
     af0:	90 91 43 01 	lds	r25, 0x0143
     af4:	87 30       	cpi	r24, 0x07	; 7
     af6:	91 05       	cpc	r25, r1
     af8:	08 f0       	brcs	.+2      	; 0xafc <__vector_29+0xd2>
     afa:	7b c0       	rjmp	.+246    	; 0xbf2 <__stack+0xf3>
     afc:	fc 01       	movw	r30, r24
     afe:	ea 5a       	subi	r30, 0xAA	; 170
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     b06:	eb e7       	ldi	r30, 0x7B	; 123
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8f 7d       	andi	r24, 0xDF	; 223
     b0e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b10:	ec e7       	ldi	r30, 0x7C	; 124
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8b 7f       	andi	r24, 0xFB	; 251
     b18:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b1a:	80 81       	ld	r24, Z
     b1c:	8d 7f       	andi	r24, 0xFD	; 253
     b1e:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     b20:	80 81       	ld	r24, Z
     b22:	8e 7f       	andi	r24, 0xFE	; 254
     b24:	80 83       	st	Z, r24
			break;
     b26:	65 c0       	rjmp	.+202    	; 0xbf2 <__stack+0xf3>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     b28:	eb e7       	ldi	r30, 0x7B	; 123
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	8f 7d       	andi	r24, 0xDF	; 223
     b30:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b32:	ec e7       	ldi	r30, 0x7C	; 124
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8b 7f       	andi	r24, 0xFB	; 251
     b3a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b3c:	80 81       	ld	r24, Z
     b3e:	8d 7f       	andi	r24, 0xFD	; 253
     b40:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	80 83       	st	Z, r24
			break;
     b48:	54 c0       	rjmp	.+168    	; 0xbf2 <__stack+0xf3>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     b4a:	eb e7       	ldi	r30, 0x7B	; 123
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 62       	ori	r24, 0x20	; 32
     b52:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b54:	ec e7       	ldi	r30, 0x7C	; 124
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8b 7f       	andi	r24, 0xFB	; 251
     b5c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	80 83       	st	Z, r24
			break;
     b6a:	43 c0       	rjmp	.+134    	; 0xbf2 <__stack+0xf3>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     b6c:	eb e7       	ldi	r30, 0x7B	; 123
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	80 62       	ori	r24, 0x20	; 32
     b74:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b76:	ec e7       	ldi	r30, 0x7C	; 124
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8b 7f       	andi	r24, 0xFB	; 251
     b7e:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     b80:	80 81       	ld	r24, Z
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     b86:	80 81       	ld	r24, Z
     b88:	8e 7f       	andi	r24, 0xFE	; 254
     b8a:	80 83       	st	Z, r24
			break;
     b8c:	32 c0       	rjmp	.+100    	; 0xbf2 <__stack+0xf3>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     b8e:	eb e7       	ldi	r30, 0x7B	; 123
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	80 62       	ori	r24, 0x20	; 32
     b96:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b98:	ec e7       	ldi	r30, 0x7C	; 124
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8b 7f       	andi	r24, 0xFB	; 251
     ba0:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     ba2:	80 81       	ld	r24, Z
     ba4:	82 60       	ori	r24, 0x02	; 2
     ba6:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     ba8:	80 81       	ld	r24, Z
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	80 83       	st	Z, r24
			break;
     bae:	21 c0       	rjmp	.+66     	; 0xbf2 <__stack+0xf3>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     bb0:	eb e7       	ldi	r30, 0x7B	; 123
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 62       	ori	r24, 0x20	; 32
     bb8:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     bba:	ec e7       	ldi	r30, 0x7C	; 124
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	84 60       	ori	r24, 0x04	; 4
     bc2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     bc4:	80 81       	ld	r24, Z
     bc6:	8d 7f       	andi	r24, 0xFD	; 253
     bc8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     bca:	80 81       	ld	r24, Z
     bcc:	8e 7f       	andi	r24, 0xFE	; 254
     bce:	80 83       	st	Z, r24
			break;
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <__stack+0xf3>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     bd2:	eb e7       	ldi	r30, 0x7B	; 123
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 62       	ori	r24, 0x20	; 32
     bda:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     bdc:	ec e7       	ldi	r30, 0x7C	; 124
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8b 7f       	andi	r24, 0xFB	; 251
     be4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     be6:	80 81       	ld	r24, Z
     be8:	8d 7f       	andi	r24, 0xFD	; 253
     bea:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     bec:	80 81       	ld	r24, Z
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     bf2:	ea e7       	ldi	r30, 0x7A	; 122
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     bfc:	80 81       	ld	r24, Z
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	80 83       	st	Z, r24
	
}
     c02:	ff 91       	pop	r31
     c04:	ef 91       	pop	r30
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	bf 90       	pop	r11
     c2c:	af 90       	pop	r10
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     c38:	4f 92       	push	r4
     c3a:	5f 92       	push	r5
     c3c:	6f 92       	push	r6
     c3e:	7f 92       	push	r7
     c40:	8f 92       	push	r8
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	60 97       	sbiw	r28, 0x10	; 16
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	2b 01       	movw	r4, r22
     c6a:	3c 01       	movw	r6, r24
     c6c:	2d 83       	std	Y+5, r18	; 0x05
     c6e:	3e 83       	std	Y+6, r19	; 0x06
     c70:	4f 83       	std	Y+7, r20	; 0x07
     c72:	58 87       	std	Y+8, r21	; 0x08
     c74:	58 01       	movw	r10, r16
     c76:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     c78:	d5 01       	movw	r26, r10
     c7a:	cd 90       	ld	r12, X+
     c7c:	dd 90       	ld	r13, X+
     c7e:	ed 90       	ld	r14, X+
     c80:	fc 90       	ld	r15, X
     c82:	9b 01       	movw	r18, r22
     c84:	ac 01       	movw	r20, r24
     c86:	c7 01       	movw	r24, r14
     c88:	b6 01       	movw	r22, r12
     c8a:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     c8e:	f8 01       	movw	r30, r16
     c90:	20 81       	ld	r18, Z
     c92:	31 81       	ldd	r19, Z+1	; 0x01
     c94:	42 81       	ldd	r20, Z+2	; 0x02
     c96:	53 81       	ldd	r21, Z+3	; 0x03
     c98:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
     c9c:	69 87       	std	Y+9, r22	; 0x09
     c9e:	7a 87       	std	Y+10, r23	; 0x0a
     ca0:	8b 87       	std	Y+11, r24	; 0x0b
     ca2:	9c 87       	std	Y+12, r25	; 0x0c
     ca4:	d5 01       	movw	r26, r10
     ca6:	14 96       	adiw	r26, 0x04	; 4
     ca8:	8d 91       	ld	r24, X+
     caa:	9d 91       	ld	r25, X+
     cac:	0d 90       	ld	r0, X+
     cae:	bc 91       	ld	r27, X
     cb0:	a0 2d       	mov	r26, r0
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	ab 83       	std	Y+3, r26	; 0x03
     cb8:	bc 83       	std	Y+4, r27	; 0x04
     cba:	2d 81       	ldd	r18, Y+5	; 0x05
     cbc:	3e 81       	ldd	r19, Y+6	; 0x06
     cbe:	4f 81       	ldd	r20, Y+7	; 0x07
     cc0:	58 85       	ldd	r21, Y+8	; 0x08
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     cca:	6d 87       	std	Y+13, r22	; 0x0d
     ccc:	7e 87       	std	Y+14, r23	; 0x0e
     cce:	8f 87       	std	Y+15, r24	; 0x0f
     cd0:	98 8b       	std	Y+16, r25	; 0x10
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	69 85       	ldd	r22, Y+9	; 0x09
     cd8:	7a 85       	ldd	r23, Y+10	; 0x0a
     cda:	8b 85       	ldd	r24, Y+11	; 0x0b
     cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cde:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
     ce2:	4b 01       	movw	r8, r22
     ce4:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     ce6:	29 81       	ldd	r18, Y+1	; 0x01
     ce8:	3a 81       	ldd	r19, Y+2	; 0x02
     cea:	4b 81       	ldd	r20, Y+3	; 0x03
     cec:	5c 81       	ldd	r21, Y+4	; 0x04
     cee:	c3 01       	movw	r24, r6
     cf0:	b2 01       	movw	r22, r4
     cf2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     cf6:	f8 01       	movw	r30, r16
     cf8:	24 81       	ldd	r18, Z+4	; 0x04
     cfa:	35 81       	ldd	r19, Z+5	; 0x05
     cfc:	46 81       	ldd	r20, Z+6	; 0x06
     cfe:	57 81       	ldd	r21, Z+7	; 0x07
     d00:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
     d04:	2b 01       	movw	r4, r22
     d06:	3c 01       	movw	r6, r24
     d08:	2d 81       	ldd	r18, Y+5	; 0x05
     d0a:	3e 81       	ldd	r19, Y+6	; 0x06
     d0c:	4f 81       	ldd	r20, Y+7	; 0x07
     d0e:	58 85       	ldd	r21, Y+8	; 0x08
     d10:	c7 01       	movw	r24, r14
     d12:	b6 01       	movw	r22, r12
     d14:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     d18:	69 83       	std	Y+1, r22	; 0x01
     d1a:	7a 83       	std	Y+2, r23	; 0x02
     d1c:	8b 83       	std	Y+3, r24	; 0x03
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	c3 01       	movw	r24, r6
     d26:	b2 01       	movw	r22, r4
     d28:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     d2c:	6b 01       	movw	r12, r22
     d2e:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     d30:	2d 85       	ldd	r18, Y+13	; 0x0d
     d32:	3e 85       	ldd	r19, Y+14	; 0x0e
     d34:	4f 85       	ldd	r20, Y+15	; 0x0f
     d36:	58 89       	ldd	r21, Y+16	; 0x10
     d38:	69 85       	ldd	r22, Y+9	; 0x09
     d3a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d40:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     d44:	6d 83       	std	Y+5, r22	; 0x05
     d46:	7e 83       	std	Y+6, r23	; 0x06
     d48:	8f 83       	std	Y+7, r24	; 0x07
     d4a:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     d4c:	29 81       	ldd	r18, Y+1	; 0x01
     d4e:	3a 81       	ldd	r19, Y+2	; 0x02
     d50:	4b 81       	ldd	r20, Y+3	; 0x03
     d52:	5c 81       	ldd	r21, Y+4	; 0x04
     d54:	c3 01       	movw	r24, r6
     d56:	b2 01       	movw	r22, r4
     d58:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
     d5c:	2b 01       	movw	r4, r22
     d5e:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     d60:	a5 01       	movw	r20, r10
     d62:	94 01       	movw	r18, r8
     d64:	c5 01       	movw	r24, r10
     d66:	b4 01       	movw	r22, r8
     d68:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     d6c:	4b 01       	movw	r8, r22
     d6e:	5c 01       	movw	r10, r24
     d70:	a7 01       	movw	r20, r14
     d72:	96 01       	movw	r18, r12
     d74:	c7 01       	movw	r24, r14
     d76:	b6 01       	movw	r22, r12
     d78:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	c5 01       	movw	r24, r10
     d82:	b4 01       	movw	r22, r8
     d84:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     d88:	6b 01       	movw	r12, r22
     d8a:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     d8c:	2d 81       	ldd	r18, Y+5	; 0x05
     d8e:	3e 81       	ldd	r19, Y+6	; 0x06
     d90:	4f 81       	ldd	r20, Y+7	; 0x07
     d92:	58 85       	ldd	r21, Y+8	; 0x08
     d94:	ca 01       	movw	r24, r20
     d96:	b9 01       	movw	r22, r18
     d98:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     d9c:	4b 01       	movw	r8, r22
     d9e:	5c 01       	movw	r10, r24
     da0:	a3 01       	movw	r20, r6
     da2:	92 01       	movw	r18, r4
     da4:	c3 01       	movw	r24, r6
     da6:	b2 01       	movw	r22, r4
     da8:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	c5 01       	movw	r24, r10
     db2:	b4 01       	movw	r22, r8
     db4:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     dbc:	01 e0       	ldi	r16, 0x01	; 1
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	c7 01       	movw	r24, r14
     dc2:	b6 01       	movw	r22, r12
     dc4:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
     dc8:	88 23       	and	r24, r24
     dca:	14 f0       	brlt	.+4      	; 0xdd0 <find_sign+0x198>
     dcc:	00 e0       	ldi	r16, 0x00	; 0
     dce:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     dd0:	c8 01       	movw	r24, r16
     dd2:	60 96       	adiw	r28, 0x10	; 16
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	9f 90       	pop	r9
     df4:	8f 90       	pop	r8
     df6:	7f 90       	pop	r7
     df8:	6f 90       	pop	r6
     dfa:	5f 90       	pop	r5
     dfc:	4f 90       	pop	r4
     dfe:	08 95       	ret

00000e00 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
     e00:	2f 92       	push	r2
     e02:	3f 92       	push	r3
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	28 97       	sbiw	r28, 0x08	; 8
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	1c 01       	movw	r2, r24
     e36:	49 83       	std	Y+1, r20	; 0x01
     e38:	5a 83       	std	Y+2, r21	; 0x02
     e3a:	6b 83       	std	Y+3, r22	; 0x03
     e3c:	7c 83       	std	Y+4, r23	; 0x04
     e3e:	0d 83       	std	Y+5, r16	; 0x05
     e40:	1e 83       	std	Y+6, r17	; 0x06
     e42:	2f 83       	std	Y+7, r18	; 0x07
     e44:	38 87       	std	Y+8, r19	; 0x08
     e46:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     e48:	f6 01       	movw	r30, r12
     e4a:	20 81       	ld	r18, Z
     e4c:	31 81       	ldd	r19, Z+1	; 0x01
     e4e:	42 81       	ldd	r20, Z+2	; 0x02
     e50:	53 81       	ldd	r21, Z+3	; 0x03
     e52:	f7 01       	movw	r30, r14
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
     e60:	4b 01       	movw	r8, r22
     e62:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
     e64:	f6 01       	movw	r30, r12
     e66:	24 81       	ldd	r18, Z+4	; 0x04
     e68:	35 81       	ldd	r19, Z+5	; 0x05
     e6a:	46 81       	ldd	r20, Z+6	; 0x06
     e6c:	57 81       	ldd	r21, Z+7	; 0x07
     e6e:	f7 01       	movw	r30, r14
     e70:	64 81       	ldd	r22, Z+4	; 0x04
     e72:	75 81       	ldd	r23, Z+5	; 0x05
     e74:	86 81       	ldd	r24, Z+6	; 0x06
     e76:	97 81       	ldd	r25, Z+7	; 0x07
     e78:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
     e7c:	6b 01       	movw	r12, r22
     e7e:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
     e80:	a5 01       	movw	r20, r10
     e82:	94 01       	movw	r18, r8
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     e8c:	2b 01       	movw	r4, r22
     e8e:	3c 01       	movw	r6, r24
     e90:	a7 01       	movw	r20, r14
     e92:	96 01       	movw	r18, r12
     e94:	c7 01       	movw	r24, r14
     e96:	b6 01       	movw	r22, r12
     e98:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	c3 01       	movw	r24, r6
     ea2:	b2 01       	movw	r22, r4
     ea4:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
     ea8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <sqrt>
     eac:	2b 01       	movw	r4, r22
     eae:	3c 01       	movw	r6, r24
     eb0:	9b 01       	movw	r18, r22
     eb2:	ac 01       	movw	r20, r24
     eb4:	c5 01       	movw	r24, r10
     eb6:	b4 01       	movw	r22, r8
     eb8:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3>
     ebc:	4b 01       	movw	r8, r22
     ebe:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
     ec0:	a3 01       	movw	r20, r6
     ec2:	92 01       	movw	r18, r4
     ec4:	c7 01       	movw	r24, r14
     ec6:	b6 01       	movw	r22, r12
     ec8:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3>
     ecc:	6b 01       	movw	r12, r22
     ece:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
     ed0:	f8 01       	movw	r30, r16
     ed2:	20 81       	ld	r18, Z
     ed4:	31 81       	ldd	r19, Z+1	; 0x01
     ed6:	42 81       	ldd	r20, Z+2	; 0x02
     ed8:	53 81       	ldd	r21, Z+3	; 0x03
     eda:	c5 01       	movw	r24, r10
     edc:	b4 01       	movw	r22, r8
     ede:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     ee2:	2b 01       	movw	r4, r22
     ee4:	3c 01       	movw	r6, r24
     ee6:	f8 01       	movw	r30, r16
     ee8:	24 81       	ldd	r18, Z+4	; 0x04
     eea:	35 81       	ldd	r19, Z+5	; 0x05
     eec:	46 81       	ldd	r20, Z+6	; 0x06
     eee:	57 81       	ldd	r21, Z+7	; 0x07
     ef0:	c7 01       	movw	r24, r14
     ef2:	b6 01       	movw	r22, r12
     ef4:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     ef8:	9b 01       	movw	r18, r22
     efa:	ac 01       	movw	r20, r24
     efc:	c3 01       	movw	r24, r6
     efe:	b2 01       	movw	r22, r4
     f00:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
	alpha = acos(cos_alpha);
     f04:	0e 94 37 1a 	call	0x346e	; 0x346e <acos>
     f08:	2b 01       	movw	r4, r22
     f0a:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
     f0c:	2a 94       	dec	r2
     f0e:	23 28       	or	r2, r3
     f10:	d1 f4       	brne	.+52     	; 0xf46 <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
     f12:	2d 81       	ldd	r18, Y+5	; 0x05
     f14:	3e 81       	ldd	r19, Y+6	; 0x06
     f16:	4f 81       	ldd	r20, Y+7	; 0x07
     f18:	58 85       	ldd	r21, Y+8	; 0x08
     f1a:	50 58       	subi	r21, 0x80	; 128
     f1c:	c7 01       	movw	r24, r14
     f1e:	b6 01       	movw	r22, r12
     f20:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     f24:	6b 01       	movw	r12, r22
     f26:	7c 01       	movw	r14, r24
     f28:	29 81       	ldd	r18, Y+1	; 0x01
     f2a:	3a 81       	ldd	r19, Y+2	; 0x02
     f2c:	4b 81       	ldd	r20, Y+3	; 0x03
     f2e:	5c 81       	ldd	r21, Y+4	; 0x04
     f30:	c5 01       	movw	r24, r10
     f32:	b4 01       	movw	r22, r8
     f34:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     f38:	9b 01       	movw	r18, r22
     f3a:	ac 01       	movw	r20, r24
     f3c:	c7 01       	movw	r24, r14
     f3e:	b6 01       	movw	r22, r12
     f40:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
     f44:	19 c0       	rjmp	.+50     	; 0xf78 <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
     f46:	2d 81       	ldd	r18, Y+5	; 0x05
     f48:	3e 81       	ldd	r19, Y+6	; 0x06
     f4a:	4f 81       	ldd	r20, Y+7	; 0x07
     f4c:	58 85       	ldd	r21, Y+8	; 0x08
     f4e:	50 58       	subi	r21, 0x80	; 128
     f50:	c7 01       	movw	r24, r14
     f52:	b6 01       	movw	r22, r12
     f54:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     f58:	6b 01       	movw	r12, r22
     f5a:	7c 01       	movw	r14, r24
     f5c:	29 81       	ldd	r18, Y+1	; 0x01
     f5e:	3a 81       	ldd	r19, Y+2	; 0x02
     f60:	4b 81       	ldd	r20, Y+3	; 0x03
     f62:	5c 81       	ldd	r21, Y+4	; 0x04
     f64:	c5 01       	movw	r24, r10
     f66:	b4 01       	movw	r22, r8
     f68:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     f6c:	9b 01       	movw	r18, r22
     f6e:	ac 01       	movw	r20, r24
     f70:	c7 01       	movw	r24, r14
     f72:	b6 01       	movw	r22, r12
     f74:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
	}
	if (c2g_wx < 0){
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	a9 01       	movw	r20, r18
     f7e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
     f82:	88 23       	and	r24, r24
     f84:	4c f0       	brlt	.+18     	; 0xf98 <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
     f86:	40 92 5e 01 	sts	0x015E, r4
     f8a:	50 92 5f 01 	sts	0x015F, r5
     f8e:	60 92 60 01 	sts	0x0160, r6
     f92:	70 92 61 01 	sts	0x0161, r7
     f96:	0c c0       	rjmp	.+24     	; 0xfb0 <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
     f98:	77 fa       	bst	r7, 7
     f9a:	70 94       	com	r7
     f9c:	77 f8       	bld	r7, 7
     f9e:	70 94       	com	r7
     fa0:	40 92 5e 01 	sts	0x015E, r4
     fa4:	50 92 5f 01 	sts	0x015F, r5
     fa8:	60 92 60 01 	sts	0x0160, r6
     fac:	70 92 61 01 	sts	0x0161, r7
	}
	m_usb_tx_string("alpha: ");
     fb0:	82 ef       	ldi	r24, 0xF2	; 242
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(alpha*10);
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	60 91 5e 01 	lds	r22, 0x015E
     fc4:	70 91 5f 01 	lds	r23, 0x015F
     fc8:	80 91 60 01 	lds	r24, 0x0160
     fcc:	90 91 61 01 	lds	r25, 0x0161
     fd0:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     fd4:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
     fd8:	cb 01       	movw	r24, r22
     fda:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
     fde:	80 ef       	ldi	r24, 0xF0	; 240
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
}
     fe6:	28 96       	adiw	r28, 0x08	; 8
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	9f 90       	pop	r9
    1008:	8f 90       	pop	r8
    100a:	7f 90       	pop	r7
    100c:	6f 90       	pop	r6
    100e:	5f 90       	pop	r5
    1010:	4f 90       	pop	r4
    1012:	3f 90       	pop	r3
    1014:	2f 90       	pop	r2
    1016:	08 95       	ret

00001018 <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    1018:	4f 92       	push	r4
    101a:	5f 92       	push	r5
    101c:	6f 92       	push	r6
    101e:	7f 92       	push	r7
    1020:	8f 92       	push	r8
    1022:	9f 92       	push	r9
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	00 d0       	rcall	.+0      	; 0x1036 <PID_alpha+0x1e>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <PID_alpha+0x20>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	4b 01       	movw	r8, r22
    103e:	5c 01       	movw	r10, r24
    1040:	29 83       	std	Y+1, r18	; 0x01
    1042:	3a 83       	std	Y+2, r19	; 0x02
    1044:	4b 83       	std	Y+3, r20	; 0x03
    1046:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1048:	40 90 5e 01 	lds	r4, 0x015E
    104c:	50 90 5f 01 	lds	r5, 0x015F
    1050:	60 90 60 01 	lds	r6, 0x0160
    1054:	70 90 61 01 	lds	r7, 0x0161
    1058:	20 91 5a 01 	lds	r18, 0x015A
    105c:	30 91 5b 01 	lds	r19, 0x015B
    1060:	40 91 5c 01 	lds	r20, 0x015C
    1064:	50 91 5d 01 	lds	r21, 0x015D
    1068:	c3 01       	movw	r24, r6
    106a:	b2 01       	movw	r22, r4
    106c:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1070:	6b 01       	movw	r12, r22
    1072:	7c 01       	movw	r14, r24
    1074:	60 93 56 01 	sts	0x0156, r22
    1078:	70 93 57 01 	sts	0x0157, r23
    107c:	80 93 58 01 	sts	0x0158, r24
    1080:	90 93 59 01 	sts	0x0159, r25
	float P =0, D = 0;
	P = Kp * alpha;
    1084:	a5 01       	movw	r20, r10
    1086:	94 01       	movw	r18, r8
    1088:	c3 01       	movw	r24, r6
    108a:	b2 01       	movw	r22, r4
    108c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1090:	4b 01       	movw	r8, r22
    1092:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    1094:	29 81       	ldd	r18, Y+1	; 0x01
    1096:	3a 81       	ldd	r19, Y+2	; 0x02
    1098:	4b 81       	ldd	r20, Y+3	; 0x03
    109a:	5c 81       	ldd	r21, Y+4	; 0x04
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    10a8:	c5 01       	movw	r24, r10
    10aa:	b4 01       	movw	r22, r8
    10ac:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    10b0:	60 93 52 01 	sts	0x0152, r22
    10b4:	70 93 53 01 	sts	0x0153, r23
    10b8:	80 93 54 01 	sts	0x0154, r24
    10bc:	90 93 55 01 	sts	0x0155, r25
	
	alpha_last = alpha;
    10c0:	40 92 5a 01 	sts	0x015A, r4
    10c4:	50 92 5b 01 	sts	0x015B, r5
    10c8:	60 92 5c 01 	sts	0x015C, r6
    10cc:	70 92 5d 01 	sts	0x015D, r7
	
	m_usb_tx_string("alpha*10: ");
    10d0:	85 ee       	ldi	r24, 0xE5	; 229
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e2       	ldi	r20, 0x20	; 32
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	60 91 5e 01 	lds	r22, 0x015E
    10e4:	70 91 5f 01 	lds	r23, 0x015F
    10e8:	80 91 60 01 	lds	r24, 0x0160
    10ec:	90 91 61 01 	lds	r25, 0x0161
    10f0:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    10f4:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    10f8:	cb 01       	movw	r24, r22
    10fa:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    10fe:	83 ee       	ldi	r24, 0xE3	; 227
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1106:	89 ed       	ldi	r24, 0xD9	; 217
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e2       	ldi	r20, 0x20	; 32
    1114:	51 e4       	ldi	r21, 0x41	; 65
    1116:	60 91 52 01 	lds	r22, 0x0152
    111a:	70 91 53 01 	lds	r23, 0x0153
    111e:	80 91 54 01 	lds	r24, 0x0154
    1122:	90 91 55 01 	lds	r25, 0x0155
    1126:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    112a:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    112e:	cb 01       	movw	r24, r22
    1130:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1134:	87 ed       	ldi	r24, 0xD7	; 215
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	if(gain_loc<0){  // turn right
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	60 91 52 01 	lds	r22, 0x0152
    1146:	70 91 53 01 	lds	r23, 0x0153
    114a:	80 91 54 01 	lds	r24, 0x0154
    114e:	90 91 55 01 	lds	r25, 0x0155
    1152:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    1156:	88 23       	and	r24, r24
    1158:	0c f0       	brlt	.+2      	; 0x115c <PID_alpha+0x144>
    115a:	44 c0       	rjmp	.+136    	; 0x11e4 <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    115c:	8b ec       	ldi	r24, 0xCB	; 203
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1164:	60 91 52 01 	lds	r22, 0x0152
    1168:	70 91 53 01 	lds	r23, 0x0153
    116c:	80 91 54 01 	lds	r24, 0x0154
    1170:	90 91 55 01 	lds	r25, 0x0155
    1174:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1178:	9b 01       	movw	r18, r22
    117a:	77 23       	and	r23, r23
    117c:	24 f4       	brge	.+8      	; 0x1186 <PID_alpha+0x16e>
    117e:	22 27       	eor	r18, r18
    1180:	33 27       	eor	r19, r19
    1182:	26 1b       	sub	r18, r22
    1184:	37 0b       	sbc	r19, r23
    1186:	8c eb       	ldi	r24, 0xBC	; 188
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	82 1b       	sub	r24, r18
    118c:	93 0b       	sbc	r25, r19
    118e:	90 93 8b 00 	sts	0x008B, r25
    1192:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    1196:	e0 90 18 01 	lds	r14, 0x0118
    119a:	f0 90 19 01 	lds	r15, 0x0119
    119e:	60 91 52 01 	lds	r22, 0x0152
    11a2:	70 91 53 01 	lds	r23, 0x0153
    11a6:	80 91 54 01 	lds	r24, 0x0154
    11aa:	90 91 55 01 	lds	r25, 0x0155
    11ae:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    11b2:	9b 01       	movw	r18, r22
    11b4:	77 23       	and	r23, r23
    11b6:	24 f4       	brge	.+8      	; 0x11c0 <PID_alpha+0x1a8>
    11b8:	22 27       	eor	r18, r18
    11ba:	33 27       	eor	r19, r19
    11bc:	26 1b       	sub	r18, r22
    11be:	37 0b       	sbc	r19, r23
    11c0:	e2 16       	cp	r14, r18
    11c2:	f3 06       	cpc	r15, r19
    11c4:	44 f4       	brge	.+16     	; 0x11d6 <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    11c6:	8c eb       	ldi	r24, 0xBC	; 188
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	8e 19       	sub	r24, r14
    11cc:	9f 09       	sbc	r25, r15
    11ce:	90 93 8b 00 	sts	0x008B, r25
    11d2:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    11d6:	8c eb       	ldi	r24, 0xBC	; 188
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	90 93 8d 00 	sts	0x008D, r25
    11de:	80 93 8c 00 	sts	0x008C, r24
    11e2:	43 c0       	rjmp	.+134    	; 0x126a <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    11e4:	80 ec       	ldi	r24, 0xC0	; 192
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    11ec:	60 91 52 01 	lds	r22, 0x0152
    11f0:	70 91 53 01 	lds	r23, 0x0153
    11f4:	80 91 54 01 	lds	r24, 0x0154
    11f8:	90 91 55 01 	lds	r25, 0x0155
    11fc:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1200:	9b 01       	movw	r18, r22
    1202:	77 23       	and	r23, r23
    1204:	24 f4       	brge	.+8      	; 0x120e <PID_alpha+0x1f6>
    1206:	22 27       	eor	r18, r18
    1208:	33 27       	eor	r19, r19
    120a:	26 1b       	sub	r18, r22
    120c:	37 0b       	sbc	r19, r23
    120e:	8c eb       	ldi	r24, 0xBC	; 188
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	82 1b       	sub	r24, r18
    1214:	93 0b       	sbc	r25, r19
    1216:	90 93 8d 00 	sts	0x008D, r25
    121a:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    121e:	e0 90 18 01 	lds	r14, 0x0118
    1222:	f0 90 19 01 	lds	r15, 0x0119
    1226:	60 91 52 01 	lds	r22, 0x0152
    122a:	70 91 53 01 	lds	r23, 0x0153
    122e:	80 91 54 01 	lds	r24, 0x0154
    1232:	90 91 55 01 	lds	r25, 0x0155
    1236:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    123a:	9b 01       	movw	r18, r22
    123c:	77 23       	and	r23, r23
    123e:	24 f4       	brge	.+8      	; 0x1248 <PID_alpha+0x230>
    1240:	22 27       	eor	r18, r18
    1242:	33 27       	eor	r19, r19
    1244:	26 1b       	sub	r18, r22
    1246:	37 0b       	sbc	r19, r23
    1248:	e2 16       	cp	r14, r18
    124a:	f3 06       	cpc	r15, r19
    124c:	44 f4       	brge	.+16     	; 0x125e <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    124e:	8c eb       	ldi	r24, 0xBC	; 188
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	8e 19       	sub	r24, r14
    1254:	9f 09       	sbc	r25, r15
    1256:	90 93 8d 00 	sts	0x008D, r25
    125a:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    125e:	8c eb       	ldi	r24, 0xBC	; 188
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	90 93 8b 00 	sts	0x008B, r25
    1266:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	9f 90       	pop	r9
    1284:	8f 90       	pop	r8
    1286:	7f 90       	pop	r7
    1288:	6f 90       	pop	r6
    128a:	5f 90       	pop	r5
    128c:	4f 90       	pop	r4
    128e:	08 95       	ret

00001290 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    1290:	4f 92       	push	r4
    1292:	5f 92       	push	r5
    1294:	6f 92       	push	r6
    1296:	7f 92       	push	r7
    1298:	8f 92       	push	r8
    129a:	9f 92       	push	r9
    129c:	af 92       	push	r10
    129e:	bf 92       	push	r11
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <PID_p2p+0x1e>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <PID_p2p+0x20>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	4b 01       	movw	r8, r22
    12b6:	5c 01       	movw	r10, r24
    12b8:	29 83       	std	Y+1, r18	; 0x01
    12ba:	3a 83       	std	Y+2, r19	; 0x02
    12bc:	4b 83       	std	Y+3, r20	; 0x03
    12be:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    12c0:	40 90 5e 01 	lds	r4, 0x015E
    12c4:	50 90 5f 01 	lds	r5, 0x015F
    12c8:	60 90 60 01 	lds	r6, 0x0160
    12cc:	70 90 61 01 	lds	r7, 0x0161
    12d0:	20 91 5a 01 	lds	r18, 0x015A
    12d4:	30 91 5b 01 	lds	r19, 0x015B
    12d8:	40 91 5c 01 	lds	r20, 0x015C
    12dc:	50 91 5d 01 	lds	r21, 0x015D
    12e0:	c3 01       	movw	r24, r6
    12e2:	b2 01       	movw	r22, r4
    12e4:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
    12ec:	60 93 56 01 	sts	0x0156, r22
    12f0:	70 93 57 01 	sts	0x0157, r23
    12f4:	80 93 58 01 	sts	0x0158, r24
    12f8:	90 93 59 01 	sts	0x0159, r25
	float P =0, D = 0;
	P = Kp * alpha;
    12fc:	a5 01       	movw	r20, r10
    12fe:	94 01       	movw	r18, r8
    1300:	c3 01       	movw	r24, r6
    1302:	b2 01       	movw	r22, r4
    1304:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1308:	4b 01       	movw	r8, r22
    130a:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    130c:	29 81       	ldd	r18, Y+1	; 0x01
    130e:	3a 81       	ldd	r19, Y+2	; 0x02
    1310:	4b 81       	ldd	r20, Y+3	; 0x03
    1312:	5c 81       	ldd	r21, Y+4	; 0x04
    1314:	c7 01       	movw	r24, r14
    1316:	b6 01       	movw	r22, r12
    1318:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    131c:	9b 01       	movw	r18, r22
    131e:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    1320:	c5 01       	movw	r24, r10
    1322:	b4 01       	movw	r22, r8
    1324:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    1328:	60 93 52 01 	sts	0x0152, r22
    132c:	70 93 53 01 	sts	0x0153, r23
    1330:	80 93 54 01 	sts	0x0154, r24
    1334:	90 93 55 01 	sts	0x0155, r25
	
	alpha_last = alpha;
    1338:	40 92 5a 01 	sts	0x015A, r4
    133c:	50 92 5b 01 	sts	0x015B, r5
    1340:	60 92 5c 01 	sts	0x015C, r6
    1344:	70 92 5d 01 	sts	0x015D, r7
	
	m_usb_tx_string("alpha*10: ");
    1348:	85 eb       	ldi	r24, 0xB5	; 181
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	60 91 5e 01 	lds	r22, 0x015E
    135c:	70 91 5f 01 	lds	r23, 0x015F
    1360:	80 91 60 01 	lds	r24, 0x0160
    1364:	90 91 61 01 	lds	r25, 0x0161
    1368:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    136c:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1370:	cb 01       	movw	r24, r22
    1372:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1376:	83 eb       	ldi	r24, 0xB3	; 179
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	m_usb_tx_string("gain*10: ");
    137e:	89 ea       	ldi	r24, 0xA9	; 169
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	60 91 52 01 	lds	r22, 0x0152
    1392:	70 91 53 01 	lds	r23, 0x0153
    1396:	80 91 54 01 	lds	r24, 0x0154
    139a:	90 91 55 01 	lds	r25, 0x0155
    139e:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    13a2:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    13a6:	cb 01       	movw	r24, r22
    13a8:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    13ac:	87 ea       	ldi	r24, 0xA7	; 167
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	if(gain_loc<0){  // turn right
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	60 91 52 01 	lds	r22, 0x0152
    13be:	70 91 53 01 	lds	r23, 0x0153
    13c2:	80 91 54 01 	lds	r24, 0x0154
    13c6:	90 91 55 01 	lds	r25, 0x0155
    13ca:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	0c f0       	brlt	.+2      	; 0x13d4 <PID_p2p+0x144>
    13d2:	44 c0       	rjmp	.+136    	; 0x145c <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    13d4:	8b e9       	ldi	r24, 0x9B	; 155
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    13dc:	60 91 52 01 	lds	r22, 0x0152
    13e0:	70 91 53 01 	lds	r23, 0x0153
    13e4:	80 91 54 01 	lds	r24, 0x0154
    13e8:	90 91 55 01 	lds	r25, 0x0155
    13ec:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    13f0:	9b 01       	movw	r18, r22
    13f2:	77 23       	and	r23, r23
    13f4:	24 f4       	brge	.+8      	; 0x13fe <PID_p2p+0x16e>
    13f6:	22 27       	eor	r18, r18
    13f8:	33 27       	eor	r19, r19
    13fa:	26 1b       	sub	r18, r22
    13fc:	37 0b       	sbc	r19, r23
    13fe:	8c eb       	ldi	r24, 0xBC	; 188
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	82 1b       	sub	r24, r18
    1404:	93 0b       	sbc	r25, r19
    1406:	90 93 8b 00 	sts	0x008B, r25
    140a:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    140e:	e0 90 16 01 	lds	r14, 0x0116
    1412:	f0 90 17 01 	lds	r15, 0x0117
    1416:	60 91 52 01 	lds	r22, 0x0152
    141a:	70 91 53 01 	lds	r23, 0x0153
    141e:	80 91 54 01 	lds	r24, 0x0154
    1422:	90 91 55 01 	lds	r25, 0x0155
    1426:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    142a:	9b 01       	movw	r18, r22
    142c:	77 23       	and	r23, r23
    142e:	24 f4       	brge	.+8      	; 0x1438 <PID_p2p+0x1a8>
    1430:	22 27       	eor	r18, r18
    1432:	33 27       	eor	r19, r19
    1434:	26 1b       	sub	r18, r22
    1436:	37 0b       	sbc	r19, r23
    1438:	e2 16       	cp	r14, r18
    143a:	f3 06       	cpc	r15, r19
    143c:	44 f4       	brge	.+16     	; 0x144e <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    143e:	8c eb       	ldi	r24, 0xBC	; 188
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	8e 19       	sub	r24, r14
    1444:	9f 09       	sbc	r25, r15
    1446:	90 93 8b 00 	sts	0x008B, r25
    144a:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    144e:	8c eb       	ldi	r24, 0xBC	; 188
    1450:	92 e0       	ldi	r25, 0x02	; 2
    1452:	90 93 8d 00 	sts	0x008D, r25
    1456:	80 93 8c 00 	sts	0x008C, r24
    145a:	43 c0       	rjmp	.+134    	; 0x14e2 <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    145c:	80 e9       	ldi	r24, 0x90	; 144
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1464:	60 91 52 01 	lds	r22, 0x0152
    1468:	70 91 53 01 	lds	r23, 0x0153
    146c:	80 91 54 01 	lds	r24, 0x0154
    1470:	90 91 55 01 	lds	r25, 0x0155
    1474:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1478:	9b 01       	movw	r18, r22
    147a:	77 23       	and	r23, r23
    147c:	24 f4       	brge	.+8      	; 0x1486 <PID_p2p+0x1f6>
    147e:	22 27       	eor	r18, r18
    1480:	33 27       	eor	r19, r19
    1482:	26 1b       	sub	r18, r22
    1484:	37 0b       	sbc	r19, r23
    1486:	8c eb       	ldi	r24, 0xBC	; 188
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	82 1b       	sub	r24, r18
    148c:	93 0b       	sbc	r25, r19
    148e:	90 93 8d 00 	sts	0x008D, r25
    1492:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    1496:	e0 90 16 01 	lds	r14, 0x0116
    149a:	f0 90 17 01 	lds	r15, 0x0117
    149e:	60 91 52 01 	lds	r22, 0x0152
    14a2:	70 91 53 01 	lds	r23, 0x0153
    14a6:	80 91 54 01 	lds	r24, 0x0154
    14aa:	90 91 55 01 	lds	r25, 0x0155
    14ae:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    14b2:	9b 01       	movw	r18, r22
    14b4:	77 23       	and	r23, r23
    14b6:	24 f4       	brge	.+8      	; 0x14c0 <PID_p2p+0x230>
    14b8:	22 27       	eor	r18, r18
    14ba:	33 27       	eor	r19, r19
    14bc:	26 1b       	sub	r18, r22
    14be:	37 0b       	sbc	r19, r23
    14c0:	e2 16       	cp	r14, r18
    14c2:	f3 06       	cpc	r15, r19
    14c4:	44 f4       	brge	.+16     	; 0x14d6 <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    14c6:	8c eb       	ldi	r24, 0xBC	; 188
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	8e 19       	sub	r24, r14
    14cc:	9f 09       	sbc	r25, r15
    14ce:	90 93 8d 00 	sts	0x008D, r25
    14d2:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    14d6:	8c eb       	ldi	r24, 0xBC	; 188
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	90 93 8b 00 	sts	0x008B, r25
    14de:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	7f 90       	pop	r7
    1500:	6f 90       	pop	r6
    1502:	5f 90       	pop	r5
    1504:	4f 90       	pop	r4
    1506:	08 95       	ret

00001508 <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
	unsigned int dist = abs(x - goal[0]);
    1510:	f8 01       	movw	r30, r16
    1512:	20 81       	ld	r18, Z
    1514:	31 81       	ldd	r19, Z+1	; 0x01
    1516:	42 81       	ldd	r20, Z+2	; 0x02
    1518:	53 81       	ldd	r21, Z+3	; 0x03
    151a:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    151e:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1522:	eb 01       	movw	r28, r22
    1524:	dd 23       	and	r29, r29
    1526:	24 f4       	brge	.+8      	; 0x1530 <find_if_reach+0x28>
    1528:	cc 27       	eor	r28, r28
    152a:	dd 27       	eor	r29, r29
    152c:	c6 1b       	sub	r28, r22
    152e:	d7 0b       	sbc	r29, r23
	m_usb_tx_string("dist: ");
    1530:	89 e8       	ldi	r24, 0x89	; 137
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(dist); 
    1538:	ce 01       	movw	r24, r28
    153a:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    153e:	87 e8       	ldi	r24, 0x87	; 135
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	if (dist < dist_threshold){
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	20 91 1a 01 	lds	r18, 0x011A
    154e:	30 91 1b 01 	lds	r19, 0x011B
    1552:	c2 17       	cp	r28, r18
    1554:	d3 07       	cpc	r29, r19
    1556:	10 f0       	brcs	.+4      	; 0x155c <find_if_reach+0x54>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int state, float *goal, float *c_wii, float *dir){
    1566:	2f 92       	push	r2
    1568:	3f 92       	push	r3
    156a:	4f 92       	push	r4
    156c:	5f 92       	push	r5
    156e:	6f 92       	push	r6
    1570:	7f 92       	push	r7
    1572:	8f 92       	push	r8
    1574:	9f 92       	push	r9
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	c6 58       	subi	r28, 0x86	; 134
    1590:	d1 09       	sbc	r29, r1
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cd 57       	subi	r28, 0x7D	; 125
    159e:	df 4f       	sbci	r29, 0xFF	; 255
    15a0:	99 83       	std	Y+1, r25	; 0x01
    15a2:	88 83       	st	Y, r24
    15a4:	c3 58       	subi	r28, 0x83	; 131
    15a6:	d0 40       	sbci	r29, 0x00	; 0
    15a8:	cb 57       	subi	r28, 0x7B	; 123
    15aa:	df 4f       	sbci	r29, 0xFF	; 255
    15ac:	79 83       	std	Y+1, r23	; 0x01
    15ae:	68 83       	st	Y, r22
    15b0:	c5 58       	subi	r28, 0x85	; 133
    15b2:	d0 40       	sbci	r29, 0x00	; 0
    15b4:	ed 96       	adiw	r28, 0x3d	; 61
    15b6:	5f af       	std	Y+63, r21	; 0x3f
    15b8:	4e af       	std	Y+62, r20	; 0x3e
    15ba:	ed 97       	sbiw	r28, 0x3d	; 61
    15bc:	ef 96       	adiw	r28, 0x3f	; 63
    15be:	3f af       	std	Y+63, r19	; 0x3f
    15c0:	2e af       	std	Y+62, r18	; 0x3e
    15c2:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    15c4:	82 e7       	ldi	r24, 0x72	; 114
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    15cc:	60 91 72 01 	lds	r22, 0x0172
    15d0:	70 91 73 01 	lds	r23, 0x0173
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    15dc:	69 83       	std	Y+1, r22	; 0x01
    15de:	7a 83       	std	Y+2, r23	; 0x02
    15e0:	8b 83       	std	Y+3, r24	; 0x03
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	60 91 78 01 	lds	r22, 0x0178
    15e8:	70 91 79 01 	lds	r23, 0x0179
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    15f4:	6d 83       	std	Y+5, r22	; 0x05
    15f6:	7e 83       	std	Y+6, r23	; 0x06
    15f8:	8f 83       	std	Y+7, r24	; 0x07
    15fa:	98 87       	std	Y+8, r25	; 0x08
    15fc:	60 91 7e 01 	lds	r22, 0x017E
    1600:	70 91 7f 01 	lds	r23, 0x017F
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    160c:	69 87       	std	Y+9, r22	; 0x09
    160e:	7a 87       	std	Y+10, r23	; 0x0a
    1610:	8b 87       	std	Y+11, r24	; 0x0b
    1612:	9c 87       	std	Y+12, r25	; 0x0c
    1614:	60 91 84 01 	lds	r22, 0x0184
    1618:	70 91 85 01 	lds	r23, 0x0185
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    1624:	6d 87       	std	Y+13, r22	; 0x0d
    1626:	7e 87       	std	Y+14, r23	; 0x0e
    1628:	8f 87       	std	Y+15, r24	; 0x0f
    162a:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    162c:	60 91 74 01 	lds	r22, 0x0174
    1630:	70 91 75 01 	lds	r23, 0x0175
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    163c:	69 8b       	std	Y+17, r22	; 0x11
    163e:	7a 8b       	std	Y+18, r23	; 0x12
    1640:	8b 8b       	std	Y+19, r24	; 0x13
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	60 91 7a 01 	lds	r22, 0x017A
    1648:	70 91 7b 01 	lds	r23, 0x017B
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    1654:	6d 8b       	std	Y+21, r22	; 0x15
    1656:	7e 8b       	std	Y+22, r23	; 0x16
    1658:	8f 8b       	std	Y+23, r24	; 0x17
    165a:	98 8f       	std	Y+24, r25	; 0x18
    165c:	60 91 80 01 	lds	r22, 0x0180
    1660:	70 91 81 01 	lds	r23, 0x0181
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    166c:	69 8f       	std	Y+25, r22	; 0x19
    166e:	7a 8f       	std	Y+26, r23	; 0x1a
    1670:	8b 8f       	std	Y+27, r24	; 0x1b
    1672:	9c 8f       	std	Y+28, r25	; 0x1c
    1674:	60 91 86 01 	lds	r22, 0x0186
    1678:	70 91 87 01 	lds	r23, 0x0187
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 47 1b 	call	0x368e	; 0x368e <__floatunsisf>
    1684:	6d 8f       	std	Y+29, r22	; 0x1d
    1686:	7e 8f       	std	Y+30, r23	; 0x1e
    1688:	8f 8f       	std	Y+31, r24	; 0x1f
    168a:	98 a3       	std	Y+32, r25	; 0x20
    168c:	9e 01       	movw	r18, r28
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	eb 96       	adiw	r28, 0x3b	; 59
    1694:	3f af       	std	Y+63, r19	; 0x3f
    1696:	2e af       	std	Y+62, r18	; 0x3e
    1698:	eb 97       	sbiw	r28, 0x3b	; 59
    169a:	ce 01       	movw	r24, r28
    169c:	41 96       	adiw	r24, 0x11	; 17
    169e:	e3 96       	adiw	r28, 0x33	; 51
    16a0:	9f af       	std	Y+63, r25	; 0x3f
    16a2:	8e af       	std	Y+62, r24	; 0x3e
    16a4:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    16a6:	ab 96       	adiw	r28, 0x2b	; 43
    16a8:	1f ae       	std	Y+63, r1	; 0x3f
    16aa:	1e ae       	std	Y+62, r1	; 0x3e
    16ac:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    16ae:	e9 96       	adiw	r28, 0x39	; 57
    16b0:	1f ae       	std	Y+63, r1	; 0x3f
    16b2:	1e ae       	std	Y+62, r1	; 0x3e
    16b4:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    16b6:	ab 96       	adiw	r28, 0x2b	; 43
    16b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    16ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    16bc:	ab 97       	sbiw	r28, 0x2b	; 43
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	e7 96       	adiw	r28, 0x37	; 55
    16c2:	bf af       	std	Y+63, r27	; 0x3f
    16c4:	ae af       	std	Y+62, r26	; 0x3e
    16c6:	e7 97       	sbiw	r28, 0x37	; 55
    16c8:	14 97       	sbiw	r26, 0x04	; 4
    16ca:	0c f0       	brlt	.+2      	; 0x16ce <localization+0x168>
    16cc:	48 c6       	rjmp	.+3216   	; 0x235e <localization+0xdf8>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    16ce:	eb 96       	adiw	r28, 0x3b	; 59
    16d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    16d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    16d4:	eb 97       	sbiw	r28, 0x3b	; 59
    16d6:	81 90       	ld	r8, Z+
    16d8:	91 90       	ld	r9, Z+
    16da:	a1 90       	ld	r10, Z+
    16dc:	b1 90       	ld	r11, Z+
    16de:	e9 96       	adiw	r28, 0x39	; 57
    16e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    16e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    16e4:	e9 97       	sbiw	r28, 0x39	; 57
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	29 e3       	ldi	r18, 0x39	; 57
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	2c 0f       	add	r18, r28
    16f0:	3d 1f       	adc	r19, r29
    16f2:	28 0f       	add	r18, r24
    16f4:	39 1f       	adc	r19, r25
    16f6:	a3 96       	adiw	r28, 0x23	; 35
    16f8:	3f af       	std	Y+63, r19	; 0x3f
    16fa:	2e af       	std	Y+62, r18	; 0x3e
    16fc:	a3 97       	sbiw	r28, 0x23	; 35
    16fe:	a5 e4       	ldi	r26, 0x45	; 69
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ac 0f       	add	r26, r28
    1704:	bd 1f       	adc	r27, r29
    1706:	a8 0f       	add	r26, r24
    1708:	b9 1f       	adc	r27, r25
    170a:	a7 96       	adiw	r28, 0x27	; 39
    170c:	bf af       	std	Y+63, r27	; 0x3f
    170e:	ae af       	std	Y+62, r26	; 0x3e
    1710:	a7 97       	sbiw	r28, 0x27	; 39
    1712:	e9 96       	adiw	r28, 0x39	; 57
    1714:	8e ad       	ldd	r24, Y+62	; 0x3e
    1716:	9f ad       	ldd	r25, Y+63	; 0x3f
    1718:	e9 97       	sbiw	r28, 0x39	; 57
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0f 2e       	mov	r0, r31
    1724:	f1 e2       	ldi	r31, 0x21	; 33
    1726:	6f 2e       	mov	r6, r31
    1728:	71 2c       	mov	r7, r1
    172a:	f0 2d       	mov	r31, r0
    172c:	6c 0e       	add	r6, r28
    172e:	7d 1e       	adc	r7, r29
    1730:	68 0e       	add	r6, r24
    1732:	79 1e       	adc	r7, r25
    1734:	e3 96       	adiw	r28, 0x33	; 51
    1736:	2e ad       	ldd	r18, Y+62	; 0x3e
    1738:	3f ad       	ldd	r19, Y+63	; 0x3f
    173a:	e3 97       	sbiw	r28, 0x33	; 51
    173c:	2c 5f       	subi	r18, 0xFC	; 252
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1742:	e7 96       	adiw	r28, 0x37	; 55
    1744:	0e ad       	ldd	r16, Y+62	; 0x3e
    1746:	1f ad       	ldd	r17, Y+63	; 0x3f
    1748:	e7 97       	sbiw	r28, 0x37	; 55
    174a:	e1 96       	adiw	r28, 0x31	; 49
    174c:	8c ae       	std	Y+60, r8	; 0x3c
    174e:	9d ae       	std	Y+61, r9	; 0x3d
    1750:	ae ae       	std	Y+62, r10	; 0x3e
    1752:	bf ae       	std	Y+63, r11	; 0x3f
    1754:	e1 97       	sbiw	r28, 0x31	; 49
    1756:	59 01       	movw	r10, r18
    1758:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 ec       	ldi	r19, 0xC0	; 192
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	54 e4       	ldi	r21, 0x44	; 68
    1762:	e1 96       	adiw	r28, 0x31	; 49
    1764:	6c ad       	ldd	r22, Y+60	; 0x3c
    1766:	7d ad       	ldd	r23, Y+61	; 0x3d
    1768:	8e ad       	ldd	r24, Y+62	; 0x3e
    176a:	9f ad       	ldd	r25, Y+63	; 0x3f
    176c:	e1 97       	sbiw	r28, 0x31	; 49
    176e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    1772:	88 23       	and	r24, r24
    1774:	09 f4       	brne	.+2      	; 0x1778 <localization+0x212>
    1776:	70 c0       	rjmp	.+224    	; 0x1858 <localization+0x2f2>
    1778:	e3 96       	adiw	r28, 0x33	; 51
    177a:	ae ad       	ldd	r26, Y+62	; 0x3e
    177c:	bf ad       	ldd	r27, Y+63	; 0x3f
    177e:	e3 97       	sbiw	r28, 0x33	; 51
    1780:	cd 90       	ld	r12, X+
    1782:	dd 90       	ld	r13, X+
    1784:	ed 90       	ld	r14, X+
    1786:	fc 90       	ld	r15, X
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 ec       	ldi	r19, 0xC0	; 192
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	c7 01       	movw	r24, r14
    1792:	b6 01       	movw	r22, r12
    1794:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    1798:	88 23       	and	r24, r24
    179a:	09 f4       	brne	.+2      	; 0x179e <localization+0x238>
    179c:	5d c0       	rjmp	.+186    	; 0x1858 <localization+0x2f2>
    179e:	f1 01       	movw	r30, r2
    17a0:	40 80       	ld	r4, Z
    17a2:	51 80       	ldd	r5, Z+1	; 0x01
    17a4:	62 80       	ldd	r6, Z+2	; 0x02
    17a6:	73 80       	ldd	r7, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 ec       	ldi	r19, 0xC0	; 192
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	54 e4       	ldi	r21, 0x44	; 68
    17b0:	c3 01       	movw	r24, r6
    17b2:	b2 01       	movw	r22, r4
    17b4:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	09 f4       	brne	.+2      	; 0x17be <localization+0x258>
    17bc:	4d c0       	rjmp	.+154    	; 0x1858 <localization+0x2f2>
    17be:	d5 01       	movw	r26, r10
    17c0:	8d 91       	ld	r24, X+
    17c2:	9d 91       	ld	r25, X+
    17c4:	0d 90       	ld	r0, X+
    17c6:	bc 91       	ld	r27, X
    17c8:	a0 2d       	mov	r26, r0
    17ca:	c1 58       	subi	r28, 0x81	; 129
    17cc:	df 4f       	sbci	r29, 0xFF	; 255
    17ce:	88 83       	st	Y, r24
    17d0:	99 83       	std	Y+1, r25	; 0x01
    17d2:	aa 83       	std	Y+2, r26	; 0x02
    17d4:	bb 83       	std	Y+3, r27	; 0x03
    17d6:	cf 57       	subi	r28, 0x7F	; 127
    17d8:	d0 40       	sbci	r29, 0x00	; 0
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 ec       	ldi	r19, 0xC0	; 192
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	54 e4       	ldi	r21, 0x44	; 68
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	a9 f1       	breq	.+106    	; 0x1858 <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    17ee:	a3 01       	movw	r20, r6
    17f0:	92 01       	movw	r18, r4
    17f2:	e1 96       	adiw	r28, 0x31	; 49
    17f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    17f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    17f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    17fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    17fc:	e1 97       	sbiw	r28, 0x31	; 49
    17fe:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1802:	2b 01       	movw	r4, r22
    1804:	3c 01       	movw	r6, r24
    1806:	c1 58       	subi	r28, 0x81	; 129
    1808:	df 4f       	sbci	r29, 0xFF	; 255
    180a:	28 81       	ld	r18, Y
    180c:	39 81       	ldd	r19, Y+1	; 0x01
    180e:	4a 81       	ldd	r20, Y+2	; 0x02
    1810:	5b 81       	ldd	r21, Y+3	; 0x03
    1812:	cf 57       	subi	r28, 0x7F	; 127
    1814:	d0 40       	sbci	r29, 0x00	; 0
    1816:	c7 01       	movw	r24, r14
    1818:	b6 01       	movw	r22, r12
    181a:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    181e:	6b 01       	movw	r12, r22
    1820:	7c 01       	movw	r14, r24
    1822:	a3 01       	movw	r20, r6
    1824:	92 01       	movw	r18, r4
    1826:	c3 01       	movw	r24, r6
    1828:	b2 01       	movw	r22, r4
    182a:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    182e:	2b 01       	movw	r4, r22
    1830:	3c 01       	movw	r6, r24
    1832:	a7 01       	movw	r20, r14
    1834:	96 01       	movw	r18, r12
    1836:	c7 01       	movw	r24, r14
    1838:	b6 01       	movw	r22, r12
    183a:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    183e:	9b 01       	movw	r18, r22
    1840:	ac 01       	movw	r20, r24
    1842:	c3 01       	movw	r24, r6
    1844:	b2 01       	movw	r22, r4
    1846:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    184a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <sqrt>
    184e:	f4 01       	movw	r30, r8
    1850:	60 83       	st	Z, r22
    1852:	71 83       	std	Z+1, r23	; 0x01
    1854:	82 83       	std	Z+2, r24	; 0x02
    1856:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1858:	a3 96       	adiw	r28, 0x23	; 35
    185a:	ae ad       	ldd	r26, Y+62	; 0x3e
    185c:	bf ad       	ldd	r27, Y+63	; 0x3f
    185e:	a3 97       	sbiw	r28, 0x23	; 35
    1860:	ab 96       	adiw	r28, 0x2b	; 43
    1862:	ee ad       	ldd	r30, Y+62	; 0x3e
    1864:	ff ad       	ldd	r31, Y+63	; 0x3f
    1866:	ab 97       	sbiw	r28, 0x2b	; 43
    1868:	ed 93       	st	X+, r30
    186a:	fd 93       	st	X+, r31
    186c:	a3 96       	adiw	r28, 0x23	; 35
    186e:	bf af       	std	Y+63, r27	; 0x3f
    1870:	ae af       	std	Y+62, r26	; 0x3e
    1872:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1874:	a7 96       	adiw	r28, 0x27	; 39
    1876:	ae ad       	ldd	r26, Y+62	; 0x3e
    1878:	bf ad       	ldd	r27, Y+63	; 0x3f
    187a:	a7 97       	sbiw	r28, 0x27	; 39
    187c:	0d 93       	st	X+, r16
    187e:	1d 93       	st	X+, r17
    1880:	a7 96       	adiw	r28, 0x27	; 39
    1882:	bf af       	std	Y+63, r27	; 0x3f
    1884:	ae af       	std	Y+62, r26	; 0x3e
    1886:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1888:	0f 5f       	subi	r16, 0xFF	; 255
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	b4 e0       	ldi	r27, 0x04	; 4
    188e:	2b 0e       	add	r2, r27
    1890:	31 1c       	adc	r3, r1
    1892:	e4 e0       	ldi	r30, 0x04	; 4
    1894:	ae 0e       	add	r10, r30
    1896:	b1 1c       	adc	r11, r1
    1898:	f4 e0       	ldi	r31, 0x04	; 4
    189a:	8f 0e       	add	r8, r31
    189c:	91 1c       	adc	r9, r1
    189e:	04 30       	cpi	r16, 0x04	; 4
    18a0:	11 05       	cpc	r17, r1
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <localization+0x340>
    18a4:	5a cf       	rjmp	.-332    	; 0x175a <localization+0x1f4>
    18a6:	e9 96       	adiw	r28, 0x39	; 57
    18a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    18aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    18ac:	e9 97       	sbiw	r28, 0x39	; 57
    18ae:	e7 96       	adiw	r28, 0x37	; 55
    18b0:	2e ad       	ldd	r18, Y+62	; 0x3e
    18b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    18b4:	e7 97       	sbiw	r28, 0x37	; 55
    18b6:	82 1b       	sub	r24, r18
    18b8:	93 0b       	sbc	r25, r19
    18ba:	dc 01       	movw	r26, r24
    18bc:	14 96       	adiw	r26, 0x04	; 4
    18be:	e9 96       	adiw	r28, 0x39	; 57
    18c0:	bf af       	std	Y+63, r27	; 0x3f
    18c2:	ae af       	std	Y+62, r26	; 0x3e
    18c4:	e9 97       	sbiw	r28, 0x39	; 57
    18c6:	eb 96       	adiw	r28, 0x3b	; 59
    18c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    18ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    18cc:	eb 97       	sbiw	r28, 0x3b	; 59
    18ce:	34 96       	adiw	r30, 0x04	; 4
    18d0:	eb 96       	adiw	r28, 0x3b	; 59
    18d2:	ff af       	std	Y+63, r31	; 0x3f
    18d4:	ee af       	std	Y+62, r30	; 0x3e
    18d6:	eb 97       	sbiw	r28, 0x3b	; 59
    18d8:	e3 96       	adiw	r28, 0x33	; 51
    18da:	2e ad       	ldd	r18, Y+62	; 0x3e
    18dc:	3f ad       	ldd	r19, Y+63	; 0x3f
    18de:	e3 97       	sbiw	r28, 0x33	; 51
    18e0:	2c 5f       	subi	r18, 0xFC	; 252
    18e2:	3f 4f       	sbci	r19, 0xFF	; 255
    18e4:	e3 96       	adiw	r28, 0x33	; 51
    18e6:	3f af       	std	Y+63, r19	; 0x3f
    18e8:	2e af       	std	Y+62, r18	; 0x3e
    18ea:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    18ec:	e7 96       	adiw	r28, 0x37	; 55
    18ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    18f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    18f2:	e7 97       	sbiw	r28, 0x37	; 55
    18f4:	03 97       	sbiw	r24, 0x03	; 3
    18f6:	49 f0       	breq	.+18     	; 0x190a <localization+0x3a4>
    18f8:	e7 96       	adiw	r28, 0x37	; 55
    18fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    18fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    18fe:	e7 97       	sbiw	r28, 0x37	; 55
    1900:	ab 96       	adiw	r28, 0x2b	; 43
    1902:	bf af       	std	Y+63, r27	; 0x3f
    1904:	ae af       	std	Y+62, r26	; 0x3e
    1906:	ab 97       	sbiw	r28, 0x2b	; 43
    1908:	d6 ce       	rjmp	.-596    	; 0x16b6 <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    190a:	e9 96       	adiw	r28, 0x39	; 57
    190c:	ee ad       	ldd	r30, Y+62	; 0x3e
    190e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1910:	e9 97       	sbiw	r28, 0x39	; 57
    1912:	1e 16       	cp	r1, r30
    1914:	1f 06       	cpc	r1, r31
    1916:	84 f5       	brge	.+96     	; 0x1978 <localization+0x412>
    1918:	6e 01       	movw	r12, r28
    191a:	f1 e2       	ldi	r31, 0x21	; 33
    191c:	cf 0e       	add	r12, r31
    191e:	d1 1c       	adc	r13, r1
    1920:	21 2c       	mov	r2, r1
    1922:	31 2c       	mov	r3, r1
    1924:	00 e0       	ldi	r16, 0x00	; 0
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	e1 2c       	mov	r14, r1
    192a:	f1 2c       	mov	r15, r1
    192c:	e9 96       	adiw	r28, 0x39	; 57
    192e:	ae ac       	ldd	r10, Y+62	; 0x3e
    1930:	bf ac       	ldd	r11, Y+63	; 0x3f
    1932:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    1934:	d6 01       	movw	r26, r12
    1936:	4d 90       	ld	r4, X+
    1938:	5d 90       	ld	r5, X+
    193a:	6d 90       	ld	r6, X+
    193c:	7d 90       	ld	r7, X+
    193e:	6d 01       	movw	r12, r26
    1940:	b8 01       	movw	r22, r16
    1942:	88 27       	eor	r24, r24
    1944:	77 fd       	sbrc	r23, 7
    1946:	80 95       	com	r24
    1948:	98 2f       	mov	r25, r24
    194a:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
    194e:	9b 01       	movw	r18, r22
    1950:	ac 01       	movw	r20, r24
    1952:	c3 01       	movw	r24, r6
    1954:	b2 01       	movw	r22, r4
    1956:	0e 94 39 1c 	call	0x3872	; 0x3872 <__gesf2>
    195a:	18 16       	cp	r1, r24
    195c:	34 f4       	brge	.+12     	; 0x196a <localization+0x404>
			indmax = i;
			dmax = d[i];
    195e:	c3 01       	movw	r24, r6
    1960:	b2 01       	movw	r22, r4
    1962:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1966:	8b 01       	movw	r16, r22
    1968:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    196a:	bf ef       	ldi	r27, 0xFF	; 255
    196c:	eb 1a       	sub	r14, r27
    196e:	fb 0a       	sbc	r15, r27
    1970:	ea 14       	cp	r14, r10
    1972:	fb 04       	cpc	r15, r11
    1974:	f9 f6       	brne	.-66     	; 0x1934 <localization+0x3ce>
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <localization+0x41a>
    1978:	21 2c       	mov	r2, r1
    197a:	31 2c       	mov	r3, r1
    197c:	00 e0       	ldi	r16, 0x00	; 0
    197e:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1980:	8a e2       	ldi	r24, 0x2A	; 42
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(dmax);
    1988:	c8 01       	movw	r24, r16
    198a:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    198e:	88 e2       	ldi	r24, 0x28	; 40
    1990:	92 e0       	ldi	r25, 0x02	; 2
    1992:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1996:	e9 96       	adiw	r28, 0x39	; 57
    1998:	ee ad       	ldd	r30, Y+62	; 0x3e
    199a:	ff ad       	ldd	r31, Y+63	; 0x3f
    199c:	e9 97       	sbiw	r28, 0x39	; 57
    199e:	1e 16       	cp	r1, r30
    19a0:	1f 06       	cpc	r1, r31
    19a2:	dc f5       	brge	.+118    	; 0x1a1a <localization+0x4b4>
    19a4:	6e 01       	movw	r12, r28
    19a6:	f1 e2       	ldi	r31, 0x21	; 33
    19a8:	cf 0e       	add	r12, r31
    19aa:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    19ac:	a3 96       	adiw	r28, 0x23	; 35
    19ae:	1f ae       	std	Y+63, r1	; 0x3f
    19b0:	1e ae       	std	Y+62, r1	; 0x3e
    19b2:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    19b4:	0f 2e       	mov	r0, r31
    19b6:	f0 e1       	ldi	r31, 0x10	; 16
    19b8:	af 2e       	mov	r10, r31
    19ba:	f7 e2       	ldi	r31, 0x27	; 39
    19bc:	bf 2e       	mov	r11, r31
    19be:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    19c0:	e1 2c       	mov	r14, r1
    19c2:	f1 2c       	mov	r15, r1
    19c4:	48 01       	movw	r8, r16
    19c6:	e9 96       	adiw	r28, 0x39	; 57
    19c8:	0e ad       	ldd	r16, Y+62	; 0x3e
    19ca:	1f ad       	ldd	r17, Y+63	; 0x3f
    19cc:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    19ce:	d6 01       	movw	r26, r12
    19d0:	4d 90       	ld	r4, X+
    19d2:	5d 90       	ld	r5, X+
    19d4:	6d 90       	ld	r6, X+
    19d6:	7d 90       	ld	r7, X+
    19d8:	6d 01       	movw	r12, r26
    19da:	b5 01       	movw	r22, r10
    19dc:	88 27       	eor	r24, r24
    19de:	77 fd       	sbrc	r23, 7
    19e0:	80 95       	com	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
    19e8:	9b 01       	movw	r18, r22
    19ea:	ac 01       	movw	r20, r24
    19ec:	c3 01       	movw	r24, r6
    19ee:	b2 01       	movw	r22, r4
    19f0:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	4c f4       	brge	.+18     	; 0x1a0a <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    19f8:	c3 01       	movw	r24, r6
    19fa:	b2 01       	movw	r22, r4
    19fc:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1a00:	5b 01       	movw	r10, r22
    1a02:	a3 96       	adiw	r28, 0x23	; 35
    1a04:	ff ae       	std	Y+63, r15	; 0x3f
    1a06:	ee ae       	std	Y+62, r14	; 0x3e
    1a08:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1a0a:	bf ef       	ldi	r27, 0xFF	; 255
    1a0c:	eb 1a       	sub	r14, r27
    1a0e:	fb 0a       	sbc	r15, r27
    1a10:	e0 16       	cp	r14, r16
    1a12:	f1 06       	cpc	r15, r17
    1a14:	e1 f6       	brne	.-72     	; 0x19ce <localization+0x468>
    1a16:	84 01       	movw	r16, r8
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1a1a:	a3 96       	adiw	r28, 0x23	; 35
    1a1c:	1f ae       	std	Y+63, r1	; 0x3f
    1a1e:	1e ae       	std	Y+62, r1	; 0x3e
    1a20:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1a22:	80 90 0e 01 	lds	r8, 0x010E
    1a26:	90 90 0f 01 	lds	r9, 0x010F
    1a2a:	a0 90 10 01 	lds	r10, 0x0110
    1a2e:	b0 90 11 01 	lds	r11, 0x0111
    1a32:	b8 01       	movw	r22, r16
    1a34:	88 27       	eor	r24, r24
    1a36:	77 fd       	sbrc	r23, 7
    1a38:	80 95       	com	r24
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
    1a40:	a5 01       	movw	r20, r10
    1a42:	94 01       	movw	r18, r8
    1a44:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1a48:	2b 01       	movw	r4, r22
    1a4a:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    1a4c:	c0 90 12 01 	lds	r12, 0x0112
    1a50:	d0 90 13 01 	lds	r13, 0x0113
    1a54:	e0 90 14 01 	lds	r14, 0x0114
    1a58:	f0 90 15 01 	lds	r15, 0x0115
    1a5c:	e2 e0       	ldi	r30, 0x02	; 2
    1a5e:	f1 e0       	ldi	r31, 0x01	; 1
    1a60:	ab 96       	adiw	r28, 0x2b	; 43
    1a62:	ff af       	std	Y+63, r31	; 0x3f
    1a64:	ee af       	std	Y+62, r30	; 0x3e
    1a66:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1a68:	a7 96       	adiw	r28, 0x27	; 39
    1a6a:	1f ae       	std	Y+63, r1	; 0x3f
    1a6c:	1e ae       	std	Y+62, r1	; 0x3e
    1a6e:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    1a70:	01 e0       	ldi	r16, 0x01	; 1
    1a72:	10 e0       	ldi	r17, 0x00	; 0
    1a74:	af 96       	adiw	r28, 0x2f	; 47
    1a76:	3f ae       	std	Y+63, r3	; 0x3f
    1a78:	2e ae       	std	Y+62, r2	; 0x3e
    1a7a:	af 97       	sbiw	r28, 0x2f	; 47
    1a7c:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    1a7e:	d1 01       	movw	r26, r2
    1a80:	2d 91       	ld	r18, X+
    1a82:	3d 91       	ld	r19, X+
    1a84:	4d 91       	ld	r20, X+
    1a86:	5d 91       	ld	r21, X+
    1a88:	1d 01       	movw	r2, r26
    1a8a:	c3 01       	movw	r24, r6
    1a8c:	b2 01       	movw	r22, r4
    1a8e:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1a92:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    1a96:	9b 01       	movw	r18, r22
    1a98:	77 23       	and	r23, r23
    1a9a:	24 f4       	brge	.+8      	; 0x1aa4 <localization+0x53e>
    1a9c:	22 27       	eor	r18, r18
    1a9e:	33 27       	eor	r19, r19
    1aa0:	26 1b       	sub	r18, r22
    1aa2:	37 0b       	sbc	r19, r23
    1aa4:	b9 01       	movw	r22, r18
    1aa6:	88 27       	eor	r24, r24
    1aa8:	77 fd       	sbrc	r23, 7
    1aaa:	80 95       	com	r24
    1aac:	98 2f       	mov	r25, r24
    1aae:	0e 94 49 1b 	call	0x3692	; 0x3692 <__floatsisf>
    1ab2:	a7 01       	movw	r20, r14
    1ab4:	96 01       	movw	r18, r12
    1ab6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__cmpsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	24 f4       	brge	.+8      	; 0x1ac6 <localization+0x560>
    1abe:	a7 96       	adiw	r28, 0x27	; 39
    1ac0:	1f af       	std	Y+63, r17	; 0x3f
    1ac2:	0e af       	std	Y+62, r16	; 0x3e
    1ac4:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1ac6:	0f 5f       	subi	r16, 0xFF	; 255
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	04 30       	cpi	r16, 0x04	; 4
    1acc:	11 05       	cpc	r17, r1
    1ace:	b9 f6       	brne	.-82     	; 0x1a7e <localization+0x518>
    1ad0:	af 96       	adiw	r28, 0x2f	; 47
    1ad2:	2e ac       	ldd	r2, Y+62	; 0x3e
    1ad4:	3f ac       	ldd	r3, Y+63	; 0x3f
    1ad6:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    1ad8:	65 96       	adiw	r28, 0x15	; 21
    1ada:	1c ae       	std	Y+60, r1	; 0x3c
    1adc:	1d ae       	std	Y+61, r1	; 0x3d
    1ade:	1e ae       	std	Y+62, r1	; 0x3e
    1ae0:	1f ae       	std	Y+63, r1	; 0x3f
    1ae2:	65 97       	sbiw	r28, 0x15	; 21
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e8       	ldi	r26, 0x80	; 128
    1aea:	bf e3       	ldi	r27, 0x3F	; 63
    1aec:	69 96       	adiw	r28, 0x19	; 25
    1aee:	8c af       	std	Y+60, r24	; 0x3c
    1af0:	9d af       	std	Y+61, r25	; 0x3d
    1af2:	ae af       	std	Y+62, r26	; 0x3e
    1af4:	bf af       	std	Y+63, r27	; 0x3f
    1af6:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1af8:	a7 96       	adiw	r28, 0x27	; 39
    1afa:	ee ad       	ldd	r30, Y+62	; 0x3e
    1afc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1afe:	a7 97       	sbiw	r28, 0x27	; 39
    1b00:	e2 30       	cpi	r30, 0x02	; 2
    1b02:	f1 05       	cpc	r31, r1
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <localization+0x5a6>
    1b06:	33 97       	sbiw	r30, 0x03	; 3
    1b08:	51 f1       	breq	.+84     	; 0x1b5e <localization+0x5f8>
    1b0a:	5a c0       	rjmp	.+180    	; 0x1bc0 <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1b0c:	a5 01       	movw	r20, r10
    1b0e:	94 01       	movw	r18, r8
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	88 e6       	ldi	r24, 0x68	; 104
    1b16:	91 e4       	ldi	r25, 0x41	; 65
    1b18:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3>
    1b1c:	e1 96       	adiw	r28, 0x31	; 49
    1b1e:	6c af       	std	Y+60, r22	; 0x3c
    1b20:	7d af       	std	Y+61, r23	; 0x3d
    1b22:	8e af       	std	Y+62, r24	; 0x3e
    1b24:	9f af       	std	Y+63, r25	; 0x3f
    1b26:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    1b28:	84 e9       	ldi	r24, 0x94	; 148
    1b2a:	97 e8       	ldi	r25, 0x87	; 135
    1b2c:	a5 ee       	ldi	r26, 0xE5	; 229
    1b2e:	be e3       	ldi	r27, 0x3E	; 62
    1b30:	65 96       	adiw	r28, 0x15	; 21
    1b32:	8c af       	std	Y+60, r24	; 0x3c
    1b34:	9d af       	std	Y+61, r25	; 0x3d
    1b36:	ae af       	std	Y+62, r26	; 0x3e
    1b38:	bf af       	std	Y+63, r27	; 0x3f
    1b3a:	65 97       	sbiw	r28, 0x15	; 21
    1b3c:	81 ea       	ldi	r24, 0xA1	; 161
    1b3e:	96 ed       	ldi	r25, 0xD6	; 214
    1b40:	a4 e6       	ldi	r26, 0x64	; 100
    1b42:	bf eb       	ldi	r27, 0xBF	; 191
    1b44:	69 96       	adiw	r28, 0x19	; 25
    1b46:	8c af       	std	Y+60, r24	; 0x3c
    1b48:	9d af       	std	Y+61, r25	; 0x3d
    1b4a:	ae af       	std	Y+62, r26	; 0x3e
    1b4c:	bf af       	std	Y+63, r27	; 0x3f
    1b4e:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1b50:	e5 96       	adiw	r28, 0x35	; 53
    1b52:	1c ae       	std	Y+60, r1	; 0x3c
    1b54:	1d ae       	std	Y+61, r1	; 0x3d
    1b56:	1e ae       	std	Y+62, r1	; 0x3e
    1b58:	1f ae       	std	Y+63, r1	; 0x3f
    1b5a:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1b5c:	45 c0       	rjmp	.+138    	; 0x1be8 <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1b5e:	a5 01       	movw	r20, r10
    1b60:	94 01       	movw	r18, r8
    1b62:	61 ee       	ldi	r22, 0xE1	; 225
    1b64:	7a e7       	ldi	r23, 0x7A	; 122
    1b66:	8a e3       	ldi	r24, 0x3A	; 58
    1b68:	91 e4       	ldi	r25, 0x41	; 65
    1b6a:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3>
    1b6e:	e5 96       	adiw	r28, 0x35	; 53
    1b70:	6c af       	std	Y+60, r22	; 0x3c
    1b72:	7d af       	std	Y+61, r23	; 0x3d
    1b74:	8e af       	std	Y+62, r24	; 0x3e
    1b76:	9f af       	std	Y+63, r25	; 0x3f
    1b78:	e5 97       	sbiw	r28, 0x35	; 53
    1b7a:	a5 01       	movw	r20, r10
    1b7c:	94 01       	movw	r18, r8
    1b7e:	63 e2       	ldi	r22, 0x23	; 35
    1b80:	7b ed       	ldi	r23, 0xDB	; 219
    1b82:	8b e0       	ldi	r24, 0x0B	; 11
    1b84:	91 ec       	ldi	r25, 0xC1	; 193
    1b86:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3>
    1b8a:	e1 96       	adiw	r28, 0x31	; 49
    1b8c:	6c af       	std	Y+60, r22	; 0x3c
    1b8e:	7d af       	std	Y+61, r23	; 0x3d
    1b90:	8e af       	std	Y+62, r24	; 0x3e
    1b92:	9f af       	std	Y+63, r25	; 0x3f
    1b94:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1b96:	86 e6       	ldi	r24, 0x66	; 102
    1b98:	96 e6       	ldi	r25, 0x66	; 102
    1b9a:	a6 e7       	ldi	r26, 0x76	; 118
    1b9c:	bf eb       	ldi	r27, 0xBF	; 191
    1b9e:	65 96       	adiw	r28, 0x15	; 21
    1ba0:	8c af       	std	Y+60, r24	; 0x3c
    1ba2:	9d af       	std	Y+61, r25	; 0x3d
    1ba4:	ae af       	std	Y+62, r26	; 0x3e
    1ba6:	bf af       	std	Y+63, r27	; 0x3f
    1ba8:	65 97       	sbiw	r28, 0x15	; 21
    1baa:	8f e9       	ldi	r24, 0x9F	; 159
    1bac:	9d ec       	ldi	r25, 0xCD	; 205
    1bae:	aa e8       	ldi	r26, 0x8A	; 138
    1bb0:	be e3       	ldi	r27, 0x3E	; 62
    1bb2:	69 96       	adiw	r28, 0x19	; 25
    1bb4:	8c af       	std	Y+60, r24	; 0x3c
    1bb6:	9d af       	std	Y+61, r25	; 0x3d
    1bb8:	ae af       	std	Y+62, r26	; 0x3e
    1bba:	bf af       	std	Y+63, r27	; 0x3f
    1bbc:	69 97       	sbiw	r28, 0x19	; 25
			break;
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    1bc0:	a7 96       	adiw	r28, 0x27	; 39
    1bc2:	2e ad       	ldd	r18, Y+62	; 0x3e
    1bc4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1bc6:	a7 97       	sbiw	r28, 0x27	; 39
    1bc8:	12 16       	cp	r1, r18
    1bca:	13 06       	cpc	r1, r19
    1bcc:	0c f0       	brlt	.+2      	; 0x1bd0 <localization+0x66a>
    1bce:	36 c3       	rjmp	.+1644   	; 0x223c <localization+0xcd6>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1bd0:	e5 96       	adiw	r28, 0x35	; 53
    1bd2:	1c ae       	std	Y+60, r1	; 0x3c
    1bd4:	1d ae       	std	Y+61, r1	; 0x3d
    1bd6:	1e ae       	std	Y+62, r1	; 0x3e
    1bd8:	1f ae       	std	Y+63, r1	; 0x3f
    1bda:	e5 97       	sbiw	r28, 0x35	; 53
    1bdc:	e1 96       	adiw	r28, 0x31	; 49
    1bde:	1c ae       	std	Y+60, r1	; 0x3c
    1be0:	1d ae       	std	Y+61, r1	; 0x3d
    1be2:	1e ae       	std	Y+62, r1	; 0x3e
    1be4:	1f ae       	std	Y+63, r1	; 0x3f
    1be6:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    1be8:	f1 01       	movw	r30, r2
    1bea:	ee 0f       	add	r30, r30
    1bec:	ff 1f       	adc	r31, r31
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	8c 0f       	add	r24, r28
    1bf4:	9d 1f       	adc	r25, r29
    1bf6:	e8 0f       	add	r30, r24
    1bf8:	f9 1f       	adc	r31, r25
    1bfa:	00 ad       	ldd	r16, Z+56	; 0x38
    1bfc:	11 ad       	ldd	r17, Z+57	; 0x39
    1bfe:	a3 96       	adiw	r28, 0x23	; 35
    1c00:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c02:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c04:	a3 97       	sbiw	r28, 0x23	; 35
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	e8 0f       	add	r30, r24
    1c0c:	f9 1f       	adc	r31, r25
    1c0e:	80 ad       	ldd	r24, Z+56	; 0x38
    1c10:	91 ad       	ldd	r25, Z+57	; 0x39
    1c12:	80 17       	cp	r24, r16
    1c14:	91 07       	cpc	r25, r17
    1c16:	89 f0       	breq	.+34     	; 0x1c3a <localization+0x6d4>
    1c18:	a3 96       	adiw	r28, 0x23	; 35
    1c1a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c1c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c1e:	a3 97       	sbiw	r28, 0x23	; 35
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	a5 e4       	ldi	r26, 0x45	; 69
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ac 0f       	add	r26, r28
    1c2a:	bd 1f       	adc	r27, r29
    1c2c:	ea 0f       	add	r30, r26
    1c2e:	fb 1f       	adc	r31, r27
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	08 17       	cp	r16, r24
    1c36:	19 07       	cpc	r17, r25
    1c38:	69 f4       	brne	.+26     	; 0x1c54 <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1c3a:	d1 01       	movw	r26, r2
    1c3c:	aa 0f       	add	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	e5 e4       	ldi	r30, 0x45	; 69
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	ec 0f       	add	r30, r28
    1c46:	fd 1f       	adc	r31, r29
    1c48:	ae 0f       	add	r26, r30
    1c4a:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1c4c:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    1c4e:	0d 91       	ld	r16, X+
    1c50:	1c 91       	ld	r17, X
    1c52:	0c c0       	rjmp	.+24     	; 0x1c6c <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    1c54:	f1 01       	movw	r30, r2
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	25 e4       	ldi	r18, 0x45	; 69
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	2c 0f       	add	r18, r28
    1c60:	3d 1f       	adc	r19, r29
    1c62:	e2 0f       	add	r30, r18
    1c64:	f3 1f       	adc	r31, r19
    1c66:	01 90       	ld	r0, Z+
    1c68:	f0 81       	ld	r31, Z
    1c6a:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1c6c:	a7 96       	adiw	r28, 0x27	; 39
    1c6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c70:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c72:	a7 97       	sbiw	r28, 0x27	; 39
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <localization+0x714>
    1c78:	45 c0       	rjmp	.+138    	; 0x1d04 <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    1c7a:	6f 01       	movw	r12, r30
    1c7c:	cc 0c       	add	r12, r12
    1c7e:	dd 1c       	adc	r13, r13
    1c80:	cc 0c       	add	r12, r12
    1c82:	dd 1c       	adc	r13, r13
    1c84:	a1 e0       	ldi	r26, 0x01	; 1
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ac 0f       	add	r26, r28
    1c8a:	bd 1f       	adc	r27, r29
    1c8c:	ca 0e       	add	r12, r26
    1c8e:	db 1e       	adc	r13, r27
    1c90:	78 01       	movw	r14, r16
    1c92:	ee 0c       	add	r14, r14
    1c94:	ff 1c       	adc	r15, r15
    1c96:	ee 0c       	add	r14, r14
    1c98:	ff 1c       	adc	r15, r15
    1c9a:	ea 0e       	add	r14, r26
    1c9c:	fb 1e       	adc	r15, r27
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	20 81       	ld	r18, Z
    1ca2:	31 81       	ldd	r19, Z+1	; 0x01
    1ca4:	42 81       	ldd	r20, Z+2	; 0x02
    1ca6:	53 81       	ldd	r21, Z+3	; 0x03
    1ca8:	d6 01       	movw	r26, r12
    1caa:	6d 91       	ld	r22, X+
    1cac:	7d 91       	ld	r23, X+
    1cae:	8d 91       	ld	r24, X+
    1cb0:	9c 91       	ld	r25, X
    1cb2:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1cc2:	ad 96       	adiw	r28, 0x2d	; 45
    1cc4:	6c af       	std	Y+60, r22	; 0x3c
    1cc6:	7d af       	std	Y+61, r23	; 0x3d
    1cc8:	8e af       	std	Y+62, r24	; 0x3e
    1cca:	9f af       	std	Y+63, r25	; 0x3f
    1ccc:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    1cce:	f7 01       	movw	r30, r14
    1cd0:	20 89       	ldd	r18, Z+16	; 0x10
    1cd2:	31 89       	ldd	r19, Z+17	; 0x11
    1cd4:	42 89       	ldd	r20, Z+18	; 0x12
    1cd6:	53 89       	ldd	r21, Z+19	; 0x13
    1cd8:	d6 01       	movw	r26, r12
    1cda:	50 96       	adiw	r26, 0x10	; 16
    1cdc:	6d 91       	ld	r22, X+
    1cde:	7d 91       	ld	r23, X+
    1ce0:	8d 91       	ld	r24, X+
    1ce2:	9c 91       	ld	r25, X
    1ce4:	53 97       	sbiw	r26, 0x13	; 19
    1ce6:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1cf6:	a9 96       	adiw	r28, 0x29	; 41
    1cf8:	6c af       	std	Y+60, r22	; 0x3c
    1cfa:	7d af       	std	Y+61, r23	; 0x3d
    1cfc:	8e af       	std	Y+62, r24	; 0x3e
    1cfe:	9f af       	std	Y+63, r25	; 0x3f
    1d00:	a9 97       	sbiw	r28, 0x29	; 41
    1d02:	1e c0       	rjmp	.+60     	; 0x1d40 <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	ee 0f       	add	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	21 e0       	ldi	r18, 0x01	; 1
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	2c 0f       	add	r18, r28
    1d12:	3d 1f       	adc	r19, r29
    1d14:	e2 0f       	add	r30, r18
    1d16:	f3 1f       	adc	r31, r19
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	a2 81       	ldd	r26, Z+2	; 0x02
    1d1e:	b3 81       	ldd	r27, Z+3	; 0x03
    1d20:	ad 96       	adiw	r28, 0x2d	; 45
    1d22:	8c af       	std	Y+60, r24	; 0x3c
    1d24:	9d af       	std	Y+61, r25	; 0x3d
    1d26:	ae af       	std	Y+62, r26	; 0x3e
    1d28:	bf af       	std	Y+63, r27	; 0x3f
    1d2a:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    1d2c:	80 89       	ldd	r24, Z+16	; 0x10
    1d2e:	91 89       	ldd	r25, Z+17	; 0x11
    1d30:	a2 89       	ldd	r26, Z+18	; 0x12
    1d32:	b3 89       	ldd	r27, Z+19	; 0x13
    1d34:	a9 96       	adiw	r28, 0x29	; 41
    1d36:	8c af       	std	Y+60, r24	; 0x3c
    1d38:	9d af       	std	Y+61, r25	; 0x3d
    1d3a:	ae af       	std	Y+62, r26	; 0x3e
    1d3c:	bf af       	std	Y+63, r27	; 0x3f
    1d3e:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    1d40:	00 0f       	add	r16, r16
    1d42:	11 1f       	adc	r17, r17
    1d44:	00 0f       	add	r16, r16
    1d46:	11 1f       	adc	r17, r17
    1d48:	a1 e0       	ldi	r26, 0x01	; 1
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ac 0f       	add	r26, r28
    1d4e:	bd 1f       	adc	r27, r29
    1d50:	0a 0f       	add	r16, r26
    1d52:	1b 1f       	adc	r17, r27
    1d54:	ad 96       	adiw	r28, 0x2d	; 45
    1d56:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d58:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d5a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d5c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d5e:	ad 97       	sbiw	r28, 0x2d	; 45
    1d60:	f8 01       	movw	r30, r16
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1d6e:	4b 01       	movw	r8, r22
    1d70:	5c 01       	movw	r10, r24
    1d72:	a9 96       	adiw	r28, 0x29	; 41
    1d74:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d76:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d78:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d7c:	a9 97       	sbiw	r28, 0x29	; 41
    1d7e:	d8 01       	movw	r26, r16
    1d80:	50 96       	adiw	r26, 0x10	; 16
    1d82:	6d 91       	ld	r22, X+
    1d84:	7d 91       	ld	r23, X+
    1d86:	8d 91       	ld	r24, X+
    1d88:	9c 91       	ld	r25, X
    1d8a:	53 97       	sbiw	r26, 0x13	; 19
    1d8c:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1d90:	6b 01       	movw	r12, r22
    1d92:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    1d94:	a5 01       	movw	r20, r10
    1d96:	94 01       	movw	r18, r8
    1d98:	c5 01       	movw	r24, r10
    1d9a:	b4 01       	movw	r22, r8
    1d9c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1da0:	2b 01       	movw	r4, r22
    1da2:	3c 01       	movw	r6, r24
    1da4:	a7 01       	movw	r20, r14
    1da6:	96 01       	movw	r18, r12
    1da8:	c7 01       	movw	r24, r14
    1daa:	b6 01       	movw	r22, r12
    1dac:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1db0:	9b 01       	movw	r18, r22
    1db2:	ac 01       	movw	r20, r24
    1db4:	c3 01       	movw	r24, r6
    1db6:	b2 01       	movw	r22, r4
    1db8:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    1dbc:	0e 94 a4 1c 	call	0x3948	; 0x3948 <sqrt>
    1dc0:	2b 01       	movw	r4, r22
    1dc2:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    1dc4:	9b 01       	movw	r18, r22
    1dc6:	ac 01       	movw	r20, r24
    1dc8:	c5 01       	movw	r24, r10
    1dca:	b4 01       	movw	r22, r8
    1dcc:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3>
    1dd0:	4b 01       	movw	r8, r22
    1dd2:	5c 01       	movw	r10, r24
    1dd4:	6d 96       	adiw	r28, 0x1d	; 29
    1dd6:	6c af       	std	Y+60, r22	; 0x3c
    1dd8:	7d af       	std	Y+61, r23	; 0x3d
    1dda:	8e af       	std	Y+62, r24	; 0x3e
    1ddc:	9f af       	std	Y+63, r25	; 0x3f
    1dde:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    1de0:	a3 01       	movw	r20, r6
    1de2:	92 01       	movw	r18, r4
    1de4:	c7 01       	movw	r24, r14
    1de6:	b6 01       	movw	r22, r12
    1de8:	0e 94 ae 1a 	call	0x355c	; 0x355c <__divsf3>
    1dec:	6b 01       	movw	r12, r22
    1dee:	7c 01       	movw	r14, r24
    1df0:	a1 96       	adiw	r28, 0x21	; 33
    1df2:	6c af       	std	Y+60, r22	; 0x3c
    1df4:	7d af       	std	Y+61, r23	; 0x3d
    1df6:	8e af       	std	Y+62, r24	; 0x3e
    1df8:	9f af       	std	Y+63, r25	; 0x3f
    1dfa:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    1dfc:	65 96       	adiw	r28, 0x15	; 21
    1dfe:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e00:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e02:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e04:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e06:	65 97       	sbiw	r28, 0x15	; 21
    1e08:	c5 01       	movw	r24, r10
    1e0a:	b4 01       	movw	r22, r8
    1e0c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1e10:	4b 01       	movw	r8, r22
    1e12:	5c 01       	movw	r10, r24
    1e14:	69 96       	adiw	r28, 0x19	; 25
    1e16:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e18:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e1a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e1c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e1e:	69 97       	sbiw	r28, 0x19	; 25
    1e20:	c7 01       	movw	r24, r14
    1e22:	b6 01       	movw	r22, r12
    1e24:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1e28:	9b 01       	movw	r18, r22
    1e2a:	ac 01       	movw	r20, r24
    1e2c:	c5 01       	movw	r24, r10
    1e2e:	b4 01       	movw	r22, r8
    1e30:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    1e34:	2b 01       	movw	r4, r22
    1e36:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    1e38:	9b 01       	movw	r18, r22
    1e3a:	ac 01       	movw	r20, r24
    1e3c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1e40:	9b 01       	movw	r18, r22
    1e42:	ac 01       	movw	r20, r24
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	80 e8       	ldi	r24, 0x80	; 128
    1e4a:	9f e3       	ldi	r25, 0x3F	; 63
    1e4c:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1e50:	0e 94 a4 1c 	call	0x3948	; 0x3948 <sqrt>
    1e54:	a5 96       	adiw	r28, 0x25	; 37
    1e56:	6c af       	std	Y+60, r22	; 0x3c
    1e58:	7d af       	std	Y+61, r23	; 0x3d
    1e5a:	8e af       	std	Y+62, r24	; 0x3e
    1e5c:	9f af       	std	Y+63, r25	; 0x3f
    1e5e:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    1e60:	fe 01       	movw	r30, r28
    1e62:	ef 5a       	subi	r30, 0xAF	; 175
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	7f 01       	movw	r14, r30
    1e68:	8e 01       	movw	r16, r28
    1e6a:	07 5a       	subi	r16, 0xA7	; 167
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	9b 01       	movw	r18, r22
    1e70:	ac 01       	movw	r20, r24
    1e72:	c3 01       	movw	r24, r6
    1e74:	b2 01       	movw	r22, r4
    1e76:	0e 94 1c 06 	call	0xc38	; 0xc38 <find_sign>
    1e7a:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <localization+0x91e>
    1e82:	a1 c0       	rjmp	.+322    	; 0x1fc6 <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    1e84:	0f 2e       	mov	r0, r31
    1e86:	fc e1       	ldi	r31, 0x1C	; 28
    1e88:	af 2e       	mov	r10, r31
    1e8a:	f1 e0       	ldi	r31, 0x01	; 1
    1e8c:	bf 2e       	mov	r11, r31
    1e8e:	f0 2d       	mov	r31, r0
    1e90:	d5 01       	movw	r26, r10
    1e92:	2d 91       	ld	r18, X+
    1e94:	3d 91       	ld	r19, X+
    1e96:	4d 91       	ld	r20, X+
    1e98:	5c 91       	ld	r21, X
    1e9a:	ad 96       	adiw	r28, 0x2d	; 45
    1e9c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e9e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ea0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ea2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ea4:	ad 97       	sbiw	r28, 0x2d	; 45
    1ea6:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1eaa:	a3 01       	movw	r20, r6
    1eac:	92 01       	movw	r18, r4
    1eae:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1eb2:	9b 01       	movw	r18, r22
    1eb4:	ac 01       	movw	r20, r24
    1eb6:	e5 96       	adiw	r28, 0x35	; 53
    1eb8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eba:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ebc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ebe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ec0:	e5 97       	sbiw	r28, 0x35	; 53
    1ec2:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1ec6:	6b 01       	movw	r12, r22
    1ec8:	7c 01       	movw	r14, r24
    1eca:	00 e2       	ldi	r16, 0x20	; 32
    1ecc:	11 e0       	ldi	r17, 0x01	; 1
    1ece:	f8 01       	movw	r30, r16
    1ed0:	20 81       	ld	r18, Z
    1ed2:	31 81       	ldd	r19, Z+1	; 0x01
    1ed4:	42 81       	ldd	r20, Z+2	; 0x02
    1ed6:	53 81       	ldd	r21, Z+3	; 0x03
    1ed8:	a9 96       	adiw	r28, 0x29	; 41
    1eda:	6c ad       	ldd	r22, Y+60	; 0x3c
    1edc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ede:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ee0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ee2:	a9 97       	sbiw	r28, 0x29	; 41
    1ee4:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1ee8:	a5 96       	adiw	r28, 0x25	; 37
    1eea:	2c ad       	ldd	r18, Y+60	; 0x3c
    1eec:	3d ad       	ldd	r19, Y+61	; 0x3d
    1eee:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ef0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ef2:	a5 97       	sbiw	r28, 0x25	; 37
    1ef4:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1ef8:	9b 01       	movw	r18, r22
    1efa:	ac 01       	movw	r20, r24
    1efc:	c7 01       	movw	r24, r14
    1efe:	b6 01       	movw	r22, r12
    1f00:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    1f04:	ed 96       	adiw	r28, 0x3d	; 61
    1f06:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f08:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f0a:	ed 97       	sbiw	r28, 0x3d	; 61
    1f0c:	6d 93       	st	X+, r22
    1f0e:	7d 93       	st	X+, r23
    1f10:	8d 93       	st	X+, r24
    1f12:	9c 93       	st	X, r25
    1f14:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    1f16:	f8 01       	movw	r30, r16
    1f18:	20 81       	ld	r18, Z
    1f1a:	31 81       	ldd	r19, Z+1	; 0x01
    1f1c:	42 81       	ldd	r20, Z+2	; 0x02
    1f1e:	53 81       	ldd	r21, Z+3	; 0x03
    1f20:	a9 96       	adiw	r28, 0x29	; 41
    1f22:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f24:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f26:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f28:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f2a:	a9 97       	sbiw	r28, 0x29	; 41
    1f2c:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1f30:	a3 01       	movw	r20, r6
    1f32:	92 01       	movw	r18, r4
    1f34:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1f38:	9b 01       	movw	r18, r22
    1f3a:	ac 01       	movw	r20, r24
    1f3c:	e1 96       	adiw	r28, 0x31	; 49
    1f3e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f40:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f42:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f44:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f46:	e1 97       	sbiw	r28, 0x31	; 49
    1f48:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1f4c:	6b 01       	movw	r12, r22
    1f4e:	7c 01       	movw	r14, r24
    1f50:	d5 01       	movw	r26, r10
    1f52:	2d 91       	ld	r18, X+
    1f54:	3d 91       	ld	r19, X+
    1f56:	4d 91       	ld	r20, X+
    1f58:	5c 91       	ld	r21, X
    1f5a:	ad 96       	adiw	r28, 0x2d	; 45
    1f5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f64:	ad 97       	sbiw	r28, 0x2d	; 45
    1f66:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1f6a:	a5 96       	adiw	r28, 0x25	; 37
    1f6c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f6e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f70:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f72:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f74:	a5 97       	sbiw	r28, 0x25	; 37
    1f76:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1f7a:	9b 01       	movw	r18, r22
    1f7c:	ac 01       	movw	r20, r24
    1f7e:	c7 01       	movw	r24, r14
    1f80:	b6 01       	movw	r22, r12
    1f82:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1f86:	ed 96       	adiw	r28, 0x3d	; 61
    1f88:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f8c:	ed 97       	sbiw	r28, 0x3d	; 61
    1f8e:	64 83       	std	Z+4, r22	; 0x04
    1f90:	75 83       	std	Z+5, r23	; 0x05
    1f92:	86 83       	std	Z+6, r24	; 0x06
    1f94:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    1f96:	ef 96       	adiw	r28, 0x3f	; 63
    1f98:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f9a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f9c:	ef 97       	sbiw	r28, 0x3f	; 63
    1f9e:	4d 92       	st	X+, r4
    1fa0:	5d 92       	st	X+, r5
    1fa2:	6d 92       	st	X+, r6
    1fa4:	7c 92       	st	X, r7
    1fa6:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    1fa8:	a5 96       	adiw	r28, 0x25	; 37
    1faa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fac:	9d ad       	ldd	r25, Y+61	; 0x3d
    1fae:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fb0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fb2:	a5 97       	sbiw	r28, 0x25	; 37
    1fb4:	ef 96       	adiw	r28, 0x3f	; 63
    1fb6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fb8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fba:	ef 97       	sbiw	r28, 0x3f	; 63
    1fbc:	84 83       	std	Z+4, r24	; 0x04
    1fbe:	95 83       	std	Z+5, r25	; 0x05
    1fc0:	a6 83       	std	Z+6, r26	; 0x06
    1fc2:	b7 83       	std	Z+7, r27	; 0x07
    1fc4:	a1 c0       	rjmp	.+322    	; 0x2108 <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    1fc6:	0f 2e       	mov	r0, r31
    1fc8:	fc e1       	ldi	r31, 0x1C	; 28
    1fca:	af 2e       	mov	r10, r31
    1fcc:	f1 e0       	ldi	r31, 0x01	; 1
    1fce:	bf 2e       	mov	r11, r31
    1fd0:	f0 2d       	mov	r31, r0
    1fd2:	d5 01       	movw	r26, r10
    1fd4:	2d 91       	ld	r18, X+
    1fd6:	3d 91       	ld	r19, X+
    1fd8:	4d 91       	ld	r20, X+
    1fda:	5c 91       	ld	r21, X
    1fdc:	ad 96       	adiw	r28, 0x2d	; 45
    1fde:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fe0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fe2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fe4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fe6:	ad 97       	sbiw	r28, 0x2d	; 45
    1fe8:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    1fec:	a3 01       	movw	r20, r6
    1fee:	92 01       	movw	r18, r4
    1ff0:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1ff4:	9b 01       	movw	r18, r22
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	e5 96       	adiw	r28, 0x35	; 53
    1ffa:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ffc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ffe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2000:	9f ad       	ldd	r25, Y+63	; 0x3f
    2002:	e5 97       	sbiw	r28, 0x35	; 53
    2004:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    2008:	6b 01       	movw	r12, r22
    200a:	7c 01       	movw	r14, r24
    200c:	00 e2       	ldi	r16, 0x20	; 32
    200e:	11 e0       	ldi	r17, 0x01	; 1
    2010:	f8 01       	movw	r30, r16
    2012:	20 81       	ld	r18, Z
    2014:	31 81       	ldd	r19, Z+1	; 0x01
    2016:	42 81       	ldd	r20, Z+2	; 0x02
    2018:	53 81       	ldd	r21, Z+3	; 0x03
    201a:	a9 96       	adiw	r28, 0x29	; 41
    201c:	6c ad       	ldd	r22, Y+60	; 0x3c
    201e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2020:	8e ad       	ldd	r24, Y+62	; 0x3e
    2022:	9f ad       	ldd	r25, Y+63	; 0x3f
    2024:	a9 97       	sbiw	r28, 0x29	; 41
    2026:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    202a:	a5 96       	adiw	r28, 0x25	; 37
    202c:	2c ad       	ldd	r18, Y+60	; 0x3c
    202e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2030:	4e ad       	ldd	r20, Y+62	; 0x3e
    2032:	5f ad       	ldd	r21, Y+63	; 0x3f
    2034:	a5 97       	sbiw	r28, 0x25	; 37
    2036:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    203a:	9b 01       	movw	r18, r22
    203c:	ac 01       	movw	r20, r24
    203e:	c7 01       	movw	r24, r14
    2040:	b6 01       	movw	r22, r12
    2042:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    2046:	ed 96       	adiw	r28, 0x3d	; 61
    2048:	ae ad       	ldd	r26, Y+62	; 0x3e
    204a:	bf ad       	ldd	r27, Y+63	; 0x3f
    204c:	ed 97       	sbiw	r28, 0x3d	; 61
    204e:	6d 93       	st	X+, r22
    2050:	7d 93       	st	X+, r23
    2052:	8d 93       	st	X+, r24
    2054:	9c 93       	st	X, r25
    2056:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    2058:	f8 01       	movw	r30, r16
    205a:	20 81       	ld	r18, Z
    205c:	31 81       	ldd	r19, Z+1	; 0x01
    205e:	42 81       	ldd	r20, Z+2	; 0x02
    2060:	53 81       	ldd	r21, Z+3	; 0x03
    2062:	a9 96       	adiw	r28, 0x29	; 41
    2064:	6c ad       	ldd	r22, Y+60	; 0x3c
    2066:	7d ad       	ldd	r23, Y+61	; 0x3d
    2068:	8e ad       	ldd	r24, Y+62	; 0x3e
    206a:	9f ad       	ldd	r25, Y+63	; 0x3f
    206c:	a9 97       	sbiw	r28, 0x29	; 41
    206e:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    2072:	a3 01       	movw	r20, r6
    2074:	92 01       	movw	r18, r4
    2076:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	e1 96       	adiw	r28, 0x31	; 49
    2080:	6c ad       	ldd	r22, Y+60	; 0x3c
    2082:	7d ad       	ldd	r23, Y+61	; 0x3d
    2084:	8e ad       	ldd	r24, Y+62	; 0x3e
    2086:	9f ad       	ldd	r25, Y+63	; 0x3f
    2088:	e1 97       	sbiw	r28, 0x31	; 49
    208a:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    208e:	6b 01       	movw	r12, r22
    2090:	7c 01       	movw	r14, r24
    2092:	d5 01       	movw	r26, r10
    2094:	2d 91       	ld	r18, X+
    2096:	3d 91       	ld	r19, X+
    2098:	4d 91       	ld	r20, X+
    209a:	5c 91       	ld	r21, X
    209c:	ad 96       	adiw	r28, 0x2d	; 45
    209e:	6c ad       	ldd	r22, Y+60	; 0x3c
    20a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    20a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    20a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    20a6:	ad 97       	sbiw	r28, 0x2d	; 45
    20a8:	0e 94 45 1a 	call	0x348a	; 0x348a <__subsf3>
    20ac:	a5 96       	adiw	r28, 0x25	; 37
    20ae:	2c ad       	ldd	r18, Y+60	; 0x3c
    20b0:	3d ad       	ldd	r19, Y+61	; 0x3d
    20b2:	4e ad       	ldd	r20, Y+62	; 0x3e
    20b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    20b6:	a5 97       	sbiw	r28, 0x25	; 37
    20b8:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    20bc:	9b 01       	movw	r18, r22
    20be:	ac 01       	movw	r20, r24
    20c0:	c7 01       	movw	r24, r14
    20c2:	b6 01       	movw	r22, r12
    20c4:	0e 94 46 1a 	call	0x348c	; 0x348c <__addsf3>
    20c8:	ed 96       	adiw	r28, 0x3d	; 61
    20ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    20cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    20ce:	ed 97       	sbiw	r28, 0x3d	; 61
    20d0:	64 83       	std	Z+4, r22	; 0x04
    20d2:	75 83       	std	Z+5, r23	; 0x05
    20d4:	86 83       	std	Z+6, r24	; 0x06
    20d6:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    20d8:	ef 96       	adiw	r28, 0x3f	; 63
    20da:	ae ad       	ldd	r26, Y+62	; 0x3e
    20dc:	bf ad       	ldd	r27, Y+63	; 0x3f
    20de:	ef 97       	sbiw	r28, 0x3f	; 63
    20e0:	4d 92       	st	X+, r4
    20e2:	5d 92       	st	X+, r5
    20e4:	6d 92       	st	X+, r6
    20e6:	7c 92       	st	X, r7
    20e8:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    20ea:	a5 96       	adiw	r28, 0x25	; 37
    20ec:	8c ad       	ldd	r24, Y+60	; 0x3c
    20ee:	9d ad       	ldd	r25, Y+61	; 0x3d
    20f0:	ae ad       	ldd	r26, Y+62	; 0x3e
    20f2:	bf ad       	ldd	r27, Y+63	; 0x3f
    20f4:	a5 97       	sbiw	r28, 0x25	; 37
    20f6:	b0 58       	subi	r27, 0x80	; 128
    20f8:	ef 96       	adiw	r28, 0x3f	; 63
    20fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    20fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    20fe:	ef 97       	sbiw	r28, 0x3f	; 63
    2100:	84 83       	std	Z+4, r24	; 0x04
    2102:	95 83       	std	Z+5, r25	; 0x05
    2104:	a6 83       	std	Z+6, r26	; 0x06
    2106:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    2108:	ed 96       	adiw	r28, 0x3d	; 61
    210a:	ee ad       	ldd	r30, Y+62	; 0x3e
    210c:	ff ad       	ldd	r31, Y+63	; 0x3f
    210e:	ed 97       	sbiw	r28, 0x3d	; 61
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	a2 81       	ldd	r26, Z+2	; 0x02
    2116:	b3 81       	ldd	r27, Z+3	; 0x03
    2118:	80 93 6a 01 	sts	0x016A, r24
    211c:	90 93 6b 01 	sts	0x016B, r25
    2120:	a0 93 6c 01 	sts	0x016C, r26
    2124:	b0 93 6d 01 	sts	0x016D, r27
		c_wii_last[1] = c_wii[1];
    2128:	84 81       	ldd	r24, Z+4	; 0x04
    212a:	95 81       	ldd	r25, Z+5	; 0x05
    212c:	a6 81       	ldd	r26, Z+6	; 0x06
    212e:	b7 81       	ldd	r27, Z+7	; 0x07
    2130:	80 93 6e 01 	sts	0x016E, r24
    2134:	90 93 6f 01 	sts	0x016F, r25
    2138:	a0 93 70 01 	sts	0x0170, r26
    213c:	b0 93 71 01 	sts	0x0171, r27
		dir_last[0] = dir[0];
    2140:	ef 96       	adiw	r28, 0x3f	; 63
    2142:	ee ad       	ldd	r30, Y+62	; 0x3e
    2144:	ff ad       	ldd	r31, Y+63	; 0x3f
    2146:	ef 97       	sbiw	r28, 0x3f	; 63
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	a2 81       	ldd	r26, Z+2	; 0x02
    214e:	b3 81       	ldd	r27, Z+3	; 0x03
    2150:	80 93 62 01 	sts	0x0162, r24
    2154:	90 93 63 01 	sts	0x0163, r25
    2158:	a0 93 64 01 	sts	0x0164, r26
    215c:	b0 93 65 01 	sts	0x0165, r27
		dir_last[1] = dir[1];
    2160:	84 81       	ldd	r24, Z+4	; 0x04
    2162:	95 81       	ldd	r25, Z+5	; 0x05
    2164:	a6 81       	ldd	r26, Z+6	; 0x06
    2166:	b7 81       	ldd	r27, Z+7	; 0x07
    2168:	80 93 66 01 	sts	0x0166, r24
    216c:	90 93 67 01 	sts	0x0167, r25
    2170:	a0 93 68 01 	sts	0x0168, r26
    2174:	b0 93 69 01 	sts	0x0169, r27
		
		if (state == 3 || state == 4){
    2178:	cd 57       	subi	r28, 0x7D	; 125
    217a:	df 4f       	sbci	r29, 0xFF	; 255
    217c:	88 81       	ld	r24, Y
    217e:	99 81       	ldd	r25, Y+1	; 0x01
    2180:	c3 58       	subi	r28, 0x83	; 131
    2182:	d0 40       	sbci	r29, 0x00	; 0
    2184:	03 97       	sbiw	r24, 0x03	; 3
    2186:	02 97       	sbiw	r24, 0x02	; 2
    2188:	08 f0       	brcs	.+2      	; 0x218c <localization+0xc26>
    218a:	90 c0       	rjmp	.+288    	; 0x22ac <localization+0xd46>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    218c:	ed 96       	adiw	r28, 0x3d	; 61
    218e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2190:	bf ad       	ldd	r27, Y+63	; 0x3f
    2192:	ed 97       	sbiw	r28, 0x3d	; 61
    2194:	14 96       	adiw	r26, 0x04	; 4
    2196:	2d 91       	ld	r18, X+
    2198:	3d 91       	ld	r19, X+
    219a:	4d 91       	ld	r20, X+
    219c:	5c 91       	ld	r21, X
    219e:	17 97       	sbiw	r26, 0x07	; 7
    21a0:	6d 91       	ld	r22, X+
    21a2:	7d 91       	ld	r23, X+
    21a4:	8d 91       	ld	r24, X+
    21a6:	9c 91       	ld	r25, X
    21a8:	cb 57       	subi	r28, 0x7B	; 123
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	08 81       	ld	r16, Y
    21ae:	19 81       	ldd	r17, Y+1	; 0x01
    21b0:	c5 58       	subi	r28, 0x85	; 133
    21b2:	d0 40       	sbci	r29, 0x00	; 0
    21b4:	0e 94 84 0a 	call	0x1508	; 0x1508 <find_if_reach>
			if (!if_reach){
    21b8:	89 2b       	or	r24, r25
    21ba:	b9 f5       	brne	.+110    	; 0x222a <localization+0xcc4>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    21bc:	ef 96       	adiw	r28, 0x3f	; 63
    21be:	ae ac       	ldd	r10, Y+62	; 0x3e
    21c0:	bf ac       	ldd	r11, Y+63	; 0x3f
    21c2:	ef 97       	sbiw	r28, 0x3f	; 63
    21c4:	ed 96       	adiw	r28, 0x3d	; 61
    21c6:	ce ac       	ldd	r12, Y+62	; 0x3e
    21c8:	df ac       	ldd	r13, Y+63	; 0x3f
    21ca:	ed 97       	sbiw	r28, 0x3d	; 61
    21cc:	cb 57       	subi	r28, 0x7B	; 123
    21ce:	df 4f       	sbci	r29, 0xFF	; 255
    21d0:	e8 80       	ld	r14, Y
    21d2:	f9 80       	ldd	r15, Y+1	; 0x01
    21d4:	c5 58       	subi	r28, 0x85	; 133
    21d6:	d0 40       	sbci	r29, 0x00	; 0
    21d8:	93 01       	movw	r18, r6
    21da:	82 01       	movw	r16, r4
    21dc:	a5 96       	adiw	r28, 0x25	; 37
    21de:	4c ad       	ldd	r20, Y+60	; 0x3c
    21e0:	5d ad       	ldd	r21, Y+61	; 0x3d
    21e2:	6e ad       	ldd	r22, Y+62	; 0x3e
    21e4:	7f ad       	ldd	r23, Y+63	; 0x3f
    21e6:	a5 97       	sbiw	r28, 0x25	; 37
    21e8:	c4 01       	movw	r24, r8
    21ea:	0e 94 00 07 	call	0xe00	; 0xe00 <cal_angle>
				if (state == 3){
    21ee:	cd 57       	subi	r28, 0x7D	; 125
    21f0:	df 4f       	sbci	r29, 0xFF	; 255
    21f2:	e8 81       	ld	r30, Y
    21f4:	f9 81       	ldd	r31, Y+1	; 0x01
    21f6:	c3 58       	subi	r28, 0x83	; 131
    21f8:	d0 40       	sbci	r29, 0x00	; 0
    21fa:	33 97       	sbiw	r30, 0x03	; 3
    21fc:	59 f4       	brne	.+22     	; 0x2214 <localization+0xcae>
					PID_alpha(Kp_loc, Kd_loc);
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	48 ec       	ldi	r20, 0xC8	; 200
    2204:	52 e4       	ldi	r21, 0x42	; 66
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	86 e9       	ldi	r24, 0x96	; 150
    220c:	93 e4       	ldi	r25, 0x43	; 67
    220e:	0e 94 0c 08 	call	0x1018	; 0x1018 <PID_alpha>
    2212:	4c c0       	rjmp	.+152    	; 0x22ac <localization+0xd46>
				}
				else{
					PID_p2p(Kp_p2p, Kd_p2p);
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	48 ec       	ldi	r20, 0xC8	; 200
    221a:	53 e4       	ldi	r21, 0x43	; 67
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	8a ef       	ldi	r24, 0xFA	; 250
    2222:	93 e4       	ldi	r25, 0x43	; 67
    2224:	0e 94 48 09 	call	0x1290	; 0x1290 <PID_p2p>
    2228:	41 c0       	rjmp	.+130    	; 0x22ac <localization+0xd46>
				}
			}
			else{ // reach goal, stop
				OCR1B = 0;
    222a:	10 92 8b 00 	sts	0x008B, r1
    222e:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    2232:	10 92 8d 00 	sts	0x008D, r1
    2236:	10 92 8c 00 	sts	0x008C, r1
    223a:	38 c0       	rjmp	.+112    	; 0x22ac <localization+0xd46>
			}
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    223c:	80 91 6a 01 	lds	r24, 0x016A
    2240:	90 91 6b 01 	lds	r25, 0x016B
    2244:	a0 91 6c 01 	lds	r26, 0x016C
    2248:	b0 91 6d 01 	lds	r27, 0x016D
    224c:	ed 96       	adiw	r28, 0x3d	; 61
    224e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2250:	ff ad       	ldd	r31, Y+63	; 0x3f
    2252:	ed 97       	sbiw	r28, 0x3d	; 61
    2254:	80 83       	st	Z, r24
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	a2 83       	std	Z+2, r26	; 0x02
    225a:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    225c:	80 91 6e 01 	lds	r24, 0x016E
    2260:	90 91 6f 01 	lds	r25, 0x016F
    2264:	a0 91 70 01 	lds	r26, 0x0170
    2268:	b0 91 71 01 	lds	r27, 0x0171
    226c:	84 83       	std	Z+4, r24	; 0x04
    226e:	95 83       	std	Z+5, r25	; 0x05
    2270:	a6 83       	std	Z+6, r26	; 0x06
    2272:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    2274:	80 91 62 01 	lds	r24, 0x0162
    2278:	90 91 63 01 	lds	r25, 0x0163
    227c:	a0 91 64 01 	lds	r26, 0x0164
    2280:	b0 91 65 01 	lds	r27, 0x0165
    2284:	ef 96       	adiw	r28, 0x3f	; 63
    2286:	ee ad       	ldd	r30, Y+62	; 0x3e
    2288:	ff ad       	ldd	r31, Y+63	; 0x3f
    228a:	ef 97       	sbiw	r28, 0x3f	; 63
    228c:	80 83       	st	Z, r24
    228e:	91 83       	std	Z+1, r25	; 0x01
    2290:	a2 83       	std	Z+2, r26	; 0x02
    2292:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    2294:	80 91 66 01 	lds	r24, 0x0166
    2298:	90 91 67 01 	lds	r25, 0x0167
    229c:	a0 91 68 01 	lds	r26, 0x0168
    22a0:	b0 91 69 01 	lds	r27, 0x0169
    22a4:	84 83       	std	Z+4, r24	; 0x04
    22a6:	95 83       	std	Z+5, r25	; 0x05
    22a8:	a6 83       	std	Z+6, r26	; 0x06
    22aa:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    22ac:	8c e1       	ldi	r24, 0x1C	; 28
    22ae:	92 e0       	ldi	r25, 0x02	; 2
    22b0:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(c_wii[0]);
    22b4:	ed 96       	adiw	r28, 0x3d	; 61
    22b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    22b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    22ba:	ed 97       	sbiw	r28, 0x3d	; 61
    22bc:	6d 91       	ld	r22, X+
    22be:	7d 91       	ld	r23, X+
    22c0:	8d 91       	ld	r24, X+
    22c2:	9c 91       	ld	r25, X
    22c4:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    22c8:	cb 01       	movw	r24, r22
    22ca:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    22ce:	87 e1       	ldi	r24, 0x17	; 23
    22d0:	92 e0       	ldi	r25, 0x02	; 2
    22d2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(c_wii[1]);
    22d6:	ed 96       	adiw	r28, 0x3d	; 61
    22d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    22da:	ff ad       	ldd	r31, Y+63	; 0x3f
    22dc:	ed 97       	sbiw	r28, 0x3d	; 61
    22de:	64 81       	ldd	r22, Z+4	; 0x04
    22e0:	75 81       	ldd	r23, Z+5	; 0x05
    22e2:	86 81       	ldd	r24, Z+6	; 0x06
    22e4:	97 81       	ldd	r25, Z+7	; 0x07
    22e6:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    22ea:	cb 01       	movw	r24, r22
    22ec:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    22f0:	85 e1       	ldi	r24, 0x15	; 21
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    22f8:	84 e0       	ldi	r24, 0x04	; 4
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(dir[0]*1000);
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	ef 96       	adiw	r28, 0x3f	; 63
    230a:	ae ad       	ldd	r26, Y+62	; 0x3e
    230c:	bf ad       	ldd	r27, Y+63	; 0x3f
    230e:	ef 97       	sbiw	r28, 0x3f	; 63
    2310:	6d 91       	ld	r22, X+
    2312:	7d 91       	ld	r23, X+
    2314:	8d 91       	ld	r24, X+
    2316:	9c 91       	ld	r25, X
    2318:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    231c:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    2320:	cb 01       	movw	r24, r22
    2322:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2326:	8c ef       	ldi	r24, 0xFC	; 252
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
	m_usb_tx_int(dir[1]*1000);
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a e7       	ldi	r20, 0x7A	; 122
    2334:	54 e4       	ldi	r21, 0x44	; 68
    2336:	ef 96       	adiw	r28, 0x3f	; 63
    2338:	ee ad       	ldd	r30, Y+62	; 0x3e
    233a:	ff ad       	ldd	r31, Y+63	; 0x3f
    233c:	ef 97       	sbiw	r28, 0x3f	; 63
    233e:	64 81       	ldd	r22, Z+4	; 0x04
    2340:	75 81       	ldd	r23, Z+5	; 0x05
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	97 81       	ldd	r25, Z+7	; 0x07
    2346:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    234a:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    234e:	cb 01       	movw	r24, r22
    2350:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2354:	8a ef       	ldi	r24, 0xFA	; 250
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <localization+0xe20>
    235e:	eb 96       	adiw	r28, 0x3b	; 59
    2360:	2e ad       	ldd	r18, Y+62	; 0x3e
    2362:	3f ad       	ldd	r19, Y+63	; 0x3f
    2364:	eb 97       	sbiw	r28, 0x3b	; 59
    2366:	2c 5f       	subi	r18, 0xFC	; 252
    2368:	3f 4f       	sbci	r19, 0xFF	; 255
    236a:	eb 96       	adiw	r28, 0x3b	; 59
    236c:	3f af       	std	Y+63, r19	; 0x3f
    236e:	2e af       	std	Y+62, r18	; 0x3e
    2370:	eb 97       	sbiw	r28, 0x3b	; 59
    2372:	e3 96       	adiw	r28, 0x33	; 51
    2374:	8e ad       	ldd	r24, Y+62	; 0x3e
    2376:	9f ad       	ldd	r25, Y+63	; 0x3f
    2378:	e3 97       	sbiw	r28, 0x33	; 51
    237a:	04 96       	adiw	r24, 0x04	; 4
    237c:	e3 96       	adiw	r28, 0x33	; 51
    237e:	9f af       	std	Y+63, r25	; 0x3f
    2380:	8e af       	std	Y+62, r24	; 0x3e
    2382:	e3 97       	sbiw	r28, 0x33	; 51
    2384:	b9 ca       	rjmp	.-2702   	; 0x18f8 <localization+0x392>
}
    2386:	ca 57       	subi	r28, 0x7A	; 122
    2388:	df 4f       	sbci	r29, 0xFF	; 255
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	df 90       	pop	r13
    23a2:	cf 90       	pop	r12
    23a4:	bf 90       	pop	r11
    23a6:	af 90       	pop	r10
    23a8:	9f 90       	pop	r9
    23aa:	8f 90       	pop	r8
    23ac:	7f 90       	pop	r7
    23ae:	6f 90       	pop	r6
    23b0:	5f 90       	pop	r5
    23b2:	4f 90       	pop	r4
    23b4:	3f 90       	pop	r3
    23b6:	2f 90       	pop	r2
    23b8:	08 95       	ret

000023ba <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    23ba:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    23bc:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    23be:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    23c0:	8c e0       	ldi	r24, 0x0C	; 12
    23c2:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    23c6:	e9 e6       	ldi	r30, 0x69	; 105
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	80 62       	ori	r24, 0x20	; 32
    23ce:	80 83       	st	Z, r24
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 7e       	andi	r24, 0xEF	; 239
    23d4:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    23d6:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    23d8:	78 94       	sei
    23da:	08 95       	ret

000023dc <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	18 2f       	mov	r17, r24
    23e4:	d6 2f       	mov	r29, r22
    23e6:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    23e8:	0e 94 dd 11 	call	0x23ba	; 0x23ba <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    23ec:	94 ea       	ldi	r25, 0xA4	; 164
    23ee:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    23f2:	ec eb       	ldi	r30, 0xBC	; 188
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	90 81       	ld	r25, Z
    23f8:	99 23       	and	r25, r25
    23fa:	ec f7       	brge	.-6      	; 0x23f6 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    23fc:	90 e5       	ldi	r25, 0x50	; 80
    23fe:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2402:	94 e8       	ldi	r25, 0x84	; 132
    2404:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2408:	ec eb       	ldi	r30, 0xBC	; 188
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	90 81       	ld	r25, Z
    240e:	99 23       	and	r25, r25
    2410:	ec f7       	brge	.-6      	; 0x240c <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2412:	90 91 b9 00 	lds	r25, 0x00B9
    2416:	98 7f       	andi	r25, 0xF8	; 248
    2418:	90 32       	cpi	r25, 0x20	; 32
    241a:	29 f4       	brne	.+10     	; 0x2426 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    241c:	84 e9       	ldi	r24, 0x94	; 148
    241e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	2d c0       	rjmp	.+90     	; 0x2480 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    242c:	84 e8       	ldi	r24, 0x84	; 132
    242e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2432:	ec eb       	ldi	r30, 0xBC	; 188
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	90 81       	ld	r25, Z
    2438:	99 23       	and	r25, r25
    243a:	ec f7       	brge	.-6      	; 0x2436 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    243c:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2440:	84 e8       	ldi	r24, 0x84	; 132
    2442:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2446:	ec eb       	ldi	r30, 0xBC	; 188
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	88 23       	and	r24, r24
    244e:	ec f7       	brge	.-6      	; 0x244a <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2450:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2454:	84 e8       	ldi	r24, 0x84	; 132
    2456:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    245a:	ec eb       	ldi	r30, 0xBC	; 188
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	88 23       	and	r24, r24
    2462:	ec f7       	brge	.-6      	; 0x245e <m_rf_open+0x82>
	
	TWDR = packet_length;
    2464:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2468:	84 e8       	ldi	r24, 0x84	; 132
    246a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    246e:	ec eb       	ldi	r30, 0xBC	; 188
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	88 23       	and	r24, r24
    2476:	ec f7       	brge	.-6      	; 0x2472 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2478:	84 e9       	ldi	r24, 0x94	; 148
    247a:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
}
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	1f 91       	pop	r17
    2486:	08 95       	ret

00002488 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2488:	1f 93       	push	r17
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    248e:	24 ea       	ldi	r18, 0xA4	; 164
    2490:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    2494:	ec eb       	ldi	r30, 0xBC	; 188
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	20 81       	ld	r18, Z
    249a:	22 23       	and	r18, r18
    249c:	ec f7       	brge	.-6      	; 0x2498 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    249e:	21 e5       	ldi	r18, 0x51	; 81
    24a0:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    24a4:	24 e8       	ldi	r18, 0x84	; 132
    24a6:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    24aa:	ec eb       	ldi	r30, 0xBC	; 188
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	20 81       	ld	r18, Z
    24b0:	22 23       	and	r18, r18
    24b2:	ec f7       	brge	.-6      	; 0x24ae <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    24b4:	20 91 b9 00 	lds	r18, 0x00B9
    24b8:	28 7f       	andi	r18, 0xF8	; 248
    24ba:	28 34       	cpi	r18, 0x48	; 72
    24bc:	29 f4       	brne	.+10     	; 0x24c8 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    24be:	84 e9       	ldi	r24, 0x94	; 148
    24c0:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	44 c0       	rjmp	.+136    	; 0x2550 <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    24c8:	24 ec       	ldi	r18, 0xC4	; 196
    24ca:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    24ce:	ec eb       	ldi	r30, 0xBC	; 188
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	20 81       	ld	r18, Z
    24d4:	22 23       	and	r18, r18
    24d6:	ec f7       	brge	.-6      	; 0x24d2 <m_rf_read+0x4a>
	bytes = TWDR;
    24d8:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
    24dc:	16 13       	cpse	r17, r22
    24de:	0a c0       	rjmp	.+20     	; 0x24f4 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    24e0:	41 2f       	mov	r20, r17
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	41 50       	subi	r20, 0x01	; 1
    24e6:	51 09       	sbc	r21, r1
    24e8:	14 16       	cp	r1, r20
    24ea:	15 06       	cpc	r1, r21
    24ec:	44 f0       	brlt	.+16     	; 0x24fe <m_rf_read+0x76>
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	1c c0       	rjmp	.+56     	; 0x252c <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    24f4:	84 e9       	ldi	r24, 0x94	; 148
    24f6:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	29 c0       	rjmp	.+82     	; 0x2550 <m_rf_read+0xc8>
    24fe:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2504:	ec eb       	ldi	r30, 0xBC	; 188
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    250a:	cb eb       	ldi	r28, 0xBB	; 187
    250c:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    250e:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2510:	60 81       	ld	r22, Z
    2512:	66 23       	and	r22, r22
    2514:	ec f7       	brge	.-6      	; 0x2510 <m_rf_read+0x88>
		buffer[i] = TWDR;
    2516:	68 81       	ld	r22, Y
    2518:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    251a:	2f 5f       	subi	r18, 0xFF	; 255
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	24 17       	cp	r18, r20
    2520:	35 07       	cpc	r19, r21
    2522:	ac f3       	brlt	.-22     	; 0x250e <m_rf_read+0x86>
    2524:	21 2f       	mov	r18, r17
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	21 50       	subi	r18, 0x01	; 1
    252a:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    252c:	44 e8       	ldi	r20, 0x84	; 132
    252e:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2532:	ec eb       	ldi	r30, 0xBC	; 188
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	40 81       	ld	r20, Z
    2538:	44 23       	and	r20, r20
    253a:	ec f7       	brge	.-6      	; 0x2536 <m_rf_read+0xae>
	buffer[i++] = TWDR;
    253c:	40 91 bb 00 	lds	r20, 0x00BB
    2540:	fc 01       	movw	r30, r24
    2542:	e2 0f       	add	r30, r18
    2544:	f3 1f       	adc	r31, r19
    2546:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2548:	84 e9       	ldi	r24, 0x94	; 148
    254a:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
}
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	08 95       	ret

00002558 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    255c:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    255e:	94 ea       	ldi	r25, 0xA4	; 164
    2560:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2564:	ec eb       	ldi	r30, 0xBC	; 188
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	90 81       	ld	r25, Z
    256a:	99 23       	and	r25, r25
    256c:	ec f7       	brge	.-6      	; 0x2568 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    256e:	90 e5       	ldi	r25, 0x50	; 80
    2570:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2574:	94 e8       	ldi	r25, 0x84	; 132
    2576:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    257a:	ec eb       	ldi	r30, 0xBC	; 188
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	90 81       	ld	r25, Z
    2580:	99 23       	and	r25, r25
    2582:	ec f7       	brge	.-6      	; 0x257e <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2584:	90 91 b9 00 	lds	r25, 0x00B9
    2588:	98 7f       	andi	r25, 0xF8	; 248
    258a:	90 32       	cpi	r25, 0x20	; 32
    258c:	31 f4       	brne	.+12     	; 0x259a <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    258e:	84 e9       	ldi	r24, 0x94	; 148
    2590:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    2594:	78 94       	sei
		return 0;
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	32 c0       	rjmp	.+100    	; 0x25fe <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    259a:	93 e0       	ldi	r25, 0x03	; 3
    259c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    25a0:	94 e8       	ldi	r25, 0x84	; 132
    25a2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    25a6:	ec eb       	ldi	r30, 0xBC	; 188
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	90 81       	ld	r25, Z
    25ac:	99 23       	and	r25, r25
    25ae:	ec f7       	brge	.-6      	; 0x25aa <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    25b0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    25b4:	84 e8       	ldi	r24, 0x84	; 132
    25b6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    25ba:	ec eb       	ldi	r30, 0xBC	; 188
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	88 23       	and	r24, r24
    25c2:	ec f7       	brge	.-6      	; 0x25be <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    25c4:	24 2f       	mov	r18, r20
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	12 16       	cp	r1, r18
    25ca:	13 06       	cpc	r1, r19
    25cc:	9c f4       	brge	.+38     	; 0x25f4 <m_rf_send+0x9c>
    25ce:	a6 2f       	mov	r26, r22
    25d0:	b7 2f       	mov	r27, r23
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    25d6:	cb eb       	ldi	r28, 0xBB	; 187
    25d8:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    25da:	ec eb       	ldi	r30, 0xBC	; 188
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    25e0:	4d 91       	ld	r20, X+
    25e2:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    25e4:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    25e6:	40 81       	ld	r20, Z
    25e8:	44 23       	and	r20, r20
    25ea:	ec f7       	brge	.-6      	; 0x25e6 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    25ec:	01 96       	adiw	r24, 0x01	; 1
    25ee:	82 17       	cp	r24, r18
    25f0:	93 07       	cpc	r25, r19
    25f2:	b4 f3       	brlt	.-20     	; 0x25e0 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    25f4:	84 e9       	ldi	r24, 0x94	; 148
    25f6:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    25fa:	78 94       	sei
	
	return 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
}
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	08 95       	ret

00002604 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    260a:	80 ea       	ldi	r24, 0xA0	; 160
    260c:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2610:	82 e1       	ldi	r24, 0x12	; 18
    2612:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2614:	09 b4       	in	r0, 0x29	; 41
    2616:	00 fe       	sbrs	r0, 0
    2618:	fd cf       	rjmp	.-6      	; 0x2614 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    261a:	80 e9       	ldi	r24, 0x90	; 144
    261c:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2620:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2624:	10 92 8d 01 	sts	0x018D, r1
	cdc_line_rtsdtr = 0;
    2628:	10 92 8a 01 	sts	0x018A, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    262c:	8c e0       	ldi	r24, 0x0C	; 12
    262e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2632:	78 94       	sei
    2634:	08 95       	ret

00002636 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    263a:	90 91 8d 01 	lds	r25, 0x018D
    263e:	99 23       	and	r25, r25
    2640:	09 f4       	brne	.+2      	; 0x2644 <m_usb_tx_char+0xe>
    2642:	4c c0       	rjmp	.+152    	; 0x26dc <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2644:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2646:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2648:	24 e0       	ldi	r18, 0x04	; 4
    264a:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    264e:	20 91 8b 01 	lds	r18, 0x018B
    2652:	22 23       	and	r18, r18
    2654:	49 f0       	breq	.+18     	; 0x2668 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    2656:	20 91 e8 00 	lds	r18, 0x00E8
    265a:	25 fd       	sbrc	r18, 5
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    265e:	9f bf       	out	0x3f, r25	; 63
			return -1;
    2660:	8f ef       	ldi	r24, 0xFF	; 255
    2662:	41 c0       	rjmp	.+130    	; 0x26e6 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    2664:	10 92 8b 01 	sts	0x018B, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2668:	30 91 e4 00 	lds	r19, 0x00E4
    266c:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    266e:	20 91 e8 00 	lds	r18, 0x00E8
    2672:	25 fd       	sbrc	r18, 5
    2674:	24 c0       	rjmp	.+72     	; 0x26be <m_usb_tx_char+0x88>
		SREG = intr_state;
    2676:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2678:	90 91 e4 00 	lds	r25, 0x00E4
    267c:	93 17       	cp	r25, r19
    267e:	81 f0       	breq	.+32     	; 0x26a0 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2680:	90 91 8d 01 	lds	r25, 0x018D
    2684:	99 23       	and	r25, r25
    2686:	61 f1       	breq	.+88     	; 0x26e0 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    2688:	a9 ee       	ldi	r26, 0xE9	; 233
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    268e:	e8 ee       	ldi	r30, 0xE8	; 232
    2690:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2692:	c4 ee       	ldi	r28, 0xE4	; 228
    2694:	d0 e0       	ldi	r29, 0x00	; 0
    2696:	0d c0       	rjmp	.+26     	; 0x26b2 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2698:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    269a:	98 81       	ld	r25, Y
    269c:	93 13       	cpse	r25, r19
    269e:	05 c0       	rjmp	.+10     	; 0x26aa <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	80 93 8b 01 	sts	0x018B, r24
			return -1;
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	1e c0       	rjmp	.+60     	; 0x26e6 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    26aa:	90 91 8d 01 	lds	r25, 0x018D
    26ae:	99 23       	and	r25, r25
    26b0:	c9 f0       	breq	.+50     	; 0x26e4 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    26b2:	9f b7       	in	r25, 0x3f	; 63
		cli();
    26b4:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    26b6:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    26b8:	20 81       	ld	r18, Z
    26ba:	25 ff       	sbrs	r18, 5
    26bc:	ed cf       	rjmp	.-38     	; 0x2698 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    26be:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    26c2:	80 91 e8 00 	lds	r24, 0x00E8
    26c6:	85 fd       	sbrc	r24, 5
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <m_usb_tx_char+0x9a>
    26ca:	8a e3       	ldi	r24, 0x3A	; 58
    26cc:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    26d0:	85 e0       	ldi	r24, 0x05	; 5
    26d2:	80 93 8c 01 	sts	0x018C, r24
	SREG = intr_state;
    26d6:	9f bf       	out	0x3f, r25	; 63
	return 0;
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	05 c0       	rjmp	.+10     	; 0x26e6 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    26dc:	8f ef       	ldi	r24, 0xFF	; 255
    26de:	03 c0       	rjmp	.+6      	; 0x26e6 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
    26e2:	01 c0       	rjmp	.+2      	; 0x26e6 <m_usb_tx_char+0xb0>
    26e4:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	08 95       	ret

000026ec <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    26ec:	1f 92       	push	r1
    26ee:	0f 92       	push	r0
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	0f 92       	push	r0
    26f4:	11 24       	eor	r1, r1
    26f6:	8f 93       	push	r24
    26f8:	9f 93       	push	r25
    26fa:	ef 93       	push	r30
    26fc:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    26fe:	e1 ee       	ldi	r30, 0xE1	; 225
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
        UDINT = 0;
    2704:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2706:	83 ff       	sbrs	r24, 3
    2708:	11 c0       	rjmp	.+34     	; 0x272c <__vector_10+0x40>
		UENUM = 0;
    270a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2714:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2718:	92 e1       	ldi	r25, 0x12	; 18
    271a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    271e:	98 e0       	ldi	r25, 0x08	; 8
    2720:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2724:	10 92 8d 01 	sts	0x018D, r1
		cdc_line_rtsdtr = 0;
    2728:	10 92 8a 01 	sts	0x018A, r1
        }
	if (intbits & (1<<SOFI)) {
    272c:	82 ff       	sbrs	r24, 2
    272e:	13 c0       	rjmp	.+38     	; 0x2756 <__vector_10+0x6a>
		if (usb_configuration) {
    2730:	80 91 8d 01 	lds	r24, 0x018D
    2734:	88 23       	and	r24, r24
    2736:	79 f0       	breq	.+30     	; 0x2756 <__vector_10+0x6a>
			t = transmit_flush_timer;
    2738:	80 91 8c 01 	lds	r24, 0x018C
			if (t) {
    273c:	88 23       	and	r24, r24
    273e:	59 f0       	breq	.+22     	; 0x2756 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	80 93 8c 01 	sts	0x018C, r24
				if (!t) {
    2746:	81 11       	cpse	r24, r1
    2748:	06 c0       	rjmp	.+12     	; 0x2756 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    274a:	84 e0       	ldi	r24, 0x04	; 4
    274c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2750:	8a e3       	ldi	r24, 0x3A	; 58
    2752:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2756:	ff 91       	pop	r31
    2758:	ef 91       	pop	r30
    275a:	9f 91       	pop	r25
    275c:	8f 91       	pop	r24
    275e:	0f 90       	pop	r0
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	0f 90       	pop	r0
    2764:	1f 90       	pop	r1
    2766:	18 95       	reti

00002768 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2768:	1f 92       	push	r1
    276a:	0f 92       	push	r0
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	0f 92       	push	r0
    2770:	11 24       	eor	r1, r1
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	2f 93       	push	r18
    2778:	3f 93       	push	r19
    277a:	4f 93       	push	r20
    277c:	5f 93       	push	r21
    277e:	6f 93       	push	r22
    2780:	7f 93       	push	r23
    2782:	8f 93       	push	r24
    2784:	9f 93       	push	r25
    2786:	af 93       	push	r26
    2788:	bf 93       	push	r27
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	ef 93       	push	r30
    2790:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2792:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2796:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    279a:	83 ff       	sbrs	r24, 3
    279c:	4e c1       	rjmp	.+668    	; 0x2a3a <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    279e:	e1 ef       	ldi	r30, 0xF1	; 241
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    27a4:	40 81       	ld	r20, Z
                wValue = UEDATX;
    27a6:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    27a8:	80 81       	ld	r24, Z
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    27ae:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    27b0:	50 81       	ld	r21, Z
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	bc 01       	movw	r22, r24
    27b6:	75 2b       	or	r23, r21
                wLength = UEDATX;
    27b8:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    27ba:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    27bc:	82 ef       	ldi	r24, 0xF2	; 242
    27be:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    27c2:	46 30       	cpi	r20, 0x06	; 6
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <__vector_11+0x60>
    27c6:	58 c0       	rjmp	.+176    	; 0x2878 <__vector_11+0x110>
    27c8:	04 c0       	rjmp	.+8      	; 0x27d2 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    27ca:	81 e2       	ldi	r24, 0x21	; 33
    27cc:	80 93 eb 00 	sts	0x00EB, r24
					return;
    27d0:	3b c1       	rjmp	.+630    	; 0x2a48 <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    27d2:	c6 e0       	ldi	r28, 0x06	; 6
    27d4:	80 e3       	ldi	r24, 0x30	; 48
    27d6:	92 e0       	ldi	r25, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    27d8:	fc 01       	movw	r30, r24
    27da:	45 91       	lpm	r20, Z+
    27dc:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    27de:	24 17       	cp	r18, r20
    27e0:	35 07       	cpc	r19, r21
    27e2:	11 f0       	breq	.+4      	; 0x27e8 <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    27e4:	07 96       	adiw	r24, 0x07	; 7
					continue;
    27e6:	23 c0       	rjmp	.+70     	; 0x282e <__vector_11+0xc6>
				}
				list += 2;
    27e8:	fc 01       	movw	r30, r24
    27ea:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    27ec:	45 91       	lpm	r20, Z+
    27ee:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    27f0:	64 17       	cp	r22, r20
    27f2:	75 07       	cpc	r23, r21
    27f4:	11 f0       	breq	.+4      	; 0x27fa <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    27f6:	07 96       	adiw	r24, 0x07	; 7
					continue;
    27f8:	1a c0       	rjmp	.+52     	; 0x282e <__vector_11+0xc6>
				}
				list += 2;
    27fa:	fc 01       	movw	r30, r24
    27fc:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    27fe:	25 91       	lpm	r18, Z+
    2800:	34 91       	lpm	r19, Z
				list += 2;
    2802:	fc 01       	movw	r30, r24
    2804:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2806:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2808:	8b 2f       	mov	r24, r27
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    280e:	8f 3f       	cpi	r24, 0xFF	; 255
    2810:	91 05       	cpc	r25, r1
    2812:	19 f0       	breq	.+6      	; 0x281a <__vector_11+0xb2>
    2814:	10 f0       	brcs	.+4      	; 0x281a <__vector_11+0xb2>
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	85 17       	cp	r24, r21
    281c:	08 f4       	brcc	.+2      	; 0x2820 <__vector_11+0xb8>
    281e:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2820:	a8 ee       	ldi	r26, 0xE8	; 232
    2822:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2824:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2826:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2828:	c1 ef       	ldi	r28, 0xF1	; 241
    282a:	d0 e0       	ldi	r29, 0x00	; 0
    282c:	03 c0       	rjmp	.+6      	; 0x2834 <__vector_11+0xcc>
    282e:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2830:	99 f6       	brne	.-90     	; 0x27d8 <__vector_11+0x70>
    2832:	cb cf       	rjmp	.-106    	; 0x27ca <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2834:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2836:	98 2f       	mov	r25, r24
    2838:	95 70       	andi	r25, 0x05	; 5
    283a:	e1 f3       	breq	.-8      	; 0x2834 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    283c:	82 fd       	sbrc	r24, 2
    283e:	04 c1       	rjmp	.+520    	; 0x2a48 <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2840:	45 2f       	mov	r20, r21
    2842:	51 31       	cpi	r21, 0x11	; 17
    2844:	08 f0       	brcs	.+2      	; 0x2848 <__vector_11+0xe0>
    2846:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    2848:	44 23       	and	r20, r20
    284a:	09 f4       	brne	.+2      	; 0x284e <__vector_11+0xe6>
    284c:	fa c0       	rjmp	.+500    	; 0x2a42 <__vector_11+0x2da>
    284e:	f9 01       	movw	r30, r18
    2850:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    2852:	94 91       	lpm	r25, Z
    2854:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2856:	81 50       	subi	r24, 0x01	; 1
    2858:	31 96       	adiw	r30, 0x01	; 1
    285a:	81 11       	cpse	r24, r1
    285c:	fa cf       	rjmp	.-12     	; 0x2852 <__vector_11+0xea>
    285e:	8f ef       	ldi	r24, 0xFF	; 255
    2860:	84 0f       	add	r24, r20
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	01 96       	adiw	r24, 0x01	; 1
    2866:	28 0f       	add	r18, r24
    2868:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    286a:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    286c:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    286e:	51 11       	cpse	r21, r1
    2870:	e1 cf       	rjmp	.-62     	; 0x2834 <__vector_11+0xcc>
    2872:	40 31       	cpi	r20, 0x10	; 16
    2874:	f9 f2       	breq	.-66     	; 0x2834 <__vector_11+0xcc>
    2876:	e8 c0       	rjmp	.+464    	; 0x2a48 <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2878:	45 30       	cpi	r20, 0x05	; 5
    287a:	61 f4       	brne	.+24     	; 0x2894 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    287c:	8e ef       	ldi	r24, 0xFE	; 254
    287e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2882:	e8 ee       	ldi	r30, 0xE8	; 232
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	80 ff       	sbrs	r24, 0
    288a:	fd cf       	rjmp	.-6      	; 0x2886 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    288c:	20 68       	ori	r18, 0x80	; 128
    288e:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2892:	da c0       	rjmp	.+436    	; 0x2a48 <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2894:	49 30       	cpi	r20, 0x09	; 9
    2896:	09 f0       	breq	.+2      	; 0x289a <__vector_11+0x132>
    2898:	36 c0       	rjmp	.+108    	; 0x2906 <__vector_11+0x19e>
    289a:	c1 11       	cpse	r28, r1
    289c:	5f c0       	rjmp	.+190    	; 0x295c <__vector_11+0x1f4>
			usb_configuration = wValue;
    289e:	20 93 8d 01 	sts	0x018D, r18
			cdc_line_rtsdtr = 0;
    28a2:	10 92 8a 01 	sts	0x018A, r1
			transmit_flush_timer = 0;
    28a6:	10 92 8c 01 	sts	0x018C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    28aa:	8e ef       	ldi	r24, 0xFE	; 254
    28ac:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    28b0:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    28b2:	89 ed       	ldi	r24, 0xD9	; 217
    28b4:	92 e0       	ldi	r25, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    28b6:	c9 ee       	ldi	r28, 0xE9	; 233
    28b8:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    28ba:	ab ee       	ldi	r26, 0xEB	; 235
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    28be:	6c ee       	ldi	r22, 0xEC	; 236
    28c0:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    28c2:	4d ee       	ldi	r20, 0xED	; 237
    28c4:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    28c6:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    28c8:	9c 01       	movw	r18, r24
    28ca:	2f 5f       	subi	r18, 0xFF	; 255
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	fc 01       	movw	r30, r24
    28d0:	04 91       	lpm	r16, Z
				UECONX = en;
    28d2:	0c 93       	st	X, r16
				if (en) {
    28d4:	00 23       	and	r16, r16
    28d6:	61 f0       	breq	.+24     	; 0x28f0 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    28d8:	f9 01       	movw	r30, r18
    28da:	24 91       	lpm	r18, Z
    28dc:	fb 01       	movw	r30, r22
    28de:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    28e0:	9c 01       	movw	r18, r24
    28e2:	2d 5f       	subi	r18, 0xFD	; 253
    28e4:	3f 4f       	sbci	r19, 0xFF	; 255
    28e6:	fc 01       	movw	r30, r24
    28e8:	32 96       	adiw	r30, 0x02	; 2
    28ea:	84 91       	lpm	r24, Z
    28ec:	fa 01       	movw	r30, r20
    28ee:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    28f0:	1f 5f       	subi	r17, 0xFF	; 255
    28f2:	15 30       	cpi	r17, 0x05	; 5
    28f4:	11 f0       	breq	.+4      	; 0x28fa <__vector_11+0x192>
    28f6:	c9 01       	movw	r24, r18
    28f8:	e6 cf       	rjmp	.-52     	; 0x28c6 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    28fa:	ea ee       	ldi	r30, 0xEA	; 234
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	8e e1       	ldi	r24, 0x1E	; 30
    2900:	80 83       	st	Z, r24
        		UERST = 0;
    2902:	10 82       	st	Z, r1
			return;
    2904:	a1 c0       	rjmp	.+322    	; 0x2a48 <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2906:	48 30       	cpi	r20, 0x08	; 8
    2908:	81 f4       	brne	.+32     	; 0x292a <__vector_11+0x1c2>
    290a:	c0 38       	cpi	r28, 0x80	; 128
    290c:	09 f0       	breq	.+2      	; 0x2910 <__vector_11+0x1a8>
    290e:	42 c0       	rjmp	.+132    	; 0x2994 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2910:	e8 ee       	ldi	r30, 0xE8	; 232
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	80 ff       	sbrs	r24, 0
    2918:	fd cf       	rjmp	.-6      	; 0x2914 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    291a:	80 91 8d 01 	lds	r24, 0x018D
    291e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2922:	8e ef       	ldi	r24, 0xFE	; 254
    2924:	80 93 e8 00 	sts	0x00E8, r24
    2928:	8f c0       	rjmp	.+286    	; 0x2a48 <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    292a:	41 32       	cpi	r20, 0x21	; 33
    292c:	b9 f4       	brne	.+46     	; 0x295c <__vector_11+0x1f4>
    292e:	c1 3a       	cpi	r28, 0xA1	; 161
    2930:	09 f0       	breq	.+2      	; 0x2934 <__vector_11+0x1cc>
    2932:	40 c0       	rjmp	.+128    	; 0x29b4 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2934:	e8 ee       	ldi	r30, 0xE8	; 232
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	80 ff       	sbrs	r24, 0
    293c:	fd cf       	rjmp	.-6      	; 0x2938 <__vector_11+0x1d0>
    293e:	e4 e2       	ldi	r30, 0x24	; 36
    2940:	f1 e0       	ldi	r31, 0x01	; 1
    2942:	8b e2       	ldi	r24, 0x2B	; 43
    2944:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2946:	a1 ef       	ldi	r26, 0xF1	; 241
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	21 91       	ld	r18, Z+
    294c:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    294e:	e8 17       	cp	r30, r24
    2950:	f9 07       	cpc	r31, r25
    2952:	d9 f7       	brne	.-10     	; 0x294a <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2954:	8e ef       	ldi	r24, 0xFE	; 254
    2956:	80 93 e8 00 	sts	0x00E8, r24
    295a:	76 c0       	rjmp	.+236    	; 0x2a48 <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    295c:	40 32       	cpi	r20, 0x20	; 32
    295e:	d1 f4       	brne	.+52     	; 0x2994 <__vector_11+0x22c>
    2960:	c1 32       	cpi	r28, 0x21	; 33
    2962:	09 f0       	breq	.+2      	; 0x2966 <__vector_11+0x1fe>
    2964:	43 c0       	rjmp	.+134    	; 0x29ec <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2966:	e8 ee       	ldi	r30, 0xE8	; 232
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	82 ff       	sbrs	r24, 2
    296e:	fd cf       	rjmp	.-6      	; 0x296a <__vector_11+0x202>
    2970:	e4 e2       	ldi	r30, 0x24	; 36
    2972:	f1 e0       	ldi	r31, 0x01	; 1
    2974:	8b e2       	ldi	r24, 0x2B	; 43
    2976:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2978:	a1 ef       	ldi	r26, 0xF1	; 241
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	2c 91       	ld	r18, X
    297e:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2980:	e8 17       	cp	r30, r24
    2982:	f9 07       	cpc	r31, r25
    2984:	d9 f7       	brne	.-10     	; 0x297c <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2986:	e8 ee       	ldi	r30, 0xE8	; 232
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	8b ef       	ldi	r24, 0xFB	; 251
    298c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    298e:	8e ef       	ldi	r24, 0xFE	; 254
    2990:	80 83       	st	Z, r24
    2992:	5a c0       	rjmp	.+180    	; 0x2a48 <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2994:	42 32       	cpi	r20, 0x22	; 34
    2996:	71 f4       	brne	.+28     	; 0x29b4 <__vector_11+0x24c>
    2998:	c1 32       	cpi	r28, 0x21	; 33
    299a:	09 f0       	breq	.+2      	; 0x299e <__vector_11+0x236>
    299c:	4e c0       	rjmp	.+156    	; 0x2a3a <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    299e:	20 93 8a 01 	sts	0x018A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    29a2:	e8 ee       	ldi	r30, 0xE8	; 232
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	80 ff       	sbrs	r24, 0
    29aa:	fd cf       	rjmp	.-6      	; 0x29a6 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29ac:	8e ef       	ldi	r24, 0xFE	; 254
    29ae:	80 93 e8 00 	sts	0x00E8, r24
    29b2:	4a c0       	rjmp	.+148    	; 0x2a48 <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    29b4:	41 11       	cpse	r20, r1
    29b6:	1a c0       	rjmp	.+52     	; 0x29ec <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    29b8:	e8 ee       	ldi	r30, 0xE8	; 232
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	80 ff       	sbrs	r24, 0
    29c0:	fd cf       	rjmp	.-6      	; 0x29bc <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    29c2:	c2 38       	cpi	r28, 0x82	; 130
    29c4:	51 f4       	brne	.+20     	; 0x29da <__vector_11+0x272>
				UENUM = wIndex;
    29c6:	e9 ee       	ldi	r30, 0xE9	; 233
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    29cc:	80 91 eb 00 	lds	r24, 0x00EB
    29d0:	85 fb       	bst	r24, 5
    29d2:	88 27       	eor	r24, r24
    29d4:	80 f9       	bld	r24, 0
				UENUM = 0;
    29d6:	10 82       	st	Z, r1
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    29da:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    29dc:	e1 ef       	ldi	r30, 0xF1	; 241
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 83       	st	Z, r24
			UEDATX = 0;
    29e2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29e4:	8e ef       	ldi	r24, 0xFE	; 254
    29e6:	80 93 e8 00 	sts	0x00E8, r24
    29ea:	2e c0       	rjmp	.+92     	; 0x2a48 <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    29ec:	84 2f       	mov	r24, r20
    29ee:	8d 7f       	andi	r24, 0xFD	; 253
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	19 f5       	brne	.+70     	; 0x2a3a <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    29f4:	c2 30       	cpi	r28, 0x02	; 2
    29f6:	09 f5       	brne	.+66     	; 0x2a3a <__vector_11+0x2d2>
    29f8:	23 2b       	or	r18, r19
    29fa:	f9 f4       	brne	.+62     	; 0x2a3a <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    29fc:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	86 0f       	add	r24, r22
    2a02:	84 30       	cpi	r24, 0x04	; 4
    2a04:	d0 f4       	brcc	.+52     	; 0x2a3a <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2a06:	8e ef       	ldi	r24, 0xFE	; 254
    2a08:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2a0c:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    2a10:	43 30       	cpi	r20, 0x03	; 3
    2a12:	21 f4       	brne	.+8      	; 0x2a1c <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2a14:	81 e2       	ldi	r24, 0x21	; 33
    2a16:	80 93 eb 00 	sts	0x00EB, r24
    2a1a:	16 c0       	rjmp	.+44     	; 0x2a48 <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2a1c:	89 e1       	ldi	r24, 0x19	; 25
    2a1e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	02 c0       	rjmp	.+4      	; 0x2a2c <__vector_11+0x2c4>
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	6a 95       	dec	r22
    2a2e:	e2 f7       	brpl	.-8      	; 0x2a28 <__vector_11+0x2c0>
    2a30:	ea ee       	ldi	r30, 0xEA	; 234
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 83       	st	Z, r24
					UERST = 0;
    2a36:	10 82       	st	Z, r1
    2a38:	07 c0       	rjmp	.+14     	; 0x2a48 <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2a3a:	81 e2       	ldi	r24, 0x21	; 33
    2a3c:	80 93 eb 00 	sts	0x00EB, r24
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2a42:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2a44:	51 11       	cpse	r21, r1
    2a46:	f6 ce       	rjmp	.-532    	; 0x2834 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2a48:	ff 91       	pop	r31
    2a4a:	ef 91       	pop	r30
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	bf 91       	pop	r27
    2a52:	af 91       	pop	r26
    2a54:	9f 91       	pop	r25
    2a56:	8f 91       	pop	r24
    2a58:	7f 91       	pop	r23
    2a5a:	6f 91       	pop	r22
    2a5c:	5f 91       	pop	r21
    2a5e:	4f 91       	pop	r20
    2a60:	3f 91       	pop	r19
    2a62:	2f 91       	pop	r18
    2a64:	1f 91       	pop	r17
    2a66:	0f 91       	pop	r16
    2a68:	0f 90       	pop	r0
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	0f 90       	pop	r0
    2a6e:	1f 90       	pop	r1
    2a70:	18 95       	reti

00002a72 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2a78:	ec 01       	movw	r28, r24
    2a7a:	21 96       	adiw	r28, 0x01	; 1
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	14 91       	lpm	r17, Z
		if (!c) break;
    2a80:	11 23       	and	r17, r17
    2a82:	69 f0       	breq	.+26     	; 0x2a9e <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    2a84:	1a 30       	cpi	r17, 0x0A	; 10
    2a86:	19 f4       	brne	.+6      	; 0x2a8e <print_P+0x1c>
    2a88:	8d e0       	ldi	r24, 0x0D	; 13
    2a8a:	0e 94 1b 13 	call	0x2636	; 0x2636 <m_usb_tx_char>
		usb_tx_char(c);
    2a8e:	81 2f       	mov	r24, r17
    2a90:	0e 94 1b 13 	call	0x2636	; 0x2636 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2a94:	fe 01       	movw	r30, r28
    2a96:	14 91       	lpm	r17, Z
    2a98:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    2a9a:	11 11       	cpse	r17, r1
    2a9c:	f3 cf       	rjmp	.-26     	; 0x2a84 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	1f 91       	pop	r17
    2aa4:	08 95       	ret

00002aa6 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2aa6:	ef 92       	push	r14
    2aa8:	ff 92       	push	r15
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	27 97       	sbiw	r28, 0x07	; 7
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    2ac2:	8e 01       	movw	r16, r28
    2ac4:	0f 5f       	subi	r16, 0xFF	; 255
    2ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac8:	27 e0       	ldi	r18, 0x07	; 7
    2aca:	f8 01       	movw	r30, r16
    2acc:	11 92       	st	Z+, r1
    2ace:	2a 95       	dec	r18
    2ad0:	e9 f7       	brne	.-6      	; 0x2acc <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2ad2:	4a e0       	ldi	r20, 0x0A	; 10
    2ad4:	b8 01       	movw	r22, r16
    2ad6:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__itoa_ncheck>
    2ada:	7e 01       	movw	r14, r28
    2adc:	f8 e0       	ldi	r31, 0x08	; 8
    2ade:	ef 0e       	add	r14, r31
    2ae0:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	81 91       	ld	r24, Z+
    2ae6:	8f 01       	movw	r16, r30
    2ae8:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    2aea:	0e 94 1b 13 	call	0x2636	; 0x2636 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    2aee:	0e 15       	cp	r16, r14
    2af0:	1f 05       	cpc	r17, r15
    2af2:	b9 f7       	brne	.-18     	; 0x2ae2 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2af4:	27 96       	adiw	r28, 0x07	; 7
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	08 95       	ret

00002b0e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2b12:	ec eb       	ldi	r30, 0xBC	; 188
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	88 23       	and	r24, r24
    2b1a:	34 f0       	brlt	.+12     	; 0x2b28 <twi_wait+0x1a>
    2b1c:	2f 5f       	subi	r18, 0xFF	; 255
    2b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b20:	29 3e       	cpi	r18, 0xE9	; 233
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	38 07       	cpc	r19, r24
    2b26:	b9 f7       	brne	.-18     	; 0x2b16 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	28 3e       	cpi	r18, 0xE8	; 232
    2b2c:	33 40       	sbci	r19, 0x03	; 3
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <twi_wait+0x24>
    2b30:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2b32:	08 95       	ret

00002b34 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2b34:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2b38:	84 e8       	ldi	r24, 0x84	; 132
    2b3a:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2b3e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <twi_wait>
    2b42:	88 23       	and	r24, r24
    2b44:	19 f0       	breq	.+6      	; 0x2b4c <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2b46:	80 91 b9 00 	lds	r24, 0x00B9
    2b4a:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    2b4c:	08 95       	ret

00002b4e <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2b4e:	cf 93       	push	r28
    2b50:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2b52:	94 ea       	ldi	r25, 0xA4	; 164
    2b54:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2b58:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <twi_wait>
    2b5c:	88 23       	and	r24, r24
    2b5e:	61 f0       	breq	.+24     	; 0x2b78 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2b60:	8c 2f       	mov	r24, r28
    2b62:	88 0f       	add	r24, r24
    2b64:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2b68:	80 32       	cpi	r24, 0x20	; 32
    2b6a:	29 f4       	brne	.+10     	; 0x2b76 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2b6c:	84 e9       	ldi	r24, 0x94	; 148
    2b6e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <start_write+0x2a>
	}	
	return 1;	// success
    2b76:	81 e0       	ldi	r24, 0x01	; 1
}	
    2b78:	cf 91       	pop	r28
    2b7a:	08 95       	ret

00002b7c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2b7c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2b80:	88 e5       	ldi	r24, 0x58	; 88
    2b82:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <start_write>
    2b86:	88 23       	and	r24, r24
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <m_wii_open+0x10>
    2b8a:	cd c0       	rjmp	.+410    	; 0x2d26 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2b8c:	80 e3       	ldi	r24, 0x30	; 48
    2b8e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2b92:	88 23       	and	r24, r24
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <m_wii_open+0x1c>
    2b96:	c9 c0       	rjmp	.+402    	; 0x2d2a <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2b9e:	88 23       	and	r24, r24
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <m_wii_open+0x28>
    2ba2:	c5 c0       	rjmp	.+394    	; 0x2d2e <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2ba4:	84 e9       	ldi	r24, 0x94	; 148
    2ba6:	80 93 bc 00 	sts	0x00BC, r24
    2baa:	83 ec       	ldi	r24, 0xC3	; 195
    2bac:	99 e0       	ldi	r25, 0x09	; 9
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <m_wii_open+0x32>
    2bb2:	00 c0       	rjmp	.+0      	; 0x2bb4 <m_wii_open+0x38>
    2bb4:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2bb6:	88 e5       	ldi	r24, 0x58	; 88
    2bb8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <start_write>
    2bbc:	88 23       	and	r24, r24
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <m_wii_open+0x46>
    2bc0:	b8 c0       	rjmp	.+368    	; 0x2d32 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2bc8:	88 23       	and	r24, r24
    2bca:	09 f4       	brne	.+2      	; 0x2bce <m_wii_open+0x52>
    2bcc:	b4 c0       	rjmp	.+360    	; 0x2d36 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2bd4:	88 23       	and	r24, r24
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <m_wii_open+0x5e>
    2bd8:	b0 c0       	rjmp	.+352    	; 0x2d3a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2be0:	88 23       	and	r24, r24
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <m_wii_open+0x6a>
    2be4:	ac c0       	rjmp	.+344    	; 0x2d3e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2bec:	88 23       	and	r24, r24
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <m_wii_open+0x76>
    2bf0:	a8 c0       	rjmp	.+336    	; 0x2d42 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2bf8:	88 23       	and	r24, r24
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <m_wii_open+0x82>
    2bfc:	a4 c0       	rjmp	.+328    	; 0x2d46 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c04:	88 23       	and	r24, r24
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <m_wii_open+0x8e>
    2c08:	a0 c0       	rjmp	.+320    	; 0x2d4a <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c10:	88 23       	and	r24, r24
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <m_wii_open+0x9a>
    2c14:	9c c0       	rjmp	.+312    	; 0x2d4e <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2c16:	80 e9       	ldi	r24, 0x90	; 144
    2c18:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c1c:	88 23       	and	r24, r24
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <m_wii_open+0xa6>
    2c20:	98 c0       	rjmp	.+304    	; 0x2d52 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2c22:	84 e9       	ldi	r24, 0x94	; 148
    2c24:	80 93 bc 00 	sts	0x00BC, r24
    2c28:	83 ec       	ldi	r24, 0xC3	; 195
    2c2a:	99 e0       	ldi	r25, 0x09	; 9
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <m_wii_open+0xb0>
    2c30:	00 c0       	rjmp	.+0      	; 0x2c32 <m_wii_open+0xb6>
    2c32:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2c34:	88 e5       	ldi	r24, 0x58	; 88
    2c36:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <start_write>
    2c3a:	88 23       	and	r24, r24
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <m_wii_open+0xc4>
    2c3e:	8b c0       	rjmp	.+278    	; 0x2d56 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2c40:	87 e0       	ldi	r24, 0x07	; 7
    2c42:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c46:	88 23       	and	r24, r24
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <m_wii_open+0xd0>
    2c4a:	87 c0       	rjmp	.+270    	; 0x2d5a <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c52:	88 23       	and	r24, r24
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <m_wii_open+0xdc>
    2c56:	83 c0       	rjmp	.+262    	; 0x2d5e <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    2c58:	81 e4       	ldi	r24, 0x41	; 65
    2c5a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c5e:	88 23       	and	r24, r24
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <m_wii_open+0xe8>
    2c62:	7f c0       	rjmp	.+254    	; 0x2d62 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2c64:	84 e9       	ldi	r24, 0x94	; 148
    2c66:	80 93 bc 00 	sts	0x00BC, r24
    2c6a:	83 ec       	ldi	r24, 0xC3	; 195
    2c6c:	99 e0       	ldi	r25, 0x09	; 9
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <m_wii_open+0xf2>
    2c72:	00 c0       	rjmp	.+0      	; 0x2c74 <m_wii_open+0xf8>
    2c74:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2c76:	88 e5       	ldi	r24, 0x58	; 88
    2c78:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <start_write>
    2c7c:	88 23       	and	r24, r24
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <m_wii_open+0x106>
    2c80:	72 c0       	rjmp	.+228    	; 0x2d66 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2c82:	8a e1       	ldi	r24, 0x1A	; 26
    2c84:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c88:	88 23       	and	r24, r24
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <m_wii_open+0x112>
    2c8c:	6e c0       	rjmp	.+220    	; 0x2d6a <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2c8e:	80 e4       	ldi	r24, 0x40	; 64
    2c90:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2c94:	88 23       	and	r24, r24
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <m_wii_open+0x11e>
    2c98:	6a c0       	rjmp	.+212    	; 0x2d6e <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2ca0:	88 23       	and	r24, r24
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <m_wii_open+0x12a>
    2ca4:	66 c0       	rjmp	.+204    	; 0x2d72 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2ca6:	84 e9       	ldi	r24, 0x94	; 148
    2ca8:	80 93 bc 00 	sts	0x00BC, r24
    2cac:	83 ec       	ldi	r24, 0xC3	; 195
    2cae:	99 e0       	ldi	r25, 0x09	; 9
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <m_wii_open+0x134>
    2cb4:	00 c0       	rjmp	.+0      	; 0x2cb6 <m_wii_open+0x13a>
    2cb6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2cb8:	88 e5       	ldi	r24, 0x58	; 88
    2cba:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <start_write>
    2cbe:	88 23       	and	r24, r24
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <m_wii_open+0x148>
    2cc2:	59 c0       	rjmp	.+178    	; 0x2d76 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2cc4:	83 e3       	ldi	r24, 0x33	; 51
    2cc6:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2cca:	88 23       	and	r24, r24
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <m_wii_open+0x154>
    2cce:	55 c0       	rjmp	.+170    	; 0x2d7a <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2cd0:	83 e0       	ldi	r24, 0x03	; 3
    2cd2:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2cd6:	88 23       	and	r24, r24
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <m_wii_open+0x160>
    2cda:	51 c0       	rjmp	.+162    	; 0x2d7e <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2cdc:	84 e9       	ldi	r24, 0x94	; 148
    2cde:	80 93 bc 00 	sts	0x00BC, r24
    2ce2:	83 ec       	ldi	r24, 0xC3	; 195
    2ce4:	99 e0       	ldi	r25, 0x09	; 9
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <m_wii_open+0x16a>
    2cea:	00 c0       	rjmp	.+0      	; 0x2cec <m_wii_open+0x170>
    2cec:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2cee:	88 e5       	ldi	r24, 0x58	; 88
    2cf0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <start_write>
    2cf4:	88 23       	and	r24, r24
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <m_wii_open+0x17e>
    2cf8:	44 c0       	rjmp	.+136    	; 0x2d82 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    2cfa:	80 e3       	ldi	r24, 0x30	; 48
    2cfc:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2d00:	88 23       	and	r24, r24
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <m_wii_open+0x18a>
    2d04:	40 c0       	rjmp	.+128    	; 0x2d86 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    2d06:	88 e0       	ldi	r24, 0x08	; 8
    2d08:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2d0c:	88 23       	and	r24, r24
    2d0e:	e9 f1       	breq	.+122    	; 0x2d8a <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2d10:	84 e9       	ldi	r24, 0x94	; 148
    2d12:	80 93 bc 00 	sts	0x00BC, r24
    2d16:	83 ec       	ldi	r24, 0xC3	; 195
    2d18:	99 e0       	ldi	r25, 0x09	; 9
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <m_wii_open+0x19e>
    2d1e:	00 c0       	rjmp	.+0      	; 0x2d20 <m_wii_open+0x1a4>
    2d20:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2d8c:	08 95       	ret

00002d8e <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2d8e:	cf 93       	push	r28
    2d90:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2d92:	94 ea       	ldi	r25, 0xA4	; 164
    2d94:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2d98:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <twi_wait>
    2d9c:	88 23       	and	r24, r24
    2d9e:	69 f0       	breq	.+26     	; 0x2dba <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2da0:	8c 2f       	mov	r24, r28
    2da2:	88 0f       	add	r24, r24
    2da4:	8f 5f       	subi	r24, 0xFF	; 255
    2da6:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2daa:	88 34       	cpi	r24, 0x48	; 72
    2dac:	29 f4       	brne	.+10     	; 0x2db8 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2dae:	84 e9       	ldi	r24, 0x94	; 148
    2db0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <start_read+0x2c>
	}	
	return 1;	// success
    2db8:	81 e0       	ldi	r24, 0x01	; 1
}	
    2dba:	cf 91       	pop	r28
    2dbc:	08 95       	ret

00002dbe <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2dbe:	ef 92       	push	r14
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	60 97       	sbiw	r28, 0x10	; 16
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	08 2f       	mov	r16, r24
    2ddc:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2dde:	fe 01       	movw	r30, r28
    2de0:	31 96       	adiw	r30, 0x01	; 1
    2de2:	80 e1       	ldi	r24, 0x10	; 16
    2de4:	df 01       	movw	r26, r30
    2de6:	1d 92       	st	X+, r1
    2de8:	8a 95       	dec	r24
    2dea:	e9 f7       	brne	.-6      	; 0x2de6 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2dec:	88 e5       	ldi	r24, 0x58	; 88
    2dee:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <start_write>
    2df2:	88 23       	and	r24, r24
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <m_wii_read+0x3a>
    2df6:	6e c0       	rjmp	.+220    	; 0x2ed4 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    2df8:	86 e3       	ldi	r24, 0x36	; 54
    2dfa:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <send_byte>
    2dfe:	88 23       	and	r24, r24
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <m_wii_read+0x46>
    2e02:	6a c0       	rjmp	.+212    	; 0x2ed8 <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2e04:	84 e9       	ldi	r24, 0x94	; 148
    2e06:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e0a:	b8 e0       	ldi	r27, 0x08	; 8
    2e0c:	ba 95       	dec	r27
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <m_wii_read+0x4e>
    2e10:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2e12:	88 e5       	ldi	r24, 0x58	; 88
    2e14:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <start_read>
    2e18:	88 23       	and	r24, r24
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <m_wii_read+0x60>
    2e1c:	5f c0       	rjmp	.+190    	; 0x2edc <m_wii_read+0x11e>
    2e1e:	be 01       	movw	r22, r28
    2e20:	6f 5f       	subi	r22, 0xFF	; 255
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	9e 01       	movw	r18, r28
    2e26:	20 5f       	subi	r18, 0xF0	; 240
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2e2a:	ec eb       	ldi	r30, 0xBC	; 188
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2e30:	4b eb       	ldi	r20, 0xBB	; 187
    2e32:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2e34:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2e36:	80 81       	ld	r24, Z
    2e38:	88 23       	and	r24, r24
    2e3a:	ec f7       	brge	.-6      	; 0x2e36 <m_wii_read+0x78>
		temp[i] = TWDR;
    2e3c:	da 01       	movw	r26, r20
    2e3e:	8c 91       	ld	r24, X
    2e40:	db 01       	movw	r26, r22
    2e42:	8d 93       	st	X+, r24
    2e44:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2e46:	a2 17       	cp	r26, r18
    2e48:	b3 07       	cpc	r27, r19
    2e4a:	a1 f7       	brne	.-24     	; 0x2e34 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2e4c:	84 e8       	ldi	r24, 0x84	; 132
    2e4e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2e52:	ec eb       	ldi	r30, 0xBC	; 188
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	88 23       	and	r24, r24
    2e5a:	ec f7       	brge	.-6      	; 0x2e56 <m_wii_read+0x98>
	temp[15] = TWDR;
    2e5c:	80 91 bb 00 	lds	r24, 0x00BB
    2e60:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2e62:	84 e9       	ldi	r24, 0x94	; 148
    2e64:	80 93 bc 00 	sts	0x00BC, r24
    2e68:	fe 01       	movw	r30, r28
    2e6a:	34 96       	adiw	r30, 0x04	; 4
    2e6c:	e0 2e       	mov	r14, r16
    2e6e:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2e70:	80 81       	ld	r24, Z
    2e72:	98 2f       	mov	r25, r24
    2e74:	90 73       	andi	r25, 0x30	; 48
    2e76:	af 01       	movw	r20, r30
    2e78:	42 50       	subi	r20, 0x02	; 2
    2e7a:	51 09       	sbc	r21, r1
    2e7c:	da 01       	movw	r26, r20
    2e7e:	4c 91       	ld	r20, X
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	b0 e1       	ldi	r27, 0x10	; 16
    2e84:	9b 9f       	mul	r25, r27
    2e86:	40 0d       	add	r20, r0
    2e88:	51 1d       	adc	r21, r1
    2e8a:	11 24       	eor	r1, r1
    2e8c:	d7 01       	movw	r26, r14
    2e8e:	4d 93       	st	X+, r20
    2e90:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2e92:	48 2f       	mov	r20, r24
    2e94:	40 7c       	andi	r20, 0xC0	; 192
    2e96:	50 e0       	ldi	r21, 0x00	; 0
    2e98:	44 0f       	add	r20, r20
    2e9a:	55 1f       	adc	r21, r21
    2e9c:	44 0f       	add	r20, r20
    2e9e:	55 1f       	adc	r21, r21
    2ea0:	bf 01       	movw	r22, r30
    2ea2:	61 50       	subi	r22, 0x01	; 1
    2ea4:	71 09       	sbc	r23, r1
    2ea6:	db 01       	movw	r26, r22
    2ea8:	9c 91       	ld	r25, X
    2eaa:	49 0f       	add	r20, r25
    2eac:	51 1d       	adc	r21, r1
    2eae:	d7 01       	movw	r26, r14
    2eb0:	13 96       	adiw	r26, 0x03	; 3
    2eb2:	5c 93       	st	X, r21
    2eb4:	4e 93       	st	-X, r20
    2eb6:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2eb8:	8f 70       	andi	r24, 0x0F	; 15
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	15 96       	adiw	r26, 0x05	; 5
    2ebe:	9c 93       	st	X, r25
    2ec0:	8e 93       	st	-X, r24
    2ec2:	14 97       	sbiw	r26, 0x04	; 4
    2ec4:	33 96       	adiw	r30, 0x03	; 3
    2ec6:	b6 e0       	ldi	r27, 0x06	; 6
    2ec8:	eb 0e       	add	r14, r27
    2eca:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2ecc:	2e 17       	cp	r18, r30
    2ece:	3f 07       	cpc	r19, r31
    2ed0:	79 f6       	brne	.-98     	; 0x2e70 <m_wii_read+0xb2>
    2ed2:	06 c0       	rjmp	.+12     	; 0x2ee0 <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	05 c0       	rjmp	.+10     	; 0x2ee2 <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	03 c0       	rjmp	.+6      	; 0x2ee2 <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
}
    2ee2:	60 96       	adiw	r28, 0x10	; 16
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	08 95       	ret

00002efc <__vector_3>:
		m_wait(15);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){
    2efc:	1f 92       	push	r1
    2efe:	0f 92       	push	r0
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	0f 92       	push	r0
    2f04:	11 24       	eor	r1, r1
    2f06:	0f 93       	push	r16
    2f08:	1f 93       	push	r17
    2f0a:	2f 93       	push	r18
    2f0c:	3f 93       	push	r19
    2f0e:	4f 93       	push	r20
    2f10:	5f 93       	push	r21
    2f12:	6f 93       	push	r22
    2f14:	7f 93       	push	r23
    2f16:	8f 93       	push	r24
    2f18:	9f 93       	push	r25
    2f1a:	af 93       	push	r26
    2f1c:	bf 93       	push	r27
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	ef 93       	push	r30
    2f24:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    2f26:	6a e0       	ldi	r22, 0x0A	; 10
    2f28:	88 ea       	ldi	r24, 0xA8	; 168
    2f2a:	91 e0       	ldi	r25, 0x01	; 1
    2f2c:	0e 94 44 12 	call	0x2488	; 0x2488 <m_rf_read>
	switch(buffer[0]){
    2f30:	80 91 a8 01 	lds	r24, 0x01A8
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	fc 01       	movw	r30, r24
    2f38:	e0 5a       	subi	r30, 0xA0	; 160
    2f3a:	f1 09       	sbc	r31, r1
    2f3c:	ea 30       	cpi	r30, 0x0A	; 10
    2f3e:	f1 05       	cpc	r31, r1
    2f40:	08 f0       	brcs	.+2      	; 0x2f44 <__vector_3+0x48>
    2f42:	db c0       	rjmp	.+438    	; 0x30fa <__vector_3+0x1fe>
    2f44:	e3 5a       	subi	r30, 0xA3	; 163
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    2f4c:	83 e4       	ldi	r24, 0x43	; 67
    2f4e:	93 e0       	ldi	r25, 0x03	; 3
    2f50:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			state = 1;
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	90 93 b7 01 	sts	0x01B7, r25
    2f5c:	80 93 b6 01 	sts	0x01B6, r24
			break;
    2f60:	cc c0       	rjmp	.+408    	; 0x30fa <__vector_3+0x1fe>
		case 0xA1:
			m_usb_tx_string("Play \n");
    2f62:	8c e3       	ldi	r24, 0x3C	; 60
    2f64:	93 e0       	ldi	r25, 0x03	; 3
    2f66:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			if(check(PINC, 6)){
    2f6a:	36 9b       	sbis	0x06, 6	; 6
    2f6c:	03 c0       	rjmp	.+6      	; 0x2f74 <__vector_3+0x78>
				set(PORTB, 2); // red light
    2f6e:	2a 9a       	sbi	0x05, 2	; 5
				clear(PORTB, 3);
    2f70:	2b 98       	cbi	0x05, 3	; 5
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <__vector_3+0x7c>
			}
			else{
				set(PORTB, 3); // blue light
    2f74:	2b 9a       	sbi	0x05, 3	; 5
				clear(PORTB, 2);
    2f76:	2a 98       	cbi	0x05, 2	; 5
			}
			state = 2; 
    2f78:	82 e0       	ldi	r24, 0x02	; 2
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	90 93 b7 01 	sts	0x01B7, r25
    2f80:	80 93 b6 01 	sts	0x01B6, r24
			OCR1B = full_speed;
    2f84:	8c eb       	ldi	r24, 0xBC	; 188
    2f86:	92 e0       	ldi	r25, 0x02	; 2
    2f88:	90 93 8b 00 	sts	0x008B, r25
    2f8c:	80 93 8a 00 	sts	0x008A, r24
			OCR1C = full_speed;
    2f90:	90 93 8d 00 	sts	0x008D, r25
    2f94:	80 93 8c 00 	sts	0x008C, r24
			break;
    2f98:	b0 c0       	rjmp	.+352    	; 0x30fa <__vector_3+0x1fe>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    2f9a:	84 e3       	ldi	r24, 0x34	; 52
    2f9c:	93 e0       	ldi	r25, 0x03	; 3
    2f9e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			scoreR = buffer[1];
    2fa2:	80 91 a9 01 	lds	r24, 0x01A9
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	90 93 a7 01 	sts	0x01A7, r25
    2fac:	80 93 a6 01 	sts	0x01A6, r24
			scoreB = buffer[2];
    2fb0:	80 91 aa 01 	lds	r24, 0x01AA
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	90 93 a5 01 	sts	0x01A5, r25
    2fba:	80 93 a4 01 	sts	0x01A4, r24
			OCR1B = 0;
    2fbe:	10 92 8b 00 	sts	0x008B, r1
    2fc2:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    2fc6:	10 92 8d 00 	sts	0x008D, r1
    2fca:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    2fce:	10 92 b7 01 	sts	0x01B7, r1
    2fd2:	10 92 b6 01 	sts	0x01B6, r1
			break;
    2fd6:	91 c0       	rjmp	.+290    	; 0x30fa <__vector_3+0x1fe>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    2fd8:	8c e2       	ldi	r24, 0x2C	; 44
    2fda:	93 e0       	ldi	r25, 0x03	; 3
    2fdc:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			scoreR = buffer[1];
    2fe0:	80 91 a9 01 	lds	r24, 0x01A9
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	90 93 a7 01 	sts	0x01A7, r25
    2fea:	80 93 a6 01 	sts	0x01A6, r24
			scoreB = buffer[2];
    2fee:	80 91 aa 01 	lds	r24, 0x01AA
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	90 93 a5 01 	sts	0x01A5, r25
    2ff8:	80 93 a4 01 	sts	0x01A4, r24
			OCR1B = 0;
    2ffc:	10 92 8b 00 	sts	0x008B, r1
    3000:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3004:	10 92 8d 00 	sts	0x008D, r1
    3008:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    300c:	10 92 b7 01 	sts	0x01B7, r1
    3010:	10 92 b6 01 	sts	0x01B6, r1
			break;
    3014:	72 c0       	rjmp	.+228    	; 0x30fa <__vector_3+0x1fe>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    3016:	85 e2       	ldi	r24, 0x25	; 37
    3018:	93 e0       	ldi	r25, 0x03	; 3
    301a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			state = 0;
    301e:	10 92 b7 01 	sts	0x01B7, r1
    3022:	10 92 b6 01 	sts	0x01B6, r1
			OCR1B = 0;
    3026:	10 92 8b 00 	sts	0x008B, r1
    302a:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    302e:	10 92 8d 00 	sts	0x008D, r1
    3032:	10 92 8c 00 	sts	0x008C, r1
			break;
    3036:	61 c0       	rjmp	.+194    	; 0x30fa <__vector_3+0x1fe>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    3038:	8b e1       	ldi	r24, 0x1B	; 27
    303a:	93 e0       	ldi	r25, 0x03	; 3
    303c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			state = 0;
    3040:	10 92 b7 01 	sts	0x01B7, r1
    3044:	10 92 b6 01 	sts	0x01B6, r1
			OCR1B = 0;
    3048:	10 92 8b 00 	sts	0x008B, r1
    304c:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;			
    3050:	10 92 8d 00 	sts	0x008D, r1
    3054:	10 92 8c 00 	sts	0x008C, r1
			break;
    3058:	50 c0       	rjmp	.+160    	; 0x30fa <__vector_3+0x1fe>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    305a:	80 e1       	ldi	r24, 0x10	; 16
    305c:	93 e0       	ldi	r25, 0x03	; 3
    305e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			state = 0;
    3062:	10 92 b7 01 	sts	0x01B7, r1
    3066:	10 92 b6 01 	sts	0x01B6, r1
			OCR1B = 0;
    306a:	10 92 8b 00 	sts	0x008B, r1
    306e:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3072:	10 92 8d 00 	sts	0x008D, r1
    3076:	10 92 8c 00 	sts	0x008C, r1
			break;
    307a:	3f c0       	rjmp	.+126    	; 0x30fa <__vector_3+0x1fe>
		case 0xA9: // teammates got the puck, extract No. and location
			puck_holder = buffer[1]; // buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
    307c:	80 91 a9 01 	lds	r24, 0x01A9
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	90 93 93 01 	sts	0x0193, r25
    3086:	80 93 92 01 	sts	0x0192, r24
			puck_loc[0] = *(int*)&buffer[2];
    308a:	0e e8       	ldi	r16, 0x8E	; 142
    308c:	11 e0       	ldi	r17, 0x01	; 1
    308e:	e8 ea       	ldi	r30, 0xA8	; 168
    3090:	f1 e0       	ldi	r31, 0x01	; 1
    3092:	82 81       	ldd	r24, Z+2	; 0x02
    3094:	93 81       	ldd	r25, Z+3	; 0x03
    3096:	d8 01       	movw	r26, r16
    3098:	8d 93       	st	X+, r24
    309a:	9c 93       	st	X, r25
			puck_loc[1] = *(int*)&buffer[4];
    309c:	c0 e9       	ldi	r28, 0x90	; 144
    309e:	d1 e0       	ldi	r29, 0x01	; 1
    30a0:	84 81       	ldd	r24, Z+4	; 0x04
    30a2:	95 81       	ldd	r25, Z+5	; 0x05
    30a4:	99 83       	std	Y+1, r25	; 0x01
    30a6:	88 83       	st	Y, r24
			m_usb_tx_string("No. ");		
    30a8:	8b e0       	ldi	r24, 0x0B	; 11
    30aa:	93 e0       	ldi	r25, 0x03	; 3
    30ac:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			m_usb_tx_int(puck_holder);
    30b0:	80 91 92 01 	lds	r24, 0x0192
    30b4:	90 91 93 01 	lds	r25, 0x0193
    30b8:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
			m_usb_tx_string("got the puck!\n");
    30bc:	8c ef       	ldi	r24, 0xFC	; 252
    30be:	92 e0       	ldi	r25, 0x02	; 2
    30c0:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			m_usb_tx_string("Its location is: ");
    30c4:	8a ee       	ldi	r24, 0xEA	; 234
    30c6:	92 e0       	ldi	r25, 0x02	; 2
    30c8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			m_usb_tx_int(puck_loc[0]);
    30cc:	f8 01       	movw	r30, r16
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
			m_usb_tx_string("		y:");
    30d6:	85 ee       	ldi	r24, 0xE5	; 229
    30d8:	92 e0       	ldi	r25, 0x02	; 2
    30da:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			m_usb_tx_int(puck_loc[1]);
    30de:	88 81       	ld	r24, Y
    30e0:	99 81       	ldd	r25, Y+1	; 0x01
    30e2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
			m_usb_tx_string("\n");
    30e6:	83 ee       	ldi	r24, 0xE3	; 227
    30e8:	92 e0       	ldi	r25, 0x02	; 2
    30ea:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
			state = 4;
    30ee:	84 e0       	ldi	r24, 0x04	; 4
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	90 93 b7 01 	sts	0x01B7, r25
    30f6:	80 93 b6 01 	sts	0x01B6, r24
			break;
		default:
			break;
	}
}
    30fa:	ff 91       	pop	r31
    30fc:	ef 91       	pop	r30
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	bf 91       	pop	r27
    3104:	af 91       	pop	r26
    3106:	9f 91       	pop	r25
    3108:	8f 91       	pop	r24
    310a:	7f 91       	pop	r23
    310c:	6f 91       	pop	r22
    310e:	5f 91       	pop	r21
    3110:	4f 91       	pop	r20
    3112:	3f 91       	pop	r19
    3114:	2f 91       	pop	r18
    3116:	1f 91       	pop	r17
    3118:	0f 91       	pop	r16
    311a:	0f 90       	pop	r0
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	0f 90       	pop	r0
    3120:	1f 90       	pop	r1
    3122:	18 95       	reti

00003124 <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    3124:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    3126:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    3128:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    312a:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
    312c:	80 e2       	ldi	r24, 0x20	; 32
    312e:	93 e0       	ldi	r25, 0x03	; 3
    3130:	90 93 89 00 	sts	0x0089, r25
    3134:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    3138:	10 92 8b 00 	sts	0x008B, r1
    313c:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
    3140:	10 92 8d 00 	sts	0x008D, r1
    3144:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    3148:	a1 e8       	ldi	r26, 0x81	; 129
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	8c 91       	ld	r24, X
    314e:	80 61       	ori	r24, 0x10	; 16
    3150:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    3152:	8c 91       	ld	r24, X
    3154:	88 60       	ori	r24, 0x08	; 8
    3156:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    3158:	e0 e8       	ldi	r30, 0x80	; 128
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	82 60       	ori	r24, 0x02	; 2
    3160:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    3162:	80 81       	ld	r24, Z
    3164:	81 60       	ori	r24, 0x01	; 1
    3166:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    3168:	80 81       	ld	r24, Z
    316a:	80 62       	ori	r24, 0x20	; 32
    316c:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    316e:	80 81       	ld	r24, Z
    3170:	8f 7e       	andi	r24, 0xEF	; 239
    3172:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    3174:	80 81       	ld	r24, Z
    3176:	88 60       	ori	r24, 0x08	; 8
    3178:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    317a:	80 81       	ld	r24, Z
    317c:	8b 7f       	andi	r24, 0xFB	; 251
    317e:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    3180:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    3182:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    3184:	8c 91       	ld	r24, X
    3186:	8b 7f       	andi	r24, 0xFB	; 251
    3188:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    318a:	8c 91       	ld	r24, X
    318c:	8d 7f       	andi	r24, 0xFD	; 253
    318e:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    3190:	8c 91       	ld	r24, X
    3192:	81 60       	ori	r24, 0x01	; 1
    3194:	8c 93       	st	X, r24
    3196:	08 95       	ret

00003198 <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    3198:	e1 e6       	ldi	r30, 0x61	; 97
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 e8       	ldi	r24, 0x80	; 128
    319e:	80 83       	st	Z, r24
    31a0:	10 82       	st	Z, r1
	
	m_usb_init();
    31a2:	0e 94 02 13 	call	0x2604	; 0x2604 <m_usb_init>
	
	//m_wii_open();
	m_red(ON);
    31a6:	6e 9a       	sbi	0x0d, 6	; 13
    31a8:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
    31aa:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <m_wii_open>
    31ae:	88 23       	and	r24, r24
    31b0:	e1 f3       	breq	.-8      	; 0x31aa <main+0x12>
	m_red(OFF);
    31b2:	6e 9a       	sbi	0x0d, 6	; 13
    31b4:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);
    31b6:	6e 9a       	sbi	0x0d, 6	; 13
    31b8:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    31ba:	0e 94 dd 11 	call	0x23ba	; 0x23ba <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    31be:	4a e0       	ldi	r20, 0x0A	; 10
    31c0:	6c e0       	ldi	r22, 0x0C	; 12
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	0e 94 ee 11 	call	0x23dc	; 0x23dc <m_rf_open>
	m_red(OFF);
    31c8:	6e 9a       	sbi	0x0d, 6	; 13
    31ca:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    31cc:	0e 94 92 18 	call	0x3124	; 0x3124 <init_timer>
	init_ADC();
    31d0:	0e 94 31 02 	call	0x462	; 0x462 <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    31d4:	3e 98       	cbi	0x07, 6	; 7
	set(DDRB, 2);
    31d6:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    31d8:	23 9a       	sbi	0x04, 3	; 4
	state = 3;
    31da:	83 e0       	ldi	r24, 0x03	; 3
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	90 93 b7 01 	sts	0x01B7, r25
    31e2:	80 93 b6 01 	sts	0x01B6, r24
	
	if(check(PINC, 6)){
    31e6:	36 9b       	sbis	0x06, 6	; 6
    31e8:	34 c0       	rjmp	.+104    	; 0x3252 <main+0xba>
		set(PORTB, 2); // red light
    31ea:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
    31ec:	2b 98       	cbi	0x05, 3	; 5
		goal[0] = GateB;  // left gate
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a9 eb       	ldi	r26, 0xB9	; 185
    31f4:	b3 ec       	ldi	r27, 0xC3	; 195
    31f6:	80 93 33 01 	sts	0x0133, r24
    31fa:	90 93 34 01 	sts	0x0134, r25
    31fe:	a0 93 35 01 	sts	0x0135, r26
    3202:	b0 93 36 01 	sts	0x0136, r27
		desPos[0] = -xline;  // left defense line 
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	a8 e4       	ldi	r26, 0x48	; 72
    320c:	b3 ec       	ldi	r27, 0xC3	; 195
    320e:	80 93 2b 01 	sts	0x012B, r24
    3212:	90 93 2c 01 	sts	0x012C, r25
    3216:	a0 93 2d 01 	sts	0x012D, r26
    321a:	b0 93 2e 01 	sts	0x012E, r27
				}
				m_red(TOGGLE);
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    321e:	68 94       	set
    3220:	bb 24       	eor	r11, r11
    3222:	b6 f8       	bld	r11, 6
				findPuck(state);
				localization(state, &goal[0], &c_wii[0], &dir[0]);
				//deterState(&state);
				break;
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    3224:	68 94       	set
    3226:	aa 24       	eor	r10, r10
    3228:	a2 f8       	bld	r10, 2
				m_usb_tx_string("sent messsage.\n");
				//deterState(&state);
				m_usb_tx_string("goal = ");
				m_usb_tx_int(goal[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
    322a:	0f 2e       	mov	r0, r31
    322c:	f7 e3       	ldi	r31, 0x37	; 55
    322e:	cf 2e       	mov	r12, r31
    3230:	f1 e0       	ldi	r31, 0x01	; 1
    3232:	df 2e       	mov	r13, r31
    3234:	f0 2d       	mov	r31, r0
				m_red(TOGGLE);
				localization(state, &desPos[0], &c_wii[0], &dir[0]);
				m_usb_tx_string("Desire Position = ");
				m_usb_tx_int(desPos[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(desPos[1]);
    3236:	0f 2e       	mov	r0, r31
    3238:	ff e2       	ldi	r31, 0x2F	; 47
    323a:	ef 2e       	mov	r14, r31
    323c:	f1 e0       	ldi	r31, 0x01	; 1
    323e:	ff 2e       	mov	r15, r31
    3240:	f0 2d       	mov	r31, r0
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
    3242:	0a e8       	ldi	r16, 0x8A	; 138
    3244:	10 e0       	ldi	r17, 0x00	; 0
				OCR1C = 0;
    3246:	cc e8       	ldi	r28, 0x8C	; 140
    3248:	d0 e0       	ldi	r29, 0x00	; 0
				if(check(PINC, 6)){
					toggle(PORTB, 2); // blue Red
					clear(PORTB, 3);
				}
				else{
					toggle(PORTB, 3); // red blue
    324a:	68 94       	set
    324c:	99 24       	eor	r9, r9
    324e:	93 f8       	bld	r9, 3
    3250:	1b c0       	rjmp	.+54     	; 0x3288 <main+0xf0>
		clear(PORTB, 3);
		goal[0] = GateB;  // left gate
		desPos[0] = -xline;  // left defense line 
	}
	else{
		set(PORTB, 3); // blue light
    3252:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
    3254:	2a 98       	cbi	0x05, 2	; 5
		goal[0] = GateA;  // right gate
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	a9 eb       	ldi	r26, 0xB9	; 185
    325c:	b3 e4       	ldi	r27, 0x43	; 67
    325e:	80 93 33 01 	sts	0x0133, r24
    3262:	90 93 34 01 	sts	0x0134, r25
    3266:	a0 93 35 01 	sts	0x0135, r26
    326a:	b0 93 36 01 	sts	0x0136, r27
		desPos[0] = xline;	// right defense line
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	a8 e4       	ldi	r26, 0x48	; 72
    3274:	b3 e4       	ldi	r27, 0x43	; 67
    3276:	80 93 2b 01 	sts	0x012B, r24
    327a:	90 93 2c 01 	sts	0x012C, r25
    327e:	a0 93 2d 01 	sts	0x012D, r26
    3282:	b0 93 2e 01 	sts	0x012E, r27
    3286:	cb cf       	rjmp	.-106    	; 0x321e <main+0x86>
	}
	while(1)
	{	
		m_usb_tx_string("state: ");
    3288:	84 e9       	ldi	r24, 0x94	; 148
    328a:	93 e0       	ldi	r25, 0x03	; 3
    328c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		m_usb_tx_int(state);
    3290:	80 91 b6 01 	lds	r24, 0x01B6
    3294:	90 91 b7 01 	lds	r25, 0x01B7
    3298:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
		m_usb_tx_string("\n");
    329c:	82 e9       	ldi	r24, 0x92	; 146
    329e:	93 e0       	ldi	r25, 0x03	; 3
    32a0:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		switch(state){
    32a4:	80 91 b6 01 	lds	r24, 0x01B6
    32a8:	90 91 b7 01 	lds	r25, 0x01B7
    32ac:	82 30       	cpi	r24, 0x02	; 2
    32ae:	91 05       	cpc	r25, r1
    32b0:	61 f1       	breq	.+88     	; 0x330a <main+0x172>
    32b2:	2c f4       	brge	.+10     	; 0x32be <main+0x126>
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	51 f0       	breq	.+20     	; 0x32cc <main+0x134>
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	71 f0       	breq	.+28     	; 0x32d8 <main+0x140>
    32bc:	bc c0       	rjmp	.+376    	; 0x3436 <main+0x29e>
    32be:	83 30       	cpi	r24, 0x03	; 3
    32c0:	91 05       	cpc	r25, r1
    32c2:	e1 f1       	breq	.+120    	; 0x333c <main+0x1a4>
    32c4:	04 97       	sbiw	r24, 0x04	; 4
    32c6:	09 f4       	brne	.+2      	; 0x32ca <main+0x132>
    32c8:	7f c0       	rjmp	.+254    	; 0x33c8 <main+0x230>
    32ca:	b5 c0       	rjmp	.+362    	; 0x3436 <main+0x29e>
			case 0:
				// stop
				OCR1B = 0;
    32cc:	f8 01       	movw	r30, r16
    32ce:	11 82       	std	Z+1, r1	; 0x01
    32d0:	10 82       	st	Z, r1
				OCR1C = 0;
    32d2:	19 82       	std	Y+1, r1	; 0x01
    32d4:	18 82       	st	Y, r1
				break;
    32d6:	af c0       	rjmp	.+350    	; 0x3436 <main+0x29e>
			case 1:		// comm test, flash a LED
				if(check(PINC, 6)){
    32d8:	36 9b       	sbis	0x06, 6	; 6
    32da:	05 c0       	rjmp	.+10     	; 0x32e6 <main+0x14e>
					toggle(PORTB, 2); // blue Red
    32dc:	85 b1       	in	r24, 0x05	; 5
    32de:	8a 25       	eor	r24, r10
    32e0:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 3);
    32e2:	2b 98       	cbi	0x05, 3	; 5
    32e4:	04 c0       	rjmp	.+8      	; 0x32ee <main+0x156>
				}
				else{
					toggle(PORTB, 3); // red blue
    32e6:	85 b1       	in	r24, 0x05	; 5
    32e8:	89 25       	eor	r24, r9
    32ea:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 2);
    32ec:	2a 98       	cbi	0x05, 2	; 5
				}
				m_red(TOGGLE);
    32ee:	6e 9a       	sbi	0x0d, 6	; 13
    32f0:	8e b1       	in	r24, 0x0e	; 14
    32f2:	8b 25       	eor	r24, r11
    32f4:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    32f6:	ff e3       	ldi	r31, 0x3F	; 63
    32f8:	2d e0       	ldi	r18, 0x0D	; 13
    32fa:	83 e0       	ldi	r24, 0x03	; 3
    32fc:	f1 50       	subi	r31, 0x01	; 1
    32fe:	20 40       	sbci	r18, 0x00	; 0
    3300:	80 40       	sbci	r24, 0x00	; 0
    3302:	e1 f7       	brne	.-8      	; 0x32fc <main+0x164>
    3304:	00 c0       	rjmp	.+0      	; 0x3306 <main+0x16e>
    3306:	00 00       	nop
    3308:	96 c0       	rjmp	.+300    	; 0x3436 <main+0x29e>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    330a:	6e 9a       	sbi	0x0d, 6	; 13
    330c:	8e b1       	in	r24, 0x0e	; 14
    330e:	8b 25       	eor	r24, r11
    3310:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    3312:	6a 9a       	sbi	0x0d, 2	; 13
    3314:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    3316:	80 91 b6 01 	lds	r24, 0x01B6
    331a:	90 91 b7 01 	lds	r25, 0x01B7
    331e:	0e 94 a7 03 	call	0x74e	; 0x74e <findPuck>
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    3322:	24 e9       	ldi	r18, 0x94	; 148
    3324:	31 e0       	ldi	r19, 0x01	; 1
    3326:	4c e9       	ldi	r20, 0x9C	; 156
    3328:	51 e0       	ldi	r21, 0x01	; 1
    332a:	63 e3       	ldi	r22, 0x33	; 51
    332c:	71 e0       	ldi	r23, 0x01	; 1
    332e:	80 91 b6 01 	lds	r24, 0x01B6
    3332:	90 91 b7 01 	lds	r25, 0x01B7
    3336:	0e 94 b3 0a 	call	0x1566	; 0x1566 <localization>
				//deterState(&state);
				break;
    333a:	7d c0       	rjmp	.+250    	; 0x3436 <main+0x29e>
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    333c:	6a 9a       	sbi	0x0d, 2	; 13
    333e:	8e b1       	in	r24, 0x0e	; 14
    3340:	8a 25       	eor	r24, r10
    3342:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    3344:	6e 9a       	sbi	0x0d, 6	; 13
    3346:	76 9a       	sbi	0x0e, 6	; 14
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    3348:	24 e9       	ldi	r18, 0x94	; 148
    334a:	31 e0       	ldi	r19, 0x01	; 1
    334c:	4c e9       	ldi	r20, 0x9C	; 156
    334e:	51 e0       	ldi	r21, 0x01	; 1
    3350:	63 e3       	ldi	r22, 0x33	; 51
    3352:	71 e0       	ldi	r23, 0x01	; 1
    3354:	80 91 b6 01 	lds	r24, 0x01B6
    3358:	90 91 b7 01 	lds	r25, 0x01B7
    335c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <localization>
				send_message(state, No, &buffer[0], &c_wii[0]);
    3360:	2c e9       	ldi	r18, 0x9C	; 156
    3362:	31 e0       	ldi	r19, 0x01	; 1
    3364:	48 ea       	ldi	r20, 0xA8	; 168
    3366:	51 e0       	ldi	r21, 0x01	; 1
    3368:	61 e0       	ldi	r22, 0x01	; 1
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	80 91 b6 01 	lds	r24, 0x01B6
    3370:	90 91 b7 01 	lds	r25, 0x01B7
    3374:	0e 94 ed 01 	call	0x3da	; 0x3da <send_message>
				m_usb_tx_string("sent messsage.\n");
    3378:	82 e8       	ldi	r24, 0x82	; 130
    337a:	93 e0       	ldi	r25, 0x03	; 3
    337c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				//deterState(&state);
				m_usb_tx_string("goal = ");
    3380:	8a e7       	ldi	r24, 0x7A	; 122
    3382:	93 e0       	ldi	r25, 0x03	; 3
    3384:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				m_usb_tx_int(goal[0]);
    3388:	60 91 33 01 	lds	r22, 0x0133
    338c:	70 91 34 01 	lds	r23, 0x0134
    3390:	80 91 35 01 	lds	r24, 0x0135
    3394:	90 91 36 01 	lds	r25, 0x0136
    3398:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    339c:	cb 01       	movw	r24, r22
    339e:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
				m_usb_tx_string(", ");
    33a2:	87 e7       	ldi	r24, 0x77	; 119
    33a4:	93 e0       	ldi	r25, 0x03	; 3
    33a6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				m_usb_tx_int(goal[1]);
    33aa:	f6 01       	movw	r30, r12
    33ac:	60 81       	ld	r22, Z
    33ae:	71 81       	ldd	r23, Z+1	; 0x01
    33b0:	82 81       	ldd	r24, Z+2	; 0x02
    33b2:	93 81       	ldd	r25, Z+3	; 0x03
    33b4:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    33b8:	cb 01       	movw	r24, r22
    33ba:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
				m_usb_tx_string("\n");
    33be:	85 e7       	ldi	r24, 0x75	; 117
    33c0:	93 e0       	ldi	r25, 0x03	; 3
    33c2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				break;
    33c6:	37 c0       	rjmp	.+110    	; 0x3436 <main+0x29e>
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    33c8:	6a 9a       	sbi	0x0d, 2	; 13
    33ca:	8e b1       	in	r24, 0x0e	; 14
    33cc:	8a 25       	eor	r24, r10
    33ce:	8e b9       	out	0x0e, r24	; 14
				m_red(TOGGLE);
    33d0:	6e 9a       	sbi	0x0d, 6	; 13
    33d2:	8e b1       	in	r24, 0x0e	; 14
    33d4:	8b 25       	eor	r24, r11
    33d6:	8e b9       	out	0x0e, r24	; 14
				localization(state, &desPos[0], &c_wii[0], &dir[0]);
    33d8:	24 e9       	ldi	r18, 0x94	; 148
    33da:	31 e0       	ldi	r19, 0x01	; 1
    33dc:	4c e9       	ldi	r20, 0x9C	; 156
    33de:	51 e0       	ldi	r21, 0x01	; 1
    33e0:	6b e2       	ldi	r22, 0x2B	; 43
    33e2:	71 e0       	ldi	r23, 0x01	; 1
    33e4:	80 91 b6 01 	lds	r24, 0x01B6
    33e8:	90 91 b7 01 	lds	r25, 0x01B7
    33ec:	0e 94 b3 0a 	call	0x1566	; 0x1566 <localization>
				m_usb_tx_string("Desire Position = ");
    33f0:	82 e6       	ldi	r24, 0x62	; 98
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				m_usb_tx_int(desPos[0]);
    33f8:	60 91 2b 01 	lds	r22, 0x012B
    33fc:	70 91 2c 01 	lds	r23, 0x012C
    3400:	80 91 2d 01 	lds	r24, 0x012D
    3404:	90 91 2e 01 	lds	r25, 0x012E
    3408:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    340c:	cb 01       	movw	r24, r22
    340e:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
				m_usb_tx_string(", ");
    3412:	8f e5       	ldi	r24, 0x5F	; 95
    3414:	93 e0       	ldi	r25, 0x03	; 3
    3416:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				m_usb_tx_int(desPos[1]);
    341a:	f7 01       	movw	r30, r14
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	0e 94 16 1b 	call	0x362c	; 0x362c <__fixsfsi>
    3428:	cb 01       	movw	r24, r22
    342a:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
				m_usb_tx_string("\n");
    342e:	8d e5       	ldi	r24, 0x5D	; 93
    3430:	93 e0       	ldi	r25, 0x03	; 3
    3432:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
				break;
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    3436:	84 e5       	ldi	r24, 0x54	; 84
    3438:	93 e0       	ldi	r25, 0x03	; 3
    343a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		m_usb_tx_int(OCR1B);
    343e:	f8 01       	movw	r30, r16
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
		m_usb_tx_string(", ");
    3448:	81 e5       	ldi	r24, 0x51	; 81
    344a:	93 e0       	ldi	r25, 0x03	; 3
    344c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
		m_usb_tx_int(OCR1C);
    3450:	88 81       	ld	r24, Y
    3452:	99 81       	ldd	r25, Y+1	; 0x01
    3454:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <m_usb_tx_int>
		m_usb_tx_string("\n");
    3458:	8f e4       	ldi	r24, 0x4F	; 79
    345a:	93 e0       	ldi	r25, 0x03	; 3
    345c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <print_P>
    3460:	85 ea       	ldi	r24, 0xA5	; 165
    3462:	9e e0       	ldi	r25, 0x0E	; 14
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <main+0x2cc>
    3468:	00 c0       	rjmp	.+0      	; 0x346a <main+0x2d2>
    346a:	00 00       	nop
    346c:	0d cf       	rjmp	.-486    	; 0x3288 <main+0xf0>

0000346e <acos>:
    346e:	9f 93       	push	r25
    3470:	9f 77       	andi	r25, 0x7F	; 127
    3472:	4a d1       	rcall	.+660    	; 0x3708 <__fp_arccos>
    3474:	0f 90       	pop	r0
    3476:	00 20       	and	r0, r0
    3478:	3a f4       	brpl	.+14     	; 0x3488 <acos+0x1a>
    347a:	90 58       	subi	r25, 0x80	; 128
    347c:	a2 ea       	ldi	r26, 0xA2	; 162
    347e:	2a ed       	ldi	r18, 0xDA	; 218
    3480:	3f e0       	ldi	r19, 0x0F	; 15
    3482:	49 e4       	ldi	r20, 0x49	; 73
    3484:	50 e4       	ldi	r21, 0x40	; 64
    3486:	13 d0       	rcall	.+38     	; 0x34ae <__addsf3x>
    3488:	ba c1       	rjmp	.+884    	; 0x37fe <__fp_round>

0000348a <__subsf3>:
    348a:	50 58       	subi	r21, 0x80	; 128

0000348c <__addsf3>:
    348c:	bb 27       	eor	r27, r27
    348e:	aa 27       	eor	r26, r26
    3490:	0e d0       	rcall	.+28     	; 0x34ae <__addsf3x>
    3492:	b5 c1       	rjmp	.+874    	; 0x37fe <__fp_round>
    3494:	a6 d1       	rcall	.+844    	; 0x37e2 <__fp_pscA>
    3496:	30 f0       	brcs	.+12     	; 0x34a4 <__addsf3+0x18>
    3498:	ab d1       	rcall	.+854    	; 0x37f0 <__fp_pscB>
    349a:	20 f0       	brcs	.+8      	; 0x34a4 <__addsf3+0x18>
    349c:	31 f4       	brne	.+12     	; 0x34aa <__addsf3+0x1e>
    349e:	9f 3f       	cpi	r25, 0xFF	; 255
    34a0:	11 f4       	brne	.+4      	; 0x34a6 <__addsf3+0x1a>
    34a2:	1e f4       	brtc	.+6      	; 0x34aa <__addsf3+0x1e>
    34a4:	76 c1       	rjmp	.+748    	; 0x3792 <__fp_nan>
    34a6:	0e f4       	brtc	.+2      	; 0x34aa <__addsf3+0x1e>
    34a8:	e0 95       	com	r30
    34aa:	e7 fb       	bst	r30, 7
    34ac:	6c c1       	rjmp	.+728    	; 0x3786 <__fp_inf>

000034ae <__addsf3x>:
    34ae:	e9 2f       	mov	r30, r25
    34b0:	b7 d1       	rcall	.+878    	; 0x3820 <__fp_split3>
    34b2:	80 f3       	brcs	.-32     	; 0x3494 <__addsf3+0x8>
    34b4:	ba 17       	cp	r27, r26
    34b6:	62 07       	cpc	r22, r18
    34b8:	73 07       	cpc	r23, r19
    34ba:	84 07       	cpc	r24, r20
    34bc:	95 07       	cpc	r25, r21
    34be:	18 f0       	brcs	.+6      	; 0x34c6 <__addsf3x+0x18>
    34c0:	71 f4       	brne	.+28     	; 0x34de <__addsf3x+0x30>
    34c2:	9e f5       	brtc	.+102    	; 0x352a <__addsf3x+0x7c>
    34c4:	cf c1       	rjmp	.+926    	; 0x3864 <__fp_zero>
    34c6:	0e f4       	brtc	.+2      	; 0x34ca <__addsf3x+0x1c>
    34c8:	e0 95       	com	r30
    34ca:	0b 2e       	mov	r0, r27
    34cc:	ba 2f       	mov	r27, r26
    34ce:	a0 2d       	mov	r26, r0
    34d0:	0b 01       	movw	r0, r22
    34d2:	b9 01       	movw	r22, r18
    34d4:	90 01       	movw	r18, r0
    34d6:	0c 01       	movw	r0, r24
    34d8:	ca 01       	movw	r24, r20
    34da:	a0 01       	movw	r20, r0
    34dc:	11 24       	eor	r1, r1
    34de:	ff 27       	eor	r31, r31
    34e0:	59 1b       	sub	r21, r25
    34e2:	99 f0       	breq	.+38     	; 0x350a <__addsf3x+0x5c>
    34e4:	59 3f       	cpi	r21, 0xF9	; 249
    34e6:	50 f4       	brcc	.+20     	; 0x34fc <__addsf3x+0x4e>
    34e8:	50 3e       	cpi	r21, 0xE0	; 224
    34ea:	68 f1       	brcs	.+90     	; 0x3546 <__addsf3x+0x98>
    34ec:	1a 16       	cp	r1, r26
    34ee:	f0 40       	sbci	r31, 0x00	; 0
    34f0:	a2 2f       	mov	r26, r18
    34f2:	23 2f       	mov	r18, r19
    34f4:	34 2f       	mov	r19, r20
    34f6:	44 27       	eor	r20, r20
    34f8:	58 5f       	subi	r21, 0xF8	; 248
    34fa:	f3 cf       	rjmp	.-26     	; 0x34e2 <__addsf3x+0x34>
    34fc:	46 95       	lsr	r20
    34fe:	37 95       	ror	r19
    3500:	27 95       	ror	r18
    3502:	a7 95       	ror	r26
    3504:	f0 40       	sbci	r31, 0x00	; 0
    3506:	53 95       	inc	r21
    3508:	c9 f7       	brne	.-14     	; 0x34fc <__addsf3x+0x4e>
    350a:	7e f4       	brtc	.+30     	; 0x352a <__addsf3x+0x7c>
    350c:	1f 16       	cp	r1, r31
    350e:	ba 0b       	sbc	r27, r26
    3510:	62 0b       	sbc	r22, r18
    3512:	73 0b       	sbc	r23, r19
    3514:	84 0b       	sbc	r24, r20
    3516:	ba f0       	brmi	.+46     	; 0x3546 <__addsf3x+0x98>
    3518:	91 50       	subi	r25, 0x01	; 1
    351a:	a1 f0       	breq	.+40     	; 0x3544 <__addsf3x+0x96>
    351c:	ff 0f       	add	r31, r31
    351e:	bb 1f       	adc	r27, r27
    3520:	66 1f       	adc	r22, r22
    3522:	77 1f       	adc	r23, r23
    3524:	88 1f       	adc	r24, r24
    3526:	c2 f7       	brpl	.-16     	; 0x3518 <__addsf3x+0x6a>
    3528:	0e c0       	rjmp	.+28     	; 0x3546 <__addsf3x+0x98>
    352a:	ba 0f       	add	r27, r26
    352c:	62 1f       	adc	r22, r18
    352e:	73 1f       	adc	r23, r19
    3530:	84 1f       	adc	r24, r20
    3532:	48 f4       	brcc	.+18     	; 0x3546 <__addsf3x+0x98>
    3534:	87 95       	ror	r24
    3536:	77 95       	ror	r23
    3538:	67 95       	ror	r22
    353a:	b7 95       	ror	r27
    353c:	f7 95       	ror	r31
    353e:	9e 3f       	cpi	r25, 0xFE	; 254
    3540:	08 f0       	brcs	.+2      	; 0x3544 <__addsf3x+0x96>
    3542:	b3 cf       	rjmp	.-154    	; 0x34aa <__addsf3+0x1e>
    3544:	93 95       	inc	r25
    3546:	88 0f       	add	r24, r24
    3548:	08 f0       	brcs	.+2      	; 0x354c <__addsf3x+0x9e>
    354a:	99 27       	eor	r25, r25
    354c:	ee 0f       	add	r30, r30
    354e:	97 95       	ror	r25
    3550:	87 95       	ror	r24
    3552:	08 95       	ret

00003554 <__cmpsf2>:
    3554:	f4 d0       	rcall	.+488    	; 0x373e <__fp_cmp>
    3556:	08 f4       	brcc	.+2      	; 0x355a <__cmpsf2+0x6>
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	08 95       	ret

0000355c <__divsf3>:
    355c:	0c d0       	rcall	.+24     	; 0x3576 <__divsf3x>
    355e:	4f c1       	rjmp	.+670    	; 0x37fe <__fp_round>
    3560:	47 d1       	rcall	.+654    	; 0x37f0 <__fp_pscB>
    3562:	40 f0       	brcs	.+16     	; 0x3574 <__divsf3+0x18>
    3564:	3e d1       	rcall	.+636    	; 0x37e2 <__fp_pscA>
    3566:	30 f0       	brcs	.+12     	; 0x3574 <__divsf3+0x18>
    3568:	21 f4       	brne	.+8      	; 0x3572 <__divsf3+0x16>
    356a:	5f 3f       	cpi	r21, 0xFF	; 255
    356c:	19 f0       	breq	.+6      	; 0x3574 <__divsf3+0x18>
    356e:	0b c1       	rjmp	.+534    	; 0x3786 <__fp_inf>
    3570:	51 11       	cpse	r21, r1
    3572:	79 c1       	rjmp	.+754    	; 0x3866 <__fp_szero>
    3574:	0e c1       	rjmp	.+540    	; 0x3792 <__fp_nan>

00003576 <__divsf3x>:
    3576:	54 d1       	rcall	.+680    	; 0x3820 <__fp_split3>
    3578:	98 f3       	brcs	.-26     	; 0x3560 <__divsf3+0x4>

0000357a <__divsf3_pse>:
    357a:	99 23       	and	r25, r25
    357c:	c9 f3       	breq	.-14     	; 0x3570 <__divsf3+0x14>
    357e:	55 23       	and	r21, r21
    3580:	b1 f3       	breq	.-20     	; 0x356e <__divsf3+0x12>
    3582:	95 1b       	sub	r25, r21
    3584:	55 0b       	sbc	r21, r21
    3586:	bb 27       	eor	r27, r27
    3588:	aa 27       	eor	r26, r26
    358a:	62 17       	cp	r22, r18
    358c:	73 07       	cpc	r23, r19
    358e:	84 07       	cpc	r24, r20
    3590:	38 f0       	brcs	.+14     	; 0x35a0 <__divsf3_pse+0x26>
    3592:	9f 5f       	subi	r25, 0xFF	; 255
    3594:	5f 4f       	sbci	r21, 0xFF	; 255
    3596:	22 0f       	add	r18, r18
    3598:	33 1f       	adc	r19, r19
    359a:	44 1f       	adc	r20, r20
    359c:	aa 1f       	adc	r26, r26
    359e:	a9 f3       	breq	.-22     	; 0x358a <__divsf3_pse+0x10>
    35a0:	33 d0       	rcall	.+102    	; 0x3608 <__divsf3_pse+0x8e>
    35a2:	0e 2e       	mov	r0, r30
    35a4:	3a f0       	brmi	.+14     	; 0x35b4 <__divsf3_pse+0x3a>
    35a6:	e0 e8       	ldi	r30, 0x80	; 128
    35a8:	30 d0       	rcall	.+96     	; 0x360a <__divsf3_pse+0x90>
    35aa:	91 50       	subi	r25, 0x01	; 1
    35ac:	50 40       	sbci	r21, 0x00	; 0
    35ae:	e6 95       	lsr	r30
    35b0:	00 1c       	adc	r0, r0
    35b2:	ca f7       	brpl	.-14     	; 0x35a6 <__divsf3_pse+0x2c>
    35b4:	29 d0       	rcall	.+82     	; 0x3608 <__divsf3_pse+0x8e>
    35b6:	fe 2f       	mov	r31, r30
    35b8:	27 d0       	rcall	.+78     	; 0x3608 <__divsf3_pse+0x8e>
    35ba:	66 0f       	add	r22, r22
    35bc:	77 1f       	adc	r23, r23
    35be:	88 1f       	adc	r24, r24
    35c0:	bb 1f       	adc	r27, r27
    35c2:	26 17       	cp	r18, r22
    35c4:	37 07       	cpc	r19, r23
    35c6:	48 07       	cpc	r20, r24
    35c8:	ab 07       	cpc	r26, r27
    35ca:	b0 e8       	ldi	r27, 0x80	; 128
    35cc:	09 f0       	breq	.+2      	; 0x35d0 <__divsf3_pse+0x56>
    35ce:	bb 0b       	sbc	r27, r27
    35d0:	80 2d       	mov	r24, r0
    35d2:	bf 01       	movw	r22, r30
    35d4:	ff 27       	eor	r31, r31
    35d6:	93 58       	subi	r25, 0x83	; 131
    35d8:	5f 4f       	sbci	r21, 0xFF	; 255
    35da:	2a f0       	brmi	.+10     	; 0x35e6 <__divsf3_pse+0x6c>
    35dc:	9e 3f       	cpi	r25, 0xFE	; 254
    35de:	51 05       	cpc	r21, r1
    35e0:	68 f0       	brcs	.+26     	; 0x35fc <__divsf3_pse+0x82>
    35e2:	d1 c0       	rjmp	.+418    	; 0x3786 <__fp_inf>
    35e4:	40 c1       	rjmp	.+640    	; 0x3866 <__fp_szero>
    35e6:	5f 3f       	cpi	r21, 0xFF	; 255
    35e8:	ec f3       	brlt	.-6      	; 0x35e4 <__divsf3_pse+0x6a>
    35ea:	98 3e       	cpi	r25, 0xE8	; 232
    35ec:	dc f3       	brlt	.-10     	; 0x35e4 <__divsf3_pse+0x6a>
    35ee:	86 95       	lsr	r24
    35f0:	77 95       	ror	r23
    35f2:	67 95       	ror	r22
    35f4:	b7 95       	ror	r27
    35f6:	f7 95       	ror	r31
    35f8:	9f 5f       	subi	r25, 0xFF	; 255
    35fa:	c9 f7       	brne	.-14     	; 0x35ee <__divsf3_pse+0x74>
    35fc:	88 0f       	add	r24, r24
    35fe:	91 1d       	adc	r25, r1
    3600:	96 95       	lsr	r25
    3602:	87 95       	ror	r24
    3604:	97 f9       	bld	r25, 7
    3606:	08 95       	ret
    3608:	e1 e0       	ldi	r30, 0x01	; 1
    360a:	66 0f       	add	r22, r22
    360c:	77 1f       	adc	r23, r23
    360e:	88 1f       	adc	r24, r24
    3610:	bb 1f       	adc	r27, r27
    3612:	62 17       	cp	r22, r18
    3614:	73 07       	cpc	r23, r19
    3616:	84 07       	cpc	r24, r20
    3618:	ba 07       	cpc	r27, r26
    361a:	20 f0       	brcs	.+8      	; 0x3624 <__divsf3_pse+0xaa>
    361c:	62 1b       	sub	r22, r18
    361e:	73 0b       	sbc	r23, r19
    3620:	84 0b       	sbc	r24, r20
    3622:	ba 0b       	sbc	r27, r26
    3624:	ee 1f       	adc	r30, r30
    3626:	88 f7       	brcc	.-30     	; 0x360a <__divsf3_pse+0x90>
    3628:	e0 95       	com	r30
    362a:	08 95       	ret

0000362c <__fixsfsi>:
    362c:	04 d0       	rcall	.+8      	; 0x3636 <__fixunssfsi>
    362e:	68 94       	set
    3630:	b1 11       	cpse	r27, r1
    3632:	19 c1       	rjmp	.+562    	; 0x3866 <__fp_szero>
    3634:	08 95       	ret

00003636 <__fixunssfsi>:
    3636:	fc d0       	rcall	.+504    	; 0x3830 <__fp_splitA>
    3638:	88 f0       	brcs	.+34     	; 0x365c <__fixunssfsi+0x26>
    363a:	9f 57       	subi	r25, 0x7F	; 127
    363c:	90 f0       	brcs	.+36     	; 0x3662 <__fixunssfsi+0x2c>
    363e:	b9 2f       	mov	r27, r25
    3640:	99 27       	eor	r25, r25
    3642:	b7 51       	subi	r27, 0x17	; 23
    3644:	a0 f0       	brcs	.+40     	; 0x366e <__fixunssfsi+0x38>
    3646:	d1 f0       	breq	.+52     	; 0x367c <__fixunssfsi+0x46>
    3648:	66 0f       	add	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	88 1f       	adc	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	1a f0       	brmi	.+6      	; 0x3658 <__fixunssfsi+0x22>
    3652:	ba 95       	dec	r27
    3654:	c9 f7       	brne	.-14     	; 0x3648 <__fixunssfsi+0x12>
    3656:	12 c0       	rjmp	.+36     	; 0x367c <__fixunssfsi+0x46>
    3658:	b1 30       	cpi	r27, 0x01	; 1
    365a:	81 f0       	breq	.+32     	; 0x367c <__fixunssfsi+0x46>
    365c:	03 d1       	rcall	.+518    	; 0x3864 <__fp_zero>
    365e:	b1 e0       	ldi	r27, 0x01	; 1
    3660:	08 95       	ret
    3662:	00 c1       	rjmp	.+512    	; 0x3864 <__fp_zero>
    3664:	67 2f       	mov	r22, r23
    3666:	78 2f       	mov	r23, r24
    3668:	88 27       	eor	r24, r24
    366a:	b8 5f       	subi	r27, 0xF8	; 248
    366c:	39 f0       	breq	.+14     	; 0x367c <__fixunssfsi+0x46>
    366e:	b9 3f       	cpi	r27, 0xF9	; 249
    3670:	cc f3       	brlt	.-14     	; 0x3664 <__fixunssfsi+0x2e>
    3672:	86 95       	lsr	r24
    3674:	77 95       	ror	r23
    3676:	67 95       	ror	r22
    3678:	b3 95       	inc	r27
    367a:	d9 f7       	brne	.-10     	; 0x3672 <__fixunssfsi+0x3c>
    367c:	3e f4       	brtc	.+14     	; 0x368c <__fixunssfsi+0x56>
    367e:	90 95       	com	r25
    3680:	80 95       	com	r24
    3682:	70 95       	com	r23
    3684:	61 95       	neg	r22
    3686:	7f 4f       	sbci	r23, 0xFF	; 255
    3688:	8f 4f       	sbci	r24, 0xFF	; 255
    368a:	9f 4f       	sbci	r25, 0xFF	; 255
    368c:	08 95       	ret

0000368e <__floatunsisf>:
    368e:	e8 94       	clt
    3690:	09 c0       	rjmp	.+18     	; 0x36a4 <__floatsisf+0x12>

00003692 <__floatsisf>:
    3692:	97 fb       	bst	r25, 7
    3694:	3e f4       	brtc	.+14     	; 0x36a4 <__floatsisf+0x12>
    3696:	90 95       	com	r25
    3698:	80 95       	com	r24
    369a:	70 95       	com	r23
    369c:	61 95       	neg	r22
    369e:	7f 4f       	sbci	r23, 0xFF	; 255
    36a0:	8f 4f       	sbci	r24, 0xFF	; 255
    36a2:	9f 4f       	sbci	r25, 0xFF	; 255
    36a4:	99 23       	and	r25, r25
    36a6:	a9 f0       	breq	.+42     	; 0x36d2 <__floatsisf+0x40>
    36a8:	f9 2f       	mov	r31, r25
    36aa:	96 e9       	ldi	r25, 0x96	; 150
    36ac:	bb 27       	eor	r27, r27
    36ae:	93 95       	inc	r25
    36b0:	f6 95       	lsr	r31
    36b2:	87 95       	ror	r24
    36b4:	77 95       	ror	r23
    36b6:	67 95       	ror	r22
    36b8:	b7 95       	ror	r27
    36ba:	f1 11       	cpse	r31, r1
    36bc:	f8 cf       	rjmp	.-16     	; 0x36ae <__floatsisf+0x1c>
    36be:	fa f4       	brpl	.+62     	; 0x36fe <__floatsisf+0x6c>
    36c0:	bb 0f       	add	r27, r27
    36c2:	11 f4       	brne	.+4      	; 0x36c8 <__floatsisf+0x36>
    36c4:	60 ff       	sbrs	r22, 0
    36c6:	1b c0       	rjmp	.+54     	; 0x36fe <__floatsisf+0x6c>
    36c8:	6f 5f       	subi	r22, 0xFF	; 255
    36ca:	7f 4f       	sbci	r23, 0xFF	; 255
    36cc:	8f 4f       	sbci	r24, 0xFF	; 255
    36ce:	9f 4f       	sbci	r25, 0xFF	; 255
    36d0:	16 c0       	rjmp	.+44     	; 0x36fe <__floatsisf+0x6c>
    36d2:	88 23       	and	r24, r24
    36d4:	11 f0       	breq	.+4      	; 0x36da <__floatsisf+0x48>
    36d6:	96 e9       	ldi	r25, 0x96	; 150
    36d8:	11 c0       	rjmp	.+34     	; 0x36fc <__floatsisf+0x6a>
    36da:	77 23       	and	r23, r23
    36dc:	21 f0       	breq	.+8      	; 0x36e6 <__floatsisf+0x54>
    36de:	9e e8       	ldi	r25, 0x8E	; 142
    36e0:	87 2f       	mov	r24, r23
    36e2:	76 2f       	mov	r23, r22
    36e4:	05 c0       	rjmp	.+10     	; 0x36f0 <__floatsisf+0x5e>
    36e6:	66 23       	and	r22, r22
    36e8:	71 f0       	breq	.+28     	; 0x3706 <__floatsisf+0x74>
    36ea:	96 e8       	ldi	r25, 0x86	; 134
    36ec:	86 2f       	mov	r24, r22
    36ee:	70 e0       	ldi	r23, 0x00	; 0
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	2a f0       	brmi	.+10     	; 0x36fe <__floatsisf+0x6c>
    36f4:	9a 95       	dec	r25
    36f6:	66 0f       	add	r22, r22
    36f8:	77 1f       	adc	r23, r23
    36fa:	88 1f       	adc	r24, r24
    36fc:	da f7       	brpl	.-10     	; 0x36f4 <__floatsisf+0x62>
    36fe:	88 0f       	add	r24, r24
    3700:	96 95       	lsr	r25
    3702:	87 95       	ror	r24
    3704:	97 f9       	bld	r25, 7
    3706:	08 95       	ret

00003708 <__fp_arccos>:
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	1f 93       	push	r17
    370e:	0f 93       	push	r16
    3710:	8b 01       	movw	r16, r22
    3712:	ec 01       	movw	r28, r24
    3714:	ee ec       	ldi	r30, 0xCE	; 206
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	3f d0       	rcall	.+126    	; 0x3798 <__fp_powser>
    371a:	71 d0       	rcall	.+226    	; 0x37fe <__fp_round>
    371c:	98 01       	movw	r18, r16
    371e:	ae 01       	movw	r20, r28
    3720:	8b 01       	movw	r16, r22
    3722:	ec 01       	movw	r28, r24
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	80 e8       	ldi	r24, 0x80	; 128
    372a:	9f e3       	ldi	r25, 0x3F	; 63
    372c:	ae de       	rcall	.-676    	; 0x348a <__subsf3>
    372e:	0c d1       	rcall	.+536    	; 0x3948 <sqrt>
    3730:	98 01       	movw	r18, r16
    3732:	ae 01       	movw	r20, r28
    3734:	0f 91       	pop	r16
    3736:	1f 91       	pop	r17
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	aa c0       	rjmp	.+340    	; 0x3892 <__mulsf3x>

0000373e <__fp_cmp>:
    373e:	99 0f       	add	r25, r25
    3740:	00 08       	sbc	r0, r0
    3742:	55 0f       	add	r21, r21
    3744:	aa 0b       	sbc	r26, r26
    3746:	e0 e8       	ldi	r30, 0x80	; 128
    3748:	fe ef       	ldi	r31, 0xFE	; 254
    374a:	16 16       	cp	r1, r22
    374c:	17 06       	cpc	r1, r23
    374e:	e8 07       	cpc	r30, r24
    3750:	f9 07       	cpc	r31, r25
    3752:	c0 f0       	brcs	.+48     	; 0x3784 <__fp_cmp+0x46>
    3754:	12 16       	cp	r1, r18
    3756:	13 06       	cpc	r1, r19
    3758:	e4 07       	cpc	r30, r20
    375a:	f5 07       	cpc	r31, r21
    375c:	98 f0       	brcs	.+38     	; 0x3784 <__fp_cmp+0x46>
    375e:	62 1b       	sub	r22, r18
    3760:	73 0b       	sbc	r23, r19
    3762:	84 0b       	sbc	r24, r20
    3764:	95 0b       	sbc	r25, r21
    3766:	39 f4       	brne	.+14     	; 0x3776 <__fp_cmp+0x38>
    3768:	0a 26       	eor	r0, r26
    376a:	61 f0       	breq	.+24     	; 0x3784 <__fp_cmp+0x46>
    376c:	23 2b       	or	r18, r19
    376e:	24 2b       	or	r18, r20
    3770:	25 2b       	or	r18, r21
    3772:	21 f4       	brne	.+8      	; 0x377c <__fp_cmp+0x3e>
    3774:	08 95       	ret
    3776:	0a 26       	eor	r0, r26
    3778:	09 f4       	brne	.+2      	; 0x377c <__fp_cmp+0x3e>
    377a:	a1 40       	sbci	r26, 0x01	; 1
    377c:	a6 95       	lsr	r26
    377e:	8f ef       	ldi	r24, 0xFF	; 255
    3780:	81 1d       	adc	r24, r1
    3782:	81 1d       	adc	r24, r1
    3784:	08 95       	ret

00003786 <__fp_inf>:
    3786:	97 f9       	bld	r25, 7
    3788:	9f 67       	ori	r25, 0x7F	; 127
    378a:	80 e8       	ldi	r24, 0x80	; 128
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	08 95       	ret

00003792 <__fp_nan>:
    3792:	9f ef       	ldi	r25, 0xFF	; 255
    3794:	80 ec       	ldi	r24, 0xC0	; 192
    3796:	08 95       	ret

00003798 <__fp_powser>:
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	1f 93       	push	r17
    379e:	0f 93       	push	r16
    37a0:	ff 92       	push	r15
    37a2:	ef 92       	push	r14
    37a4:	df 92       	push	r13
    37a6:	7b 01       	movw	r14, r22
    37a8:	8c 01       	movw	r16, r24
    37aa:	68 94       	set
    37ac:	05 c0       	rjmp	.+10     	; 0x37b8 <__fp_powser+0x20>
    37ae:	da 2e       	mov	r13, r26
    37b0:	ef 01       	movw	r28, r30
    37b2:	6f d0       	rcall	.+222    	; 0x3892 <__mulsf3x>
    37b4:	fe 01       	movw	r30, r28
    37b6:	e8 94       	clt
    37b8:	a5 91       	lpm	r26, Z+
    37ba:	25 91       	lpm	r18, Z+
    37bc:	35 91       	lpm	r19, Z+
    37be:	45 91       	lpm	r20, Z+
    37c0:	55 91       	lpm	r21, Z+
    37c2:	ae f3       	brts	.-22     	; 0x37ae <__fp_powser+0x16>
    37c4:	ef 01       	movw	r28, r30
    37c6:	73 de       	rcall	.-794    	; 0x34ae <__addsf3x>
    37c8:	fe 01       	movw	r30, r28
    37ca:	97 01       	movw	r18, r14
    37cc:	a8 01       	movw	r20, r16
    37ce:	da 94       	dec	r13
    37d0:	79 f7       	brne	.-34     	; 0x37b0 <__fp_powser+0x18>
    37d2:	df 90       	pop	r13
    37d4:	ef 90       	pop	r14
    37d6:	ff 90       	pop	r15
    37d8:	0f 91       	pop	r16
    37da:	1f 91       	pop	r17
    37dc:	cf 91       	pop	r28
    37de:	df 91       	pop	r29
    37e0:	08 95       	ret

000037e2 <__fp_pscA>:
    37e2:	00 24       	eor	r0, r0
    37e4:	0a 94       	dec	r0
    37e6:	16 16       	cp	r1, r22
    37e8:	17 06       	cpc	r1, r23
    37ea:	18 06       	cpc	r1, r24
    37ec:	09 06       	cpc	r0, r25
    37ee:	08 95       	ret

000037f0 <__fp_pscB>:
    37f0:	00 24       	eor	r0, r0
    37f2:	0a 94       	dec	r0
    37f4:	12 16       	cp	r1, r18
    37f6:	13 06       	cpc	r1, r19
    37f8:	14 06       	cpc	r1, r20
    37fa:	05 06       	cpc	r0, r21
    37fc:	08 95       	ret

000037fe <__fp_round>:
    37fe:	09 2e       	mov	r0, r25
    3800:	03 94       	inc	r0
    3802:	00 0c       	add	r0, r0
    3804:	11 f4       	brne	.+4      	; 0x380a <__fp_round+0xc>
    3806:	88 23       	and	r24, r24
    3808:	52 f0       	brmi	.+20     	; 0x381e <__fp_round+0x20>
    380a:	bb 0f       	add	r27, r27
    380c:	40 f4       	brcc	.+16     	; 0x381e <__fp_round+0x20>
    380e:	bf 2b       	or	r27, r31
    3810:	11 f4       	brne	.+4      	; 0x3816 <__fp_round+0x18>
    3812:	60 ff       	sbrs	r22, 0
    3814:	04 c0       	rjmp	.+8      	; 0x381e <__fp_round+0x20>
    3816:	6f 5f       	subi	r22, 0xFF	; 255
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	8f 4f       	sbci	r24, 0xFF	; 255
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	08 95       	ret

00003820 <__fp_split3>:
    3820:	57 fd       	sbrc	r21, 7
    3822:	90 58       	subi	r25, 0x80	; 128
    3824:	44 0f       	add	r20, r20
    3826:	55 1f       	adc	r21, r21
    3828:	59 f0       	breq	.+22     	; 0x3840 <__fp_splitA+0x10>
    382a:	5f 3f       	cpi	r21, 0xFF	; 255
    382c:	71 f0       	breq	.+28     	; 0x384a <__fp_splitA+0x1a>
    382e:	47 95       	ror	r20

00003830 <__fp_splitA>:
    3830:	88 0f       	add	r24, r24
    3832:	97 fb       	bst	r25, 7
    3834:	99 1f       	adc	r25, r25
    3836:	61 f0       	breq	.+24     	; 0x3850 <__fp_splitA+0x20>
    3838:	9f 3f       	cpi	r25, 0xFF	; 255
    383a:	79 f0       	breq	.+30     	; 0x385a <__fp_splitA+0x2a>
    383c:	87 95       	ror	r24
    383e:	08 95       	ret
    3840:	12 16       	cp	r1, r18
    3842:	13 06       	cpc	r1, r19
    3844:	14 06       	cpc	r1, r20
    3846:	55 1f       	adc	r21, r21
    3848:	f2 cf       	rjmp	.-28     	; 0x382e <__fp_split3+0xe>
    384a:	46 95       	lsr	r20
    384c:	f1 df       	rcall	.-30     	; 0x3830 <__fp_splitA>
    384e:	08 c0       	rjmp	.+16     	; 0x3860 <__fp_splitA+0x30>
    3850:	16 16       	cp	r1, r22
    3852:	17 06       	cpc	r1, r23
    3854:	18 06       	cpc	r1, r24
    3856:	99 1f       	adc	r25, r25
    3858:	f1 cf       	rjmp	.-30     	; 0x383c <__fp_splitA+0xc>
    385a:	86 95       	lsr	r24
    385c:	71 05       	cpc	r23, r1
    385e:	61 05       	cpc	r22, r1
    3860:	08 94       	sec
    3862:	08 95       	ret

00003864 <__fp_zero>:
    3864:	e8 94       	clt

00003866 <__fp_szero>:
    3866:	bb 27       	eor	r27, r27
    3868:	66 27       	eor	r22, r22
    386a:	77 27       	eor	r23, r23
    386c:	cb 01       	movw	r24, r22
    386e:	97 f9       	bld	r25, 7
    3870:	08 95       	ret

00003872 <__gesf2>:
    3872:	65 df       	rcall	.-310    	; 0x373e <__fp_cmp>
    3874:	08 f4       	brcc	.+2      	; 0x3878 <__gesf2+0x6>
    3876:	8f ef       	ldi	r24, 0xFF	; 255
    3878:	08 95       	ret

0000387a <__mulsf3>:
    387a:	0b d0       	rcall	.+22     	; 0x3892 <__mulsf3x>
    387c:	c0 cf       	rjmp	.-128    	; 0x37fe <__fp_round>
    387e:	b1 df       	rcall	.-158    	; 0x37e2 <__fp_pscA>
    3880:	28 f0       	brcs	.+10     	; 0x388c <__mulsf3+0x12>
    3882:	b6 df       	rcall	.-148    	; 0x37f0 <__fp_pscB>
    3884:	18 f0       	brcs	.+6      	; 0x388c <__mulsf3+0x12>
    3886:	95 23       	and	r25, r21
    3888:	09 f0       	breq	.+2      	; 0x388c <__mulsf3+0x12>
    388a:	7d cf       	rjmp	.-262    	; 0x3786 <__fp_inf>
    388c:	82 cf       	rjmp	.-252    	; 0x3792 <__fp_nan>
    388e:	11 24       	eor	r1, r1
    3890:	ea cf       	rjmp	.-44     	; 0x3866 <__fp_szero>

00003892 <__mulsf3x>:
    3892:	c6 df       	rcall	.-116    	; 0x3820 <__fp_split3>
    3894:	a0 f3       	brcs	.-24     	; 0x387e <__mulsf3+0x4>

00003896 <__mulsf3_pse>:
    3896:	95 9f       	mul	r25, r21
    3898:	d1 f3       	breq	.-12     	; 0x388e <__mulsf3+0x14>
    389a:	95 0f       	add	r25, r21
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	55 1f       	adc	r21, r21
    38a0:	62 9f       	mul	r22, r18
    38a2:	f0 01       	movw	r30, r0
    38a4:	72 9f       	mul	r23, r18
    38a6:	bb 27       	eor	r27, r27
    38a8:	f0 0d       	add	r31, r0
    38aa:	b1 1d       	adc	r27, r1
    38ac:	63 9f       	mul	r22, r19
    38ae:	aa 27       	eor	r26, r26
    38b0:	f0 0d       	add	r31, r0
    38b2:	b1 1d       	adc	r27, r1
    38b4:	aa 1f       	adc	r26, r26
    38b6:	64 9f       	mul	r22, r20
    38b8:	66 27       	eor	r22, r22
    38ba:	b0 0d       	add	r27, r0
    38bc:	a1 1d       	adc	r26, r1
    38be:	66 1f       	adc	r22, r22
    38c0:	82 9f       	mul	r24, r18
    38c2:	22 27       	eor	r18, r18
    38c4:	b0 0d       	add	r27, r0
    38c6:	a1 1d       	adc	r26, r1
    38c8:	62 1f       	adc	r22, r18
    38ca:	73 9f       	mul	r23, r19
    38cc:	b0 0d       	add	r27, r0
    38ce:	a1 1d       	adc	r26, r1
    38d0:	62 1f       	adc	r22, r18
    38d2:	83 9f       	mul	r24, r19
    38d4:	a0 0d       	add	r26, r0
    38d6:	61 1d       	adc	r22, r1
    38d8:	22 1f       	adc	r18, r18
    38da:	74 9f       	mul	r23, r20
    38dc:	33 27       	eor	r19, r19
    38de:	a0 0d       	add	r26, r0
    38e0:	61 1d       	adc	r22, r1
    38e2:	23 1f       	adc	r18, r19
    38e4:	84 9f       	mul	r24, r20
    38e6:	60 0d       	add	r22, r0
    38e8:	21 1d       	adc	r18, r1
    38ea:	82 2f       	mov	r24, r18
    38ec:	76 2f       	mov	r23, r22
    38ee:	6a 2f       	mov	r22, r26
    38f0:	11 24       	eor	r1, r1
    38f2:	9f 57       	subi	r25, 0x7F	; 127
    38f4:	50 40       	sbci	r21, 0x00	; 0
    38f6:	8a f0       	brmi	.+34     	; 0x391a <__mulsf3_pse+0x84>
    38f8:	e1 f0       	breq	.+56     	; 0x3932 <__mulsf3_pse+0x9c>
    38fa:	88 23       	and	r24, r24
    38fc:	4a f0       	brmi	.+18     	; 0x3910 <__mulsf3_pse+0x7a>
    38fe:	ee 0f       	add	r30, r30
    3900:	ff 1f       	adc	r31, r31
    3902:	bb 1f       	adc	r27, r27
    3904:	66 1f       	adc	r22, r22
    3906:	77 1f       	adc	r23, r23
    3908:	88 1f       	adc	r24, r24
    390a:	91 50       	subi	r25, 0x01	; 1
    390c:	50 40       	sbci	r21, 0x00	; 0
    390e:	a9 f7       	brne	.-22     	; 0x38fa <__mulsf3_pse+0x64>
    3910:	9e 3f       	cpi	r25, 0xFE	; 254
    3912:	51 05       	cpc	r21, r1
    3914:	70 f0       	brcs	.+28     	; 0x3932 <__mulsf3_pse+0x9c>
    3916:	37 cf       	rjmp	.-402    	; 0x3786 <__fp_inf>
    3918:	a6 cf       	rjmp	.-180    	; 0x3866 <__fp_szero>
    391a:	5f 3f       	cpi	r21, 0xFF	; 255
    391c:	ec f3       	brlt	.-6      	; 0x3918 <__mulsf3_pse+0x82>
    391e:	98 3e       	cpi	r25, 0xE8	; 232
    3920:	dc f3       	brlt	.-10     	; 0x3918 <__mulsf3_pse+0x82>
    3922:	86 95       	lsr	r24
    3924:	77 95       	ror	r23
    3926:	67 95       	ror	r22
    3928:	b7 95       	ror	r27
    392a:	f7 95       	ror	r31
    392c:	e7 95       	ror	r30
    392e:	9f 5f       	subi	r25, 0xFF	; 255
    3930:	c1 f7       	brne	.-16     	; 0x3922 <__mulsf3_pse+0x8c>
    3932:	fe 2b       	or	r31, r30
    3934:	88 0f       	add	r24, r24
    3936:	91 1d       	adc	r25, r1
    3938:	96 95       	lsr	r25
    393a:	87 95       	ror	r24
    393c:	97 f9       	bld	r25, 7
    393e:	08 95       	ret
    3940:	11 f4       	brne	.+4      	; 0x3946 <__mulsf3_pse+0xb0>
    3942:	0e f4       	brtc	.+2      	; 0x3946 <__mulsf3_pse+0xb0>
    3944:	26 cf       	rjmp	.-436    	; 0x3792 <__fp_nan>
    3946:	3e c0       	rjmp	.+124    	; 0x39c4 <__fp_mpack>

00003948 <sqrt>:
    3948:	73 df       	rcall	.-282    	; 0x3830 <__fp_splitA>
    394a:	d0 f3       	brcs	.-12     	; 0x3940 <__mulsf3_pse+0xaa>
    394c:	99 23       	and	r25, r25
    394e:	d9 f3       	breq	.-10     	; 0x3946 <__mulsf3_pse+0xb0>
    3950:	ce f3       	brts	.-14     	; 0x3944 <__mulsf3_pse+0xae>
    3952:	9f 57       	subi	r25, 0x7F	; 127
    3954:	55 0b       	sbc	r21, r21
    3956:	87 ff       	sbrs	r24, 7
    3958:	43 d0       	rcall	.+134    	; 0x39e0 <__fp_norm2>
    395a:	00 24       	eor	r0, r0
    395c:	a0 e6       	ldi	r26, 0x60	; 96
    395e:	40 ea       	ldi	r20, 0xA0	; 160
    3960:	90 01       	movw	r18, r0
    3962:	80 58       	subi	r24, 0x80	; 128
    3964:	56 95       	lsr	r21
    3966:	97 95       	ror	r25
    3968:	28 f4       	brcc	.+10     	; 0x3974 <sqrt+0x2c>
    396a:	80 5c       	subi	r24, 0xC0	; 192
    396c:	66 0f       	add	r22, r22
    396e:	77 1f       	adc	r23, r23
    3970:	88 1f       	adc	r24, r24
    3972:	20 f0       	brcs	.+8      	; 0x397c <sqrt+0x34>
    3974:	26 17       	cp	r18, r22
    3976:	37 07       	cpc	r19, r23
    3978:	48 07       	cpc	r20, r24
    397a:	30 f4       	brcc	.+12     	; 0x3988 <sqrt+0x40>
    397c:	62 1b       	sub	r22, r18
    397e:	73 0b       	sbc	r23, r19
    3980:	84 0b       	sbc	r24, r20
    3982:	20 29       	or	r18, r0
    3984:	31 29       	or	r19, r1
    3986:	4a 2b       	or	r20, r26
    3988:	a6 95       	lsr	r26
    398a:	17 94       	ror	r1
    398c:	07 94       	ror	r0
    398e:	20 25       	eor	r18, r0
    3990:	31 25       	eor	r19, r1
    3992:	4a 27       	eor	r20, r26
    3994:	58 f7       	brcc	.-42     	; 0x396c <sqrt+0x24>
    3996:	66 0f       	add	r22, r22
    3998:	77 1f       	adc	r23, r23
    399a:	88 1f       	adc	r24, r24
    399c:	20 f0       	brcs	.+8      	; 0x39a6 <sqrt+0x5e>
    399e:	26 17       	cp	r18, r22
    39a0:	37 07       	cpc	r19, r23
    39a2:	48 07       	cpc	r20, r24
    39a4:	30 f4       	brcc	.+12     	; 0x39b2 <sqrt+0x6a>
    39a6:	62 0b       	sbc	r22, r18
    39a8:	73 0b       	sbc	r23, r19
    39aa:	84 0b       	sbc	r24, r20
    39ac:	20 0d       	add	r18, r0
    39ae:	31 1d       	adc	r19, r1
    39b0:	41 1d       	adc	r20, r1
    39b2:	a0 95       	com	r26
    39b4:	81 f7       	brne	.-32     	; 0x3996 <sqrt+0x4e>
    39b6:	b9 01       	movw	r22, r18
    39b8:	84 2f       	mov	r24, r20
    39ba:	91 58       	subi	r25, 0x81	; 129
    39bc:	88 0f       	add	r24, r24
    39be:	96 95       	lsr	r25
    39c0:	87 95       	ror	r24
    39c2:	08 95       	ret

000039c4 <__fp_mpack>:
    39c4:	9f 3f       	cpi	r25, 0xFF	; 255
    39c6:	31 f0       	breq	.+12     	; 0x39d4 <__fp_mpack_finite+0xc>

000039c8 <__fp_mpack_finite>:
    39c8:	91 50       	subi	r25, 0x01	; 1
    39ca:	20 f4       	brcc	.+8      	; 0x39d4 <__fp_mpack_finite+0xc>
    39cc:	87 95       	ror	r24
    39ce:	77 95       	ror	r23
    39d0:	67 95       	ror	r22
    39d2:	b7 95       	ror	r27
    39d4:	88 0f       	add	r24, r24
    39d6:	91 1d       	adc	r25, r1
    39d8:	96 95       	lsr	r25
    39da:	87 95       	ror	r24
    39dc:	97 f9       	bld	r25, 7
    39de:	08 95       	ret

000039e0 <__fp_norm2>:
    39e0:	91 50       	subi	r25, 0x01	; 1
    39e2:	50 40       	sbci	r21, 0x00	; 0
    39e4:	66 0f       	add	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	88 1f       	adc	r24, r24
    39ea:	d2 f7       	brpl	.-12     	; 0x39e0 <__fp_norm2>
    39ec:	08 95       	ret

000039ee <__divmodhi4>:
    39ee:	97 fb       	bst	r25, 7
    39f0:	07 2e       	mov	r0, r23
    39f2:	16 f4       	brtc	.+4      	; 0x39f8 <__divmodhi4+0xa>
    39f4:	00 94       	com	r0
    39f6:	07 d0       	rcall	.+14     	; 0x3a06 <__divmodhi4_neg1>
    39f8:	77 fd       	sbrc	r23, 7
    39fa:	09 d0       	rcall	.+18     	; 0x3a0e <__divmodhi4_neg2>
    39fc:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__udivmodhi4>
    3a00:	07 fc       	sbrc	r0, 7
    3a02:	05 d0       	rcall	.+10     	; 0x3a0e <__divmodhi4_neg2>
    3a04:	3e f4       	brtc	.+14     	; 0x3a14 <__divmodhi4_exit>

00003a06 <__divmodhi4_neg1>:
    3a06:	90 95       	com	r25
    3a08:	81 95       	neg	r24
    3a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0c:	08 95       	ret

00003a0e <__divmodhi4_neg2>:
    3a0e:	70 95       	com	r23
    3a10:	61 95       	neg	r22
    3a12:	7f 4f       	sbci	r23, 0xFF	; 255

00003a14 <__divmodhi4_exit>:
    3a14:	08 95       	ret

00003a16 <__tablejump2__>:
    3a16:	ee 0f       	add	r30, r30
    3a18:	ff 1f       	adc	r31, r31

00003a1a <__tablejump__>:
    3a1a:	05 90       	lpm	r0, Z+
    3a1c:	f4 91       	lpm	r31, Z
    3a1e:	e0 2d       	mov	r30, r0
    3a20:	09 94       	ijmp

00003a22 <__udivmodhi4>:
    3a22:	aa 1b       	sub	r26, r26
    3a24:	bb 1b       	sub	r27, r27
    3a26:	51 e1       	ldi	r21, 0x11	; 17
    3a28:	07 c0       	rjmp	.+14     	; 0x3a38 <__udivmodhi4_ep>

00003a2a <__udivmodhi4_loop>:
    3a2a:	aa 1f       	adc	r26, r26
    3a2c:	bb 1f       	adc	r27, r27
    3a2e:	a6 17       	cp	r26, r22
    3a30:	b7 07       	cpc	r27, r23
    3a32:	10 f0       	brcs	.+4      	; 0x3a38 <__udivmodhi4_ep>
    3a34:	a6 1b       	sub	r26, r22
    3a36:	b7 0b       	sbc	r27, r23

00003a38 <__udivmodhi4_ep>:
    3a38:	88 1f       	adc	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	5a 95       	dec	r21
    3a3e:	a9 f7       	brne	.-22     	; 0x3a2a <__udivmodhi4_loop>
    3a40:	80 95       	com	r24
    3a42:	90 95       	com	r25
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	08 95       	ret

00003a4a <__itoa_ncheck>:
    3a4a:	bb 27       	eor	r27, r27
    3a4c:	4a 30       	cpi	r20, 0x0A	; 10
    3a4e:	31 f4       	brne	.+12     	; 0x3a5c <__itoa_ncheck+0x12>
    3a50:	99 23       	and	r25, r25
    3a52:	22 f4       	brpl	.+8      	; 0x3a5c <__itoa_ncheck+0x12>
    3a54:	bd e2       	ldi	r27, 0x2D	; 45
    3a56:	90 95       	com	r25
    3a58:	81 95       	neg	r24
    3a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5c:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__utoa_common>

00003a60 <__utoa_ncheck>:
    3a60:	bb 27       	eor	r27, r27

00003a62 <__utoa_common>:
    3a62:	fb 01       	movw	r30, r22
    3a64:	55 27       	eor	r21, r21
    3a66:	aa 27       	eor	r26, r26
    3a68:	88 0f       	add	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	aa 1f       	adc	r26, r26
    3a6e:	a4 17       	cp	r26, r20
    3a70:	10 f0       	brcs	.+4      	; 0x3a76 <__utoa_common+0x14>
    3a72:	a4 1b       	sub	r26, r20
    3a74:	83 95       	inc	r24
    3a76:	50 51       	subi	r21, 0x10	; 16
    3a78:	b9 f7       	brne	.-18     	; 0x3a68 <__utoa_common+0x6>
    3a7a:	a0 5d       	subi	r26, 0xD0	; 208
    3a7c:	aa 33       	cpi	r26, 0x3A	; 58
    3a7e:	08 f0       	brcs	.+2      	; 0x3a82 <__utoa_common+0x20>
    3a80:	a9 5d       	subi	r26, 0xD9	; 217
    3a82:	a1 93       	st	Z+, r26
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	79 f7       	brne	.-34     	; 0x3a66 <__utoa_common+0x4>
    3a88:	b1 11       	cpse	r27, r1
    3a8a:	b1 93       	st	Z+, r27
    3a8c:	11 92       	st	Z+, r1
    3a8e:	cb 01       	movw	r24, r22
    3a90:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <strrev>

00003a94 <strrev>:
    3a94:	dc 01       	movw	r26, r24
    3a96:	fc 01       	movw	r30, r24
    3a98:	67 2f       	mov	r22, r23
    3a9a:	71 91       	ld	r23, Z+
    3a9c:	77 23       	and	r23, r23
    3a9e:	e1 f7       	brne	.-8      	; 0x3a98 <strrev+0x4>
    3aa0:	32 97       	sbiw	r30, 0x02	; 2
    3aa2:	04 c0       	rjmp	.+8      	; 0x3aac <strrev+0x18>
    3aa4:	7c 91       	ld	r23, X
    3aa6:	6d 93       	st	X+, r22
    3aa8:	70 83       	st	Z, r23
    3aaa:	62 91       	ld	r22, -Z
    3aac:	ae 17       	cp	r26, r30
    3aae:	bf 07       	cpc	r27, r31
    3ab0:	c8 f3       	brcs	.-14     	; 0x3aa4 <strrev+0x10>
    3ab2:	08 95       	ret

00003ab4 <_exit>:
    3ab4:	f8 94       	cli

00003ab6 <__stop_program>:
    3ab6:	ff cf       	rjmp	.-2      	; 0x3ab6 <__stop_program>

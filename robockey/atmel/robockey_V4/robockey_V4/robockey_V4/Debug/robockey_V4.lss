
robockey_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00003f72  00004006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  0080013e  0080013e  00004044  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a82  00000000  00000000  00004314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d14  00000000  00000000  00007d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000134b  00000000  00000000  00008aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009f0  00000000  00000000  00009df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009d2  00000000  00000000  0000a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004218  00000000  00000000  0000b1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000f3d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 02 	jmp	0x454	; 0x454 <__ctors_end>
       4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
       8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
       c:	0c 94 27 19 	jmp	0x324e	; 0x324e <__vector_3>
      10:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      14:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      18:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      1c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      24:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      28:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_10>
      2c:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__vector_11>
      30:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      34:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      38:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      3c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      44:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      48:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      4c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      50:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      54:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      58:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      5c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      60:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      64:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      68:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      6c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      70:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      74:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_29>
      78:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      7c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      80:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      84:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      88:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      8c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      90:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      94:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      98:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      9c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      a0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      a4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      a8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      ac:	dc 06       	cpc	r13, r28
      ae:	ed 06       	cpc	r14, r29
      b0:	fe 06       	cpc	r15, r30
      b2:	0f 07       	cpc	r16, r31
      b4:	20 07       	cpc	r18, r16
      b6:	31 07       	cpc	r19, r17
      b8:	42 07       	cpc	r20, r18
      ba:	4f 19       	sub	r20, r15
      bc:	5a 19       	sub	r21, r10
      be:	aa 19       	sub	r26, r10
      c0:	c9 19       	sub	r28, r9
      c2:	e8 19       	sub	r30, r8
      c4:	9a 1a       	sub	r9, r26
      c6:	f9 19       	sub	r31, r9
      c8:	0a 1a       	sub	r0, r26
      ca:	9a 1a       	sub	r9, r26
      cc:	9a 1a       	sub	r9, r26
      ce:	9a 1a       	sub	r9, r26
      d0:	9a 1a       	sub	r9, r26
      d2:	9a 1a       	sub	r9, r26
      d4:	9a 1a       	sub	r9, r26
      d6:	9a 1a       	sub	r9, r26
      d8:	9a 1a       	sub	r9, r26
      da:	9a 1a       	sub	r9, r26
      dc:	9a 1a       	sub	r9, r26
      de:	9a 1a       	sub	r9, r26
      e0:	9a 1a       	sub	r9, r26
      e2:	9a 1a       	sub	r9, r26
      e4:	9a 1a       	sub	r9, r26
      e6:	9a 1a       	sub	r9, r26
      e8:	9a 1a       	sub	r9, r26
      ea:	9a 1a       	sub	r9, r26
      ec:	9a 1a       	sub	r9, r26
      ee:	9a 1a       	sub	r9, r26
      f0:	9a 1a       	sub	r9, r26
      f2:	9a 1a       	sub	r9, r26
      f4:	9a 1a       	sub	r9, r26
      f6:	9a 1a       	sub	r9, r26
      f8:	9a 1a       	sub	r9, r26
      fa:	9a 1a       	sub	r9, r26
      fc:	1b 1a       	sub	r1, r27
      fe:	5b 1a       	sub	r5, r27
     100:	07 2c       	mov	r0, r7
     102:	7a a5       	ldd	r23, Y+42	; 0x2a
     104:	ba 6c       	ori	r27, 0xCA	; 202
     106:	c5 90       	lpm	r12, Z+
     108:	da 3b       	cpi	r29, 0xBA	; 186
     10a:	93 65       	ori	r25, 0x53	; 83
     10c:	fc 8b       	std	Y+20, r31	; 0x14
     10e:	bc 53       	subi	r27, 0x3C	; 60
     110:	f8 10       	cpse	r15, r8
     112:	fd 3c       	cpi	r31, 0xCD	; 205
     114:	56 92       	lac	Z, r5
     116:	83 4d       	sbci	r24, 0xD3	; 211
     118:	bd 87       	std	Y+13, r27	; 0x0d
     11a:	9d 3a       	cpi	r25, 0xAD	; 173
     11c:	b6 3d       	cpi	r27, 0xD6	; 214
     11e:	cb c9       	rjmp	.-3178   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b6>
     120:	bf 5b       	subi	r27, 0xBF	; 191
     122:	be 73       	andi	r27, 0x3E	; 62
     124:	da 0f       	add	r29, r26
     126:	c9 3f       	cpi	r28, 0xF9	; 249

00000128 <__trampolines_end>:
     128:	63 61       	ori	r22, 0x13	; 19
     12a:	73 65       	ori	r23, 0x53	; 83
     12c:	20 33       	cpi	r18, 0x30	; 48
     12e:	20 0a       	sbc	r2, r16
	...

00000131 <__c.1988>:
     131:	63 61 73 65 20 32 20 0a 00                          case 2 ..

0000013a <__c.2099>:
     13a:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

0000014a <__c.2097>:
     14a:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

00000159 <__c.2066>:
     159:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000165 <__c.2064>:
     165:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000170 <__c.2060>:
     170:	50 49 44 0a 00                                      PID..

00000175 <__c.2058>:
     175:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000181 <__c.2056>:
     181:	50 49 44 0a 00                                      PID..

00000186 <__c.2054>:
     186:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000191 <__c.2051>:
     191:	0a 00                                               ..

00000193 <__c.2049>:
     193:	2c 20 00                                            , .

00000196 <__c.2047>:
     196:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     1a6:	3a 20 00                                            : .

000001a9 <__c.2043>:
     1a9:	0d 0a 00                                            ...

000001ac <__c.2041>:
     1ac:	0d 0a 00                                            ...

000001af <__c.2039>:
     1af:	50 68 6f 5b 36 5d 00                                Pho[6].

000001b6 <__c.2037>:
     1b6:	0d 0a 00                                            ...

000001b9 <__c.2035>:
     1b9:	50 68 6f 5b 35 5d 00                                Pho[5].

000001c0 <__c.2033>:
     1c0:	0d 0a 00                                            ...

000001c3 <__c.2031>:
     1c3:	50 68 6f 5b 34 5d 00                                Pho[4].

000001ca <__c.2029>:
     1ca:	0d 0a 00                                            ...

000001cd <__c.2027>:
     1cd:	50 68 6f 5b 33 5d 00                                Pho[3].

000001d4 <__c.2025>:
     1d4:	0d 0a 00                                            ...

000001d7 <__c.2023>:
     1d7:	50 68 6f 5b 32 5d 00                                Pho[2].

000001de <__c.2021>:
     1de:	0d 0a 00                                            ...

000001e1 <__c.2019>:
     1e1:	50 68 6f 5b 31 5d 00                                Pho[1].

000001e8 <__c.2017>:
     1e8:	0d 0a 00                                            ...

000001eb <__c.2015>:
     1eb:	50 68 6f 5b 30 5d 00                                Pho[0].

000001f2 <__c.2013>:
     1f2:	0d 0a 00                                            ...

000001f5 <__c.2156>:
     1f5:	0a 00                                               ..

000001f7 <__c.2154>:
     1f7:	64 69 73 74 3a 20 00                                dist: .

000001fe <__c.2146>:
     1fe:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000209 <__c.2144>:
     209:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000215 <__c.2142>:
     215:	0a 00                                               ..

00000217 <__c.2140>:
     217:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000221 <__c.2138>:
     221:	0a 00                                               ..

00000223 <__c.2136>:
     223:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

0000022e <__c.2128>:
     22e:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000239 <__c.2126>:
     239:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000245 <__c.2124>:
     245:	0a 00                                               ..

00000247 <__c.2122>:
     247:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000251 <__c.2120>:
     251:	0a 00                                               ..

00000253 <__c.2118>:
     253:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

0000025e <__c.2110>:
     25e:	0a 00                                               ..

00000260 <__c.2108>:
     260:	61 6c 70 68 61 3a 20 00                             alpha: .

00000268 <__c.2084>:
     268:	0a 00                                               ..

0000026a <__c.2082>:
     26a:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000272 <__c.2080>:
     272:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000283 <__c.2078>:
     283:	0a 00                                               ..

00000285 <__c.2076>:
     285:	09 09 79 3a 00                                      ..y:.

0000028a <__c.2074>:
     28a:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000296 <__c.2046>:
     296:	0a 00                                               ..

00000298 <__c.2044>:
     298:	64 6d 61 78 3a 00                                   dmax:.

0000029e <descriptor_list>:
     29e:	00 01 00 00 35 03 12 00 02 00 00 f2 02 43 00 03     ....5........C..
     2ae:	00 00 ee 02 04 01 03 09 04 da 02 12 02 03 09 04     ................
     2be:	d2 02 06 03 03 09 04 c8 02 08                       ..........

000002c8 <string3>:
     2c8:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000002d2 <string2>:
     2d2:	06 03 4d 00 32 00 00 00                             ..M.2...

000002da <string1>:
     2da:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     2ea:	65 00 00 00                                         e...

000002ee <string0>:
     2ee:	04 03 09 04                                         ....

000002f2 <config1_descriptor>:
     2f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     302:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     312:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     322:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     332:	40 00 00                                            @..

00000335 <device_descriptor>:
     335:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     345:	03 01                                               ..

00000347 <endpoint_config_table>:
     347:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000351 <__c.2120>:
     351:	0a 00                                               ..

00000353 <__c.2118>:
     353:	09 09 79 3a 00                                      ..y:.

00000358 <__c.2116>:
     358:	49 74 73 20 6c 6f 63 61 74 69 6f 6e 20 69 73 3a     Its location is:
     368:	20 00                                                .

0000036a <__c.2114>:
     36a:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

00000379 <__c.2112>:
     379:	4e 6f 2e 20 00                                      No. .

0000037e <__c.2109>:
     37e:	0a 00                                               ..

00000380 <__c.2107>:
     380:	09 09 79 3a 00                                      ..y:.

00000385 <__c.2105>:
     385:	49 74 73 20 6c 6f 63 61 74 69 6f 6e 20 69 73 3a     Its location is:
     395:	20 00                                                .

00000397 <__c.2103>:
     397:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

000003a7 <__c.2101>:
     3a7:	4e 6f 2e 20 00                                      No. .

000003ac <__c.2098>:
     3ac:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

000003b7 <__c.2095>:
     3b7:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

000003c1 <__c.2092>:
     3c1:	50 61 75 73 65 0a 00                                Pause..

000003c8 <__c.2089>:
     3c8:	47 6f 61 6c 20 42 0a 00                             Goal B..

000003d0 <__c.2086>:
     3d0:	47 6f 61 6c 20 41 0a 00                             Goal A..

000003d8 <__c.2083>:
     3d8:	50 6c 61 79 20 0a 00                                Play ..

000003df <__c.2079>:
     3df:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

000003eb <__c.2070>:
     3eb:	0a 00                                               ..

000003ed <__c.2068>:
     3ed:	2c 20 00                                            , .

000003f0 <__c.2066>:
     3f0:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

000003f9 <__c.2062>:
     3f9:	0a 00                                               ..

000003fb <__c.2060>:
     3fb:	2c 20 00                                            , .

000003fe <__c.2058>:
     3fe:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     40e:	3d 20 00                                            = .

00000411 <__c.2055>:
     411:	0a 00                                               ..

00000413 <__c.2053>:
     413:	2c 20 00                                            , .

00000416 <__c.2051>:
     416:	67 6f 61 6c 20 3d 20 00                             goal = .

0000041e <__c.2049>:
     41e:	73 65 6e 74 20 6c 6f 73 74 20 6d 65 73 73 73 61     sent lost messsa
     42e:	67 65 2e 0a 00                                      ge...

00000433 <__c.2046>:
     433:	73 65 6e 74 20 66 6f 75 6e 64 20 6d 65 73 73 73     sent found messs
     443:	61 67 65 2e 0a 00                                   age...

00000449 <__c.2040>:
     449:	0a 00                                               ..

0000044b <__c.2038>:
     44b:	73 74 61 74 65 3a 20 00 00                          state: ..

00000454 <__ctors_end>:
     454:	11 24       	eor	r1, r1
     456:	1f be       	out	0x3f, r1	; 63
     458:	cf ef       	ldi	r28, 0xFF	; 255
     45a:	da e0       	ldi	r29, 0x0A	; 10
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	cd bf       	out	0x3d, r28	; 61

00000460 <__do_copy_data>:
     460:	11 e0       	ldi	r17, 0x01	; 1
     462:	a0 e0       	ldi	r26, 0x00	; 0
     464:	b1 e0       	ldi	r27, 0x01	; 1
     466:	e2 e7       	ldi	r30, 0x72	; 114
     468:	ff e3       	ldi	r31, 0x3F	; 63
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__do_copy_data+0x10>
     46c:	05 90       	lpm	r0, Z+
     46e:	0d 92       	st	X+, r0
     470:	ae 33       	cpi	r26, 0x3E	; 62
     472:	b1 07       	cpc	r27, r17
     474:	d9 f7       	brne	.-10     	; 0x46c <__do_copy_data+0xc>

00000476 <__do_clear_bss>:
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	ae e3       	ldi	r26, 0x3E	; 62
     47a:	b1 e0       	ldi	r27, 0x01	; 1
     47c:	01 c0       	rjmp	.+2      	; 0x480 <.do_clear_bss_start>

0000047e <.do_clear_bss_loop>:
     47e:	1d 92       	st	X+, r1

00000480 <.do_clear_bss_start>:
     480:	ae 3b       	cpi	r26, 0xBE	; 190
     482:	b2 07       	cpc	r27, r18
     484:	e1 f7       	brne	.-8      	; 0x47e <.do_clear_bss_loop>
     486:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <main>
     48a:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <_exit>

0000048e <__bad_interrupt>:
     48e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000492 <send_message>:
 */ 

#include "communication.h"


void send_message(int state, int num, char *buffer, float *c_wii){
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ea 01       	movw	r28, r20
     49c:	89 01       	movw	r16, r18
	switch(state){ 
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	91 05       	cpc	r25, r1
     4a2:	19 f0       	breq	.+6      	; 0x4aa <send_message+0x18>
     4a4:	03 97       	sbiw	r24, 0x03	; 3
     4a6:	c9 f1       	breq	.+114    	; 0x51a <send_message+0x88>
     4a8:	6f c0       	rjmp	.+222    	; 0x588 <send_message+0xf6>
		case 2:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xC1;
     4aa:	81 ec       	ldi	r24, 0xC1	; 193
     4ac:	88 83       	st	Y, r24
			buffer[1] = num;
     4ae:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     4b0:	f9 01       	movw	r30, r18
     4b2:	60 81       	ld	r22, Z
     4b4:	71 81       	ldd	r23, Z+1	; 0x01
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     4be:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     4c0:	f8 01       	movw	r30, r16
     4c2:	60 81       	ld	r22, Z
     4c4:	71 81       	ldd	r23, Z+1	; 0x01
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	93 81       	ldd	r25, Z+3	; 0x03
     4ca:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     4ce:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     4d0:	f8 01       	movw	r30, r16
     4d2:	64 81       	ldd	r22, Z+4	; 0x04
     4d4:	75 81       	ldd	r23, Z+5	; 0x05
     4d6:	86 81       	ldd	r24, Z+6	; 0x06
     4d8:	97 81       	ldd	r25, Z+7	; 0x07
     4da:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     4de:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     4e0:	f8 01       	movw	r30, r16
     4e2:	64 81       	ldd	r22, Z+4	; 0x04
     4e4:	75 81       	ldd	r23, Z+5	; 0x05
     4e6:	86 81       	ldd	r24, Z+6	; 0x06
     4e8:	97 81       	ldd	r25, Z+7	; 0x07
     4ea:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     4ee:	7d 83       	std	Y+5, r23	; 0x05
 			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     4f0:	4a e0       	ldi	r20, 0x0A	; 10
     4f2:	be 01       	movw	r22, r28
     4f4:	8d e0       	ldi	r24, 0x0D	; 13
     4f6:	0e 94 55 14 	call	0x28aa	; 0x28aa <m_rf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fa:	85 ec       	ldi	r24, 0xC5	; 197
     4fc:	9c e5       	ldi	r25, 0x5C	; 92
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <send_message+0x6c>
     502:	00 c0       	rjmp	.+0      	; 0x504 <send_message+0x72>
     504:	00 00       	nop
 			m_wait(95);
			m_rf_send(TXADDRESS2,buffer,PACKET_LENGTH);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	be 01       	movw	r22, r28
     50a:	8e e0       	ldi	r24, 0x0E	; 14
     50c:	0e 94 55 14 	call	0x28aa	; 0x28aa <m_rf_send>
			usb_tx_string("case 2 \n");
     510:	81 e3       	ldi	r24, 0x31	; 49
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			break;
     518:	37 c0       	rjmp	.+110    	; 0x588 <send_message+0xf6>
		case 3:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xC2;
     51a:	82 ec       	ldi	r24, 0xC2	; 194
     51c:	88 83       	st	Y, r24
			buffer[1] = num;
     51e:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     520:	f9 01       	movw	r30, r18
     522:	60 81       	ld	r22, Z
     524:	71 81       	ldd	r23, Z+1	; 0x01
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     52e:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     530:	f8 01       	movw	r30, r16
     532:	60 81       	ld	r22, Z
     534:	71 81       	ldd	r23, Z+1	; 0x01
     536:	82 81       	ldd	r24, Z+2	; 0x02
     538:	93 81       	ldd	r25, Z+3	; 0x03
     53a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     53e:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     540:	f8 01       	movw	r30, r16
     542:	64 81       	ldd	r22, Z+4	; 0x04
     544:	75 81       	ldd	r23, Z+5	; 0x05
     546:	86 81       	ldd	r24, Z+6	; 0x06
     548:	97 81       	ldd	r25, Z+7	; 0x07
     54a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     54e:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     550:	f8 01       	movw	r30, r16
     552:	64 81       	ldd	r22, Z+4	; 0x04
     554:	75 81       	ldd	r23, Z+5	; 0x05
     556:	86 81       	ldd	r24, Z+6	; 0x06
     558:	97 81       	ldd	r25, Z+7	; 0x07
     55a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     55e:	7d 83       	std	Y+5, r23	; 0x05
			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     560:	4a e0       	ldi	r20, 0x0A	; 10
     562:	be 01       	movw	r22, r28
     564:	8d e0       	ldi	r24, 0x0D	; 13
     566:	0e 94 55 14 	call	0x28aa	; 0x28aa <m_rf_send>
     56a:	85 ec       	ldi	r24, 0xC5	; 197
     56c:	9c e5       	ldi	r25, 0x5C	; 92
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <send_message+0xdc>
     572:	00 c0       	rjmp	.+0      	; 0x574 <send_message+0xe2>
     574:	00 00       	nop
			m_wait(95);
			m_rf_send(TXADDRESS2,buffer,PACKET_LENGTH);
     576:	4a e0       	ldi	r20, 0x0A	; 10
     578:	be 01       	movw	r22, r28
     57a:	8e e0       	ldi	r24, 0x0E	; 14
     57c:	0e 94 55 14 	call	0x28aa	; 0x28aa <m_rf_send>
			usb_tx_string("case 3 \n");
     580:	88 e2       	ldi	r24, 0x28	; 40
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		
	}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <init_ADC>:
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     596:	ac e7       	ldi	r26, 0x7C	; 124
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	8c 91       	ld	r24, X
     59c:	8f 77       	andi	r24, 0x7F	; 127
     59e:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     5a0:	8c 91       	ld	r24, X
     5a2:	80 64       	ori	r24, 0x40	; 64
     5a4:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     5a6:	ea e7       	ldi	r30, 0x7A	; 122
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	84 60       	ori	r24, 0x04	; 4
     5ae:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     5b0:	80 81       	ld	r24, Z
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     5b6:	80 81       	ld	r24, Z
     5b8:	81 60       	ori	r24, 0x01	; 1
     5ba:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     5bc:	ce e7       	ldi	r28, 0x7E	; 126
     5be:	d0 e0       	ldi	r29, 0x00	; 0
     5c0:	88 81       	ld	r24, Y
     5c2:	81 60       	ori	r24, 0x01	; 1
     5c4:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     5c6:	88 81       	ld	r24, Y
     5c8:	82 60       	ori	r24, 0x02	; 2
     5ca:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     5cc:	cd e7       	ldi	r28, 0x7D	; 125
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
     5d0:	88 81       	ld	r24, Y
     5d2:	82 60       	ori	r24, 0x02	; 2
     5d4:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     5d6:	88 81       	ld	r24, Y
     5d8:	84 60       	ori	r24, 0x04	; 4
     5da:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     5dc:	88 81       	ld	r24, Y
     5de:	88 60       	ori	r24, 0x08	; 8
     5e0:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     5e2:	88 81       	ld	r24, Y
     5e4:	80 61       	ori	r24, 0x10	; 16
     5e6:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     5e8:	88 81       	ld	r24, Y
     5ea:	81 60       	ori	r24, 0x01	; 1
     5ec:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     5ee:	cb e7       	ldi	r28, 0x7B	; 123
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
     5f2:	88 81       	ld	r24, Y
     5f4:	8f 7d       	andi	r24, 0xDF	; 223
     5f6:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     5f8:	8c 91       	ld	r24, X
     5fa:	8b 7f       	andi	r24, 0xFB	; 251
     5fc:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     5fe:	8c 91       	ld	r24, X
     600:	8d 7f       	andi	r24, 0xFD	; 253
     602:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     604:	8c 91       	ld	r24, X
     606:	8e 7f       	andi	r24, 0xFE	; 254
     608:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     60a:	80 81       	ld	r24, Z
     60c:	80 62       	ori	r24, 0x20	; 32
     60e:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     610:	80 81       	ld	r24, Z
     612:	88 60       	ori	r24, 0x08	; 8
     614:	80 83       	st	Z, r24
	sei();
     616:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     618:	80 81       	ld	r24, Z
     61a:	80 68       	ori	r24, 0x80	; 128
     61c:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     61e:	80 81       	ld	r24, Z
     620:	80 64       	ori	r24, 0x40	; 64
     622:	80 83       	st	Z, r24
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <PID_Pho>:
			break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     62a:	8f 92       	push	r8
     62c:	9f 92       	push	r9
     62e:	af 92       	push	r10
     630:	bf 92       	push	r11
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	6b 01       	movw	r12, r22
     644:	7c 01       	movw	r14, r24
     646:	49 01       	movw	r8, r18
     648:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     64a:	c0 91 4a 01 	lds	r28, 0x014A
     64e:	d0 91 4b 01 	lds	r29, 0x014B
     652:	80 91 4e 01 	lds	r24, 0x014E
     656:	90 91 4f 01 	lds	r25, 0x014F
     65a:	c8 0f       	add	r28, r24
     65c:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     65e:	20 91 4c 01 	lds	r18, 0x014C
     662:	30 91 4d 01 	lds	r19, 0x014D
     666:	80 91 50 01 	lds	r24, 0x0150
     66a:	90 91 51 01 	lds	r25, 0x0151
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     672:	c8 1b       	sub	r28, r24
     674:	d9 0b       	sbc	r29, r25
     676:	d0 93 bb 01 	sts	0x01BB, r29
     67a:	c0 93 ba 01 	sts	0x01BA, r28
	diff_Pho = input - input_last;
     67e:	80 91 46 01 	lds	r24, 0x0146
     682:	90 91 47 01 	lds	r25, 0x0147
     686:	8e 01       	movw	r16, r28
     688:	08 1b       	sub	r16, r24
     68a:	19 0b       	sbc	r17, r25
     68c:	10 93 41 01 	sts	0x0141, r17
     690:	00 93 40 01 	sts	0x0140, r16
	sum_Pho = sum_Pho + input;
     694:	80 91 44 01 	lds	r24, 0x0144
     698:	90 91 45 01 	lds	r25, 0x0145
     69c:	8c 0f       	add	r24, r28
     69e:	9d 1f       	adc	r25, r29
     6a0:	90 93 45 01 	sts	0x0145, r25
     6a4:	80 93 44 01 	sts	0x0144, r24
	output = Kp * input + Kd * diff_Pho;
     6a8:	be 01       	movw	r22, r28
     6aa:	88 27       	eor	r24, r24
     6ac:	77 fd       	sbrc	r23, 7
     6ae:	80 95       	com	r24
     6b0:	98 2f       	mov	r25, r24
     6b2:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     6b6:	a7 01       	movw	r20, r14
     6b8:	96 01       	movw	r18, r12
     6ba:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
     6be:	6b 01       	movw	r12, r22
     6c0:	7c 01       	movw	r14, r24
     6c2:	b8 01       	movw	r22, r16
     6c4:	88 27       	eor	r24, r24
     6c6:	77 fd       	sbrc	r23, 7
     6c8:	80 95       	com	r24
     6ca:	98 2f       	mov	r25, r24
     6cc:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     6d0:	a5 01       	movw	r20, r10
     6d2:	94 01       	movw	r18, r8
     6d4:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	c7 01       	movw	r24, r14
     6de:	b6 01       	movw	r22, r12
     6e0:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
     6e4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
     6e8:	70 93 b9 01 	sts	0x01B9, r23
     6ec:	60 93 b8 01 	sts	0x01B8, r22
	
	input_last = input;
     6f0:	d0 93 47 01 	sts	0x0147, r29
     6f4:	c0 93 46 01 	sts	0x0146, r28
	
	if(output>0){
     6f8:	16 16       	cp	r1, r22
     6fa:	17 06       	cpc	r1, r23
     6fc:	74 f5       	brge	.+92     	; 0x75a <PID_Pho+0x130>
		OCR1C = full_speed - abs(output);
     6fe:	9b 01       	movw	r18, r22
     700:	77 23       	and	r23, r23
     702:	24 f4       	brge	.+8      	; 0x70c <PID_Pho+0xe2>
     704:	22 27       	eor	r18, r18
     706:	33 27       	eor	r19, r19
     708:	26 1b       	sub	r18, r22
     70a:	37 0b       	sbc	r19, r23
     70c:	8a e8       	ldi	r24, 0x8A	; 138
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	82 1b       	sub	r24, r18
     712:	93 0b       	sbc	r25, r19
     714:	90 93 8d 00 	sts	0x008D, r25
     718:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     71c:	20 91 00 01 	lds	r18, 0x0100
     720:	30 91 01 01 	lds	r19, 0x0101
     724:	80 91 b8 01 	lds	r24, 0x01B8
     728:	90 91 b9 01 	lds	r25, 0x01B9
     72c:	99 23       	and	r25, r25
     72e:	1c f4       	brge	.+6      	; 0x736 <PID_Pho+0x10c>
     730:	91 95       	neg	r25
     732:	81 95       	neg	r24
     734:	91 09       	sbc	r25, r1
     736:	28 17       	cp	r18, r24
     738:	39 07       	cpc	r19, r25
     73a:	44 f4       	brge	.+16     	; 0x74c <PID_Pho+0x122>
			OCR1C = full_speed - speed_diff_Pho;
     73c:	8a e8       	ldi	r24, 0x8A	; 138
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	82 1b       	sub	r24, r18
     742:	93 0b       	sbc	r25, r19
     744:	90 93 8d 00 	sts	0x008D, r25
     748:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     74c:	8a e8       	ldi	r24, 0x8A	; 138
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	90 93 8b 00 	sts	0x008B, r25
     754:	80 93 8a 00 	sts	0x008A, r24
     758:	2d c0       	rjmp	.+90     	; 0x7b4 <PID_Pho+0x18a>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     75a:	9b 01       	movw	r18, r22
     75c:	77 23       	and	r23, r23
     75e:	24 f4       	brge	.+8      	; 0x768 <PID_Pho+0x13e>
     760:	22 27       	eor	r18, r18
     762:	33 27       	eor	r19, r19
     764:	26 1b       	sub	r18, r22
     766:	37 0b       	sbc	r19, r23
     768:	8a e8       	ldi	r24, 0x8A	; 138
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	82 1b       	sub	r24, r18
     76e:	93 0b       	sbc	r25, r19
     770:	90 93 8b 00 	sts	0x008B, r25
     774:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     778:	20 91 00 01 	lds	r18, 0x0100
     77c:	30 91 01 01 	lds	r19, 0x0101
     780:	80 91 b8 01 	lds	r24, 0x01B8
     784:	90 91 b9 01 	lds	r25, 0x01B9
     788:	99 23       	and	r25, r25
     78a:	1c f4       	brge	.+6      	; 0x792 <PID_Pho+0x168>
     78c:	91 95       	neg	r25
     78e:	81 95       	neg	r24
     790:	91 09       	sbc	r25, r1
     792:	28 17       	cp	r18, r24
     794:	39 07       	cpc	r19, r25
     796:	44 f4       	brge	.+16     	; 0x7a8 <PID_Pho+0x17e>
			OCR1B = full_speed - speed_diff_Pho;
     798:	8a e8       	ldi	r24, 0x8A	; 138
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	82 1b       	sub	r24, r18
     79e:	93 0b       	sbc	r25, r19
     7a0:	90 93 8b 00 	sts	0x008B, r25
     7a4:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     7a8:	8a e8       	ldi	r24, 0x8A	; 138
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	90 93 8d 00 	sts	0x008D, r25
     7b0:	80 93 8c 00 	sts	0x008C, r24
	}
}
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	08 95       	ret

000007ce <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     7ce:	8f 92       	push	r8
     7d0:	9f 92       	push	r9
     7d2:	af 92       	push	r10
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	6b 01       	movw	r12, r22
     7e8:	7c 01       	movw	r14, r24
     7ea:	49 01       	movw	r8, r18
     7ec:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     7ee:	c0 91 4a 01 	lds	r28, 0x014A
     7f2:	d0 91 4b 01 	lds	r29, 0x014B
     7f6:	80 91 4e 01 	lds	r24, 0x014E
     7fa:	90 91 4f 01 	lds	r25, 0x014F
     7fe:	c8 0f       	add	r28, r24
     800:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     802:	20 91 4c 01 	lds	r18, 0x014C
     806:	30 91 4d 01 	lds	r19, 0x014D
     80a:	80 91 50 01 	lds	r24, 0x0150
     80e:	90 91 51 01 	lds	r25, 0x0151
     812:	82 0f       	add	r24, r18
     814:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     816:	c8 1b       	sub	r28, r24
     818:	d9 0b       	sbc	r29, r25
     81a:	d0 93 bb 01 	sts	0x01BB, r29
     81e:	c0 93 ba 01 	sts	0x01BA, r28
	diff_stalk = input - input_last;
     822:	80 91 46 01 	lds	r24, 0x0146
     826:	90 91 47 01 	lds	r25, 0x0147
     82a:	8e 01       	movw	r16, r28
     82c:	08 1b       	sub	r16, r24
     82e:	19 0b       	sbc	r17, r25
     830:	10 93 3f 01 	sts	0x013F, r17
     834:	00 93 3e 01 	sts	0x013E, r16
	sum_stalk = sum_stalk + input;
     838:	80 91 42 01 	lds	r24, 0x0142
     83c:	90 91 43 01 	lds	r25, 0x0143
     840:	8c 0f       	add	r24, r28
     842:	9d 1f       	adc	r25, r29
     844:	90 93 43 01 	sts	0x0143, r25
     848:	80 93 42 01 	sts	0x0142, r24
	output = Kp * input + Kd * diff_stalk;
     84c:	be 01       	movw	r22, r28
     84e:	88 27       	eor	r24, r24
     850:	77 fd       	sbrc	r23, 7
     852:	80 95       	com	r24
     854:	98 2f       	mov	r25, r24
     856:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     85a:	a7 01       	movw	r20, r14
     85c:	96 01       	movw	r18, r12
     85e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
     862:	6b 01       	movw	r12, r22
     864:	7c 01       	movw	r14, r24
     866:	b8 01       	movw	r22, r16
     868:	88 27       	eor	r24, r24
     86a:	77 fd       	sbrc	r23, 7
     86c:	80 95       	com	r24
     86e:	98 2f       	mov	r25, r24
     870:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     874:	a5 01       	movw	r20, r10
     876:	94 01       	movw	r18, r8
     878:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
     888:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
     88c:	70 93 b9 01 	sts	0x01B9, r23
     890:	60 93 b8 01 	sts	0x01B8, r22
	
	input_last = input;
     894:	d0 93 47 01 	sts	0x0147, r29
     898:	c0 93 46 01 	sts	0x0146, r28
	
	if(abs(output) >= full_speed_stalk){
     89c:	9b 01       	movw	r18, r22
     89e:	77 23       	and	r23, r23
     8a0:	24 f4       	brge	.+8      	; 0x8aa <PID_stalk+0xdc>
     8a2:	22 27       	eor	r18, r18
     8a4:	33 27       	eor	r19, r19
     8a6:	26 1b       	sub	r18, r22
     8a8:	37 0b       	sbc	r19, r23
     8aa:	24 3f       	cpi	r18, 0xF4	; 244
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	38 07       	cpc	r19, r24
     8b0:	5c f0       	brlt	.+22     	; 0x8c8 <PID_stalk+0xfa>
		OCR1C = full_speed_stalk;
     8b2:	84 ef       	ldi	r24, 0xF4	; 244
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 8d 00 	sts	0x008D, r25
     8ba:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     8be:	90 93 8b 00 	sts	0x008B, r25
     8c2:	80 93 8a 00 	sts	0x008A, r24
     8c6:	11 c0       	rjmp	.+34     	; 0x8ea <PID_stalk+0x11c>
	}
	else{
		OCR1C = abs(output);
     8c8:	30 93 8d 00 	sts	0x008D, r19
     8cc:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     8d0:	80 91 b8 01 	lds	r24, 0x01B8
     8d4:	90 91 b9 01 	lds	r25, 0x01B9
     8d8:	99 23       	and	r25, r25
     8da:	1c f4       	brge	.+6      	; 0x8e2 <PID_stalk+0x114>
     8dc:	91 95       	neg	r25
     8de:	81 95       	neg	r24
     8e0:	91 09       	sbc	r25, r1
     8e2:	90 93 8b 00 	sts	0x008B, r25
     8e6:	80 93 8a 00 	sts	0x008A, r24
	}
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	08 95       	ret

00000904 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     904:	6f 92       	push	r6
     906:	7f 92       	push	r7
     908:	8f 92       	push	r8
     90a:	9f 92       	push	r9
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	5c 01       	movw	r10, r24
	m_usb_tx_string("\r\n");
     922:	82 ef       	ldi	r24, 0xF2	; 242
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("Pho[0]");
     92a:	8b ee       	ldi	r24, 0xEB	; 235
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(Pho[0]);
     932:	0f 2e       	mov	r0, r31
     934:	fa e4       	ldi	r31, 0x4A	; 74
     936:	8f 2e       	mov	r8, r31
     938:	f1 e0       	ldi	r31, 0x01	; 1
     93a:	9f 2e       	mov	r9, r31
     93c:	f0 2d       	mov	r31, r0
     93e:	f4 01       	movw	r30, r8
     940:	80 81       	ld	r24, Z
     942:	91 81       	ldd	r25, Z+1	; 0x01
     944:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     948:	88 ee       	ldi	r24, 0xE8	; 232
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("Pho[1]");
     950:	81 ee       	ldi	r24, 0xE1	; 225
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(Pho[1]);
     958:	0c e4       	ldi	r16, 0x4C	; 76
     95a:	11 e0       	ldi	r17, 0x01	; 1
     95c:	f8 01       	movw	r30, r16
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     966:	8e ed       	ldi	r24, 0xDE	; 222
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("Pho[2]");
     96e:	87 ed       	ldi	r24, 0xD7	; 215
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(Pho[2]);
     976:	0f 2e       	mov	r0, r31
     978:	fe e4       	ldi	r31, 0x4E	; 78
     97a:	cf 2e       	mov	r12, r31
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	df 2e       	mov	r13, r31
     980:	f0 2d       	mov	r31, r0
     982:	f6 01       	movw	r30, r12
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     98c:	84 ed       	ldi	r24, 0xD4	; 212
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("Pho[3]");
     994:	8d ec       	ldi	r24, 0xCD	; 205
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(Pho[3]);
     99c:	c0 e5       	ldi	r28, 0x50	; 80
     99e:	d1 e0       	ldi	r29, 0x01	; 1
     9a0:	88 81       	ld	r24, Y
     9a2:	99 81       	ldd	r25, Y+1	; 0x01
     9a4:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     9a8:	8a ec       	ldi	r24, 0xCA	; 202
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("Pho[4]");
     9b0:	83 ec       	ldi	r24, 0xC3	; 195
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(Pho[4]);
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f2 e5       	ldi	r31, 0x52	; 82
     9bc:	ef 2e       	mov	r14, r31
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	ff 2e       	mov	r15, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	f7 01       	movw	r30, r14
     9c6:	80 81       	ld	r24, Z
     9c8:	91 81       	ldd	r25, Z+1	; 0x01
     9ca:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     9ce:	80 ec       	ldi	r24, 0xC0	; 192
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("Pho[5]");
     9d6:	89 eb       	ldi	r24, 0xB9	; 185
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(Pho[5]);
     9de:	0f 2e       	mov	r0, r31
     9e0:	f4 e5       	ldi	r31, 0x54	; 84
     9e2:	6f 2e       	mov	r6, r31
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	7f 2e       	mov	r7, r31
     9e8:	f0 2d       	mov	r31, r0
     9ea:	f3 01       	movw	r30, r6
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     9f4:	86 eb       	ldi	r24, 0xB6	; 182
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("Pho[6]");
     9fc:	8f ea       	ldi	r24, 0xAF	; 175
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(Pho[6]);
     a04:	80 91 56 01 	lds	r24, 0x0156
     a08:	90 91 57 01 	lds	r25, 0x0157
     a0c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     a10:	8c ea       	ldi	r24, 0xAC	; 172
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_string("\r\n");
     a18:	89 ea       	ldi	r24, 0xA9	; 169
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     a20:	f4 01       	movw	r30, r8
     a22:	20 81       	ld	r18, Z
     a24:	31 81       	ldd	r19, Z+1	; 0x01
     a26:	f6 01       	movw	r30, r12
     a28:	80 81       	ld	r24, Z
     a2a:	91 81       	ldd	r25, Z+1	; 0x01
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	f7 01       	movw	r30, r14
     a32:	20 81       	ld	r18, Z
     a34:	31 81       	ldd	r19, Z+1	; 0x01
     a36:	82 0f       	add	r24, r18
     a38:	93 1f       	adc	r25, r19
     a3a:	23 e0       	ldi	r18, 0x03	; 3
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	b9 01       	movw	r22, r18
     a40:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <__divmodhi4>
     a44:	7b 01       	movw	r14, r22
     a46:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     a48:	f8 01       	movw	r30, r16
     a4a:	40 81       	ld	r20, Z
     a4c:	51 81       	ldd	r21, Z+1	; 0x01
     a4e:	88 81       	ld	r24, Y
     a50:	99 81       	ldd	r25, Y+1	; 0x01
     a52:	84 0f       	add	r24, r20
     a54:	95 1f       	adc	r25, r21
     a56:	f3 01       	movw	r30, r6
     a58:	40 81       	ld	r20, Z
     a5a:	51 81       	ldd	r21, Z+1	; 0x01
     a5c:	84 0f       	add	r24, r20
     a5e:	95 1f       	adc	r25, r21
     a60:	b9 01       	movw	r22, r18
     a62:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <__divmodhi4>
     a66:	eb 01       	movw	r28, r22
     a68:	8b 01       	movw	r16, r22
	
	m_usb_tx_string("mean024, mean135: ");
     a6a:	86 e9       	ldi	r24, 0x96	; 150
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(mean024);
     a72:	c7 01       	movw	r24, r14
     a74:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string(", ");
     a78:	83 e9       	ldi	r24, 0x93	; 147
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(mean135);
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
     a86:	81 e9       	ldi	r24, 0x91	; 145
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	switch(state){
     a8e:	f2 e0       	ldi	r31, 0x02	; 2
     a90:	af 16       	cp	r10, r31
     a92:	b1 04       	cpc	r11, r1
     a94:	31 f0       	breq	.+12     	; 0xaa2 <findPuck+0x19e>
     a96:	45 e0       	ldi	r20, 0x05	; 5
     a98:	a4 16       	cp	r10, r20
     a9a:	b1 04       	cpc	r11, r1
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <findPuck+0x19c>
     a9e:	bb c0       	rjmp	.+374    	; 0xc16 <__stack+0x117>
     aa0:	0e c1       	rjmp	.+540    	; 0xcbe <__stack+0x1bf>
		case 2:
			if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     aa2:	c7 01       	movw	r24, r14
     aa4:	8c 1b       	sub	r24, r28
     aa6:	9d 0b       	sbc	r25, r29
     aa8:	c3 97       	sbiw	r24, 0x33	; 51
     aaa:	84 f4       	brge	.+32     	; 0xacc <findPuck+0x1c8>
     aac:	ce 15       	cp	r28, r14
     aae:	df 05       	cpc	r29, r15
     ab0:	0c f0       	brlt	.+2      	; 0xab4 <findPuck+0x1b0>
     ab2:	50 c0       	rjmp	.+160    	; 0xb54 <__stack+0x55>
     ab4:	20 91 52 01 	lds	r18, 0x0152
     ab8:	30 91 53 01 	lds	r19, 0x0153
     abc:	80 91 4e 01 	lds	r24, 0x014E
     ac0:	90 91 4f 01 	lds	r25, 0x014F
     ac4:	82 17       	cp	r24, r18
     ac6:	93 07       	cpc	r25, r19
     ac8:	0c f0       	brlt	.+2      	; 0xacc <findPuck+0x1c8>
     aca:	44 c0       	rjmp	.+136    	; 0xb54 <__stack+0x55>
				m_usb_tx_string("turn left\n");
     acc:	86 e8       	ldi	r24, 0x86	; 134
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				if(mean024 > revThres){
     ad4:	51 eb       	ldi	r21, 0xB1	; 177
     ad6:	c5 16       	cp	r12, r21
     ad8:	54 e0       	ldi	r21, 0x04	; 4
     ada:	d5 06       	cpc	r13, r21
     adc:	6c f0       	brlt	.+26     	; 0xaf8 <findPuck+0x1f4>
					set(PORTB, 0);
     ade:	28 9a       	sbi	0x05, 0	; 5
					clear(PORTB, 1);
     ae0:	29 98       	cbi	0x05, 1	; 5
					OCR1C = full_speed;
     ae2:	8a e8       	ldi	r24, 0x8A	; 138
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	90 93 8d 00 	sts	0x008D, r25
     aea:	80 93 8c 00 	sts	0x008C, r24
					OCR1B = full_speed;
     aee:	90 93 8b 00 	sts	0x008B, r25
     af2:	80 93 8a 00 	sts	0x008A, r24
     af6:	e3 c0       	rjmp	.+454    	; 0xcbe <__stack+0x1bf>
				}
				else{
					set(PORTB, 0);
     af8:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     afa:	29 9a       	sbi	0x05, 1	; 5
					OCR1C = full_speed - speed_diff_Pho;
     afc:	8a e8       	ldi	r24, 0x8A	; 138
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	20 91 00 01 	lds	r18, 0x0100
     b04:	30 91 01 01 	lds	r19, 0x0101
     b08:	fc 01       	movw	r30, r24
     b0a:	e2 1b       	sub	r30, r18
     b0c:	f3 0b       	sbc	r31, r19
     b0e:	f0 93 8d 00 	sts	0x008D, r31
     b12:	e0 93 8c 00 	sts	0x008C, r30
					OCR1B = full_speed;
     b16:	90 93 8b 00 	sts	0x008B, r25
     b1a:	80 93 8a 00 	sts	0x008A, r24
					if(Pho[2]>Pho[4]){
     b1e:	20 91 4e 01 	lds	r18, 0x014E
     b22:	30 91 4f 01 	lds	r19, 0x014F
     b26:	80 91 52 01 	lds	r24, 0x0152
     b2a:	90 91 53 01 	lds	r25, 0x0153
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	0c f0       	brlt	.+2      	; 0xb36 <__stack+0x37>
     b34:	c4 c0       	rjmp	.+392    	; 0xcbe <__stack+0x1bf>
						m_usb_tx_string("PID\n");
     b36:	81 e8       	ldi	r24, 0x81	; 129
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e7       	ldi	r20, 0x70	; 112
     b44:	51 e4       	ldi	r21, 0x41	; 65
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	9f e3       	ldi	r25, 0x3F	; 63
     b4e:	0e 94 15 03 	call	0x62a	; 0x62a <PID_Pho>
     b52:	b5 c0       	rjmp	.+362    	; 0xcbe <__stack+0x1bf>
					}
				}
			}
		
			else {
				if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     b54:	ce 19       	sub	r28, r14
     b56:	df 09       	sbc	r29, r15
     b58:	e3 97       	sbiw	r28, 0x33	; 51
     b5a:	84 f4       	brge	.+32     	; 0xb7c <__stack+0x7d>
     b5c:	c0 16       	cp	r12, r16
     b5e:	d1 06       	cpc	r13, r17
     b60:	0c f0       	brlt	.+2      	; 0xb64 <__stack+0x65>
     b62:	4e c0       	rjmp	.+156    	; 0xc00 <__stack+0x101>
     b64:	20 91 54 01 	lds	r18, 0x0154
     b68:	30 91 55 01 	lds	r19, 0x0155
     b6c:	80 91 50 01 	lds	r24, 0x0150
     b70:	90 91 51 01 	lds	r25, 0x0151
     b74:	82 17       	cp	r24, r18
     b76:	93 07       	cpc	r25, r19
     b78:	0c f0       	brlt	.+2      	; 0xb7c <__stack+0x7d>
     b7a:	42 c0       	rjmp	.+132    	; 0xc00 <__stack+0x101>
					m_usb_tx_string("turn right\n");
     b7c:	85 e7       	ldi	r24, 0x75	; 117
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
					if(mean135 > revThres){
     b84:	01 3b       	cpi	r16, 0xB1	; 177
     b86:	14 40       	sbci	r17, 0x04	; 4
     b88:	6c f0       	brlt	.+26     	; 0xba4 <__stack+0xa5>
						set(PORTB, 1);
     b8a:	29 9a       	sbi	0x05, 1	; 5
						clear(PORTB, 0);
     b8c:	28 98       	cbi	0x05, 0	; 5
						OCR1B = full_speed;
     b8e:	8a e8       	ldi	r24, 0x8A	; 138
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	90 93 8b 00 	sts	0x008B, r25
     b96:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed;
     b9a:	90 93 8d 00 	sts	0x008D, r25
     b9e:	80 93 8c 00 	sts	0x008C, r24
     ba2:	8d c0       	rjmp	.+282    	; 0xcbe <__stack+0x1bf>
					}
					else{
						set(PORTB, 0);
     ba4:	28 9a       	sbi	0x05, 0	; 5
						set(PORTB, 1);
     ba6:	29 9a       	sbi	0x05, 1	; 5
						OCR1B = full_speed - speed_diff_Pho;
     ba8:	8a e8       	ldi	r24, 0x8A	; 138
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	20 91 00 01 	lds	r18, 0x0100
     bb0:	30 91 01 01 	lds	r19, 0x0101
     bb4:	ac 01       	movw	r20, r24
     bb6:	42 1b       	sub	r20, r18
     bb8:	53 0b       	sbc	r21, r19
     bba:	50 93 8b 00 	sts	0x008B, r21
     bbe:	40 93 8a 00 	sts	0x008A, r20
						OCR1C = full_speed;
     bc2:	90 93 8d 00 	sts	0x008D, r25
     bc6:	80 93 8c 00 	sts	0x008C, r24
						if(Pho[3]>Pho[5]){
     bca:	20 91 50 01 	lds	r18, 0x0150
     bce:	30 91 51 01 	lds	r19, 0x0151
     bd2:	80 91 54 01 	lds	r24, 0x0154
     bd6:	90 91 55 01 	lds	r25, 0x0155
     bda:	82 17       	cp	r24, r18
     bdc:	93 07       	cpc	r25, r19
     bde:	0c f0       	brlt	.+2      	; 0xbe2 <__stack+0xe3>
     be0:	6e c0       	rjmp	.+220    	; 0xcbe <__stack+0x1bf>
							m_usb_tx_string("PID\n");
     be2:	80 e7       	ldi	r24, 0x70	; 112
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
							PID_Pho(Kp_Pho, Kd_Pho);
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e7       	ldi	r20, 0x70	; 112
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	9f e3       	ldi	r25, 0x3F	; 63
     bfa:	0e 94 15 03 	call	0x62a	; 0x62a <PID_Pho>
     bfe:	5f c0       	rjmp	.+190    	; 0xcbe <__stack+0x1bf>
						}
					}
				}
				else{
					PID_Pho(2*Kp_Pho, Kd_Pho);
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e7       	ldi	r20, 0x70	; 112
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	9f e3       	ldi	r25, 0x3F	; 63
     c10:	0e 94 15 03 	call	0x62a	; 0x62a <PID_Pho>
     c14:	54 c0       	rjmp	.+168    	; 0xcbe <__stack+0x1bf>
				}
			}
			break;
		case 5:
			if(mean024 - mean135 > strThres){
     c16:	c7 01       	movw	r24, r14
     c18:	8c 1b       	sub	r24, r28
     c1a:	9d 0b       	sbc	r25, r29
     c1c:	c3 97       	sbiw	r24, 0x33	; 51
     c1e:	34 f1       	brlt	.+76     	; 0xc6c <__stack+0x16d>
				m_usb_tx_string("turn left\n");
     c20:	85 e6       	ldi	r24, 0x65	; 101
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				set(PORTB, 0);
     c28:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
     c2a:	29 98       	cbi	0x05, 1	; 5
				if (Pho[2] > Pho[4]){
     c2c:	20 91 4e 01 	lds	r18, 0x014E
     c30:	30 91 4f 01 	lds	r19, 0x014F
     c34:	80 91 52 01 	lds	r24, 0x0152
     c38:	90 91 53 01 	lds	r25, 0x0153
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	54 f4       	brge	.+20     	; 0xc56 <__stack+0x157>
					PID_stalk(Kp_stalk, Kd_stalk); 
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	63 e3       	ldi	r22, 0x33	; 51
     c4a:	73 e3       	ldi	r23, 0x33	; 51
     c4c:	83 e3       	ldi	r24, 0x33	; 51
     c4e:	9f e3       	ldi	r25, 0x3F	; 63
     c50:	0e 94 e7 03 	call	0x7ce	; 0x7ce <PID_stalk>
     c54:	34 c0       	rjmp	.+104    	; 0xcbe <__stack+0x1bf>
				}
				else{
					OCR1B = full_speed_stalk;
     c56:	84 ef       	ldi	r24, 0xF4	; 244
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	90 93 8b 00 	sts	0x008B, r25
     c5e:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
     c62:	90 93 8d 00 	sts	0x008D, r25
     c66:	80 93 8c 00 	sts	0x008C, r24
     c6a:	29 c0       	rjmp	.+82     	; 0xcbe <__stack+0x1bf>
				}
			}
			else{
				if(mean135 - mean024 > strThres){
     c6c:	ce 19       	sub	r28, r14
     c6e:	df 09       	sbc	r29, r15
     c70:	e3 97       	sbiw	r28, 0x33	; 51
     c72:	2c f1       	brlt	.+74     	; 0xcbe <__stack+0x1bf>
					m_usb_tx_string("turn right\n");
     c74:	89 e5       	ldi	r24, 0x59	; 89
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
					clear(PORTB, 0);
     c7c:	28 98       	cbi	0x05, 0	; 5
					set(PORTB, 1);
     c7e:	29 9a       	sbi	0x05, 1	; 5
					if (Pho[3] > Pho[5]){
     c80:	20 91 50 01 	lds	r18, 0x0150
     c84:	30 91 51 01 	lds	r19, 0x0151
     c88:	80 91 54 01 	lds	r24, 0x0154
     c8c:	90 91 55 01 	lds	r25, 0x0155
     c90:	82 17       	cp	r24, r18
     c92:	93 07       	cpc	r25, r19
     c94:	54 f4       	brge	.+20     	; 0xcaa <__stack+0x1ab>
						PID_stalk(Kp_stalk, Kd_stalk);
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	a9 01       	movw	r20, r18
     c9c:	63 e3       	ldi	r22, 0x33	; 51
     c9e:	73 e3       	ldi	r23, 0x33	; 51
     ca0:	83 e3       	ldi	r24, 0x33	; 51
     ca2:	9f e3       	ldi	r25, 0x3F	; 63
     ca4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <PID_stalk>
     ca8:	0a c0       	rjmp	.+20     	; 0xcbe <__stack+0x1bf>
					}
					else{
						OCR1B = full_speed_stalk;
     caa:	84 ef       	ldi	r24, 0xF4	; 244
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	90 93 8b 00 	sts	0x008B, r25
     cb2:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed_stalk;
     cb6:	90 93 8d 00 	sts	0x008D, r25
     cba:	80 93 8c 00 	sts	0x008C, r24
			break;
		default:
			break;
	}
	
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	8f 90       	pop	r8
     cd6:	7f 90       	pop	r7
     cd8:	6f 90       	pop	r6
     cda:	08 95       	ret

00000cdc <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	af 92       	push	r10
     ce8:	bf 92       	push	r11
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	2f 93       	push	r18
     cf8:	3f 93       	push	r19
     cfa:	4f 93       	push	r20
     cfc:	5f 93       	push	r21
     cfe:	6f 93       	push	r22
     d00:	7f 93       	push	r23
     d02:	8f 93       	push	r24
     d04:	9f 93       	push	r25
     d06:	af 93       	push	r26
     d08:	bf 93       	push	r27
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     d12:	c0 91 48 01 	lds	r28, 0x0148
     d16:	d0 91 49 01 	lds	r29, 0x0149
     d1a:	a0 90 78 00 	lds	r10, 0x0078
     d1e:	b0 90 79 00 	lds	r11, 0x0079
     d22:	8e 01       	movw	r16, r28
     d24:	00 0f       	add	r16, r16
     d26:	11 1f       	adc	r17, r17
     d28:	06 5b       	subi	r16, 0xB6	; 182
     d2a:	1e 4f       	sbci	r17, 0xFE	; 254
     d2c:	f8 01       	movw	r30, r16
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	88 27       	eor	r24, r24
     d34:	77 fd       	sbrc	r23, 7
     d36:	80 95       	com	r24
     d38:	98 2f       	mov	r25, r24
     d3a:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     d3e:	2d ec       	ldi	r18, 0xCD	; 205
     d40:	3c ec       	ldi	r19, 0xCC	; 204
     d42:	4c e4       	ldi	r20, 0x4C	; 76
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
     d4a:	6b 01       	movw	r12, r22
     d4c:	7c 01       	movw	r14, r24
     d4e:	b5 01       	movw	r22, r10
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
     d58:	2c ec       	ldi	r18, 0xCC	; 204
     d5a:	3c ec       	ldi	r19, 0xCC	; 204
     d5c:	4c e4       	ldi	r20, 0x4C	; 76
     d5e:	5e e3       	ldi	r21, 0x3E	; 62
     d60:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
     d64:	9b 01       	movw	r18, r22
     d66:	ac 01       	movw	r20, r24
     d68:	c7 01       	movw	r24, r14
     d6a:	b6 01       	movw	r22, r12
     d6c:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
     d70:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
     d74:	f8 01       	movw	r30, r16
     d76:	71 83       	std	Z+1, r23	; 0x01
     d78:	60 83       	st	Z, r22
	
	i = i + 1;
     d7a:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     d7c:	c8 30       	cpi	r28, 0x08	; 8
     d7e:	d1 05       	cpc	r29, r1
     d80:	2c f4       	brge	.+10     	; 0xd8c <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     d82:	d0 93 49 01 	sts	0x0149, r29
     d86:	c0 93 48 01 	sts	0x0148, r28
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <__vector_29+0xb8>
	if(i > 7){
		i = 0;
     d8c:	10 92 49 01 	sts	0x0149, r1
     d90:	10 92 48 01 	sts	0x0148, r1
	}
	
	clear(ADCSRA, ADEN);
     d94:	ea e7       	ldi	r30, 0x7A	; 122
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8f 77       	andi	r24, 0x7F	; 127
     d9c:	80 83       	st	Z, r24
	switch(i){
     d9e:	80 91 48 01 	lds	r24, 0x0148
     da2:	90 91 49 01 	lds	r25, 0x0149
     da6:	87 30       	cpi	r24, 0x07	; 7
     da8:	91 05       	cpc	r25, r1
     daa:	08 f0       	brcs	.+2      	; 0xdae <__vector_29+0xd2>
     dac:	7b c0       	rjmp	.+246    	; 0xea4 <__vector_29+0x1c8>
     dae:	fc 01       	movw	r30, r24
     db0:	ea 5a       	subi	r30, 0xAA	; 170
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     db8:	eb e7       	ldi	r30, 0x7B	; 123
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 7d       	andi	r24, 0xDF	; 223
     dc0:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     dc2:	ec e7       	ldi	r30, 0x7C	; 124
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8b 7f       	andi	r24, 0xFB	; 251
     dca:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     dcc:	80 81       	ld	r24, Z
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     dd2:	80 81       	ld	r24, Z
     dd4:	8e 7f       	andi	r24, 0xFE	; 254
     dd6:	80 83       	st	Z, r24
			break;
     dd8:	65 c0       	rjmp	.+202    	; 0xea4 <__vector_29+0x1c8>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     dda:	eb e7       	ldi	r30, 0x7B	; 123
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7d       	andi	r24, 0xDF	; 223
     de2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     de4:	ec e7       	ldi	r30, 0x7C	; 124
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8b 7f       	andi	r24, 0xFB	; 251
     dec:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     dee:	80 81       	ld	r24, Z
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     df4:	80 81       	ld	r24, Z
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	80 83       	st	Z, r24
			break;
     dfa:	54 c0       	rjmp	.+168    	; 0xea4 <__vector_29+0x1c8>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     dfc:	eb e7       	ldi	r30, 0x7B	; 123
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 62       	ori	r24, 0x20	; 32
     e04:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     e06:	ec e7       	ldi	r30, 0x7C	; 124
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8b 7f       	andi	r24, 0xFB	; 251
     e0e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     e10:	80 81       	ld	r24, Z
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     e16:	80 81       	ld	r24, Z
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	80 83       	st	Z, r24
			break;
     e1c:	43 c0       	rjmp	.+134    	; 0xea4 <__vector_29+0x1c8>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     e1e:	eb e7       	ldi	r30, 0x7B	; 123
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 62       	ori	r24, 0x20	; 32
     e26:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     e28:	ec e7       	ldi	r30, 0x7C	; 124
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     e32:	80 81       	ld	r24, Z
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     e38:	80 81       	ld	r24, Z
     e3a:	8e 7f       	andi	r24, 0xFE	; 254
     e3c:	80 83       	st	Z, r24
			break;
     e3e:	32 c0       	rjmp	.+100    	; 0xea4 <__vector_29+0x1c8>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     e40:	eb e7       	ldi	r30, 0x7B	; 123
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 62       	ori	r24, 0x20	; 32
     e48:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     e4a:	ec e7       	ldi	r30, 0x7C	; 124
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8b 7f       	andi	r24, 0xFB	; 251
     e52:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     e54:	80 81       	ld	r24, Z
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 83       	st	Z, r24
			break;
     e60:	21 c0       	rjmp	.+66     	; 0xea4 <__vector_29+0x1c8>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     e62:	eb e7       	ldi	r30, 0x7B	; 123
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 62       	ori	r24, 0x20	; 32
     e6a:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     e6c:	ec e7       	ldi	r30, 0x7C	; 124
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     e76:	80 81       	ld	r24, Z
     e78:	8d 7f       	andi	r24, 0xFD	; 253
     e7a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     e7c:	80 81       	ld	r24, Z
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	80 83       	st	Z, r24
			break;
     e82:	10 c0       	rjmp	.+32     	; 0xea4 <__vector_29+0x1c8>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     e84:	eb e7       	ldi	r30, 0x7B	; 123
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 62       	ori	r24, 0x20	; 32
     e8c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     e8e:	ec e7       	ldi	r30, 0x7C	; 124
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     e98:	80 81       	ld	r24, Z
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     e9e:	80 81       	ld	r24, Z
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     ea4:	ea e7       	ldi	r30, 0x7A	; 122
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 68       	ori	r24, 0x80	; 128
     eac:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     eae:	80 81       	ld	r24, Z
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	80 83       	st	Z, r24
	
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <deterState>:

void deterState(int *state){
	if (*state == 2 || *state == 3){
     eea:	fc 01       	movw	r30, r24
     eec:	20 81       	ld	r18, Z
     eee:	31 81       	ldd	r19, Z+1	; 0x01
     ef0:	22 50       	subi	r18, 0x02	; 2
     ef2:	31 09       	sbc	r19, r1
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	31 05       	cpc	r19, r1
     ef8:	f0 f4       	brcc	.+60     	; 0xf36 <deterState+0x4c>
		if (Pho[6] >gotThres){
     efa:	20 91 56 01 	lds	r18, 0x0156
     efe:	30 91 57 01 	lds	r19, 0x0157
     f02:	2d 32       	cpi	r18, 0x2D	; 45
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	3f 07       	cpc	r19, r31
     f08:	54 f0       	brlt	.+20     	; 0xf1e <deterState+0x34>
			*state = 3;
     f0a:	23 e0       	ldi	r18, 0x03	; 3
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	fc 01       	movw	r30, r24
     f10:	31 83       	std	Z+1, r19	; 0x01
     f12:	20 83       	st	Z, r18
			m_usb_tx_string("got the puck!\n");
     f14:	8a e4       	ldi	r24, 0x4A	; 74
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
     f1c:	08 95       	ret
			
		}
		else{
			if(Pho[6] < loseThres){
     f1e:	24 36       	cpi	r18, 0x64	; 100
     f20:	31 05       	cpc	r19, r1
     f22:	4c f4       	brge	.+18     	; 0xf36 <deterState+0x4c>
				*state = 2;
     f24:	22 e0       	ldi	r18, 0x02	; 2
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	fc 01       	movw	r30, r24
     f2a:	31 83       	std	Z+1, r19	; 0x01
     f2c:	20 83       	st	Z, r18
				m_usb_tx_string("lost the puck!\n");
     f2e:	8a e3       	ldi	r24, 0x3A	; 58
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
     f36:	08 95       	ret

00000f38 <ifGotoPuck>:
		}
	}
}

void ifGotoPuck(int *state, float *dir){
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres){
     f38:	40 91 4a 01 	lds	r20, 0x014A
     f3c:	50 91 4b 01 	lds	r21, 0x014B
     f40:	20 91 4c 01 	lds	r18, 0x014C
     f44:	30 91 4d 01 	lds	r19, 0x014D
     f48:	42 0f       	add	r20, r18
     f4a:	53 1f       	adc	r21, r19
     f4c:	20 91 4e 01 	lds	r18, 0x014E
     f50:	30 91 4f 01 	lds	r19, 0x014F
     f54:	42 0f       	add	r20, r18
     f56:	53 1f       	adc	r21, r19
     f58:	20 91 50 01 	lds	r18, 0x0150
     f5c:	30 91 51 01 	lds	r19, 0x0151
     f60:	42 0f       	add	r20, r18
     f62:	53 1f       	adc	r21, r19
     f64:	20 91 02 01 	lds	r18, 0x0102
     f68:	30 91 03 01 	lds	r19, 0x0103
     f6c:	24 17       	cp	r18, r20
     f6e:	35 07       	cpc	r19, r21
     f70:	2c f4       	brge	.+10     	; 0xf7c <ifGotoPuck+0x44>
		*state = 2;
     f72:	22 e0       	ldi	r18, 0x02	; 2
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	31 83       	std	Z+1, r19	; 0x01
     f7a:	20 83       	st	Z, r18
     f7c:	08 95       	ret

00000f7e <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     f7e:	4f 92       	push	r4
     f80:	5f 92       	push	r5
     f82:	6f 92       	push	r6
     f84:	7f 92       	push	r7
     f86:	8f 92       	push	r8
     f88:	9f 92       	push	r9
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	60 97       	sbiw	r28, 0x10	; 16
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	2b 01       	movw	r4, r22
     fb0:	3c 01       	movw	r6, r24
     fb2:	2d 83       	std	Y+5, r18	; 0x05
     fb4:	3e 83       	std	Y+6, r19	; 0x06
     fb6:	4f 83       	std	Y+7, r20	; 0x07
     fb8:	58 87       	std	Y+8, r21	; 0x08
     fba:	58 01       	movw	r10, r16
     fbc:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     fbe:	d5 01       	movw	r26, r10
     fc0:	cd 90       	ld	r12, X+
     fc2:	dd 90       	ld	r13, X+
     fc4:	ed 90       	ld	r14, X+
     fc6:	fc 90       	ld	r15, X
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	c7 01       	movw	r24, r14
     fce:	b6 01       	movw	r22, r12
     fd0:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
     fd4:	f8 01       	movw	r30, r16
     fd6:	20 81       	ld	r18, Z
     fd8:	31 81       	ldd	r19, Z+1	; 0x01
     fda:	42 81       	ldd	r20, Z+2	; 0x02
     fdc:	53 81       	ldd	r21, Z+3	; 0x03
     fde:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
     fe2:	69 87       	std	Y+9, r22	; 0x09
     fe4:	7a 87       	std	Y+10, r23	; 0x0a
     fe6:	8b 87       	std	Y+11, r24	; 0x0b
     fe8:	9c 87       	std	Y+12, r25	; 0x0c
     fea:	d5 01       	movw	r26, r10
     fec:	14 96       	adiw	r26, 0x04	; 4
     fee:	8d 91       	ld	r24, X+
     ff0:	9d 91       	ld	r25, X+
     ff2:	0d 90       	ld	r0, X+
     ff4:	bc 91       	ld	r27, X
     ff6:	a0 2d       	mov	r26, r0
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	ab 83       	std	Y+3, r26	; 0x03
     ffe:	bc 83       	std	Y+4, r27	; 0x04
    1000:	2d 81       	ldd	r18, Y+5	; 0x05
    1002:	3e 81       	ldd	r19, Y+6	; 0x06
    1004:	4f 81       	ldd	r20, Y+7	; 0x07
    1006:	58 85       	ldd	r21, Y+8	; 0x08
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    1010:	6d 87       	std	Y+13, r22	; 0x0d
    1012:	7e 87       	std	Y+14, r23	; 0x0e
    1014:	8f 87       	std	Y+15, r24	; 0x0f
    1016:	98 8b       	std	Y+16, r25	; 0x10
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	69 85       	ldd	r22, Y+9	; 0x09
    101e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1020:	8b 85       	ldd	r24, Y+11	; 0x0b
    1022:	9c 85       	ldd	r25, Y+12	; 0x0c
    1024:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    1028:	4b 01       	movw	r8, r22
    102a:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
    102c:	29 81       	ldd	r18, Y+1	; 0x01
    102e:	3a 81       	ldd	r19, Y+2	; 0x02
    1030:	4b 81       	ldd	r20, Y+3	; 0x03
    1032:	5c 81       	ldd	r21, Y+4	; 0x04
    1034:	c3 01       	movw	r24, r6
    1036:	b2 01       	movw	r22, r4
    1038:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    103c:	f8 01       	movw	r30, r16
    103e:	24 81       	ldd	r18, Z+4	; 0x04
    1040:	35 81       	ldd	r19, Z+5	; 0x05
    1042:	46 81       	ldd	r20, Z+6	; 0x06
    1044:	57 81       	ldd	r21, Z+7	; 0x07
    1046:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    104a:	2b 01       	movw	r4, r22
    104c:	3c 01       	movw	r6, r24
    104e:	2d 81       	ldd	r18, Y+5	; 0x05
    1050:	3e 81       	ldd	r19, Y+6	; 0x06
    1052:	4f 81       	ldd	r20, Y+7	; 0x07
    1054:	58 85       	ldd	r21, Y+8	; 0x08
    1056:	c7 01       	movw	r24, r14
    1058:	b6 01       	movw	r22, r12
    105a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    105e:	69 83       	std	Y+1, r22	; 0x01
    1060:	7a 83       	std	Y+2, r23	; 0x02
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	c3 01       	movw	r24, r6
    106c:	b2 01       	movw	r22, r4
    106e:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    1072:	6b 01       	movw	r12, r22
    1074:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
    1076:	2d 85       	ldd	r18, Y+13	; 0x0d
    1078:	3e 85       	ldd	r19, Y+14	; 0x0e
    107a:	4f 85       	ldd	r20, Y+15	; 0x0f
    107c:	58 89       	ldd	r21, Y+16	; 0x10
    107e:	69 85       	ldd	r22, Y+9	; 0x09
    1080:	7a 85       	ldd	r23, Y+10	; 0x0a
    1082:	8b 85       	ldd	r24, Y+11	; 0x0b
    1084:	9c 85       	ldd	r25, Y+12	; 0x0c
    1086:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    108a:	6d 83       	std	Y+5, r22	; 0x05
    108c:	7e 83       	std	Y+6, r23	; 0x06
    108e:	8f 83       	std	Y+7, r24	; 0x07
    1090:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
    1092:	29 81       	ldd	r18, Y+1	; 0x01
    1094:	3a 81       	ldd	r19, Y+2	; 0x02
    1096:	4b 81       	ldd	r20, Y+3	; 0x03
    1098:	5c 81       	ldd	r21, Y+4	; 0x04
    109a:	c3 01       	movw	r24, r6
    109c:	b2 01       	movw	r22, r4
    109e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    10a2:	2b 01       	movw	r4, r22
    10a4:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
    10a6:	a5 01       	movw	r20, r10
    10a8:	94 01       	movw	r18, r8
    10aa:	c5 01       	movw	r24, r10
    10ac:	b4 01       	movw	r22, r8
    10ae:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    10b2:	4b 01       	movw	r8, r22
    10b4:	5c 01       	movw	r10, r24
    10b6:	a7 01       	movw	r20, r14
    10b8:	96 01       	movw	r18, r12
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	c5 01       	movw	r24, r10
    10c8:	b4 01       	movw	r22, r8
    10ca:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    10ce:	6b 01       	movw	r12, r22
    10d0:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
    10d2:	2d 81       	ldd	r18, Y+5	; 0x05
    10d4:	3e 81       	ldd	r19, Y+6	; 0x06
    10d6:	4f 81       	ldd	r20, Y+7	; 0x07
    10d8:	58 85       	ldd	r21, Y+8	; 0x08
    10da:	ca 01       	movw	r24, r20
    10dc:	b9 01       	movw	r22, r18
    10de:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    10e2:	4b 01       	movw	r8, r22
    10e4:	5c 01       	movw	r10, r24
    10e6:	a3 01       	movw	r20, r6
    10e8:	92 01       	movw	r18, r4
    10ea:	c3 01       	movw	r24, r6
    10ec:	b2 01       	movw	r22, r4
    10ee:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	c5 01       	movw	r24, r10
    10f8:	b4 01       	movw	r22, r8
    10fa:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
    1102:	01 e0       	ldi	r16, 0x01	; 1
    1104:	10 e0       	ldi	r17, 0x00	; 0
    1106:	c7 01       	movw	r24, r14
    1108:	b6 01       	movw	r22, r12
    110a:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    110e:	88 23       	and	r24, r24
    1110:	14 f0       	brlt	.+4      	; 0x1116 <find_sign+0x198>
    1112:	00 e0       	ldi	r16, 0x00	; 0
    1114:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
    1116:	c8 01       	movw	r24, r16
    1118:	60 96       	adiw	r28, 0x10	; 16
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	9f 90       	pop	r9
    113a:	8f 90       	pop	r8
    113c:	7f 90       	pop	r7
    113e:	6f 90       	pop	r6
    1140:	5f 90       	pop	r5
    1142:	4f 90       	pop	r4
    1144:	08 95       	ret

00001146 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
    1146:	2f 92       	push	r2
    1148:	3f 92       	push	r3
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	28 97       	sbiw	r28, 0x08	; 8
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	1c 01       	movw	r2, r24
    117c:	49 83       	std	Y+1, r20	; 0x01
    117e:	5a 83       	std	Y+2, r21	; 0x02
    1180:	6b 83       	std	Y+3, r22	; 0x03
    1182:	7c 83       	std	Y+4, r23	; 0x04
    1184:	0d 83       	std	Y+5, r16	; 0x05
    1186:	1e 83       	std	Y+6, r17	; 0x06
    1188:	2f 83       	std	Y+7, r18	; 0x07
    118a:	38 87       	std	Y+8, r19	; 0x08
    118c:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
    118e:	f6 01       	movw	r30, r12
    1190:	20 81       	ld	r18, Z
    1192:	31 81       	ldd	r19, Z+1	; 0x01
    1194:	42 81       	ldd	r20, Z+2	; 0x02
    1196:	53 81       	ldd	r21, Z+3	; 0x03
    1198:	f7 01       	movw	r30, r14
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    11a6:	4b 01       	movw	r8, r22
    11a8:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
    11aa:	f6 01       	movw	r30, r12
    11ac:	24 81       	ldd	r18, Z+4	; 0x04
    11ae:	35 81       	ldd	r19, Z+5	; 0x05
    11b0:	46 81       	ldd	r20, Z+6	; 0x06
    11b2:	57 81       	ldd	r21, Z+7	; 0x07
    11b4:	f7 01       	movw	r30, r14
    11b6:	64 81       	ldd	r22, Z+4	; 0x04
    11b8:	75 81       	ldd	r23, Z+5	; 0x05
    11ba:	86 81       	ldd	r24, Z+6	; 0x06
    11bc:	97 81       	ldd	r25, Z+7	; 0x07
    11be:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    11c2:	6b 01       	movw	r12, r22
    11c4:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
    11c6:	a5 01       	movw	r20, r10
    11c8:	94 01       	movw	r18, r8
    11ca:	c5 01       	movw	r24, r10
    11cc:	b4 01       	movw	r22, r8
    11ce:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    11d2:	2b 01       	movw	r4, r22
    11d4:	3c 01       	movw	r6, r24
    11d6:	a7 01       	movw	r20, r14
    11d8:	96 01       	movw	r18, r12
    11da:	c7 01       	movw	r24, r14
    11dc:	b6 01       	movw	r22, r12
    11de:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	c3 01       	movw	r24, r6
    11e8:	b2 01       	movw	r22, r4
    11ea:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
    11ee:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <sqrt>
    11f2:	2b 01       	movw	r4, r22
    11f4:	3c 01       	movw	r6, r24
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	c5 01       	movw	r24, r10
    11fc:	b4 01       	movw	r22, r8
    11fe:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    1202:	4b 01       	movw	r8, r22
    1204:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
    1206:	a3 01       	movw	r20, r6
    1208:	92 01       	movw	r18, r4
    120a:	c7 01       	movw	r24, r14
    120c:	b6 01       	movw	r22, r12
    120e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    1212:	6b 01       	movw	r12, r22
    1214:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
    1216:	f8 01       	movw	r30, r16
    1218:	20 81       	ld	r18, Z
    121a:	31 81       	ldd	r19, Z+1	; 0x01
    121c:	42 81       	ldd	r20, Z+2	; 0x02
    121e:	53 81       	ldd	r21, Z+3	; 0x03
    1220:	c5 01       	movw	r24, r10
    1222:	b4 01       	movw	r22, r8
    1224:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    1228:	2b 01       	movw	r4, r22
    122a:	3c 01       	movw	r6, r24
    122c:	f8 01       	movw	r30, r16
    122e:	24 81       	ldd	r18, Z+4	; 0x04
    1230:	35 81       	ldd	r19, Z+5	; 0x05
    1232:	46 81       	ldd	r20, Z+6	; 0x06
    1234:	57 81       	ldd	r21, Z+7	; 0x07
    1236:	c7 01       	movw	r24, r14
    1238:	b6 01       	movw	r22, r12
    123a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	c3 01       	movw	r24, r6
    1244:	b2 01       	movw	r22, r4
    1246:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
	alpha = acos(cos_alpha);
    124a:	0e 94 94 1c 	call	0x3928	; 0x3928 <acos>
    124e:	2b 01       	movw	r4, r22
    1250:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
    1252:	2a 94       	dec	r2
    1254:	23 28       	or	r2, r3
    1256:	d1 f4       	brne	.+52     	; 0x128c <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
    1258:	2d 81       	ldd	r18, Y+5	; 0x05
    125a:	3e 81       	ldd	r19, Y+6	; 0x06
    125c:	4f 81       	ldd	r20, Y+7	; 0x07
    125e:	58 85       	ldd	r21, Y+8	; 0x08
    1260:	50 58       	subi	r21, 0x80	; 128
    1262:	c7 01       	movw	r24, r14
    1264:	b6 01       	movw	r22, r12
    1266:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    126a:	6b 01       	movw	r12, r22
    126c:	7c 01       	movw	r14, r24
    126e:	29 81       	ldd	r18, Y+1	; 0x01
    1270:	3a 81       	ldd	r19, Y+2	; 0x02
    1272:	4b 81       	ldd	r20, Y+3	; 0x03
    1274:	5c 81       	ldd	r21, Y+4	; 0x04
    1276:	c5 01       	movw	r24, r10
    1278:	b4 01       	movw	r22, r8
    127a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    127e:	9b 01       	movw	r18, r22
    1280:	ac 01       	movw	r20, r24
    1282:	c7 01       	movw	r24, r14
    1284:	b6 01       	movw	r22, r12
    1286:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    128a:	19 c0       	rjmp	.+50     	; 0x12be <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    128c:	2d 81       	ldd	r18, Y+5	; 0x05
    128e:	3e 81       	ldd	r19, Y+6	; 0x06
    1290:	4f 81       	ldd	r20, Y+7	; 0x07
    1292:	58 85       	ldd	r21, Y+8	; 0x08
    1294:	50 58       	subi	r21, 0x80	; 128
    1296:	c7 01       	movw	r24, r14
    1298:	b6 01       	movw	r22, r12
    129a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    129e:	6b 01       	movw	r12, r22
    12a0:	7c 01       	movw	r14, r24
    12a2:	29 81       	ldd	r18, Y+1	; 0x01
    12a4:	3a 81       	ldd	r19, Y+2	; 0x02
    12a6:	4b 81       	ldd	r20, Y+3	; 0x03
    12a8:	5c 81       	ldd	r21, Y+4	; 0x04
    12aa:	c5 01       	movw	r24, r10
    12ac:	b4 01       	movw	r22, r8
    12ae:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	c7 01       	movw	r24, r14
    12b8:	b6 01       	movw	r22, r12
    12ba:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
	}
	if (c2g_wx < 0){
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	a9 01       	movw	r20, r18
    12c4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	4c f0       	brlt	.+18     	; 0x12de <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    12cc:	40 92 64 01 	sts	0x0164, r4
    12d0:	50 92 65 01 	sts	0x0165, r5
    12d4:	60 92 66 01 	sts	0x0166, r6
    12d8:	70 92 67 01 	sts	0x0167, r7
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    12de:	77 fa       	bst	r7, 7
    12e0:	70 94       	com	r7
    12e2:	77 f8       	bld	r7, 7
    12e4:	70 94       	com	r7
    12e6:	40 92 64 01 	sts	0x0164, r4
    12ea:	50 92 65 01 	sts	0x0165, r5
    12ee:	60 92 66 01 	sts	0x0166, r6
    12f2:	70 92 67 01 	sts	0x0167, r7
	}
	m_usb_tx_string("alpha: ");
    12f6:	80 e6       	ldi	r24, 0x60	; 96
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(alpha*10);
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	51 e4       	ldi	r21, 0x41	; 65
    1306:	60 91 64 01 	lds	r22, 0x0164
    130a:	70 91 65 01 	lds	r23, 0x0165
    130e:	80 91 66 01 	lds	r24, 0x0166
    1312:	90 91 67 01 	lds	r25, 0x0167
    1316:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    131a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    131e:	cb 01       	movw	r24, r22
    1320:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1324:	8e e5       	ldi	r24, 0x5E	; 94
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
}
    132c:	28 96       	adiw	r28, 0x08	; 8
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	bf 90       	pop	r11
    134a:	af 90       	pop	r10
    134c:	9f 90       	pop	r9
    134e:	8f 90       	pop	r8
    1350:	7f 90       	pop	r7
    1352:	6f 90       	pop	r6
    1354:	5f 90       	pop	r5
    1356:	4f 90       	pop	r4
    1358:	3f 90       	pop	r3
    135a:	2f 90       	pop	r2
    135c:	08 95       	ret

0000135e <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    135e:	4f 92       	push	r4
    1360:	5f 92       	push	r5
    1362:	6f 92       	push	r6
    1364:	7f 92       	push	r7
    1366:	8f 92       	push	r8
    1368:	9f 92       	push	r9
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	00 d0       	rcall	.+0      	; 0x137c <PID_alpha+0x1e>
    137c:	00 d0       	rcall	.+0      	; 0x137e <PID_alpha+0x20>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	4b 01       	movw	r8, r22
    1384:	5c 01       	movw	r10, r24
    1386:	29 83       	std	Y+1, r18	; 0x01
    1388:	3a 83       	std	Y+2, r19	; 0x02
    138a:	4b 83       	std	Y+3, r20	; 0x03
    138c:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    138e:	40 90 64 01 	lds	r4, 0x0164
    1392:	50 90 65 01 	lds	r5, 0x0165
    1396:	60 90 66 01 	lds	r6, 0x0166
    139a:	70 90 67 01 	lds	r7, 0x0167
    139e:	20 91 60 01 	lds	r18, 0x0160
    13a2:	30 91 61 01 	lds	r19, 0x0161
    13a6:	40 91 62 01 	lds	r20, 0x0162
    13aa:	50 91 63 01 	lds	r21, 0x0163
    13ae:	c3 01       	movw	r24, r6
    13b0:	b2 01       	movw	r22, r4
    13b2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
    13ba:	60 93 5c 01 	sts	0x015C, r22
    13be:	70 93 5d 01 	sts	0x015D, r23
    13c2:	80 93 5e 01 	sts	0x015E, r24
    13c6:	90 93 5f 01 	sts	0x015F, r25
	float P =0, D = 0;
	P = Kp * alpha;
    13ca:	a5 01       	movw	r20, r10
    13cc:	94 01       	movw	r18, r8
    13ce:	c3 01       	movw	r24, r6
    13d0:	b2 01       	movw	r22, r4
    13d2:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    13d6:	4b 01       	movw	r8, r22
    13d8:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    13da:	29 81       	ldd	r18, Y+1	; 0x01
    13dc:	3a 81       	ldd	r19, Y+2	; 0x02
    13de:	4b 81       	ldd	r20, Y+3	; 0x03
    13e0:	5c 81       	ldd	r21, Y+4	; 0x04
    13e2:	c7 01       	movw	r24, r14
    13e4:	b6 01       	movw	r22, r12
    13e6:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    13ea:	9b 01       	movw	r18, r22
    13ec:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    13ee:	c5 01       	movw	r24, r10
    13f0:	b4 01       	movw	r22, r8
    13f2:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    13f6:	60 93 58 01 	sts	0x0158, r22
    13fa:	70 93 59 01 	sts	0x0159, r23
    13fe:	80 93 5a 01 	sts	0x015A, r24
    1402:	90 93 5b 01 	sts	0x015B, r25
	
	alpha_last = alpha;
    1406:	40 92 60 01 	sts	0x0160, r4
    140a:	50 92 61 01 	sts	0x0161, r5
    140e:	60 92 62 01 	sts	0x0162, r6
    1412:	70 92 63 01 	sts	0x0163, r7
	
	m_usb_tx_string("alpha*10: ");
    1416:	83 e5       	ldi	r24, 0x53	; 83
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	60 91 64 01 	lds	r22, 0x0164
    142a:	70 91 65 01 	lds	r23, 0x0165
    142e:	80 91 66 01 	lds	r24, 0x0166
    1432:	90 91 67 01 	lds	r25, 0x0167
    1436:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    143a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    143e:	cb 01       	movw	r24, r22
    1440:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1444:	81 e5       	ldi	r24, 0x51	; 81
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	m_usb_tx_string("gain*10: ");
    144c:	87 e4       	ldi	r24, 0x47	; 71
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	60 91 58 01 	lds	r22, 0x0158
    1460:	70 91 59 01 	lds	r23, 0x0159
    1464:	80 91 5a 01 	lds	r24, 0x015A
    1468:	90 91 5b 01 	lds	r25, 0x015B
    146c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    1470:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1474:	cb 01       	movw	r24, r22
    1476:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    147a:	85 e4       	ldi	r24, 0x45	; 69
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	if(gain_loc<0){  // turn right
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	60 91 58 01 	lds	r22, 0x0158
    148c:	70 91 59 01 	lds	r23, 0x0159
    1490:	80 91 5a 01 	lds	r24, 0x015A
    1494:	90 91 5b 01 	lds	r25, 0x015B
    1498:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    149c:	88 23       	and	r24, r24
    149e:	0c f0       	brlt	.+2      	; 0x14a2 <PID_alpha+0x144>
    14a0:	44 c0       	rjmp	.+136    	; 0x152a <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    14a2:	89 e3       	ldi	r24, 0x39	; 57
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    14aa:	60 91 58 01 	lds	r22, 0x0158
    14ae:	70 91 59 01 	lds	r23, 0x0159
    14b2:	80 91 5a 01 	lds	r24, 0x015A
    14b6:	90 91 5b 01 	lds	r25, 0x015B
    14ba:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    14be:	9b 01       	movw	r18, r22
    14c0:	77 23       	and	r23, r23
    14c2:	24 f4       	brge	.+8      	; 0x14cc <PID_alpha+0x16e>
    14c4:	22 27       	eor	r18, r18
    14c6:	33 27       	eor	r19, r19
    14c8:	26 1b       	sub	r18, r22
    14ca:	37 0b       	sbc	r19, r23
    14cc:	8a e8       	ldi	r24, 0x8A	; 138
    14ce:	92 e0       	ldi	r25, 0x02	; 2
    14d0:	82 1b       	sub	r24, r18
    14d2:	93 0b       	sbc	r25, r19
    14d4:	90 93 8b 00 	sts	0x008B, r25
    14d8:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    14dc:	e0 90 1a 01 	lds	r14, 0x011A
    14e0:	f0 90 1b 01 	lds	r15, 0x011B
    14e4:	60 91 58 01 	lds	r22, 0x0158
    14e8:	70 91 59 01 	lds	r23, 0x0159
    14ec:	80 91 5a 01 	lds	r24, 0x015A
    14f0:	90 91 5b 01 	lds	r25, 0x015B
    14f4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    14f8:	9b 01       	movw	r18, r22
    14fa:	77 23       	and	r23, r23
    14fc:	24 f4       	brge	.+8      	; 0x1506 <PID_alpha+0x1a8>
    14fe:	22 27       	eor	r18, r18
    1500:	33 27       	eor	r19, r19
    1502:	26 1b       	sub	r18, r22
    1504:	37 0b       	sbc	r19, r23
    1506:	e2 16       	cp	r14, r18
    1508:	f3 06       	cpc	r15, r19
    150a:	44 f4       	brge	.+16     	; 0x151c <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    150c:	8a e8       	ldi	r24, 0x8A	; 138
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	8e 19       	sub	r24, r14
    1512:	9f 09       	sbc	r25, r15
    1514:	90 93 8b 00 	sts	0x008B, r25
    1518:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    151c:	8a e8       	ldi	r24, 0x8A	; 138
    151e:	92 e0       	ldi	r25, 0x02	; 2
    1520:	90 93 8d 00 	sts	0x008D, r25
    1524:	80 93 8c 00 	sts	0x008C, r24
    1528:	43 c0       	rjmp	.+134    	; 0x15b0 <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    152a:	8e e2       	ldi	r24, 0x2E	; 46
    152c:	92 e0       	ldi	r25, 0x02	; 2
    152e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1532:	60 91 58 01 	lds	r22, 0x0158
    1536:	70 91 59 01 	lds	r23, 0x0159
    153a:	80 91 5a 01 	lds	r24, 0x015A
    153e:	90 91 5b 01 	lds	r25, 0x015B
    1542:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1546:	9b 01       	movw	r18, r22
    1548:	77 23       	and	r23, r23
    154a:	24 f4       	brge	.+8      	; 0x1554 <PID_alpha+0x1f6>
    154c:	22 27       	eor	r18, r18
    154e:	33 27       	eor	r19, r19
    1550:	26 1b       	sub	r18, r22
    1552:	37 0b       	sbc	r19, r23
    1554:	8a e8       	ldi	r24, 0x8A	; 138
    1556:	92 e0       	ldi	r25, 0x02	; 2
    1558:	82 1b       	sub	r24, r18
    155a:	93 0b       	sbc	r25, r19
    155c:	90 93 8d 00 	sts	0x008D, r25
    1560:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    1564:	e0 90 1a 01 	lds	r14, 0x011A
    1568:	f0 90 1b 01 	lds	r15, 0x011B
    156c:	60 91 58 01 	lds	r22, 0x0158
    1570:	70 91 59 01 	lds	r23, 0x0159
    1574:	80 91 5a 01 	lds	r24, 0x015A
    1578:	90 91 5b 01 	lds	r25, 0x015B
    157c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1580:	9b 01       	movw	r18, r22
    1582:	77 23       	and	r23, r23
    1584:	24 f4       	brge	.+8      	; 0x158e <PID_alpha+0x230>
    1586:	22 27       	eor	r18, r18
    1588:	33 27       	eor	r19, r19
    158a:	26 1b       	sub	r18, r22
    158c:	37 0b       	sbc	r19, r23
    158e:	e2 16       	cp	r14, r18
    1590:	f3 06       	cpc	r15, r19
    1592:	44 f4       	brge	.+16     	; 0x15a4 <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    1594:	8a e8       	ldi	r24, 0x8A	; 138
    1596:	92 e0       	ldi	r25, 0x02	; 2
    1598:	8e 19       	sub	r24, r14
    159a:	9f 09       	sbc	r25, r15
    159c:	90 93 8d 00 	sts	0x008D, r25
    15a0:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    15a4:	8a e8       	ldi	r24, 0x8A	; 138
    15a6:	92 e0       	ldi	r25, 0x02	; 2
    15a8:	90 93 8b 00 	sts	0x008B, r25
    15ac:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	7f 90       	pop	r7
    15ce:	6f 90       	pop	r6
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	08 95       	ret

000015d6 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    15d6:	4f 92       	push	r4
    15d8:	5f 92       	push	r5
    15da:	6f 92       	push	r6
    15dc:	7f 92       	push	r7
    15de:	8f 92       	push	r8
    15e0:	9f 92       	push	r9
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <PID_p2p+0x1e>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <PID_p2p+0x20>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	4b 01       	movw	r8, r22
    15fc:	5c 01       	movw	r10, r24
    15fe:	29 83       	std	Y+1, r18	; 0x01
    1600:	3a 83       	std	Y+2, r19	; 0x02
    1602:	4b 83       	std	Y+3, r20	; 0x03
    1604:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1606:	40 90 64 01 	lds	r4, 0x0164
    160a:	50 90 65 01 	lds	r5, 0x0165
    160e:	60 90 66 01 	lds	r6, 0x0166
    1612:	70 90 67 01 	lds	r7, 0x0167
    1616:	20 91 60 01 	lds	r18, 0x0160
    161a:	30 91 61 01 	lds	r19, 0x0161
    161e:	40 91 62 01 	lds	r20, 0x0162
    1622:	50 91 63 01 	lds	r21, 0x0163
    1626:	c3 01       	movw	r24, r6
    1628:	b2 01       	movw	r22, r4
    162a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    162e:	6b 01       	movw	r12, r22
    1630:	7c 01       	movw	r14, r24
    1632:	60 93 5c 01 	sts	0x015C, r22
    1636:	70 93 5d 01 	sts	0x015D, r23
    163a:	80 93 5e 01 	sts	0x015E, r24
    163e:	90 93 5f 01 	sts	0x015F, r25
	float P =0, D = 0;
	P = Kp * alpha;
    1642:	a5 01       	movw	r20, r10
    1644:	94 01       	movw	r18, r8
    1646:	c3 01       	movw	r24, r6
    1648:	b2 01       	movw	r22, r4
    164a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    164e:	4b 01       	movw	r8, r22
    1650:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    1652:	29 81       	ldd	r18, Y+1	; 0x01
    1654:	3a 81       	ldd	r19, Y+2	; 0x02
    1656:	4b 81       	ldd	r20, Y+3	; 0x03
    1658:	5c 81       	ldd	r21, Y+4	; 0x04
    165a:	c7 01       	movw	r24, r14
    165c:	b6 01       	movw	r22, r12
    165e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    1666:	c5 01       	movw	r24, r10
    1668:	b4 01       	movw	r22, r8
    166a:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    166e:	60 93 58 01 	sts	0x0158, r22
    1672:	70 93 59 01 	sts	0x0159, r23
    1676:	80 93 5a 01 	sts	0x015A, r24
    167a:	90 93 5b 01 	sts	0x015B, r25
	
	alpha_last = alpha;
    167e:	40 92 60 01 	sts	0x0160, r4
    1682:	50 92 61 01 	sts	0x0161, r5
    1686:	60 92 62 01 	sts	0x0162, r6
    168a:	70 92 63 01 	sts	0x0163, r7
	
	m_usb_tx_string("alpha*10: ");
    168e:	83 e2       	ldi	r24, 0x23	; 35
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	60 91 64 01 	lds	r22, 0x0164
    16a2:	70 91 65 01 	lds	r23, 0x0165
    16a6:	80 91 66 01 	lds	r24, 0x0166
    16aa:	90 91 67 01 	lds	r25, 0x0167
    16ae:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    16b2:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    16b6:	cb 01       	movw	r24, r22
    16b8:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    16bc:	81 e2       	ldi	r24, 0x21	; 33
    16be:	92 e0       	ldi	r25, 0x02	; 2
    16c0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	m_usb_tx_string("gain*10: ");
    16c4:	87 e1       	ldi	r24, 0x17	; 23
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	60 91 58 01 	lds	r22, 0x0158
    16d8:	70 91 59 01 	lds	r23, 0x0159
    16dc:	80 91 5a 01 	lds	r24, 0x015A
    16e0:	90 91 5b 01 	lds	r25, 0x015B
    16e4:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    16e8:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    16ec:	cb 01       	movw	r24, r22
    16ee:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    16f2:	85 e1       	ldi	r24, 0x15	; 21
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	if(gain_loc<0){  // turn right
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	60 91 58 01 	lds	r22, 0x0158
    1704:	70 91 59 01 	lds	r23, 0x0159
    1708:	80 91 5a 01 	lds	r24, 0x015A
    170c:	90 91 5b 01 	lds	r25, 0x015B
    1710:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    1714:	88 23       	and	r24, r24
    1716:	0c f0       	brlt	.+2      	; 0x171a <PID_p2p+0x144>
    1718:	44 c0       	rjmp	.+136    	; 0x17a2 <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    171a:	89 e0       	ldi	r24, 0x09	; 9
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1722:	60 91 58 01 	lds	r22, 0x0158
    1726:	70 91 59 01 	lds	r23, 0x0159
    172a:	80 91 5a 01 	lds	r24, 0x015A
    172e:	90 91 5b 01 	lds	r25, 0x015B
    1732:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1736:	9b 01       	movw	r18, r22
    1738:	77 23       	and	r23, r23
    173a:	24 f4       	brge	.+8      	; 0x1744 <PID_p2p+0x16e>
    173c:	22 27       	eor	r18, r18
    173e:	33 27       	eor	r19, r19
    1740:	26 1b       	sub	r18, r22
    1742:	37 0b       	sbc	r19, r23
    1744:	8a e8       	ldi	r24, 0x8A	; 138
    1746:	92 e0       	ldi	r25, 0x02	; 2
    1748:	82 1b       	sub	r24, r18
    174a:	93 0b       	sbc	r25, r19
    174c:	90 93 8b 00 	sts	0x008B, r25
    1750:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    1754:	e0 90 18 01 	lds	r14, 0x0118
    1758:	f0 90 19 01 	lds	r15, 0x0119
    175c:	60 91 58 01 	lds	r22, 0x0158
    1760:	70 91 59 01 	lds	r23, 0x0159
    1764:	80 91 5a 01 	lds	r24, 0x015A
    1768:	90 91 5b 01 	lds	r25, 0x015B
    176c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1770:	9b 01       	movw	r18, r22
    1772:	77 23       	and	r23, r23
    1774:	24 f4       	brge	.+8      	; 0x177e <PID_p2p+0x1a8>
    1776:	22 27       	eor	r18, r18
    1778:	33 27       	eor	r19, r19
    177a:	26 1b       	sub	r18, r22
    177c:	37 0b       	sbc	r19, r23
    177e:	e2 16       	cp	r14, r18
    1780:	f3 06       	cpc	r15, r19
    1782:	44 f4       	brge	.+16     	; 0x1794 <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    1784:	8a e8       	ldi	r24, 0x8A	; 138
    1786:	92 e0       	ldi	r25, 0x02	; 2
    1788:	8e 19       	sub	r24, r14
    178a:	9f 09       	sbc	r25, r15
    178c:	90 93 8b 00 	sts	0x008B, r25
    1790:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1794:	8a e8       	ldi	r24, 0x8A	; 138
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	90 93 8d 00 	sts	0x008D, r25
    179c:	80 93 8c 00 	sts	0x008C, r24
    17a0:	43 c0       	rjmp	.+134    	; 0x1828 <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    17a2:	8e ef       	ldi	r24, 0xFE	; 254
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    17aa:	60 91 58 01 	lds	r22, 0x0158
    17ae:	70 91 59 01 	lds	r23, 0x0159
    17b2:	80 91 5a 01 	lds	r24, 0x015A
    17b6:	90 91 5b 01 	lds	r25, 0x015B
    17ba:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    17be:	9b 01       	movw	r18, r22
    17c0:	77 23       	and	r23, r23
    17c2:	24 f4       	brge	.+8      	; 0x17cc <PID_p2p+0x1f6>
    17c4:	22 27       	eor	r18, r18
    17c6:	33 27       	eor	r19, r19
    17c8:	26 1b       	sub	r18, r22
    17ca:	37 0b       	sbc	r19, r23
    17cc:	8a e8       	ldi	r24, 0x8A	; 138
    17ce:	92 e0       	ldi	r25, 0x02	; 2
    17d0:	82 1b       	sub	r24, r18
    17d2:	93 0b       	sbc	r25, r19
    17d4:	90 93 8d 00 	sts	0x008D, r25
    17d8:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    17dc:	e0 90 18 01 	lds	r14, 0x0118
    17e0:	f0 90 19 01 	lds	r15, 0x0119
    17e4:	60 91 58 01 	lds	r22, 0x0158
    17e8:	70 91 59 01 	lds	r23, 0x0159
    17ec:	80 91 5a 01 	lds	r24, 0x015A
    17f0:	90 91 5b 01 	lds	r25, 0x015B
    17f4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    17f8:	9b 01       	movw	r18, r22
    17fa:	77 23       	and	r23, r23
    17fc:	24 f4       	brge	.+8      	; 0x1806 <PID_p2p+0x230>
    17fe:	22 27       	eor	r18, r18
    1800:	33 27       	eor	r19, r19
    1802:	26 1b       	sub	r18, r22
    1804:	37 0b       	sbc	r19, r23
    1806:	e2 16       	cp	r14, r18
    1808:	f3 06       	cpc	r15, r19
    180a:	44 f4       	brge	.+16     	; 0x181c <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    180c:	8a e8       	ldi	r24, 0x8A	; 138
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	8e 19       	sub	r24, r14
    1812:	9f 09       	sbc	r25, r15
    1814:	90 93 8d 00 	sts	0x008D, r25
    1818:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    181c:	8a e8       	ldi	r24, 0x8A	; 138
    181e:	92 e0       	ldi	r25, 0x02	; 2
    1820:	90 93 8b 00 	sts	0x008B, r25
    1824:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	bf 90       	pop	r11
    183e:	af 90       	pop	r10
    1840:	9f 90       	pop	r9
    1842:	8f 90       	pop	r8
    1844:	7f 90       	pop	r7
    1846:	6f 90       	pop	r6
    1848:	5f 90       	pop	r5
    184a:	4f 90       	pop	r4
    184c:	08 95       	ret

0000184e <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
	unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
    1856:	f8 01       	movw	r30, r16
    1858:	20 81       	ld	r18, Z
    185a:	31 81       	ldd	r19, Z+1	; 0x01
    185c:	42 81       	ldd	r20, Z+2	; 0x02
    185e:	53 81       	ldd	r21, Z+3	; 0x03
    1860:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    1864:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1868:	9b 01       	movw	r18, r22
    186a:	77 23       	and	r23, r23
    186c:	24 f4       	brge	.+8      	; 0x1876 <find_if_reach+0x28>
    186e:	22 27       	eor	r18, r18
    1870:	33 27       	eor	r19, r19
    1872:	26 1b       	sub	r18, r22
    1874:	37 0b       	sbc	r19, r23
    1876:	22 9f       	mul	r18, r18
    1878:	e0 01       	movw	r28, r0
    187a:	23 9f       	mul	r18, r19
    187c:	d0 0d       	add	r29, r0
    187e:	d0 0d       	add	r29, r0
    1880:	11 24       	eor	r1, r1
	m_usb_tx_string("dist: ");
    1882:	87 ef       	ldi	r24, 0xF7	; 247
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(dist); 
    188a:	ce 01       	movw	r24, r28
    188c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1890:	85 ef       	ldi	r24, 0xF5	; 245
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	if (dist < dist_threshold){
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	20 91 1c 01 	lds	r18, 0x011C
    18a0:	30 91 1d 01 	lds	r19, 0x011D
    18a4:	c2 17       	cp	r28, r18
    18a6:	d3 07       	cpc	r29, r19
    18a8:	10 f0       	brcs	.+4      	; 0x18ae <find_if_reach+0x60>
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	08 95       	ret

000018b8 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int state, float *goal, float *c_wii, float *dir){
    18b8:	2f 92       	push	r2
    18ba:	3f 92       	push	r3
    18bc:	4f 92       	push	r4
    18be:	5f 92       	push	r5
    18c0:	6f 92       	push	r6
    18c2:	7f 92       	push	r7
    18c4:	8f 92       	push	r8
    18c6:	9f 92       	push	r9
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	c6 58       	subi	r28, 0x86	; 134
    18e2:	d1 09       	sbc	r29, r1
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cd 57       	subi	r28, 0x7D	; 125
    18f0:	df 4f       	sbci	r29, 0xFF	; 255
    18f2:	99 83       	std	Y+1, r25	; 0x01
    18f4:	88 83       	st	Y, r24
    18f6:	c3 58       	subi	r28, 0x83	; 131
    18f8:	d0 40       	sbci	r29, 0x00	; 0
    18fa:	cb 57       	subi	r28, 0x7B	; 123
    18fc:	df 4f       	sbci	r29, 0xFF	; 255
    18fe:	79 83       	std	Y+1, r23	; 0x01
    1900:	68 83       	st	Y, r22
    1902:	c5 58       	subi	r28, 0x85	; 133
    1904:	d0 40       	sbci	r29, 0x00	; 0
    1906:	ed 96       	adiw	r28, 0x3d	; 61
    1908:	5f af       	std	Y+63, r21	; 0x3f
    190a:	4e af       	std	Y+62, r20	; 0x3e
    190c:	ed 97       	sbiw	r28, 0x3d	; 61
    190e:	ef 96       	adiw	r28, 0x3f	; 63
    1910:	3f af       	std	Y+63, r19	; 0x3f
    1912:	2e af       	std	Y+62, r18	; 0x3e
    1914:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    1916:	88 e7       	ldi	r24, 0x78	; 120
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	0e 94 88 18 	call	0x3110	; 0x3110 <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    191e:	60 91 78 01 	lds	r22, 0x0178
    1922:	70 91 79 01 	lds	r23, 0x0179
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    192e:	69 83       	std	Y+1, r22	; 0x01
    1930:	7a 83       	std	Y+2, r23	; 0x02
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	60 91 7e 01 	lds	r22, 0x017E
    193a:	70 91 7f 01 	lds	r23, 0x017F
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    1946:	6d 83       	std	Y+5, r22	; 0x05
    1948:	7e 83       	std	Y+6, r23	; 0x06
    194a:	8f 83       	std	Y+7, r24	; 0x07
    194c:	98 87       	std	Y+8, r25	; 0x08
    194e:	60 91 84 01 	lds	r22, 0x0184
    1952:	70 91 85 01 	lds	r23, 0x0185
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    195e:	69 87       	std	Y+9, r22	; 0x09
    1960:	7a 87       	std	Y+10, r23	; 0x0a
    1962:	8b 87       	std	Y+11, r24	; 0x0b
    1964:	9c 87       	std	Y+12, r25	; 0x0c
    1966:	60 91 8a 01 	lds	r22, 0x018A
    196a:	70 91 8b 01 	lds	r23, 0x018B
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    1976:	6d 87       	std	Y+13, r22	; 0x0d
    1978:	7e 87       	std	Y+14, r23	; 0x0e
    197a:	8f 87       	std	Y+15, r24	; 0x0f
    197c:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    197e:	60 91 7a 01 	lds	r22, 0x017A
    1982:	70 91 7b 01 	lds	r23, 0x017B
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    198e:	69 8b       	std	Y+17, r22	; 0x11
    1990:	7a 8b       	std	Y+18, r23	; 0x12
    1992:	8b 8b       	std	Y+19, r24	; 0x13
    1994:	9c 8b       	std	Y+20, r25	; 0x14
    1996:	60 91 80 01 	lds	r22, 0x0180
    199a:	70 91 81 01 	lds	r23, 0x0181
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    19a6:	6d 8b       	std	Y+21, r22	; 0x15
    19a8:	7e 8b       	std	Y+22, r23	; 0x16
    19aa:	8f 8b       	std	Y+23, r24	; 0x17
    19ac:	98 8f       	std	Y+24, r25	; 0x18
    19ae:	60 91 86 01 	lds	r22, 0x0186
    19b2:	70 91 87 01 	lds	r23, 0x0187
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    19be:	69 8f       	std	Y+25, r22	; 0x19
    19c0:	7a 8f       	std	Y+26, r23	; 0x1a
    19c2:	8b 8f       	std	Y+27, r24	; 0x1b
    19c4:	9c 8f       	std	Y+28, r25	; 0x1c
    19c6:	60 91 8c 01 	lds	r22, 0x018C
    19ca:	70 91 8d 01 	lds	r23, 0x018D
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    19d6:	6d 8f       	std	Y+29, r22	; 0x1d
    19d8:	7e 8f       	std	Y+30, r23	; 0x1e
    19da:	8f 8f       	std	Y+31, r24	; 0x1f
    19dc:	98 a3       	std	Y+32, r25	; 0x20
    19de:	9e 01       	movw	r18, r28
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	eb 96       	adiw	r28, 0x3b	; 59
    19e6:	3f af       	std	Y+63, r19	; 0x3f
    19e8:	2e af       	std	Y+62, r18	; 0x3e
    19ea:	eb 97       	sbiw	r28, 0x3b	; 59
    19ec:	ce 01       	movw	r24, r28
    19ee:	41 96       	adiw	r24, 0x11	; 17
    19f0:	e3 96       	adiw	r28, 0x33	; 51
    19f2:	9f af       	std	Y+63, r25	; 0x3f
    19f4:	8e af       	std	Y+62, r24	; 0x3e
    19f6:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    19f8:	ab 96       	adiw	r28, 0x2b	; 43
    19fa:	1f ae       	std	Y+63, r1	; 0x3f
    19fc:	1e ae       	std	Y+62, r1	; 0x3e
    19fe:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    1a00:	e9 96       	adiw	r28, 0x39	; 57
    1a02:	1f ae       	std	Y+63, r1	; 0x3f
    1a04:	1e ae       	std	Y+62, r1	; 0x3e
    1a06:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1a08:	ab 96       	adiw	r28, 0x2b	; 43
    1a0a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a0c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a0e:	ab 97       	sbiw	r28, 0x2b	; 43
    1a10:	11 96       	adiw	r26, 0x01	; 1
    1a12:	e7 96       	adiw	r28, 0x37	; 55
    1a14:	bf af       	std	Y+63, r27	; 0x3f
    1a16:	ae af       	std	Y+62, r26	; 0x3e
    1a18:	e7 97       	sbiw	r28, 0x37	; 55
    1a1a:	14 97       	sbiw	r26, 0x04	; 4
    1a1c:	0c f0       	brlt	.+2      	; 0x1a20 <localization+0x168>
    1a1e:	48 c6       	rjmp	.+3216   	; 0x26b0 <localization+0xdf8>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1a20:	eb 96       	adiw	r28, 0x3b	; 59
    1a22:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a24:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a26:	eb 97       	sbiw	r28, 0x3b	; 59
    1a28:	81 90       	ld	r8, Z+
    1a2a:	91 90       	ld	r9, Z+
    1a2c:	a1 90       	ld	r10, Z+
    1a2e:	b1 90       	ld	r11, Z+
    1a30:	e9 96       	adiw	r28, 0x39	; 57
    1a32:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a36:	e9 97       	sbiw	r28, 0x39	; 57
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	29 e3       	ldi	r18, 0x39	; 57
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	2c 0f       	add	r18, r28
    1a42:	3d 1f       	adc	r19, r29
    1a44:	28 0f       	add	r18, r24
    1a46:	39 1f       	adc	r19, r25
    1a48:	a3 96       	adiw	r28, 0x23	; 35
    1a4a:	3f af       	std	Y+63, r19	; 0x3f
    1a4c:	2e af       	std	Y+62, r18	; 0x3e
    1a4e:	a3 97       	sbiw	r28, 0x23	; 35
    1a50:	a5 e4       	ldi	r26, 0x45	; 69
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	ac 0f       	add	r26, r28
    1a56:	bd 1f       	adc	r27, r29
    1a58:	a8 0f       	add	r26, r24
    1a5a:	b9 1f       	adc	r27, r25
    1a5c:	a7 96       	adiw	r28, 0x27	; 39
    1a5e:	bf af       	std	Y+63, r27	; 0x3f
    1a60:	ae af       	std	Y+62, r26	; 0x3e
    1a62:	a7 97       	sbiw	r28, 0x27	; 39
    1a64:	e9 96       	adiw	r28, 0x39	; 57
    1a66:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a68:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a6a:	e9 97       	sbiw	r28, 0x39	; 57
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0f 2e       	mov	r0, r31
    1a76:	f1 e2       	ldi	r31, 0x21	; 33
    1a78:	6f 2e       	mov	r6, r31
    1a7a:	71 2c       	mov	r7, r1
    1a7c:	f0 2d       	mov	r31, r0
    1a7e:	6c 0e       	add	r6, r28
    1a80:	7d 1e       	adc	r7, r29
    1a82:	68 0e       	add	r6, r24
    1a84:	79 1e       	adc	r7, r25
    1a86:	e3 96       	adiw	r28, 0x33	; 51
    1a88:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a8a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a8c:	e3 97       	sbiw	r28, 0x33	; 51
    1a8e:	2c 5f       	subi	r18, 0xFC	; 252
    1a90:	3f 4f       	sbci	r19, 0xFF	; 255
    1a92:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1a94:	e7 96       	adiw	r28, 0x37	; 55
    1a96:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a98:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a9a:	e7 97       	sbiw	r28, 0x37	; 55
    1a9c:	e1 96       	adiw	r28, 0x31	; 49
    1a9e:	8c ae       	std	Y+60, r8	; 0x3c
    1aa0:	9d ae       	std	Y+61, r9	; 0x3d
    1aa2:	ae ae       	std	Y+62, r10	; 0x3e
    1aa4:	bf ae       	std	Y+63, r11	; 0x3f
    1aa6:	e1 97       	sbiw	r28, 0x31	; 49
    1aa8:	59 01       	movw	r10, r18
    1aaa:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 ec       	ldi	r19, 0xC0	; 192
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	e1 96       	adiw	r28, 0x31	; 49
    1ab6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ab8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aba:	8e ad       	ldd	r24, Y+62	; 0x3e
    1abc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1abe:	e1 97       	sbiw	r28, 0x31	; 49
    1ac0:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <localization+0x212>
    1ac8:	70 c0       	rjmp	.+224    	; 0x1baa <localization+0x2f2>
    1aca:	e3 96       	adiw	r28, 0x33	; 51
    1acc:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ace:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ad0:	e3 97       	sbiw	r28, 0x33	; 51
    1ad2:	cd 90       	ld	r12, X+
    1ad4:	dd 90       	ld	r13, X+
    1ad6:	ed 90       	ld	r14, X+
    1ad8:	fc 90       	ld	r15, X
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 ec       	ldi	r19, 0xC0	; 192
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	54 e4       	ldi	r21, 0x44	; 68
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <localization+0x238>
    1aee:	5d c0       	rjmp	.+186    	; 0x1baa <localization+0x2f2>
    1af0:	f1 01       	movw	r30, r2
    1af2:	40 80       	ld	r4, Z
    1af4:	51 80       	ldd	r5, Z+1	; 0x01
    1af6:	62 80       	ldd	r6, Z+2	; 0x02
    1af8:	73 80       	ldd	r7, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 ec       	ldi	r19, 0xC0	; 192
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	c3 01       	movw	r24, r6
    1b04:	b2 01       	movw	r22, r4
    1b06:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <localization+0x258>
    1b0e:	4d c0       	rjmp	.+154    	; 0x1baa <localization+0x2f2>
    1b10:	d5 01       	movw	r26, r10
    1b12:	8d 91       	ld	r24, X+
    1b14:	9d 91       	ld	r25, X+
    1b16:	0d 90       	ld	r0, X+
    1b18:	bc 91       	ld	r27, X
    1b1a:	a0 2d       	mov	r26, r0
    1b1c:	c1 58       	subi	r28, 0x81	; 129
    1b1e:	df 4f       	sbci	r29, 0xFF	; 255
    1b20:	88 83       	st	Y, r24
    1b22:	99 83       	std	Y+1, r25	; 0x01
    1b24:	aa 83       	std	Y+2, r26	; 0x02
    1b26:	bb 83       	std	Y+3, r27	; 0x03
    1b28:	cf 57       	subi	r28, 0x7F	; 127
    1b2a:	d0 40       	sbci	r29, 0x00	; 0
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 ec       	ldi	r19, 0xC0	; 192
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	a9 f1       	breq	.+106    	; 0x1baa <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    1b40:	a3 01       	movw	r20, r6
    1b42:	92 01       	movw	r18, r4
    1b44:	e1 96       	adiw	r28, 0x31	; 49
    1b46:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b48:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b4e:	e1 97       	sbiw	r28, 0x31	; 49
    1b50:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    1b54:	2b 01       	movw	r4, r22
    1b56:	3c 01       	movw	r6, r24
    1b58:	c1 58       	subi	r28, 0x81	; 129
    1b5a:	df 4f       	sbci	r29, 0xFF	; 255
    1b5c:	28 81       	ld	r18, Y
    1b5e:	39 81       	ldd	r19, Y+1	; 0x01
    1b60:	4a 81       	ldd	r20, Y+2	; 0x02
    1b62:	5b 81       	ldd	r21, Y+3	; 0x03
    1b64:	cf 57       	subi	r28, 0x7F	; 127
    1b66:	d0 40       	sbci	r29, 0x00	; 0
    1b68:	c7 01       	movw	r24, r14
    1b6a:	b6 01       	movw	r22, r12
    1b6c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    1b70:	6b 01       	movw	r12, r22
    1b72:	7c 01       	movw	r14, r24
    1b74:	a3 01       	movw	r20, r6
    1b76:	92 01       	movw	r18, r4
    1b78:	c3 01       	movw	r24, r6
    1b7a:	b2 01       	movw	r22, r4
    1b7c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    1b80:	2b 01       	movw	r4, r22
    1b82:	3c 01       	movw	r6, r24
    1b84:	a7 01       	movw	r20, r14
    1b86:	96 01       	movw	r18, r12
    1b88:	c7 01       	movw	r24, r14
    1b8a:	b6 01       	movw	r22, r12
    1b8c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	c3 01       	movw	r24, r6
    1b96:	b2 01       	movw	r22, r4
    1b98:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    1b9c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <sqrt>
    1ba0:	f4 01       	movw	r30, r8
    1ba2:	60 83       	st	Z, r22
    1ba4:	71 83       	std	Z+1, r23	; 0x01
    1ba6:	82 83       	std	Z+2, r24	; 0x02
    1ba8:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1baa:	a3 96       	adiw	r28, 0x23	; 35
    1bac:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bae:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bb0:	a3 97       	sbiw	r28, 0x23	; 35
    1bb2:	ab 96       	adiw	r28, 0x2b	; 43
    1bb4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bb6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bb8:	ab 97       	sbiw	r28, 0x2b	; 43
    1bba:	ed 93       	st	X+, r30
    1bbc:	fd 93       	st	X+, r31
    1bbe:	a3 96       	adiw	r28, 0x23	; 35
    1bc0:	bf af       	std	Y+63, r27	; 0x3f
    1bc2:	ae af       	std	Y+62, r26	; 0x3e
    1bc4:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1bc6:	a7 96       	adiw	r28, 0x27	; 39
    1bc8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bca:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bcc:	a7 97       	sbiw	r28, 0x27	; 39
    1bce:	0d 93       	st	X+, r16
    1bd0:	1d 93       	st	X+, r17
    1bd2:	a7 96       	adiw	r28, 0x27	; 39
    1bd4:	bf af       	std	Y+63, r27	; 0x3f
    1bd6:	ae af       	std	Y+62, r26	; 0x3e
    1bd8:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1bda:	0f 5f       	subi	r16, 0xFF	; 255
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	b4 e0       	ldi	r27, 0x04	; 4
    1be0:	2b 0e       	add	r2, r27
    1be2:	31 1c       	adc	r3, r1
    1be4:	e4 e0       	ldi	r30, 0x04	; 4
    1be6:	ae 0e       	add	r10, r30
    1be8:	b1 1c       	adc	r11, r1
    1bea:	f4 e0       	ldi	r31, 0x04	; 4
    1bec:	8f 0e       	add	r8, r31
    1bee:	91 1c       	adc	r9, r1
    1bf0:	04 30       	cpi	r16, 0x04	; 4
    1bf2:	11 05       	cpc	r17, r1
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <localization+0x340>
    1bf6:	5a cf       	rjmp	.-332    	; 0x1aac <localization+0x1f4>
    1bf8:	e9 96       	adiw	r28, 0x39	; 57
    1bfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bfe:	e9 97       	sbiw	r28, 0x39	; 57
    1c00:	e7 96       	adiw	r28, 0x37	; 55
    1c02:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c04:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c06:	e7 97       	sbiw	r28, 0x37	; 55
    1c08:	82 1b       	sub	r24, r18
    1c0a:	93 0b       	sbc	r25, r19
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	14 96       	adiw	r26, 0x04	; 4
    1c10:	e9 96       	adiw	r28, 0x39	; 57
    1c12:	bf af       	std	Y+63, r27	; 0x3f
    1c14:	ae af       	std	Y+62, r26	; 0x3e
    1c16:	e9 97       	sbiw	r28, 0x39	; 57
    1c18:	eb 96       	adiw	r28, 0x3b	; 59
    1c1a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c1c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c1e:	eb 97       	sbiw	r28, 0x3b	; 59
    1c20:	34 96       	adiw	r30, 0x04	; 4
    1c22:	eb 96       	adiw	r28, 0x3b	; 59
    1c24:	ff af       	std	Y+63, r31	; 0x3f
    1c26:	ee af       	std	Y+62, r30	; 0x3e
    1c28:	eb 97       	sbiw	r28, 0x3b	; 59
    1c2a:	e3 96       	adiw	r28, 0x33	; 51
    1c2c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c30:	e3 97       	sbiw	r28, 0x33	; 51
    1c32:	2c 5f       	subi	r18, 0xFC	; 252
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	e3 96       	adiw	r28, 0x33	; 51
    1c38:	3f af       	std	Y+63, r19	; 0x3f
    1c3a:	2e af       	std	Y+62, r18	; 0x3e
    1c3c:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1c3e:	e7 96       	adiw	r28, 0x37	; 55
    1c40:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c42:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c44:	e7 97       	sbiw	r28, 0x37	; 55
    1c46:	03 97       	sbiw	r24, 0x03	; 3
    1c48:	49 f0       	breq	.+18     	; 0x1c5c <localization+0x3a4>
    1c4a:	e7 96       	adiw	r28, 0x37	; 55
    1c4c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c4e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c50:	e7 97       	sbiw	r28, 0x37	; 55
    1c52:	ab 96       	adiw	r28, 0x2b	; 43
    1c54:	bf af       	std	Y+63, r27	; 0x3f
    1c56:	ae af       	std	Y+62, r26	; 0x3e
    1c58:	ab 97       	sbiw	r28, 0x2b	; 43
    1c5a:	d6 ce       	rjmp	.-596    	; 0x1a08 <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1c5c:	e9 96       	adiw	r28, 0x39	; 57
    1c5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c60:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c62:	e9 97       	sbiw	r28, 0x39	; 57
    1c64:	1e 16       	cp	r1, r30
    1c66:	1f 06       	cpc	r1, r31
    1c68:	84 f5       	brge	.+96     	; 0x1cca <localization+0x412>
    1c6a:	6e 01       	movw	r12, r28
    1c6c:	f1 e2       	ldi	r31, 0x21	; 33
    1c6e:	cf 0e       	add	r12, r31
    1c70:	d1 1c       	adc	r13, r1
    1c72:	21 2c       	mov	r2, r1
    1c74:	31 2c       	mov	r3, r1
    1c76:	00 e0       	ldi	r16, 0x00	; 0
    1c78:	10 e0       	ldi	r17, 0x00	; 0
    1c7a:	e1 2c       	mov	r14, r1
    1c7c:	f1 2c       	mov	r15, r1
    1c7e:	e9 96       	adiw	r28, 0x39	; 57
    1c80:	ae ac       	ldd	r10, Y+62	; 0x3e
    1c82:	bf ac       	ldd	r11, Y+63	; 0x3f
    1c84:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    1c86:	d6 01       	movw	r26, r12
    1c88:	4d 90       	ld	r4, X+
    1c8a:	5d 90       	ld	r5, X+
    1c8c:	6d 90       	ld	r6, X+
    1c8e:	7d 90       	ld	r7, X+
    1c90:	6d 01       	movw	r12, r26
    1c92:	b8 01       	movw	r22, r16
    1c94:	88 27       	eor	r24, r24
    1c96:	77 fd       	sbrc	r23, 7
    1c98:	80 95       	com	r24
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
    1ca0:	9b 01       	movw	r18, r22
    1ca2:	ac 01       	movw	r20, r24
    1ca4:	c3 01       	movw	r24, r6
    1ca6:	b2 01       	movw	r22, r4
    1ca8:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__gesf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	34 f4       	brge	.+12     	; 0x1cbc <localization+0x404>
			indmax = i;
			dmax = d[i];
    1cb0:	c3 01       	movw	r24, r6
    1cb2:	b2 01       	movw	r22, r4
    1cb4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1cb8:	8b 01       	movw	r16, r22
    1cba:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1cbc:	bf ef       	ldi	r27, 0xFF	; 255
    1cbe:	eb 1a       	sub	r14, r27
    1cc0:	fb 0a       	sbc	r15, r27
    1cc2:	ea 14       	cp	r14, r10
    1cc4:	fb 04       	cpc	r15, r11
    1cc6:	f9 f6       	brne	.-66     	; 0x1c86 <localization+0x3ce>
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <localization+0x41a>
    1cca:	21 2c       	mov	r2, r1
    1ccc:	31 2c       	mov	r3, r1
    1cce:	00 e0       	ldi	r16, 0x00	; 0
    1cd0:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1cd2:	88 e9       	ldi	r24, 0x98	; 152
    1cd4:	92 e0       	ldi	r25, 0x02	; 2
    1cd6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(dmax);
    1cda:	c8 01       	movw	r24, r16
    1cdc:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1ce0:	86 e9       	ldi	r24, 0x96	; 150
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1ce8:	e9 96       	adiw	r28, 0x39	; 57
    1cea:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cec:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cee:	e9 97       	sbiw	r28, 0x39	; 57
    1cf0:	1e 16       	cp	r1, r30
    1cf2:	1f 06       	cpc	r1, r31
    1cf4:	dc f5       	brge	.+118    	; 0x1d6c <localization+0x4b4>
    1cf6:	6e 01       	movw	r12, r28
    1cf8:	f1 e2       	ldi	r31, 0x21	; 33
    1cfa:	cf 0e       	add	r12, r31
    1cfc:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1cfe:	a3 96       	adiw	r28, 0x23	; 35
    1d00:	1f ae       	std	Y+63, r1	; 0x3f
    1d02:	1e ae       	std	Y+62, r1	; 0x3e
    1d04:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    1d06:	0f 2e       	mov	r0, r31
    1d08:	f0 e1       	ldi	r31, 0x10	; 16
    1d0a:	af 2e       	mov	r10, r31
    1d0c:	f7 e2       	ldi	r31, 0x27	; 39
    1d0e:	bf 2e       	mov	r11, r31
    1d10:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    1d12:	e1 2c       	mov	r14, r1
    1d14:	f1 2c       	mov	r15, r1
    1d16:	48 01       	movw	r8, r16
    1d18:	e9 96       	adiw	r28, 0x39	; 57
    1d1a:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d1c:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d1e:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    1d20:	d6 01       	movw	r26, r12
    1d22:	4d 90       	ld	r4, X+
    1d24:	5d 90       	ld	r5, X+
    1d26:	6d 90       	ld	r6, X+
    1d28:	7d 90       	ld	r7, X+
    1d2a:	6d 01       	movw	r12, r26
    1d2c:	b5 01       	movw	r22, r10
    1d2e:	88 27       	eor	r24, r24
    1d30:	77 fd       	sbrc	r23, 7
    1d32:	80 95       	com	r24
    1d34:	98 2f       	mov	r25, r24
    1d36:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	c3 01       	movw	r24, r6
    1d40:	b2 01       	movw	r22, r4
    1d42:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	4c f4       	brge	.+18     	; 0x1d5c <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    1d4a:	c3 01       	movw	r24, r6
    1d4c:	b2 01       	movw	r22, r4
    1d4e:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1d52:	5b 01       	movw	r10, r22
    1d54:	a3 96       	adiw	r28, 0x23	; 35
    1d56:	ff ae       	std	Y+63, r15	; 0x3f
    1d58:	ee ae       	std	Y+62, r14	; 0x3e
    1d5a:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1d5c:	bf ef       	ldi	r27, 0xFF	; 255
    1d5e:	eb 1a       	sub	r14, r27
    1d60:	fb 0a       	sbc	r15, r27
    1d62:	e0 16       	cp	r14, r16
    1d64:	f1 06       	cpc	r15, r17
    1d66:	e1 f6       	brne	.-72     	; 0x1d20 <localization+0x468>
    1d68:	84 01       	movw	r16, r8
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1d6c:	a3 96       	adiw	r28, 0x23	; 35
    1d6e:	1f ae       	std	Y+63, r1	; 0x3f
    1d70:	1e ae       	std	Y+62, r1	; 0x3e
    1d72:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1d74:	80 90 10 01 	lds	r8, 0x0110
    1d78:	90 90 11 01 	lds	r9, 0x0111
    1d7c:	a0 90 12 01 	lds	r10, 0x0112
    1d80:	b0 90 13 01 	lds	r11, 0x0113
    1d84:	b8 01       	movw	r22, r16
    1d86:	88 27       	eor	r24, r24
    1d88:	77 fd       	sbrc	r23, 7
    1d8a:	80 95       	com	r24
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
    1d92:	a5 01       	movw	r20, r10
    1d94:	94 01       	movw	r18, r8
    1d96:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    1d9a:	2b 01       	movw	r4, r22
    1d9c:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    1d9e:	c0 90 14 01 	lds	r12, 0x0114
    1da2:	d0 90 15 01 	lds	r13, 0x0115
    1da6:	e0 90 16 01 	lds	r14, 0x0116
    1daa:	f0 90 17 01 	lds	r15, 0x0117
    1dae:	e4 e0       	ldi	r30, 0x04	; 4
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	ab 96       	adiw	r28, 0x2b	; 43
    1db4:	ff af       	std	Y+63, r31	; 0x3f
    1db6:	ee af       	std	Y+62, r30	; 0x3e
    1db8:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1dba:	a7 96       	adiw	r28, 0x27	; 39
    1dbc:	1f ae       	std	Y+63, r1	; 0x3f
    1dbe:	1e ae       	std	Y+62, r1	; 0x3e
    1dc0:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    1dc2:	01 e0       	ldi	r16, 0x01	; 1
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	af 96       	adiw	r28, 0x2f	; 47
    1dc8:	3f ae       	std	Y+63, r3	; 0x3f
    1dca:	2e ae       	std	Y+62, r2	; 0x3e
    1dcc:	af 97       	sbiw	r28, 0x2f	; 47
    1dce:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    1dd0:	d1 01       	movw	r26, r2
    1dd2:	2d 91       	ld	r18, X+
    1dd4:	3d 91       	ld	r19, X+
    1dd6:	4d 91       	ld	r20, X+
    1dd8:	5d 91       	ld	r21, X+
    1dda:	1d 01       	movw	r2, r26
    1ddc:	c3 01       	movw	r24, r6
    1dde:	b2 01       	movw	r22, r4
    1de0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    1de4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    1de8:	9b 01       	movw	r18, r22
    1dea:	77 23       	and	r23, r23
    1dec:	24 f4       	brge	.+8      	; 0x1df6 <localization+0x53e>
    1dee:	22 27       	eor	r18, r18
    1df0:	33 27       	eor	r19, r19
    1df2:	26 1b       	sub	r18, r22
    1df4:	37 0b       	sbc	r19, r23
    1df6:	b9 01       	movw	r22, r18
    1df8:	88 27       	eor	r24, r24
    1dfa:	77 fd       	sbrc	r23, 7
    1dfc:	80 95       	com	r24
    1dfe:	98 2f       	mov	r25, r24
    1e00:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
    1e04:	a7 01       	movw	r20, r14
    1e06:	96 01       	movw	r18, r12
    1e08:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__cmpsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	24 f4       	brge	.+8      	; 0x1e18 <localization+0x560>
    1e10:	a7 96       	adiw	r28, 0x27	; 39
    1e12:	1f af       	std	Y+63, r17	; 0x3f
    1e14:	0e af       	std	Y+62, r16	; 0x3e
    1e16:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1e18:	0f 5f       	subi	r16, 0xFF	; 255
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	04 30       	cpi	r16, 0x04	; 4
    1e1e:	11 05       	cpc	r17, r1
    1e20:	b9 f6       	brne	.-82     	; 0x1dd0 <localization+0x518>
    1e22:	af 96       	adiw	r28, 0x2f	; 47
    1e24:	2e ac       	ldd	r2, Y+62	; 0x3e
    1e26:	3f ac       	ldd	r3, Y+63	; 0x3f
    1e28:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    1e2a:	65 96       	adiw	r28, 0x15	; 21
    1e2c:	1c ae       	std	Y+60, r1	; 0x3c
    1e2e:	1d ae       	std	Y+61, r1	; 0x3d
    1e30:	1e ae       	std	Y+62, r1	; 0x3e
    1e32:	1f ae       	std	Y+63, r1	; 0x3f
    1e34:	65 97       	sbiw	r28, 0x15	; 21
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e8       	ldi	r26, 0x80	; 128
    1e3c:	bf e3       	ldi	r27, 0x3F	; 63
    1e3e:	69 96       	adiw	r28, 0x19	; 25
    1e40:	8c af       	std	Y+60, r24	; 0x3c
    1e42:	9d af       	std	Y+61, r25	; 0x3d
    1e44:	ae af       	std	Y+62, r26	; 0x3e
    1e46:	bf af       	std	Y+63, r27	; 0x3f
    1e48:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1e4a:	a7 96       	adiw	r28, 0x27	; 39
    1e4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e50:	a7 97       	sbiw	r28, 0x27	; 39
    1e52:	e2 30       	cpi	r30, 0x02	; 2
    1e54:	f1 05       	cpc	r31, r1
    1e56:	19 f0       	breq	.+6      	; 0x1e5e <localization+0x5a6>
    1e58:	33 97       	sbiw	r30, 0x03	; 3
    1e5a:	51 f1       	breq	.+84     	; 0x1eb0 <localization+0x5f8>
    1e5c:	5a c0       	rjmp	.+180    	; 0x1f12 <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1e5e:	a5 01       	movw	r20, r10
    1e60:	94 01       	movw	r18, r8
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	88 e6       	ldi	r24, 0x68	; 104
    1e68:	91 e4       	ldi	r25, 0x41	; 65
    1e6a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    1e6e:	e1 96       	adiw	r28, 0x31	; 49
    1e70:	6c af       	std	Y+60, r22	; 0x3c
    1e72:	7d af       	std	Y+61, r23	; 0x3d
    1e74:	8e af       	std	Y+62, r24	; 0x3e
    1e76:	9f af       	std	Y+63, r25	; 0x3f
    1e78:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    1e7a:	84 e9       	ldi	r24, 0x94	; 148
    1e7c:	97 e8       	ldi	r25, 0x87	; 135
    1e7e:	a5 ee       	ldi	r26, 0xE5	; 229
    1e80:	be e3       	ldi	r27, 0x3E	; 62
    1e82:	65 96       	adiw	r28, 0x15	; 21
    1e84:	8c af       	std	Y+60, r24	; 0x3c
    1e86:	9d af       	std	Y+61, r25	; 0x3d
    1e88:	ae af       	std	Y+62, r26	; 0x3e
    1e8a:	bf af       	std	Y+63, r27	; 0x3f
    1e8c:	65 97       	sbiw	r28, 0x15	; 21
    1e8e:	81 ea       	ldi	r24, 0xA1	; 161
    1e90:	96 ed       	ldi	r25, 0xD6	; 214
    1e92:	a4 e6       	ldi	r26, 0x64	; 100
    1e94:	bf eb       	ldi	r27, 0xBF	; 191
    1e96:	69 96       	adiw	r28, 0x19	; 25
    1e98:	8c af       	std	Y+60, r24	; 0x3c
    1e9a:	9d af       	std	Y+61, r25	; 0x3d
    1e9c:	ae af       	std	Y+62, r26	; 0x3e
    1e9e:	bf af       	std	Y+63, r27	; 0x3f
    1ea0:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1ea2:	e5 96       	adiw	r28, 0x35	; 53
    1ea4:	1c ae       	std	Y+60, r1	; 0x3c
    1ea6:	1d ae       	std	Y+61, r1	; 0x3d
    1ea8:	1e ae       	std	Y+62, r1	; 0x3e
    1eaa:	1f ae       	std	Y+63, r1	; 0x3f
    1eac:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1eae:	45 c0       	rjmp	.+138    	; 0x1f3a <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1eb0:	a5 01       	movw	r20, r10
    1eb2:	94 01       	movw	r18, r8
    1eb4:	61 ee       	ldi	r22, 0xE1	; 225
    1eb6:	7a e7       	ldi	r23, 0x7A	; 122
    1eb8:	8a e3       	ldi	r24, 0x3A	; 58
    1eba:	91 e4       	ldi	r25, 0x41	; 65
    1ebc:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    1ec0:	e5 96       	adiw	r28, 0x35	; 53
    1ec2:	6c af       	std	Y+60, r22	; 0x3c
    1ec4:	7d af       	std	Y+61, r23	; 0x3d
    1ec6:	8e af       	std	Y+62, r24	; 0x3e
    1ec8:	9f af       	std	Y+63, r25	; 0x3f
    1eca:	e5 97       	sbiw	r28, 0x35	; 53
    1ecc:	a5 01       	movw	r20, r10
    1ece:	94 01       	movw	r18, r8
    1ed0:	63 e2       	ldi	r22, 0x23	; 35
    1ed2:	7b ed       	ldi	r23, 0xDB	; 219
    1ed4:	8b e0       	ldi	r24, 0x0B	; 11
    1ed6:	91 ec       	ldi	r25, 0xC1	; 193
    1ed8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    1edc:	e1 96       	adiw	r28, 0x31	; 49
    1ede:	6c af       	std	Y+60, r22	; 0x3c
    1ee0:	7d af       	std	Y+61, r23	; 0x3d
    1ee2:	8e af       	std	Y+62, r24	; 0x3e
    1ee4:	9f af       	std	Y+63, r25	; 0x3f
    1ee6:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1ee8:	86 e6       	ldi	r24, 0x66	; 102
    1eea:	96 e6       	ldi	r25, 0x66	; 102
    1eec:	a6 e7       	ldi	r26, 0x76	; 118
    1eee:	bf eb       	ldi	r27, 0xBF	; 191
    1ef0:	65 96       	adiw	r28, 0x15	; 21
    1ef2:	8c af       	std	Y+60, r24	; 0x3c
    1ef4:	9d af       	std	Y+61, r25	; 0x3d
    1ef6:	ae af       	std	Y+62, r26	; 0x3e
    1ef8:	bf af       	std	Y+63, r27	; 0x3f
    1efa:	65 97       	sbiw	r28, 0x15	; 21
    1efc:	8f e9       	ldi	r24, 0x9F	; 159
    1efe:	9d ec       	ldi	r25, 0xCD	; 205
    1f00:	aa e8       	ldi	r26, 0x8A	; 138
    1f02:	be e3       	ldi	r27, 0x3E	; 62
    1f04:	69 96       	adiw	r28, 0x19	; 25
    1f06:	8c af       	std	Y+60, r24	; 0x3c
    1f08:	9d af       	std	Y+61, r25	; 0x3d
    1f0a:	ae af       	std	Y+62, r26	; 0x3e
    1f0c:	bf af       	std	Y+63, r27	; 0x3f
    1f0e:	69 97       	sbiw	r28, 0x19	; 25
			break;
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    1f12:	a7 96       	adiw	r28, 0x27	; 39
    1f14:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f16:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f18:	a7 97       	sbiw	r28, 0x27	; 39
    1f1a:	12 16       	cp	r1, r18
    1f1c:	13 06       	cpc	r1, r19
    1f1e:	0c f0       	brlt	.+2      	; 0x1f22 <localization+0x66a>
    1f20:	36 c3       	rjmp	.+1644   	; 0x258e <localization+0xcd6>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1f22:	e5 96       	adiw	r28, 0x35	; 53
    1f24:	1c ae       	std	Y+60, r1	; 0x3c
    1f26:	1d ae       	std	Y+61, r1	; 0x3d
    1f28:	1e ae       	std	Y+62, r1	; 0x3e
    1f2a:	1f ae       	std	Y+63, r1	; 0x3f
    1f2c:	e5 97       	sbiw	r28, 0x35	; 53
    1f2e:	e1 96       	adiw	r28, 0x31	; 49
    1f30:	1c ae       	std	Y+60, r1	; 0x3c
    1f32:	1d ae       	std	Y+61, r1	; 0x3d
    1f34:	1e ae       	std	Y+62, r1	; 0x3e
    1f36:	1f ae       	std	Y+63, r1	; 0x3f
    1f38:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    1f3a:	f1 01       	movw	r30, r2
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	8c 0f       	add	r24, r28
    1f46:	9d 1f       	adc	r25, r29
    1f48:	e8 0f       	add	r30, r24
    1f4a:	f9 1f       	adc	r31, r25
    1f4c:	00 ad       	ldd	r16, Z+56	; 0x38
    1f4e:	11 ad       	ldd	r17, Z+57	; 0x39
    1f50:	a3 96       	adiw	r28, 0x23	; 35
    1f52:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f54:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f56:	a3 97       	sbiw	r28, 0x23	; 35
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	e8 0f       	add	r30, r24
    1f5e:	f9 1f       	adc	r31, r25
    1f60:	80 ad       	ldd	r24, Z+56	; 0x38
    1f62:	91 ad       	ldd	r25, Z+57	; 0x39
    1f64:	80 17       	cp	r24, r16
    1f66:	91 07       	cpc	r25, r17
    1f68:	89 f0       	breq	.+34     	; 0x1f8c <localization+0x6d4>
    1f6a:	a3 96       	adiw	r28, 0x23	; 35
    1f6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f70:	a3 97       	sbiw	r28, 0x23	; 35
    1f72:	ee 0f       	add	r30, r30
    1f74:	ff 1f       	adc	r31, r31
    1f76:	a5 e4       	ldi	r26, 0x45	; 69
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	ac 0f       	add	r26, r28
    1f7c:	bd 1f       	adc	r27, r29
    1f7e:	ea 0f       	add	r30, r26
    1f80:	fb 1f       	adc	r31, r27
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	08 17       	cp	r16, r24
    1f88:	19 07       	cpc	r17, r25
    1f8a:	69 f4       	brne	.+26     	; 0x1fa6 <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1f8c:	d1 01       	movw	r26, r2
    1f8e:	aa 0f       	add	r26, r26
    1f90:	bb 1f       	adc	r27, r27
    1f92:	e5 e4       	ldi	r30, 0x45	; 69
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	ec 0f       	add	r30, r28
    1f98:	fd 1f       	adc	r31, r29
    1f9a:	ae 0f       	add	r26, r30
    1f9c:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1f9e:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    1fa0:	0d 91       	ld	r16, X+
    1fa2:	1c 91       	ld	r17, X
    1fa4:	0c c0       	rjmp	.+24     	; 0x1fbe <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    1fa6:	f1 01       	movw	r30, r2
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	25 e4       	ldi	r18, 0x45	; 69
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	2c 0f       	add	r18, r28
    1fb2:	3d 1f       	adc	r19, r29
    1fb4:	e2 0f       	add	r30, r18
    1fb6:	f3 1f       	adc	r31, r19
    1fb8:	01 90       	ld	r0, Z+
    1fba:	f0 81       	ld	r31, Z
    1fbc:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1fbe:	a7 96       	adiw	r28, 0x27	; 39
    1fc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fc4:	a7 97       	sbiw	r28, 0x27	; 39
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <localization+0x714>
    1fca:	45 c0       	rjmp	.+138    	; 0x2056 <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    1fcc:	6f 01       	movw	r12, r30
    1fce:	cc 0c       	add	r12, r12
    1fd0:	dd 1c       	adc	r13, r13
    1fd2:	cc 0c       	add	r12, r12
    1fd4:	dd 1c       	adc	r13, r13
    1fd6:	a1 e0       	ldi	r26, 0x01	; 1
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	ac 0f       	add	r26, r28
    1fdc:	bd 1f       	adc	r27, r29
    1fde:	ca 0e       	add	r12, r26
    1fe0:	db 1e       	adc	r13, r27
    1fe2:	78 01       	movw	r14, r16
    1fe4:	ee 0c       	add	r14, r14
    1fe6:	ff 1c       	adc	r15, r15
    1fe8:	ee 0c       	add	r14, r14
    1fea:	ff 1c       	adc	r15, r15
    1fec:	ea 0e       	add	r14, r26
    1fee:	fb 1e       	adc	r15, r27
    1ff0:	f7 01       	movw	r30, r14
    1ff2:	20 81       	ld	r18, Z
    1ff4:	31 81       	ldd	r19, Z+1	; 0x01
    1ff6:	42 81       	ldd	r20, Z+2	; 0x02
    1ff8:	53 81       	ldd	r21, Z+3	; 0x03
    1ffa:	d6 01       	movw	r26, r12
    1ffc:	6d 91       	ld	r22, X+
    1ffe:	7d 91       	ld	r23, X+
    2000:	8d 91       	ld	r24, X+
    2002:	9c 91       	ld	r25, X
    2004:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    2014:	ad 96       	adiw	r28, 0x2d	; 45
    2016:	6c af       	std	Y+60, r22	; 0x3c
    2018:	7d af       	std	Y+61, r23	; 0x3d
    201a:	8e af       	std	Y+62, r24	; 0x3e
    201c:	9f af       	std	Y+63, r25	; 0x3f
    201e:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    2020:	f7 01       	movw	r30, r14
    2022:	20 89       	ldd	r18, Z+16	; 0x10
    2024:	31 89       	ldd	r19, Z+17	; 0x11
    2026:	42 89       	ldd	r20, Z+18	; 0x12
    2028:	53 89       	ldd	r21, Z+19	; 0x13
    202a:	d6 01       	movw	r26, r12
    202c:	50 96       	adiw	r26, 0x10	; 16
    202e:	6d 91       	ld	r22, X+
    2030:	7d 91       	ld	r23, X+
    2032:	8d 91       	ld	r24, X+
    2034:	9c 91       	ld	r25, X
    2036:	53 97       	sbiw	r26, 0x13	; 19
    2038:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    2048:	a9 96       	adiw	r28, 0x29	; 41
    204a:	6c af       	std	Y+60, r22	; 0x3c
    204c:	7d af       	std	Y+61, r23	; 0x3d
    204e:	8e af       	std	Y+62, r24	; 0x3e
    2050:	9f af       	std	Y+63, r25	; 0x3f
    2052:	a9 97       	sbiw	r28, 0x29	; 41
    2054:	1e c0       	rjmp	.+60     	; 0x2092 <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	21 e0       	ldi	r18, 0x01	; 1
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	2c 0f       	add	r18, r28
    2064:	3d 1f       	adc	r19, r29
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	a2 81       	ldd	r26, Z+2	; 0x02
    2070:	b3 81       	ldd	r27, Z+3	; 0x03
    2072:	ad 96       	adiw	r28, 0x2d	; 45
    2074:	8c af       	std	Y+60, r24	; 0x3c
    2076:	9d af       	std	Y+61, r25	; 0x3d
    2078:	ae af       	std	Y+62, r26	; 0x3e
    207a:	bf af       	std	Y+63, r27	; 0x3f
    207c:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    207e:	80 89       	ldd	r24, Z+16	; 0x10
    2080:	91 89       	ldd	r25, Z+17	; 0x11
    2082:	a2 89       	ldd	r26, Z+18	; 0x12
    2084:	b3 89       	ldd	r27, Z+19	; 0x13
    2086:	a9 96       	adiw	r28, 0x29	; 41
    2088:	8c af       	std	Y+60, r24	; 0x3c
    208a:	9d af       	std	Y+61, r25	; 0x3d
    208c:	ae af       	std	Y+62, r26	; 0x3e
    208e:	bf af       	std	Y+63, r27	; 0x3f
    2090:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    2092:	00 0f       	add	r16, r16
    2094:	11 1f       	adc	r17, r17
    2096:	00 0f       	add	r16, r16
    2098:	11 1f       	adc	r17, r17
    209a:	a1 e0       	ldi	r26, 0x01	; 1
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ac 0f       	add	r26, r28
    20a0:	bd 1f       	adc	r27, r29
    20a2:	0a 0f       	add	r16, r26
    20a4:	1b 1f       	adc	r17, r27
    20a6:	ad 96       	adiw	r28, 0x2d	; 45
    20a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    20aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    20ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    20ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    20b0:	ad 97       	sbiw	r28, 0x2d	; 45
    20b2:	f8 01       	movw	r30, r16
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    20c0:	4b 01       	movw	r8, r22
    20c2:	5c 01       	movw	r10, r24
    20c4:	a9 96       	adiw	r28, 0x29	; 41
    20c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    20c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    20ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    20cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    20ce:	a9 97       	sbiw	r28, 0x29	; 41
    20d0:	d8 01       	movw	r26, r16
    20d2:	50 96       	adiw	r26, 0x10	; 16
    20d4:	6d 91       	ld	r22, X+
    20d6:	7d 91       	ld	r23, X+
    20d8:	8d 91       	ld	r24, X+
    20da:	9c 91       	ld	r25, X
    20dc:	53 97       	sbiw	r26, 0x13	; 19
    20de:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    20e2:	6b 01       	movw	r12, r22
    20e4:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    20e6:	a5 01       	movw	r20, r10
    20e8:	94 01       	movw	r18, r8
    20ea:	c5 01       	movw	r24, r10
    20ec:	b4 01       	movw	r22, r8
    20ee:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    20f2:	2b 01       	movw	r4, r22
    20f4:	3c 01       	movw	r6, r24
    20f6:	a7 01       	movw	r20, r14
    20f8:	96 01       	movw	r18, r12
    20fa:	c7 01       	movw	r24, r14
    20fc:	b6 01       	movw	r22, r12
    20fe:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	c3 01       	movw	r24, r6
    2108:	b2 01       	movw	r22, r4
    210a:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    210e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <sqrt>
    2112:	2b 01       	movw	r4, r22
    2114:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    2116:	9b 01       	movw	r18, r22
    2118:	ac 01       	movw	r20, r24
    211a:	c5 01       	movw	r24, r10
    211c:	b4 01       	movw	r22, r8
    211e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    2122:	4b 01       	movw	r8, r22
    2124:	5c 01       	movw	r10, r24
    2126:	6d 96       	adiw	r28, 0x1d	; 29
    2128:	6c af       	std	Y+60, r22	; 0x3c
    212a:	7d af       	std	Y+61, r23	; 0x3d
    212c:	8e af       	std	Y+62, r24	; 0x3e
    212e:	9f af       	std	Y+63, r25	; 0x3f
    2130:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    2132:	a3 01       	movw	r20, r6
    2134:	92 01       	movw	r18, r4
    2136:	c7 01       	movw	r24, r14
    2138:	b6 01       	movw	r22, r12
    213a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    213e:	6b 01       	movw	r12, r22
    2140:	7c 01       	movw	r14, r24
    2142:	a1 96       	adiw	r28, 0x21	; 33
    2144:	6c af       	std	Y+60, r22	; 0x3c
    2146:	7d af       	std	Y+61, r23	; 0x3d
    2148:	8e af       	std	Y+62, r24	; 0x3e
    214a:	9f af       	std	Y+63, r25	; 0x3f
    214c:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    214e:	65 96       	adiw	r28, 0x15	; 21
    2150:	2c ad       	ldd	r18, Y+60	; 0x3c
    2152:	3d ad       	ldd	r19, Y+61	; 0x3d
    2154:	4e ad       	ldd	r20, Y+62	; 0x3e
    2156:	5f ad       	ldd	r21, Y+63	; 0x3f
    2158:	65 97       	sbiw	r28, 0x15	; 21
    215a:	c5 01       	movw	r24, r10
    215c:	b4 01       	movw	r22, r8
    215e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    2162:	4b 01       	movw	r8, r22
    2164:	5c 01       	movw	r10, r24
    2166:	69 96       	adiw	r28, 0x19	; 25
    2168:	2c ad       	ldd	r18, Y+60	; 0x3c
    216a:	3d ad       	ldd	r19, Y+61	; 0x3d
    216c:	4e ad       	ldd	r20, Y+62	; 0x3e
    216e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2170:	69 97       	sbiw	r28, 0x19	; 25
    2172:	c7 01       	movw	r24, r14
    2174:	b6 01       	movw	r22, r12
    2176:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    217a:	9b 01       	movw	r18, r22
    217c:	ac 01       	movw	r20, r24
    217e:	c5 01       	movw	r24, r10
    2180:	b4 01       	movw	r22, r8
    2182:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    2186:	2b 01       	movw	r4, r22
    2188:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    218a:	9b 01       	movw	r18, r22
    218c:	ac 01       	movw	r20, r24
    218e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    2192:	9b 01       	movw	r18, r22
    2194:	ac 01       	movw	r20, r24
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	80 e8       	ldi	r24, 0x80	; 128
    219c:	9f e3       	ldi	r25, 0x3F	; 63
    219e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    21a2:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <sqrt>
    21a6:	a5 96       	adiw	r28, 0x25	; 37
    21a8:	6c af       	std	Y+60, r22	; 0x3c
    21aa:	7d af       	std	Y+61, r23	; 0x3d
    21ac:	8e af       	std	Y+62, r24	; 0x3e
    21ae:	9f af       	std	Y+63, r25	; 0x3f
    21b0:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    21b2:	fe 01       	movw	r30, r28
    21b4:	ef 5a       	subi	r30, 0xAF	; 175
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	7f 01       	movw	r14, r30
    21ba:	8e 01       	movw	r16, r28
    21bc:	07 5a       	subi	r16, 0xA7	; 167
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	9b 01       	movw	r18, r22
    21c2:	ac 01       	movw	r20, r24
    21c4:	c3 01       	movw	r24, r6
    21c6:	b2 01       	movw	r22, r4
    21c8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <find_sign>
    21cc:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	91 05       	cpc	r25, r1
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <localization+0x91e>
    21d4:	a1 c0       	rjmp	.+322    	; 0x2318 <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    21d6:	0f 2e       	mov	r0, r31
    21d8:	fe e1       	ldi	r31, 0x1E	; 30
    21da:	af 2e       	mov	r10, r31
    21dc:	f1 e0       	ldi	r31, 0x01	; 1
    21de:	bf 2e       	mov	r11, r31
    21e0:	f0 2d       	mov	r31, r0
    21e2:	d5 01       	movw	r26, r10
    21e4:	2d 91       	ld	r18, X+
    21e6:	3d 91       	ld	r19, X+
    21e8:	4d 91       	ld	r20, X+
    21ea:	5c 91       	ld	r21, X
    21ec:	ad 96       	adiw	r28, 0x2d	; 45
    21ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    21f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    21f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    21f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f6:	ad 97       	sbiw	r28, 0x2d	; 45
    21f8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    21fc:	a3 01       	movw	r20, r6
    21fe:	92 01       	movw	r18, r4
    2200:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    2204:	9b 01       	movw	r18, r22
    2206:	ac 01       	movw	r20, r24
    2208:	e5 96       	adiw	r28, 0x35	; 53
    220a:	6c ad       	ldd	r22, Y+60	; 0x3c
    220c:	7d ad       	ldd	r23, Y+61	; 0x3d
    220e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2210:	9f ad       	ldd	r25, Y+63	; 0x3f
    2212:	e5 97       	sbiw	r28, 0x35	; 53
    2214:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    2218:	6b 01       	movw	r12, r22
    221a:	7c 01       	movw	r14, r24
    221c:	02 e2       	ldi	r16, 0x22	; 34
    221e:	11 e0       	ldi	r17, 0x01	; 1
    2220:	f8 01       	movw	r30, r16
    2222:	20 81       	ld	r18, Z
    2224:	31 81       	ldd	r19, Z+1	; 0x01
    2226:	42 81       	ldd	r20, Z+2	; 0x02
    2228:	53 81       	ldd	r21, Z+3	; 0x03
    222a:	a9 96       	adiw	r28, 0x29	; 41
    222c:	6c ad       	ldd	r22, Y+60	; 0x3c
    222e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2230:	8e ad       	ldd	r24, Y+62	; 0x3e
    2232:	9f ad       	ldd	r25, Y+63	; 0x3f
    2234:	a9 97       	sbiw	r28, 0x29	; 41
    2236:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    223a:	a5 96       	adiw	r28, 0x25	; 37
    223c:	2c ad       	ldd	r18, Y+60	; 0x3c
    223e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2240:	4e ad       	ldd	r20, Y+62	; 0x3e
    2242:	5f ad       	ldd	r21, Y+63	; 0x3f
    2244:	a5 97       	sbiw	r28, 0x25	; 37
    2246:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
    224e:	c7 01       	movw	r24, r14
    2250:	b6 01       	movw	r22, r12
    2252:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    2256:	ed 96       	adiw	r28, 0x3d	; 61
    2258:	ae ad       	ldd	r26, Y+62	; 0x3e
    225a:	bf ad       	ldd	r27, Y+63	; 0x3f
    225c:	ed 97       	sbiw	r28, 0x3d	; 61
    225e:	6d 93       	st	X+, r22
    2260:	7d 93       	st	X+, r23
    2262:	8d 93       	st	X+, r24
    2264:	9c 93       	st	X, r25
    2266:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    2268:	f8 01       	movw	r30, r16
    226a:	20 81       	ld	r18, Z
    226c:	31 81       	ldd	r19, Z+1	; 0x01
    226e:	42 81       	ldd	r20, Z+2	; 0x02
    2270:	53 81       	ldd	r21, Z+3	; 0x03
    2272:	a9 96       	adiw	r28, 0x29	; 41
    2274:	6c ad       	ldd	r22, Y+60	; 0x3c
    2276:	7d ad       	ldd	r23, Y+61	; 0x3d
    2278:	8e ad       	ldd	r24, Y+62	; 0x3e
    227a:	9f ad       	ldd	r25, Y+63	; 0x3f
    227c:	a9 97       	sbiw	r28, 0x29	; 41
    227e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    2282:	a3 01       	movw	r20, r6
    2284:	92 01       	movw	r18, r4
    2286:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    228a:	9b 01       	movw	r18, r22
    228c:	ac 01       	movw	r20, r24
    228e:	e1 96       	adiw	r28, 0x31	; 49
    2290:	6c ad       	ldd	r22, Y+60	; 0x3c
    2292:	7d ad       	ldd	r23, Y+61	; 0x3d
    2294:	8e ad       	ldd	r24, Y+62	; 0x3e
    2296:	9f ad       	ldd	r25, Y+63	; 0x3f
    2298:	e1 97       	sbiw	r28, 0x31	; 49
    229a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    229e:	6b 01       	movw	r12, r22
    22a0:	7c 01       	movw	r14, r24
    22a2:	d5 01       	movw	r26, r10
    22a4:	2d 91       	ld	r18, X+
    22a6:	3d 91       	ld	r19, X+
    22a8:	4d 91       	ld	r20, X+
    22aa:	5c 91       	ld	r21, X
    22ac:	ad 96       	adiw	r28, 0x2d	; 45
    22ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    22b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    22b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    22b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    22b6:	ad 97       	sbiw	r28, 0x2d	; 45
    22b8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    22bc:	a5 96       	adiw	r28, 0x25	; 37
    22be:	2c ad       	ldd	r18, Y+60	; 0x3c
    22c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    22c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    22c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    22c6:	a5 97       	sbiw	r28, 0x25	; 37
    22c8:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    22cc:	9b 01       	movw	r18, r22
    22ce:	ac 01       	movw	r20, r24
    22d0:	c7 01       	movw	r24, r14
    22d2:	b6 01       	movw	r22, r12
    22d4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    22d8:	ed 96       	adiw	r28, 0x3d	; 61
    22da:	ee ad       	ldd	r30, Y+62	; 0x3e
    22dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    22de:	ed 97       	sbiw	r28, 0x3d	; 61
    22e0:	64 83       	std	Z+4, r22	; 0x04
    22e2:	75 83       	std	Z+5, r23	; 0x05
    22e4:	86 83       	std	Z+6, r24	; 0x06
    22e6:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    22e8:	ef 96       	adiw	r28, 0x3f	; 63
    22ea:	ae ad       	ldd	r26, Y+62	; 0x3e
    22ec:	bf ad       	ldd	r27, Y+63	; 0x3f
    22ee:	ef 97       	sbiw	r28, 0x3f	; 63
    22f0:	4d 92       	st	X+, r4
    22f2:	5d 92       	st	X+, r5
    22f4:	6d 92       	st	X+, r6
    22f6:	7c 92       	st	X, r7
    22f8:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    22fa:	a5 96       	adiw	r28, 0x25	; 37
    22fc:	8c ad       	ldd	r24, Y+60	; 0x3c
    22fe:	9d ad       	ldd	r25, Y+61	; 0x3d
    2300:	ae ad       	ldd	r26, Y+62	; 0x3e
    2302:	bf ad       	ldd	r27, Y+63	; 0x3f
    2304:	a5 97       	sbiw	r28, 0x25	; 37
    2306:	ef 96       	adiw	r28, 0x3f	; 63
    2308:	ee ad       	ldd	r30, Y+62	; 0x3e
    230a:	ff ad       	ldd	r31, Y+63	; 0x3f
    230c:	ef 97       	sbiw	r28, 0x3f	; 63
    230e:	84 83       	std	Z+4, r24	; 0x04
    2310:	95 83       	std	Z+5, r25	; 0x05
    2312:	a6 83       	std	Z+6, r26	; 0x06
    2314:	b7 83       	std	Z+7, r27	; 0x07
    2316:	a1 c0       	rjmp	.+322    	; 0x245a <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    2318:	0f 2e       	mov	r0, r31
    231a:	fe e1       	ldi	r31, 0x1E	; 30
    231c:	af 2e       	mov	r10, r31
    231e:	f1 e0       	ldi	r31, 0x01	; 1
    2320:	bf 2e       	mov	r11, r31
    2322:	f0 2d       	mov	r31, r0
    2324:	d5 01       	movw	r26, r10
    2326:	2d 91       	ld	r18, X+
    2328:	3d 91       	ld	r19, X+
    232a:	4d 91       	ld	r20, X+
    232c:	5c 91       	ld	r21, X
    232e:	ad 96       	adiw	r28, 0x2d	; 45
    2330:	6c ad       	ldd	r22, Y+60	; 0x3c
    2332:	7d ad       	ldd	r23, Y+61	; 0x3d
    2334:	8e ad       	ldd	r24, Y+62	; 0x3e
    2336:	9f ad       	ldd	r25, Y+63	; 0x3f
    2338:	ad 97       	sbiw	r28, 0x2d	; 45
    233a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    233e:	a3 01       	movw	r20, r6
    2340:	92 01       	movw	r18, r4
    2342:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	e5 96       	adiw	r28, 0x35	; 53
    234c:	6c ad       	ldd	r22, Y+60	; 0x3c
    234e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2350:	8e ad       	ldd	r24, Y+62	; 0x3e
    2352:	9f ad       	ldd	r25, Y+63	; 0x3f
    2354:	e5 97       	sbiw	r28, 0x35	; 53
    2356:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    235a:	6b 01       	movw	r12, r22
    235c:	7c 01       	movw	r14, r24
    235e:	02 e2       	ldi	r16, 0x22	; 34
    2360:	11 e0       	ldi	r17, 0x01	; 1
    2362:	f8 01       	movw	r30, r16
    2364:	20 81       	ld	r18, Z
    2366:	31 81       	ldd	r19, Z+1	; 0x01
    2368:	42 81       	ldd	r20, Z+2	; 0x02
    236a:	53 81       	ldd	r21, Z+3	; 0x03
    236c:	a9 96       	adiw	r28, 0x29	; 41
    236e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2370:	7d ad       	ldd	r23, Y+61	; 0x3d
    2372:	8e ad       	ldd	r24, Y+62	; 0x3e
    2374:	9f ad       	ldd	r25, Y+63	; 0x3f
    2376:	a9 97       	sbiw	r28, 0x29	; 41
    2378:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    237c:	a5 96       	adiw	r28, 0x25	; 37
    237e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2380:	3d ad       	ldd	r19, Y+61	; 0x3d
    2382:	4e ad       	ldd	r20, Y+62	; 0x3e
    2384:	5f ad       	ldd	r21, Y+63	; 0x3f
    2386:	a5 97       	sbiw	r28, 0x25	; 37
    2388:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    238c:	9b 01       	movw	r18, r22
    238e:	ac 01       	movw	r20, r24
    2390:	c7 01       	movw	r24, r14
    2392:	b6 01       	movw	r22, r12
    2394:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    2398:	ed 96       	adiw	r28, 0x3d	; 61
    239a:	ae ad       	ldd	r26, Y+62	; 0x3e
    239c:	bf ad       	ldd	r27, Y+63	; 0x3f
    239e:	ed 97       	sbiw	r28, 0x3d	; 61
    23a0:	6d 93       	st	X+, r22
    23a2:	7d 93       	st	X+, r23
    23a4:	8d 93       	st	X+, r24
    23a6:	9c 93       	st	X, r25
    23a8:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    23aa:	f8 01       	movw	r30, r16
    23ac:	20 81       	ld	r18, Z
    23ae:	31 81       	ldd	r19, Z+1	; 0x01
    23b0:	42 81       	ldd	r20, Z+2	; 0x02
    23b2:	53 81       	ldd	r21, Z+3	; 0x03
    23b4:	a9 96       	adiw	r28, 0x29	; 41
    23b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    23b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    23ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    23bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    23be:	a9 97       	sbiw	r28, 0x29	; 41
    23c0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    23c4:	a3 01       	movw	r20, r6
    23c6:	92 01       	movw	r18, r4
    23c8:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    23cc:	9b 01       	movw	r18, r22
    23ce:	ac 01       	movw	r20, r24
    23d0:	e1 96       	adiw	r28, 0x31	; 49
    23d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    23d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    23d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    23d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    23da:	e1 97       	sbiw	r28, 0x31	; 49
    23dc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    23e0:	6b 01       	movw	r12, r22
    23e2:	7c 01       	movw	r14, r24
    23e4:	d5 01       	movw	r26, r10
    23e6:	2d 91       	ld	r18, X+
    23e8:	3d 91       	ld	r19, X+
    23ea:	4d 91       	ld	r20, X+
    23ec:	5c 91       	ld	r21, X
    23ee:	ad 96       	adiw	r28, 0x2d	; 45
    23f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    23f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    23f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    23f8:	ad 97       	sbiw	r28, 0x2d	; 45
    23fa:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__subsf3>
    23fe:	a5 96       	adiw	r28, 0x25	; 37
    2400:	2c ad       	ldd	r18, Y+60	; 0x3c
    2402:	3d ad       	ldd	r19, Y+61	; 0x3d
    2404:	4e ad       	ldd	r20, Y+62	; 0x3e
    2406:	5f ad       	ldd	r21, Y+63	; 0x3f
    2408:	a5 97       	sbiw	r28, 0x25	; 37
    240a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    240e:	9b 01       	movw	r18, r22
    2410:	ac 01       	movw	r20, r24
    2412:	c7 01       	movw	r24, r14
    2414:	b6 01       	movw	r22, r12
    2416:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__addsf3>
    241a:	ed 96       	adiw	r28, 0x3d	; 61
    241c:	ee ad       	ldd	r30, Y+62	; 0x3e
    241e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2420:	ed 97       	sbiw	r28, 0x3d	; 61
    2422:	64 83       	std	Z+4, r22	; 0x04
    2424:	75 83       	std	Z+5, r23	; 0x05
    2426:	86 83       	std	Z+6, r24	; 0x06
    2428:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    242a:	ef 96       	adiw	r28, 0x3f	; 63
    242c:	ae ad       	ldd	r26, Y+62	; 0x3e
    242e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2430:	ef 97       	sbiw	r28, 0x3f	; 63
    2432:	4d 92       	st	X+, r4
    2434:	5d 92       	st	X+, r5
    2436:	6d 92       	st	X+, r6
    2438:	7c 92       	st	X, r7
    243a:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    243c:	a5 96       	adiw	r28, 0x25	; 37
    243e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2440:	9d ad       	ldd	r25, Y+61	; 0x3d
    2442:	ae ad       	ldd	r26, Y+62	; 0x3e
    2444:	bf ad       	ldd	r27, Y+63	; 0x3f
    2446:	a5 97       	sbiw	r28, 0x25	; 37
    2448:	b0 58       	subi	r27, 0x80	; 128
    244a:	ef 96       	adiw	r28, 0x3f	; 63
    244c:	ee ad       	ldd	r30, Y+62	; 0x3e
    244e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2450:	ef 97       	sbiw	r28, 0x3f	; 63
    2452:	84 83       	std	Z+4, r24	; 0x04
    2454:	95 83       	std	Z+5, r25	; 0x05
    2456:	a6 83       	std	Z+6, r26	; 0x06
    2458:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    245a:	ed 96       	adiw	r28, 0x3d	; 61
    245c:	ee ad       	ldd	r30, Y+62	; 0x3e
    245e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2460:	ed 97       	sbiw	r28, 0x3d	; 61
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	a2 81       	ldd	r26, Z+2	; 0x02
    2468:	b3 81       	ldd	r27, Z+3	; 0x03
    246a:	80 93 70 01 	sts	0x0170, r24
    246e:	90 93 71 01 	sts	0x0171, r25
    2472:	a0 93 72 01 	sts	0x0172, r26
    2476:	b0 93 73 01 	sts	0x0173, r27
		c_wii_last[1] = c_wii[1];
    247a:	84 81       	ldd	r24, Z+4	; 0x04
    247c:	95 81       	ldd	r25, Z+5	; 0x05
    247e:	a6 81       	ldd	r26, Z+6	; 0x06
    2480:	b7 81       	ldd	r27, Z+7	; 0x07
    2482:	80 93 74 01 	sts	0x0174, r24
    2486:	90 93 75 01 	sts	0x0175, r25
    248a:	a0 93 76 01 	sts	0x0176, r26
    248e:	b0 93 77 01 	sts	0x0177, r27
		dir_last[0] = dir[0];
    2492:	ef 96       	adiw	r28, 0x3f	; 63
    2494:	ee ad       	ldd	r30, Y+62	; 0x3e
    2496:	ff ad       	ldd	r31, Y+63	; 0x3f
    2498:	ef 97       	sbiw	r28, 0x3f	; 63
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	a2 81       	ldd	r26, Z+2	; 0x02
    24a0:	b3 81       	ldd	r27, Z+3	; 0x03
    24a2:	80 93 68 01 	sts	0x0168, r24
    24a6:	90 93 69 01 	sts	0x0169, r25
    24aa:	a0 93 6a 01 	sts	0x016A, r26
    24ae:	b0 93 6b 01 	sts	0x016B, r27
		dir_last[1] = dir[1];
    24b2:	84 81       	ldd	r24, Z+4	; 0x04
    24b4:	95 81       	ldd	r25, Z+5	; 0x05
    24b6:	a6 81       	ldd	r26, Z+6	; 0x06
    24b8:	b7 81       	ldd	r27, Z+7	; 0x07
    24ba:	80 93 6c 01 	sts	0x016C, r24
    24be:	90 93 6d 01 	sts	0x016D, r25
    24c2:	a0 93 6e 01 	sts	0x016E, r26
    24c6:	b0 93 6f 01 	sts	0x016F, r27
		
		if (state == 3 || state == 4){
    24ca:	cd 57       	subi	r28, 0x7D	; 125
    24cc:	df 4f       	sbci	r29, 0xFF	; 255
    24ce:	88 81       	ld	r24, Y
    24d0:	99 81       	ldd	r25, Y+1	; 0x01
    24d2:	c3 58       	subi	r28, 0x83	; 131
    24d4:	d0 40       	sbci	r29, 0x00	; 0
    24d6:	03 97       	sbiw	r24, 0x03	; 3
    24d8:	02 97       	sbiw	r24, 0x02	; 2
    24da:	08 f0       	brcs	.+2      	; 0x24de <localization+0xc26>
    24dc:	90 c0       	rjmp	.+288    	; 0x25fe <localization+0xd46>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    24de:	ed 96       	adiw	r28, 0x3d	; 61
    24e0:	ae ad       	ldd	r26, Y+62	; 0x3e
    24e2:	bf ad       	ldd	r27, Y+63	; 0x3f
    24e4:	ed 97       	sbiw	r28, 0x3d	; 61
    24e6:	14 96       	adiw	r26, 0x04	; 4
    24e8:	2d 91       	ld	r18, X+
    24ea:	3d 91       	ld	r19, X+
    24ec:	4d 91       	ld	r20, X+
    24ee:	5c 91       	ld	r21, X
    24f0:	17 97       	sbiw	r26, 0x07	; 7
    24f2:	6d 91       	ld	r22, X+
    24f4:	7d 91       	ld	r23, X+
    24f6:	8d 91       	ld	r24, X+
    24f8:	9c 91       	ld	r25, X
    24fa:	cb 57       	subi	r28, 0x7B	; 123
    24fc:	df 4f       	sbci	r29, 0xFF	; 255
    24fe:	08 81       	ld	r16, Y
    2500:	19 81       	ldd	r17, Y+1	; 0x01
    2502:	c5 58       	subi	r28, 0x85	; 133
    2504:	d0 40       	sbci	r29, 0x00	; 0
    2506:	0e 94 27 0c 	call	0x184e	; 0x184e <find_if_reach>
			if (!if_reach){
    250a:	89 2b       	or	r24, r25
    250c:	b9 f5       	brne	.+110    	; 0x257c <localization+0xcc4>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    250e:	ef 96       	adiw	r28, 0x3f	; 63
    2510:	ae ac       	ldd	r10, Y+62	; 0x3e
    2512:	bf ac       	ldd	r11, Y+63	; 0x3f
    2514:	ef 97       	sbiw	r28, 0x3f	; 63
    2516:	ed 96       	adiw	r28, 0x3d	; 61
    2518:	ce ac       	ldd	r12, Y+62	; 0x3e
    251a:	df ac       	ldd	r13, Y+63	; 0x3f
    251c:	ed 97       	sbiw	r28, 0x3d	; 61
    251e:	cb 57       	subi	r28, 0x7B	; 123
    2520:	df 4f       	sbci	r29, 0xFF	; 255
    2522:	e8 80       	ld	r14, Y
    2524:	f9 80       	ldd	r15, Y+1	; 0x01
    2526:	c5 58       	subi	r28, 0x85	; 133
    2528:	d0 40       	sbci	r29, 0x00	; 0
    252a:	93 01       	movw	r18, r6
    252c:	82 01       	movw	r16, r4
    252e:	a5 96       	adiw	r28, 0x25	; 37
    2530:	4c ad       	ldd	r20, Y+60	; 0x3c
    2532:	5d ad       	ldd	r21, Y+61	; 0x3d
    2534:	6e ad       	ldd	r22, Y+62	; 0x3e
    2536:	7f ad       	ldd	r23, Y+63	; 0x3f
    2538:	a5 97       	sbiw	r28, 0x25	; 37
    253a:	c4 01       	movw	r24, r8
    253c:	0e 94 a3 08 	call	0x1146	; 0x1146 <cal_angle>
				if (state == 3){
    2540:	cd 57       	subi	r28, 0x7D	; 125
    2542:	df 4f       	sbci	r29, 0xFF	; 255
    2544:	e8 81       	ld	r30, Y
    2546:	f9 81       	ldd	r31, Y+1	; 0x01
    2548:	c3 58       	subi	r28, 0x83	; 131
    254a:	d0 40       	sbci	r29, 0x00	; 0
    254c:	33 97       	sbiw	r30, 0x03	; 3
    254e:	59 f4       	brne	.+22     	; 0x2566 <localization+0xcae>
					PID_alpha(Kp_loc, Kd_loc);
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	48 ec       	ldi	r20, 0xC8	; 200
    2556:	53 e4       	ldi	r21, 0x43	; 67
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	80 e7       	ldi	r24, 0x70	; 112
    255e:	92 e4       	ldi	r25, 0x42	; 66
    2560:	0e 94 af 09 	call	0x135e	; 0x135e <PID_alpha>
    2564:	4c c0       	rjmp	.+152    	; 0x25fe <localization+0xd46>
				}
				else{
					PID_p2p(Kp_p2p, Kd_p2p);
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	48 ec       	ldi	r20, 0xC8	; 200
    256c:	53 e4       	ldi	r21, 0x43	; 67
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	8a ef       	ldi	r24, 0xFA	; 250
    2574:	93 e4       	ldi	r25, 0x43	; 67
    2576:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <PID_p2p>
    257a:	41 c0       	rjmp	.+130    	; 0x25fe <localization+0xd46>
				}
			}
			else{ // reach goal, stop
				OCR1B = 0;
    257c:	10 92 8b 00 	sts	0x008B, r1
    2580:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    2584:	10 92 8d 00 	sts	0x008D, r1
    2588:	10 92 8c 00 	sts	0x008C, r1
    258c:	38 c0       	rjmp	.+112    	; 0x25fe <localization+0xd46>
			}
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    258e:	80 91 70 01 	lds	r24, 0x0170
    2592:	90 91 71 01 	lds	r25, 0x0171
    2596:	a0 91 72 01 	lds	r26, 0x0172
    259a:	b0 91 73 01 	lds	r27, 0x0173
    259e:	ed 96       	adiw	r28, 0x3d	; 61
    25a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    25a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    25a4:	ed 97       	sbiw	r28, 0x3d	; 61
    25a6:	80 83       	st	Z, r24
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	a2 83       	std	Z+2, r26	; 0x02
    25ac:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    25ae:	80 91 74 01 	lds	r24, 0x0174
    25b2:	90 91 75 01 	lds	r25, 0x0175
    25b6:	a0 91 76 01 	lds	r26, 0x0176
    25ba:	b0 91 77 01 	lds	r27, 0x0177
    25be:	84 83       	std	Z+4, r24	; 0x04
    25c0:	95 83       	std	Z+5, r25	; 0x05
    25c2:	a6 83       	std	Z+6, r26	; 0x06
    25c4:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    25c6:	80 91 68 01 	lds	r24, 0x0168
    25ca:	90 91 69 01 	lds	r25, 0x0169
    25ce:	a0 91 6a 01 	lds	r26, 0x016A
    25d2:	b0 91 6b 01 	lds	r27, 0x016B
    25d6:	ef 96       	adiw	r28, 0x3f	; 63
    25d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    25da:	ff ad       	ldd	r31, Y+63	; 0x3f
    25dc:	ef 97       	sbiw	r28, 0x3f	; 63
    25de:	80 83       	st	Z, r24
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	a2 83       	std	Z+2, r26	; 0x02
    25e4:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    25e6:	80 91 6c 01 	lds	r24, 0x016C
    25ea:	90 91 6d 01 	lds	r25, 0x016D
    25ee:	a0 91 6e 01 	lds	r26, 0x016E
    25f2:	b0 91 6f 01 	lds	r27, 0x016F
    25f6:	84 83       	std	Z+4, r24	; 0x04
    25f8:	95 83       	std	Z+5, r25	; 0x05
    25fa:	a6 83       	std	Z+6, r26	; 0x06
    25fc:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    25fe:	8a e8       	ldi	r24, 0x8A	; 138
    2600:	92 e0       	ldi	r25, 0x02	; 2
    2602:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(c_wii[0]);
    2606:	ed 96       	adiw	r28, 0x3d	; 61
    2608:	ae ad       	ldd	r26, Y+62	; 0x3e
    260a:	bf ad       	ldd	r27, Y+63	; 0x3f
    260c:	ed 97       	sbiw	r28, 0x3d	; 61
    260e:	6d 91       	ld	r22, X+
    2610:	7d 91       	ld	r23, X+
    2612:	8d 91       	ld	r24, X+
    2614:	9c 91       	ld	r25, X
    2616:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    261a:	cb 01       	movw	r24, r22
    261c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    2620:	85 e8       	ldi	r24, 0x85	; 133
    2622:	92 e0       	ldi	r25, 0x02	; 2
    2624:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(c_wii[1]);
    2628:	ed 96       	adiw	r28, 0x3d	; 61
    262a:	ee ad       	ldd	r30, Y+62	; 0x3e
    262c:	ff ad       	ldd	r31, Y+63	; 0x3f
    262e:	ed 97       	sbiw	r28, 0x3d	; 61
    2630:	64 81       	ldd	r22, Z+4	; 0x04
    2632:	75 81       	ldd	r23, Z+5	; 0x05
    2634:	86 81       	ldd	r24, Z+6	; 0x06
    2636:	97 81       	ldd	r25, Z+7	; 0x07
    2638:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    263c:	cb 01       	movw	r24, r22
    263e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2642:	83 e8       	ldi	r24, 0x83	; 131
    2644:	92 e0       	ldi	r25, 0x02	; 2
    2646:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    264a:	82 e7       	ldi	r24, 0x72	; 114
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(dir[0]*1000);
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a e7       	ldi	r20, 0x7A	; 122
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	ef 96       	adiw	r28, 0x3f	; 63
    265c:	ae ad       	ldd	r26, Y+62	; 0x3e
    265e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2660:	ef 97       	sbiw	r28, 0x3f	; 63
    2662:	6d 91       	ld	r22, X+
    2664:	7d 91       	ld	r23, X+
    2666:	8d 91       	ld	r24, X+
    2668:	9c 91       	ld	r25, X
    266a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    266e:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    2672:	cb 01       	movw	r24, r22
    2674:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2678:	8a e6       	ldi	r24, 0x6A	; 106
    267a:	92 e0       	ldi	r25, 0x02	; 2
    267c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
	m_usb_tx_int(dir[1]*1000);
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	54 e4       	ldi	r21, 0x44	; 68
    2688:	ef 96       	adiw	r28, 0x3f	; 63
    268a:	ee ad       	ldd	r30, Y+62	; 0x3e
    268c:	ff ad       	ldd	r31, Y+63	; 0x3f
    268e:	ef 97       	sbiw	r28, 0x3f	; 63
    2690:	64 81       	ldd	r22, Z+4	; 0x04
    2692:	75 81       	ldd	r23, Z+5	; 0x05
    2694:	86 81       	ldd	r24, Z+6	; 0x06
    2696:	97 81       	ldd	r25, Z+7	; 0x07
    2698:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__mulsf3>
    269c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    26a0:	cb 01       	movw	r24, r22
    26a2:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    26a6:	88 e6       	ldi	r24, 0x68	; 104
    26a8:	92 e0       	ldi	r25, 0x02	; 2
    26aa:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <localization+0xe20>
    26b0:	eb 96       	adiw	r28, 0x3b	; 59
    26b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    26b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    26b6:	eb 97       	sbiw	r28, 0x3b	; 59
    26b8:	2c 5f       	subi	r18, 0xFC	; 252
    26ba:	3f 4f       	sbci	r19, 0xFF	; 255
    26bc:	eb 96       	adiw	r28, 0x3b	; 59
    26be:	3f af       	std	Y+63, r19	; 0x3f
    26c0:	2e af       	std	Y+62, r18	; 0x3e
    26c2:	eb 97       	sbiw	r28, 0x3b	; 59
    26c4:	e3 96       	adiw	r28, 0x33	; 51
    26c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    26c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    26ca:	e3 97       	sbiw	r28, 0x33	; 51
    26cc:	04 96       	adiw	r24, 0x04	; 4
    26ce:	e3 96       	adiw	r28, 0x33	; 51
    26d0:	9f af       	std	Y+63, r25	; 0x3f
    26d2:	8e af       	std	Y+62, r24	; 0x3e
    26d4:	e3 97       	sbiw	r28, 0x33	; 51
    26d6:	b9 ca       	rjmp	.-2702   	; 0x1c4a <localization+0x392>
}
    26d8:	ca 57       	subi	r28, 0x7A	; 122
    26da:	df 4f       	sbci	r29, 0xFF	; 255
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	ff 90       	pop	r15
    26f0:	ef 90       	pop	r14
    26f2:	df 90       	pop	r13
    26f4:	cf 90       	pop	r12
    26f6:	bf 90       	pop	r11
    26f8:	af 90       	pop	r10
    26fa:	9f 90       	pop	r9
    26fc:	8f 90       	pop	r8
    26fe:	7f 90       	pop	r7
    2700:	6f 90       	pop	r6
    2702:	5f 90       	pop	r5
    2704:	4f 90       	pop	r4
    2706:	3f 90       	pop	r3
    2708:	2f 90       	pop	r2
    270a:	08 95       	ret

0000270c <m_bus_init>:
    270c:	58 9a       	sbi	0x0b, 0	; 11
    270e:	59 9a       	sbi	0x0b, 1	; 11
    2710:	5a 9a       	sbi	0x0b, 2	; 11
    2712:	8c e0       	ldi	r24, 0x0C	; 12
    2714:	80 93 b8 00 	sts	0x00B8, r24
    2718:	e9 e6       	ldi	r30, 0x69	; 105
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	80 62       	ori	r24, 0x20	; 32
    2720:	80 83       	st	Z, r24
    2722:	80 81       	ld	r24, Z
    2724:	8f 7e       	andi	r24, 0xEF	; 239
    2726:	80 83       	st	Z, r24
    2728:	ea 9a       	sbi	0x1d, 2	; 29
    272a:	78 94       	sei
    272c:	08 95       	ret

0000272e <m_rf_open>:
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	18 2f       	mov	r17, r24
    2736:	d6 2f       	mov	r29, r22
    2738:	c4 2f       	mov	r28, r20
    273a:	0e 94 86 13 	call	0x270c	; 0x270c <m_bus_init>
    273e:	94 ea       	ldi	r25, 0xA4	; 164
    2740:	90 93 bc 00 	sts	0x00BC, r25
    2744:	ec eb       	ldi	r30, 0xBC	; 188
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	90 81       	ld	r25, Z
    274a:	99 23       	and	r25, r25
    274c:	ec f7       	brge	.-6      	; 0x2748 <m_rf_open+0x1a>
    274e:	90 e5       	ldi	r25, 0x50	; 80
    2750:	90 93 bb 00 	sts	0x00BB, r25
    2754:	94 e8       	ldi	r25, 0x84	; 132
    2756:	90 93 bc 00 	sts	0x00BC, r25
    275a:	ec eb       	ldi	r30, 0xBC	; 188
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	90 81       	ld	r25, Z
    2760:	99 23       	and	r25, r25
    2762:	ec f7       	brge	.-6      	; 0x275e <m_rf_open+0x30>
    2764:	90 91 b9 00 	lds	r25, 0x00B9
    2768:	98 7f       	andi	r25, 0xF8	; 248
    276a:	90 32       	cpi	r25, 0x20	; 32
    276c:	29 f4       	brne	.+10     	; 0x2778 <m_rf_open+0x4a>
    276e:	84 e9       	ldi	r24, 0x94	; 148
    2770:	80 93 bc 00 	sts	0x00BC, r24
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	2d c0       	rjmp	.+90     	; 0x27d2 <m_rf_open+0xa4>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	80 93 bb 00 	sts	0x00BB, r24
    277e:	84 e8       	ldi	r24, 0x84	; 132
    2780:	80 93 bc 00 	sts	0x00BC, r24
    2784:	ec eb       	ldi	r30, 0xBC	; 188
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	90 81       	ld	r25, Z
    278a:	99 23       	and	r25, r25
    278c:	ec f7       	brge	.-6      	; 0x2788 <m_rf_open+0x5a>
    278e:	10 93 bb 00 	sts	0x00BB, r17
    2792:	84 e8       	ldi	r24, 0x84	; 132
    2794:	80 93 bc 00 	sts	0x00BC, r24
    2798:	ec eb       	ldi	r30, 0xBC	; 188
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	88 23       	and	r24, r24
    27a0:	ec f7       	brge	.-6      	; 0x279c <m_rf_open+0x6e>
    27a2:	d0 93 bb 00 	sts	0x00BB, r29
    27a6:	84 e8       	ldi	r24, 0x84	; 132
    27a8:	80 93 bc 00 	sts	0x00BC, r24
    27ac:	ec eb       	ldi	r30, 0xBC	; 188
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	88 23       	and	r24, r24
    27b4:	ec f7       	brge	.-6      	; 0x27b0 <m_rf_open+0x82>
    27b6:	c0 93 bb 00 	sts	0x00BB, r28
    27ba:	84 e8       	ldi	r24, 0x84	; 132
    27bc:	80 93 bc 00 	sts	0x00BC, r24
    27c0:	ec eb       	ldi	r30, 0xBC	; 188
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	88 23       	and	r24, r24
    27c8:	ec f7       	brge	.-6      	; 0x27c4 <m_rf_open+0x96>
    27ca:	84 e9       	ldi	r24, 0x94	; 148
    27cc:	80 93 bc 00 	sts	0x00BC, r24
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	1f 91       	pop	r17
    27d8:	08 95       	ret

000027da <m_rf_read>:
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	24 ea       	ldi	r18, 0xA4	; 164
    27e2:	20 93 bc 00 	sts	0x00BC, r18
    27e6:	ec eb       	ldi	r30, 0xBC	; 188
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	20 81       	ld	r18, Z
    27ec:	22 23       	and	r18, r18
    27ee:	ec f7       	brge	.-6      	; 0x27ea <m_rf_read+0x10>
    27f0:	21 e5       	ldi	r18, 0x51	; 81
    27f2:	20 93 bb 00 	sts	0x00BB, r18
    27f6:	24 e8       	ldi	r18, 0x84	; 132
    27f8:	20 93 bc 00 	sts	0x00BC, r18
    27fc:	ec eb       	ldi	r30, 0xBC	; 188
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	20 81       	ld	r18, Z
    2802:	22 23       	and	r18, r18
    2804:	ec f7       	brge	.-6      	; 0x2800 <m_rf_read+0x26>
    2806:	20 91 b9 00 	lds	r18, 0x00B9
    280a:	28 7f       	andi	r18, 0xF8	; 248
    280c:	28 34       	cpi	r18, 0x48	; 72
    280e:	29 f4       	brne	.+10     	; 0x281a <m_rf_read+0x40>
    2810:	84 e9       	ldi	r24, 0x94	; 148
    2812:	80 93 bc 00 	sts	0x00BC, r24
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	44 c0       	rjmp	.+136    	; 0x28a2 <m_rf_read+0xc8>
    281a:	24 ec       	ldi	r18, 0xC4	; 196
    281c:	20 93 bc 00 	sts	0x00BC, r18
    2820:	ec eb       	ldi	r30, 0xBC	; 188
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	20 81       	ld	r18, Z
    2826:	22 23       	and	r18, r18
    2828:	ec f7       	brge	.-6      	; 0x2824 <m_rf_read+0x4a>
    282a:	10 91 bb 00 	lds	r17, 0x00BB
    282e:	16 13       	cpse	r17, r22
    2830:	0a c0       	rjmp	.+20     	; 0x2846 <m_rf_read+0x6c>
    2832:	41 2f       	mov	r20, r17
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	41 50       	subi	r20, 0x01	; 1
    2838:	51 09       	sbc	r21, r1
    283a:	14 16       	cp	r1, r20
    283c:	15 06       	cpc	r1, r21
    283e:	44 f0       	brlt	.+16     	; 0x2850 <m_rf_read+0x76>
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	1c c0       	rjmp	.+56     	; 0x287e <m_rf_read+0xa4>
    2846:	84 e9       	ldi	r24, 0x94	; 148
    2848:	80 93 bc 00 	sts	0x00BC, r24
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	29 c0       	rjmp	.+82     	; 0x28a2 <m_rf_read+0xc8>
    2850:	dc 01       	movw	r26, r24
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	ec eb       	ldi	r30, 0xBC	; 188
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	74 ec       	ldi	r23, 0xC4	; 196
    285c:	cb eb       	ldi	r28, 0xBB	; 187
    285e:	d0 e0       	ldi	r29, 0x00	; 0
    2860:	70 83       	st	Z, r23
    2862:	60 81       	ld	r22, Z
    2864:	66 23       	and	r22, r22
    2866:	ec f7       	brge	.-6      	; 0x2862 <m_rf_read+0x88>
    2868:	68 81       	ld	r22, Y
    286a:	6d 93       	st	X+, r22
    286c:	2f 5f       	subi	r18, 0xFF	; 255
    286e:	3f 4f       	sbci	r19, 0xFF	; 255
    2870:	24 17       	cp	r18, r20
    2872:	35 07       	cpc	r19, r21
    2874:	ac f3       	brlt	.-22     	; 0x2860 <m_rf_read+0x86>
    2876:	21 2f       	mov	r18, r17
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	21 50       	subi	r18, 0x01	; 1
    287c:	31 09       	sbc	r19, r1
    287e:	44 e8       	ldi	r20, 0x84	; 132
    2880:	40 93 bc 00 	sts	0x00BC, r20
    2884:	ec eb       	ldi	r30, 0xBC	; 188
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	40 81       	ld	r20, Z
    288a:	44 23       	and	r20, r20
    288c:	ec f7       	brge	.-6      	; 0x2888 <m_rf_read+0xae>
    288e:	40 91 bb 00 	lds	r20, 0x00BB
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	40 83       	st	Z, r20
    289a:	84 e9       	ldi	r24, 0x94	; 148
    289c:	80 93 bc 00 	sts	0x00BC, r24
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	08 95       	ret

000028aa <m_rf_send>:
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	f8 94       	cli
    28b0:	94 ea       	ldi	r25, 0xA4	; 164
    28b2:	90 93 bc 00 	sts	0x00BC, r25
    28b6:	ec eb       	ldi	r30, 0xBC	; 188
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	90 81       	ld	r25, Z
    28bc:	99 23       	and	r25, r25
    28be:	ec f7       	brge	.-6      	; 0x28ba <m_rf_send+0x10>
    28c0:	90 e5       	ldi	r25, 0x50	; 80
    28c2:	90 93 bb 00 	sts	0x00BB, r25
    28c6:	94 e8       	ldi	r25, 0x84	; 132
    28c8:	90 93 bc 00 	sts	0x00BC, r25
    28cc:	ec eb       	ldi	r30, 0xBC	; 188
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	90 81       	ld	r25, Z
    28d2:	99 23       	and	r25, r25
    28d4:	ec f7       	brge	.-6      	; 0x28d0 <m_rf_send+0x26>
    28d6:	90 91 b9 00 	lds	r25, 0x00B9
    28da:	98 7f       	andi	r25, 0xF8	; 248
    28dc:	90 32       	cpi	r25, 0x20	; 32
    28de:	31 f4       	brne	.+12     	; 0x28ec <m_rf_send+0x42>
    28e0:	84 e9       	ldi	r24, 0x94	; 148
    28e2:	80 93 bc 00 	sts	0x00BC, r24
    28e6:	78 94       	sei
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	32 c0       	rjmp	.+100    	; 0x2950 <m_rf_send+0xa6>
    28ec:	93 e0       	ldi	r25, 0x03	; 3
    28ee:	90 93 bb 00 	sts	0x00BB, r25
    28f2:	94 e8       	ldi	r25, 0x84	; 132
    28f4:	90 93 bc 00 	sts	0x00BC, r25
    28f8:	ec eb       	ldi	r30, 0xBC	; 188
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	90 81       	ld	r25, Z
    28fe:	99 23       	and	r25, r25
    2900:	ec f7       	brge	.-6      	; 0x28fc <m_rf_send+0x52>
    2902:	80 93 bb 00 	sts	0x00BB, r24
    2906:	84 e8       	ldi	r24, 0x84	; 132
    2908:	80 93 bc 00 	sts	0x00BC, r24
    290c:	ec eb       	ldi	r30, 0xBC	; 188
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	88 23       	and	r24, r24
    2914:	ec f7       	brge	.-6      	; 0x2910 <m_rf_send+0x66>
    2916:	24 2f       	mov	r18, r20
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	12 16       	cp	r1, r18
    291c:	13 06       	cpc	r1, r19
    291e:	9c f4       	brge	.+38     	; 0x2946 <m_rf_send+0x9c>
    2920:	a6 2f       	mov	r26, r22
    2922:	b7 2f       	mov	r27, r23
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	cb eb       	ldi	r28, 0xBB	; 187
    292a:	d0 e0       	ldi	r29, 0x00	; 0
    292c:	ec eb       	ldi	r30, 0xBC	; 188
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	54 e8       	ldi	r21, 0x84	; 132
    2932:	4d 91       	ld	r20, X+
    2934:	48 83       	st	Y, r20
    2936:	50 83       	st	Z, r21
    2938:	40 81       	ld	r20, Z
    293a:	44 23       	and	r20, r20
    293c:	ec f7       	brge	.-6      	; 0x2938 <m_rf_send+0x8e>
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	82 17       	cp	r24, r18
    2942:	93 07       	cpc	r25, r19
    2944:	b4 f3       	brlt	.-20     	; 0x2932 <m_rf_send+0x88>
    2946:	84 e9       	ldi	r24, 0x94	; 148
    2948:	80 93 bc 00 	sts	0x00BC, r24
    294c:	78 94       	sei
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	08 95       	ret

00002956 <m_usb_init>:
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	80 93 d7 00 	sts	0x00D7, r24
    295c:	80 ea       	ldi	r24, 0xA0	; 160
    295e:	80 93 d8 00 	sts	0x00D8, r24
    2962:	82 e1       	ldi	r24, 0x12	; 18
    2964:	89 bd       	out	0x29, r24	; 41
    2966:	09 b4       	in	r0, 0x29	; 41
    2968:	00 fe       	sbrs	r0, 0
    296a:	fd cf       	rjmp	.-6      	; 0x2966 <m_usb_init+0x10>
    296c:	80 e9       	ldi	r24, 0x90	; 144
    296e:	80 93 d8 00 	sts	0x00D8, r24
    2972:	10 92 e0 00 	sts	0x00E0, r1
    2976:	10 92 93 01 	sts	0x0193, r1
    297a:	10 92 90 01 	sts	0x0190, r1
    297e:	8c e0       	ldi	r24, 0x0C	; 12
    2980:	80 93 e2 00 	sts	0x00E2, r24
    2984:	78 94       	sei
    2986:	08 95       	ret

00002988 <m_usb_tx_char>:
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	90 91 93 01 	lds	r25, 0x0193
    2990:	99 23       	and	r25, r25
    2992:	09 f4       	brne	.+2      	; 0x2996 <m_usb_tx_char+0xe>
    2994:	4c c0       	rjmp	.+152    	; 0x2a2e <m_usb_tx_char+0xa6>
    2996:	9f b7       	in	r25, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	24 e0       	ldi	r18, 0x04	; 4
    299c:	20 93 e9 00 	sts	0x00E9, r18
    29a0:	20 91 91 01 	lds	r18, 0x0191
    29a4:	22 23       	and	r18, r18
    29a6:	49 f0       	breq	.+18     	; 0x29ba <m_usb_tx_char+0x32>
    29a8:	20 91 e8 00 	lds	r18, 0x00E8
    29ac:	25 fd       	sbrc	r18, 5
    29ae:	03 c0       	rjmp	.+6      	; 0x29b6 <m_usb_tx_char+0x2e>
    29b0:	9f bf       	out	0x3f, r25	; 63
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	41 c0       	rjmp	.+130    	; 0x2a38 <m_usb_tx_char+0xb0>
    29b6:	10 92 91 01 	sts	0x0191, r1
    29ba:	30 91 e4 00 	lds	r19, 0x00E4
    29be:	37 5e       	subi	r19, 0xE7	; 231
    29c0:	20 91 e8 00 	lds	r18, 0x00E8
    29c4:	25 fd       	sbrc	r18, 5
    29c6:	24 c0       	rjmp	.+72     	; 0x2a10 <m_usb_tx_char+0x88>
    29c8:	9f bf       	out	0x3f, r25	; 63
    29ca:	90 91 e4 00 	lds	r25, 0x00E4
    29ce:	93 17       	cp	r25, r19
    29d0:	81 f0       	breq	.+32     	; 0x29f2 <m_usb_tx_char+0x6a>
    29d2:	90 91 93 01 	lds	r25, 0x0193
    29d6:	99 23       	and	r25, r25
    29d8:	61 f1       	breq	.+88     	; 0x2a32 <m_usb_tx_char+0xaa>
    29da:	a9 ee       	ldi	r26, 0xE9	; 233
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	44 e0       	ldi	r20, 0x04	; 4
    29e0:	e8 ee       	ldi	r30, 0xE8	; 232
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	c4 ee       	ldi	r28, 0xE4	; 228
    29e6:	d0 e0       	ldi	r29, 0x00	; 0
    29e8:	0d c0       	rjmp	.+26     	; 0x2a04 <m_usb_tx_char+0x7c>
    29ea:	9f bf       	out	0x3f, r25	; 63
    29ec:	98 81       	ld	r25, Y
    29ee:	93 13       	cpse	r25, r19
    29f0:	05 c0       	rjmp	.+10     	; 0x29fc <m_usb_tx_char+0x74>
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 91 01 	sts	0x0191, r24
    29f8:	8f ef       	ldi	r24, 0xFF	; 255
    29fa:	1e c0       	rjmp	.+60     	; 0x2a38 <m_usb_tx_char+0xb0>
    29fc:	90 91 93 01 	lds	r25, 0x0193
    2a00:	99 23       	and	r25, r25
    2a02:	c9 f0       	breq	.+50     	; 0x2a36 <m_usb_tx_char+0xae>
    2a04:	9f b7       	in	r25, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	4c 93       	st	X, r20
    2a0a:	20 81       	ld	r18, Z
    2a0c:	25 ff       	sbrs	r18, 5
    2a0e:	ed cf       	rjmp	.-38     	; 0x29ea <m_usb_tx_char+0x62>
    2a10:	80 93 f1 00 	sts	0x00F1, r24
    2a14:	80 91 e8 00 	lds	r24, 0x00E8
    2a18:	85 fd       	sbrc	r24, 5
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <m_usb_tx_char+0x9a>
    2a1c:	8a e3       	ldi	r24, 0x3A	; 58
    2a1e:	80 93 e8 00 	sts	0x00E8, r24
    2a22:	85 e0       	ldi	r24, 0x05	; 5
    2a24:	80 93 92 01 	sts	0x0192, r24
    2a28:	9f bf       	out	0x3f, r25	; 63
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	05 c0       	rjmp	.+10     	; 0x2a38 <m_usb_tx_char+0xb0>
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	03 c0       	rjmp	.+6      	; 0x2a38 <m_usb_tx_char+0xb0>
    2a32:	8f ef       	ldi	r24, 0xFF	; 255
    2a34:	01 c0       	rjmp	.+2      	; 0x2a38 <m_usb_tx_char+0xb0>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <__vector_10>:
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	8f 93       	push	r24
    2a4a:	9f 93       	push	r25
    2a4c:	ef 93       	push	r30
    2a4e:	ff 93       	push	r31
    2a50:	e1 ee       	ldi	r30, 0xE1	; 225
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	10 82       	st	Z, r1
    2a58:	83 ff       	sbrs	r24, 3
    2a5a:	11 c0       	rjmp	.+34     	; 0x2a7e <__vector_10+0x40>
    2a5c:	10 92 e9 00 	sts	0x00E9, r1
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	90 93 eb 00 	sts	0x00EB, r25
    2a66:	10 92 ec 00 	sts	0x00EC, r1
    2a6a:	92 e1       	ldi	r25, 0x12	; 18
    2a6c:	90 93 ed 00 	sts	0x00ED, r25
    2a70:	98 e0       	ldi	r25, 0x08	; 8
    2a72:	90 93 f0 00 	sts	0x00F0, r25
    2a76:	10 92 93 01 	sts	0x0193, r1
    2a7a:	10 92 90 01 	sts	0x0190, r1
    2a7e:	82 ff       	sbrs	r24, 2
    2a80:	13 c0       	rjmp	.+38     	; 0x2aa8 <__vector_10+0x6a>
    2a82:	80 91 93 01 	lds	r24, 0x0193
    2a86:	88 23       	and	r24, r24
    2a88:	79 f0       	breq	.+30     	; 0x2aa8 <__vector_10+0x6a>
    2a8a:	80 91 92 01 	lds	r24, 0x0192
    2a8e:	88 23       	and	r24, r24
    2a90:	59 f0       	breq	.+22     	; 0x2aa8 <__vector_10+0x6a>
    2a92:	81 50       	subi	r24, 0x01	; 1
    2a94:	80 93 92 01 	sts	0x0192, r24
    2a98:	81 11       	cpse	r24, r1
    2a9a:	06 c0       	rjmp	.+12     	; 0x2aa8 <__vector_10+0x6a>
    2a9c:	84 e0       	ldi	r24, 0x04	; 4
    2a9e:	80 93 e9 00 	sts	0x00E9, r24
    2aa2:	8a e3       	ldi	r24, 0x3A	; 58
    2aa4:	80 93 e8 00 	sts	0x00E8, r24
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	9f 91       	pop	r25
    2aae:	8f 91       	pop	r24
    2ab0:	0f 90       	pop	r0
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	0f 90       	pop	r0
    2ab6:	1f 90       	pop	r1
    2ab8:	18 95       	reti

00002aba <__vector_11>:
    2aba:	1f 92       	push	r1
    2abc:	0f 92       	push	r0
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	0f 92       	push	r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	2f 93       	push	r18
    2aca:	3f 93       	push	r19
    2acc:	4f 93       	push	r20
    2ace:	5f 93       	push	r21
    2ad0:	6f 93       	push	r22
    2ad2:	7f 93       	push	r23
    2ad4:	8f 93       	push	r24
    2ad6:	9f 93       	push	r25
    2ad8:	af 93       	push	r26
    2ada:	bf 93       	push	r27
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	ef 93       	push	r30
    2ae2:	ff 93       	push	r31
    2ae4:	10 92 e9 00 	sts	0x00E9, r1
    2ae8:	80 91 e8 00 	lds	r24, 0x00E8
    2aec:	83 ff       	sbrs	r24, 3
    2aee:	4e c1       	rjmp	.+668    	; 0x2d8c <__vector_11+0x2d2>
    2af0:	e1 ef       	ldi	r30, 0xF1	; 241
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	c0 81       	ld	r28, Z
    2af6:	40 81       	ld	r20, Z
    2af8:	20 81       	ld	r18, Z
    2afa:	80 81       	ld	r24, Z
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	38 2b       	or	r19, r24
    2b00:	80 81       	ld	r24, Z
    2b02:	50 81       	ld	r21, Z
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	bc 01       	movw	r22, r24
    2b08:	75 2b       	or	r23, r21
    2b0a:	b0 81       	ld	r27, Z
    2b0c:	a0 81       	ld	r26, Z
    2b0e:	82 ef       	ldi	r24, 0xF2	; 242
    2b10:	80 93 e8 00 	sts	0x00E8, r24
    2b14:	46 30       	cpi	r20, 0x06	; 6
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <__vector_11+0x60>
    2b18:	58 c0       	rjmp	.+176    	; 0x2bca <__vector_11+0x110>
    2b1a:	04 c0       	rjmp	.+8      	; 0x2b24 <__vector_11+0x6a>
    2b1c:	81 e2       	ldi	r24, 0x21	; 33
    2b1e:	80 93 eb 00 	sts	0x00EB, r24
    2b22:	3b c1       	rjmp	.+630    	; 0x2d9a <__vector_11+0x2e0>
    2b24:	c6 e0       	ldi	r28, 0x06	; 6
    2b26:	8e e9       	ldi	r24, 0x9E	; 158
    2b28:	92 e0       	ldi	r25, 0x02	; 2
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	45 91       	lpm	r20, Z+
    2b2e:	54 91       	lpm	r21, Z
    2b30:	24 17       	cp	r18, r20
    2b32:	35 07       	cpc	r19, r21
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <__vector_11+0x80>
    2b36:	07 96       	adiw	r24, 0x07	; 7
    2b38:	23 c0       	rjmp	.+70     	; 0x2b80 <__vector_11+0xc6>
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	32 96       	adiw	r30, 0x02	; 2
    2b3e:	45 91       	lpm	r20, Z+
    2b40:	54 91       	lpm	r21, Z
    2b42:	64 17       	cp	r22, r20
    2b44:	75 07       	cpc	r23, r21
    2b46:	11 f0       	breq	.+4      	; 0x2b4c <__vector_11+0x92>
    2b48:	07 96       	adiw	r24, 0x07	; 7
    2b4a:	1a c0       	rjmp	.+52     	; 0x2b80 <__vector_11+0xc6>
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	34 96       	adiw	r30, 0x04	; 4
    2b50:	25 91       	lpm	r18, Z+
    2b52:	34 91       	lpm	r19, Z
    2b54:	fc 01       	movw	r30, r24
    2b56:	36 96       	adiw	r30, 0x06	; 6
    2b58:	54 91       	lpm	r21, Z
    2b5a:	8b 2f       	mov	r24, r27
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9a 2b       	or	r25, r26
    2b60:	8f 3f       	cpi	r24, 0xFF	; 255
    2b62:	91 05       	cpc	r25, r1
    2b64:	19 f0       	breq	.+6      	; 0x2b6c <__vector_11+0xb2>
    2b66:	10 f0       	brcs	.+4      	; 0x2b6c <__vector_11+0xb2>
    2b68:	8f ef       	ldi	r24, 0xFF	; 255
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	85 17       	cp	r24, r21
    2b6e:	08 f4       	brcc	.+2      	; 0x2b72 <__vector_11+0xb8>
    2b70:	58 2f       	mov	r21, r24
    2b72:	a8 ee       	ldi	r26, 0xE8	; 232
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	70 e1       	ldi	r23, 0x10	; 16
    2b78:	6e ef       	ldi	r22, 0xFE	; 254
    2b7a:	c1 ef       	ldi	r28, 0xF1	; 241
    2b7c:	d0 e0       	ldi	r29, 0x00	; 0
    2b7e:	03 c0       	rjmp	.+6      	; 0x2b86 <__vector_11+0xcc>
    2b80:	c1 50       	subi	r28, 0x01	; 1
    2b82:	99 f6       	brne	.-90     	; 0x2b2a <__vector_11+0x70>
    2b84:	cb cf       	rjmp	.-106    	; 0x2b1c <__vector_11+0x62>
    2b86:	8c 91       	ld	r24, X
    2b88:	98 2f       	mov	r25, r24
    2b8a:	95 70       	andi	r25, 0x05	; 5
    2b8c:	e1 f3       	breq	.-8      	; 0x2b86 <__vector_11+0xcc>
    2b8e:	82 fd       	sbrc	r24, 2
    2b90:	04 c1       	rjmp	.+520    	; 0x2d9a <__vector_11+0x2e0>
    2b92:	45 2f       	mov	r20, r21
    2b94:	51 31       	cpi	r21, 0x11	; 17
    2b96:	08 f0       	brcs	.+2      	; 0x2b9a <__vector_11+0xe0>
    2b98:	47 2f       	mov	r20, r23
    2b9a:	44 23       	and	r20, r20
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <__vector_11+0xe6>
    2b9e:	fa c0       	rjmp	.+500    	; 0x2d94 <__vector_11+0x2da>
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	84 2f       	mov	r24, r20
    2ba4:	94 91       	lpm	r25, Z
    2ba6:	98 83       	st	Y, r25
    2ba8:	81 50       	subi	r24, 0x01	; 1
    2baa:	31 96       	adiw	r30, 0x01	; 1
    2bac:	81 11       	cpse	r24, r1
    2bae:	fa cf       	rjmp	.-12     	; 0x2ba4 <__vector_11+0xea>
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	84 0f       	add	r24, r20
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	28 0f       	add	r18, r24
    2bba:	39 1f       	adc	r19, r25
    2bbc:	54 1b       	sub	r21, r20
    2bbe:	6c 93       	st	X, r22
    2bc0:	51 11       	cpse	r21, r1
    2bc2:	e1 cf       	rjmp	.-62     	; 0x2b86 <__vector_11+0xcc>
    2bc4:	40 31       	cpi	r20, 0x10	; 16
    2bc6:	f9 f2       	breq	.-66     	; 0x2b86 <__vector_11+0xcc>
    2bc8:	e8 c0       	rjmp	.+464    	; 0x2d9a <__vector_11+0x2e0>
    2bca:	45 30       	cpi	r20, 0x05	; 5
    2bcc:	61 f4       	brne	.+24     	; 0x2be6 <__vector_11+0x12c>
    2bce:	8e ef       	ldi	r24, 0xFE	; 254
    2bd0:	80 93 e8 00 	sts	0x00E8, r24
    2bd4:	e8 ee       	ldi	r30, 0xE8	; 232
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 ff       	sbrs	r24, 0
    2bdc:	fd cf       	rjmp	.-6      	; 0x2bd8 <__vector_11+0x11e>
    2bde:	20 68       	ori	r18, 0x80	; 128
    2be0:	20 93 e3 00 	sts	0x00E3, r18
    2be4:	da c0       	rjmp	.+436    	; 0x2d9a <__vector_11+0x2e0>
    2be6:	49 30       	cpi	r20, 0x09	; 9
    2be8:	09 f0       	breq	.+2      	; 0x2bec <__vector_11+0x132>
    2bea:	36 c0       	rjmp	.+108    	; 0x2c58 <__vector_11+0x19e>
    2bec:	c1 11       	cpse	r28, r1
    2bee:	5f c0       	rjmp	.+190    	; 0x2cae <__vector_11+0x1f4>
    2bf0:	20 93 93 01 	sts	0x0193, r18
    2bf4:	10 92 90 01 	sts	0x0190, r1
    2bf8:	10 92 92 01 	sts	0x0192, r1
    2bfc:	8e ef       	ldi	r24, 0xFE	; 254
    2bfe:	80 93 e8 00 	sts	0x00E8, r24
    2c02:	11 e0       	ldi	r17, 0x01	; 1
    2c04:	87 e4       	ldi	r24, 0x47	; 71
    2c06:	93 e0       	ldi	r25, 0x03	; 3
    2c08:	c9 ee       	ldi	r28, 0xE9	; 233
    2c0a:	d0 e0       	ldi	r29, 0x00	; 0
    2c0c:	ab ee       	ldi	r26, 0xEB	; 235
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	6c ee       	ldi	r22, 0xEC	; 236
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	4d ee       	ldi	r20, 0xED	; 237
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	18 83       	st	Y, r17
    2c1a:	9c 01       	movw	r18, r24
    2c1c:	2f 5f       	subi	r18, 0xFF	; 255
    2c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c20:	fc 01       	movw	r30, r24
    2c22:	04 91       	lpm	r16, Z
    2c24:	0c 93       	st	X, r16
    2c26:	00 23       	and	r16, r16
    2c28:	61 f0       	breq	.+24     	; 0x2c42 <__vector_11+0x188>
    2c2a:	f9 01       	movw	r30, r18
    2c2c:	24 91       	lpm	r18, Z
    2c2e:	fb 01       	movw	r30, r22
    2c30:	20 83       	st	Z, r18
    2c32:	9c 01       	movw	r18, r24
    2c34:	2d 5f       	subi	r18, 0xFD	; 253
    2c36:	3f 4f       	sbci	r19, 0xFF	; 255
    2c38:	fc 01       	movw	r30, r24
    2c3a:	32 96       	adiw	r30, 0x02	; 2
    2c3c:	84 91       	lpm	r24, Z
    2c3e:	fa 01       	movw	r30, r20
    2c40:	80 83       	st	Z, r24
    2c42:	1f 5f       	subi	r17, 0xFF	; 255
    2c44:	15 30       	cpi	r17, 0x05	; 5
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <__vector_11+0x192>
    2c48:	c9 01       	movw	r24, r18
    2c4a:	e6 cf       	rjmp	.-52     	; 0x2c18 <__vector_11+0x15e>
    2c4c:	ea ee       	ldi	r30, 0xEA	; 234
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	8e e1       	ldi	r24, 0x1E	; 30
    2c52:	80 83       	st	Z, r24
    2c54:	10 82       	st	Z, r1
    2c56:	a1 c0       	rjmp	.+322    	; 0x2d9a <__vector_11+0x2e0>
    2c58:	48 30       	cpi	r20, 0x08	; 8
    2c5a:	81 f4       	brne	.+32     	; 0x2c7c <__vector_11+0x1c2>
    2c5c:	c0 38       	cpi	r28, 0x80	; 128
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <__vector_11+0x1a8>
    2c60:	42 c0       	rjmp	.+132    	; 0x2ce6 <__vector_11+0x22c>
    2c62:	e8 ee       	ldi	r30, 0xE8	; 232
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	80 ff       	sbrs	r24, 0
    2c6a:	fd cf       	rjmp	.-6      	; 0x2c66 <__vector_11+0x1ac>
    2c6c:	80 91 93 01 	lds	r24, 0x0193
    2c70:	80 93 f1 00 	sts	0x00F1, r24
    2c74:	8e ef       	ldi	r24, 0xFE	; 254
    2c76:	80 93 e8 00 	sts	0x00E8, r24
    2c7a:	8f c0       	rjmp	.+286    	; 0x2d9a <__vector_11+0x2e0>
    2c7c:	41 32       	cpi	r20, 0x21	; 33
    2c7e:	b9 f4       	brne	.+46     	; 0x2cae <__vector_11+0x1f4>
    2c80:	c1 3a       	cpi	r28, 0xA1	; 161
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <__vector_11+0x1cc>
    2c84:	40 c0       	rjmp	.+128    	; 0x2d06 <__vector_11+0x24c>
    2c86:	e8 ee       	ldi	r30, 0xE8	; 232
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 ff       	sbrs	r24, 0
    2c8e:	fd cf       	rjmp	.-6      	; 0x2c8a <__vector_11+0x1d0>
    2c90:	e6 e2       	ldi	r30, 0x26	; 38
    2c92:	f1 e0       	ldi	r31, 0x01	; 1
    2c94:	8d e2       	ldi	r24, 0x2D	; 45
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	a1 ef       	ldi	r26, 0xF1	; 241
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	21 91       	ld	r18, Z+
    2c9e:	2c 93       	st	X, r18
    2ca0:	e8 17       	cp	r30, r24
    2ca2:	f9 07       	cpc	r31, r25
    2ca4:	d9 f7       	brne	.-10     	; 0x2c9c <__vector_11+0x1e2>
    2ca6:	8e ef       	ldi	r24, 0xFE	; 254
    2ca8:	80 93 e8 00 	sts	0x00E8, r24
    2cac:	76 c0       	rjmp	.+236    	; 0x2d9a <__vector_11+0x2e0>
    2cae:	40 32       	cpi	r20, 0x20	; 32
    2cb0:	d1 f4       	brne	.+52     	; 0x2ce6 <__vector_11+0x22c>
    2cb2:	c1 32       	cpi	r28, 0x21	; 33
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <__vector_11+0x1fe>
    2cb6:	43 c0       	rjmp	.+134    	; 0x2d3e <__vector_11+0x284>
    2cb8:	e8 ee       	ldi	r30, 0xE8	; 232
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	82 ff       	sbrs	r24, 2
    2cc0:	fd cf       	rjmp	.-6      	; 0x2cbc <__vector_11+0x202>
    2cc2:	e6 e2       	ldi	r30, 0x26	; 38
    2cc4:	f1 e0       	ldi	r31, 0x01	; 1
    2cc6:	8d e2       	ldi	r24, 0x2D	; 45
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	a1 ef       	ldi	r26, 0xF1	; 241
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	2c 91       	ld	r18, X
    2cd0:	21 93       	st	Z+, r18
    2cd2:	e8 17       	cp	r30, r24
    2cd4:	f9 07       	cpc	r31, r25
    2cd6:	d9 f7       	brne	.-10     	; 0x2cce <__vector_11+0x214>
    2cd8:	e8 ee       	ldi	r30, 0xE8	; 232
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	8b ef       	ldi	r24, 0xFB	; 251
    2cde:	80 83       	st	Z, r24
    2ce0:	8e ef       	ldi	r24, 0xFE	; 254
    2ce2:	80 83       	st	Z, r24
    2ce4:	5a c0       	rjmp	.+180    	; 0x2d9a <__vector_11+0x2e0>
    2ce6:	42 32       	cpi	r20, 0x22	; 34
    2ce8:	71 f4       	brne	.+28     	; 0x2d06 <__vector_11+0x24c>
    2cea:	c1 32       	cpi	r28, 0x21	; 33
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <__vector_11+0x236>
    2cee:	4e c0       	rjmp	.+156    	; 0x2d8c <__vector_11+0x2d2>
    2cf0:	20 93 90 01 	sts	0x0190, r18
    2cf4:	e8 ee       	ldi	r30, 0xE8	; 232
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	80 ff       	sbrs	r24, 0
    2cfc:	fd cf       	rjmp	.-6      	; 0x2cf8 <__vector_11+0x23e>
    2cfe:	8e ef       	ldi	r24, 0xFE	; 254
    2d00:	80 93 e8 00 	sts	0x00E8, r24
    2d04:	4a c0       	rjmp	.+148    	; 0x2d9a <__vector_11+0x2e0>
    2d06:	41 11       	cpse	r20, r1
    2d08:	1a c0       	rjmp	.+52     	; 0x2d3e <__vector_11+0x284>
    2d0a:	e8 ee       	ldi	r30, 0xE8	; 232
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	80 ff       	sbrs	r24, 0
    2d12:	fd cf       	rjmp	.-6      	; 0x2d0e <__vector_11+0x254>
    2d14:	c2 38       	cpi	r28, 0x82	; 130
    2d16:	51 f4       	brne	.+20     	; 0x2d2c <__vector_11+0x272>
    2d18:	e9 ee       	ldi	r30, 0xE9	; 233
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	60 83       	st	Z, r22
    2d1e:	80 91 eb 00 	lds	r24, 0x00EB
    2d22:	85 fb       	bst	r24, 5
    2d24:	88 27       	eor	r24, r24
    2d26:	80 f9       	bld	r24, 0
    2d28:	10 82       	st	Z, r1
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <__vector_11+0x274>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	e1 ef       	ldi	r30, 0xF1	; 241
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 83       	st	Z, r24
    2d34:	10 82       	st	Z, r1
    2d36:	8e ef       	ldi	r24, 0xFE	; 254
    2d38:	80 93 e8 00 	sts	0x00E8, r24
    2d3c:	2e c0       	rjmp	.+92     	; 0x2d9a <__vector_11+0x2e0>
    2d3e:	84 2f       	mov	r24, r20
    2d40:	8d 7f       	andi	r24, 0xFD	; 253
    2d42:	81 30       	cpi	r24, 0x01	; 1
    2d44:	19 f5       	brne	.+70     	; 0x2d8c <__vector_11+0x2d2>
    2d46:	c2 30       	cpi	r28, 0x02	; 2
    2d48:	09 f5       	brne	.+66     	; 0x2d8c <__vector_11+0x2d2>
    2d4a:	23 2b       	or	r18, r19
    2d4c:	f9 f4       	brne	.+62     	; 0x2d8c <__vector_11+0x2d2>
    2d4e:	6f 77       	andi	r22, 0x7F	; 127
    2d50:	8f ef       	ldi	r24, 0xFF	; 255
    2d52:	86 0f       	add	r24, r22
    2d54:	84 30       	cpi	r24, 0x04	; 4
    2d56:	d0 f4       	brcc	.+52     	; 0x2d8c <__vector_11+0x2d2>
    2d58:	8e ef       	ldi	r24, 0xFE	; 254
    2d5a:	80 93 e8 00 	sts	0x00E8, r24
    2d5e:	60 93 e9 00 	sts	0x00E9, r22
    2d62:	43 30       	cpi	r20, 0x03	; 3
    2d64:	21 f4       	brne	.+8      	; 0x2d6e <__vector_11+0x2b4>
    2d66:	81 e2       	ldi	r24, 0x21	; 33
    2d68:	80 93 eb 00 	sts	0x00EB, r24
    2d6c:	16 c0       	rjmp	.+44     	; 0x2d9a <__vector_11+0x2e0>
    2d6e:	89 e1       	ldi	r24, 0x19	; 25
    2d70:	80 93 eb 00 	sts	0x00EB, r24
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <__vector_11+0x2c4>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	6a 95       	dec	r22
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <__vector_11+0x2c0>
    2d82:	ea ee       	ldi	r30, 0xEA	; 234
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 83       	st	Z, r24
    2d88:	10 82       	st	Z, r1
    2d8a:	07 c0       	rjmp	.+14     	; 0x2d9a <__vector_11+0x2e0>
    2d8c:	81 e2       	ldi	r24, 0x21	; 33
    2d8e:	80 93 eb 00 	sts	0x00EB, r24
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <__vector_11+0x2e0>
    2d94:	6c 93       	st	X, r22
    2d96:	51 11       	cpse	r21, r1
    2d98:	f6 ce       	rjmp	.-532    	; 0x2b86 <__vector_11+0xcc>
    2d9a:	ff 91       	pop	r31
    2d9c:	ef 91       	pop	r30
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	bf 91       	pop	r27
    2da4:	af 91       	pop	r26
    2da6:	9f 91       	pop	r25
    2da8:	8f 91       	pop	r24
    2daa:	7f 91       	pop	r23
    2dac:	6f 91       	pop	r22
    2dae:	5f 91       	pop	r21
    2db0:	4f 91       	pop	r20
    2db2:	3f 91       	pop	r19
    2db4:	2f 91       	pop	r18
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	0f 90       	pop	r0
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	0f 90       	pop	r0
    2dc0:	1f 90       	pop	r1
    2dc2:	18 95       	reti

00002dc4 <print_P>:
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	ec 01       	movw	r28, r24
    2dcc:	21 96       	adiw	r28, 0x01	; 1
    2dce:	fc 01       	movw	r30, r24
    2dd0:	14 91       	lpm	r17, Z
    2dd2:	11 23       	and	r17, r17
    2dd4:	69 f0       	breq	.+26     	; 0x2df0 <print_P+0x2c>
    2dd6:	1a 30       	cpi	r17, 0x0A	; 10
    2dd8:	19 f4       	brne	.+6      	; 0x2de0 <print_P+0x1c>
    2dda:	8d e0       	ldi	r24, 0x0D	; 13
    2ddc:	0e 94 c4 14 	call	0x2988	; 0x2988 <m_usb_tx_char>
    2de0:	81 2f       	mov	r24, r17
    2de2:	0e 94 c4 14 	call	0x2988	; 0x2988 <m_usb_tx_char>
    2de6:	fe 01       	movw	r30, r28
    2de8:	14 91       	lpm	r17, Z
    2dea:	21 96       	adiw	r28, 0x01	; 1
    2dec:	11 11       	cpse	r17, r1
    2dee:	f3 cf       	rjmp	.-26     	; 0x2dd6 <print_P+0x12>
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	1f 91       	pop	r17
    2df6:	08 95       	ret

00002df8 <m_usb_tx_int>:
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	27 97       	sbiw	r28, 0x07	; 7
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	8e 01       	movw	r16, r28
    2e16:	0f 5f       	subi	r16, 0xFF	; 255
    2e18:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1a:	27 e0       	ldi	r18, 0x07	; 7
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	11 92       	st	Z+, r1
    2e20:	2a 95       	dec	r18
    2e22:	e9 f7       	brne	.-6      	; 0x2e1e <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2e24:	4a e0       	ldi	r20, 0x0A	; 10
    2e26:	b8 01       	movw	r22, r16
    2e28:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__itoa_ncheck>
    2e2c:	7e 01       	movw	r14, r28
    2e2e:	f8 e0       	ldi	r31, 0x08	; 8
    2e30:	ef 0e       	add	r14, r31
    2e32:	f1 1c       	adc	r15, r1
    2e34:	f8 01       	movw	r30, r16
    2e36:	81 91       	ld	r24, Z+
    2e38:	8f 01       	movw	r16, r30
    2e3a:	81 11       	cpse	r24, r1
    2e3c:	0e 94 c4 14 	call	0x2988	; 0x2988 <m_usb_tx_char>
    2e40:	0e 15       	cp	r16, r14
    2e42:	1f 05       	cpc	r17, r15
    2e44:	b9 f7       	brne	.-18     	; 0x2e34 <m_usb_tx_int+0x3c>
    2e46:	27 96       	adiw	r28, 0x07	; 7
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	08 95       	ret

00002e60 <twi_wait>:
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	ec eb       	ldi	r30, 0xBC	; 188
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	88 23       	and	r24, r24
    2e6c:	34 f0       	brlt	.+12     	; 0x2e7a <twi_wait+0x1a>
    2e6e:	2f 5f       	subi	r18, 0xFF	; 255
    2e70:	3f 4f       	sbci	r19, 0xFF	; 255
    2e72:	29 3e       	cpi	r18, 0xE9	; 233
    2e74:	83 e0       	ldi	r24, 0x03	; 3
    2e76:	38 07       	cpc	r19, r24
    2e78:	b9 f7       	brne	.-18     	; 0x2e68 <twi_wait+0x8>
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	28 3e       	cpi	r18, 0xE8	; 232
    2e7e:	33 40       	sbci	r19, 0x03	; 3
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <twi_wait+0x24>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	08 95       	ret

00002e86 <send_byte>:
    2e86:	80 93 bb 00 	sts	0x00BB, r24
    2e8a:	84 e8       	ldi	r24, 0x84	; 132
    2e8c:	80 93 bc 00 	sts	0x00BC, r24
    2e90:	0e 94 30 17 	call	0x2e60	; 0x2e60 <twi_wait>
    2e94:	88 23       	and	r24, r24
    2e96:	19 f0       	breq	.+6      	; 0x2e9e <send_byte+0x18>
    2e98:	80 91 b9 00 	lds	r24, 0x00B9
    2e9c:	88 7f       	andi	r24, 0xF8	; 248
    2e9e:	08 95       	ret

00002ea0 <start_write>:
    2ea0:	cf 93       	push	r28
    2ea2:	c8 2f       	mov	r28, r24
    2ea4:	94 ea       	ldi	r25, 0xA4	; 164
    2ea6:	90 93 bc 00 	sts	0x00BC, r25
    2eaa:	0e 94 30 17 	call	0x2e60	; 0x2e60 <twi_wait>
    2eae:	88 23       	and	r24, r24
    2eb0:	61 f0       	breq	.+24     	; 0x2eca <start_write+0x2a>
    2eb2:	8c 2f       	mov	r24, r28
    2eb4:	88 0f       	add	r24, r24
    2eb6:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2eba:	80 32       	cpi	r24, 0x20	; 32
    2ebc:	29 f4       	brne	.+10     	; 0x2ec8 <start_write+0x28>
    2ebe:	84 e9       	ldi	r24, 0x94	; 148
    2ec0:	80 93 bc 00 	sts	0x00BC, r24
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <start_write+0x2a>
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	cf 91       	pop	r28
    2ecc:	08 95       	ret

00002ece <m_wii_open>:
    2ece:	0e 94 86 13 	call	0x270c	; 0x270c <m_bus_init>
    2ed2:	88 e5       	ldi	r24, 0x58	; 88
    2ed4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <start_write>
    2ed8:	88 23       	and	r24, r24
    2eda:	09 f4       	brne	.+2      	; 0x2ede <m_wii_open+0x10>
    2edc:	cd c0       	rjmp	.+410    	; 0x3078 <m_wii_open+0x1aa>
    2ede:	80 e3       	ldi	r24, 0x30	; 48
    2ee0:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2ee4:	88 23       	and	r24, r24
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <m_wii_open+0x1c>
    2ee8:	c9 c0       	rjmp	.+402    	; 0x307c <m_wii_open+0x1ae>
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2ef0:	88 23       	and	r24, r24
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <m_wii_open+0x28>
    2ef4:	c5 c0       	rjmp	.+394    	; 0x3080 <m_wii_open+0x1b2>
    2ef6:	84 e9       	ldi	r24, 0x94	; 148
    2ef8:	80 93 bc 00 	sts	0x00BC, r24
    2efc:	83 ec       	ldi	r24, 0xC3	; 195
    2efe:	99 e0       	ldi	r25, 0x09	; 9
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <m_wii_open+0x32>
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <m_wii_open+0x38>
    2f06:	00 00       	nop
    2f08:	88 e5       	ldi	r24, 0x58	; 88
    2f0a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <start_write>
    2f0e:	88 23       	and	r24, r24
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <m_wii_open+0x46>
    2f12:	b8 c0       	rjmp	.+368    	; 0x3084 <m_wii_open+0x1b6>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f1a:	88 23       	and	r24, r24
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <m_wii_open+0x52>
    2f1e:	b4 c0       	rjmp	.+360    	; 0x3088 <m_wii_open+0x1ba>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f26:	88 23       	and	r24, r24
    2f28:	09 f4       	brne	.+2      	; 0x2f2c <m_wii_open+0x5e>
    2f2a:	b0 c0       	rjmp	.+352    	; 0x308c <m_wii_open+0x1be>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f32:	88 23       	and	r24, r24
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <m_wii_open+0x6a>
    2f36:	ac c0       	rjmp	.+344    	; 0x3090 <m_wii_open+0x1c2>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f3e:	88 23       	and	r24, r24
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <m_wii_open+0x76>
    2f42:	a8 c0       	rjmp	.+336    	; 0x3094 <m_wii_open+0x1c6>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f4a:	88 23       	and	r24, r24
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <m_wii_open+0x82>
    2f4e:	a4 c0       	rjmp	.+328    	; 0x3098 <m_wii_open+0x1ca>
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f56:	88 23       	and	r24, r24
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <m_wii_open+0x8e>
    2f5a:	a0 c0       	rjmp	.+320    	; 0x309c <m_wii_open+0x1ce>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f62:	88 23       	and	r24, r24
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <m_wii_open+0x9a>
    2f66:	9c c0       	rjmp	.+312    	; 0x30a0 <m_wii_open+0x1d2>
    2f68:	80 e9       	ldi	r24, 0x90	; 144
    2f6a:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f6e:	88 23       	and	r24, r24
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <m_wii_open+0xa6>
    2f72:	98 c0       	rjmp	.+304    	; 0x30a4 <m_wii_open+0x1d6>
    2f74:	84 e9       	ldi	r24, 0x94	; 148
    2f76:	80 93 bc 00 	sts	0x00BC, r24
    2f7a:	83 ec       	ldi	r24, 0xC3	; 195
    2f7c:	99 e0       	ldi	r25, 0x09	; 9
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <m_wii_open+0xb0>
    2f82:	00 c0       	rjmp	.+0      	; 0x2f84 <m_wii_open+0xb6>
    2f84:	00 00       	nop
    2f86:	88 e5       	ldi	r24, 0x58	; 88
    2f88:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <start_write>
    2f8c:	88 23       	and	r24, r24
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <m_wii_open+0xc4>
    2f90:	8b c0       	rjmp	.+278    	; 0x30a8 <m_wii_open+0x1da>
    2f92:	87 e0       	ldi	r24, 0x07	; 7
    2f94:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2f98:	88 23       	and	r24, r24
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <m_wii_open+0xd0>
    2f9c:	87 c0       	rjmp	.+270    	; 0x30ac <m_wii_open+0x1de>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <m_wii_open+0xdc>
    2fa8:	83 c0       	rjmp	.+262    	; 0x30b0 <m_wii_open+0x1e2>
    2faa:	81 e4       	ldi	r24, 0x41	; 65
    2fac:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2fb0:	88 23       	and	r24, r24
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <m_wii_open+0xe8>
    2fb4:	7f c0       	rjmp	.+254    	; 0x30b4 <m_wii_open+0x1e6>
    2fb6:	84 e9       	ldi	r24, 0x94	; 148
    2fb8:	80 93 bc 00 	sts	0x00BC, r24
    2fbc:	83 ec       	ldi	r24, 0xC3	; 195
    2fbe:	99 e0       	ldi	r25, 0x09	; 9
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <m_wii_open+0xf2>
    2fc4:	00 c0       	rjmp	.+0      	; 0x2fc6 <m_wii_open+0xf8>
    2fc6:	00 00       	nop
    2fc8:	88 e5       	ldi	r24, 0x58	; 88
    2fca:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <start_write>
    2fce:	88 23       	and	r24, r24
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <m_wii_open+0x106>
    2fd2:	72 c0       	rjmp	.+228    	; 0x30b8 <m_wii_open+0x1ea>
    2fd4:	8a e1       	ldi	r24, 0x1A	; 26
    2fd6:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2fda:	88 23       	and	r24, r24
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <m_wii_open+0x112>
    2fde:	6e c0       	rjmp	.+220    	; 0x30bc <m_wii_open+0x1ee>
    2fe0:	80 e4       	ldi	r24, 0x40	; 64
    2fe2:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2fe6:	88 23       	and	r24, r24
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <m_wii_open+0x11e>
    2fea:	6a c0       	rjmp	.+212    	; 0x30c0 <m_wii_open+0x1f2>
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    2ff2:	88 23       	and	r24, r24
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <m_wii_open+0x12a>
    2ff6:	66 c0       	rjmp	.+204    	; 0x30c4 <m_wii_open+0x1f6>
    2ff8:	84 e9       	ldi	r24, 0x94	; 148
    2ffa:	80 93 bc 00 	sts	0x00BC, r24
    2ffe:	83 ec       	ldi	r24, 0xC3	; 195
    3000:	99 e0       	ldi	r25, 0x09	; 9
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <m_wii_open+0x134>
    3006:	00 c0       	rjmp	.+0      	; 0x3008 <m_wii_open+0x13a>
    3008:	00 00       	nop
    300a:	88 e5       	ldi	r24, 0x58	; 88
    300c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <start_write>
    3010:	88 23       	and	r24, r24
    3012:	09 f4       	brne	.+2      	; 0x3016 <m_wii_open+0x148>
    3014:	59 c0       	rjmp	.+178    	; 0x30c8 <m_wii_open+0x1fa>
    3016:	83 e3       	ldi	r24, 0x33	; 51
    3018:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    301c:	88 23       	and	r24, r24
    301e:	09 f4       	brne	.+2      	; 0x3022 <m_wii_open+0x154>
    3020:	55 c0       	rjmp	.+170    	; 0x30cc <m_wii_open+0x1fe>
    3022:	83 e0       	ldi	r24, 0x03	; 3
    3024:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    3028:	88 23       	and	r24, r24
    302a:	09 f4       	brne	.+2      	; 0x302e <m_wii_open+0x160>
    302c:	51 c0       	rjmp	.+162    	; 0x30d0 <m_wii_open+0x202>
    302e:	84 e9       	ldi	r24, 0x94	; 148
    3030:	80 93 bc 00 	sts	0x00BC, r24
    3034:	83 ec       	ldi	r24, 0xC3	; 195
    3036:	99 e0       	ldi	r25, 0x09	; 9
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <m_wii_open+0x16a>
    303c:	00 c0       	rjmp	.+0      	; 0x303e <m_wii_open+0x170>
    303e:	00 00       	nop
    3040:	88 e5       	ldi	r24, 0x58	; 88
    3042:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <start_write>
    3046:	88 23       	and	r24, r24
    3048:	09 f4       	brne	.+2      	; 0x304c <m_wii_open+0x17e>
    304a:	44 c0       	rjmp	.+136    	; 0x30d4 <m_wii_open+0x206>
    304c:	80 e3       	ldi	r24, 0x30	; 48
    304e:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    3052:	88 23       	and	r24, r24
    3054:	09 f4       	brne	.+2      	; 0x3058 <m_wii_open+0x18a>
    3056:	40 c0       	rjmp	.+128    	; 0x30d8 <m_wii_open+0x20a>
    3058:	88 e0       	ldi	r24, 0x08	; 8
    305a:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    305e:	88 23       	and	r24, r24
    3060:	e9 f1       	breq	.+122    	; 0x30dc <m_wii_open+0x20e>
    3062:	84 e9       	ldi	r24, 0x94	; 148
    3064:	80 93 bc 00 	sts	0x00BC, r24
    3068:	83 ec       	ldi	r24, 0xC3	; 195
    306a:	99 e0       	ldi	r25, 0x09	; 9
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	f1 f7       	brne	.-4      	; 0x306c <m_wii_open+0x19e>
    3070:	00 c0       	rjmp	.+0      	; 0x3072 <m_wii_open+0x1a4>
    3072:	00 00       	nop
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	08 95       	ret
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	08 95       	ret
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	08 95       	ret
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	08 95       	ret
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	08 95       	ret
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	08 95       	ret
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	08 95       	ret
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	08 95       	ret
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	08 95       	ret
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	08 95       	ret
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	08 95       	ret
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	08 95       	ret
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	08 95       	ret
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	08 95       	ret
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	08 95       	ret
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	08 95       	ret
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	08 95       	ret
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	08 95       	ret
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	08 95       	ret
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	08 95       	ret
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	08 95       	ret
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	08 95       	ret
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	08 95       	ret
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	08 95       	ret
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	08 95       	ret
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	08 95       	ret
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	08 95       	ret

000030e0 <start_read>:
    30e0:	cf 93       	push	r28
    30e2:	c8 2f       	mov	r28, r24
    30e4:	94 ea       	ldi	r25, 0xA4	; 164
    30e6:	90 93 bc 00 	sts	0x00BC, r25
    30ea:	0e 94 30 17 	call	0x2e60	; 0x2e60 <twi_wait>
    30ee:	88 23       	and	r24, r24
    30f0:	69 f0       	breq	.+26     	; 0x310c <start_read+0x2c>
    30f2:	8c 2f       	mov	r24, r28
    30f4:	88 0f       	add	r24, r24
    30f6:	8f 5f       	subi	r24, 0xFF	; 255
    30f8:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    30fc:	88 34       	cpi	r24, 0x48	; 72
    30fe:	29 f4       	brne	.+10     	; 0x310a <start_read+0x2a>
    3100:	84 e9       	ldi	r24, 0x94	; 148
    3102:	80 93 bc 00 	sts	0x00BC, r24
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	01 c0       	rjmp	.+2      	; 0x310c <start_read+0x2c>
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	cf 91       	pop	r28
    310e:	08 95       	ret

00003110 <m_wii_read>:
    3110:	ef 92       	push	r14
    3112:	ff 92       	push	r15
    3114:	0f 93       	push	r16
    3116:	1f 93       	push	r17
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	60 97       	sbiw	r28, 0x10	; 16
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	08 2f       	mov	r16, r24
    312e:	19 2f       	mov	r17, r25
    3130:	fe 01       	movw	r30, r28
    3132:	31 96       	adiw	r30, 0x01	; 1
    3134:	80 e1       	ldi	r24, 0x10	; 16
    3136:	df 01       	movw	r26, r30
    3138:	1d 92       	st	X+, r1
    313a:	8a 95       	dec	r24
    313c:	e9 f7       	brne	.-6      	; 0x3138 <m_wii_read+0x28>
    313e:	88 e5       	ldi	r24, 0x58	; 88
    3140:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <start_write>
    3144:	88 23       	and	r24, r24
    3146:	09 f4       	brne	.+2      	; 0x314a <m_wii_read+0x3a>
    3148:	6e c0       	rjmp	.+220    	; 0x3226 <m_wii_read+0x116>
    314a:	86 e3       	ldi	r24, 0x36	; 54
    314c:	0e 94 43 17 	call	0x2e86	; 0x2e86 <send_byte>
    3150:	88 23       	and	r24, r24
    3152:	09 f4       	brne	.+2      	; 0x3156 <m_wii_read+0x46>
    3154:	6a c0       	rjmp	.+212    	; 0x322a <m_wii_read+0x11a>
    3156:	84 e9       	ldi	r24, 0x94	; 148
    3158:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    315c:	b8 e0       	ldi	r27, 0x08	; 8
    315e:	ba 95       	dec	r27
    3160:	f1 f7       	brne	.-4      	; 0x315e <m_wii_read+0x4e>
    3162:	00 00       	nop
    3164:	88 e5       	ldi	r24, 0x58	; 88
    3166:	0e 94 70 18 	call	0x30e0	; 0x30e0 <start_read>
    316a:	88 23       	and	r24, r24
    316c:	09 f4       	brne	.+2      	; 0x3170 <m_wii_read+0x60>
    316e:	5f c0       	rjmp	.+190    	; 0x322e <m_wii_read+0x11e>
    3170:	be 01       	movw	r22, r28
    3172:	6f 5f       	subi	r22, 0xFF	; 255
    3174:	7f 4f       	sbci	r23, 0xFF	; 255
    3176:	9e 01       	movw	r18, r28
    3178:	20 5f       	subi	r18, 0xF0	; 240
    317a:	3f 4f       	sbci	r19, 0xFF	; 255
    317c:	ec eb       	ldi	r30, 0xBC	; 188
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	94 ec       	ldi	r25, 0xC4	; 196
    3182:	4b eb       	ldi	r20, 0xBB	; 187
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	90 83       	st	Z, r25
    3188:	80 81       	ld	r24, Z
    318a:	88 23       	and	r24, r24
    318c:	ec f7       	brge	.-6      	; 0x3188 <m_wii_read+0x78>
    318e:	da 01       	movw	r26, r20
    3190:	8c 91       	ld	r24, X
    3192:	db 01       	movw	r26, r22
    3194:	8d 93       	st	X+, r24
    3196:	bd 01       	movw	r22, r26
    3198:	a2 17       	cp	r26, r18
    319a:	b3 07       	cpc	r27, r19
    319c:	a1 f7       	brne	.-24     	; 0x3186 <m_wii_read+0x76>
    319e:	84 e8       	ldi	r24, 0x84	; 132
    31a0:	80 93 bc 00 	sts	0x00BC, r24
    31a4:	ec eb       	ldi	r30, 0xBC	; 188
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	88 23       	and	r24, r24
    31ac:	ec f7       	brge	.-6      	; 0x31a8 <m_wii_read+0x98>
    31ae:	80 91 bb 00 	lds	r24, 0x00BB
    31b2:	88 8b       	std	Y+16, r24	; 0x10
    31b4:	84 e9       	ldi	r24, 0x94	; 148
    31b6:	80 93 bc 00 	sts	0x00BC, r24
    31ba:	fe 01       	movw	r30, r28
    31bc:	34 96       	adiw	r30, 0x04	; 4
    31be:	e0 2e       	mov	r14, r16
    31c0:	f1 2e       	mov	r15, r17
    31c2:	80 81       	ld	r24, Z
    31c4:	98 2f       	mov	r25, r24
    31c6:	90 73       	andi	r25, 0x30	; 48
    31c8:	af 01       	movw	r20, r30
    31ca:	42 50       	subi	r20, 0x02	; 2
    31cc:	51 09       	sbc	r21, r1
    31ce:	da 01       	movw	r26, r20
    31d0:	4c 91       	ld	r20, X
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	b0 e1       	ldi	r27, 0x10	; 16
    31d6:	9b 9f       	mul	r25, r27
    31d8:	40 0d       	add	r20, r0
    31da:	51 1d       	adc	r21, r1
    31dc:	11 24       	eor	r1, r1
    31de:	d7 01       	movw	r26, r14
    31e0:	4d 93       	st	X+, r20
    31e2:	5c 93       	st	X, r21
    31e4:	48 2f       	mov	r20, r24
    31e6:	40 7c       	andi	r20, 0xC0	; 192
    31e8:	50 e0       	ldi	r21, 0x00	; 0
    31ea:	44 0f       	add	r20, r20
    31ec:	55 1f       	adc	r21, r21
    31ee:	44 0f       	add	r20, r20
    31f0:	55 1f       	adc	r21, r21
    31f2:	bf 01       	movw	r22, r30
    31f4:	61 50       	subi	r22, 0x01	; 1
    31f6:	71 09       	sbc	r23, r1
    31f8:	db 01       	movw	r26, r22
    31fa:	9c 91       	ld	r25, X
    31fc:	49 0f       	add	r20, r25
    31fe:	51 1d       	adc	r21, r1
    3200:	d7 01       	movw	r26, r14
    3202:	13 96       	adiw	r26, 0x03	; 3
    3204:	5c 93       	st	X, r21
    3206:	4e 93       	st	-X, r20
    3208:	12 97       	sbiw	r26, 0x02	; 2
    320a:	8f 70       	andi	r24, 0x0F	; 15
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	15 96       	adiw	r26, 0x05	; 5
    3210:	9c 93       	st	X, r25
    3212:	8e 93       	st	-X, r24
    3214:	14 97       	sbiw	r26, 0x04	; 4
    3216:	33 96       	adiw	r30, 0x03	; 3
    3218:	b6 e0       	ldi	r27, 0x06	; 6
    321a:	eb 0e       	add	r14, r27
    321c:	f1 1c       	adc	r15, r1
    321e:	2e 17       	cp	r18, r30
    3220:	3f 07       	cpc	r19, r31
    3222:	79 f6       	brne	.-98     	; 0x31c2 <m_wii_read+0xb2>
    3224:	06 c0       	rjmp	.+12     	; 0x3232 <m_wii_read+0x122>
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	05 c0       	rjmp	.+10     	; 0x3234 <m_wii_read+0x124>
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	03 c0       	rjmp	.+6      	; 0x3234 <m_wii_read+0x124>
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <m_wii_read+0x124>
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	60 96       	adiw	r28, 0x10	; 16
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	08 95       	ret

0000324e <__vector_3>:
		m_wait(wait);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){	
    324e:	1f 92       	push	r1
    3250:	0f 92       	push	r0
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	0f 92       	push	r0
    3256:	11 24       	eor	r1, r1
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	2f 93       	push	r18
    325e:	3f 93       	push	r19
    3260:	4f 93       	push	r20
    3262:	5f 93       	push	r21
    3264:	6f 93       	push	r22
    3266:	7f 93       	push	r23
    3268:	8f 93       	push	r24
    326a:	9f 93       	push	r25
    326c:	af 93       	push	r26
    326e:	bf 93       	push	r27
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	ef 93       	push	r30
    3276:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    3278:	6a e0       	ldi	r22, 0x0A	; 10
    327a:	8e ea       	ldi	r24, 0xAE	; 174
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	0e 94 ed 13 	call	0x27da	; 0x27da <m_rf_read>
	switch(buffer[0]){
    3282:	80 91 ae 01 	lds	r24, 0x01AE
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	fc 01       	movw	r30, r24
    328a:	e0 5a       	subi	r30, 0xA0	; 160
    328c:	f1 09       	sbc	r31, r1
    328e:	e3 32       	cpi	r30, 0x23	; 35
    3290:	f1 05       	cpc	r31, r1
    3292:	08 f0       	brcs	.+2      	; 0x3296 <__vector_3+0x48>
    3294:	4f c1       	rjmp	.+670    	; 0x3534 <__vector_3+0x2e6>
    3296:	e3 5a       	subi	r30, 0xA3	; 163
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    329e:	8f ed       	ldi	r24, 0xDF	; 223
    32a0:	93 e0       	ldi	r25, 0x03	; 3
    32a2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			state = 1;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	90 93 bd 01 	sts	0x01BD, r25
    32ae:	80 93 bc 01 	sts	0x01BC, r24
			break;
    32b2:	40 c1       	rjmp	.+640    	; 0x3534 <__vector_3+0x2e6>
		case 0xA1:
			m_usb_tx_string("Play \n");
    32b4:	88 ed       	ldi	r24, 0xD8	; 216
    32b6:	93 e0       	ldi	r25, 0x03	; 3
    32b8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			if(check(PINC, 7)){
    32bc:	37 9b       	sbis	0x06, 7	; 6
    32be:	19 c0       	rjmp	.+50     	; 0x32f2 <__vector_3+0xa4>
				goal[0] = GateB;  // left gate
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	a9 eb       	ldi	r26, 0xB9	; 185
    32c6:	b3 ec       	ldi	r27, 0xC3	; 195
    32c8:	80 93 35 01 	sts	0x0135, r24
    32cc:	90 93 36 01 	sts	0x0136, r25
    32d0:	a0 93 37 01 	sts	0x0137, r26
    32d4:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = -xline;  // left defense line
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	a8 e4       	ldi	r26, 0x48	; 72
    32de:	b3 ec       	ldi	r27, 0xC3	; 195
    32e0:	80 93 2d 01 	sts	0x012D, r24
    32e4:	90 93 2e 01 	sts	0x012E, r25
    32e8:	a0 93 2f 01 	sts	0x012F, r26
    32ec:	b0 93 30 01 	sts	0x0130, r27
    32f0:	18 c0       	rjmp	.+48     	; 0x3322 <__vector_3+0xd4>
			}
			else{
				goal[0] = GateA;  // right gate
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	a9 eb       	ldi	r26, 0xB9	; 185
    32f8:	b3 e4       	ldi	r27, 0x43	; 67
    32fa:	80 93 35 01 	sts	0x0135, r24
    32fe:	90 93 36 01 	sts	0x0136, r25
    3302:	a0 93 37 01 	sts	0x0137, r26
    3306:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = xline;	// right defense line
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	a8 e4       	ldi	r26, 0x48	; 72
    3310:	b3 e4       	ldi	r27, 0x43	; 67
    3312:	80 93 2d 01 	sts	0x012D, r24
    3316:	90 93 2e 01 	sts	0x012E, r25
    331a:	a0 93 2f 01 	sts	0x012F, r26
    331e:	b0 93 30 01 	sts	0x0130, r27
			}
			state = 2; 
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	90 93 bd 01 	sts	0x01BD, r25
    332a:	80 93 bc 01 	sts	0x01BC, r24
			findPuck(state);
    332e:	0e 94 82 04 	call	0x904	; 0x904 <findPuck>
			localization(state, &goal[0], &c_wii[0], &dir[0]);
    3332:	2a e9       	ldi	r18, 0x9A	; 154
    3334:	31 e0       	ldi	r19, 0x01	; 1
    3336:	42 ea       	ldi	r20, 0xA2	; 162
    3338:	51 e0       	ldi	r21, 0x01	; 1
    333a:	65 e3       	ldi	r22, 0x35	; 53
    333c:	71 e0       	ldi	r23, 0x01	; 1
    333e:	80 91 bc 01 	lds	r24, 0x01BC
    3342:	90 91 bd 01 	lds	r25, 0x01BD
    3346:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <localization>
			deterState(&state);
    334a:	8c eb       	ldi	r24, 0xBC	; 188
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	0e 94 75 07 	call	0xeea	; 0xeea <deterState>
			break;
    3352:	f0 c0       	rjmp	.+480    	; 0x3534 <__vector_3+0x2e6>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    3354:	80 ed       	ldi	r24, 0xD0	; 208
    3356:	93 e0       	ldi	r25, 0x03	; 3
    3358:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			scoreR = buffer[1];
    335c:	80 91 af 01 	lds	r24, 0x01AF
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	90 93 ad 01 	sts	0x01AD, r25
    3366:	80 93 ac 01 	sts	0x01AC, r24
			scoreB = buffer[2];
    336a:	80 91 b0 01 	lds	r24, 0x01B0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	90 93 ab 01 	sts	0x01AB, r25
    3374:	80 93 aa 01 	sts	0x01AA, r24
			OCR1B = 0;
    3378:	10 92 8b 00 	sts	0x008B, r1
    337c:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3380:	10 92 8d 00 	sts	0x008D, r1
    3384:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    3388:	10 92 bd 01 	sts	0x01BD, r1
    338c:	10 92 bc 01 	sts	0x01BC, r1
			break;
    3390:	d1 c0       	rjmp	.+418    	; 0x3534 <__vector_3+0x2e6>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    3392:	88 ec       	ldi	r24, 0xC8	; 200
    3394:	93 e0       	ldi	r25, 0x03	; 3
    3396:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			scoreR = buffer[1];
    339a:	80 91 af 01 	lds	r24, 0x01AF
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	90 93 ad 01 	sts	0x01AD, r25
    33a4:	80 93 ac 01 	sts	0x01AC, r24
			scoreB = buffer[2];
    33a8:	80 91 b0 01 	lds	r24, 0x01B0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	90 93 ab 01 	sts	0x01AB, r25
    33b2:	80 93 aa 01 	sts	0x01AA, r24
			OCR1B = 0;
    33b6:	10 92 8b 00 	sts	0x008B, r1
    33ba:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    33be:	10 92 8d 00 	sts	0x008D, r1
    33c2:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    33c6:	10 92 bd 01 	sts	0x01BD, r1
    33ca:	10 92 bc 01 	sts	0x01BC, r1
			break;
    33ce:	b2 c0       	rjmp	.+356    	; 0x3534 <__vector_3+0x2e6>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    33d0:	81 ec       	ldi	r24, 0xC1	; 193
    33d2:	93 e0       	ldi	r25, 0x03	; 3
    33d4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			state = 0;
    33d8:	10 92 bd 01 	sts	0x01BD, r1
    33dc:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    33e0:	10 92 8b 00 	sts	0x008B, r1
    33e4:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    33e8:	10 92 8d 00 	sts	0x008D, r1
    33ec:	10 92 8c 00 	sts	0x008C, r1
			break;
    33f0:	a1 c0       	rjmp	.+322    	; 0x3534 <__vector_3+0x2e6>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    33f2:	87 eb       	ldi	r24, 0xB7	; 183
    33f4:	93 e0       	ldi	r25, 0x03	; 3
    33f6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			state = 0;
    33fa:	10 92 bd 01 	sts	0x01BD, r1
    33fe:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    3402:	10 92 8b 00 	sts	0x008B, r1
    3406:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;			
    340a:	10 92 8d 00 	sts	0x008D, r1
    340e:	10 92 8c 00 	sts	0x008C, r1
			break;
    3412:	90 c0       	rjmp	.+288    	; 0x3534 <__vector_3+0x2e6>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    3414:	8c ea       	ldi	r24, 0xAC	; 172
    3416:	93 e0       	ldi	r25, 0x03	; 3
    3418:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			state = 0;
    341c:	10 92 bd 01 	sts	0x01BD, r1
    3420:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    3424:	10 92 8b 00 	sts	0x008B, r1
    3428:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    342c:	10 92 8d 00 	sts	0x008D, r1
    3430:	10 92 8c 00 	sts	0x008C, r1
			break;
    3434:	7f c0       	rjmp	.+254    	; 0x3534 <__vector_3+0x2e6>
			
		case 0xC1:	// teammates lost the puck, extract No. location
			senderNo = buffer[1]; // buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
    3436:	80 91 af 01 	lds	r24, 0x01AF
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	90 93 99 01 	sts	0x0199, r25
    3440:	80 93 98 01 	sts	0x0198, r24
			sender_loc[0] = *(int*)&buffer[2];
    3444:	04 e9       	ldi	r16, 0x94	; 148
    3446:	11 e0       	ldi	r17, 0x01	; 1
    3448:	ee ea       	ldi	r30, 0xAE	; 174
    344a:	f1 e0       	ldi	r31, 0x01	; 1
    344c:	82 81       	ldd	r24, Z+2	; 0x02
    344e:	93 81       	ldd	r25, Z+3	; 0x03
    3450:	d8 01       	movw	r26, r16
    3452:	8d 93       	st	X+, r24
    3454:	9c 93       	st	X, r25
			sender_loc[1] = *(int*)&buffer[4];
    3456:	c6 e9       	ldi	r28, 0x96	; 150
    3458:	d1 e0       	ldi	r29, 0x01	; 1
    345a:	84 81       	ldd	r24, Z+4	; 0x04
    345c:	95 81       	ldd	r25, Z+5	; 0x05
    345e:	99 83       	std	Y+1, r25	; 0x01
    3460:	88 83       	st	Y, r24
			m_usb_tx_string("No. ");
    3462:	87 ea       	ldi	r24, 0xA7	; 167
    3464:	93 e0       	ldi	r25, 0x03	; 3
    3466:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_int(senderNo);
    346a:	80 91 98 01 	lds	r24, 0x0198
    346e:	90 91 99 01 	lds	r25, 0x0199
    3472:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
			m_usb_tx_string("lost the puck!\n");
    3476:	87 e9       	ldi	r24, 0x97	; 151
    3478:	93 e0       	ldi	r25, 0x03	; 3
    347a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_string("Its location is: ");
    347e:	85 e8       	ldi	r24, 0x85	; 133
    3480:	93 e0       	ldi	r25, 0x03	; 3
    3482:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_int(sender_loc[0]);
    3486:	f8 01       	movw	r30, r16
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
			m_usb_tx_string("		y:");
    3490:	80 e8       	ldi	r24, 0x80	; 128
    3492:	93 e0       	ldi	r25, 0x03	; 3
    3494:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_int(sender_loc[1]);
    3498:	88 81       	ld	r24, Y
    349a:	99 81       	ldd	r25, Y+1	; 0x01
    349c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
			m_usb_tx_string("\n");
    34a0:	8e e7       	ldi	r24, 0x7E	; 126
    34a2:	93 e0       	ldi	r25, 0x03	; 3
    34a4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			state = 2;
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	90 93 bd 01 	sts	0x01BD, r25
    34b0:	80 93 bc 01 	sts	0x01BC, r24
			break;
    34b4:	3f c0       	rjmp	.+126    	; 0x3534 <__vector_3+0x2e6>
		case 0xC2: // teammates got the puck, extract No. and location
			senderNo = buffer[1]; // buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
    34b6:	80 91 af 01 	lds	r24, 0x01AF
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	90 93 99 01 	sts	0x0199, r25
    34c0:	80 93 98 01 	sts	0x0198, r24
			sender_loc[0] = *(int*)&buffer[2];
    34c4:	04 e9       	ldi	r16, 0x94	; 148
    34c6:	11 e0       	ldi	r17, 0x01	; 1
    34c8:	ee ea       	ldi	r30, 0xAE	; 174
    34ca:	f1 e0       	ldi	r31, 0x01	; 1
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	93 81       	ldd	r25, Z+3	; 0x03
    34d0:	d8 01       	movw	r26, r16
    34d2:	8d 93       	st	X+, r24
    34d4:	9c 93       	st	X, r25
			sender_loc[1] = *(int*)&buffer[4];
    34d6:	c6 e9       	ldi	r28, 0x96	; 150
    34d8:	d1 e0       	ldi	r29, 0x01	; 1
    34da:	84 81       	ldd	r24, Z+4	; 0x04
    34dc:	95 81       	ldd	r25, Z+5	; 0x05
    34de:	99 83       	std	Y+1, r25	; 0x01
    34e0:	88 83       	st	Y, r24
			m_usb_tx_string("No. ");		
    34e2:	89 e7       	ldi	r24, 0x79	; 121
    34e4:	93 e0       	ldi	r25, 0x03	; 3
    34e6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_int(senderNo);
    34ea:	80 91 98 01 	lds	r24, 0x0198
    34ee:	90 91 99 01 	lds	r25, 0x0199
    34f2:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
			m_usb_tx_string("got the puck!\n");
    34f6:	8a e6       	ldi	r24, 0x6A	; 106
    34f8:	93 e0       	ldi	r25, 0x03	; 3
    34fa:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_string("Its location is: ");
    34fe:	88 e5       	ldi	r24, 0x58	; 88
    3500:	93 e0       	ldi	r25, 0x03	; 3
    3502:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_int(sender_loc[0]);
    3506:	f8 01       	movw	r30, r16
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
			m_usb_tx_string("		y:");
    3510:	83 e5       	ldi	r24, 0x53	; 83
    3512:	93 e0       	ldi	r25, 0x03	; 3
    3514:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			m_usb_tx_int(sender_loc[1]);
    3518:	88 81       	ld	r24, Y
    351a:	99 81       	ldd	r25, Y+1	; 0x01
    351c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
			m_usb_tx_string("\n");
    3520:	81 e5       	ldi	r24, 0x51	; 81
    3522:	93 e0       	ldi	r25, 0x03	; 3
    3524:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
			state = 4;
    3528:	84 e0       	ldi	r24, 0x04	; 4
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	90 93 bd 01 	sts	0x01BD, r25
    3530:	80 93 bc 01 	sts	0x01BC, r24
			break;
		default:
			break;
	}
}
    3534:	ff 91       	pop	r31
    3536:	ef 91       	pop	r30
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	bf 91       	pop	r27
    353e:	af 91       	pop	r26
    3540:	9f 91       	pop	r25
    3542:	8f 91       	pop	r24
    3544:	7f 91       	pop	r23
    3546:	6f 91       	pop	r22
    3548:	5f 91       	pop	r21
    354a:	4f 91       	pop	r20
    354c:	3f 91       	pop	r19
    354e:	2f 91       	pop	r18
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	0f 90       	pop	r0
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	0f 90       	pop	r0
    355a:	1f 90       	pop	r1
    355c:	18 95       	reti

0000355e <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    355e:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    3560:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    3562:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    3564:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
    3566:	80 e2       	ldi	r24, 0x20	; 32
    3568:	93 e0       	ldi	r25, 0x03	; 3
    356a:	90 93 89 00 	sts	0x0089, r25
    356e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    3572:	10 92 8b 00 	sts	0x008B, r1
    3576:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
    357a:	10 92 8d 00 	sts	0x008D, r1
    357e:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    3582:	a1 e8       	ldi	r26, 0x81	; 129
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	8c 91       	ld	r24, X
    3588:	80 61       	ori	r24, 0x10	; 16
    358a:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    358c:	8c 91       	ld	r24, X
    358e:	88 60       	ori	r24, 0x08	; 8
    3590:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    3592:	e0 e8       	ldi	r30, 0x80	; 128
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	82 60       	ori	r24, 0x02	; 2
    359a:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    359c:	80 81       	ld	r24, Z
    359e:	81 60       	ori	r24, 0x01	; 1
    35a0:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    35a2:	80 81       	ld	r24, Z
    35a4:	80 62       	ori	r24, 0x20	; 32
    35a6:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    35a8:	80 81       	ld	r24, Z
    35aa:	8f 7e       	andi	r24, 0xEF	; 239
    35ac:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    35ae:	80 81       	ld	r24, Z
    35b0:	88 60       	ori	r24, 0x08	; 8
    35b2:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    35b4:	80 81       	ld	r24, Z
    35b6:	8b 7f       	andi	r24, 0xFB	; 251
    35b8:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    35ba:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    35bc:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    35be:	8c 91       	ld	r24, X
    35c0:	8b 7f       	andi	r24, 0xFB	; 251
    35c2:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    35c4:	8c 91       	ld	r24, X
    35c6:	8d 7f       	andi	r24, 0xFD	; 253
    35c8:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    35ca:	8c 91       	ld	r24, X
    35cc:	81 60       	ori	r24, 0x01	; 1
    35ce:	8c 93       	st	X, r24
    35d0:	08 95       	ret

000035d2 <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    35d2:	e1 e6       	ldi	r30, 0x61	; 97
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	80 e8       	ldi	r24, 0x80	; 128
    35d8:	80 83       	st	Z, r24
    35da:	10 82       	st	Z, r1
	
	state = 2;
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	90 93 bd 01 	sts	0x01BD, r25
    35e4:	80 93 bc 01 	sts	0x01BC, r24
	
	m_usb_init();
    35e8:	0e 94 ab 14 	call	0x2956	; 0x2956 <m_usb_init>
	
	m_wii_open();
    35ec:	0e 94 67 17 	call	0x2ece	; 0x2ece <m_wii_open>
	//m_red(ON);
	//while(!m_wii_open());
	//m_red(OFF);
	
	m_red(ON);
    35f0:	6e 9a       	sbi	0x0d, 6	; 13
    35f2:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    35f4:	0e 94 86 13 	call	0x270c	; 0x270c <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    35f8:	4a e0       	ldi	r20, 0x0A	; 10
    35fa:	6c e0       	ldi	r22, 0x0C	; 12
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	0e 94 97 13 	call	0x272e	; 0x272e <m_rf_open>
	m_red(OFF);
    3602:	6e 9a       	sbi	0x0d, 6	; 13
    3604:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    3606:	0e 94 af 1a 	call	0x355e	; 0x355e <init_timer>
	init_ADC();
    360a:	0e 94 c9 02 	call	0x592	; 0x592 <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    360e:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
    3610:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
    3612:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
    3614:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    3616:	23 9a       	sbi	0x04, 3	; 4

	if(check(PINC, 7)){
    3618:	37 9b       	sbis	0x06, 7	; 6
    361a:	19 c0       	rjmp	.+50     	; 0x364e <main+0x7c>
		goal[0] = GateB;  // left gate
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	a9 eb       	ldi	r26, 0xB9	; 185
    3622:	b3 ec       	ldi	r27, 0xC3	; 195
    3624:	80 93 35 01 	sts	0x0135, r24
    3628:	90 93 36 01 	sts	0x0136, r25
    362c:	a0 93 37 01 	sts	0x0137, r26
    3630:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = -xline;  // left defense line
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	a8 e4       	ldi	r26, 0x48	; 72
    363a:	b3 ec       	ldi	r27, 0xC3	; 195
    363c:	80 93 2d 01 	sts	0x012D, r24
    3640:	90 93 2e 01 	sts	0x012E, r25
    3644:	a0 93 2f 01 	sts	0x012F, r26
    3648:	b0 93 30 01 	sts	0x0130, r27
    364c:	18 c0       	rjmp	.+48     	; 0x367e <main+0xac>
	}
	else{
		goal[0] = GateA;  // right gate
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	a9 eb       	ldi	r26, 0xB9	; 185
    3654:	b3 e4       	ldi	r27, 0x43	; 67
    3656:	80 93 35 01 	sts	0x0135, r24
    365a:	90 93 36 01 	sts	0x0136, r25
    365e:	a0 93 37 01 	sts	0x0137, r26
    3662:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = xline;	// right defense line
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	a8 e4       	ldi	r26, 0x48	; 72
    366c:	b3 e4       	ldi	r27, 0x43	; 67
    366e:	80 93 2d 01 	sts	0x012D, r24
    3672:	90 93 2e 01 	sts	0x012E, r25
    3676:	a0 93 2f 01 	sts	0x012F, r26
    367a:	b0 93 30 01 	sts	0x0130, r27
	}
	if(check(PINC, 6)){
    367e:	36 9b       	sbis	0x06, 6	; 6
    3680:	1c c0       	rjmp	.+56     	; 0x36ba <main+0xe8>
		set(PORTB, 2); // red light
    3682:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
    3684:	2b 98       	cbi	0x05, 3	; 5
				}
				m_red(TOGGLE);
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    3686:	68 94       	set
    3688:	bb 24       	eor	r11, r11
    368a:	b6 f8       	bld	r11, 6
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
				m_usb_tx_string("\n");
				break;
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    368c:	68 94       	set
    368e:	aa 24       	eor	r10, r10
    3690:	a2 f8       	bld	r10, 2
				m_red(TOGGLE);
				localization(state, &desPos[0], &c_wii[0], &dir[0]);
				m_usb_tx_string("Desire Position = ");
				m_usb_tx_int(desPos[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(desPos[1]);
    3692:	0f 2e       	mov	r0, r31
    3694:	f1 e3       	ldi	r31, 0x31	; 49
    3696:	cf 2e       	mov	r12, r31
    3698:	f1 e0       	ldi	r31, 0x01	; 1
    369a:	df 2e       	mov	r13, r31
    369c:	f0 2d       	mov	r31, r0
					m_usb_tx_string("sent lost messsage.\n");
				}
				m_usb_tx_string("goal = ");
				m_usb_tx_int(goal[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
    369e:	0f 2e       	mov	r0, r31
    36a0:	f9 e3       	ldi	r31, 0x39	; 57
    36a2:	ef 2e       	mov	r14, r31
    36a4:	f1 e0       	ldi	r31, 0x01	; 1
    36a6:	ff 2e       	mov	r15, r31
    36a8:	f0 2d       	mov	r31, r0
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
    36aa:	0a e8       	ldi	r16, 0x8A	; 138
    36ac:	10 e0       	ldi	r17, 0x00	; 0
				OCR1C = 0;
    36ae:	cc e8       	ldi	r28, 0x8C	; 140
    36b0:	d0 e0       	ldi	r29, 0x00	; 0
				if(check(PINC, 6)){
					toggle(PORTB, 2); // blue Red
					clear(PORTB, 3);
				}
				else{
					toggle(PORTB, 3); // red blue
    36b2:	68 94       	set
    36b4:	99 24       	eor	r9, r9
    36b6:	93 f8       	bld	r9, 3
    36b8:	03 c0       	rjmp	.+6      	; 0x36c0 <main+0xee>
	if(check(PINC, 6)){
		set(PORTB, 2); // red light
		clear(PORTB, 3);
	}
	else{
		set(PORTB, 3); // blue light
    36ba:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
    36bc:	2a 98       	cbi	0x05, 2	; 5
    36be:	e3 cf       	rjmp	.-58     	; 0x3686 <main+0xb4>
	}
	while(1)
	{	
		m_usb_tx_string("state: ");
    36c0:	8b e4       	ldi	r24, 0x4B	; 75
    36c2:	94 e0       	ldi	r25, 0x04	; 4
    36c4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		m_usb_tx_int(state);
    36c8:	80 91 bc 01 	lds	r24, 0x01BC
    36cc:	90 91 bd 01 	lds	r25, 0x01BD
    36d0:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    36d4:	89 e4       	ldi	r24, 0x49	; 73
    36d6:	94 e0       	ldi	r25, 0x04	; 4
    36d8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		switch(state){
    36dc:	80 91 bc 01 	lds	r24, 0x01BC
    36e0:	90 91 bd 01 	lds	r25, 0x01BD
    36e4:	82 30       	cpi	r24, 0x02	; 2
    36e6:	91 05       	cpc	r25, r1
    36e8:	79 f1       	breq	.+94     	; 0x3748 <main+0x176>
    36ea:	2c f4       	brge	.+10     	; 0x36f6 <main+0x124>
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	69 f0       	breq	.+26     	; 0x370a <main+0x138>
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	89 f0       	breq	.+34     	; 0x3716 <main+0x144>
    36f4:	fd c0       	rjmp	.+506    	; 0x38f0 <main+0x31e>
    36f6:	84 30       	cpi	r24, 0x04	; 4
    36f8:	91 05       	cpc	r25, r1
    36fa:	09 f4       	brne	.+2      	; 0x36fe <main+0x12c>
    36fc:	a3 c0       	rjmp	.+326    	; 0x3844 <main+0x272>
    36fe:	0c f4       	brge	.+2      	; 0x3702 <main+0x130>
    3700:	54 c0       	rjmp	.+168    	; 0x37aa <main+0x1d8>
    3702:	05 97       	sbiw	r24, 0x05	; 5
    3704:	09 f4       	brne	.+2      	; 0x3708 <main+0x136>
    3706:	d6 c0       	rjmp	.+428    	; 0x38b4 <main+0x2e2>
    3708:	f3 c0       	rjmp	.+486    	; 0x38f0 <main+0x31e>
			case 0:
				// stop
				OCR1B = 0;
    370a:	f8 01       	movw	r30, r16
    370c:	11 82       	std	Z+1, r1	; 0x01
    370e:	10 82       	st	Z, r1
				OCR1C = 0;
    3710:	19 82       	std	Y+1, r1	; 0x01
    3712:	18 82       	st	Y, r1
				break;
    3714:	ed c0       	rjmp	.+474    	; 0x38f0 <main+0x31e>
			case 1:		// comm test, flash a LED
				if(check(PINC, 6)){
    3716:	36 9b       	sbis	0x06, 6	; 6
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <main+0x152>
					toggle(PORTB, 2); // blue Red
    371a:	85 b1       	in	r24, 0x05	; 5
    371c:	8a 25       	eor	r24, r10
    371e:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 3);
    3720:	2b 98       	cbi	0x05, 3	; 5
    3722:	04 c0       	rjmp	.+8      	; 0x372c <main+0x15a>
				}
				else{
					toggle(PORTB, 3); // red blue
    3724:	85 b1       	in	r24, 0x05	; 5
    3726:	89 25       	eor	r24, r9
    3728:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 2);
    372a:	2a 98       	cbi	0x05, 2	; 5
				}
				m_red(TOGGLE);
    372c:	6e 9a       	sbi	0x0d, 6	; 13
    372e:	8e b1       	in	r24, 0x0e	; 14
    3730:	8b 25       	eor	r24, r11
    3732:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3734:	ff e3       	ldi	r31, 0x3F	; 63
    3736:	2d e0       	ldi	r18, 0x0D	; 13
    3738:	83 e0       	ldi	r24, 0x03	; 3
    373a:	f1 50       	subi	r31, 0x01	; 1
    373c:	20 40       	sbci	r18, 0x00	; 0
    373e:	80 40       	sbci	r24, 0x00	; 0
    3740:	e1 f7       	brne	.-8      	; 0x373a <main+0x168>
    3742:	00 c0       	rjmp	.+0      	; 0x3744 <main+0x172>
    3744:	00 00       	nop
    3746:	d4 c0       	rjmp	.+424    	; 0x38f0 <main+0x31e>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    3748:	6e 9a       	sbi	0x0d, 6	; 13
    374a:	8e b1       	in	r24, 0x0e	; 14
    374c:	8b 25       	eor	r24, r11
    374e:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    3750:	6a 9a       	sbi	0x0d, 2	; 13
    3752:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    3754:	80 91 bc 01 	lds	r24, 0x01BC
    3758:	90 91 bd 01 	lds	r25, 0x01BD
    375c:	0e 94 82 04 	call	0x904	; 0x904 <findPuck>
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    3760:	2a e9       	ldi	r18, 0x9A	; 154
    3762:	31 e0       	ldi	r19, 0x01	; 1
    3764:	42 ea       	ldi	r20, 0xA2	; 162
    3766:	51 e0       	ldi	r21, 0x01	; 1
    3768:	65 e3       	ldi	r22, 0x35	; 53
    376a:	71 e0       	ldi	r23, 0x01	; 1
    376c:	80 91 bc 01 	lds	r24, 0x01BC
    3770:	90 91 bd 01 	lds	r25, 0x01BD
    3774:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <localization>
				deterState(&state);
    3778:	8c eb       	ldi	r24, 0xBC	; 188
    377a:	91 e0       	ldi	r25, 0x01	; 1
    377c:	0e 94 75 07 	call	0xeea	; 0xeea <deterState>
				if(state != 2){
    3780:	80 91 bc 01 	lds	r24, 0x01BC
    3784:	90 91 bd 01 	lds	r25, 0x01BD
    3788:	82 30       	cpi	r24, 0x02	; 2
    378a:	91 05       	cpc	r25, r1
    378c:	09 f4       	brne	.+2      	; 0x3790 <main+0x1be>
    378e:	b0 c0       	rjmp	.+352    	; 0x38f0 <main+0x31e>
					send_message(state, No, &buffer[0], &c_wii[0]);
    3790:	22 ea       	ldi	r18, 0xA2	; 162
    3792:	31 e0       	ldi	r19, 0x01	; 1
    3794:	4e ea       	ldi	r20, 0xAE	; 174
    3796:	51 e0       	ldi	r21, 0x01	; 1
    3798:	61 e0       	ldi	r22, 0x01	; 1
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	0e 94 49 02 	call	0x492	; 0x492 <send_message>
					m_usb_tx_string("sent found messsage.\n");
    37a0:	83 e3       	ldi	r24, 0x33	; 51
    37a2:	94 e0       	ldi	r25, 0x04	; 4
    37a4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
    37a8:	a3 c0       	rjmp	.+326    	; 0x38f0 <main+0x31e>
				}
				break;
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    37aa:	6a 9a       	sbi	0x0d, 2	; 13
    37ac:	8e b1       	in	r24, 0x0e	; 14
    37ae:	8a 25       	eor	r24, r10
    37b0:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    37b2:	6e 9a       	sbi	0x0d, 6	; 13
    37b4:	76 9a       	sbi	0x0e, 6	; 14
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    37b6:	2a e9       	ldi	r18, 0x9A	; 154
    37b8:	31 e0       	ldi	r19, 0x01	; 1
    37ba:	42 ea       	ldi	r20, 0xA2	; 162
    37bc:	51 e0       	ldi	r21, 0x01	; 1
    37be:	65 e3       	ldi	r22, 0x35	; 53
    37c0:	71 e0       	ldi	r23, 0x01	; 1
    37c2:	80 91 bc 01 	lds	r24, 0x01BC
    37c6:	90 91 bd 01 	lds	r25, 0x01BD
    37ca:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <localization>
				deterState(&state);
    37ce:	8c eb       	ldi	r24, 0xBC	; 188
    37d0:	91 e0       	ldi	r25, 0x01	; 1
    37d2:	0e 94 75 07 	call	0xeea	; 0xeea <deterState>
				if(state != 3){
    37d6:	80 91 bc 01 	lds	r24, 0x01BC
    37da:	90 91 bd 01 	lds	r25, 0x01BD
    37de:	83 30       	cpi	r24, 0x03	; 3
    37e0:	91 05       	cpc	r25, r1
    37e2:	61 f0       	breq	.+24     	; 0x37fc <main+0x22a>
					send_message(state, No, &buffer[0], &c_wii[0]);
    37e4:	22 ea       	ldi	r18, 0xA2	; 162
    37e6:	31 e0       	ldi	r19, 0x01	; 1
    37e8:	4e ea       	ldi	r20, 0xAE	; 174
    37ea:	51 e0       	ldi	r21, 0x01	; 1
    37ec:	61 e0       	ldi	r22, 0x01	; 1
    37ee:	70 e0       	ldi	r23, 0x00	; 0
    37f0:	0e 94 49 02 	call	0x492	; 0x492 <send_message>
					m_usb_tx_string("sent lost messsage.\n");
    37f4:	8e e1       	ldi	r24, 0x1E	; 30
    37f6:	94 e0       	ldi	r25, 0x04	; 4
    37f8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				}
				m_usb_tx_string("goal = ");
    37fc:	86 e1       	ldi	r24, 0x16	; 22
    37fe:	94 e0       	ldi	r25, 0x04	; 4
    3800:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				m_usb_tx_int(goal[0]);
    3804:	60 91 35 01 	lds	r22, 0x0135
    3808:	70 91 36 01 	lds	r23, 0x0136
    380c:	80 91 37 01 	lds	r24, 0x0137
    3810:	90 91 38 01 	lds	r25, 0x0138
    3814:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    3818:	cb 01       	movw	r24, r22
    381a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
				m_usb_tx_string(", ");
    381e:	83 e1       	ldi	r24, 0x13	; 19
    3820:	94 e0       	ldi	r25, 0x04	; 4
    3822:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				m_usb_tx_int(goal[1]);
    3826:	f7 01       	movw	r30, r14
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    3834:	cb 01       	movw	r24, r22
    3836:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
				m_usb_tx_string("\n");
    383a:	81 e1       	ldi	r24, 0x11	; 17
    383c:	94 e0       	ldi	r25, 0x04	; 4
    383e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				break;
    3842:	56 c0       	rjmp	.+172    	; 0x38f0 <main+0x31e>
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    3844:	6a 9a       	sbi	0x0d, 2	; 13
    3846:	8e b1       	in	r24, 0x0e	; 14
    3848:	8a 25       	eor	r24, r10
    384a:	8e b9       	out	0x0e, r24	; 14
				m_red(TOGGLE);
    384c:	6e 9a       	sbi	0x0d, 6	; 13
    384e:	8e b1       	in	r24, 0x0e	; 14
    3850:	8b 25       	eor	r24, r11
    3852:	8e b9       	out	0x0e, r24	; 14
				localization(state, &desPos[0], &c_wii[0], &dir[0]);
    3854:	2a e9       	ldi	r18, 0x9A	; 154
    3856:	31 e0       	ldi	r19, 0x01	; 1
    3858:	42 ea       	ldi	r20, 0xA2	; 162
    385a:	51 e0       	ldi	r21, 0x01	; 1
    385c:	6d e2       	ldi	r22, 0x2D	; 45
    385e:	71 e0       	ldi	r23, 0x01	; 1
    3860:	80 91 bc 01 	lds	r24, 0x01BC
    3864:	90 91 bd 01 	lds	r25, 0x01BD
    3868:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <localization>
				m_usb_tx_string("Desire Position = ");
    386c:	8e ef       	ldi	r24, 0xFE	; 254
    386e:	93 e0       	ldi	r25, 0x03	; 3
    3870:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				m_usb_tx_int(desPos[0]);
    3874:	60 91 2d 01 	lds	r22, 0x012D
    3878:	70 91 2e 01 	lds	r23, 0x012E
    387c:	80 91 2f 01 	lds	r24, 0x012F
    3880:	90 91 30 01 	lds	r25, 0x0130
    3884:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    3888:	cb 01       	movw	r24, r22
    388a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
				m_usb_tx_string(", ");
    388e:	8b ef       	ldi	r24, 0xFB	; 251
    3890:	93 e0       	ldi	r25, 0x03	; 3
    3892:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				m_usb_tx_int(desPos[1]);
    3896:	f6 01       	movw	r30, r12
    3898:	60 81       	ld	r22, Z
    389a:	71 81       	ldd	r23, Z+1	; 0x01
    389c:	82 81       	ldd	r24, Z+2	; 0x02
    389e:	93 81       	ldd	r25, Z+3	; 0x03
    38a0:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    38a4:	cb 01       	movw	r24, r22
    38a6:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
				m_usb_tx_string("\n");
    38aa:	89 ef       	ldi	r24, 0xF9	; 249
    38ac:	93 e0       	ldi	r25, 0x03	; 3
    38ae:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
				break;
    38b2:	1e c0       	rjmp	.+60     	; 0x38f0 <main+0x31e>
			case 5:		// defense mode
				m_red(TOGGLE);
    38b4:	6e 9a       	sbi	0x0d, 6	; 13
    38b6:	8e b1       	in	r24, 0x0e	; 14
    38b8:	8b 25       	eor	r24, r11
    38ba:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    38bc:	6a 9a       	sbi	0x0d, 2	; 13
    38be:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    38c0:	80 91 bc 01 	lds	r24, 0x01BC
    38c4:	90 91 bd 01 	lds	r25, 0x01BD
    38c8:	0e 94 82 04 	call	0x904	; 0x904 <findPuck>
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    38cc:	2a e9       	ldi	r18, 0x9A	; 154
    38ce:	31 e0       	ldi	r19, 0x01	; 1
    38d0:	42 ea       	ldi	r20, 0xA2	; 162
    38d2:	51 e0       	ldi	r21, 0x01	; 1
    38d4:	65 e3       	ldi	r22, 0x35	; 53
    38d6:	71 e0       	ldi	r23, 0x01	; 1
    38d8:	80 91 bc 01 	lds	r24, 0x01BC
    38dc:	90 91 bd 01 	lds	r25, 0x01BD
    38e0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <localization>
				ifGotoPuck(&state, &dir[0]);
    38e4:	6a e9       	ldi	r22, 0x9A	; 154
    38e6:	71 e0       	ldi	r23, 0x01	; 1
    38e8:	8c eb       	ldi	r24, 0xBC	; 188
    38ea:	91 e0       	ldi	r25, 0x01	; 1
    38ec:	0e 94 9c 07 	call	0xf38	; 0xf38 <ifGotoPuck>
				break;
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    38f0:	80 ef       	ldi	r24, 0xF0	; 240
    38f2:	93 e0       	ldi	r25, 0x03	; 3
    38f4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		m_usb_tx_int(OCR1B);
    38f8:	f8 01       	movw	r30, r16
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
		m_usb_tx_string(", ");
    3902:	8d ee       	ldi	r24, 0xED	; 237
    3904:	93 e0       	ldi	r25, 0x03	; 3
    3906:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
		m_usb_tx_int(OCR1C);
    390a:	88 81       	ld	r24, Y
    390c:	99 81       	ldd	r25, Y+1	; 0x01
    390e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    3912:	8b ee       	ldi	r24, 0xEB	; 235
    3914:	93 e0       	ldi	r25, 0x03	; 3
    3916:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <print_P>
    391a:	85 ea       	ldi	r24, 0xA5	; 165
    391c:	9e e0       	ldi	r25, 0x0E	; 14
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <main+0x34c>
    3922:	00 c0       	rjmp	.+0      	; 0x3924 <main+0x352>
    3924:	00 00       	nop
    3926:	cc ce       	rjmp	.-616    	; 0x36c0 <main+0xee>

00003928 <acos>:
    3928:	9f 93       	push	r25
    392a:	9f 77       	andi	r25, 0x7F	; 127
    392c:	4a d1       	rcall	.+660    	; 0x3bc2 <__fp_arccos>
    392e:	0f 90       	pop	r0
    3930:	00 20       	and	r0, r0
    3932:	3a f4       	brpl	.+14     	; 0x3942 <acos+0x1a>
    3934:	90 58       	subi	r25, 0x80	; 128
    3936:	a2 ea       	ldi	r26, 0xA2	; 162
    3938:	2a ed       	ldi	r18, 0xDA	; 218
    393a:	3f e0       	ldi	r19, 0x0F	; 15
    393c:	49 e4       	ldi	r20, 0x49	; 73
    393e:	50 e4       	ldi	r21, 0x40	; 64
    3940:	13 d0       	rcall	.+38     	; 0x3968 <__addsf3x>
    3942:	ba c1       	rjmp	.+884    	; 0x3cb8 <__fp_round>

00003944 <__subsf3>:
    3944:	50 58       	subi	r21, 0x80	; 128

00003946 <__addsf3>:
    3946:	bb 27       	eor	r27, r27
    3948:	aa 27       	eor	r26, r26
    394a:	0e d0       	rcall	.+28     	; 0x3968 <__addsf3x>
    394c:	b5 c1       	rjmp	.+874    	; 0x3cb8 <__fp_round>
    394e:	a6 d1       	rcall	.+844    	; 0x3c9c <__fp_pscA>
    3950:	30 f0       	brcs	.+12     	; 0x395e <__addsf3+0x18>
    3952:	ab d1       	rcall	.+854    	; 0x3caa <__fp_pscB>
    3954:	20 f0       	brcs	.+8      	; 0x395e <__addsf3+0x18>
    3956:	31 f4       	brne	.+12     	; 0x3964 <__addsf3+0x1e>
    3958:	9f 3f       	cpi	r25, 0xFF	; 255
    395a:	11 f4       	brne	.+4      	; 0x3960 <__addsf3+0x1a>
    395c:	1e f4       	brtc	.+6      	; 0x3964 <__addsf3+0x1e>
    395e:	76 c1       	rjmp	.+748    	; 0x3c4c <__fp_nan>
    3960:	0e f4       	brtc	.+2      	; 0x3964 <__addsf3+0x1e>
    3962:	e0 95       	com	r30
    3964:	e7 fb       	bst	r30, 7
    3966:	6c c1       	rjmp	.+728    	; 0x3c40 <__fp_inf>

00003968 <__addsf3x>:
    3968:	e9 2f       	mov	r30, r25
    396a:	b7 d1       	rcall	.+878    	; 0x3cda <__fp_split3>
    396c:	80 f3       	brcs	.-32     	; 0x394e <__addsf3+0x8>
    396e:	ba 17       	cp	r27, r26
    3970:	62 07       	cpc	r22, r18
    3972:	73 07       	cpc	r23, r19
    3974:	84 07       	cpc	r24, r20
    3976:	95 07       	cpc	r25, r21
    3978:	18 f0       	brcs	.+6      	; 0x3980 <__addsf3x+0x18>
    397a:	71 f4       	brne	.+28     	; 0x3998 <__addsf3x+0x30>
    397c:	9e f5       	brtc	.+102    	; 0x39e4 <__addsf3x+0x7c>
    397e:	cf c1       	rjmp	.+926    	; 0x3d1e <__fp_zero>
    3980:	0e f4       	brtc	.+2      	; 0x3984 <__addsf3x+0x1c>
    3982:	e0 95       	com	r30
    3984:	0b 2e       	mov	r0, r27
    3986:	ba 2f       	mov	r27, r26
    3988:	a0 2d       	mov	r26, r0
    398a:	0b 01       	movw	r0, r22
    398c:	b9 01       	movw	r22, r18
    398e:	90 01       	movw	r18, r0
    3990:	0c 01       	movw	r0, r24
    3992:	ca 01       	movw	r24, r20
    3994:	a0 01       	movw	r20, r0
    3996:	11 24       	eor	r1, r1
    3998:	ff 27       	eor	r31, r31
    399a:	59 1b       	sub	r21, r25
    399c:	99 f0       	breq	.+38     	; 0x39c4 <__addsf3x+0x5c>
    399e:	59 3f       	cpi	r21, 0xF9	; 249
    39a0:	50 f4       	brcc	.+20     	; 0x39b6 <__addsf3x+0x4e>
    39a2:	50 3e       	cpi	r21, 0xE0	; 224
    39a4:	68 f1       	brcs	.+90     	; 0x3a00 <__addsf3x+0x98>
    39a6:	1a 16       	cp	r1, r26
    39a8:	f0 40       	sbci	r31, 0x00	; 0
    39aa:	a2 2f       	mov	r26, r18
    39ac:	23 2f       	mov	r18, r19
    39ae:	34 2f       	mov	r19, r20
    39b0:	44 27       	eor	r20, r20
    39b2:	58 5f       	subi	r21, 0xF8	; 248
    39b4:	f3 cf       	rjmp	.-26     	; 0x399c <__addsf3x+0x34>
    39b6:	46 95       	lsr	r20
    39b8:	37 95       	ror	r19
    39ba:	27 95       	ror	r18
    39bc:	a7 95       	ror	r26
    39be:	f0 40       	sbci	r31, 0x00	; 0
    39c0:	53 95       	inc	r21
    39c2:	c9 f7       	brne	.-14     	; 0x39b6 <__addsf3x+0x4e>
    39c4:	7e f4       	brtc	.+30     	; 0x39e4 <__addsf3x+0x7c>
    39c6:	1f 16       	cp	r1, r31
    39c8:	ba 0b       	sbc	r27, r26
    39ca:	62 0b       	sbc	r22, r18
    39cc:	73 0b       	sbc	r23, r19
    39ce:	84 0b       	sbc	r24, r20
    39d0:	ba f0       	brmi	.+46     	; 0x3a00 <__addsf3x+0x98>
    39d2:	91 50       	subi	r25, 0x01	; 1
    39d4:	a1 f0       	breq	.+40     	; 0x39fe <__addsf3x+0x96>
    39d6:	ff 0f       	add	r31, r31
    39d8:	bb 1f       	adc	r27, r27
    39da:	66 1f       	adc	r22, r22
    39dc:	77 1f       	adc	r23, r23
    39de:	88 1f       	adc	r24, r24
    39e0:	c2 f7       	brpl	.-16     	; 0x39d2 <__addsf3x+0x6a>
    39e2:	0e c0       	rjmp	.+28     	; 0x3a00 <__addsf3x+0x98>
    39e4:	ba 0f       	add	r27, r26
    39e6:	62 1f       	adc	r22, r18
    39e8:	73 1f       	adc	r23, r19
    39ea:	84 1f       	adc	r24, r20
    39ec:	48 f4       	brcc	.+18     	; 0x3a00 <__addsf3x+0x98>
    39ee:	87 95       	ror	r24
    39f0:	77 95       	ror	r23
    39f2:	67 95       	ror	r22
    39f4:	b7 95       	ror	r27
    39f6:	f7 95       	ror	r31
    39f8:	9e 3f       	cpi	r25, 0xFE	; 254
    39fa:	08 f0       	brcs	.+2      	; 0x39fe <__addsf3x+0x96>
    39fc:	b3 cf       	rjmp	.-154    	; 0x3964 <__addsf3+0x1e>
    39fe:	93 95       	inc	r25
    3a00:	88 0f       	add	r24, r24
    3a02:	08 f0       	brcs	.+2      	; 0x3a06 <__addsf3x+0x9e>
    3a04:	99 27       	eor	r25, r25
    3a06:	ee 0f       	add	r30, r30
    3a08:	97 95       	ror	r25
    3a0a:	87 95       	ror	r24
    3a0c:	08 95       	ret

00003a0e <__cmpsf2>:
    3a0e:	f4 d0       	rcall	.+488    	; 0x3bf8 <__fp_cmp>
    3a10:	08 f4       	brcc	.+2      	; 0x3a14 <__cmpsf2+0x6>
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	08 95       	ret

00003a16 <__divsf3>:
    3a16:	0c d0       	rcall	.+24     	; 0x3a30 <__divsf3x>
    3a18:	4f c1       	rjmp	.+670    	; 0x3cb8 <__fp_round>
    3a1a:	47 d1       	rcall	.+654    	; 0x3caa <__fp_pscB>
    3a1c:	40 f0       	brcs	.+16     	; 0x3a2e <__divsf3+0x18>
    3a1e:	3e d1       	rcall	.+636    	; 0x3c9c <__fp_pscA>
    3a20:	30 f0       	brcs	.+12     	; 0x3a2e <__divsf3+0x18>
    3a22:	21 f4       	brne	.+8      	; 0x3a2c <__divsf3+0x16>
    3a24:	5f 3f       	cpi	r21, 0xFF	; 255
    3a26:	19 f0       	breq	.+6      	; 0x3a2e <__divsf3+0x18>
    3a28:	0b c1       	rjmp	.+534    	; 0x3c40 <__fp_inf>
    3a2a:	51 11       	cpse	r21, r1
    3a2c:	79 c1       	rjmp	.+754    	; 0x3d20 <__fp_szero>
    3a2e:	0e c1       	rjmp	.+540    	; 0x3c4c <__fp_nan>

00003a30 <__divsf3x>:
    3a30:	54 d1       	rcall	.+680    	; 0x3cda <__fp_split3>
    3a32:	98 f3       	brcs	.-26     	; 0x3a1a <__divsf3+0x4>

00003a34 <__divsf3_pse>:
    3a34:	99 23       	and	r25, r25
    3a36:	c9 f3       	breq	.-14     	; 0x3a2a <__divsf3+0x14>
    3a38:	55 23       	and	r21, r21
    3a3a:	b1 f3       	breq	.-20     	; 0x3a28 <__divsf3+0x12>
    3a3c:	95 1b       	sub	r25, r21
    3a3e:	55 0b       	sbc	r21, r21
    3a40:	bb 27       	eor	r27, r27
    3a42:	aa 27       	eor	r26, r26
    3a44:	62 17       	cp	r22, r18
    3a46:	73 07       	cpc	r23, r19
    3a48:	84 07       	cpc	r24, r20
    3a4a:	38 f0       	brcs	.+14     	; 0x3a5a <__divsf3_pse+0x26>
    3a4c:	9f 5f       	subi	r25, 0xFF	; 255
    3a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a50:	22 0f       	add	r18, r18
    3a52:	33 1f       	adc	r19, r19
    3a54:	44 1f       	adc	r20, r20
    3a56:	aa 1f       	adc	r26, r26
    3a58:	a9 f3       	breq	.-22     	; 0x3a44 <__divsf3_pse+0x10>
    3a5a:	33 d0       	rcall	.+102    	; 0x3ac2 <__divsf3_pse+0x8e>
    3a5c:	0e 2e       	mov	r0, r30
    3a5e:	3a f0       	brmi	.+14     	; 0x3a6e <__divsf3_pse+0x3a>
    3a60:	e0 e8       	ldi	r30, 0x80	; 128
    3a62:	30 d0       	rcall	.+96     	; 0x3ac4 <__divsf3_pse+0x90>
    3a64:	91 50       	subi	r25, 0x01	; 1
    3a66:	50 40       	sbci	r21, 0x00	; 0
    3a68:	e6 95       	lsr	r30
    3a6a:	00 1c       	adc	r0, r0
    3a6c:	ca f7       	brpl	.-14     	; 0x3a60 <__divsf3_pse+0x2c>
    3a6e:	29 d0       	rcall	.+82     	; 0x3ac2 <__divsf3_pse+0x8e>
    3a70:	fe 2f       	mov	r31, r30
    3a72:	27 d0       	rcall	.+78     	; 0x3ac2 <__divsf3_pse+0x8e>
    3a74:	66 0f       	add	r22, r22
    3a76:	77 1f       	adc	r23, r23
    3a78:	88 1f       	adc	r24, r24
    3a7a:	bb 1f       	adc	r27, r27
    3a7c:	26 17       	cp	r18, r22
    3a7e:	37 07       	cpc	r19, r23
    3a80:	48 07       	cpc	r20, r24
    3a82:	ab 07       	cpc	r26, r27
    3a84:	b0 e8       	ldi	r27, 0x80	; 128
    3a86:	09 f0       	breq	.+2      	; 0x3a8a <__divsf3_pse+0x56>
    3a88:	bb 0b       	sbc	r27, r27
    3a8a:	80 2d       	mov	r24, r0
    3a8c:	bf 01       	movw	r22, r30
    3a8e:	ff 27       	eor	r31, r31
    3a90:	93 58       	subi	r25, 0x83	; 131
    3a92:	5f 4f       	sbci	r21, 0xFF	; 255
    3a94:	2a f0       	brmi	.+10     	; 0x3aa0 <__divsf3_pse+0x6c>
    3a96:	9e 3f       	cpi	r25, 0xFE	; 254
    3a98:	51 05       	cpc	r21, r1
    3a9a:	68 f0       	brcs	.+26     	; 0x3ab6 <__divsf3_pse+0x82>
    3a9c:	d1 c0       	rjmp	.+418    	; 0x3c40 <__fp_inf>
    3a9e:	40 c1       	rjmp	.+640    	; 0x3d20 <__fp_szero>
    3aa0:	5f 3f       	cpi	r21, 0xFF	; 255
    3aa2:	ec f3       	brlt	.-6      	; 0x3a9e <__divsf3_pse+0x6a>
    3aa4:	98 3e       	cpi	r25, 0xE8	; 232
    3aa6:	dc f3       	brlt	.-10     	; 0x3a9e <__divsf3_pse+0x6a>
    3aa8:	86 95       	lsr	r24
    3aaa:	77 95       	ror	r23
    3aac:	67 95       	ror	r22
    3aae:	b7 95       	ror	r27
    3ab0:	f7 95       	ror	r31
    3ab2:	9f 5f       	subi	r25, 0xFF	; 255
    3ab4:	c9 f7       	brne	.-14     	; 0x3aa8 <__divsf3_pse+0x74>
    3ab6:	88 0f       	add	r24, r24
    3ab8:	91 1d       	adc	r25, r1
    3aba:	96 95       	lsr	r25
    3abc:	87 95       	ror	r24
    3abe:	97 f9       	bld	r25, 7
    3ac0:	08 95       	ret
    3ac2:	e1 e0       	ldi	r30, 0x01	; 1
    3ac4:	66 0f       	add	r22, r22
    3ac6:	77 1f       	adc	r23, r23
    3ac8:	88 1f       	adc	r24, r24
    3aca:	bb 1f       	adc	r27, r27
    3acc:	62 17       	cp	r22, r18
    3ace:	73 07       	cpc	r23, r19
    3ad0:	84 07       	cpc	r24, r20
    3ad2:	ba 07       	cpc	r27, r26
    3ad4:	20 f0       	brcs	.+8      	; 0x3ade <__divsf3_pse+0xaa>
    3ad6:	62 1b       	sub	r22, r18
    3ad8:	73 0b       	sbc	r23, r19
    3ada:	84 0b       	sbc	r24, r20
    3adc:	ba 0b       	sbc	r27, r26
    3ade:	ee 1f       	adc	r30, r30
    3ae0:	88 f7       	brcc	.-30     	; 0x3ac4 <__divsf3_pse+0x90>
    3ae2:	e0 95       	com	r30
    3ae4:	08 95       	ret

00003ae6 <__fixsfsi>:
    3ae6:	04 d0       	rcall	.+8      	; 0x3af0 <__fixunssfsi>
    3ae8:	68 94       	set
    3aea:	b1 11       	cpse	r27, r1
    3aec:	19 c1       	rjmp	.+562    	; 0x3d20 <__fp_szero>
    3aee:	08 95       	ret

00003af0 <__fixunssfsi>:
    3af0:	fc d0       	rcall	.+504    	; 0x3cea <__fp_splitA>
    3af2:	88 f0       	brcs	.+34     	; 0x3b16 <__fixunssfsi+0x26>
    3af4:	9f 57       	subi	r25, 0x7F	; 127
    3af6:	90 f0       	brcs	.+36     	; 0x3b1c <__fixunssfsi+0x2c>
    3af8:	b9 2f       	mov	r27, r25
    3afa:	99 27       	eor	r25, r25
    3afc:	b7 51       	subi	r27, 0x17	; 23
    3afe:	a0 f0       	brcs	.+40     	; 0x3b28 <__fixunssfsi+0x38>
    3b00:	d1 f0       	breq	.+52     	; 0x3b36 <__fixunssfsi+0x46>
    3b02:	66 0f       	add	r22, r22
    3b04:	77 1f       	adc	r23, r23
    3b06:	88 1f       	adc	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	1a f0       	brmi	.+6      	; 0x3b12 <__fixunssfsi+0x22>
    3b0c:	ba 95       	dec	r27
    3b0e:	c9 f7       	brne	.-14     	; 0x3b02 <__fixunssfsi+0x12>
    3b10:	12 c0       	rjmp	.+36     	; 0x3b36 <__fixunssfsi+0x46>
    3b12:	b1 30       	cpi	r27, 0x01	; 1
    3b14:	81 f0       	breq	.+32     	; 0x3b36 <__fixunssfsi+0x46>
    3b16:	03 d1       	rcall	.+518    	; 0x3d1e <__fp_zero>
    3b18:	b1 e0       	ldi	r27, 0x01	; 1
    3b1a:	08 95       	ret
    3b1c:	00 c1       	rjmp	.+512    	; 0x3d1e <__fp_zero>
    3b1e:	67 2f       	mov	r22, r23
    3b20:	78 2f       	mov	r23, r24
    3b22:	88 27       	eor	r24, r24
    3b24:	b8 5f       	subi	r27, 0xF8	; 248
    3b26:	39 f0       	breq	.+14     	; 0x3b36 <__fixunssfsi+0x46>
    3b28:	b9 3f       	cpi	r27, 0xF9	; 249
    3b2a:	cc f3       	brlt	.-14     	; 0x3b1e <__fixunssfsi+0x2e>
    3b2c:	86 95       	lsr	r24
    3b2e:	77 95       	ror	r23
    3b30:	67 95       	ror	r22
    3b32:	b3 95       	inc	r27
    3b34:	d9 f7       	brne	.-10     	; 0x3b2c <__fixunssfsi+0x3c>
    3b36:	3e f4       	brtc	.+14     	; 0x3b46 <__fixunssfsi+0x56>
    3b38:	90 95       	com	r25
    3b3a:	80 95       	com	r24
    3b3c:	70 95       	com	r23
    3b3e:	61 95       	neg	r22
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	8f 4f       	sbci	r24, 0xFF	; 255
    3b44:	9f 4f       	sbci	r25, 0xFF	; 255
    3b46:	08 95       	ret

00003b48 <__floatunsisf>:
    3b48:	e8 94       	clt
    3b4a:	09 c0       	rjmp	.+18     	; 0x3b5e <__floatsisf+0x12>

00003b4c <__floatsisf>:
    3b4c:	97 fb       	bst	r25, 7
    3b4e:	3e f4       	brtc	.+14     	; 0x3b5e <__floatsisf+0x12>
    3b50:	90 95       	com	r25
    3b52:	80 95       	com	r24
    3b54:	70 95       	com	r23
    3b56:	61 95       	neg	r22
    3b58:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b5e:	99 23       	and	r25, r25
    3b60:	a9 f0       	breq	.+42     	; 0x3b8c <__floatsisf+0x40>
    3b62:	f9 2f       	mov	r31, r25
    3b64:	96 e9       	ldi	r25, 0x96	; 150
    3b66:	bb 27       	eor	r27, r27
    3b68:	93 95       	inc	r25
    3b6a:	f6 95       	lsr	r31
    3b6c:	87 95       	ror	r24
    3b6e:	77 95       	ror	r23
    3b70:	67 95       	ror	r22
    3b72:	b7 95       	ror	r27
    3b74:	f1 11       	cpse	r31, r1
    3b76:	f8 cf       	rjmp	.-16     	; 0x3b68 <__floatsisf+0x1c>
    3b78:	fa f4       	brpl	.+62     	; 0x3bb8 <__floatsisf+0x6c>
    3b7a:	bb 0f       	add	r27, r27
    3b7c:	11 f4       	brne	.+4      	; 0x3b82 <__floatsisf+0x36>
    3b7e:	60 ff       	sbrs	r22, 0
    3b80:	1b c0       	rjmp	.+54     	; 0x3bb8 <__floatsisf+0x6c>
    3b82:	6f 5f       	subi	r22, 0xFF	; 255
    3b84:	7f 4f       	sbci	r23, 0xFF	; 255
    3b86:	8f 4f       	sbci	r24, 0xFF	; 255
    3b88:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8a:	16 c0       	rjmp	.+44     	; 0x3bb8 <__floatsisf+0x6c>
    3b8c:	88 23       	and	r24, r24
    3b8e:	11 f0       	breq	.+4      	; 0x3b94 <__floatsisf+0x48>
    3b90:	96 e9       	ldi	r25, 0x96	; 150
    3b92:	11 c0       	rjmp	.+34     	; 0x3bb6 <__floatsisf+0x6a>
    3b94:	77 23       	and	r23, r23
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <__floatsisf+0x54>
    3b98:	9e e8       	ldi	r25, 0x8E	; 142
    3b9a:	87 2f       	mov	r24, r23
    3b9c:	76 2f       	mov	r23, r22
    3b9e:	05 c0       	rjmp	.+10     	; 0x3baa <__floatsisf+0x5e>
    3ba0:	66 23       	and	r22, r22
    3ba2:	71 f0       	breq	.+28     	; 0x3bc0 <__floatsisf+0x74>
    3ba4:	96 e8       	ldi	r25, 0x86	; 134
    3ba6:	86 2f       	mov	r24, r22
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	2a f0       	brmi	.+10     	; 0x3bb8 <__floatsisf+0x6c>
    3bae:	9a 95       	dec	r25
    3bb0:	66 0f       	add	r22, r22
    3bb2:	77 1f       	adc	r23, r23
    3bb4:	88 1f       	adc	r24, r24
    3bb6:	da f7       	brpl	.-10     	; 0x3bae <__floatsisf+0x62>
    3bb8:	88 0f       	add	r24, r24
    3bba:	96 95       	lsr	r25
    3bbc:	87 95       	ror	r24
    3bbe:	97 f9       	bld	r25, 7
    3bc0:	08 95       	ret

00003bc2 <__fp_arccos>:
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	1f 93       	push	r17
    3bc8:	0f 93       	push	r16
    3bca:	8b 01       	movw	r16, r22
    3bcc:	ec 01       	movw	r28, r24
    3bce:	e0 e0       	ldi	r30, 0x00	; 0
    3bd0:	f1 e0       	ldi	r31, 0x01	; 1
    3bd2:	3f d0       	rcall	.+126    	; 0x3c52 <__fp_powser>
    3bd4:	71 d0       	rcall	.+226    	; 0x3cb8 <__fp_round>
    3bd6:	98 01       	movw	r18, r16
    3bd8:	ae 01       	movw	r20, r28
    3bda:	8b 01       	movw	r16, r22
    3bdc:	ec 01       	movw	r28, r24
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	80 e8       	ldi	r24, 0x80	; 128
    3be4:	9f e3       	ldi	r25, 0x3F	; 63
    3be6:	ae de       	rcall	.-676    	; 0x3944 <__subsf3>
    3be8:	0c d1       	rcall	.+536    	; 0x3e02 <sqrt>
    3bea:	98 01       	movw	r18, r16
    3bec:	ae 01       	movw	r20, r28
    3bee:	0f 91       	pop	r16
    3bf0:	1f 91       	pop	r17
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	aa c0       	rjmp	.+340    	; 0x3d4c <__mulsf3x>

00003bf8 <__fp_cmp>:
    3bf8:	99 0f       	add	r25, r25
    3bfa:	00 08       	sbc	r0, r0
    3bfc:	55 0f       	add	r21, r21
    3bfe:	aa 0b       	sbc	r26, r26
    3c00:	e0 e8       	ldi	r30, 0x80	; 128
    3c02:	fe ef       	ldi	r31, 0xFE	; 254
    3c04:	16 16       	cp	r1, r22
    3c06:	17 06       	cpc	r1, r23
    3c08:	e8 07       	cpc	r30, r24
    3c0a:	f9 07       	cpc	r31, r25
    3c0c:	c0 f0       	brcs	.+48     	; 0x3c3e <__fp_cmp+0x46>
    3c0e:	12 16       	cp	r1, r18
    3c10:	13 06       	cpc	r1, r19
    3c12:	e4 07       	cpc	r30, r20
    3c14:	f5 07       	cpc	r31, r21
    3c16:	98 f0       	brcs	.+38     	; 0x3c3e <__fp_cmp+0x46>
    3c18:	62 1b       	sub	r22, r18
    3c1a:	73 0b       	sbc	r23, r19
    3c1c:	84 0b       	sbc	r24, r20
    3c1e:	95 0b       	sbc	r25, r21
    3c20:	39 f4       	brne	.+14     	; 0x3c30 <__fp_cmp+0x38>
    3c22:	0a 26       	eor	r0, r26
    3c24:	61 f0       	breq	.+24     	; 0x3c3e <__fp_cmp+0x46>
    3c26:	23 2b       	or	r18, r19
    3c28:	24 2b       	or	r18, r20
    3c2a:	25 2b       	or	r18, r21
    3c2c:	21 f4       	brne	.+8      	; 0x3c36 <__fp_cmp+0x3e>
    3c2e:	08 95       	ret
    3c30:	0a 26       	eor	r0, r26
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <__fp_cmp+0x3e>
    3c34:	a1 40       	sbci	r26, 0x01	; 1
    3c36:	a6 95       	lsr	r26
    3c38:	8f ef       	ldi	r24, 0xFF	; 255
    3c3a:	81 1d       	adc	r24, r1
    3c3c:	81 1d       	adc	r24, r1
    3c3e:	08 95       	ret

00003c40 <__fp_inf>:
    3c40:	97 f9       	bld	r25, 7
    3c42:	9f 67       	ori	r25, 0x7F	; 127
    3c44:	80 e8       	ldi	r24, 0x80	; 128
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	08 95       	ret

00003c4c <__fp_nan>:
    3c4c:	9f ef       	ldi	r25, 0xFF	; 255
    3c4e:	80 ec       	ldi	r24, 0xC0	; 192
    3c50:	08 95       	ret

00003c52 <__fp_powser>:
    3c52:	df 93       	push	r29
    3c54:	cf 93       	push	r28
    3c56:	1f 93       	push	r17
    3c58:	0f 93       	push	r16
    3c5a:	ff 92       	push	r15
    3c5c:	ef 92       	push	r14
    3c5e:	df 92       	push	r13
    3c60:	7b 01       	movw	r14, r22
    3c62:	8c 01       	movw	r16, r24
    3c64:	68 94       	set
    3c66:	05 c0       	rjmp	.+10     	; 0x3c72 <__fp_powser+0x20>
    3c68:	da 2e       	mov	r13, r26
    3c6a:	ef 01       	movw	r28, r30
    3c6c:	6f d0       	rcall	.+222    	; 0x3d4c <__mulsf3x>
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e8 94       	clt
    3c72:	a5 91       	lpm	r26, Z+
    3c74:	25 91       	lpm	r18, Z+
    3c76:	35 91       	lpm	r19, Z+
    3c78:	45 91       	lpm	r20, Z+
    3c7a:	55 91       	lpm	r21, Z+
    3c7c:	ae f3       	brts	.-22     	; 0x3c68 <__fp_powser+0x16>
    3c7e:	ef 01       	movw	r28, r30
    3c80:	73 de       	rcall	.-794    	; 0x3968 <__addsf3x>
    3c82:	fe 01       	movw	r30, r28
    3c84:	97 01       	movw	r18, r14
    3c86:	a8 01       	movw	r20, r16
    3c88:	da 94       	dec	r13
    3c8a:	79 f7       	brne	.-34     	; 0x3c6a <__fp_powser+0x18>
    3c8c:	df 90       	pop	r13
    3c8e:	ef 90       	pop	r14
    3c90:	ff 90       	pop	r15
    3c92:	0f 91       	pop	r16
    3c94:	1f 91       	pop	r17
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <__fp_pscA>:
    3c9c:	00 24       	eor	r0, r0
    3c9e:	0a 94       	dec	r0
    3ca0:	16 16       	cp	r1, r22
    3ca2:	17 06       	cpc	r1, r23
    3ca4:	18 06       	cpc	r1, r24
    3ca6:	09 06       	cpc	r0, r25
    3ca8:	08 95       	ret

00003caa <__fp_pscB>:
    3caa:	00 24       	eor	r0, r0
    3cac:	0a 94       	dec	r0
    3cae:	12 16       	cp	r1, r18
    3cb0:	13 06       	cpc	r1, r19
    3cb2:	14 06       	cpc	r1, r20
    3cb4:	05 06       	cpc	r0, r21
    3cb6:	08 95       	ret

00003cb8 <__fp_round>:
    3cb8:	09 2e       	mov	r0, r25
    3cba:	03 94       	inc	r0
    3cbc:	00 0c       	add	r0, r0
    3cbe:	11 f4       	brne	.+4      	; 0x3cc4 <__fp_round+0xc>
    3cc0:	88 23       	and	r24, r24
    3cc2:	52 f0       	brmi	.+20     	; 0x3cd8 <__fp_round+0x20>
    3cc4:	bb 0f       	add	r27, r27
    3cc6:	40 f4       	brcc	.+16     	; 0x3cd8 <__fp_round+0x20>
    3cc8:	bf 2b       	or	r27, r31
    3cca:	11 f4       	brne	.+4      	; 0x3cd0 <__fp_round+0x18>
    3ccc:	60 ff       	sbrs	r22, 0
    3cce:	04 c0       	rjmp	.+8      	; 0x3cd8 <__fp_round+0x20>
    3cd0:	6f 5f       	subi	r22, 0xFF	; 255
    3cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd8:	08 95       	ret

00003cda <__fp_split3>:
    3cda:	57 fd       	sbrc	r21, 7
    3cdc:	90 58       	subi	r25, 0x80	; 128
    3cde:	44 0f       	add	r20, r20
    3ce0:	55 1f       	adc	r21, r21
    3ce2:	59 f0       	breq	.+22     	; 0x3cfa <__fp_splitA+0x10>
    3ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce6:	71 f0       	breq	.+28     	; 0x3d04 <__fp_splitA+0x1a>
    3ce8:	47 95       	ror	r20

00003cea <__fp_splitA>:
    3cea:	88 0f       	add	r24, r24
    3cec:	97 fb       	bst	r25, 7
    3cee:	99 1f       	adc	r25, r25
    3cf0:	61 f0       	breq	.+24     	; 0x3d0a <__fp_splitA+0x20>
    3cf2:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf4:	79 f0       	breq	.+30     	; 0x3d14 <__fp_splitA+0x2a>
    3cf6:	87 95       	ror	r24
    3cf8:	08 95       	ret
    3cfa:	12 16       	cp	r1, r18
    3cfc:	13 06       	cpc	r1, r19
    3cfe:	14 06       	cpc	r1, r20
    3d00:	55 1f       	adc	r21, r21
    3d02:	f2 cf       	rjmp	.-28     	; 0x3ce8 <__fp_split3+0xe>
    3d04:	46 95       	lsr	r20
    3d06:	f1 df       	rcall	.-30     	; 0x3cea <__fp_splitA>
    3d08:	08 c0       	rjmp	.+16     	; 0x3d1a <__fp_splitA+0x30>
    3d0a:	16 16       	cp	r1, r22
    3d0c:	17 06       	cpc	r1, r23
    3d0e:	18 06       	cpc	r1, r24
    3d10:	99 1f       	adc	r25, r25
    3d12:	f1 cf       	rjmp	.-30     	; 0x3cf6 <__fp_splitA+0xc>
    3d14:	86 95       	lsr	r24
    3d16:	71 05       	cpc	r23, r1
    3d18:	61 05       	cpc	r22, r1
    3d1a:	08 94       	sec
    3d1c:	08 95       	ret

00003d1e <__fp_zero>:
    3d1e:	e8 94       	clt

00003d20 <__fp_szero>:
    3d20:	bb 27       	eor	r27, r27
    3d22:	66 27       	eor	r22, r22
    3d24:	77 27       	eor	r23, r23
    3d26:	cb 01       	movw	r24, r22
    3d28:	97 f9       	bld	r25, 7
    3d2a:	08 95       	ret

00003d2c <__gesf2>:
    3d2c:	65 df       	rcall	.-310    	; 0x3bf8 <__fp_cmp>
    3d2e:	08 f4       	brcc	.+2      	; 0x3d32 <__gesf2+0x6>
    3d30:	8f ef       	ldi	r24, 0xFF	; 255
    3d32:	08 95       	ret

00003d34 <__mulsf3>:
    3d34:	0b d0       	rcall	.+22     	; 0x3d4c <__mulsf3x>
    3d36:	c0 cf       	rjmp	.-128    	; 0x3cb8 <__fp_round>
    3d38:	b1 df       	rcall	.-158    	; 0x3c9c <__fp_pscA>
    3d3a:	28 f0       	brcs	.+10     	; 0x3d46 <__mulsf3+0x12>
    3d3c:	b6 df       	rcall	.-148    	; 0x3caa <__fp_pscB>
    3d3e:	18 f0       	brcs	.+6      	; 0x3d46 <__mulsf3+0x12>
    3d40:	95 23       	and	r25, r21
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <__mulsf3+0x12>
    3d44:	7d cf       	rjmp	.-262    	; 0x3c40 <__fp_inf>
    3d46:	82 cf       	rjmp	.-252    	; 0x3c4c <__fp_nan>
    3d48:	11 24       	eor	r1, r1
    3d4a:	ea cf       	rjmp	.-44     	; 0x3d20 <__fp_szero>

00003d4c <__mulsf3x>:
    3d4c:	c6 df       	rcall	.-116    	; 0x3cda <__fp_split3>
    3d4e:	a0 f3       	brcs	.-24     	; 0x3d38 <__mulsf3+0x4>

00003d50 <__mulsf3_pse>:
    3d50:	95 9f       	mul	r25, r21
    3d52:	d1 f3       	breq	.-12     	; 0x3d48 <__mulsf3+0x14>
    3d54:	95 0f       	add	r25, r21
    3d56:	50 e0       	ldi	r21, 0x00	; 0
    3d58:	55 1f       	adc	r21, r21
    3d5a:	62 9f       	mul	r22, r18
    3d5c:	f0 01       	movw	r30, r0
    3d5e:	72 9f       	mul	r23, r18
    3d60:	bb 27       	eor	r27, r27
    3d62:	f0 0d       	add	r31, r0
    3d64:	b1 1d       	adc	r27, r1
    3d66:	63 9f       	mul	r22, r19
    3d68:	aa 27       	eor	r26, r26
    3d6a:	f0 0d       	add	r31, r0
    3d6c:	b1 1d       	adc	r27, r1
    3d6e:	aa 1f       	adc	r26, r26
    3d70:	64 9f       	mul	r22, r20
    3d72:	66 27       	eor	r22, r22
    3d74:	b0 0d       	add	r27, r0
    3d76:	a1 1d       	adc	r26, r1
    3d78:	66 1f       	adc	r22, r22
    3d7a:	82 9f       	mul	r24, r18
    3d7c:	22 27       	eor	r18, r18
    3d7e:	b0 0d       	add	r27, r0
    3d80:	a1 1d       	adc	r26, r1
    3d82:	62 1f       	adc	r22, r18
    3d84:	73 9f       	mul	r23, r19
    3d86:	b0 0d       	add	r27, r0
    3d88:	a1 1d       	adc	r26, r1
    3d8a:	62 1f       	adc	r22, r18
    3d8c:	83 9f       	mul	r24, r19
    3d8e:	a0 0d       	add	r26, r0
    3d90:	61 1d       	adc	r22, r1
    3d92:	22 1f       	adc	r18, r18
    3d94:	74 9f       	mul	r23, r20
    3d96:	33 27       	eor	r19, r19
    3d98:	a0 0d       	add	r26, r0
    3d9a:	61 1d       	adc	r22, r1
    3d9c:	23 1f       	adc	r18, r19
    3d9e:	84 9f       	mul	r24, r20
    3da0:	60 0d       	add	r22, r0
    3da2:	21 1d       	adc	r18, r1
    3da4:	82 2f       	mov	r24, r18
    3da6:	76 2f       	mov	r23, r22
    3da8:	6a 2f       	mov	r22, r26
    3daa:	11 24       	eor	r1, r1
    3dac:	9f 57       	subi	r25, 0x7F	; 127
    3dae:	50 40       	sbci	r21, 0x00	; 0
    3db0:	8a f0       	brmi	.+34     	; 0x3dd4 <__mulsf3_pse+0x84>
    3db2:	e1 f0       	breq	.+56     	; 0x3dec <__mulsf3_pse+0x9c>
    3db4:	88 23       	and	r24, r24
    3db6:	4a f0       	brmi	.+18     	; 0x3dca <__mulsf3_pse+0x7a>
    3db8:	ee 0f       	add	r30, r30
    3dba:	ff 1f       	adc	r31, r31
    3dbc:	bb 1f       	adc	r27, r27
    3dbe:	66 1f       	adc	r22, r22
    3dc0:	77 1f       	adc	r23, r23
    3dc2:	88 1f       	adc	r24, r24
    3dc4:	91 50       	subi	r25, 0x01	; 1
    3dc6:	50 40       	sbci	r21, 0x00	; 0
    3dc8:	a9 f7       	brne	.-22     	; 0x3db4 <__mulsf3_pse+0x64>
    3dca:	9e 3f       	cpi	r25, 0xFE	; 254
    3dcc:	51 05       	cpc	r21, r1
    3dce:	70 f0       	brcs	.+28     	; 0x3dec <__mulsf3_pse+0x9c>
    3dd0:	37 cf       	rjmp	.-402    	; 0x3c40 <__fp_inf>
    3dd2:	a6 cf       	rjmp	.-180    	; 0x3d20 <__fp_szero>
    3dd4:	5f 3f       	cpi	r21, 0xFF	; 255
    3dd6:	ec f3       	brlt	.-6      	; 0x3dd2 <__mulsf3_pse+0x82>
    3dd8:	98 3e       	cpi	r25, 0xE8	; 232
    3dda:	dc f3       	brlt	.-10     	; 0x3dd2 <__mulsf3_pse+0x82>
    3ddc:	86 95       	lsr	r24
    3dde:	77 95       	ror	r23
    3de0:	67 95       	ror	r22
    3de2:	b7 95       	ror	r27
    3de4:	f7 95       	ror	r31
    3de6:	e7 95       	ror	r30
    3de8:	9f 5f       	subi	r25, 0xFF	; 255
    3dea:	c1 f7       	brne	.-16     	; 0x3ddc <__mulsf3_pse+0x8c>
    3dec:	fe 2b       	or	r31, r30
    3dee:	88 0f       	add	r24, r24
    3df0:	91 1d       	adc	r25, r1
    3df2:	96 95       	lsr	r25
    3df4:	87 95       	ror	r24
    3df6:	97 f9       	bld	r25, 7
    3df8:	08 95       	ret
    3dfa:	11 f4       	brne	.+4      	; 0x3e00 <__mulsf3_pse+0xb0>
    3dfc:	0e f4       	brtc	.+2      	; 0x3e00 <__mulsf3_pse+0xb0>
    3dfe:	26 cf       	rjmp	.-436    	; 0x3c4c <__fp_nan>
    3e00:	3e c0       	rjmp	.+124    	; 0x3e7e <__fp_mpack>

00003e02 <sqrt>:
    3e02:	73 df       	rcall	.-282    	; 0x3cea <__fp_splitA>
    3e04:	d0 f3       	brcs	.-12     	; 0x3dfa <__mulsf3_pse+0xaa>
    3e06:	99 23       	and	r25, r25
    3e08:	d9 f3       	breq	.-10     	; 0x3e00 <__mulsf3_pse+0xb0>
    3e0a:	ce f3       	brts	.-14     	; 0x3dfe <__mulsf3_pse+0xae>
    3e0c:	9f 57       	subi	r25, 0x7F	; 127
    3e0e:	55 0b       	sbc	r21, r21
    3e10:	87 ff       	sbrs	r24, 7
    3e12:	43 d0       	rcall	.+134    	; 0x3e9a <__fp_norm2>
    3e14:	00 24       	eor	r0, r0
    3e16:	a0 e6       	ldi	r26, 0x60	; 96
    3e18:	40 ea       	ldi	r20, 0xA0	; 160
    3e1a:	90 01       	movw	r18, r0
    3e1c:	80 58       	subi	r24, 0x80	; 128
    3e1e:	56 95       	lsr	r21
    3e20:	97 95       	ror	r25
    3e22:	28 f4       	brcc	.+10     	; 0x3e2e <sqrt+0x2c>
    3e24:	80 5c       	subi	r24, 0xC0	; 192
    3e26:	66 0f       	add	r22, r22
    3e28:	77 1f       	adc	r23, r23
    3e2a:	88 1f       	adc	r24, r24
    3e2c:	20 f0       	brcs	.+8      	; 0x3e36 <sqrt+0x34>
    3e2e:	26 17       	cp	r18, r22
    3e30:	37 07       	cpc	r19, r23
    3e32:	48 07       	cpc	r20, r24
    3e34:	30 f4       	brcc	.+12     	; 0x3e42 <sqrt+0x40>
    3e36:	62 1b       	sub	r22, r18
    3e38:	73 0b       	sbc	r23, r19
    3e3a:	84 0b       	sbc	r24, r20
    3e3c:	20 29       	or	r18, r0
    3e3e:	31 29       	or	r19, r1
    3e40:	4a 2b       	or	r20, r26
    3e42:	a6 95       	lsr	r26
    3e44:	17 94       	ror	r1
    3e46:	07 94       	ror	r0
    3e48:	20 25       	eor	r18, r0
    3e4a:	31 25       	eor	r19, r1
    3e4c:	4a 27       	eor	r20, r26
    3e4e:	58 f7       	brcc	.-42     	; 0x3e26 <sqrt+0x24>
    3e50:	66 0f       	add	r22, r22
    3e52:	77 1f       	adc	r23, r23
    3e54:	88 1f       	adc	r24, r24
    3e56:	20 f0       	brcs	.+8      	; 0x3e60 <sqrt+0x5e>
    3e58:	26 17       	cp	r18, r22
    3e5a:	37 07       	cpc	r19, r23
    3e5c:	48 07       	cpc	r20, r24
    3e5e:	30 f4       	brcc	.+12     	; 0x3e6c <sqrt+0x6a>
    3e60:	62 0b       	sbc	r22, r18
    3e62:	73 0b       	sbc	r23, r19
    3e64:	84 0b       	sbc	r24, r20
    3e66:	20 0d       	add	r18, r0
    3e68:	31 1d       	adc	r19, r1
    3e6a:	41 1d       	adc	r20, r1
    3e6c:	a0 95       	com	r26
    3e6e:	81 f7       	brne	.-32     	; 0x3e50 <sqrt+0x4e>
    3e70:	b9 01       	movw	r22, r18
    3e72:	84 2f       	mov	r24, r20
    3e74:	91 58       	subi	r25, 0x81	; 129
    3e76:	88 0f       	add	r24, r24
    3e78:	96 95       	lsr	r25
    3e7a:	87 95       	ror	r24
    3e7c:	08 95       	ret

00003e7e <__fp_mpack>:
    3e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    3e80:	31 f0       	breq	.+12     	; 0x3e8e <__fp_mpack_finite+0xc>

00003e82 <__fp_mpack_finite>:
    3e82:	91 50       	subi	r25, 0x01	; 1
    3e84:	20 f4       	brcc	.+8      	; 0x3e8e <__fp_mpack_finite+0xc>
    3e86:	87 95       	ror	r24
    3e88:	77 95       	ror	r23
    3e8a:	67 95       	ror	r22
    3e8c:	b7 95       	ror	r27
    3e8e:	88 0f       	add	r24, r24
    3e90:	91 1d       	adc	r25, r1
    3e92:	96 95       	lsr	r25
    3e94:	87 95       	ror	r24
    3e96:	97 f9       	bld	r25, 7
    3e98:	08 95       	ret

00003e9a <__fp_norm2>:
    3e9a:	91 50       	subi	r25, 0x01	; 1
    3e9c:	50 40       	sbci	r21, 0x00	; 0
    3e9e:	66 0f       	add	r22, r22
    3ea0:	77 1f       	adc	r23, r23
    3ea2:	88 1f       	adc	r24, r24
    3ea4:	d2 f7       	brpl	.-12     	; 0x3e9a <__fp_norm2>
    3ea6:	08 95       	ret

00003ea8 <__divmodhi4>:
    3ea8:	97 fb       	bst	r25, 7
    3eaa:	07 2e       	mov	r0, r23
    3eac:	16 f4       	brtc	.+4      	; 0x3eb2 <__divmodhi4+0xa>
    3eae:	00 94       	com	r0
    3eb0:	07 d0       	rcall	.+14     	; 0x3ec0 <__divmodhi4_neg1>
    3eb2:	77 fd       	sbrc	r23, 7
    3eb4:	09 d0       	rcall	.+18     	; 0x3ec8 <__divmodhi4_neg2>
    3eb6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__udivmodhi4>
    3eba:	07 fc       	sbrc	r0, 7
    3ebc:	05 d0       	rcall	.+10     	; 0x3ec8 <__divmodhi4_neg2>
    3ebe:	3e f4       	brtc	.+14     	; 0x3ece <__divmodhi4_exit>

00003ec0 <__divmodhi4_neg1>:
    3ec0:	90 95       	com	r25
    3ec2:	81 95       	neg	r24
    3ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec6:	08 95       	ret

00003ec8 <__divmodhi4_neg2>:
    3ec8:	70 95       	com	r23
    3eca:	61 95       	neg	r22
    3ecc:	7f 4f       	sbci	r23, 0xFF	; 255

00003ece <__divmodhi4_exit>:
    3ece:	08 95       	ret

00003ed0 <__tablejump2__>:
    3ed0:	ee 0f       	add	r30, r30
    3ed2:	ff 1f       	adc	r31, r31

00003ed4 <__tablejump__>:
    3ed4:	05 90       	lpm	r0, Z+
    3ed6:	f4 91       	lpm	r31, Z
    3ed8:	e0 2d       	mov	r30, r0
    3eda:	09 94       	ijmp

00003edc <__udivmodhi4>:
    3edc:	aa 1b       	sub	r26, r26
    3ede:	bb 1b       	sub	r27, r27
    3ee0:	51 e1       	ldi	r21, 0x11	; 17
    3ee2:	07 c0       	rjmp	.+14     	; 0x3ef2 <__udivmodhi4_ep>

00003ee4 <__udivmodhi4_loop>:
    3ee4:	aa 1f       	adc	r26, r26
    3ee6:	bb 1f       	adc	r27, r27
    3ee8:	a6 17       	cp	r26, r22
    3eea:	b7 07       	cpc	r27, r23
    3eec:	10 f0       	brcs	.+4      	; 0x3ef2 <__udivmodhi4_ep>
    3eee:	a6 1b       	sub	r26, r22
    3ef0:	b7 0b       	sbc	r27, r23

00003ef2 <__udivmodhi4_ep>:
    3ef2:	88 1f       	adc	r24, r24
    3ef4:	99 1f       	adc	r25, r25
    3ef6:	5a 95       	dec	r21
    3ef8:	a9 f7       	brne	.-22     	; 0x3ee4 <__udivmodhi4_loop>
    3efa:	80 95       	com	r24
    3efc:	90 95       	com	r25
    3efe:	bc 01       	movw	r22, r24
    3f00:	cd 01       	movw	r24, r26
    3f02:	08 95       	ret

00003f04 <__itoa_ncheck>:
    3f04:	bb 27       	eor	r27, r27
    3f06:	4a 30       	cpi	r20, 0x0A	; 10
    3f08:	31 f4       	brne	.+12     	; 0x3f16 <__itoa_ncheck+0x12>
    3f0a:	99 23       	and	r25, r25
    3f0c:	22 f4       	brpl	.+8      	; 0x3f16 <__itoa_ncheck+0x12>
    3f0e:	bd e2       	ldi	r27, 0x2D	; 45
    3f10:	90 95       	com	r25
    3f12:	81 95       	neg	r24
    3f14:	9f 4f       	sbci	r25, 0xFF	; 255
    3f16:	0c 94 8e 1f 	jmp	0x3f1c	; 0x3f1c <__utoa_common>

00003f1a <__utoa_ncheck>:
    3f1a:	bb 27       	eor	r27, r27

00003f1c <__utoa_common>:
    3f1c:	fb 01       	movw	r30, r22
    3f1e:	55 27       	eor	r21, r21
    3f20:	aa 27       	eor	r26, r26
    3f22:	88 0f       	add	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	aa 1f       	adc	r26, r26
    3f28:	a4 17       	cp	r26, r20
    3f2a:	10 f0       	brcs	.+4      	; 0x3f30 <__utoa_common+0x14>
    3f2c:	a4 1b       	sub	r26, r20
    3f2e:	83 95       	inc	r24
    3f30:	50 51       	subi	r21, 0x10	; 16
    3f32:	b9 f7       	brne	.-18     	; 0x3f22 <__utoa_common+0x6>
    3f34:	a0 5d       	subi	r26, 0xD0	; 208
    3f36:	aa 33       	cpi	r26, 0x3A	; 58
    3f38:	08 f0       	brcs	.+2      	; 0x3f3c <__utoa_common+0x20>
    3f3a:	a9 5d       	subi	r26, 0xD9	; 217
    3f3c:	a1 93       	st	Z+, r26
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	79 f7       	brne	.-34     	; 0x3f20 <__utoa_common+0x4>
    3f42:	b1 11       	cpse	r27, r1
    3f44:	b1 93       	st	Z+, r27
    3f46:	11 92       	st	Z+, r1
    3f48:	cb 01       	movw	r24, r22
    3f4a:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <strrev>

00003f4e <strrev>:
    3f4e:	dc 01       	movw	r26, r24
    3f50:	fc 01       	movw	r30, r24
    3f52:	67 2f       	mov	r22, r23
    3f54:	71 91       	ld	r23, Z+
    3f56:	77 23       	and	r23, r23
    3f58:	e1 f7       	brne	.-8      	; 0x3f52 <strrev+0x4>
    3f5a:	32 97       	sbiw	r30, 0x02	; 2
    3f5c:	04 c0       	rjmp	.+8      	; 0x3f66 <strrev+0x18>
    3f5e:	7c 91       	ld	r23, X
    3f60:	6d 93       	st	X+, r22
    3f62:	70 83       	st	Z, r23
    3f64:	62 91       	ld	r22, -Z
    3f66:	ae 17       	cp	r26, r30
    3f68:	bf 07       	cpc	r27, r31
    3f6a:	c8 f3       	brcs	.-14     	; 0x3f5e <strrev+0x10>
    3f6c:	08 95       	ret

00003f6e <_exit>:
    3f6e:	f8 94       	cli

00003f70 <__stop_program>:
    3f70:	ff cf       	rjmp	.-2      	; 0x3f70 <__stop_program>

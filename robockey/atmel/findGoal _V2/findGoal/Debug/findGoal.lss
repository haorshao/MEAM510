
findGoal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00002526  000025ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  0080012c  0080012c  000025e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  00002616  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002242  00000000  00000000  000027ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c03  00000000  00000000  000051fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  00005e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000823  00000000  00000000  000064d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000031e8  00000000  00000000  00006cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00009edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_10>
      2c:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_11>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      68:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      6c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      84:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      98:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      ac:	07 2c       	mov	r0, r7
      ae:	7a a5       	ldd	r23, Y+42	; 0x2a
      b0:	ba 6c       	ori	r27, 0xCA	; 202
      b2:	c5 90       	lpm	r12, Z+
      b4:	da 3b       	cpi	r29, 0xBA	; 186
      b6:	93 65       	ori	r25, 0x53	; 83
      b8:	fc 8b       	std	Y+20, r31	; 0x14
      ba:	bc 53       	subi	r27, 0x3C	; 60
      bc:	f8 10       	cpse	r15, r8
      be:	fd 3c       	cpi	r31, 0xCD	; 205
      c0:	56 92       	lac	Z, r5
      c2:	83 4d       	sbci	r24, 0xD3	; 211
      c4:	bd 87       	std	Y+13, r27	; 0x0d
      c6:	9d 3a       	cpi	r25, 0xAD	; 173
      c8:	b6 3d       	cpi	r27, 0xD6	; 214
      ca:	cb c9       	rjmp	.-3178   	; 0xfffff462 <__eeprom_end+0xff7ef462>
      cc:	bf 5b       	subi	r27, 0xBF	; 191
      ce:	be 73       	andi	r27, 0x3E	; 62
      d0:	da 0f       	add	r29, r26
      d2:	c9 3f       	cpi	r28, 0xF9	; 249

000000d4 <__trampolines_end>:
      d4:	0a 00       	.word	0x000a	; ????

000000d6 <__c.2095>:
      d6:	2c 20 00                                            , .

000000d9 <__c.2093>:
      d9:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

000000e2 <__c.2091>:
      e2:	0a 00                                               ..

000000e4 <__c.2089>:
      e4:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

000000ee <descriptor_list>:
      ee:	00 01 00 00 85 01 12 00 02 00 00 42 01 43 00 03     ...........B.C..
      fe:	00 00 3e 01 04 01 03 09 04 2a 01 12 02 03 09 04     ..>......*......
     10e:	22 01 06 03 03 09 04 18 01 08                       ".........

00000118 <string3>:
     118:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000122 <string2>:
     122:	06 03 4d 00 32 00 00 00                             ..M.2...

0000012a <string1>:
     12a:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     13a:	65 00 00 00                                         e...

0000013e <string0>:
     13e:	04 03 09 04                                         ....

00000142 <config1_descriptor>:
     142:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     152:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     162:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     172:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     182:	40 00 00                                            @..

00000185 <device_descriptor>:
     185:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     195:	03 01                                               ..

00000197 <endpoint_config_table>:
     197:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	da e0       	ldi	r29, 0x0A	; 10
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
     1ae:	11 e0       	ldi	r17, 0x01	; 1
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b1 e0       	ldi	r27, 0x01	; 1
     1b4:	e6 e2       	ldi	r30, 0x26	; 38
     1b6:	f5 e2       	ldi	r31, 0x25	; 37
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	ac 32       	cpi	r26, 0x2C	; 44
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	ac e2       	ldi	r26, 0x2C	; 44
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a8 37       	cpi	r26, 0x78	; 120
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <main>
     1d8:	0c 94 91 12 	jmp	0x2522	; 0x2522 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <init_timer>:
	
}

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
     1e0:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
     1e2:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
     1e4:	21 9a       	sbi	0x04, 1	; 4
	clear(PORTB, 1);
     1e6:	29 98       	cbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 250;
     1e8:	8a ef       	ldi	r24, 0xFA	; 250
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	90 93 89 00 	sts	0x0089, r25
     1f0:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 250;
     1f4:	90 93 8b 00 	sts	0x008B, r25
     1f8:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = 250;
     1fc:	90 93 8d 00 	sts	0x008D, r25
     200:	80 93 8c 00 	sts	0x008C, r24
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
     204:	a1 e8       	ldi	r26, 0x81	; 129
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	8c 91       	ld	r24, X
     20a:	80 61       	ori	r24, 0x10	; 16
     20c:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
     20e:	8c 91       	ld	r24, X
     210:	88 60       	ori	r24, 0x08	; 8
     212:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
     214:	e0 e8       	ldi	r30, 0x80	; 128
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	82 60       	ori	r24, 0x02	; 2
     21c:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     21e:	80 81       	ld	r24, Z
     220:	81 60       	ori	r24, 0x01	; 1
     222:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
     224:	80 81       	ld	r24, Z
     226:	80 62       	ori	r24, 0x20	; 32
     228:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
     22a:	80 81       	ld	r24, Z
     22c:	8f 7e       	andi	r24, 0xEF	; 239
     22e:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
     230:	80 81       	ld	r24, Z
     232:	88 60       	ori	r24, 0x08	; 8
     234:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
     236:	80 81       	ld	r24, Z
     238:	8b 7f       	andi	r24, 0xFB	; 251
     23a:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
     23c:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
     23e:	27 9a       	sbi	0x04, 7	; 4
	
	// Set prescaler as /1
	clear(TCCR1B, CS12);
     240:	8c 91       	ld	r24, X
     242:	8b 7f       	andi	r24, 0xFB	; 251
     244:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
     246:	8c 91       	ld	r24, X
     248:	8d 7f       	andi	r24, 0xFD	; 253
     24a:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
     24c:	8c 91       	ld	r24, X
     24e:	81 60       	ori	r24, 0x01	; 1
     250:	8c 93       	st	X, r24
     252:	08 95       	ret

00000254 <find_sign>:
		ypdir[1] = ypdir_last[1];
	}
	m_green(OFF);
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     254:	4f 92       	push	r4
     256:	5f 92       	push	r5
     258:	6f 92       	push	r6
     25a:	7f 92       	push	r7
     25c:	8f 92       	push	r8
     25e:	9f 92       	push	r9
     260:	af 92       	push	r10
     262:	bf 92       	push	r11
     264:	cf 92       	push	r12
     266:	df 92       	push	r13
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	60 97       	sbiw	r28, 0x10	; 16
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	2b 01       	movw	r4, r22
     286:	3c 01       	movw	r6, r24
     288:	2d 83       	std	Y+5, r18	; 0x05
     28a:	3e 83       	std	Y+6, r19	; 0x06
     28c:	4f 83       	std	Y+7, r20	; 0x07
     28e:	58 87       	std	Y+8, r21	; 0x08
     290:	58 01       	movw	r10, r16
     292:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     294:	d5 01       	movw	r26, r10
     296:	cd 90       	ld	r12, X+
     298:	dd 90       	ld	r13, X+
     29a:	ed 90       	ld	r14, X+
     29c:	fc 90       	ld	r15, X
     29e:	9b 01       	movw	r18, r22
     2a0:	ac 01       	movw	r20, r24
     2a2:	c7 01       	movw	r24, r14
     2a4:	b6 01       	movw	r22, r12
     2a6:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     2aa:	f8 01       	movw	r30, r16
     2ac:	20 81       	ld	r18, Z
     2ae:	31 81       	ldd	r19, Z+1	; 0x01
     2b0:	42 81       	ldd	r20, Z+2	; 0x02
     2b2:	53 81       	ldd	r21, Z+3	; 0x03
     2b4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     2b8:	69 87       	std	Y+9, r22	; 0x09
     2ba:	7a 87       	std	Y+10, r23	; 0x0a
     2bc:	8b 87       	std	Y+11, r24	; 0x0b
     2be:	9c 87       	std	Y+12, r25	; 0x0c
     2c0:	d5 01       	movw	r26, r10
     2c2:	14 96       	adiw	r26, 0x04	; 4
     2c4:	8d 91       	ld	r24, X+
     2c6:	9d 91       	ld	r25, X+
     2c8:	0d 90       	ld	r0, X+
     2ca:	bc 91       	ld	r27, X
     2cc:	a0 2d       	mov	r26, r0
     2ce:	89 83       	std	Y+1, r24	; 0x01
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	ab 83       	std	Y+3, r26	; 0x03
     2d4:	bc 83       	std	Y+4, r27	; 0x04
     2d6:	2d 81       	ldd	r18, Y+5	; 0x05
     2d8:	3e 81       	ldd	r19, Y+6	; 0x06
     2da:	4f 81       	ldd	r20, Y+7	; 0x07
     2dc:	58 85       	ldd	r21, Y+8	; 0x08
     2de:	bc 01       	movw	r22, r24
     2e0:	cd 01       	movw	r24, r26
     2e2:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     2e6:	6d 87       	std	Y+13, r22	; 0x0d
     2e8:	7e 87       	std	Y+14, r23	; 0x0e
     2ea:	8f 87       	std	Y+15, r24	; 0x0f
     2ec:	98 8b       	std	Y+16, r25	; 0x10
     2ee:	9b 01       	movw	r18, r22
     2f0:	ac 01       	movw	r20, r24
     2f2:	69 85       	ldd	r22, Y+9	; 0x09
     2f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     2f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     2fa:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     2fe:	4b 01       	movw	r8, r22
     300:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     302:	29 81       	ldd	r18, Y+1	; 0x01
     304:	3a 81       	ldd	r19, Y+2	; 0x02
     306:	4b 81       	ldd	r20, Y+3	; 0x03
     308:	5c 81       	ldd	r21, Y+4	; 0x04
     30a:	c3 01       	movw	r24, r6
     30c:	b2 01       	movw	r22, r4
     30e:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     312:	f8 01       	movw	r30, r16
     314:	24 81       	ldd	r18, Z+4	; 0x04
     316:	35 81       	ldd	r19, Z+5	; 0x05
     318:	46 81       	ldd	r20, Z+6	; 0x06
     31a:	57 81       	ldd	r21, Z+7	; 0x07
     31c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     320:	2b 01       	movw	r4, r22
     322:	3c 01       	movw	r6, r24
     324:	2d 81       	ldd	r18, Y+5	; 0x05
     326:	3e 81       	ldd	r19, Y+6	; 0x06
     328:	4f 81       	ldd	r20, Y+7	; 0x07
     32a:	58 85       	ldd	r21, Y+8	; 0x08
     32c:	c7 01       	movw	r24, r14
     32e:	b6 01       	movw	r22, r12
     330:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     334:	69 83       	std	Y+1, r22	; 0x01
     336:	7a 83       	std	Y+2, r23	; 0x02
     338:	8b 83       	std	Y+3, r24	; 0x03
     33a:	9c 83       	std	Y+4, r25	; 0x04
     33c:	9b 01       	movw	r18, r22
     33e:	ac 01       	movw	r20, r24
     340:	c3 01       	movw	r24, r6
     342:	b2 01       	movw	r22, r4
     344:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     34c:	2d 85       	ldd	r18, Y+13	; 0x0d
     34e:	3e 85       	ldd	r19, Y+14	; 0x0e
     350:	4f 85       	ldd	r20, Y+15	; 0x0f
     352:	58 89       	ldd	r21, Y+16	; 0x10
     354:	69 85       	ldd	r22, Y+9	; 0x09
     356:	7a 85       	ldd	r23, Y+10	; 0x0a
     358:	8b 85       	ldd	r24, Y+11	; 0x0b
     35a:	9c 85       	ldd	r25, Y+12	; 0x0c
     35c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
     360:	6d 83       	std	Y+5, r22	; 0x05
     362:	7e 83       	std	Y+6, r23	; 0x06
     364:	8f 83       	std	Y+7, r24	; 0x07
     366:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     368:	29 81       	ldd	r18, Y+1	; 0x01
     36a:	3a 81       	ldd	r19, Y+2	; 0x02
     36c:	4b 81       	ldd	r20, Y+3	; 0x03
     36e:	5c 81       	ldd	r21, Y+4	; 0x04
     370:	c3 01       	movw	r24, r6
     372:	b2 01       	movw	r22, r4
     374:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     378:	2b 01       	movw	r4, r22
     37a:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     37c:	a5 01       	movw	r20, r10
     37e:	94 01       	movw	r18, r8
     380:	c5 01       	movw	r24, r10
     382:	b4 01       	movw	r22, r8
     384:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     388:	4b 01       	movw	r8, r22
     38a:	5c 01       	movw	r10, r24
     38c:	a7 01       	movw	r20, r14
     38e:	96 01       	movw	r18, r12
     390:	c7 01       	movw	r24, r14
     392:	b6 01       	movw	r22, r12
     394:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     398:	9b 01       	movw	r18, r22
     39a:	ac 01       	movw	r20, r24
     39c:	c5 01       	movw	r24, r10
     39e:	b4 01       	movw	r22, r8
     3a0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
     3a4:	6b 01       	movw	r12, r22
     3a6:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     3a8:	2d 81       	ldd	r18, Y+5	; 0x05
     3aa:	3e 81       	ldd	r19, Y+6	; 0x06
     3ac:	4f 81       	ldd	r20, Y+7	; 0x07
     3ae:	58 85       	ldd	r21, Y+8	; 0x08
     3b0:	ca 01       	movw	r24, r20
     3b2:	b9 01       	movw	r22, r18
     3b4:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     3b8:	4b 01       	movw	r8, r22
     3ba:	5c 01       	movw	r10, r24
     3bc:	a3 01       	movw	r20, r6
     3be:	92 01       	movw	r18, r4
     3c0:	c3 01       	movw	r24, r6
     3c2:	b2 01       	movw	r22, r4
     3c4:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     3c8:	9b 01       	movw	r18, r22
     3ca:	ac 01       	movw	r20, r24
     3cc:	c5 01       	movw	r24, r10
     3ce:	b4 01       	movw	r22, r8
     3d0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     3d8:	01 e0       	ldi	r16, 0x01	; 1
     3da:	10 e0       	ldi	r17, 0x00	; 0
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     3e4:	88 23       	and	r24, r24
     3e6:	14 f0       	brlt	.+4      	; 0x3ec <find_sign+0x198>
     3e8:	00 e0       	ldi	r16, 0x00	; 0
     3ea:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     3ec:	c8 01       	movw	r24, r16
     3ee:	60 96       	adiw	r28, 0x10	; 16
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	bf 90       	pop	r11
     40c:	af 90       	pop	r10
     40e:	9f 90       	pop	r9
     410:	8f 90       	pop	r8
     412:	7f 90       	pop	r7
     414:	6f 90       	pop	r6
     416:	5f 90       	pop	r5
     418:	4f 90       	pop	r4
     41a:	08 95       	ret

0000041c <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta){
     41c:	2f 92       	push	r2
     41e:	3f 92       	push	r3
     420:	4f 92       	push	r4
     422:	5f 92       	push	r5
     424:	6f 92       	push	r6
     426:	7f 92       	push	r7
     428:	8f 92       	push	r8
     42a:	9f 92       	push	r9
     42c:	af 92       	push	r10
     42e:	bf 92       	push	r11
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	28 97       	sbiw	r28, 0x08	; 8
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	1c 01       	movw	r2, r24
     452:	49 83       	std	Y+1, r20	; 0x01
     454:	5a 83       	std	Y+2, r21	; 0x02
     456:	6b 83       	std	Y+3, r22	; 0x03
     458:	7c 83       	std	Y+4, r23	; 0x04
     45a:	0d 83       	std	Y+5, r16	; 0x05
     45c:	1e 83       	std	Y+6, r17	; 0x06
     45e:	2f 83       	std	Y+7, r18	; 0x07
     460:	38 87       	std	Y+8, r19	; 0x08
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     462:	20 91 54 01 	lds	r18, 0x0154
     466:	30 91 55 01 	lds	r19, 0x0155
     46a:	40 91 56 01 	lds	r20, 0x0156
     46e:	50 91 57 01 	lds	r21, 0x0157
     472:	60 91 00 01 	lds	r22, 0x0100
     476:	70 91 01 01 	lds	r23, 0x0101
     47a:	80 91 02 01 	lds	r24, 0x0102
     47e:	90 91 03 01 	lds	r25, 0x0103
     482:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     486:	4b 01       	movw	r8, r22
     488:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
     48a:	20 91 58 01 	lds	r18, 0x0158
     48e:	30 91 59 01 	lds	r19, 0x0159
     492:	40 91 5a 01 	lds	r20, 0x015A
     496:	50 91 5b 01 	lds	r21, 0x015B
     49a:	60 91 04 01 	lds	r22, 0x0104
     49e:	70 91 05 01 	lds	r23, 0x0105
     4a2:	80 91 06 01 	lds	r24, 0x0106
     4a6:	90 91 07 01 	lds	r25, 0x0107
     4aa:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     4ae:	6b 01       	movw	r12, r22
     4b0:	7c 01       	movw	r14, r24
	
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
     4b2:	a5 01       	movw	r20, r10
     4b4:	94 01       	movw	r18, r8
     4b6:	c5 01       	movw	r24, r10
     4b8:	b4 01       	movw	r22, r8
     4ba:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     4be:	2b 01       	movw	r4, r22
     4c0:	3c 01       	movw	r6, r24
     4c2:	a7 01       	movw	r20, r14
     4c4:	96 01       	movw	r18, r12
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	c3 01       	movw	r24, r6
     4d4:	b2 01       	movw	r22, r4
     4d6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
     4da:	0e 94 09 12 	call	0x2412	; 0x2412 <sqrt>
     4de:	2b 01       	movw	r4, r22
     4e0:	3c 01       	movw	r6, r24
     4e2:	9b 01       	movw	r18, r22
     4e4:	ac 01       	movw	r20, r24
     4e6:	c5 01       	movw	r24, r10
     4e8:	b4 01       	movw	r22, r8
     4ea:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     4ee:	4b 01       	movw	r8, r22
     4f0:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
     4f2:	a3 01       	movw	r20, r6
     4f4:	92 01       	movw	r18, r4
     4f6:	c7 01       	movw	r24, r14
     4f8:	b6 01       	movw	r22, r12
     4fa:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     4fe:	6b 01       	movw	r12, r22
     500:	7c 01       	movw	r14, r24
	
	float cos_alpha = c2g[0] * ypdir[0] + c2g[1] * ypdir[1];
     502:	20 91 4c 01 	lds	r18, 0x014C
     506:	30 91 4d 01 	lds	r19, 0x014D
     50a:	40 91 4e 01 	lds	r20, 0x014E
     50e:	50 91 4f 01 	lds	r21, 0x014F
     512:	c5 01       	movw	r24, r10
     514:	b4 01       	movw	r22, r8
     516:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     51a:	2b 01       	movw	r4, r22
     51c:	3c 01       	movw	r6, r24
     51e:	20 91 50 01 	lds	r18, 0x0150
     522:	30 91 51 01 	lds	r19, 0x0151
     526:	40 91 52 01 	lds	r20, 0x0152
     52a:	50 91 53 01 	lds	r21, 0x0153
     52e:	c7 01       	movw	r24, r14
     530:	b6 01       	movw	r22, r12
     532:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     536:	9b 01       	movw	r18, r22
     538:	ac 01       	movw	r20, r24
     53a:	c3 01       	movw	r24, r6
     53c:	b2 01       	movw	r22, r4
     53e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
	alpha = acos(cos_alpha);
     542:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <acos>
     546:	2b 01       	movw	r4, r22
     548:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
     54a:	2a 94       	dec	r2
     54c:	23 28       	or	r2, r3
     54e:	c9 f4       	brne	.+50     	; 0x582 <cal_angle+0x166>
		c2g_wx = costheta*c2g[0] + sintheta*c2g[1];
     550:	2d 81       	ldd	r18, Y+5	; 0x05
     552:	3e 81       	ldd	r19, Y+6	; 0x06
     554:	4f 81       	ldd	r20, Y+7	; 0x07
     556:	58 85       	ldd	r21, Y+8	; 0x08
     558:	c5 01       	movw	r24, r10
     55a:	b4 01       	movw	r22, r8
     55c:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	29 81       	ldd	r18, Y+1	; 0x01
     566:	3a 81       	ldd	r19, Y+2	; 0x02
     568:	4b 81       	ldd	r20, Y+3	; 0x03
     56a:	5c 81       	ldd	r21, Y+4	; 0x04
     56c:	c7 01       	movw	r24, r14
     56e:	b6 01       	movw	r22, r12
     570:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     574:	9b 01       	movw	r18, r22
     576:	ac 01       	movw	r20, r24
     578:	c5 01       	movw	r24, r10
     57a:	b4 01       	movw	r22, r8
     57c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
     580:	18 c0       	rjmp	.+48     	; 0x5b2 <cal_angle+0x196>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];		
     582:	2d 81       	ldd	r18, Y+5	; 0x05
     584:	3e 81       	ldd	r19, Y+6	; 0x06
     586:	4f 81       	ldd	r20, Y+7	; 0x07
     588:	58 85       	ldd	r21, Y+8	; 0x08
     58a:	c5 01       	movw	r24, r10
     58c:	b4 01       	movw	r22, r8
     58e:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     592:	4b 01       	movw	r8, r22
     594:	5c 01       	movw	r10, r24
     596:	29 81       	ldd	r18, Y+1	; 0x01
     598:	3a 81       	ldd	r19, Y+2	; 0x02
     59a:	4b 81       	ldd	r20, Y+3	; 0x03
     59c:	5c 81       	ldd	r21, Y+4	; 0x04
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     5a6:	9b 01       	movw	r18, r22
     5a8:	ac 01       	movw	r20, r24
     5aa:	c5 01       	movw	r24, r10
     5ac:	b4 01       	movw	r22, r8
     5ae:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
	}
	if (c2g_wx < 0){
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	a9 01       	movw	r20, r18
     5b8:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     5bc:	88 23       	and	r24, r24
     5be:	4c f0       	brlt	.+18     	; 0x5d2 <cal_angle+0x1b6>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);
	
	float cos_alpha = c2g[0] * ypdir[0] + c2g[1] * ypdir[1];
	alpha = acos(cos_alpha);
     5c0:	40 92 38 01 	sts	0x0138, r4
     5c4:	50 92 39 01 	sts	0x0139, r5
     5c8:	60 92 3a 01 	sts	0x013A, r6
     5cc:	70 92 3b 01 	sts	0x013B, r7
     5d0:	0c c0       	rjmp	.+24     	; 0x5ea <cal_angle+0x1ce>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];		
	}
	if (c2g_wx < 0){
		alpha = - alpha;
     5d2:	77 fa       	bst	r7, 7
     5d4:	70 94       	com	r7
     5d6:	77 f8       	bld	r7, 7
     5d8:	70 94       	com	r7
     5da:	40 92 38 01 	sts	0x0138, r4
     5de:	50 92 39 01 	sts	0x0139, r5
     5e2:	60 92 3a 01 	sts	0x013A, r6
     5e6:	70 92 3b 01 	sts	0x013B, r7
	m_usb_tx_string("alpha: ");
	m_usb_tx_int(alpha*10); // multiply X10
	m_usb_tx_string("\n");
	*/
	
}
     5ea:	28 96       	adiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	4f 90       	pop	r4
     616:	3f 90       	pop	r3
     618:	2f 90       	pop	r2
     61a:	08 95       	ret

0000061c <PID_alpha>:

void PID_alpha(float Kp, float Ki, float Kd){
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	6f 92       	push	r6
     622:	7f 92       	push	r7
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	00 d0       	rcall	.+0      	; 0x63e <PID_alpha+0x22>
     63e:	00 d0       	rcall	.+0      	; 0x640 <PID_alpha+0x24>
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	4b 01       	movw	r8, r22
     646:	5c 01       	movw	r10, r24
     648:	e9 82       	std	Y+1, r14	; 0x01
     64a:	fa 82       	std	Y+2, r15	; 0x02
     64c:	0b 83       	std	Y+3, r16	; 0x03
     64e:	1c 83       	std	Y+4, r17	; 0x04
	m_usb_tx_int(Ki);
	m_usb_tx_string(", "); 
	m_usb_tx_int(Kd); 
	m_usb_tx_string("\n");
	*/
	diff = alpha - alpha_last;
     650:	40 90 38 01 	lds	r4, 0x0138
     654:	50 90 39 01 	lds	r5, 0x0139
     658:	60 90 3a 01 	lds	r6, 0x013A
     65c:	70 90 3b 01 	lds	r7, 0x013B
     660:	20 91 34 01 	lds	r18, 0x0134
     664:	30 91 35 01 	lds	r19, 0x0135
     668:	40 91 36 01 	lds	r20, 0x0136
     66c:	50 91 37 01 	lds	r21, 0x0137
     670:	c3 01       	movw	r24, r6
     672:	b2 01       	movw	r22, r4
     674:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     678:	6b 01       	movw	r12, r22
     67a:	7c 01       	movw	r14, r24
     67c:	60 93 30 01 	sts	0x0130, r22
     680:	70 93 31 01 	sts	0x0131, r23
     684:	80 93 32 01 	sts	0x0132, r24
     688:	90 93 33 01 	sts	0x0133, r25
	m_usb_tx_string("sumpid: ");
	m_usb_tx_int(sumpid*10);
	m_usb_tx_string("\n");
	*/
	float P =0, I = 0, D = 0;
	P = Kp * alpha;
     68c:	a5 01       	movw	r20, r10
     68e:	94 01       	movw	r18, r8
     690:	c3 01       	movw	r24, r6
     692:	b2 01       	movw	r22, r4
     694:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     698:	4b 01       	movw	r8, r22
     69a:	5c 01       	movw	r10, r24
	I = Ki * sumpid;
	D = Kd * diff;   
     69c:	29 81       	ldd	r18, Y+1	; 0x01
     69e:	3a 81       	ldd	r19, Y+2	; 0x02
     6a0:	4b 81       	ldd	r20, Y+3	; 0x03
     6a2:	5c 81       	ldd	r21, Y+4	; 0x04
     6a4:	c7 01       	movw	r24, r14
     6a6:	b6 01       	movw	r22, r12
     6a8:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
	m_usb_tx_int(I);
	m_usb_tx_string(", ");
	m_usb_tx_int(D*10);
	m_usb_tx_string("\n");
	*/
	gain= P+D;
     6b0:	c5 01       	movw	r24, r10
     6b2:	b4 01       	movw	r22, r8
     6b4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
     6b8:	60 93 2c 01 	sts	0x012C, r22
     6bc:	70 93 2d 01 	sts	0x012D, r23
     6c0:	80 93 2e 01 	sts	0x012E, r24
     6c4:	90 93 2f 01 	sts	0x012F, r25
	
	alpha_last = alpha;
     6c8:	40 92 34 01 	sts	0x0134, r4
     6cc:	50 92 35 01 	sts	0x0135, r5
     6d0:	60 92 36 01 	sts	0x0136, r6
     6d4:	70 92 37 01 	sts	0x0137, r7
	/*
	m_usb_tx_string("alpha*10: ");
	m_usb_tx_int(alpha*10); // multiply X10
	m_usb_tx_string("\n");
	*/
	m_usb_tx_string("gain*10: ");
     6d8:	84 ee       	ldi	r24, 0xE4	; 228
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 57 0d 	call	0x1aae	; 0x1aae <print_P>
	m_usb_tx_int((int) (gain*10)); // multiply X10
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e2       	ldi	r20, 0x20	; 32
     6e6:	51 e4       	ldi	r21, 0x41	; 65
     6e8:	60 91 2c 01 	lds	r22, 0x012C
     6ec:	70 91 2d 01 	lds	r23, 0x012D
     6f0:	80 91 2e 01 	lds	r24, 0x012E
     6f4:	90 91 2f 01 	lds	r25, 0x012F
     6f8:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     6fc:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     700:	cb 01       	movw	r24, r22
     702:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <m_usb_tx_int>
	m_usb_tx_string("\n");
     706:	82 ee       	ldi	r24, 0xE2	; 226
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <print_P>
	
	if(gain<0){  // turn right
     70e:	c0 90 2c 01 	lds	r12, 0x012C
     712:	d0 90 2d 01 	lds	r13, 0x012D
     716:	e0 90 2e 01 	lds	r14, 0x012E
     71a:	f0 90 2f 01 	lds	r15, 0x012F
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	a9 01       	movw	r20, r18
     724:	c7 01       	movw	r24, r14
     726:	b6 01       	movw	r22, r12
     728:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     72c:	88 23       	and	r24, r24
     72e:	a4 f5       	brge	.+104    	; 0x798 <PID_alpha+0x17c>
		//m_usb_tx_string("turn right\n");
		OCR1B=250-abs(gain);
     730:	c7 01       	movw	r24, r14
     732:	b6 01       	movw	r22, r12
     734:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     738:	9b 01       	movw	r18, r22
     73a:	77 23       	and	r23, r23
     73c:	24 f4       	brge	.+8      	; 0x746 <PID_alpha+0x12a>
     73e:	22 27       	eor	r18, r18
     740:	33 27       	eor	r19, r19
     742:	26 1b       	sub	r18, r22
     744:	37 0b       	sbc	r19, r23
     746:	8a ef       	ldi	r24, 0xFA	; 250
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	82 1b       	sub	r24, r18
     74c:	93 0b       	sbc	r25, r19
     74e:	90 93 8b 00 	sts	0x008B, r25
     752:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain) > 200){
     756:	60 91 2c 01 	lds	r22, 0x012C
     75a:	70 91 2d 01 	lds	r23, 0x012D
     75e:	80 91 2e 01 	lds	r24, 0x012E
     762:	90 91 2f 01 	lds	r25, 0x012F
     766:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     76a:	9b 01       	movw	r18, r22
     76c:	77 23       	and	r23, r23
     76e:	24 f4       	brge	.+8      	; 0x778 <PID_alpha+0x15c>
     770:	22 27       	eor	r18, r18
     772:	33 27       	eor	r19, r19
     774:	26 1b       	sub	r18, r22
     776:	37 0b       	sbc	r19, r23
     778:	29 3c       	cpi	r18, 0xC9	; 201
     77a:	31 05       	cpc	r19, r1
     77c:	34 f0       	brlt	.+12     	; 0x78a <PID_alpha+0x16e>
			OCR1B = 50;
     77e:	82 e3       	ldi	r24, 0x32	; 50
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	90 93 8b 00 	sts	0x008B, r25
     786:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C=250;
     78a:	8a ef       	ldi	r24, 0xFA	; 250
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	90 93 8d 00 	sts	0x008D, r25
     792:	80 93 8c 00 	sts	0x008C, r24
     796:	33 c0       	rjmp	.+102    	; 0x7fe <PID_alpha+0x1e2>
	}
	else{		// turn left
		//m_usb_tx_string("turn left\n");
		OCR1C=250-abs(gain);
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     7a0:	9b 01       	movw	r18, r22
     7a2:	77 23       	and	r23, r23
     7a4:	24 f4       	brge	.+8      	; 0x7ae <PID_alpha+0x192>
     7a6:	22 27       	eor	r18, r18
     7a8:	33 27       	eor	r19, r19
     7aa:	26 1b       	sub	r18, r22
     7ac:	37 0b       	sbc	r19, r23
     7ae:	8a ef       	ldi	r24, 0xFA	; 250
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	82 1b       	sub	r24, r18
     7b4:	93 0b       	sbc	r25, r19
     7b6:	90 93 8d 00 	sts	0x008D, r25
     7ba:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain) > 200){
     7be:	60 91 2c 01 	lds	r22, 0x012C
     7c2:	70 91 2d 01 	lds	r23, 0x012D
     7c6:	80 91 2e 01 	lds	r24, 0x012E
     7ca:	90 91 2f 01 	lds	r25, 0x012F
     7ce:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     7d2:	9b 01       	movw	r18, r22
     7d4:	77 23       	and	r23, r23
     7d6:	24 f4       	brge	.+8      	; 0x7e0 <PID_alpha+0x1c4>
     7d8:	22 27       	eor	r18, r18
     7da:	33 27       	eor	r19, r19
     7dc:	26 1b       	sub	r18, r22
     7de:	37 0b       	sbc	r19, r23
     7e0:	29 3c       	cpi	r18, 0xC9	; 201
     7e2:	31 05       	cpc	r19, r1
     7e4:	34 f0       	brlt	.+12     	; 0x7f2 <PID_alpha+0x1d6>
			OCR1C = 50;
     7e6:	82 e3       	ldi	r24, 0x32	; 50
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	90 93 8d 00 	sts	0x008D, r25
     7ee:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B=250;
     7f2:	8a ef       	ldi	r24, 0xFA	; 250
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	90 93 8b 00 	sts	0x008B, r25
     7fa:	80 93 8a 00 	sts	0x008A, r24
	}
		m_usb_tx_string("1B, 1C: ");
     7fe:	89 ed       	ldi	r24, 0xD9	; 217
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 57 0d 	call	0x1aae	; 0x1aae <print_P>
		m_usb_tx_int(OCR1B);
     806:	80 91 8a 00 	lds	r24, 0x008A
     80a:	90 91 8b 00 	lds	r25, 0x008B
     80e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <m_usb_tx_int>
		m_usb_tx_string(", ");
     812:	86 ed       	ldi	r24, 0xD6	; 214
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 57 0d 	call	0x1aae	; 0x1aae <print_P>
		m_usb_tx_int(OCR1C);
     81a:	80 91 8c 00 	lds	r24, 0x008C
     81e:	90 91 8d 00 	lds	r25, 0x008D
     822:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <m_usb_tx_int>
		m_usb_tx_string("\n");
     826:	84 ed       	ldi	r24, 0xD4	; 212
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <print_P>
	
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	bf 90       	pop	r11
     848:	af 90       	pop	r10
     84a:	9f 90       	pop	r9
     84c:	8f 90       	pop	r8
     84e:	7f 90       	pop	r7
     850:	6f 90       	pop	r6
     852:	5f 90       	pop	r5
     854:	4f 90       	pop	r4
     856:	08 95       	ret

00000858 <find_if_reach>:

int find_if_reach(float x, float y){
     858:	8f 92       	push	r8
     85a:	9f 92       	push	r9
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	69 01       	movw	r12, r18
     86e:	7a 01       	movw	r14, r20
	int t = 100;
	float dist = (x - goal[0]) * (x - goal[0]) + (y - goal[1]) * (y - goal[1]);
     870:	20 91 00 01 	lds	r18, 0x0100
     874:	30 91 01 01 	lds	r19, 0x0101
     878:	40 91 02 01 	lds	r20, 0x0102
     87c:	50 91 03 01 	lds	r21, 0x0103
     880:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     884:	4b 01       	movw	r8, r22
     886:	5c 01       	movw	r10, r24
     888:	20 91 04 01 	lds	r18, 0x0104
     88c:	30 91 05 01 	lds	r19, 0x0105
     890:	40 91 06 01 	lds	r20, 0x0106
     894:	50 91 07 01 	lds	r21, 0x0107
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     8a0:	6b 01       	movw	r12, r22
     8a2:	7c 01       	movw	r14, r24
     8a4:	a5 01       	movw	r20, r10
     8a6:	94 01       	movw	r18, r8
     8a8:	c5 01       	movw	r24, r10
     8aa:	b4 01       	movw	r22, r8
     8ac:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     8b0:	4b 01       	movw	r8, r22
     8b2:	5c 01       	movw	r10, r24
     8b4:	a7 01       	movw	r20, r14
     8b6:	96 01       	movw	r18, r12
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
     8c4:	c5 01       	movw	r24, r10
     8c6:	b4 01       	movw	r22, r8
     8c8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
	if (dist < t){
     8cc:	c1 e0       	ldi	r28, 0x01	; 1
     8ce:	d0 e0       	ldi	r29, 0x00	; 0
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	48 ec       	ldi	r20, 0xC8	; 200
     8d6:	52 e4       	ldi	r21, 0x42	; 66
     8d8:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     8dc:	88 23       	and	r24, r24
     8de:	14 f0       	brlt	.+4      	; 0x8e4 <find_if_reach+0x8c>
     8e0:	c0 e0       	ldi	r28, 0x00	; 0
     8e2:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
	}
	else
		return 0;
     8e4:	ce 01       	movw	r24, r28
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	08 95       	ret

000008fc <localization>:
	m_usb_tx_string("\n");
	m_green(OFF);
}
*/

void localization(void){
     8fc:	2f 92       	push	r2
     8fe:	3f 92       	push	r3
     900:	4f 92       	push	r4
     902:	5f 92       	push	r5
     904:	6f 92       	push	r6
     906:	7f 92       	push	r7
     908:	8f 92       	push	r8
     90a:	9f 92       	push	r9
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	cc 57       	subi	r28, 0x7C	; 124
     926:	d1 09       	sbc	r29, r1
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
	m_green(ON);
     932:	6a 9a       	sbi	0x0d, 2	; 13
     934:	72 98       	cbi	0x0e, 2	; 14
	//unsigned int data[8] = {740, 272, 777, 282, 715, 311, 755, 356};
	//float x[4] = {data[0], data[2], data[4], data[6]};
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
     936:	60 91 5c 01 	lds	r22, 0x015C
     93a:	70 91 5d 01 	lds	r23, 0x015D
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     946:	69 83       	std	Y+1, r22	; 0x01
     948:	7a 83       	std	Y+2, r23	; 0x02
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	9c 83       	std	Y+4, r25	; 0x04
     94e:	60 91 62 01 	lds	r22, 0x0162
     952:	70 91 63 01 	lds	r23, 0x0163
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     95e:	6d 83       	std	Y+5, r22	; 0x05
     960:	7e 83       	std	Y+6, r23	; 0x06
     962:	8f 83       	std	Y+7, r24	; 0x07
     964:	98 87       	std	Y+8, r25	; 0x08
     966:	60 91 68 01 	lds	r22, 0x0168
     96a:	70 91 69 01 	lds	r23, 0x0169
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     976:	69 87       	std	Y+9, r22	; 0x09
     978:	7a 87       	std	Y+10, r23	; 0x0a
     97a:	8b 87       	std	Y+11, r24	; 0x0b
     97c:	9c 87       	std	Y+12, r25	; 0x0c
     97e:	60 91 6e 01 	lds	r22, 0x016E
     982:	70 91 6f 01 	lds	r23, 0x016F
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     98e:	6d 87       	std	Y+13, r22	; 0x0d
     990:	7e 87       	std	Y+14, r23	; 0x0e
     992:	8f 87       	std	Y+15, r24	; 0x0f
     994:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
     996:	60 91 5e 01 	lds	r22, 0x015E
     99a:	70 91 5f 01 	lds	r23, 0x015F
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     9a6:	69 8b       	std	Y+17, r22	; 0x11
     9a8:	7a 8b       	std	Y+18, r23	; 0x12
     9aa:	8b 8b       	std	Y+19, r24	; 0x13
     9ac:	9c 8b       	std	Y+20, r25	; 0x14
     9ae:	60 91 64 01 	lds	r22, 0x0164
     9b2:	70 91 65 01 	lds	r23, 0x0165
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     9be:	6d 8b       	std	Y+21, r22	; 0x15
     9c0:	7e 8b       	std	Y+22, r23	; 0x16
     9c2:	8f 8b       	std	Y+23, r24	; 0x17
     9c4:	98 8f       	std	Y+24, r25	; 0x18
     9c6:	60 91 6a 01 	lds	r22, 0x016A
     9ca:	70 91 6b 01 	lds	r23, 0x016B
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     9d6:	69 8f       	std	Y+25, r22	; 0x19
     9d8:	7a 8f       	std	Y+26, r23	; 0x1a
     9da:	8b 8f       	std	Y+27, r24	; 0x1b
     9dc:	9c 8f       	std	Y+28, r25	; 0x1c
     9de:	60 91 70 01 	lds	r22, 0x0170
     9e2:	70 91 71 01 	lds	r23, 0x0171
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 ac 10 	call	0x2158	; 0x2158 <__floatunsisf>
     9ee:	6d 8f       	std	Y+29, r22	; 0x1d
     9f0:	7e 8f       	std	Y+30, r23	; 0x1e
     9f2:	8f 8f       	std	Y+31, r24	; 0x1f
     9f4:	98 a3       	std	Y+32, r25	; 0x20
     9f6:	9e 01       	movw	r18, r28
     9f8:	2f 5f       	subi	r18, 0xFF	; 255
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	e9 96       	adiw	r28, 0x39	; 57
     9fe:	3f af       	std	Y+63, r19	; 0x3f
     a00:	2e af       	std	Y+62, r18	; 0x3e
     a02:	e9 97       	sbiw	r28, 0x39	; 57
     a04:	ce 01       	movw	r24, r28
     a06:	41 96       	adiw	r24, 0x11	; 17
     a08:	e1 96       	adiw	r28, 0x31	; 49
     a0a:	9f af       	std	Y+63, r25	; 0x3f
     a0c:	8e af       	std	Y+62, r24	; 0x3e
     a0e:	e1 97       	sbiw	r28, 0x31	; 49
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
     a10:	ab 96       	adiw	r28, 0x2b	; 43
     a12:	1f ae       	std	Y+63, r1	; 0x3f
     a14:	1e ae       	std	Y+62, r1	; 0x3e
     a16:	ab 97       	sbiw	r28, 0x2b	; 43
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
     a18:	e7 96       	adiw	r28, 0x37	; 55
     a1a:	1f ae       	std	Y+63, r1	; 0x3f
     a1c:	1e ae       	std	Y+62, r1	; 0x3e
     a1e:	e7 97       	sbiw	r28, 0x37	; 55
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     a20:	ab 96       	adiw	r28, 0x2b	; 43
     a22:	ae ad       	ldd	r26, Y+62	; 0x3e
     a24:	bf ad       	ldd	r27, Y+63	; 0x3f
     a26:	ab 97       	sbiw	r28, 0x2b	; 43
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	e5 96       	adiw	r28, 0x35	; 53
     a2c:	bf af       	std	Y+63, r27	; 0x3f
     a2e:	ae af       	std	Y+62, r26	; 0x3e
     a30:	e5 97       	sbiw	r28, 0x35	; 53
     a32:	14 97       	sbiw	r26, 0x04	; 4
     a34:	0c f0       	brlt	.+2      	; 0xa38 <localization+0x13c>
     a36:	a1 c5       	rjmp	.+2882   	; 0x157a <__stack+0xa7b>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
     a38:	e9 96       	adiw	r28, 0x39	; 57
     a3a:	ee ad       	ldd	r30, Y+62	; 0x3e
     a3c:	ff ad       	ldd	r31, Y+63	; 0x3f
     a3e:	e9 97       	sbiw	r28, 0x39	; 57
     a40:	81 90       	ld	r8, Z+
     a42:	91 90       	ld	r9, Z+
     a44:	a1 90       	ld	r10, Z+
     a46:	b1 90       	ld	r11, Z+
     a48:	e7 96       	adiw	r28, 0x37	; 55
     a4a:	8e ad       	ldd	r24, Y+62	; 0x3e
     a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
     a4e:	e7 97       	sbiw	r28, 0x37	; 55
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	29 e3       	ldi	r18, 0x39	; 57
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	2c 0f       	add	r18, r28
     a5a:	3d 1f       	adc	r19, r29
     a5c:	28 0f       	add	r18, r24
     a5e:	39 1f       	adc	r19, r25
     a60:	a7 96       	adiw	r28, 0x27	; 39
     a62:	3f af       	std	Y+63, r19	; 0x3f
     a64:	2e af       	std	Y+62, r18	; 0x3e
     a66:	a7 97       	sbiw	r28, 0x27	; 39
     a68:	a5 e4       	ldi	r26, 0x45	; 69
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ac 0f       	add	r26, r28
     a6e:	bd 1f       	adc	r27, r29
     a70:	a8 0f       	add	r26, r24
     a72:	b9 1f       	adc	r27, r25
     a74:	a3 96       	adiw	r28, 0x23	; 35
     a76:	bf af       	std	Y+63, r27	; 0x3f
     a78:	ae af       	std	Y+62, r26	; 0x3e
     a7a:	a3 97       	sbiw	r28, 0x23	; 35
     a7c:	e7 96       	adiw	r28, 0x37	; 55
     a7e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a80:	9f ad       	ldd	r25, Y+63	; 0x3f
     a82:	e7 97       	sbiw	r28, 0x37	; 55
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	0f 2e       	mov	r0, r31
     a8e:	f1 e2       	ldi	r31, 0x21	; 33
     a90:	6f 2e       	mov	r6, r31
     a92:	71 2c       	mov	r7, r1
     a94:	f0 2d       	mov	r31, r0
     a96:	6c 0e       	add	r6, r28
     a98:	7d 1e       	adc	r7, r29
     a9a:	68 0e       	add	r6, r24
     a9c:	79 1e       	adc	r7, r25
     a9e:	e1 96       	adiw	r28, 0x31	; 49
     aa0:	2e ad       	ldd	r18, Y+62	; 0x3e
     aa2:	3f ad       	ldd	r19, Y+63	; 0x3f
     aa4:	e1 97       	sbiw	r28, 0x31	; 49
     aa6:	2c 5f       	subi	r18, 0xFC	; 252
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     aac:	e5 96       	adiw	r28, 0x35	; 53
     aae:	0e ad       	ldd	r16, Y+62	; 0x3e
     ab0:	1f ad       	ldd	r17, Y+63	; 0x3f
     ab2:	e5 97       	sbiw	r28, 0x35	; 53
     ab4:	af 96       	adiw	r28, 0x2f	; 47
     ab6:	8c ae       	std	Y+60, r8	; 0x3c
     ab8:	9d ae       	std	Y+61, r9	; 0x3d
     aba:	ae ae       	std	Y+62, r10	; 0x3e
     abc:	bf ae       	std	Y+63, r11	; 0x3f
     abe:	af 97       	sbiw	r28, 0x2f	; 47
     ac0:	59 01       	movw	r10, r18
     ac2:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 ec       	ldi	r19, 0xC0	; 192
     ac8:	4f e7       	ldi	r20, 0x7F	; 127
     aca:	54 e4       	ldi	r21, 0x44	; 68
     acc:	af 96       	adiw	r28, 0x2f	; 47
     ace:	6c ad       	ldd	r22, Y+60	; 0x3c
     ad0:	7d ad       	ldd	r23, Y+61	; 0x3d
     ad2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ad4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ad6:	af 97       	sbiw	r28, 0x2f	; 47
     ad8:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     adc:	88 23       	and	r24, r24
     ade:	09 f4       	brne	.+2      	; 0xae2 <localization+0x1e6>
     ae0:	6c c0       	rjmp	.+216    	; 0xbba <__stack+0xbb>
     ae2:	e1 96       	adiw	r28, 0x31	; 49
     ae4:	ae ad       	ldd	r26, Y+62	; 0x3e
     ae6:	bf ad       	ldd	r27, Y+63	; 0x3f
     ae8:	e1 97       	sbiw	r28, 0x31	; 49
     aea:	cd 90       	ld	r12, X+
     aec:	dd 90       	ld	r13, X+
     aee:	ed 90       	ld	r14, X+
     af0:	fc 90       	ld	r15, X
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 ec       	ldi	r19, 0xC0	; 192
     af6:	4f e7       	ldi	r20, 0x7F	; 127
     af8:	54 e4       	ldi	r21, 0x44	; 68
     afa:	c7 01       	movw	r24, r14
     afc:	b6 01       	movw	r22, r12
     afe:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     b02:	88 23       	and	r24, r24
     b04:	09 f4       	brne	.+2      	; 0xb08 <__stack+0x9>
     b06:	59 c0       	rjmp	.+178    	; 0xbba <__stack+0xbb>
     b08:	f1 01       	movw	r30, r2
     b0a:	40 80       	ld	r4, Z
     b0c:	51 80       	ldd	r5, Z+1	; 0x01
     b0e:	62 80       	ldd	r6, Z+2	; 0x02
     b10:	73 80       	ldd	r7, Z+3	; 0x03
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 ec       	ldi	r19, 0xC0	; 192
     b16:	4f e7       	ldi	r20, 0x7F	; 127
     b18:	54 e4       	ldi	r21, 0x44	; 68
     b1a:	c3 01       	movw	r24, r6
     b1c:	b2 01       	movw	r22, r4
     b1e:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     b22:	88 23       	and	r24, r24
     b24:	09 f4       	brne	.+2      	; 0xb28 <__stack+0x29>
     b26:	49 c0       	rjmp	.+146    	; 0xbba <__stack+0xbb>
     b28:	d5 01       	movw	r26, r10
     b2a:	8d 91       	ld	r24, X+
     b2c:	9d 91       	ld	r25, X+
     b2e:	0d 90       	ld	r0, X+
     b30:	bc 91       	ld	r27, X
     b32:	a0 2d       	mov	r26, r0
     b34:	ed 96       	adiw	r28, 0x3d	; 61
     b36:	8c af       	std	Y+60, r24	; 0x3c
     b38:	9d af       	std	Y+61, r25	; 0x3d
     b3a:	ae af       	std	Y+62, r26	; 0x3e
     b3c:	bf af       	std	Y+63, r27	; 0x3f
     b3e:	ed 97       	sbiw	r28, 0x3d	; 61
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 ec       	ldi	r19, 0xC0	; 192
     b44:	4f e7       	ldi	r20, 0x7F	; 127
     b46:	54 e4       	ldi	r21, 0x44	; 68
     b48:	bc 01       	movw	r22, r24
     b4a:	cd 01       	movw	r24, r26
     b4c:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     b50:	88 23       	and	r24, r24
     b52:	99 f1       	breq	.+102    	; 0xbba <__stack+0xbb>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
     b54:	a3 01       	movw	r20, r6
     b56:	92 01       	movw	r18, r4
     b58:	af 96       	adiw	r28, 0x2f	; 47
     b5a:	6c ad       	ldd	r22, Y+60	; 0x3c
     b5c:	7d ad       	ldd	r23, Y+61	; 0x3d
     b5e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b60:	9f ad       	ldd	r25, Y+63	; 0x3f
     b62:	af 97       	sbiw	r28, 0x2f	; 47
     b64:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     b68:	2b 01       	movw	r4, r22
     b6a:	3c 01       	movw	r6, r24
     b6c:	ed 96       	adiw	r28, 0x3d	; 61
     b6e:	2c ad       	ldd	r18, Y+60	; 0x3c
     b70:	3d ad       	ldd	r19, Y+61	; 0x3d
     b72:	4e ad       	ldd	r20, Y+62	; 0x3e
     b74:	5f ad       	ldd	r21, Y+63	; 0x3f
     b76:	ed 97       	sbiw	r28, 0x3d	; 61
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
     b84:	a3 01       	movw	r20, r6
     b86:	92 01       	movw	r18, r4
     b88:	c3 01       	movw	r24, r6
     b8a:	b2 01       	movw	r22, r4
     b8c:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     b90:	2b 01       	movw	r4, r22
     b92:	3c 01       	movw	r6, r24
     b94:	a7 01       	movw	r20, r14
     b96:	96 01       	movw	r18, r12
     b98:	c7 01       	movw	r24, r14
     b9a:	b6 01       	movw	r22, r12
     b9c:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c3 01       	movw	r24, r6
     ba6:	b2 01       	movw	r22, r4
     ba8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
     bac:	0e 94 09 12 	call	0x2412	; 0x2412 <sqrt>
     bb0:	f4 01       	movw	r30, r8
     bb2:	60 83       	st	Z, r22
     bb4:	71 83       	std	Z+1, r23	; 0x01
     bb6:	82 83       	std	Z+2, r24	; 0x02
     bb8:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
     bba:	a7 96       	adiw	r28, 0x27	; 39
     bbc:	ae ad       	ldd	r26, Y+62	; 0x3e
     bbe:	bf ad       	ldd	r27, Y+63	; 0x3f
     bc0:	a7 97       	sbiw	r28, 0x27	; 39
     bc2:	ab 96       	adiw	r28, 0x2b	; 43
     bc4:	ee ad       	ldd	r30, Y+62	; 0x3e
     bc6:	ff ad       	ldd	r31, Y+63	; 0x3f
     bc8:	ab 97       	sbiw	r28, 0x2b	; 43
     bca:	ed 93       	st	X+, r30
     bcc:	fd 93       	st	X+, r31
     bce:	a7 96       	adiw	r28, 0x27	; 39
     bd0:	bf af       	std	Y+63, r27	; 0x3f
     bd2:	ae af       	std	Y+62, r26	; 0x3e
     bd4:	a7 97       	sbiw	r28, 0x27	; 39
			to[ind] = j;
     bd6:	a3 96       	adiw	r28, 0x23	; 35
     bd8:	ae ad       	ldd	r26, Y+62	; 0x3e
     bda:	bf ad       	ldd	r27, Y+63	; 0x3f
     bdc:	a3 97       	sbiw	r28, 0x23	; 35
     bde:	0d 93       	st	X+, r16
     be0:	1d 93       	st	X+, r17
     be2:	a3 96       	adiw	r28, 0x23	; 35
     be4:	bf af       	std	Y+63, r27	; 0x3f
     be6:	ae af       	std	Y+62, r26	; 0x3e
     be8:	a3 97       	sbiw	r28, 0x23	; 35
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     bea:	0f 5f       	subi	r16, 0xFF	; 255
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	b4 e0       	ldi	r27, 0x04	; 4
     bf0:	2b 0e       	add	r2, r27
     bf2:	31 1c       	adc	r3, r1
     bf4:	e4 e0       	ldi	r30, 0x04	; 4
     bf6:	ae 0e       	add	r10, r30
     bf8:	b1 1c       	adc	r11, r1
     bfa:	f4 e0       	ldi	r31, 0x04	; 4
     bfc:	8f 0e       	add	r8, r31
     bfe:	91 1c       	adc	r9, r1
     c00:	04 30       	cpi	r16, 0x04	; 4
     c02:	11 05       	cpc	r17, r1
     c04:	09 f0       	breq	.+2      	; 0xc08 <__stack+0x109>
     c06:	5e cf       	rjmp	.-324    	; 0xac4 <localization+0x1c8>
     c08:	e7 96       	adiw	r28, 0x37	; 55
     c0a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c0c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c0e:	e7 97       	sbiw	r28, 0x37	; 55
     c10:	e5 96       	adiw	r28, 0x35	; 53
     c12:	2e ad       	ldd	r18, Y+62	; 0x3e
     c14:	3f ad       	ldd	r19, Y+63	; 0x3f
     c16:	e5 97       	sbiw	r28, 0x35	; 53
     c18:	82 1b       	sub	r24, r18
     c1a:	93 0b       	sbc	r25, r19
     c1c:	dc 01       	movw	r26, r24
     c1e:	14 96       	adiw	r26, 0x04	; 4
     c20:	e7 96       	adiw	r28, 0x37	; 55
     c22:	bf af       	std	Y+63, r27	; 0x3f
     c24:	ae af       	std	Y+62, r26	; 0x3e
     c26:	e7 97       	sbiw	r28, 0x37	; 55
     c28:	e9 96       	adiw	r28, 0x39	; 57
     c2a:	ee ad       	ldd	r30, Y+62	; 0x3e
     c2c:	ff ad       	ldd	r31, Y+63	; 0x3f
     c2e:	e9 97       	sbiw	r28, 0x39	; 57
     c30:	34 96       	adiw	r30, 0x04	; 4
     c32:	e9 96       	adiw	r28, 0x39	; 57
     c34:	ff af       	std	Y+63, r31	; 0x3f
     c36:	ee af       	std	Y+62, r30	; 0x3e
     c38:	e9 97       	sbiw	r28, 0x39	; 57
     c3a:	e1 96       	adiw	r28, 0x31	; 49
     c3c:	2e ad       	ldd	r18, Y+62	; 0x3e
     c3e:	3f ad       	ldd	r19, Y+63	; 0x3f
     c40:	e1 97       	sbiw	r28, 0x31	; 49
     c42:	2c 5f       	subi	r18, 0xFC	; 252
     c44:	3f 4f       	sbci	r19, 0xFF	; 255
     c46:	e1 96       	adiw	r28, 0x31	; 49
     c48:	3f af       	std	Y+63, r19	; 0x3f
     c4a:	2e af       	std	Y+62, r18	; 0x3e
     c4c:	e1 97       	sbiw	r28, 0x31	; 49
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
     c4e:	e5 96       	adiw	r28, 0x35	; 53
     c50:	8e ad       	ldd	r24, Y+62	; 0x3e
     c52:	9f ad       	ldd	r25, Y+63	; 0x3f
     c54:	e5 97       	sbiw	r28, 0x35	; 53
     c56:	03 97       	sbiw	r24, 0x03	; 3
     c58:	49 f0       	breq	.+18     	; 0xc6c <__stack+0x16d>
     c5a:	e5 96       	adiw	r28, 0x35	; 53
     c5c:	ae ad       	ldd	r26, Y+62	; 0x3e
     c5e:	bf ad       	ldd	r27, Y+63	; 0x3f
     c60:	e5 97       	sbiw	r28, 0x35	; 53
     c62:	ab 96       	adiw	r28, 0x2b	; 43
     c64:	bf af       	std	Y+63, r27	; 0x3f
     c66:	ae af       	std	Y+62, r26	; 0x3e
     c68:	ab 97       	sbiw	r28, 0x2b	; 43
     c6a:	da ce       	rjmp	.-588    	; 0xa20 <localization+0x124>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
     c6c:	e7 96       	adiw	r28, 0x37	; 55
     c6e:	ee ad       	ldd	r30, Y+62	; 0x3e
     c70:	ff ad       	ldd	r31, Y+63	; 0x3f
     c72:	e7 97       	sbiw	r28, 0x37	; 55
     c74:	1e 16       	cp	r1, r30
     c76:	1f 06       	cpc	r1, r31
     c78:	84 f5       	brge	.+96     	; 0xcda <__stack+0x1db>
     c7a:	6e 01       	movw	r12, r28
     c7c:	f1 e2       	ldi	r31, 0x21	; 33
     c7e:	cf 0e       	add	r12, r31
     c80:	d1 1c       	adc	r13, r1
     c82:	21 2c       	mov	r2, r1
     c84:	31 2c       	mov	r3, r1
     c86:	00 e0       	ldi	r16, 0x00	; 0
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	e1 2c       	mov	r14, r1
     c8c:	f1 2c       	mov	r15, r1
     c8e:	e7 96       	adiw	r28, 0x37	; 55
     c90:	ae ac       	ldd	r10, Y+62	; 0x3e
     c92:	bf ac       	ldd	r11, Y+63	; 0x3f
     c94:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] > dmax){
     c96:	d6 01       	movw	r26, r12
     c98:	4d 90       	ld	r4, X+
     c9a:	5d 90       	ld	r5, X+
     c9c:	6d 90       	ld	r6, X+
     c9e:	7d 90       	ld	r7, X+
     ca0:	6d 01       	movw	r12, r26
     ca2:	b8 01       	movw	r22, r16
     ca4:	88 27       	eor	r24, r24
     ca6:	77 fd       	sbrc	r23, 7
     ca8:	80 95       	com	r24
     caa:	98 2f       	mov	r25, r24
     cac:	0e 94 ae 10 	call	0x215c	; 0x215c <__floatsisf>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c3 01       	movw	r24, r6
     cb6:	b2 01       	movw	r22, r4
     cb8:	0e 94 9e 11 	call	0x233c	; 0x233c <__gesf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	34 f4       	brge	.+12     	; 0xccc <__stack+0x1cd>
			indmax = i;
			dmax = d[i];
     cc0:	c3 01       	movw	r24, r6
     cc2:	b2 01       	movw	r22, r4
     cc4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     cc8:	8b 01       	movw	r16, r22
     cca:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
     ccc:	bf ef       	ldi	r27, 0xFF	; 255
     cce:	eb 1a       	sub	r14, r27
     cd0:	fb 0a       	sbc	r15, r27
     cd2:	ea 14       	cp	r14, r10
     cd4:	fb 04       	cpc	r15, r11
     cd6:	f9 f6       	brne	.-66     	; 0xc96 <__stack+0x197>
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__stack+0x1e3>
     cda:	21 2c       	mov	r2, r1
     cdc:	31 2c       	mov	r3, r1
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
     ce2:	e7 96       	adiw	r28, 0x37	; 55
     ce4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ce6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ce8:	e7 97       	sbiw	r28, 0x37	; 55
     cea:	1e 16       	cp	r1, r30
     cec:	1f 06       	cpc	r1, r31
     cee:	dc f5       	brge	.+118    	; 0xd66 <__stack+0x267>
     cf0:	6e 01       	movw	r12, r28
     cf2:	f1 e2       	ldi	r31, 0x21	; 33
     cf4:	cf 0e       	add	r12, r31
     cf6:	d1 1c       	adc	r13, r1
     cf8:	a3 96       	adiw	r28, 0x23	; 35
     cfa:	1f ae       	std	Y+63, r1	; 0x3f
     cfc:	1e ae       	std	Y+62, r1	; 0x3e
     cfe:	a3 97       	sbiw	r28, 0x23	; 35
     d00:	0f 2e       	mov	r0, r31
     d02:	f0 e1       	ldi	r31, 0x10	; 16
     d04:	af 2e       	mov	r10, r31
     d06:	f7 e2       	ldi	r31, 0x27	; 39
     d08:	bf 2e       	mov	r11, r31
     d0a:	f0 2d       	mov	r31, r0
     d0c:	e1 2c       	mov	r14, r1
     d0e:	f1 2c       	mov	r15, r1
     d10:	48 01       	movw	r8, r16
     d12:	e7 96       	adiw	r28, 0x37	; 55
     d14:	0e ad       	ldd	r16, Y+62	; 0x3e
     d16:	1f ad       	ldd	r17, Y+63	; 0x3f
     d18:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] < dmin){
     d1a:	d6 01       	movw	r26, r12
     d1c:	4d 90       	ld	r4, X+
     d1e:	5d 90       	ld	r5, X+
     d20:	6d 90       	ld	r6, X+
     d22:	7d 90       	ld	r7, X+
     d24:	6d 01       	movw	r12, r26
     d26:	b5 01       	movw	r22, r10
     d28:	88 27       	eor	r24, r24
     d2a:	77 fd       	sbrc	r23, 7
     d2c:	80 95       	com	r24
     d2e:	98 2f       	mov	r25, r24
     d30:	0e 94 ae 10 	call	0x215c	; 0x215c <__floatsisf>
     d34:	9b 01       	movw	r18, r22
     d36:	ac 01       	movw	r20, r24
     d38:	c3 01       	movw	r24, r6
     d3a:	b2 01       	movw	r22, r4
     d3c:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     d40:	88 23       	and	r24, r24
     d42:	4c f4       	brge	.+18     	; 0xd56 <__stack+0x257>
			indmin = i;
			dmin = d[i];
     d44:	c3 01       	movw	r24, r6
     d46:	b2 01       	movw	r22, r4
     d48:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     d4c:	5b 01       	movw	r10, r22
     d4e:	a3 96       	adiw	r28, 0x23	; 35
     d50:	ff ae       	std	Y+63, r15	; 0x3f
     d52:	ee ae       	std	Y+62, r14	; 0x3e
     d54:	a3 97       	sbiw	r28, 0x23	; 35
	}
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
     d56:	bf ef       	ldi	r27, 0xFF	; 255
     d58:	eb 1a       	sub	r14, r27
     d5a:	fb 0a       	sbc	r15, r27
     d5c:	e0 16       	cp	r14, r16
     d5e:	f1 06       	cpc	r15, r17
     d60:	e1 f6       	brne	.-72     	; 0xd1a <__stack+0x21b>
     d62:	84 01       	movw	r16, r8
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <__stack+0x26f>
     d66:	a3 96       	adiw	r28, 0x23	; 35
     d68:	1f ae       	std	Y+63, r1	; 0x3f
     d6a:	1e ae       	std	Y+62, r1	; 0x3e
     d6c:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmin: ");
	m_usb_tx_int(dmin);
	m_usb_tx_string("\n");
	*/
	// find miss which point
	double actdmax = dmax * pix2act;
     d6e:	80 90 1c 01 	lds	r8, 0x011C
     d72:	90 90 1d 01 	lds	r9, 0x011D
     d76:	a0 90 1e 01 	lds	r10, 0x011E
     d7a:	b0 90 1f 01 	lds	r11, 0x011F
     d7e:	b8 01       	movw	r22, r16
     d80:	88 27       	eor	r24, r24
     d82:	77 fd       	sbrc	r23, 7
     d84:	80 95       	com	r24
     d86:	98 2f       	mov	r25, r24
     d88:	0e 94 ae 10 	call	0x215c	; 0x215c <__floatsisf>
     d8c:	a5 01       	movw	r20, r10
     d8e:	94 01       	movw	r18, r8
     d90:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
     d94:	2b 01       	movw	r4, r22
     d96:	3c 01       	movw	r6, r24

	
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
     d98:	c0 90 20 01 	lds	r12, 0x0120
     d9c:	d0 90 21 01 	lds	r13, 0x0121
     da0:	e0 90 22 01 	lds	r14, 0x0122
     da4:	f0 90 23 01 	lds	r15, 0x0123
     da8:	e0 e1       	ldi	r30, 0x10	; 16
     daa:	f1 e0       	ldi	r31, 0x01	; 1
     dac:	ab 96       	adiw	r28, 0x2b	; 43
     dae:	ff af       	std	Y+63, r31	; 0x3f
     db0:	ee af       	std	Y+62, r30	; 0x3e
     db2:	ab 97       	sbiw	r28, 0x2b	; 43
	*/
	// find miss which point
	double actdmax = dmax * pix2act;

	
	int ca = 0;
     db4:	a7 96       	adiw	r28, 0x27	; 39
     db6:	1f ae       	std	Y+63, r1	; 0x3f
     db8:	1e ae       	std	Y+62, r1	; 0x3e
     dba:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
     dbc:	01 e0       	ldi	r16, 0x01	; 1
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	ad 96       	adiw	r28, 0x2d	; 45
     dc2:	3f ae       	std	Y+63, r3	; 0x3f
     dc4:	2e ae       	std	Y+62, r2	; 0x3e
     dc6:	ad 97       	sbiw	r28, 0x2d	; 45
     dc8:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
     dca:	d1 01       	movw	r26, r2
     dcc:	2d 91       	ld	r18, X+
     dce:	3d 91       	ld	r19, X+
     dd0:	4d 91       	ld	r20, X+
     dd2:	5d 91       	ld	r21, X+
     dd4:	1d 01       	movw	r2, r26
     dd6:	c3 01       	movw	r24, r6
     dd8:	b2 01       	movw	r22, r4
     dda:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     dde:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixsfsi>
     de2:	9b 01       	movw	r18, r22
     de4:	77 23       	and	r23, r23
     de6:	24 f4       	brge	.+8      	; 0xdf0 <__stack+0x2f1>
     de8:	22 27       	eor	r18, r18
     dea:	33 27       	eor	r19, r19
     dec:	26 1b       	sub	r18, r22
     dee:	37 0b       	sbc	r19, r23
     df0:	b9 01       	movw	r22, r18
     df2:	88 27       	eor	r24, r24
     df4:	77 fd       	sbrc	r23, 7
     df6:	80 95       	com	r24
     df8:	98 2f       	mov	r25, r24
     dfa:	0e 94 ae 10 	call	0x215c	; 0x215c <__floatsisf>
     dfe:	a7 01       	movw	r20, r14
     e00:	96 01       	movw	r18, r12
     e02:	0e 94 0f 10 	call	0x201e	; 0x201e <__cmpsf2>
     e06:	88 23       	and	r24, r24
     e08:	24 f4       	brge	.+8      	; 0xe12 <__stack+0x313>
     e0a:	a7 96       	adiw	r28, 0x27	; 39
     e0c:	1f af       	std	Y+63, r17	; 0x3f
     e0e:	0e af       	std	Y+62, r16	; 0x3e
     e10:	a7 97       	sbiw	r28, 0x27	; 39
	// find miss which point
	double actdmax = dmax * pix2act;

	
	int ca = 0;
	for(i = 1; i<4; i++){
     e12:	0f 5f       	subi	r16, 0xFF	; 255
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	04 30       	cpi	r16, 0x04	; 4
     e18:	11 05       	cpc	r17, r1
     e1a:	b9 f6       	brne	.-82     	; 0xdca <__stack+0x2cb>
     e1c:	ad 96       	adiw	r28, 0x2d	; 45
     e1e:	2e ac       	ldd	r2, Y+62	; 0x3e
     e20:	3f ac       	ldd	r3, Y+63	; 0x3f
     e22:	ad 97       	sbiw	r28, 0x2d	; 45
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
     e24:	65 96       	adiw	r28, 0x15	; 21
     e26:	1c ae       	std	Y+60, r1	; 0x3c
     e28:	1d ae       	std	Y+61, r1	; 0x3d
     e2a:	1e ae       	std	Y+62, r1	; 0x3e
     e2c:	1f ae       	std	Y+63, r1	; 0x3f
     e2e:	65 97       	sbiw	r28, 0x15	; 21
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a0 e8       	ldi	r26, 0x80	; 128
     e36:	bf e3       	ldi	r27, 0x3F	; 63
     e38:	69 96       	adiw	r28, 0x19	; 25
     e3a:	8c af       	std	Y+60, r24	; 0x3c
     e3c:	9d af       	std	Y+61, r25	; 0x3d
     e3e:	ae af       	std	Y+62, r26	; 0x3e
     e40:	bf af       	std	Y+63, r27	; 0x3f
     e42:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
     e44:	a7 96       	adiw	r28, 0x27	; 39
     e46:	ee ad       	ldd	r30, Y+62	; 0x3e
     e48:	ff ad       	ldd	r31, Y+63	; 0x3f
     e4a:	a7 97       	sbiw	r28, 0x27	; 39
     e4c:	e2 30       	cpi	r30, 0x02	; 2
     e4e:	f1 05       	cpc	r31, r1
     e50:	19 f0       	breq	.+6      	; 0xe58 <__stack+0x359>
     e52:	33 97       	sbiw	r30, 0x03	; 3
     e54:	51 f1       	breq	.+84     	; 0xeaa <__stack+0x3ab>
     e56:	5a c0       	rjmp	.+180    	; 0xf0c <__stack+0x40d>
		ref_pw[0] = 0; ref_pw[1] = 0;
		ref_vw[0] = 0; ref_vw[1] = 1;
		
		break;
		case 2: // miss point 4
		ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
     e58:	a5 01       	movw	r20, r10
     e5a:	94 01       	movw	r18, r8
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	88 e6       	ldi	r24, 0x68	; 104
     e62:	91 e4       	ldi	r25, 0x41	; 65
     e64:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     e68:	af 96       	adiw	r28, 0x2f	; 47
     e6a:	6c af       	std	Y+60, r22	; 0x3c
     e6c:	7d af       	std	Y+61, r23	; 0x3d
     e6e:	8e af       	std	Y+62, r24	; 0x3e
     e70:	9f af       	std	Y+63, r25	; 0x3f
     e72:	af 97       	sbiw	r28, 0x2f	; 47
		ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
     e74:	84 e9       	ldi	r24, 0x94	; 148
     e76:	97 e8       	ldi	r25, 0x87	; 135
     e78:	a5 ee       	ldi	r26, 0xE5	; 229
     e7a:	be e3       	ldi	r27, 0x3E	; 62
     e7c:	65 96       	adiw	r28, 0x15	; 21
     e7e:	8c af       	std	Y+60, r24	; 0x3c
     e80:	9d af       	std	Y+61, r25	; 0x3d
     e82:	ae af       	std	Y+62, r26	; 0x3e
     e84:	bf af       	std	Y+63, r27	; 0x3f
     e86:	65 97       	sbiw	r28, 0x15	; 21
     e88:	81 ea       	ldi	r24, 0xA1	; 161
     e8a:	96 ed       	ldi	r25, 0xD6	; 214
     e8c:	a4 e6       	ldi	r26, 0x64	; 100
     e8e:	bf eb       	ldi	r27, 0xBF	; 191
     e90:	69 96       	adiw	r28, 0x19	; 25
     e92:	8c af       	std	Y+60, r24	; 0x3c
     e94:	9d af       	std	Y+61, r25	; 0x3d
     e96:	ae af       	std	Y+62, r26	; 0x3e
     e98:	bf af       	std	Y+63, r27	; 0x3f
     e9a:	69 97       	sbiw	r28, 0x19	; 25
		ref_pw[0] = 0; ref_pw[1] = 0;
		ref_vw[0] = 0; ref_vw[1] = 1;
		
		break;
		case 2: // miss point 4
		ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
     e9c:	e3 96       	adiw	r28, 0x33	; 51
     e9e:	1c ae       	std	Y+60, r1	; 0x3c
     ea0:	1d ae       	std	Y+61, r1	; 0x3d
     ea2:	1e ae       	std	Y+62, r1	; 0x3e
     ea4:	1f ae       	std	Y+63, r1	; 0x3f
     ea6:	e3 97       	sbiw	r28, 0x33	; 51
		ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
	
		break;
     ea8:	45 c0       	rjmp	.+138    	; 0xf34 <__stack+0x435>
		case 3: // miss point 1
		ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	61 ee       	ldi	r22, 0xE1	; 225
     eb0:	7a e7       	ldi	r23, 0x7A	; 122
     eb2:	8a e3       	ldi	r24, 0x3A	; 58
     eb4:	91 e4       	ldi	r25, 0x41	; 65
     eb6:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     eba:	e3 96       	adiw	r28, 0x33	; 51
     ebc:	6c af       	std	Y+60, r22	; 0x3c
     ebe:	7d af       	std	Y+61, r23	; 0x3d
     ec0:	8e af       	std	Y+62, r24	; 0x3e
     ec2:	9f af       	std	Y+63, r25	; 0x3f
     ec4:	e3 97       	sbiw	r28, 0x33	; 51
     ec6:	a5 01       	movw	r20, r10
     ec8:	94 01       	movw	r18, r8
     eca:	63 e2       	ldi	r22, 0x23	; 35
     ecc:	7b ed       	ldi	r23, 0xDB	; 219
     ece:	8b e0       	ldi	r24, 0x0B	; 11
     ed0:	91 ec       	ldi	r25, 0xC1	; 193
     ed2:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     ed6:	af 96       	adiw	r28, 0x2f	; 47
     ed8:	6c af       	std	Y+60, r22	; 0x3c
     eda:	7d af       	std	Y+61, r23	; 0x3d
     edc:	8e af       	std	Y+62, r24	; 0x3e
     ede:	9f af       	std	Y+63, r25	; 0x3f
     ee0:	af 97       	sbiw	r28, 0x2f	; 47
		ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
     ee2:	86 e6       	ldi	r24, 0x66	; 102
     ee4:	96 e6       	ldi	r25, 0x66	; 102
     ee6:	a6 e7       	ldi	r26, 0x76	; 118
     ee8:	bf eb       	ldi	r27, 0xBF	; 191
     eea:	65 96       	adiw	r28, 0x15	; 21
     eec:	8c af       	std	Y+60, r24	; 0x3c
     eee:	9d af       	std	Y+61, r25	; 0x3d
     ef0:	ae af       	std	Y+62, r26	; 0x3e
     ef2:	bf af       	std	Y+63, r27	; 0x3f
     ef4:	65 97       	sbiw	r28, 0x15	; 21
     ef6:	8f e9       	ldi	r24, 0x9F	; 159
     ef8:	9d ec       	ldi	r25, 0xCD	; 205
     efa:	aa e8       	ldi	r26, 0x8A	; 138
     efc:	be e3       	ldi	r27, 0x3E	; 62
     efe:	69 96       	adiw	r28, 0x19	; 25
     f00:	8c af       	std	Y+60, r24	; 0x3c
     f02:	9d af       	std	Y+61, r25	; 0x3d
     f04:	ae af       	std	Y+62, r26	; 0x3e
     f06:	bf af       	std	Y+63, r27	; 0x3f
     f08:	69 97       	sbiw	r28, 0x19	; 25

		break;
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <__stack+0x435>
		default:

		break;
	}
	
	if (ca > 0){
     f0c:	a7 96       	adiw	r28, 0x27	; 39
     f0e:	2e ad       	ldd	r18, Y+62	; 0x3e
     f10:	3f ad       	ldd	r19, Y+63	; 0x3f
     f12:	a7 97       	sbiw	r28, 0x27	; 39
     f14:	12 16       	cp	r1, r18
     f16:	13 06       	cpc	r1, r19
     f18:	0c f0       	brlt	.+2      	; 0xf1c <__stack+0x41d>
     f1a:	ec c2       	rjmp	.+1496   	; 0x14f4 <__stack+0x9f5>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
     f1c:	e3 96       	adiw	r28, 0x33	; 51
     f1e:	1c ae       	std	Y+60, r1	; 0x3c
     f20:	1d ae       	std	Y+61, r1	; 0x3d
     f22:	1e ae       	std	Y+62, r1	; 0x3e
     f24:	1f ae       	std	Y+63, r1	; 0x3f
     f26:	e3 97       	sbiw	r28, 0x33	; 51
     f28:	af 96       	adiw	r28, 0x2f	; 47
     f2a:	1c ae       	std	Y+60, r1	; 0x3c
     f2c:	1d ae       	std	Y+61, r1	; 0x3d
     f2e:	1e ae       	std	Y+62, r1	; 0x3e
     f30:	1f ae       	std	Y+63, r1	; 0x3f
     f32:	af 97       	sbiw	r28, 0x2f	; 47
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
     f34:	f1 01       	movw	r30, r2
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	8c 0f       	add	r24, r28
     f40:	9d 1f       	adc	r25, r29
     f42:	e8 0f       	add	r30, r24
     f44:	f9 1f       	adc	r31, r25
     f46:	e0 ac       	ldd	r14, Z+56	; 0x38
     f48:	f1 ac       	ldd	r15, Z+57	; 0x39
     f4a:	a3 96       	adiw	r28, 0x23	; 35
     f4c:	ee ad       	ldd	r30, Y+62	; 0x3e
     f4e:	ff ad       	ldd	r31, Y+63	; 0x3f
     f50:	a3 97       	sbiw	r28, 0x23	; 35
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	e8 0f       	add	r30, r24
     f58:	f9 1f       	adc	r31, r25
     f5a:	80 ad       	ldd	r24, Z+56	; 0x38
     f5c:	91 ad       	ldd	r25, Z+57	; 0x39
     f5e:	8e 15       	cp	r24, r14
     f60:	9f 05       	cpc	r25, r15
     f62:	89 f0       	breq	.+34     	; 0xf86 <__stack+0x487>
     f64:	a3 96       	adiw	r28, 0x23	; 35
     f66:	ee ad       	ldd	r30, Y+62	; 0x3e
     f68:	ff ad       	ldd	r31, Y+63	; 0x3f
     f6a:	a3 97       	sbiw	r28, 0x23	; 35
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	a5 e4       	ldi	r26, 0x45	; 69
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ac 0f       	add	r26, r28
     f76:	bd 1f       	adc	r27, r29
     f78:	ea 0f       	add	r30, r26
     f7a:	fb 1f       	adc	r31, r27
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	e8 16       	cp	r14, r24
     f82:	f9 06       	cpc	r15, r25
     f84:	69 f4       	brne	.+26     	; 0xfa0 <__stack+0x4a1>
			coin_ind = from[indmax];
			other_ind = to[indmax];
     f86:	d1 01       	movw	r26, r2
     f88:	aa 0f       	add	r26, r26
     f8a:	bb 1f       	adc	r27, r27
     f8c:	e5 e4       	ldi	r30, 0x45	; 69
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ec 0f       	add	r30, r28
     f92:	fd 1f       	adc	r31, r29
     f94:	ae 0f       	add	r26, r30
     f96:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
     f98:	f7 01       	movw	r30, r14
			other_ind = to[indmax];
     f9a:	ed 90       	ld	r14, X+
     f9c:	fc 90       	ld	r15, X
     f9e:	0c c0       	rjmp	.+24     	; 0xfb8 <__stack+0x4b9>
		}
		else{
			coin_ind = to[indmax];
     fa0:	f1 01       	movw	r30, r2
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	25 e4       	ldi	r18, 0x45	; 69
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	2c 0f       	add	r18, r28
     fac:	3d 1f       	adc	r19, r29
     fae:	e2 0f       	add	r30, r18
     fb0:	f3 1f       	adc	r31, r19
     fb2:	01 90       	ld	r0, Z+
     fb4:	f0 81       	ld	r31, Z
     fb6:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
     fb8:	a7 96       	adiw	r28, 0x27	; 39
     fba:	8e ad       	ldd	r24, Y+62	; 0x3e
     fbc:	9f ad       	ldd	r25, Y+63	; 0x3f
     fbe:	a7 97       	sbiw	r28, 0x27	; 39
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <__stack+0x4c7>
     fc4:	45 c0       	rjmp	.+138    	; 0x1050 <__stack+0x551>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
     fc6:	6f 01       	movw	r12, r30
     fc8:	cc 0c       	add	r12, r12
     fca:	dd 1c       	adc	r13, r13
     fcc:	cc 0c       	add	r12, r12
     fce:	dd 1c       	adc	r13, r13
     fd0:	a1 e0       	ldi	r26, 0x01	; 1
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ac 0f       	add	r26, r28
     fd6:	bd 1f       	adc	r27, r29
     fd8:	ca 0e       	add	r12, r26
     fda:	db 1e       	adc	r13, r27
     fdc:	87 01       	movw	r16, r14
     fde:	00 0f       	add	r16, r16
     fe0:	11 1f       	adc	r17, r17
     fe2:	00 0f       	add	r16, r16
     fe4:	11 1f       	adc	r17, r17
     fe6:	0a 0f       	add	r16, r26
     fe8:	1b 1f       	adc	r17, r27
     fea:	f8 01       	movw	r30, r16
     fec:	20 81       	ld	r18, Z
     fee:	31 81       	ldd	r19, Z+1	; 0x01
     ff0:	42 81       	ldd	r20, Z+2	; 0x02
     ff2:	53 81       	ldd	r21, Z+3	; 0x03
     ff4:	d6 01       	movw	r26, r12
     ff6:	6d 91       	ld	r22, X+
     ff8:	7d 91       	ld	r23, X+
     ffa:	8d 91       	ld	r24, X+
     ffc:	9c 91       	ld	r25, X
     ffe:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    100e:	a9 96       	adiw	r28, 0x29	; 41
    1010:	6c af       	std	Y+60, r22	; 0x3c
    1012:	7d af       	std	Y+61, r23	; 0x3d
    1014:	8e af       	std	Y+62, r24	; 0x3e
    1016:	9f af       	std	Y+63, r25	; 0x3f
    1018:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    101a:	f8 01       	movw	r30, r16
    101c:	20 89       	ldd	r18, Z+16	; 0x10
    101e:	31 89       	ldd	r19, Z+17	; 0x11
    1020:	42 89       	ldd	r20, Z+18	; 0x12
    1022:	53 89       	ldd	r21, Z+19	; 0x13
    1024:	d6 01       	movw	r26, r12
    1026:	50 96       	adiw	r26, 0x10	; 16
    1028:	6d 91       	ld	r22, X+
    102a:	7d 91       	ld	r23, X+
    102c:	8d 91       	ld	r24, X+
    102e:	9c 91       	ld	r25, X
    1030:	53 97       	sbiw	r26, 0x13	; 19
    1032:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    1042:	a5 96       	adiw	r28, 0x25	; 37
    1044:	6c af       	std	Y+60, r22	; 0x3c
    1046:	7d af       	std	Y+61, r23	; 0x3d
    1048:	8e af       	std	Y+62, r24	; 0x3e
    104a:	9f af       	std	Y+63, r25	; 0x3f
    104c:	a5 97       	sbiw	r28, 0x25	; 37
    104e:	1e c0       	rjmp	.+60     	; 0x108c <__stack+0x58d>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	2c 0f       	add	r18, r28
    105e:	3d 1f       	adc	r19, r29
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	a2 81       	ldd	r26, Z+2	; 0x02
    106a:	b3 81       	ldd	r27, Z+3	; 0x03
    106c:	a9 96       	adiw	r28, 0x29	; 41
    106e:	8c af       	std	Y+60, r24	; 0x3c
    1070:	9d af       	std	Y+61, r25	; 0x3d
    1072:	ae af       	std	Y+62, r26	; 0x3e
    1074:	bf af       	std	Y+63, r27	; 0x3f
    1076:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = y[coin_ind];
    1078:	80 89       	ldd	r24, Z+16	; 0x10
    107a:	91 89       	ldd	r25, Z+17	; 0x11
    107c:	a2 89       	ldd	r26, Z+18	; 0x12
    107e:	b3 89       	ldd	r27, Z+19	; 0x13
    1080:	a5 96       	adiw	r28, 0x25	; 37
    1082:	8c af       	std	Y+60, r24	; 0x3c
    1084:	9d af       	std	Y+61, r25	; 0x3d
    1086:	ae af       	std	Y+62, r26	; 0x3e
    1088:	bf af       	std	Y+63, r27	; 0x3f
    108a:	a5 97       	sbiw	r28, 0x25	; 37
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    108c:	ee 0c       	add	r14, r14
    108e:	ff 1c       	adc	r15, r15
    1090:	ee 0c       	add	r14, r14
    1092:	ff 1c       	adc	r15, r15
    1094:	a1 e0       	ldi	r26, 0x01	; 1
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ac 0f       	add	r26, r28
    109a:	bd 1f       	adc	r27, r29
    109c:	ea 0e       	add	r14, r26
    109e:	fb 1e       	adc	r15, r27
    10a0:	a9 96       	adiw	r28, 0x29	; 41
    10a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    10a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    10a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    10a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    10aa:	a9 97       	sbiw	r28, 0x29	; 41
    10ac:	f7 01       	movw	r30, r14
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    10ba:	4b 01       	movw	r8, r22
    10bc:	5c 01       	movw	r10, r24
    10be:	a5 96       	adiw	r28, 0x25	; 37
    10c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10c8:	a5 97       	sbiw	r28, 0x25	; 37
    10ca:	d7 01       	movw	r26, r14
    10cc:	50 96       	adiw	r26, 0x10	; 16
    10ce:	6d 91       	ld	r22, X+
    10d0:	7d 91       	ld	r23, X+
    10d2:	8d 91       	ld	r24, X+
    10d4:	9c 91       	ld	r25, X
    10d6:	53 97       	sbiw	r26, 0x13	; 19
    10d8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    10dc:	6b 01       	movw	r12, r22
    10de:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    10e0:	a5 01       	movw	r20, r10
    10e2:	94 01       	movw	r18, r8
    10e4:	c5 01       	movw	r24, r10
    10e6:	b4 01       	movw	r22, r8
    10e8:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    10ec:	2b 01       	movw	r4, r22
    10ee:	3c 01       	movw	r6, r24
    10f0:	a7 01       	movw	r20, r14
    10f2:	96 01       	movw	r18, r12
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
    10f8:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	c3 01       	movw	r24, r6
    1102:	b2 01       	movw	r22, r4
    1104:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
    1108:	0e 94 09 12 	call	0x2412	; 0x2412 <sqrt>
    110c:	2b 01       	movw	r4, r22
    110e:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    1110:	9b 01       	movw	r18, r22
    1112:	ac 01       	movw	r20, r24
    1114:	c5 01       	movw	r24, r10
    1116:	b4 01       	movw	r22, r8
    1118:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
    111c:	4b 01       	movw	r8, r22
    111e:	5c 01       	movw	r10, r24
    1120:	6d 96       	adiw	r28, 0x1d	; 29
    1122:	6c af       	std	Y+60, r22	; 0x3c
    1124:	7d af       	std	Y+61, r23	; 0x3d
    1126:	8e af       	std	Y+62, r24	; 0x3e
    1128:	9f af       	std	Y+63, r25	; 0x3f
    112a:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    112c:	a3 01       	movw	r20, r6
    112e:	92 01       	movw	r18, r4
    1130:	c7 01       	movw	r24, r14
    1132:	b6 01       	movw	r22, r12
    1134:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24
    113c:	a1 96       	adiw	r28, 0x21	; 33
    113e:	6c af       	std	Y+60, r22	; 0x3c
    1140:	7d af       	std	Y+61, r23	; 0x3d
    1142:	8e af       	std	Y+62, r24	; 0x3e
    1144:	9f af       	std	Y+63, r25	; 0x3f
    1146:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    1148:	65 96       	adiw	r28, 0x15	; 21
    114a:	2c ad       	ldd	r18, Y+60	; 0x3c
    114c:	3d ad       	ldd	r19, Y+61	; 0x3d
    114e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1150:	5f ad       	ldd	r21, Y+63	; 0x3f
    1152:	65 97       	sbiw	r28, 0x15	; 21
    1154:	c5 01       	movw	r24, r10
    1156:	b4 01       	movw	r22, r8
    1158:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    115c:	4b 01       	movw	r8, r22
    115e:	5c 01       	movw	r10, r24
    1160:	69 96       	adiw	r28, 0x19	; 25
    1162:	2c ad       	ldd	r18, Y+60	; 0x3c
    1164:	3d ad       	ldd	r19, Y+61	; 0x3d
    1166:	4e ad       	ldd	r20, Y+62	; 0x3e
    1168:	5f ad       	ldd	r21, Y+63	; 0x3f
    116a:	69 97       	sbiw	r28, 0x19	; 25
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    1174:	9b 01       	movw	r18, r22
    1176:	ac 01       	movw	r20, r24
    1178:	c5 01       	movw	r24, r10
    117a:	b4 01       	movw	r22, r8
    117c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
    1180:	4b 01       	movw	r8, r22
    1182:	5c 01       	movw	r10, r24
		float sintheta = sqrt(1 - costheta*costheta);
    1184:	9b 01       	movw	r18, r22
    1186:	ac 01       	movw	r20, r24
    1188:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    118c:	9b 01       	movw	r18, r22
    118e:	ac 01       	movw	r20, r24
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	80 e8       	ldi	r24, 0x80	; 128
    1196:	9f e3       	ldi	r25, 0x3F	; 63
    1198:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    119c:	0e 94 09 12 	call	0x2412	; 0x2412 <sqrt>
    11a0:	2b 01       	movw	r4, r22
    11a2:	3c 01       	movw	r6, r24
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    11a4:	fe 01       	movw	r30, r28
    11a6:	ef 5a       	subi	r30, 0xAF	; 175
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	7f 01       	movw	r14, r30
    11ac:	8e 01       	movw	r16, r28
    11ae:	07 5a       	subi	r16, 0xA7	; 167
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	c5 01       	movw	r24, r10
    11b8:	b4 01       	movw	r22, r8
    11ba:	0e 94 2a 01 	call	0x254	; 0x254 <find_sign>
    11be:	1c 01       	movw	r2, r24
		
		
		if(if_pos_sin == 1){
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <__stack+0x6c9>
    11c6:	98 c0       	rjmp	.+304    	; 0x12f8 <__stack+0x7f9>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    11c8:	20 91 08 01 	lds	r18, 0x0108
    11cc:	30 91 09 01 	lds	r19, 0x0109
    11d0:	40 91 0a 01 	lds	r20, 0x010A
    11d4:	50 91 0b 01 	lds	r21, 0x010B
    11d8:	a9 96       	adiw	r28, 0x29	; 41
    11da:	6c ad       	ldd	r22, Y+60	; 0x3c
    11dc:	7d ad       	ldd	r23, Y+61	; 0x3d
    11de:	8e ad       	ldd	r24, Y+62	; 0x3e
    11e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    11e2:	a9 97       	sbiw	r28, 0x29	; 41
    11e4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    11e8:	a9 96       	adiw	r28, 0x29	; 41
    11ea:	6c af       	std	Y+60, r22	; 0x3c
    11ec:	7d af       	std	Y+61, r23	; 0x3d
    11ee:	8e af       	std	Y+62, r24	; 0x3e
    11f0:	9f af       	std	Y+63, r25	; 0x3f
    11f2:	a9 97       	sbiw	r28, 0x29	; 41
    11f4:	20 91 0c 01 	lds	r18, 0x010C
    11f8:	30 91 0d 01 	lds	r19, 0x010D
    11fc:	40 91 0e 01 	lds	r20, 0x010E
    1200:	50 91 0f 01 	lds	r21, 0x010F
    1204:	a5 96       	adiw	r28, 0x25	; 37
    1206:	6c ad       	ldd	r22, Y+60	; 0x3c
    1208:	7d ad       	ldd	r23, Y+61	; 0x3d
    120a:	8e ad       	ldd	r24, Y+62	; 0x3e
    120c:	9f ad       	ldd	r25, Y+63	; 0x3f
    120e:	a5 97       	sbiw	r28, 0x25	; 37
    1210:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    1214:	6b 01       	movw	r12, r22
    1216:	7c 01       	movw	r14, r24
    1218:	a5 01       	movw	r20, r10
    121a:	94 01       	movw	r18, r8
    121c:	a9 96       	adiw	r28, 0x29	; 41
    121e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1220:	7d ad       	ldd	r23, Y+61	; 0x3d
    1222:	8e ad       	ldd	r24, Y+62	; 0x3e
    1224:	9f ad       	ldd	r25, Y+63	; 0x3f
    1226:	a9 97       	sbiw	r28, 0x29	; 41
    1228:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    122c:	9b 01       	movw	r18, r22
    122e:	ac 01       	movw	r20, r24
    1230:	e3 96       	adiw	r28, 0x33	; 51
    1232:	6c ad       	ldd	r22, Y+60	; 0x3c
    1234:	7d ad       	ldd	r23, Y+61	; 0x3d
    1236:	8e ad       	ldd	r24, Y+62	; 0x3e
    1238:	9f ad       	ldd	r25, Y+63	; 0x3f
    123a:	e3 97       	sbiw	r28, 0x33	; 51
    123c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    1240:	a5 96       	adiw	r28, 0x25	; 37
    1242:	6c af       	std	Y+60, r22	; 0x3c
    1244:	7d af       	std	Y+61, r23	; 0x3d
    1246:	8e af       	std	Y+62, r24	; 0x3e
    1248:	9f af       	std	Y+63, r25	; 0x3f
    124a:	a5 97       	sbiw	r28, 0x25	; 37
    124c:	a3 01       	movw	r20, r6
    124e:	92 01       	movw	r18, r4
    1250:	c7 01       	movw	r24, r14
    1252:	b6 01       	movw	r22, r12
    1254:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	a5 96       	adiw	r28, 0x25	; 37
    125e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1260:	7d ad       	ldd	r23, Y+61	; 0x3d
    1262:	8e ad       	ldd	r24, Y+62	; 0x3e
    1264:	9f ad       	ldd	r25, Y+63	; 0x3f
    1266:	a5 97       	sbiw	r28, 0x25	; 37
    1268:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
    126c:	60 93 54 01 	sts	0x0154, r22
    1270:	70 93 55 01 	sts	0x0155, r23
    1274:	80 93 56 01 	sts	0x0156, r24
    1278:	90 93 57 01 	sts	0x0157, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    127c:	a7 01       	movw	r20, r14
    127e:	96 01       	movw	r18, r12
    1280:	c5 01       	movw	r24, r10
    1282:	b4 01       	movw	r22, r8
    1284:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	af 96       	adiw	r28, 0x2f	; 47
    128e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1290:	7d ad       	ldd	r23, Y+61	; 0x3d
    1292:	8e ad       	ldd	r24, Y+62	; 0x3e
    1294:	9f ad       	ldd	r25, Y+63	; 0x3f
    1296:	af 97       	sbiw	r28, 0x2f	; 47
    1298:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    129c:	6b 01       	movw	r12, r22
    129e:	7c 01       	movw	r14, r24
    12a0:	a9 96       	adiw	r28, 0x29	; 41
    12a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12aa:	a9 97       	sbiw	r28, 0x29	; 41
    12ac:	c3 01       	movw	r24, r6
    12ae:	b2 01       	movw	r22, r4
    12b0:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	c7 01       	movw	r24, r14
    12ba:	b6 01       	movw	r22, r12
    12bc:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    12c0:	60 93 58 01 	sts	0x0158, r22
    12c4:	70 93 59 01 	sts	0x0159, r23
    12c8:	80 93 5a 01 	sts	0x015A, r24
    12cc:	90 93 5b 01 	sts	0x015B, r25
			ypdir[0] = -sintheta;
    12d0:	d3 01       	movw	r26, r6
    12d2:	c2 01       	movw	r24, r4
    12d4:	b0 58       	subi	r27, 0x80	; 128
    12d6:	80 93 4c 01 	sts	0x014C, r24
    12da:	90 93 4d 01 	sts	0x014D, r25
    12de:	a0 93 4e 01 	sts	0x014E, r26
    12e2:	b0 93 4f 01 	sts	0x014F, r27
			ypdir[1] = costheta;
    12e6:	80 92 50 01 	sts	0x0150, r8
    12ea:	90 92 51 01 	sts	0x0151, r9
    12ee:	a0 92 52 01 	sts	0x0152, r10
    12f2:	b0 92 53 01 	sts	0x0153, r11
    12f6:	9c c0       	rjmp	.+312    	; 0x1430 <__stack+0x931>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    12f8:	20 91 08 01 	lds	r18, 0x0108
    12fc:	30 91 09 01 	lds	r19, 0x0109
    1300:	40 91 0a 01 	lds	r20, 0x010A
    1304:	50 91 0b 01 	lds	r21, 0x010B
    1308:	a9 96       	adiw	r28, 0x29	; 41
    130a:	6c ad       	ldd	r22, Y+60	; 0x3c
    130c:	7d ad       	ldd	r23, Y+61	; 0x3d
    130e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1310:	9f ad       	ldd	r25, Y+63	; 0x3f
    1312:	a9 97       	sbiw	r28, 0x29	; 41
    1314:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    1318:	6b 01       	movw	r12, r22
    131a:	7c 01       	movw	r14, r24
    131c:	20 91 0c 01 	lds	r18, 0x010C
    1320:	30 91 0d 01 	lds	r19, 0x010D
    1324:	40 91 0e 01 	lds	r20, 0x010E
    1328:	50 91 0f 01 	lds	r21, 0x010F
    132c:	a5 96       	adiw	r28, 0x25	; 37
    132e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1330:	7d ad       	ldd	r23, Y+61	; 0x3d
    1332:	8e ad       	ldd	r24, Y+62	; 0x3e
    1334:	9f ad       	ldd	r25, Y+63	; 0x3f
    1336:	a5 97       	sbiw	r28, 0x25	; 37
    1338:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    133c:	a5 96       	adiw	r28, 0x25	; 37
    133e:	6c af       	std	Y+60, r22	; 0x3c
    1340:	7d af       	std	Y+61, r23	; 0x3d
    1342:	8e af       	std	Y+62, r24	; 0x3e
    1344:	9f af       	std	Y+63, r25	; 0x3f
    1346:	a5 97       	sbiw	r28, 0x25	; 37
    1348:	a5 01       	movw	r20, r10
    134a:	94 01       	movw	r18, r8
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	e3 96       	adiw	r28, 0x33	; 51
    135a:	6c ad       	ldd	r22, Y+60	; 0x3c
    135c:	7d ad       	ldd	r23, Y+61	; 0x3d
    135e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1360:	9f ad       	ldd	r25, Y+63	; 0x3f
    1362:	e3 97       	sbiw	r28, 0x33	; 51
    1364:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    1368:	a9 96       	adiw	r28, 0x29	; 41
    136a:	6c af       	std	Y+60, r22	; 0x3c
    136c:	7d af       	std	Y+61, r23	; 0x3d
    136e:	8e af       	std	Y+62, r24	; 0x3e
    1370:	9f af       	std	Y+63, r25	; 0x3f
    1372:	a9 97       	sbiw	r28, 0x29	; 41
    1374:	a3 01       	movw	r20, r6
    1376:	92 01       	movw	r18, r4
    1378:	a5 96       	adiw	r28, 0x25	; 37
    137a:	6c ad       	ldd	r22, Y+60	; 0x3c
    137c:	7d ad       	ldd	r23, Y+61	; 0x3d
    137e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1380:	9f ad       	ldd	r25, Y+63	; 0x3f
    1382:	a5 97       	sbiw	r28, 0x25	; 37
    1384:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	a9 96       	adiw	r28, 0x29	; 41
    138e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1390:	7d ad       	ldd	r23, Y+61	; 0x3d
    1392:	8e ad       	ldd	r24, Y+62	; 0x3e
    1394:	9f ad       	ldd	r25, Y+63	; 0x3f
    1396:	a9 97       	sbiw	r28, 0x29	; 41
    1398:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    139c:	60 93 54 01 	sts	0x0154, r22
    13a0:	70 93 55 01 	sts	0x0155, r23
    13a4:	80 93 56 01 	sts	0x0156, r24
    13a8:	90 93 57 01 	sts	0x0157, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    13ac:	a5 96       	adiw	r28, 0x25	; 37
    13ae:	2c ad       	ldd	r18, Y+60	; 0x3c
    13b0:	3d ad       	ldd	r19, Y+61	; 0x3d
    13b2:	4e ad       	ldd	r20, Y+62	; 0x3e
    13b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    13b6:	a5 97       	sbiw	r28, 0x25	; 37
    13b8:	c5 01       	movw	r24, r10
    13ba:	b4 01       	movw	r22, r8
    13bc:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    13c0:	9b 01       	movw	r18, r22
    13c2:	ac 01       	movw	r20, r24
    13c4:	af 96       	adiw	r28, 0x2f	; 47
    13c6:	6c ad       	ldd	r22, Y+60	; 0x3c
    13c8:	7d ad       	ldd	r23, Y+61	; 0x3d
    13ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    13cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    13ce:	af 97       	sbiw	r28, 0x2f	; 47
    13d0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
    13d4:	a5 96       	adiw	r28, 0x25	; 37
    13d6:	6c af       	std	Y+60, r22	; 0x3c
    13d8:	7d af       	std	Y+61, r23	; 0x3d
    13da:	8e af       	std	Y+62, r24	; 0x3e
    13dc:	9f af       	std	Y+63, r25	; 0x3f
    13de:	a5 97       	sbiw	r28, 0x25	; 37
    13e0:	a7 01       	movw	r20, r14
    13e2:	96 01       	movw	r18, r12
    13e4:	c3 01       	movw	r24, r6
    13e6:	b2 01       	movw	r22, r4
    13e8:	0e 94 a2 11 	call	0x2344	; 0x2344 <__mulsf3>
    13ec:	9b 01       	movw	r18, r22
    13ee:	ac 01       	movw	r20, r24
    13f0:	a5 96       	adiw	r28, 0x25	; 37
    13f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    13f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    13f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    13f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    13fa:	a5 97       	sbiw	r28, 0x25	; 37
    13fc:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__addsf3>
    1400:	60 93 58 01 	sts	0x0158, r22
    1404:	70 93 59 01 	sts	0x0159, r23
    1408:	80 93 5a 01 	sts	0x015A, r24
    140c:	90 93 5b 01 	sts	0x015B, r25
			ypdir[0] = sintheta;
    1410:	40 92 4c 01 	sts	0x014C, r4
    1414:	50 92 4d 01 	sts	0x014D, r5
    1418:	60 92 4e 01 	sts	0x014E, r6
    141c:	70 92 4f 01 	sts	0x014F, r7
			ypdir[1] = costheta;
    1420:	80 92 50 01 	sts	0x0150, r8
    1424:	90 92 51 01 	sts	0x0151, r9
    1428:	a0 92 52 01 	sts	0x0152, r10
    142c:	b0 92 53 01 	sts	0x0153, r11
		}
		c_wii_last[0] = c_wii[0];
    1430:	60 91 54 01 	lds	r22, 0x0154
    1434:	70 91 55 01 	lds	r23, 0x0155
    1438:	80 91 56 01 	lds	r24, 0x0156
    143c:	90 91 57 01 	lds	r25, 0x0157
    1440:	60 93 44 01 	sts	0x0144, r22
    1444:	70 93 45 01 	sts	0x0145, r23
    1448:	80 93 46 01 	sts	0x0146, r24
    144c:	90 93 47 01 	sts	0x0147, r25
		c_wii_last[1] = c_wii[1];
    1450:	20 91 58 01 	lds	r18, 0x0158
    1454:	30 91 59 01 	lds	r19, 0x0159
    1458:	40 91 5a 01 	lds	r20, 0x015A
    145c:	50 91 5b 01 	lds	r21, 0x015B
    1460:	20 93 48 01 	sts	0x0148, r18
    1464:	30 93 49 01 	sts	0x0149, r19
    1468:	40 93 4a 01 	sts	0x014A, r20
    146c:	50 93 4b 01 	sts	0x014B, r21
		ypdir_last[0] = ypdir[0];
    1470:	c0 90 4c 01 	lds	r12, 0x014C
    1474:	d0 90 4d 01 	lds	r13, 0x014D
    1478:	e0 90 4e 01 	lds	r14, 0x014E
    147c:	f0 90 4f 01 	lds	r15, 0x014F
    1480:	c0 92 3c 01 	sts	0x013C, r12
    1484:	d0 92 3d 01 	sts	0x013D, r13
    1488:	e0 92 3e 01 	sts	0x013E, r14
    148c:	f0 92 3f 01 	sts	0x013F, r15
		ypdir_last[1] = ypdir[1];
    1490:	c0 90 50 01 	lds	r12, 0x0150
    1494:	d0 90 51 01 	lds	r13, 0x0151
    1498:	e0 90 52 01 	lds	r14, 0x0152
    149c:	f0 90 53 01 	lds	r15, 0x0153
    14a0:	c0 92 40 01 	sts	0x0140, r12
    14a4:	d0 92 41 01 	sts	0x0141, r13
    14a8:	e0 92 42 01 	sts	0x0142, r14
    14ac:	f0 92 43 01 	sts	0x0143, r15
		
		int if_reach = find_if_reach(c_wii[0], c_wii[1]);
    14b0:	0e 94 2c 04 	call	0x858	; 0x858 <find_if_reach>
		if (!if_reach){
    14b4:	89 2b       	or	r24, r25
    14b6:	a9 f4       	brne	.+42     	; 0x14e2 <__stack+0x9e3>
			cal_angle(if_pos_sin, sintheta, costheta);
    14b8:	95 01       	movw	r18, r10
    14ba:	84 01       	movw	r16, r8
    14bc:	b3 01       	movw	r22, r6
    14be:	a2 01       	movw	r20, r4
    14c0:	c1 01       	movw	r24, r2
    14c2:	0e 94 0e 02 	call	0x41c	; 0x41c <cal_angle>
			PID_alpha(150, 0, 100);
    14c6:	e1 2c       	mov	r14, r1
    14c8:	f1 2c       	mov	r15, r1
    14ca:	08 ec       	ldi	r16, 0xC8	; 200
    14cc:	12 e4       	ldi	r17, 0x42	; 66
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	a9 01       	movw	r20, r18
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	86 e1       	ldi	r24, 0x16	; 22
    14da:	93 e4       	ldi	r25, 0x43	; 67
    14dc:	0e 94 0e 03 	call	0x61c	; 0x61c <PID_alpha>
    14e0:	49 c0       	rjmp	.+146    	; 0x1574 <__stack+0xa75>
		}
		else{ // reach goal, stop
			OCR1B = 0;
    14e2:	10 92 8b 00 	sts	0x008B, r1
    14e6:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    14ea:	10 92 8d 00 	sts	0x008D, r1
    14ee:	10 92 8c 00 	sts	0x008C, r1
    14f2:	40 c0       	rjmp	.+128    	; 0x1574 <__stack+0xa75>
		}
	}
	else{
		c_wii[0] = c_wii_last[0];
    14f4:	80 91 44 01 	lds	r24, 0x0144
    14f8:	90 91 45 01 	lds	r25, 0x0145
    14fc:	a0 91 46 01 	lds	r26, 0x0146
    1500:	b0 91 47 01 	lds	r27, 0x0147
    1504:	80 93 54 01 	sts	0x0154, r24
    1508:	90 93 55 01 	sts	0x0155, r25
    150c:	a0 93 56 01 	sts	0x0156, r26
    1510:	b0 93 57 01 	sts	0x0157, r27
		c_wii[1] = c_wii_last[1];
    1514:	80 91 48 01 	lds	r24, 0x0148
    1518:	90 91 49 01 	lds	r25, 0x0149
    151c:	a0 91 4a 01 	lds	r26, 0x014A
    1520:	b0 91 4b 01 	lds	r27, 0x014B
    1524:	80 93 58 01 	sts	0x0158, r24
    1528:	90 93 59 01 	sts	0x0159, r25
    152c:	a0 93 5a 01 	sts	0x015A, r26
    1530:	b0 93 5b 01 	sts	0x015B, r27
		ypdir[0] = ypdir_last[0];
    1534:	80 91 3c 01 	lds	r24, 0x013C
    1538:	90 91 3d 01 	lds	r25, 0x013D
    153c:	a0 91 3e 01 	lds	r26, 0x013E
    1540:	b0 91 3f 01 	lds	r27, 0x013F
    1544:	80 93 4c 01 	sts	0x014C, r24
    1548:	90 93 4d 01 	sts	0x014D, r25
    154c:	a0 93 4e 01 	sts	0x014E, r26
    1550:	b0 93 4f 01 	sts	0x014F, r27
		ypdir[1] = ypdir_last[1];
    1554:	80 91 40 01 	lds	r24, 0x0140
    1558:	90 91 41 01 	lds	r25, 0x0141
    155c:	a0 91 42 01 	lds	r26, 0x0142
    1560:	b0 91 43 01 	lds	r27, 0x0143
    1564:	80 93 50 01 	sts	0x0150, r24
    1568:	90 93 51 01 	sts	0x0151, r25
    156c:	a0 93 52 01 	sts	0x0152, r26
    1570:	b0 93 53 01 	sts	0x0153, r27
	}
	m_green(OFF);
    1574:	6a 9a       	sbi	0x0d, 2	; 13
    1576:	72 9a       	sbi	0x0e, 2	; 14
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <__stack+0xaa3>
    157a:	e9 96       	adiw	r28, 0x39	; 57
    157c:	2e ad       	ldd	r18, Y+62	; 0x3e
    157e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1580:	e9 97       	sbiw	r28, 0x39	; 57
    1582:	2c 5f       	subi	r18, 0xFC	; 252
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	e9 96       	adiw	r28, 0x39	; 57
    1588:	3f af       	std	Y+63, r19	; 0x3f
    158a:	2e af       	std	Y+62, r18	; 0x3e
    158c:	e9 97       	sbiw	r28, 0x39	; 57
    158e:	e1 96       	adiw	r28, 0x31	; 49
    1590:	8e ad       	ldd	r24, Y+62	; 0x3e
    1592:	9f ad       	ldd	r25, Y+63	; 0x3f
    1594:	e1 97       	sbiw	r28, 0x31	; 49
    1596:	04 96       	adiw	r24, 0x04	; 4
    1598:	e1 96       	adiw	r28, 0x31	; 49
    159a:	9f af       	std	Y+63, r25	; 0x3f
    159c:	8e af       	std	Y+62, r24	; 0x3e
    159e:	e1 97       	sbiw	r28, 0x31	; 49
    15a0:	5c cb       	rjmp	.-2376   	; 0xc5a <__stack+0x15b>
}
    15a2:	c4 58       	subi	r28, 0x84	; 132
    15a4:	df 4f       	sbci	r29, 0xFF	; 255
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	7f 90       	pop	r7
    15ca:	6f 90       	pop	r6
    15cc:	5f 90       	pop	r5
    15ce:	4f 90       	pop	r4
    15d0:	3f 90       	pop	r3
    15d2:	2f 90       	pop	r2
    15d4:	08 95       	ret

000015d6 <main>:
void cal_angle(int if_pos_sign, float sintheta, float costheta);
void PID_alpha(float Kp, float Ki, float Kd);
int find_if_reach(float x, float y);

int main(void){
	m_clockdivide(0);
    15d6:	e1 e6       	ldi	r30, 0x61	; 97
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 e8       	ldi	r24, 0x80	; 128
    15dc:	80 83       	st	Z, r24
    15de:	10 82       	st	Z, r1
	
	//m_red(ON);
 	m_usb_init();
    15e0:	0e 94 20 0b 	call	0x1640	; 0x1640 <m_usb_init>
	//while(!m_usb_isconnected());
	//m_red(OFF);
	
	m_green(ON);
    15e4:	6a 9a       	sbi	0x0d, 2	; 13
    15e6:	72 98       	cbi	0x0e, 2	; 14
	while(!m_wii_open());
    15e8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <m_wii_open>
    15ec:	88 23       	and	r24, r24
    15ee:	e1 f3       	breq	.-8      	; 0x15e8 <main+0x12>
	m_green(OFF);
    15f0:	6a 9a       	sbi	0x0d, 2	; 13
    15f2:	72 9a       	sbi	0x0e, 2	; 14
		usb_tx_string("Press any key  \n");
	}
	dummy = m_usb_rx_char();
	*/
	//calibration();
	init_timer();
    15f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <init_timer>
	m_wii_read(&blobs[0]);
    15f8:	8c e5       	ldi	r24, 0x5C	; 92
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <m_wii_read>
	m_wii_read(&blobs[0]);
    1600:	8c e5       	ldi	r24, 0x5C	; 92
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <m_wii_read>
	m_wii_read(&blobs[0]);
    1608:	8c e5       	ldi	r24, 0x5C	; 92
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <m_wii_read>
	while(1){
		m_wii_read(&blobs[0]);
    1610:	8c e5       	ldi	r24, 0x5C	; 92
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <m_wii_read>
		
		localization();
    1618:	0e 94 7e 04 	call	0x8fc	; 0x8fc <localization>
    161c:	f9 cf       	rjmp	.-14     	; 0x1610 <main+0x3a>

0000161e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    161e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1620:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1622:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1624:	8c e0       	ldi	r24, 0x0C	; 12
    1626:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    162a:	e9 e6       	ldi	r30, 0x69	; 105
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	80 62       	ori	r24, 0x20	; 32
    1632:	80 83       	st	Z, r24
    1634:	80 81       	ld	r24, Z
    1636:	8f 7e       	andi	r24, 0xEF	; 239
    1638:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    163a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    163c:	78 94       	sei
    163e:	08 95       	ret

00001640 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1646:	80 ea       	ldi	r24, 0xA0	; 160
    1648:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    164c:	82 e1       	ldi	r24, 0x12	; 18
    164e:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1650:	09 b4       	in	r0, 0x29	; 41
    1652:	00 fe       	sbrs	r0, 0
    1654:	fd cf       	rjmp	.-6      	; 0x1650 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1656:	80 e9       	ldi	r24, 0x90	; 144
    1658:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    165c:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1660:	10 92 77 01 	sts	0x0177, r1
	cdc_line_rtsdtr = 0;
    1664:	10 92 74 01 	sts	0x0174, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1668:	8c e0       	ldi	r24, 0x0C	; 12
    166a:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    166e:	78 94       	sei
    1670:	08 95       	ret

00001672 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1676:	90 91 77 01 	lds	r25, 0x0177
    167a:	99 23       	and	r25, r25
    167c:	09 f4       	brne	.+2      	; 0x1680 <m_usb_tx_char+0xe>
    167e:	4c c0       	rjmp	.+152    	; 0x1718 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1680:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1682:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1684:	24 e0       	ldi	r18, 0x04	; 4
    1686:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    168a:	20 91 75 01 	lds	r18, 0x0175
    168e:	22 23       	and	r18, r18
    1690:	49 f0       	breq	.+18     	; 0x16a4 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1692:	20 91 e8 00 	lds	r18, 0x00E8
    1696:	25 fd       	sbrc	r18, 5
    1698:	03 c0       	rjmp	.+6      	; 0x16a0 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    169a:	9f bf       	out	0x3f, r25	; 63
			return -1;
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	41 c0       	rjmp	.+130    	; 0x1722 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    16a0:	10 92 75 01 	sts	0x0175, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    16a4:	30 91 e4 00 	lds	r19, 0x00E4
    16a8:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    16aa:	20 91 e8 00 	lds	r18, 0x00E8
    16ae:	25 fd       	sbrc	r18, 5
    16b0:	24 c0       	rjmp	.+72     	; 0x16fa <m_usb_tx_char+0x88>
		SREG = intr_state;
    16b2:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    16b4:	90 91 e4 00 	lds	r25, 0x00E4
    16b8:	93 17       	cp	r25, r19
    16ba:	81 f0       	breq	.+32     	; 0x16dc <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    16bc:	90 91 77 01 	lds	r25, 0x0177
    16c0:	99 23       	and	r25, r25
    16c2:	61 f1       	breq	.+88     	; 0x171c <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    16c4:	a9 ee       	ldi	r26, 0xE9	; 233
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    16ca:	e8 ee       	ldi	r30, 0xE8	; 232
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    16ce:	c4 ee       	ldi	r28, 0xE4	; 228
    16d0:	d0 e0       	ldi	r29, 0x00	; 0
    16d2:	0d c0       	rjmp	.+26     	; 0x16ee <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    16d4:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    16d6:	98 81       	ld	r25, Y
    16d8:	93 13       	cpse	r25, r19
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	80 93 75 01 	sts	0x0175, r24
			return -1;
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	1e c0       	rjmp	.+60     	; 0x1722 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    16e6:	90 91 77 01 	lds	r25, 0x0177
    16ea:	99 23       	and	r25, r25
    16ec:	c9 f0       	breq	.+50     	; 0x1720 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    16ee:	9f b7       	in	r25, 0x3f	; 63
		cli();
    16f0:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    16f2:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    16f4:	20 81       	ld	r18, Z
    16f6:	25 ff       	sbrs	r18, 5
    16f8:	ed cf       	rjmp	.-38     	; 0x16d4 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    16fa:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    16fe:	80 91 e8 00 	lds	r24, 0x00E8
    1702:	85 fd       	sbrc	r24, 5
    1704:	03 c0       	rjmp	.+6      	; 0x170c <m_usb_tx_char+0x9a>
    1706:	8a e3       	ldi	r24, 0x3A	; 58
    1708:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    170c:	85 e0       	ldi	r24, 0x05	; 5
    170e:	80 93 76 01 	sts	0x0176, r24
	SREG = intr_state;
    1712:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	05 c0       	rjmp	.+10     	; 0x1722 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <m_usb_tx_char+0xb0>
    1720:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	ef 93       	push	r30
    1738:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    173a:	e1 ee       	ldi	r30, 0xE1	; 225
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
        UDINT = 0;
    1740:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1742:	83 ff       	sbrs	r24, 3
    1744:	11 c0       	rjmp	.+34     	; 0x1768 <__vector_10+0x40>
		UENUM = 0;
    1746:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1750:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1754:	92 e1       	ldi	r25, 0x12	; 18
    1756:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    175a:	98 e0       	ldi	r25, 0x08	; 8
    175c:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1760:	10 92 77 01 	sts	0x0177, r1
		cdc_line_rtsdtr = 0;
    1764:	10 92 74 01 	sts	0x0174, r1
        }
	if (intbits & (1<<SOFI)) {
    1768:	82 ff       	sbrs	r24, 2
    176a:	13 c0       	rjmp	.+38     	; 0x1792 <__vector_10+0x6a>
		if (usb_configuration) {
    176c:	80 91 77 01 	lds	r24, 0x0177
    1770:	88 23       	and	r24, r24
    1772:	79 f0       	breq	.+30     	; 0x1792 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1774:	80 91 76 01 	lds	r24, 0x0176
			if (t) {
    1778:	88 23       	and	r24, r24
    177a:	59 f0       	breq	.+22     	; 0x1792 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    177c:	81 50       	subi	r24, 0x01	; 1
    177e:	80 93 76 01 	sts	0x0176, r24
				if (!t) {
    1782:	81 11       	cpse	r24, r1
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    178c:	8a e3       	ldi	r24, 0x3A	; 58
    178e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	9f 91       	pop	r25
    1798:	8f 91       	pop	r24
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    17ce:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    17d2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    17d6:	83 ff       	sbrs	r24, 3
    17d8:	4e c1       	rjmp	.+668    	; 0x1a76 <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    17da:	e1 ef       	ldi	r30, 0xF1	; 241
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    17e0:	40 81       	ld	r20, Z
                wValue = UEDATX;
    17e2:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    17e4:	80 81       	ld	r24, Z
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    17ea:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    17ec:	50 81       	ld	r21, Z
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	bc 01       	movw	r22, r24
    17f2:	75 2b       	or	r23, r21
                wLength = UEDATX;
    17f4:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    17f6:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    17f8:	82 ef       	ldi	r24, 0xF2	; 242
    17fa:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    17fe:	46 30       	cpi	r20, 0x06	; 6
    1800:	09 f0       	breq	.+2      	; 0x1804 <__vector_11+0x60>
    1802:	58 c0       	rjmp	.+176    	; 0x18b4 <__vector_11+0x110>
    1804:	04 c0       	rjmp	.+8      	; 0x180e <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1806:	81 e2       	ldi	r24, 0x21	; 33
    1808:	80 93 eb 00 	sts	0x00EB, r24
					return;
    180c:	3b c1       	rjmp	.+630    	; 0x1a84 <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    180e:	c6 e0       	ldi	r28, 0x06	; 6
    1810:	8e ee       	ldi	r24, 0xEE	; 238
    1812:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1814:	fc 01       	movw	r30, r24
    1816:	45 91       	lpm	r20, Z+
    1818:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    181a:	24 17       	cp	r18, r20
    181c:	35 07       	cpc	r19, r21
    181e:	11 f0       	breq	.+4      	; 0x1824 <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    1820:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1822:	23 c0       	rjmp	.+70     	; 0x186a <__vector_11+0xc6>
				}
				list += 2;
    1824:	fc 01       	movw	r30, r24
    1826:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1828:	45 91       	lpm	r20, Z+
    182a:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    182c:	64 17       	cp	r22, r20
    182e:	75 07       	cpc	r23, r21
    1830:	11 f0       	breq	.+4      	; 0x1836 <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    1832:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1834:	1a c0       	rjmp	.+52     	; 0x186a <__vector_11+0xc6>
				}
				list += 2;
    1836:	fc 01       	movw	r30, r24
    1838:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    183a:	25 91       	lpm	r18, Z+
    183c:	34 91       	lpm	r19, Z
				list += 2;
    183e:	fc 01       	movw	r30, r24
    1840:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1842:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1844:	8b 2f       	mov	r24, r27
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    184a:	8f 3f       	cpi	r24, 0xFF	; 255
    184c:	91 05       	cpc	r25, r1
    184e:	19 f0       	breq	.+6      	; 0x1856 <__vector_11+0xb2>
    1850:	10 f0       	brcs	.+4      	; 0x1856 <__vector_11+0xb2>
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	85 17       	cp	r24, r21
    1858:	08 f4       	brcc	.+2      	; 0x185c <__vector_11+0xb8>
    185a:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    185c:	a8 ee       	ldi	r26, 0xE8	; 232
    185e:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1860:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1862:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1864:	c1 ef       	ldi	r28, 0xF1	; 241
    1866:	d0 e0       	ldi	r29, 0x00	; 0
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <__vector_11+0xcc>
    186a:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    186c:	99 f6       	brne	.-90     	; 0x1814 <__vector_11+0x70>
    186e:	cb cf       	rjmp	.-106    	; 0x1806 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1870:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1872:	98 2f       	mov	r25, r24
    1874:	95 70       	andi	r25, 0x05	; 5
    1876:	e1 f3       	breq	.-8      	; 0x1870 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    1878:	82 fd       	sbrc	r24, 2
    187a:	04 c1       	rjmp	.+520    	; 0x1a84 <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    187c:	45 2f       	mov	r20, r21
    187e:	51 31       	cpi	r21, 0x11	; 17
    1880:	08 f0       	brcs	.+2      	; 0x1884 <__vector_11+0xe0>
    1882:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    1884:	44 23       	and	r20, r20
    1886:	09 f4       	brne	.+2      	; 0x188a <__vector_11+0xe6>
    1888:	fa c0       	rjmp	.+500    	; 0x1a7e <__vector_11+0x2da>
    188a:	f9 01       	movw	r30, r18
    188c:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    188e:	94 91       	lpm	r25, Z
    1890:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1892:	81 50       	subi	r24, 0x01	; 1
    1894:	31 96       	adiw	r30, 0x01	; 1
    1896:	81 11       	cpse	r24, r1
    1898:	fa cf       	rjmp	.-12     	; 0x188e <__vector_11+0xea>
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	84 0f       	add	r24, r20
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	28 0f       	add	r18, r24
    18a4:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    18a6:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18a8:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    18aa:	51 11       	cpse	r21, r1
    18ac:	e1 cf       	rjmp	.-62     	; 0x1870 <__vector_11+0xcc>
    18ae:	40 31       	cpi	r20, 0x10	; 16
    18b0:	f9 f2       	breq	.-66     	; 0x1870 <__vector_11+0xcc>
    18b2:	e8 c0       	rjmp	.+464    	; 0x1a84 <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    18b4:	45 30       	cpi	r20, 0x05	; 5
    18b6:	61 f4       	brne	.+24     	; 0x18d0 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18b8:	8e ef       	ldi	r24, 0xFE	; 254
    18ba:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18be:	e8 ee       	ldi	r30, 0xE8	; 232
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 ff       	sbrs	r24, 0
    18c6:	fd cf       	rjmp	.-6      	; 0x18c2 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    18c8:	20 68       	ori	r18, 0x80	; 128
    18ca:	20 93 e3 00 	sts	0x00E3, r18
			return;
    18ce:	da c0       	rjmp	.+436    	; 0x1a84 <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    18d0:	49 30       	cpi	r20, 0x09	; 9
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <__vector_11+0x132>
    18d4:	36 c0       	rjmp	.+108    	; 0x1942 <__vector_11+0x19e>
    18d6:	c1 11       	cpse	r28, r1
    18d8:	5f c0       	rjmp	.+190    	; 0x1998 <__vector_11+0x1f4>
			usb_configuration = wValue;
    18da:	20 93 77 01 	sts	0x0177, r18
			cdc_line_rtsdtr = 0;
    18de:	10 92 74 01 	sts	0x0174, r1
			transmit_flush_timer = 0;
    18e2:	10 92 76 01 	sts	0x0176, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18e6:	8e ef       	ldi	r24, 0xFE	; 254
    18e8:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    18ec:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    18ee:	87 e9       	ldi	r24, 0x97	; 151
    18f0:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    18f2:	c9 ee       	ldi	r28, 0xE9	; 233
    18f4:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    18f6:	ab ee       	ldi	r26, 0xEB	; 235
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    18fa:	6c ee       	ldi	r22, 0xEC	; 236
    18fc:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    18fe:	4d ee       	ldi	r20, 0xED	; 237
    1900:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1902:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1904:	9c 01       	movw	r18, r24
    1906:	2f 5f       	subi	r18, 0xFF	; 255
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	fc 01       	movw	r30, r24
    190c:	04 91       	lpm	r16, Z
				UECONX = en;
    190e:	0c 93       	st	X, r16
				if (en) {
    1910:	00 23       	and	r16, r16
    1912:	61 f0       	breq	.+24     	; 0x192c <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    1914:	f9 01       	movw	r30, r18
    1916:	24 91       	lpm	r18, Z
    1918:	fb 01       	movw	r30, r22
    191a:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    191c:	9c 01       	movw	r18, r24
    191e:	2d 5f       	subi	r18, 0xFD	; 253
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	fc 01       	movw	r30, r24
    1924:	32 96       	adiw	r30, 0x02	; 2
    1926:	84 91       	lpm	r24, Z
    1928:	fa 01       	movw	r30, r20
    192a:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    192c:	1f 5f       	subi	r17, 0xFF	; 255
    192e:	15 30       	cpi	r17, 0x05	; 5
    1930:	11 f0       	breq	.+4      	; 0x1936 <__vector_11+0x192>
    1932:	c9 01       	movw	r24, r18
    1934:	e6 cf       	rjmp	.-52     	; 0x1902 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1936:	ea ee       	ldi	r30, 0xEA	; 234
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8e e1       	ldi	r24, 0x1E	; 30
    193c:	80 83       	st	Z, r24
        		UERST = 0;
    193e:	10 82       	st	Z, r1
			return;
    1940:	a1 c0       	rjmp	.+322    	; 0x1a84 <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1942:	48 30       	cpi	r20, 0x08	; 8
    1944:	81 f4       	brne	.+32     	; 0x1966 <__vector_11+0x1c2>
    1946:	c0 38       	cpi	r28, 0x80	; 128
    1948:	09 f0       	breq	.+2      	; 0x194c <__vector_11+0x1a8>
    194a:	42 c0       	rjmp	.+132    	; 0x19d0 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    194c:	e8 ee       	ldi	r30, 0xE8	; 232
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	80 ff       	sbrs	r24, 0
    1954:	fd cf       	rjmp	.-6      	; 0x1950 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1956:	80 91 77 01 	lds	r24, 0x0177
    195a:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    195e:	8e ef       	ldi	r24, 0xFE	; 254
    1960:	80 93 e8 00 	sts	0x00E8, r24
    1964:	8f c0       	rjmp	.+286    	; 0x1a84 <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1966:	41 32       	cpi	r20, 0x21	; 33
    1968:	b9 f4       	brne	.+46     	; 0x1998 <__vector_11+0x1f4>
    196a:	c1 3a       	cpi	r28, 0xA1	; 161
    196c:	09 f0       	breq	.+2      	; 0x1970 <__vector_11+0x1cc>
    196e:	40 c0       	rjmp	.+128    	; 0x19f0 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1970:	e8 ee       	ldi	r30, 0xE8	; 232
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 ff       	sbrs	r24, 0
    1978:	fd cf       	rjmp	.-6      	; 0x1974 <__vector_11+0x1d0>
    197a:	e4 e2       	ldi	r30, 0x24	; 36
    197c:	f1 e0       	ldi	r31, 0x01	; 1
    197e:	8b e2       	ldi	r24, 0x2B	; 43
    1980:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1982:	a1 ef       	ldi	r26, 0xF1	; 241
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	21 91       	ld	r18, Z+
    1988:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    198a:	e8 17       	cp	r30, r24
    198c:	f9 07       	cpc	r31, r25
    198e:	d9 f7       	brne	.-10     	; 0x1986 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1990:	8e ef       	ldi	r24, 0xFE	; 254
    1992:	80 93 e8 00 	sts	0x00E8, r24
    1996:	76 c0       	rjmp	.+236    	; 0x1a84 <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1998:	40 32       	cpi	r20, 0x20	; 32
    199a:	d1 f4       	brne	.+52     	; 0x19d0 <__vector_11+0x22c>
    199c:	c1 32       	cpi	r28, 0x21	; 33
    199e:	09 f0       	breq	.+2      	; 0x19a2 <__vector_11+0x1fe>
    19a0:	43 c0       	rjmp	.+134    	; 0x1a28 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    19a2:	e8 ee       	ldi	r30, 0xE8	; 232
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	82 ff       	sbrs	r24, 2
    19aa:	fd cf       	rjmp	.-6      	; 0x19a6 <__vector_11+0x202>
    19ac:	e4 e2       	ldi	r30, 0x24	; 36
    19ae:	f1 e0       	ldi	r31, 0x01	; 1
    19b0:	8b e2       	ldi	r24, 0x2B	; 43
    19b2:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    19b4:	a1 ef       	ldi	r26, 0xF1	; 241
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	2c 91       	ld	r18, X
    19ba:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    19bc:	e8 17       	cp	r30, r24
    19be:	f9 07       	cpc	r31, r25
    19c0:	d9 f7       	brne	.-10     	; 0x19b8 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    19c2:	e8 ee       	ldi	r30, 0xE8	; 232
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8b ef       	ldi	r24, 0xFB	; 251
    19c8:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19ca:	8e ef       	ldi	r24, 0xFE	; 254
    19cc:	80 83       	st	Z, r24
    19ce:	5a c0       	rjmp	.+180    	; 0x1a84 <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    19d0:	42 32       	cpi	r20, 0x22	; 34
    19d2:	71 f4       	brne	.+28     	; 0x19f0 <__vector_11+0x24c>
    19d4:	c1 32       	cpi	r28, 0x21	; 33
    19d6:	09 f0       	breq	.+2      	; 0x19da <__vector_11+0x236>
    19d8:	4e c0       	rjmp	.+156    	; 0x1a76 <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    19da:	20 93 74 01 	sts	0x0174, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    19de:	e8 ee       	ldi	r30, 0xE8	; 232
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 ff       	sbrs	r24, 0
    19e6:	fd cf       	rjmp	.-6      	; 0x19e2 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19e8:	8e ef       	ldi	r24, 0xFE	; 254
    19ea:	80 93 e8 00 	sts	0x00E8, r24
    19ee:	4a c0       	rjmp	.+148    	; 0x1a84 <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    19f0:	41 11       	cpse	r20, r1
    19f2:	1a c0       	rjmp	.+52     	; 0x1a28 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    19f4:	e8 ee       	ldi	r30, 0xE8	; 232
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 ff       	sbrs	r24, 0
    19fc:	fd cf       	rjmp	.-6      	; 0x19f8 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    19fe:	c2 38       	cpi	r28, 0x82	; 130
    1a00:	51 f4       	brne	.+20     	; 0x1a16 <__vector_11+0x272>
				UENUM = wIndex;
    1a02:	e9 ee       	ldi	r30, 0xE9	; 233
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    1a08:	80 91 eb 00 	lds	r24, 0x00EB
    1a0c:	85 fb       	bst	r24, 5
    1a0e:	88 27       	eor	r24, r24
    1a10:	80 f9       	bld	r24, 0
				UENUM = 0;
    1a12:	10 82       	st	Z, r1
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1a16:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1a18:	e1 ef       	ldi	r30, 0xF1	; 241
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 83       	st	Z, r24
			UEDATX = 0;
    1a1e:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a20:	8e ef       	ldi	r24, 0xFE	; 254
    1a22:	80 93 e8 00 	sts	0x00E8, r24
    1a26:	2e c0       	rjmp	.+92     	; 0x1a84 <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1a28:	84 2f       	mov	r24, r20
    1a2a:	8d 7f       	andi	r24, 0xFD	; 253
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	19 f5       	brne	.+70     	; 0x1a76 <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    1a30:	c2 30       	cpi	r28, 0x02	; 2
    1a32:	09 f5       	brne	.+66     	; 0x1a76 <__vector_11+0x2d2>
    1a34:	23 2b       	or	r18, r19
    1a36:	f9 f4       	brne	.+62     	; 0x1a76 <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    1a38:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	86 0f       	add	r24, r22
    1a3e:	84 30       	cpi	r24, 0x04	; 4
    1a40:	d0 f4       	brcc	.+52     	; 0x1a76 <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a42:	8e ef       	ldi	r24, 0xFE	; 254
    1a44:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1a48:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    1a4c:	43 30       	cpi	r20, 0x03	; 3
    1a4e:	21 f4       	brne	.+8      	; 0x1a58 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1a50:	81 e2       	ldi	r24, 0x21	; 33
    1a52:	80 93 eb 00 	sts	0x00EB, r24
    1a56:	16 c0       	rjmp	.+44     	; 0x1a84 <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1a58:	89 e1       	ldi	r24, 0x19	; 25
    1a5a:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <__vector_11+0x2c4>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	6a 95       	dec	r22
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <__vector_11+0x2c0>
    1a6c:	ea ee       	ldi	r30, 0xEA	; 234
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 83       	st	Z, r24
					UERST = 0;
    1a72:	10 82       	st	Z, r1
    1a74:	07 c0       	rjmp	.+14     	; 0x1a84 <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1a76:	81 e2       	ldi	r24, 0x21	; 33
    1a78:	80 93 eb 00 	sts	0x00EB, r24
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a7e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1a80:	51 11       	cpse	r21, r1
    1a82:	f6 ce       	rjmp	.-532    	; 0x1870 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1a84:	ff 91       	pop	r31
    1a86:	ef 91       	pop	r30
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	bf 91       	pop	r27
    1a8e:	af 91       	pop	r26
    1a90:	9f 91       	pop	r25
    1a92:	8f 91       	pop	r24
    1a94:	7f 91       	pop	r23
    1a96:	6f 91       	pop	r22
    1a98:	5f 91       	pop	r21
    1a9a:	4f 91       	pop	r20
    1a9c:	3f 91       	pop	r19
    1a9e:	2f 91       	pop	r18
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1ab4:	ec 01       	movw	r28, r24
    1ab6:	21 96       	adiw	r28, 0x01	; 1
    1ab8:	fc 01       	movw	r30, r24
    1aba:	14 91       	lpm	r17, Z
		if (!c) break;
    1abc:	11 23       	and	r17, r17
    1abe:	69 f0       	breq	.+26     	; 0x1ada <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    1ac0:	1a 30       	cpi	r17, 0x0A	; 10
    1ac2:	19 f4       	brne	.+6      	; 0x1aca <print_P+0x1c>
    1ac4:	8d e0       	ldi	r24, 0x0D	; 13
    1ac6:	0e 94 39 0b 	call	0x1672	; 0x1672 <m_usb_tx_char>
		usb_tx_char(c);
    1aca:	81 2f       	mov	r24, r17
    1acc:	0e 94 39 0b 	call	0x1672	; 0x1672 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	14 91       	lpm	r17, Z
    1ad4:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    1ad6:	11 11       	cpse	r17, r1
    1ad8:	f3 cf       	rjmp	.-26     	; 0x1ac0 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	08 95       	ret

00001ae2 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	27 97       	sbiw	r28, 0x07	; 7
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1afe:	8e 01       	movw	r16, r28
    1b00:	0f 5f       	subi	r16, 0xFF	; 255
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	27 e0       	ldi	r18, 0x07	; 7
    1b06:	f8 01       	movw	r30, r16
    1b08:	11 92       	st	Z+, r1
    1b0a:	2a 95       	dec	r18
    1b0c:	e9 f7       	brne	.-6      	; 0x1b08 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1b0e:	4a e0       	ldi	r20, 0x0A	; 10
    1b10:	b8 01       	movw	r22, r16
    1b12:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__itoa_ncheck>
    1b16:	7e 01       	movw	r14, r28
    1b18:	f8 e0       	ldi	r31, 0x08	; 8
    1b1a:	ef 0e       	add	r14, r31
    1b1c:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1b1e:	f8 01       	movw	r30, r16
    1b20:	81 91       	ld	r24, Z+
    1b22:	8f 01       	movw	r16, r30
    1b24:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1b26:	0e 94 39 0b 	call	0x1672	; 0x1672 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1b2a:	0e 15       	cp	r16, r14
    1b2c:	1f 05       	cpc	r17, r15
    1b2e:	b9 f7       	brne	.-18     	; 0x1b1e <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1b30:	27 96       	adiw	r28, 0x07	; 7
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	08 95       	ret

00001b4a <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1b4e:	ec eb       	ldi	r30, 0xBC	; 188
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	88 23       	and	r24, r24
    1b56:	34 f0       	brlt	.+12     	; 0x1b64 <twi_wait+0x1a>
    1b58:	2f 5f       	subi	r18, 0xFF	; 255
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	29 3e       	cpi	r18, 0xE9	; 233
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	38 07       	cpc	r19, r24
    1b62:	b9 f7       	brne	.-18     	; 0x1b52 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	28 3e       	cpi	r18, 0xE8	; 232
    1b68:	33 40       	sbci	r19, 0x03	; 3
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <twi_wait+0x24>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1b6e:	08 95       	ret

00001b70 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1b70:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1b74:	84 e8       	ldi	r24, 0x84	; 132
    1b76:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1b7a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <twi_wait>
    1b7e:	88 23       	and	r24, r24
    1b80:	19 f0       	breq	.+6      	; 0x1b88 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1b82:	80 91 b9 00 	lds	r24, 0x00B9
    1b86:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1b88:	08 95       	ret

00001b8a <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1b8a:	cf 93       	push	r28
    1b8c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1b8e:	94 ea       	ldi	r25, 0xA4	; 164
    1b90:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1b94:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <twi_wait>
    1b98:	88 23       	and	r24, r24
    1b9a:	61 f0       	breq	.+24     	; 0x1bb4 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1b9c:	8c 2f       	mov	r24, r28
    1b9e:	88 0f       	add	r24, r24
    1ba0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1ba4:	80 32       	cpi	r24, 0x20	; 32
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1ba8:	84 e9       	ldi	r24, 0x94	; 148
    1baa:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <start_write+0x2a>
	}	
	return 1;	// success
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
}	
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1bb8:	0e 94 0f 0b 	call	0x161e	; 0x161e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1bbc:	88 e5       	ldi	r24, 0x58	; 88
    1bbe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <start_write>
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <m_wii_open+0x10>
    1bc6:	cd c0       	rjmp	.+410    	; 0x1d62 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1bc8:	80 e3       	ldi	r24, 0x30	; 48
    1bca:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <m_wii_open+0x1c>
    1bd2:	c9 c0       	rjmp	.+402    	; 0x1d66 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <m_wii_open+0x28>
    1bde:	c5 c0       	rjmp	.+394    	; 0x1d6a <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1be0:	84 e9       	ldi	r24, 0x94	; 148
    1be2:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1be6:	83 ec       	ldi	r24, 0xC3	; 195
    1be8:	99 e0       	ldi	r25, 0x09	; 9
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <m_wii_open+0x32>
    1bee:	00 c0       	rjmp	.+0      	; 0x1bf0 <m_wii_open+0x38>
    1bf0:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1bf2:	88 e5       	ldi	r24, 0x58	; 88
    1bf4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <start_write>
    1bf8:	88 23       	and	r24, r24
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <m_wii_open+0x46>
    1bfc:	b8 c0       	rjmp	.+368    	; 0x1d6e <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c04:	88 23       	and	r24, r24
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <m_wii_open+0x52>
    1c08:	b4 c0       	rjmp	.+360    	; 0x1d72 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c10:	88 23       	and	r24, r24
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <m_wii_open+0x5e>
    1c14:	b0 c0       	rjmp	.+352    	; 0x1d76 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <m_wii_open+0x6a>
    1c20:	ac c0       	rjmp	.+344    	; 0x1d7a <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <m_wii_open+0x76>
    1c2c:	a8 c0       	rjmp	.+336    	; 0x1d7e <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c34:	88 23       	and	r24, r24
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <m_wii_open+0x82>
    1c38:	a4 c0       	rjmp	.+328    	; 0x1d82 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c40:	88 23       	and	r24, r24
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <m_wii_open+0x8e>
    1c44:	a0 c0       	rjmp	.+320    	; 0x1d86 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c4c:	88 23       	and	r24, r24
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <m_wii_open+0x9a>
    1c50:	9c c0       	rjmp	.+312    	; 0x1d8a <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1c52:	80 e9       	ldi	r24, 0x90	; 144
    1c54:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c58:	88 23       	and	r24, r24
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <m_wii_open+0xa6>
    1c5c:	98 c0       	rjmp	.+304    	; 0x1d8e <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c5e:	84 e9       	ldi	r24, 0x94	; 148
    1c60:	80 93 bc 00 	sts	0x00BC, r24
    1c64:	83 ec       	ldi	r24, 0xC3	; 195
    1c66:	99 e0       	ldi	r25, 0x09	; 9
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <m_wii_open+0xb0>
    1c6c:	00 c0       	rjmp	.+0      	; 0x1c6e <m_wii_open+0xb6>
    1c6e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1c70:	88 e5       	ldi	r24, 0x58	; 88
    1c72:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <start_write>
    1c76:	88 23       	and	r24, r24
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <m_wii_open+0xc4>
    1c7a:	8b c0       	rjmp	.+278    	; 0x1d92 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1c7c:	87 e0       	ldi	r24, 0x07	; 7
    1c7e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c82:	88 23       	and	r24, r24
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <m_wii_open+0xd0>
    1c86:	87 c0       	rjmp	.+270    	; 0x1d96 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c8e:	88 23       	and	r24, r24
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <m_wii_open+0xdc>
    1c92:	83 c0       	rjmp	.+262    	; 0x1d9a <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1c94:	81 e4       	ldi	r24, 0x41	; 65
    1c96:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <m_wii_open+0xe8>
    1c9e:	7f c0       	rjmp	.+254    	; 0x1d9e <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ca0:	84 e9       	ldi	r24, 0x94	; 148
    1ca2:	80 93 bc 00 	sts	0x00BC, r24
    1ca6:	83 ec       	ldi	r24, 0xC3	; 195
    1ca8:	99 e0       	ldi	r25, 0x09	; 9
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <m_wii_open+0xf2>
    1cae:	00 c0       	rjmp	.+0      	; 0x1cb0 <m_wii_open+0xf8>
    1cb0:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1cb2:	88 e5       	ldi	r24, 0x58	; 88
    1cb4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <start_write>
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <m_wii_open+0x106>
    1cbc:	72 c0       	rjmp	.+228    	; 0x1da2 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    1cbe:	8a e1       	ldi	r24, 0x1A	; 26
    1cc0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1cc4:	88 23       	and	r24, r24
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <m_wii_open+0x112>
    1cc8:	6e c0       	rjmp	.+220    	; 0x1da6 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1cca:	80 e4       	ldi	r24, 0x40	; 64
    1ccc:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1cd0:	88 23       	and	r24, r24
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <m_wii_open+0x11e>
    1cd4:	6a c0       	rjmp	.+212    	; 0x1daa <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1cdc:	88 23       	and	r24, r24
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <m_wii_open+0x12a>
    1ce0:	66 c0       	rjmp	.+204    	; 0x1dae <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ce2:	84 e9       	ldi	r24, 0x94	; 148
    1ce4:	80 93 bc 00 	sts	0x00BC, r24
    1ce8:	83 ec       	ldi	r24, 0xC3	; 195
    1cea:	99 e0       	ldi	r25, 0x09	; 9
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <m_wii_open+0x134>
    1cf0:	00 c0       	rjmp	.+0      	; 0x1cf2 <m_wii_open+0x13a>
    1cf2:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1cf4:	88 e5       	ldi	r24, 0x58	; 88
    1cf6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <start_write>
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <m_wii_open+0x148>
    1cfe:	59 c0       	rjmp	.+178    	; 0x1db2 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    1d00:	83 e3       	ldi	r24, 0x33	; 51
    1d02:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1d06:	88 23       	and	r24, r24
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <m_wii_open+0x154>
    1d0a:	55 c0       	rjmp	.+170    	; 0x1db6 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1d12:	88 23       	and	r24, r24
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <m_wii_open+0x160>
    1d16:	51 c0       	rjmp	.+162    	; 0x1dba <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d18:	84 e9       	ldi	r24, 0x94	; 148
    1d1a:	80 93 bc 00 	sts	0x00BC, r24
    1d1e:	83 ec       	ldi	r24, 0xC3	; 195
    1d20:	99 e0       	ldi	r25, 0x09	; 9
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <m_wii_open+0x16a>
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <m_wii_open+0x170>
    1d28:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1d2a:	88 e5       	ldi	r24, 0x58	; 88
    1d2c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <start_write>
    1d30:	88 23       	and	r24, r24
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <m_wii_open+0x17e>
    1d34:	44 c0       	rjmp	.+136    	; 0x1dbe <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    1d36:	80 e3       	ldi	r24, 0x30	; 48
    1d38:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1d3c:	88 23       	and	r24, r24
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <m_wii_open+0x18a>
    1d40:	40 c0       	rjmp	.+128    	; 0x1dc2 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1d42:	88 e0       	ldi	r24, 0x08	; 8
    1d44:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1d48:	88 23       	and	r24, r24
    1d4a:	e9 f1       	breq	.+122    	; 0x1dc6 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d4c:	84 e9       	ldi	r24, 0x94	; 148
    1d4e:	80 93 bc 00 	sts	0x00BC, r24
    1d52:	83 ec       	ldi	r24, 0xC3	; 195
    1d54:	99 e0       	ldi	r25, 0x09	; 9
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <m_wii_open+0x19e>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <m_wii_open+0x1a4>
    1d5c:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1dc8:	08 95       	ret

00001dca <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1dca:	cf 93       	push	r28
    1dcc:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1dce:	94 ea       	ldi	r25, 0xA4	; 164
    1dd0:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1dd4:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <twi_wait>
    1dd8:	88 23       	and	r24, r24
    1dda:	69 f0       	breq	.+26     	; 0x1df6 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1ddc:	8c 2f       	mov	r24, r28
    1dde:	88 0f       	add	r24, r24
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1de6:	88 34       	cpi	r24, 0x48	; 72
    1de8:	29 f4       	brne	.+10     	; 0x1df4 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1dea:	84 e9       	ldi	r24, 0x94	; 148
    1dec:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <start_read+0x2c>
	}	
	return 1;	// success
    1df4:	81 e0       	ldi	r24, 0x01	; 1
}	
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	60 97       	sbiw	r28, 0x10	; 16
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	08 2f       	mov	r16, r24
    1e18:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	31 96       	adiw	r30, 0x01	; 1
    1e1e:	80 e1       	ldi	r24, 0x10	; 16
    1e20:	df 01       	movw	r26, r30
    1e22:	1d 92       	st	X+, r1
    1e24:	8a 95       	dec	r24
    1e26:	e9 f7       	brne	.-6      	; 0x1e22 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1e28:	88 e5       	ldi	r24, 0x58	; 88
    1e2a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <start_write>
    1e2e:	88 23       	and	r24, r24
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <m_wii_read+0x3a>
    1e32:	6e c0       	rjmp	.+220    	; 0x1f10 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    1e34:	86 e3       	ldi	r24, 0x36	; 54
    1e36:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <send_byte>
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <m_wii_read+0x46>
    1e3e:	6a c0       	rjmp	.+212    	; 0x1f14 <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e40:	84 e9       	ldi	r24, 0x94	; 148
    1e42:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e46:	b8 e0       	ldi	r27, 0x08	; 8
    1e48:	ba 95       	dec	r27
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <m_wii_read+0x4e>
    1e4c:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1e4e:	88 e5       	ldi	r24, 0x58	; 88
    1e50:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <start_read>
    1e54:	88 23       	and	r24, r24
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <m_wii_read+0x60>
    1e58:	5f c0       	rjmp	.+190    	; 0x1f18 <m_wii_read+0x11e>
    1e5a:	be 01       	movw	r22, r28
    1e5c:	6f 5f       	subi	r22, 0xFF	; 255
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	9e 01       	movw	r18, r28
    1e62:	20 5f       	subi	r18, 0xF0	; 240
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1e66:	ec eb       	ldi	r30, 0xBC	; 188
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1e6c:	4b eb       	ldi	r20, 0xBB	; 187
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1e70:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1e72:	80 81       	ld	r24, Z
    1e74:	88 23       	and	r24, r24
    1e76:	ec f7       	brge	.-6      	; 0x1e72 <m_wii_read+0x78>
		temp[i] = TWDR;
    1e78:	da 01       	movw	r26, r20
    1e7a:	8c 91       	ld	r24, X
    1e7c:	db 01       	movw	r26, r22
    1e7e:	8d 93       	st	X+, r24
    1e80:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1e82:	a2 17       	cp	r26, r18
    1e84:	b3 07       	cpc	r27, r19
    1e86:	a1 f7       	brne	.-24     	; 0x1e70 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1e88:	84 e8       	ldi	r24, 0x84	; 132
    1e8a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1e8e:	ec eb       	ldi	r30, 0xBC	; 188
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 23       	and	r24, r24
    1e96:	ec f7       	brge	.-6      	; 0x1e92 <m_wii_read+0x98>
	temp[15] = TWDR;
    1e98:	80 91 bb 00 	lds	r24, 0x00BB
    1e9c:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e9e:	84 e9       	ldi	r24, 0x94	; 148
    1ea0:	80 93 bc 00 	sts	0x00BC, r24
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	34 96       	adiw	r30, 0x04	; 4
    1ea8:	e0 2e       	mov	r14, r16
    1eaa:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1eac:	80 81       	ld	r24, Z
    1eae:	98 2f       	mov	r25, r24
    1eb0:	90 73       	andi	r25, 0x30	; 48
    1eb2:	af 01       	movw	r20, r30
    1eb4:	42 50       	subi	r20, 0x02	; 2
    1eb6:	51 09       	sbc	r21, r1
    1eb8:	da 01       	movw	r26, r20
    1eba:	4c 91       	ld	r20, X
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	b0 e1       	ldi	r27, 0x10	; 16
    1ec0:	9b 9f       	mul	r25, r27
    1ec2:	40 0d       	add	r20, r0
    1ec4:	51 1d       	adc	r21, r1
    1ec6:	11 24       	eor	r1, r1
    1ec8:	d7 01       	movw	r26, r14
    1eca:	4d 93       	st	X+, r20
    1ecc:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1ece:	48 2f       	mov	r20, r24
    1ed0:	40 7c       	andi	r20, 0xC0	; 192
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	44 0f       	add	r20, r20
    1ed6:	55 1f       	adc	r21, r21
    1ed8:	44 0f       	add	r20, r20
    1eda:	55 1f       	adc	r21, r21
    1edc:	bf 01       	movw	r22, r30
    1ede:	61 50       	subi	r22, 0x01	; 1
    1ee0:	71 09       	sbc	r23, r1
    1ee2:	db 01       	movw	r26, r22
    1ee4:	9c 91       	ld	r25, X
    1ee6:	49 0f       	add	r20, r25
    1ee8:	51 1d       	adc	r21, r1
    1eea:	d7 01       	movw	r26, r14
    1eec:	13 96       	adiw	r26, 0x03	; 3
    1eee:	5c 93       	st	X, r21
    1ef0:	4e 93       	st	-X, r20
    1ef2:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1ef4:	8f 70       	andi	r24, 0x0F	; 15
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	15 96       	adiw	r26, 0x05	; 5
    1efa:	9c 93       	st	X, r25
    1efc:	8e 93       	st	-X, r24
    1efe:	14 97       	sbiw	r26, 0x04	; 4
    1f00:	33 96       	adiw	r30, 0x03	; 3
    1f02:	b6 e0       	ldi	r27, 0x06	; 6
    1f04:	eb 0e       	add	r14, r27
    1f06:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1f08:	2e 17       	cp	r18, r30
    1f0a:	3f 07       	cpc	r19, r31
    1f0c:	79 f6       	brne	.-98     	; 0x1eac <m_wii_read+0xb2>
    1f0e:	06 c0       	rjmp	.+12     	; 0x1f1c <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
}
    1f1e:	60 96       	adiw	r28, 0x10	; 16
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <acos>:
    1f38:	9f 93       	push	r25
    1f3a:	9f 77       	andi	r25, 0x7F	; 127
    1f3c:	4a d1       	rcall	.+660    	; 0x21d2 <__fp_arccos>
    1f3e:	0f 90       	pop	r0
    1f40:	00 20       	and	r0, r0
    1f42:	3a f4       	brpl	.+14     	; 0x1f52 <acos+0x1a>
    1f44:	90 58       	subi	r25, 0x80	; 128
    1f46:	a2 ea       	ldi	r26, 0xA2	; 162
    1f48:	2a ed       	ldi	r18, 0xDA	; 218
    1f4a:	3f e0       	ldi	r19, 0x0F	; 15
    1f4c:	49 e4       	ldi	r20, 0x49	; 73
    1f4e:	50 e4       	ldi	r21, 0x40	; 64
    1f50:	13 d0       	rcall	.+38     	; 0x1f78 <__addsf3x>
    1f52:	ba c1       	rjmp	.+884    	; 0x22c8 <__fp_round>

00001f54 <__subsf3>:
    1f54:	50 58       	subi	r21, 0x80	; 128

00001f56 <__addsf3>:
    1f56:	bb 27       	eor	r27, r27
    1f58:	aa 27       	eor	r26, r26
    1f5a:	0e d0       	rcall	.+28     	; 0x1f78 <__addsf3x>
    1f5c:	b5 c1       	rjmp	.+874    	; 0x22c8 <__fp_round>
    1f5e:	a6 d1       	rcall	.+844    	; 0x22ac <__fp_pscA>
    1f60:	30 f0       	brcs	.+12     	; 0x1f6e <__addsf3+0x18>
    1f62:	ab d1       	rcall	.+854    	; 0x22ba <__fp_pscB>
    1f64:	20 f0       	brcs	.+8      	; 0x1f6e <__addsf3+0x18>
    1f66:	31 f4       	brne	.+12     	; 0x1f74 <__addsf3+0x1e>
    1f68:	9f 3f       	cpi	r25, 0xFF	; 255
    1f6a:	11 f4       	brne	.+4      	; 0x1f70 <__addsf3+0x1a>
    1f6c:	1e f4       	brtc	.+6      	; 0x1f74 <__addsf3+0x1e>
    1f6e:	76 c1       	rjmp	.+748    	; 0x225c <__fp_nan>
    1f70:	0e f4       	brtc	.+2      	; 0x1f74 <__addsf3+0x1e>
    1f72:	e0 95       	com	r30
    1f74:	e7 fb       	bst	r30, 7
    1f76:	6c c1       	rjmp	.+728    	; 0x2250 <__fp_inf>

00001f78 <__addsf3x>:
    1f78:	e9 2f       	mov	r30, r25
    1f7a:	b7 d1       	rcall	.+878    	; 0x22ea <__fp_split3>
    1f7c:	80 f3       	brcs	.-32     	; 0x1f5e <__addsf3+0x8>
    1f7e:	ba 17       	cp	r27, r26
    1f80:	62 07       	cpc	r22, r18
    1f82:	73 07       	cpc	r23, r19
    1f84:	84 07       	cpc	r24, r20
    1f86:	95 07       	cpc	r25, r21
    1f88:	18 f0       	brcs	.+6      	; 0x1f90 <__addsf3x+0x18>
    1f8a:	71 f4       	brne	.+28     	; 0x1fa8 <__addsf3x+0x30>
    1f8c:	9e f5       	brtc	.+102    	; 0x1ff4 <__addsf3x+0x7c>
    1f8e:	cf c1       	rjmp	.+926    	; 0x232e <__fp_zero>
    1f90:	0e f4       	brtc	.+2      	; 0x1f94 <__addsf3x+0x1c>
    1f92:	e0 95       	com	r30
    1f94:	0b 2e       	mov	r0, r27
    1f96:	ba 2f       	mov	r27, r26
    1f98:	a0 2d       	mov	r26, r0
    1f9a:	0b 01       	movw	r0, r22
    1f9c:	b9 01       	movw	r22, r18
    1f9e:	90 01       	movw	r18, r0
    1fa0:	0c 01       	movw	r0, r24
    1fa2:	ca 01       	movw	r24, r20
    1fa4:	a0 01       	movw	r20, r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	ff 27       	eor	r31, r31
    1faa:	59 1b       	sub	r21, r25
    1fac:	99 f0       	breq	.+38     	; 0x1fd4 <__addsf3x+0x5c>
    1fae:	59 3f       	cpi	r21, 0xF9	; 249
    1fb0:	50 f4       	brcc	.+20     	; 0x1fc6 <__addsf3x+0x4e>
    1fb2:	50 3e       	cpi	r21, 0xE0	; 224
    1fb4:	68 f1       	brcs	.+90     	; 0x2010 <__addsf3x+0x98>
    1fb6:	1a 16       	cp	r1, r26
    1fb8:	f0 40       	sbci	r31, 0x00	; 0
    1fba:	a2 2f       	mov	r26, r18
    1fbc:	23 2f       	mov	r18, r19
    1fbe:	34 2f       	mov	r19, r20
    1fc0:	44 27       	eor	r20, r20
    1fc2:	58 5f       	subi	r21, 0xF8	; 248
    1fc4:	f3 cf       	rjmp	.-26     	; 0x1fac <__addsf3x+0x34>
    1fc6:	46 95       	lsr	r20
    1fc8:	37 95       	ror	r19
    1fca:	27 95       	ror	r18
    1fcc:	a7 95       	ror	r26
    1fce:	f0 40       	sbci	r31, 0x00	; 0
    1fd0:	53 95       	inc	r21
    1fd2:	c9 f7       	brne	.-14     	; 0x1fc6 <__addsf3x+0x4e>
    1fd4:	7e f4       	brtc	.+30     	; 0x1ff4 <__addsf3x+0x7c>
    1fd6:	1f 16       	cp	r1, r31
    1fd8:	ba 0b       	sbc	r27, r26
    1fda:	62 0b       	sbc	r22, r18
    1fdc:	73 0b       	sbc	r23, r19
    1fde:	84 0b       	sbc	r24, r20
    1fe0:	ba f0       	brmi	.+46     	; 0x2010 <__addsf3x+0x98>
    1fe2:	91 50       	subi	r25, 0x01	; 1
    1fe4:	a1 f0       	breq	.+40     	; 0x200e <__addsf3x+0x96>
    1fe6:	ff 0f       	add	r31, r31
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	66 1f       	adc	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	88 1f       	adc	r24, r24
    1ff0:	c2 f7       	brpl	.-16     	; 0x1fe2 <__addsf3x+0x6a>
    1ff2:	0e c0       	rjmp	.+28     	; 0x2010 <__addsf3x+0x98>
    1ff4:	ba 0f       	add	r27, r26
    1ff6:	62 1f       	adc	r22, r18
    1ff8:	73 1f       	adc	r23, r19
    1ffa:	84 1f       	adc	r24, r20
    1ffc:	48 f4       	brcc	.+18     	; 0x2010 <__addsf3x+0x98>
    1ffe:	87 95       	ror	r24
    2000:	77 95       	ror	r23
    2002:	67 95       	ror	r22
    2004:	b7 95       	ror	r27
    2006:	f7 95       	ror	r31
    2008:	9e 3f       	cpi	r25, 0xFE	; 254
    200a:	08 f0       	brcs	.+2      	; 0x200e <__addsf3x+0x96>
    200c:	b3 cf       	rjmp	.-154    	; 0x1f74 <__addsf3+0x1e>
    200e:	93 95       	inc	r25
    2010:	88 0f       	add	r24, r24
    2012:	08 f0       	brcs	.+2      	; 0x2016 <__addsf3x+0x9e>
    2014:	99 27       	eor	r25, r25
    2016:	ee 0f       	add	r30, r30
    2018:	97 95       	ror	r25
    201a:	87 95       	ror	r24
    201c:	08 95       	ret

0000201e <__cmpsf2>:
    201e:	f4 d0       	rcall	.+488    	; 0x2208 <__fp_cmp>
    2020:	08 f4       	brcc	.+2      	; 0x2024 <__cmpsf2+0x6>
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	08 95       	ret

00002026 <__divsf3>:
    2026:	0c d0       	rcall	.+24     	; 0x2040 <__divsf3x>
    2028:	4f c1       	rjmp	.+670    	; 0x22c8 <__fp_round>
    202a:	47 d1       	rcall	.+654    	; 0x22ba <__fp_pscB>
    202c:	40 f0       	brcs	.+16     	; 0x203e <__divsf3+0x18>
    202e:	3e d1       	rcall	.+636    	; 0x22ac <__fp_pscA>
    2030:	30 f0       	brcs	.+12     	; 0x203e <__divsf3+0x18>
    2032:	21 f4       	brne	.+8      	; 0x203c <__divsf3+0x16>
    2034:	5f 3f       	cpi	r21, 0xFF	; 255
    2036:	19 f0       	breq	.+6      	; 0x203e <__divsf3+0x18>
    2038:	0b c1       	rjmp	.+534    	; 0x2250 <__fp_inf>
    203a:	51 11       	cpse	r21, r1
    203c:	79 c1       	rjmp	.+754    	; 0x2330 <__fp_szero>
    203e:	0e c1       	rjmp	.+540    	; 0x225c <__fp_nan>

00002040 <__divsf3x>:
    2040:	54 d1       	rcall	.+680    	; 0x22ea <__fp_split3>
    2042:	98 f3       	brcs	.-26     	; 0x202a <__divsf3+0x4>

00002044 <__divsf3_pse>:
    2044:	99 23       	and	r25, r25
    2046:	c9 f3       	breq	.-14     	; 0x203a <__divsf3+0x14>
    2048:	55 23       	and	r21, r21
    204a:	b1 f3       	breq	.-20     	; 0x2038 <__divsf3+0x12>
    204c:	95 1b       	sub	r25, r21
    204e:	55 0b       	sbc	r21, r21
    2050:	bb 27       	eor	r27, r27
    2052:	aa 27       	eor	r26, r26
    2054:	62 17       	cp	r22, r18
    2056:	73 07       	cpc	r23, r19
    2058:	84 07       	cpc	r24, r20
    205a:	38 f0       	brcs	.+14     	; 0x206a <__divsf3_pse+0x26>
    205c:	9f 5f       	subi	r25, 0xFF	; 255
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    2060:	22 0f       	add	r18, r18
    2062:	33 1f       	adc	r19, r19
    2064:	44 1f       	adc	r20, r20
    2066:	aa 1f       	adc	r26, r26
    2068:	a9 f3       	breq	.-22     	; 0x2054 <__divsf3_pse+0x10>
    206a:	33 d0       	rcall	.+102    	; 0x20d2 <__divsf3_pse+0x8e>
    206c:	0e 2e       	mov	r0, r30
    206e:	3a f0       	brmi	.+14     	; 0x207e <__divsf3_pse+0x3a>
    2070:	e0 e8       	ldi	r30, 0x80	; 128
    2072:	30 d0       	rcall	.+96     	; 0x20d4 <__divsf3_pse+0x90>
    2074:	91 50       	subi	r25, 0x01	; 1
    2076:	50 40       	sbci	r21, 0x00	; 0
    2078:	e6 95       	lsr	r30
    207a:	00 1c       	adc	r0, r0
    207c:	ca f7       	brpl	.-14     	; 0x2070 <__divsf3_pse+0x2c>
    207e:	29 d0       	rcall	.+82     	; 0x20d2 <__divsf3_pse+0x8e>
    2080:	fe 2f       	mov	r31, r30
    2082:	27 d0       	rcall	.+78     	; 0x20d2 <__divsf3_pse+0x8e>
    2084:	66 0f       	add	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	88 1f       	adc	r24, r24
    208a:	bb 1f       	adc	r27, r27
    208c:	26 17       	cp	r18, r22
    208e:	37 07       	cpc	r19, r23
    2090:	48 07       	cpc	r20, r24
    2092:	ab 07       	cpc	r26, r27
    2094:	b0 e8       	ldi	r27, 0x80	; 128
    2096:	09 f0       	breq	.+2      	; 0x209a <__divsf3_pse+0x56>
    2098:	bb 0b       	sbc	r27, r27
    209a:	80 2d       	mov	r24, r0
    209c:	bf 01       	movw	r22, r30
    209e:	ff 27       	eor	r31, r31
    20a0:	93 58       	subi	r25, 0x83	; 131
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	2a f0       	brmi	.+10     	; 0x20b0 <__divsf3_pse+0x6c>
    20a6:	9e 3f       	cpi	r25, 0xFE	; 254
    20a8:	51 05       	cpc	r21, r1
    20aa:	68 f0       	brcs	.+26     	; 0x20c6 <__divsf3_pse+0x82>
    20ac:	d1 c0       	rjmp	.+418    	; 0x2250 <__fp_inf>
    20ae:	40 c1       	rjmp	.+640    	; 0x2330 <__fp_szero>
    20b0:	5f 3f       	cpi	r21, 0xFF	; 255
    20b2:	ec f3       	brlt	.-6      	; 0x20ae <__divsf3_pse+0x6a>
    20b4:	98 3e       	cpi	r25, 0xE8	; 232
    20b6:	dc f3       	brlt	.-10     	; 0x20ae <__divsf3_pse+0x6a>
    20b8:	86 95       	lsr	r24
    20ba:	77 95       	ror	r23
    20bc:	67 95       	ror	r22
    20be:	b7 95       	ror	r27
    20c0:	f7 95       	ror	r31
    20c2:	9f 5f       	subi	r25, 0xFF	; 255
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__divsf3_pse+0x74>
    20c6:	88 0f       	add	r24, r24
    20c8:	91 1d       	adc	r25, r1
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	97 f9       	bld	r25, 7
    20d0:	08 95       	ret
    20d2:	e1 e0       	ldi	r30, 0x01	; 1
    20d4:	66 0f       	add	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	88 1f       	adc	r24, r24
    20da:	bb 1f       	adc	r27, r27
    20dc:	62 17       	cp	r22, r18
    20de:	73 07       	cpc	r23, r19
    20e0:	84 07       	cpc	r24, r20
    20e2:	ba 07       	cpc	r27, r26
    20e4:	20 f0       	brcs	.+8      	; 0x20ee <__divsf3_pse+0xaa>
    20e6:	62 1b       	sub	r22, r18
    20e8:	73 0b       	sbc	r23, r19
    20ea:	84 0b       	sbc	r24, r20
    20ec:	ba 0b       	sbc	r27, r26
    20ee:	ee 1f       	adc	r30, r30
    20f0:	88 f7       	brcc	.-30     	; 0x20d4 <__divsf3_pse+0x90>
    20f2:	e0 95       	com	r30
    20f4:	08 95       	ret

000020f6 <__fixsfsi>:
    20f6:	04 d0       	rcall	.+8      	; 0x2100 <__fixunssfsi>
    20f8:	68 94       	set
    20fa:	b1 11       	cpse	r27, r1
    20fc:	19 c1       	rjmp	.+562    	; 0x2330 <__fp_szero>
    20fe:	08 95       	ret

00002100 <__fixunssfsi>:
    2100:	fc d0       	rcall	.+504    	; 0x22fa <__fp_splitA>
    2102:	88 f0       	brcs	.+34     	; 0x2126 <__fixunssfsi+0x26>
    2104:	9f 57       	subi	r25, 0x7F	; 127
    2106:	90 f0       	brcs	.+36     	; 0x212c <__fixunssfsi+0x2c>
    2108:	b9 2f       	mov	r27, r25
    210a:	99 27       	eor	r25, r25
    210c:	b7 51       	subi	r27, 0x17	; 23
    210e:	a0 f0       	brcs	.+40     	; 0x2138 <__fixunssfsi+0x38>
    2110:	d1 f0       	breq	.+52     	; 0x2146 <__fixunssfsi+0x46>
    2112:	66 0f       	add	r22, r22
    2114:	77 1f       	adc	r23, r23
    2116:	88 1f       	adc	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	1a f0       	brmi	.+6      	; 0x2122 <__fixunssfsi+0x22>
    211c:	ba 95       	dec	r27
    211e:	c9 f7       	brne	.-14     	; 0x2112 <__fixunssfsi+0x12>
    2120:	12 c0       	rjmp	.+36     	; 0x2146 <__fixunssfsi+0x46>
    2122:	b1 30       	cpi	r27, 0x01	; 1
    2124:	81 f0       	breq	.+32     	; 0x2146 <__fixunssfsi+0x46>
    2126:	03 d1       	rcall	.+518    	; 0x232e <__fp_zero>
    2128:	b1 e0       	ldi	r27, 0x01	; 1
    212a:	08 95       	ret
    212c:	00 c1       	rjmp	.+512    	; 0x232e <__fp_zero>
    212e:	67 2f       	mov	r22, r23
    2130:	78 2f       	mov	r23, r24
    2132:	88 27       	eor	r24, r24
    2134:	b8 5f       	subi	r27, 0xF8	; 248
    2136:	39 f0       	breq	.+14     	; 0x2146 <__fixunssfsi+0x46>
    2138:	b9 3f       	cpi	r27, 0xF9	; 249
    213a:	cc f3       	brlt	.-14     	; 0x212e <__fixunssfsi+0x2e>
    213c:	86 95       	lsr	r24
    213e:	77 95       	ror	r23
    2140:	67 95       	ror	r22
    2142:	b3 95       	inc	r27
    2144:	d9 f7       	brne	.-10     	; 0x213c <__fixunssfsi+0x3c>
    2146:	3e f4       	brtc	.+14     	; 0x2156 <__fixunssfsi+0x56>
    2148:	90 95       	com	r25
    214a:	80 95       	com	r24
    214c:	70 95       	com	r23
    214e:	61 95       	neg	r22
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	8f 4f       	sbci	r24, 0xFF	; 255
    2154:	9f 4f       	sbci	r25, 0xFF	; 255
    2156:	08 95       	ret

00002158 <__floatunsisf>:
    2158:	e8 94       	clt
    215a:	09 c0       	rjmp	.+18     	; 0x216e <__floatsisf+0x12>

0000215c <__floatsisf>:
    215c:	97 fb       	bst	r25, 7
    215e:	3e f4       	brtc	.+14     	; 0x216e <__floatsisf+0x12>
    2160:	90 95       	com	r25
    2162:	80 95       	com	r24
    2164:	70 95       	com	r23
    2166:	61 95       	neg	r22
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	8f 4f       	sbci	r24, 0xFF	; 255
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	99 23       	and	r25, r25
    2170:	a9 f0       	breq	.+42     	; 0x219c <__floatsisf+0x40>
    2172:	f9 2f       	mov	r31, r25
    2174:	96 e9       	ldi	r25, 0x96	; 150
    2176:	bb 27       	eor	r27, r27
    2178:	93 95       	inc	r25
    217a:	f6 95       	lsr	r31
    217c:	87 95       	ror	r24
    217e:	77 95       	ror	r23
    2180:	67 95       	ror	r22
    2182:	b7 95       	ror	r27
    2184:	f1 11       	cpse	r31, r1
    2186:	f8 cf       	rjmp	.-16     	; 0x2178 <__floatsisf+0x1c>
    2188:	fa f4       	brpl	.+62     	; 0x21c8 <__floatsisf+0x6c>
    218a:	bb 0f       	add	r27, r27
    218c:	11 f4       	brne	.+4      	; 0x2192 <__floatsisf+0x36>
    218e:	60 ff       	sbrs	r22, 0
    2190:	1b c0       	rjmp	.+54     	; 0x21c8 <__floatsisf+0x6c>
    2192:	6f 5f       	subi	r22, 0xFF	; 255
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	8f 4f       	sbci	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	16 c0       	rjmp	.+44     	; 0x21c8 <__floatsisf+0x6c>
    219c:	88 23       	and	r24, r24
    219e:	11 f0       	breq	.+4      	; 0x21a4 <__floatsisf+0x48>
    21a0:	96 e9       	ldi	r25, 0x96	; 150
    21a2:	11 c0       	rjmp	.+34     	; 0x21c6 <__floatsisf+0x6a>
    21a4:	77 23       	and	r23, r23
    21a6:	21 f0       	breq	.+8      	; 0x21b0 <__floatsisf+0x54>
    21a8:	9e e8       	ldi	r25, 0x8E	; 142
    21aa:	87 2f       	mov	r24, r23
    21ac:	76 2f       	mov	r23, r22
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <__floatsisf+0x5e>
    21b0:	66 23       	and	r22, r22
    21b2:	71 f0       	breq	.+28     	; 0x21d0 <__floatsisf+0x74>
    21b4:	96 e8       	ldi	r25, 0x86	; 134
    21b6:	86 2f       	mov	r24, r22
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	2a f0       	brmi	.+10     	; 0x21c8 <__floatsisf+0x6c>
    21be:	9a 95       	dec	r25
    21c0:	66 0f       	add	r22, r22
    21c2:	77 1f       	adc	r23, r23
    21c4:	88 1f       	adc	r24, r24
    21c6:	da f7       	brpl	.-10     	; 0x21be <__floatsisf+0x62>
    21c8:	88 0f       	add	r24, r24
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	97 f9       	bld	r25, 7
    21d0:	08 95       	ret

000021d2 <__fp_arccos>:
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	1f 93       	push	r17
    21d8:	0f 93       	push	r16
    21da:	8b 01       	movw	r16, r22
    21dc:	ec 01       	movw	r28, r24
    21de:	ec ea       	ldi	r30, 0xAC	; 172
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	3f d0       	rcall	.+126    	; 0x2262 <__fp_powser>
    21e4:	71 d0       	rcall	.+226    	; 0x22c8 <__fp_round>
    21e6:	98 01       	movw	r18, r16
    21e8:	ae 01       	movw	r20, r28
    21ea:	8b 01       	movw	r16, r22
    21ec:	ec 01       	movw	r28, r24
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	80 e8       	ldi	r24, 0x80	; 128
    21f4:	9f e3       	ldi	r25, 0x3F	; 63
    21f6:	ae de       	rcall	.-676    	; 0x1f54 <__subsf3>
    21f8:	0c d1       	rcall	.+536    	; 0x2412 <sqrt>
    21fa:	98 01       	movw	r18, r16
    21fc:	ae 01       	movw	r20, r28
    21fe:	0f 91       	pop	r16
    2200:	1f 91       	pop	r17
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	aa c0       	rjmp	.+340    	; 0x235c <__mulsf3x>

00002208 <__fp_cmp>:
    2208:	99 0f       	add	r25, r25
    220a:	00 08       	sbc	r0, r0
    220c:	55 0f       	add	r21, r21
    220e:	aa 0b       	sbc	r26, r26
    2210:	e0 e8       	ldi	r30, 0x80	; 128
    2212:	fe ef       	ldi	r31, 0xFE	; 254
    2214:	16 16       	cp	r1, r22
    2216:	17 06       	cpc	r1, r23
    2218:	e8 07       	cpc	r30, r24
    221a:	f9 07       	cpc	r31, r25
    221c:	c0 f0       	brcs	.+48     	; 0x224e <__fp_cmp+0x46>
    221e:	12 16       	cp	r1, r18
    2220:	13 06       	cpc	r1, r19
    2222:	e4 07       	cpc	r30, r20
    2224:	f5 07       	cpc	r31, r21
    2226:	98 f0       	brcs	.+38     	; 0x224e <__fp_cmp+0x46>
    2228:	62 1b       	sub	r22, r18
    222a:	73 0b       	sbc	r23, r19
    222c:	84 0b       	sbc	r24, r20
    222e:	95 0b       	sbc	r25, r21
    2230:	39 f4       	brne	.+14     	; 0x2240 <__fp_cmp+0x38>
    2232:	0a 26       	eor	r0, r26
    2234:	61 f0       	breq	.+24     	; 0x224e <__fp_cmp+0x46>
    2236:	23 2b       	or	r18, r19
    2238:	24 2b       	or	r18, r20
    223a:	25 2b       	or	r18, r21
    223c:	21 f4       	brne	.+8      	; 0x2246 <__fp_cmp+0x3e>
    223e:	08 95       	ret
    2240:	0a 26       	eor	r0, r26
    2242:	09 f4       	brne	.+2      	; 0x2246 <__fp_cmp+0x3e>
    2244:	a1 40       	sbci	r26, 0x01	; 1
    2246:	a6 95       	lsr	r26
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	81 1d       	adc	r24, r1
    224c:	81 1d       	adc	r24, r1
    224e:	08 95       	ret

00002250 <__fp_inf>:
    2250:	97 f9       	bld	r25, 7
    2252:	9f 67       	ori	r25, 0x7F	; 127
    2254:	80 e8       	ldi	r24, 0x80	; 128
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	08 95       	ret

0000225c <__fp_nan>:
    225c:	9f ef       	ldi	r25, 0xFF	; 255
    225e:	80 ec       	ldi	r24, 0xC0	; 192
    2260:	08 95       	ret

00002262 <__fp_powser>:
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	1f 93       	push	r17
    2268:	0f 93       	push	r16
    226a:	ff 92       	push	r15
    226c:	ef 92       	push	r14
    226e:	df 92       	push	r13
    2270:	7b 01       	movw	r14, r22
    2272:	8c 01       	movw	r16, r24
    2274:	68 94       	set
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <__fp_powser+0x20>
    2278:	da 2e       	mov	r13, r26
    227a:	ef 01       	movw	r28, r30
    227c:	6f d0       	rcall	.+222    	; 0x235c <__mulsf3x>
    227e:	fe 01       	movw	r30, r28
    2280:	e8 94       	clt
    2282:	a5 91       	lpm	r26, Z+
    2284:	25 91       	lpm	r18, Z+
    2286:	35 91       	lpm	r19, Z+
    2288:	45 91       	lpm	r20, Z+
    228a:	55 91       	lpm	r21, Z+
    228c:	ae f3       	brts	.-22     	; 0x2278 <__fp_powser+0x16>
    228e:	ef 01       	movw	r28, r30
    2290:	73 de       	rcall	.-794    	; 0x1f78 <__addsf3x>
    2292:	fe 01       	movw	r30, r28
    2294:	97 01       	movw	r18, r14
    2296:	a8 01       	movw	r20, r16
    2298:	da 94       	dec	r13
    229a:	79 f7       	brne	.-34     	; 0x227a <__fp_powser+0x18>
    229c:	df 90       	pop	r13
    229e:	ef 90       	pop	r14
    22a0:	ff 90       	pop	r15
    22a2:	0f 91       	pop	r16
    22a4:	1f 91       	pop	r17
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <__fp_pscA>:
    22ac:	00 24       	eor	r0, r0
    22ae:	0a 94       	dec	r0
    22b0:	16 16       	cp	r1, r22
    22b2:	17 06       	cpc	r1, r23
    22b4:	18 06       	cpc	r1, r24
    22b6:	09 06       	cpc	r0, r25
    22b8:	08 95       	ret

000022ba <__fp_pscB>:
    22ba:	00 24       	eor	r0, r0
    22bc:	0a 94       	dec	r0
    22be:	12 16       	cp	r1, r18
    22c0:	13 06       	cpc	r1, r19
    22c2:	14 06       	cpc	r1, r20
    22c4:	05 06       	cpc	r0, r21
    22c6:	08 95       	ret

000022c8 <__fp_round>:
    22c8:	09 2e       	mov	r0, r25
    22ca:	03 94       	inc	r0
    22cc:	00 0c       	add	r0, r0
    22ce:	11 f4       	brne	.+4      	; 0x22d4 <__fp_round+0xc>
    22d0:	88 23       	and	r24, r24
    22d2:	52 f0       	brmi	.+20     	; 0x22e8 <__fp_round+0x20>
    22d4:	bb 0f       	add	r27, r27
    22d6:	40 f4       	brcc	.+16     	; 0x22e8 <__fp_round+0x20>
    22d8:	bf 2b       	or	r27, r31
    22da:	11 f4       	brne	.+4      	; 0x22e0 <__fp_round+0x18>
    22dc:	60 ff       	sbrs	r22, 0
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <__fp_round+0x20>
    22e0:	6f 5f       	subi	r22, 0xFF	; 255
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	8f 4f       	sbci	r24, 0xFF	; 255
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	08 95       	ret

000022ea <__fp_split3>:
    22ea:	57 fd       	sbrc	r21, 7
    22ec:	90 58       	subi	r25, 0x80	; 128
    22ee:	44 0f       	add	r20, r20
    22f0:	55 1f       	adc	r21, r21
    22f2:	59 f0       	breq	.+22     	; 0x230a <__fp_splitA+0x10>
    22f4:	5f 3f       	cpi	r21, 0xFF	; 255
    22f6:	71 f0       	breq	.+28     	; 0x2314 <__fp_splitA+0x1a>
    22f8:	47 95       	ror	r20

000022fa <__fp_splitA>:
    22fa:	88 0f       	add	r24, r24
    22fc:	97 fb       	bst	r25, 7
    22fe:	99 1f       	adc	r25, r25
    2300:	61 f0       	breq	.+24     	; 0x231a <__fp_splitA+0x20>
    2302:	9f 3f       	cpi	r25, 0xFF	; 255
    2304:	79 f0       	breq	.+30     	; 0x2324 <__fp_splitA+0x2a>
    2306:	87 95       	ror	r24
    2308:	08 95       	ret
    230a:	12 16       	cp	r1, r18
    230c:	13 06       	cpc	r1, r19
    230e:	14 06       	cpc	r1, r20
    2310:	55 1f       	adc	r21, r21
    2312:	f2 cf       	rjmp	.-28     	; 0x22f8 <__fp_split3+0xe>
    2314:	46 95       	lsr	r20
    2316:	f1 df       	rcall	.-30     	; 0x22fa <__fp_splitA>
    2318:	08 c0       	rjmp	.+16     	; 0x232a <__fp_splitA+0x30>
    231a:	16 16       	cp	r1, r22
    231c:	17 06       	cpc	r1, r23
    231e:	18 06       	cpc	r1, r24
    2320:	99 1f       	adc	r25, r25
    2322:	f1 cf       	rjmp	.-30     	; 0x2306 <__fp_splitA+0xc>
    2324:	86 95       	lsr	r24
    2326:	71 05       	cpc	r23, r1
    2328:	61 05       	cpc	r22, r1
    232a:	08 94       	sec
    232c:	08 95       	ret

0000232e <__fp_zero>:
    232e:	e8 94       	clt

00002330 <__fp_szero>:
    2330:	bb 27       	eor	r27, r27
    2332:	66 27       	eor	r22, r22
    2334:	77 27       	eor	r23, r23
    2336:	cb 01       	movw	r24, r22
    2338:	97 f9       	bld	r25, 7
    233a:	08 95       	ret

0000233c <__gesf2>:
    233c:	65 df       	rcall	.-310    	; 0x2208 <__fp_cmp>
    233e:	08 f4       	brcc	.+2      	; 0x2342 <__gesf2+0x6>
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	08 95       	ret

00002344 <__mulsf3>:
    2344:	0b d0       	rcall	.+22     	; 0x235c <__mulsf3x>
    2346:	c0 cf       	rjmp	.-128    	; 0x22c8 <__fp_round>
    2348:	b1 df       	rcall	.-158    	; 0x22ac <__fp_pscA>
    234a:	28 f0       	brcs	.+10     	; 0x2356 <__mulsf3+0x12>
    234c:	b6 df       	rcall	.-148    	; 0x22ba <__fp_pscB>
    234e:	18 f0       	brcs	.+6      	; 0x2356 <__mulsf3+0x12>
    2350:	95 23       	and	r25, r21
    2352:	09 f0       	breq	.+2      	; 0x2356 <__mulsf3+0x12>
    2354:	7d cf       	rjmp	.-262    	; 0x2250 <__fp_inf>
    2356:	82 cf       	rjmp	.-252    	; 0x225c <__fp_nan>
    2358:	11 24       	eor	r1, r1
    235a:	ea cf       	rjmp	.-44     	; 0x2330 <__fp_szero>

0000235c <__mulsf3x>:
    235c:	c6 df       	rcall	.-116    	; 0x22ea <__fp_split3>
    235e:	a0 f3       	brcs	.-24     	; 0x2348 <__mulsf3+0x4>

00002360 <__mulsf3_pse>:
    2360:	95 9f       	mul	r25, r21
    2362:	d1 f3       	breq	.-12     	; 0x2358 <__mulsf3+0x14>
    2364:	95 0f       	add	r25, r21
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	55 1f       	adc	r21, r21
    236a:	62 9f       	mul	r22, r18
    236c:	f0 01       	movw	r30, r0
    236e:	72 9f       	mul	r23, r18
    2370:	bb 27       	eor	r27, r27
    2372:	f0 0d       	add	r31, r0
    2374:	b1 1d       	adc	r27, r1
    2376:	63 9f       	mul	r22, r19
    2378:	aa 27       	eor	r26, r26
    237a:	f0 0d       	add	r31, r0
    237c:	b1 1d       	adc	r27, r1
    237e:	aa 1f       	adc	r26, r26
    2380:	64 9f       	mul	r22, r20
    2382:	66 27       	eor	r22, r22
    2384:	b0 0d       	add	r27, r0
    2386:	a1 1d       	adc	r26, r1
    2388:	66 1f       	adc	r22, r22
    238a:	82 9f       	mul	r24, r18
    238c:	22 27       	eor	r18, r18
    238e:	b0 0d       	add	r27, r0
    2390:	a1 1d       	adc	r26, r1
    2392:	62 1f       	adc	r22, r18
    2394:	73 9f       	mul	r23, r19
    2396:	b0 0d       	add	r27, r0
    2398:	a1 1d       	adc	r26, r1
    239a:	62 1f       	adc	r22, r18
    239c:	83 9f       	mul	r24, r19
    239e:	a0 0d       	add	r26, r0
    23a0:	61 1d       	adc	r22, r1
    23a2:	22 1f       	adc	r18, r18
    23a4:	74 9f       	mul	r23, r20
    23a6:	33 27       	eor	r19, r19
    23a8:	a0 0d       	add	r26, r0
    23aa:	61 1d       	adc	r22, r1
    23ac:	23 1f       	adc	r18, r19
    23ae:	84 9f       	mul	r24, r20
    23b0:	60 0d       	add	r22, r0
    23b2:	21 1d       	adc	r18, r1
    23b4:	82 2f       	mov	r24, r18
    23b6:	76 2f       	mov	r23, r22
    23b8:	6a 2f       	mov	r22, r26
    23ba:	11 24       	eor	r1, r1
    23bc:	9f 57       	subi	r25, 0x7F	; 127
    23be:	50 40       	sbci	r21, 0x00	; 0
    23c0:	8a f0       	brmi	.+34     	; 0x23e4 <__mulsf3_pse+0x84>
    23c2:	e1 f0       	breq	.+56     	; 0x23fc <__mulsf3_pse+0x9c>
    23c4:	88 23       	and	r24, r24
    23c6:	4a f0       	brmi	.+18     	; 0x23da <__mulsf3_pse+0x7a>
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	bb 1f       	adc	r27, r27
    23ce:	66 1f       	adc	r22, r22
    23d0:	77 1f       	adc	r23, r23
    23d2:	88 1f       	adc	r24, r24
    23d4:	91 50       	subi	r25, 0x01	; 1
    23d6:	50 40       	sbci	r21, 0x00	; 0
    23d8:	a9 f7       	brne	.-22     	; 0x23c4 <__mulsf3_pse+0x64>
    23da:	9e 3f       	cpi	r25, 0xFE	; 254
    23dc:	51 05       	cpc	r21, r1
    23de:	70 f0       	brcs	.+28     	; 0x23fc <__mulsf3_pse+0x9c>
    23e0:	37 cf       	rjmp	.-402    	; 0x2250 <__fp_inf>
    23e2:	a6 cf       	rjmp	.-180    	; 0x2330 <__fp_szero>
    23e4:	5f 3f       	cpi	r21, 0xFF	; 255
    23e6:	ec f3       	brlt	.-6      	; 0x23e2 <__mulsf3_pse+0x82>
    23e8:	98 3e       	cpi	r25, 0xE8	; 232
    23ea:	dc f3       	brlt	.-10     	; 0x23e2 <__mulsf3_pse+0x82>
    23ec:	86 95       	lsr	r24
    23ee:	77 95       	ror	r23
    23f0:	67 95       	ror	r22
    23f2:	b7 95       	ror	r27
    23f4:	f7 95       	ror	r31
    23f6:	e7 95       	ror	r30
    23f8:	9f 5f       	subi	r25, 0xFF	; 255
    23fa:	c1 f7       	brne	.-16     	; 0x23ec <__mulsf3_pse+0x8c>
    23fc:	fe 2b       	or	r31, r30
    23fe:	88 0f       	add	r24, r24
    2400:	91 1d       	adc	r25, r1
    2402:	96 95       	lsr	r25
    2404:	87 95       	ror	r24
    2406:	97 f9       	bld	r25, 7
    2408:	08 95       	ret
    240a:	11 f4       	brne	.+4      	; 0x2410 <__mulsf3_pse+0xb0>
    240c:	0e f4       	brtc	.+2      	; 0x2410 <__mulsf3_pse+0xb0>
    240e:	26 cf       	rjmp	.-436    	; 0x225c <__fp_nan>
    2410:	3e c0       	rjmp	.+124    	; 0x248e <__fp_mpack>

00002412 <sqrt>:
    2412:	73 df       	rcall	.-282    	; 0x22fa <__fp_splitA>
    2414:	d0 f3       	brcs	.-12     	; 0x240a <__mulsf3_pse+0xaa>
    2416:	99 23       	and	r25, r25
    2418:	d9 f3       	breq	.-10     	; 0x2410 <__mulsf3_pse+0xb0>
    241a:	ce f3       	brts	.-14     	; 0x240e <__mulsf3_pse+0xae>
    241c:	9f 57       	subi	r25, 0x7F	; 127
    241e:	55 0b       	sbc	r21, r21
    2420:	87 ff       	sbrs	r24, 7
    2422:	43 d0       	rcall	.+134    	; 0x24aa <__fp_norm2>
    2424:	00 24       	eor	r0, r0
    2426:	a0 e6       	ldi	r26, 0x60	; 96
    2428:	40 ea       	ldi	r20, 0xA0	; 160
    242a:	90 01       	movw	r18, r0
    242c:	80 58       	subi	r24, 0x80	; 128
    242e:	56 95       	lsr	r21
    2430:	97 95       	ror	r25
    2432:	28 f4       	brcc	.+10     	; 0x243e <sqrt+0x2c>
    2434:	80 5c       	subi	r24, 0xC0	; 192
    2436:	66 0f       	add	r22, r22
    2438:	77 1f       	adc	r23, r23
    243a:	88 1f       	adc	r24, r24
    243c:	20 f0       	brcs	.+8      	; 0x2446 <sqrt+0x34>
    243e:	26 17       	cp	r18, r22
    2440:	37 07       	cpc	r19, r23
    2442:	48 07       	cpc	r20, r24
    2444:	30 f4       	brcc	.+12     	; 0x2452 <sqrt+0x40>
    2446:	62 1b       	sub	r22, r18
    2448:	73 0b       	sbc	r23, r19
    244a:	84 0b       	sbc	r24, r20
    244c:	20 29       	or	r18, r0
    244e:	31 29       	or	r19, r1
    2450:	4a 2b       	or	r20, r26
    2452:	a6 95       	lsr	r26
    2454:	17 94       	ror	r1
    2456:	07 94       	ror	r0
    2458:	20 25       	eor	r18, r0
    245a:	31 25       	eor	r19, r1
    245c:	4a 27       	eor	r20, r26
    245e:	58 f7       	brcc	.-42     	; 0x2436 <sqrt+0x24>
    2460:	66 0f       	add	r22, r22
    2462:	77 1f       	adc	r23, r23
    2464:	88 1f       	adc	r24, r24
    2466:	20 f0       	brcs	.+8      	; 0x2470 <sqrt+0x5e>
    2468:	26 17       	cp	r18, r22
    246a:	37 07       	cpc	r19, r23
    246c:	48 07       	cpc	r20, r24
    246e:	30 f4       	brcc	.+12     	; 0x247c <sqrt+0x6a>
    2470:	62 0b       	sbc	r22, r18
    2472:	73 0b       	sbc	r23, r19
    2474:	84 0b       	sbc	r24, r20
    2476:	20 0d       	add	r18, r0
    2478:	31 1d       	adc	r19, r1
    247a:	41 1d       	adc	r20, r1
    247c:	a0 95       	com	r26
    247e:	81 f7       	brne	.-32     	; 0x2460 <sqrt+0x4e>
    2480:	b9 01       	movw	r22, r18
    2482:	84 2f       	mov	r24, r20
    2484:	91 58       	subi	r25, 0x81	; 129
    2486:	88 0f       	add	r24, r24
    2488:	96 95       	lsr	r25
    248a:	87 95       	ror	r24
    248c:	08 95       	ret

0000248e <__fp_mpack>:
    248e:	9f 3f       	cpi	r25, 0xFF	; 255
    2490:	31 f0       	breq	.+12     	; 0x249e <__fp_mpack_finite+0xc>

00002492 <__fp_mpack_finite>:
    2492:	91 50       	subi	r25, 0x01	; 1
    2494:	20 f4       	brcc	.+8      	; 0x249e <__fp_mpack_finite+0xc>
    2496:	87 95       	ror	r24
    2498:	77 95       	ror	r23
    249a:	67 95       	ror	r22
    249c:	b7 95       	ror	r27
    249e:	88 0f       	add	r24, r24
    24a0:	91 1d       	adc	r25, r1
    24a2:	96 95       	lsr	r25
    24a4:	87 95       	ror	r24
    24a6:	97 f9       	bld	r25, 7
    24a8:	08 95       	ret

000024aa <__fp_norm2>:
    24aa:	91 50       	subi	r25, 0x01	; 1
    24ac:	50 40       	sbci	r21, 0x00	; 0
    24ae:	66 0f       	add	r22, r22
    24b0:	77 1f       	adc	r23, r23
    24b2:	88 1f       	adc	r24, r24
    24b4:	d2 f7       	brpl	.-12     	; 0x24aa <__fp_norm2>
    24b6:	08 95       	ret

000024b8 <__itoa_ncheck>:
    24b8:	bb 27       	eor	r27, r27
    24ba:	4a 30       	cpi	r20, 0x0A	; 10
    24bc:	31 f4       	brne	.+12     	; 0x24ca <__itoa_ncheck+0x12>
    24be:	99 23       	and	r25, r25
    24c0:	22 f4       	brpl	.+8      	; 0x24ca <__itoa_ncheck+0x12>
    24c2:	bd e2       	ldi	r27, 0x2D	; 45
    24c4:	90 95       	com	r25
    24c6:	81 95       	neg	r24
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ca:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__utoa_common>

000024ce <__utoa_ncheck>:
    24ce:	bb 27       	eor	r27, r27

000024d0 <__utoa_common>:
    24d0:	fb 01       	movw	r30, r22
    24d2:	55 27       	eor	r21, r21
    24d4:	aa 27       	eor	r26, r26
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	aa 1f       	adc	r26, r26
    24dc:	a4 17       	cp	r26, r20
    24de:	10 f0       	brcs	.+4      	; 0x24e4 <__utoa_common+0x14>
    24e0:	a4 1b       	sub	r26, r20
    24e2:	83 95       	inc	r24
    24e4:	50 51       	subi	r21, 0x10	; 16
    24e6:	b9 f7       	brne	.-18     	; 0x24d6 <__utoa_common+0x6>
    24e8:	a0 5d       	subi	r26, 0xD0	; 208
    24ea:	aa 33       	cpi	r26, 0x3A	; 58
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <__utoa_common+0x20>
    24ee:	a9 5d       	subi	r26, 0xD9	; 217
    24f0:	a1 93       	st	Z+, r26
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	79 f7       	brne	.-34     	; 0x24d4 <__utoa_common+0x4>
    24f6:	b1 11       	cpse	r27, r1
    24f8:	b1 93       	st	Z+, r27
    24fa:	11 92       	st	Z+, r1
    24fc:	cb 01       	movw	r24, r22
    24fe:	0c 94 81 12 	jmp	0x2502	; 0x2502 <strrev>

00002502 <strrev>:
    2502:	dc 01       	movw	r26, r24
    2504:	fc 01       	movw	r30, r24
    2506:	67 2f       	mov	r22, r23
    2508:	71 91       	ld	r23, Z+
    250a:	77 23       	and	r23, r23
    250c:	e1 f7       	brne	.-8      	; 0x2506 <strrev+0x4>
    250e:	32 97       	sbiw	r30, 0x02	; 2
    2510:	04 c0       	rjmp	.+8      	; 0x251a <strrev+0x18>
    2512:	7c 91       	ld	r23, X
    2514:	6d 93       	st	X+, r22
    2516:	70 83       	st	Z, r23
    2518:	62 91       	ld	r22, -Z
    251a:	ae 17       	cp	r26, r30
    251c:	bf 07       	cpc	r27, r31
    251e:	c8 f3       	brcs	.-14     	; 0x2512 <strrev+0x10>
    2520:	08 95       	ret

00002522 <_exit>:
    2522:	f8 94       	cli

00002524 <__stop_program>:
    2524:	ff cf       	rjmp	.-2      	; 0x2524 <__stop_program>

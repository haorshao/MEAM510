
robockey_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00003f9c  00004030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  0080013e  0080013e  0000406e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000406e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  0000409e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038d8  00000000  00000000  0000433e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c9f  00000000  00000000  00007c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001258  00000000  00000000  000088b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009dc  00000000  00000000  00009b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009d0  00000000  00000000  0000a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004154  00000000  00000000  0000aebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 02 	jmp	0x410	; 0x410 <__ctors_end>
       4:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
       8:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
       c:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__vector_3>
      10:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      14:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      18:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      1c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      20:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      24:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      28:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__vector_10>
      2c:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__vector_11>
      30:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      38:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      3c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      40:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      44:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      48:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      4c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      50:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      54:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      58:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      5c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      60:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      64:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      68:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      6c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      70:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      74:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_29>
      78:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      7c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      80:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      84:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      88:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      8c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      90:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      94:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      98:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      9c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      a0:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      a4:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      a8:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      ac:	a4 06       	cpc	r10, r20
      ae:	b5 06       	cpc	r11, r21
      b0:	c6 06       	cpc	r12, r22
      b2:	d7 06       	cpc	r13, r23
      b4:	e8 06       	cpc	r14, r24
      b6:	f9 06       	cpc	r15, r25
      b8:	0a 07       	cpc	r16, r26
      ba:	21 19       	sub	r18, r1
      bc:	2c 19       	sub	r18, r12
      be:	81 19       	sub	r24, r1
      c0:	a0 19       	sub	r26, r0
      c2:	bf 19       	sub	r27, r15
      c4:	a2 1a       	sub	r10, r18
      c6:	d0 19       	sub	r29, r0
      c8:	14 1a       	sub	r1, r20
      ca:	a2 1a       	sub	r10, r18
      cc:	a2 1a       	sub	r10, r18
      ce:	a2 1a       	sub	r10, r18
      d0:	a2 1a       	sub	r10, r18
      d2:	a2 1a       	sub	r10, r18
      d4:	a2 1a       	sub	r10, r18
      d6:	a2 1a       	sub	r10, r18
      d8:	a2 1a       	sub	r10, r18
      da:	a2 1a       	sub	r10, r18
      dc:	a2 1a       	sub	r10, r18
      de:	a2 1a       	sub	r10, r18
      e0:	a2 1a       	sub	r10, r18
      e2:	a2 1a       	sub	r10, r18
      e4:	a2 1a       	sub	r10, r18
      e6:	a2 1a       	sub	r10, r18
      e8:	a2 1a       	sub	r10, r18
      ea:	a2 1a       	sub	r10, r18
      ec:	a2 1a       	sub	r10, r18
      ee:	a2 1a       	sub	r10, r18
      f0:	a2 1a       	sub	r10, r18
      f2:	a2 1a       	sub	r10, r18
      f4:	a2 1a       	sub	r10, r18
      f6:	a2 1a       	sub	r10, r18
      f8:	a2 1a       	sub	r10, r18
      fa:	a2 1a       	sub	r10, r18
      fc:	25 1a       	sub	r2, r21
      fe:	2c 1a       	sub	r2, r28
     100:	81 1a       	sub	r8, r17
     102:	07 2c       	mov	r0, r7
     104:	7a a5       	ldd	r23, Y+42	; 0x2a
     106:	ba 6c       	ori	r27, 0xCA	; 202
     108:	c5 90       	lpm	r12, Z+
     10a:	da 3b       	cpi	r29, 0xBA	; 186
     10c:	93 65       	ori	r25, 0x53	; 83
     10e:	fc 8b       	std	Y+20, r31	; 0x14
     110:	bc 53       	subi	r27, 0x3C	; 60
     112:	f8 10       	cpse	r15, r8
     114:	fd 3c       	cpi	r31, 0xCD	; 205
     116:	56 92       	lac	Z, r5
     118:	83 4d       	sbci	r24, 0xD3	; 211
     11a:	bd 87       	std	Y+13, r27	; 0x0d
     11c:	9d 3a       	cpi	r25, 0xAD	; 173
     11e:	b6 3d       	cpi	r27, 0xD6	; 214
     120:	cb c9       	rjmp	.-3178   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
     122:	bf 5b       	subi	r27, 0xBF	; 191
     124:	be 73       	andi	r27, 0x3E	; 62
     126:	da 0f       	add	r29, r26
     128:	c9 3f       	cpi	r28, 0xF9	; 249

0000012a <__trampolines_end>:
     12a:	63 61       	ori	r22, 0x13	; 19
     12c:	73 65       	ori	r23, 0x53	; 83
     12e:	20 33       	cpi	r18, 0x30	; 48
     130:	20 0a       	sbc	r2, r16
	...

00000133 <__c.1988>:
     133:	63 61 73 65 20 32 20 0a 00                          case 2 ..

0000013c <__c.2099>:
     13c:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

0000014c <__c.2097>:
     14c:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

0000015b <__c.2066>:
     15b:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000167 <__c.2064>:
     167:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000172 <__c.2060>:
     172:	50 49 44 0a 00                                      PID..

00000177 <__c.2058>:
     177:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000183 <__c.2056>:
     183:	50 49 44 0a 00                                      PID..

00000188 <__c.2054>:
     188:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000193 <__c.2051>:
     193:	0a 00                                               ..

00000195 <__c.2049>:
     195:	2c 20 00                                            , .

00000198 <__c.2047>:
     198:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     1a8:	3a 20 00                                            : .

000001ab <__c.2043>:
     1ab:	0d 0a 00                                            ...

000001ae <__c.2041>:
     1ae:	0d 0a 00                                            ...

000001b1 <__c.2039>:
     1b1:	50 68 6f 5b 36 5d 00                                Pho[6].

000001b8 <__c.2037>:
     1b8:	0d 0a 00                                            ...

000001bb <__c.2035>:
     1bb:	50 68 6f 5b 35 5d 00                                Pho[5].

000001c2 <__c.2033>:
     1c2:	0d 0a 00                                            ...

000001c5 <__c.2031>:
     1c5:	50 68 6f 5b 34 5d 00                                Pho[4].

000001cc <__c.2029>:
     1cc:	0d 0a 00                                            ...

000001cf <__c.2027>:
     1cf:	50 68 6f 5b 33 5d 00                                Pho[3].

000001d6 <__c.2025>:
     1d6:	0d 0a 00                                            ...

000001d9 <__c.2023>:
     1d9:	50 68 6f 5b 32 5d 00                                Pho[2].

000001e0 <__c.2021>:
     1e0:	0d 0a 00                                            ...

000001e3 <__c.2019>:
     1e3:	50 68 6f 5b 31 5d 00                                Pho[1].

000001ea <__c.2017>:
     1ea:	0d 0a 00                                            ...

000001ed <__c.2015>:
     1ed:	50 68 6f 5b 30 5d 00                                Pho[0].

000001f4 <__c.2013>:
     1f4:	0d 0a 00                                            ...

000001f7 <__c.2156>:
     1f7:	0a 00                                               ..

000001f9 <__c.2154>:
     1f9:	64 69 73 74 3a 20 00                                dist: .

00000200 <__c.2146>:
     200:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000020b <__c.2144>:
     20b:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000217 <__c.2142>:
     217:	0a 00                                               ..

00000219 <__c.2140>:
     219:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000223 <__c.2138>:
     223:	0a 00                                               ..

00000225 <__c.2136>:
     225:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000230 <__c.2128>:
     230:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000023b <__c.2126>:
     23b:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000247 <__c.2124>:
     247:	0a 00                                               ..

00000249 <__c.2122>:
     249:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000253 <__c.2120>:
     253:	0a 00                                               ..

00000255 <__c.2118>:
     255:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000260 <__c.2110>:
     260:	0a 00                                               ..

00000262 <__c.2108>:
     262:	61 6c 70 68 61 3a 20 00                             alpha: .

0000026a <__c.2084>:
     26a:	0a 00                                               ..

0000026c <__c.2082>:
     26c:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000274 <__c.2080>:
     274:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000285 <__c.2078>:
     285:	0a 00                                               ..

00000287 <__c.2076>:
     287:	09 09 79 3a 00                                      ..y:.

0000028c <__c.2074>:
     28c:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000298 <__c.2046>:
     298:	0a 00                                               ..

0000029a <__c.2044>:
     29a:	64 6d 61 78 3a 00                                   dmax:.

000002a0 <descriptor_list>:
     2a0:	00 01 00 00 37 03 12 00 02 00 00 f4 02 43 00 03     ....7........C..
     2b0:	00 00 f0 02 04 01 03 09 04 dc 02 12 02 03 09 04     ................
     2c0:	d4 02 06 03 03 09 04 ca 02 08                       ..........

000002ca <string3>:
     2ca:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000002d4 <string2>:
     2d4:	06 03 4d 00 32 00 00 00                             ..M.2...

000002dc <string1>:
     2dc:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     2ec:	65 00 00 00                                         e...

000002f0 <string0>:
     2f0:	04 03 09 04                                         ....

000002f4 <config1_descriptor>:
     2f4:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     304:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     314:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     324:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     334:	40 00 00                                            @..

00000337 <device_descriptor>:
     337:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     347:	03 01                                               ..

00000349 <endpoint_config_table>:
     349:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000353 <__c.2100>:
     353:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

0000035e <__c.2097>:
     35e:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000368 <__c.2094>:
     368:	50 61 75 73 65 0a 00                                Pause..

0000036f <__c.2091>:
     36f:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000377 <__c.2088>:
     377:	47 6f 61 6c 20 41 0a 00                             Goal A..

0000037f <__c.2085>:
     37f:	50 6c 61 79 20 0a 00                                Play ..

00000386 <__c.2081>:
     386:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

00000392 <__c.2072>:
     392:	0a 00                                               ..

00000394 <__c.2070>:
     394:	2c 20 00                                            , .

00000397 <__c.2068>:
     397:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

000003a0 <__c.2065>:
     3a0:	73 65 6e 74 20 66 6f 75 6e 64 20 6d 65 73 73 61     sent found messa
     3b0:	67 65 2e 0a 00                                      ge...

000003b5 <__c.2062>:
     3b5:	0a 00                                               ..

000003b7 <__c.2060>:
     3b7:	2c 20 00                                            , .

000003ba <__c.2058>:
     3ba:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     3ca:	3d 20 00                                            = .

000003cd <__c.2055>:
     3cd:	0a 00                                               ..

000003cf <__c.2053>:
     3cf:	2c 20 00                                            , .

000003d2 <__c.2051>:
     3d2:	67 6f 61 6c 20 3d 20 00                             goal = .

000003da <__c.2049>:
     3da:	73 65 6e 74 20 6c 6f 73 74 20 6d 65 73 73 73 61     sent lost messsa
     3ea:	67 65 2e 0a 00                                      ge...

000003ef <__c.2046>:
     3ef:	73 65 6e 74 20 66 6f 75 6e 64 20 6d 65 73 73 73     sent found messs
     3ff:	61 67 65 2e 0a 00                                   age...

00000405 <__c.2040>:
     405:	0a 00                                               ..

00000407 <__c.2038>:
     407:	73 74 61 74 65 3a 20 00 00                          state: ..

00000410 <__ctors_end>:
     410:	11 24       	eor	r1, r1
     412:	1f be       	out	0x3f, r1	; 63
     414:	cf ef       	ldi	r28, 0xFF	; 255
     416:	da e0       	ldi	r29, 0x0A	; 10
     418:	de bf       	out	0x3e, r29	; 62
     41a:	cd bf       	out	0x3d, r28	; 61

0000041c <__do_copy_data>:
     41c:	11 e0       	ldi	r17, 0x01	; 1
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	ec e9       	ldi	r30, 0x9C	; 156
     424:	ff e3       	ldi	r31, 0x3F	; 63
     426:	02 c0       	rjmp	.+4      	; 0x42c <__do_copy_data+0x10>
     428:	05 90       	lpm	r0, Z+
     42a:	0d 92       	st	X+, r0
     42c:	ae 33       	cpi	r26, 0x3E	; 62
     42e:	b1 07       	cpc	r27, r17
     430:	d9 f7       	brne	.-10     	; 0x428 <__do_copy_data+0xc>

00000432 <__do_clear_bss>:
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	ae e3       	ldi	r26, 0x3E	; 62
     436:	b1 e0       	ldi	r27, 0x01	; 1
     438:	01 c0       	rjmp	.+2      	; 0x43c <.do_clear_bss_start>

0000043a <.do_clear_bss_loop>:
     43a:	1d 92       	st	X+, r1

0000043c <.do_clear_bss_start>:
     43c:	ae 3b       	cpi	r26, 0xBE	; 190
     43e:	b2 07       	cpc	r27, r18
     440:	e1 f7       	brne	.-8      	; 0x43a <.do_clear_bss_loop>
     442:	0e 94 ed 1a 	call	0x35da	; 0x35da <main>
     446:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <_exit>

0000044a <__bad_interrupt>:
     44a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044e <send_message>:
 */ 

#include "communication.h"


void send_message(int state, int num, char *buffer, float *c_wii){
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	ea 01       	movw	r28, r20
     458:	89 01       	movw	r16, r18
	switch(state){ 
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	91 05       	cpc	r25, r1
     45e:	19 f0       	breq	.+6      	; 0x466 <send_message+0x18>
     460:	03 97       	sbiw	r24, 0x03	; 3
     462:	71 f1       	breq	.+92     	; 0x4c0 <send_message+0x72>
     464:	59 c0       	rjmp	.+178    	; 0x518 <send_message+0xca>
		case 2:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xC1;
     466:	81 ec       	ldi	r24, 0xC1	; 193
     468:	88 83       	st	Y, r24
			buffer[1] = num;
     46a:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     46c:	f9 01       	movw	r30, r18
     46e:	60 81       	ld	r22, Z
     470:	71 81       	ldd	r23, Z+1	; 0x01
     472:	82 81       	ldd	r24, Z+2	; 0x02
     474:	93 81       	ldd	r25, Z+3	; 0x03
     476:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     47a:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     47c:	f8 01       	movw	r30, r16
     47e:	60 81       	ld	r22, Z
     480:	71 81       	ldd	r23, Z+1	; 0x01
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	93 81       	ldd	r25, Z+3	; 0x03
     486:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     48a:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     48c:	f8 01       	movw	r30, r16
     48e:	64 81       	ldd	r22, Z+4	; 0x04
     490:	75 81       	ldd	r23, Z+5	; 0x05
     492:	86 81       	ldd	r24, Z+6	; 0x06
     494:	97 81       	ldd	r25, Z+7	; 0x07
     496:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     49a:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     49c:	f8 01       	movw	r30, r16
     49e:	64 81       	ldd	r22, Z+4	; 0x04
     4a0:	75 81       	ldd	r23, Z+5	; 0x05
     4a2:	86 81       	ldd	r24, Z+6	; 0x06
     4a4:	97 81       	ldd	r25, Z+7	; 0x07
     4a6:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     4aa:	7d 83       	std	Y+5, r23	; 0x05
 			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     4ac:	4a e0       	ldi	r20, 0x0A	; 10
     4ae:	be 01       	movw	r22, r28
     4b0:	8c e0       	ldi	r24, 0x0C	; 12
     4b2:	0e 94 2b 14 	call	0x2856	; 0x2856 <m_rf_send>
			usb_tx_string("case 2 \n");
     4b6:	83 e3       	ldi	r24, 0x33	; 51
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			break;
     4be:	2c c0       	rjmp	.+88     	; 0x518 <send_message+0xca>
		case 3:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xC2;
     4c0:	82 ec       	ldi	r24, 0xC2	; 194
     4c2:	88 83       	st	Y, r24
			buffer[1] = num;
     4c4:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     4c6:	f9 01       	movw	r30, r18
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     4d4:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     4d6:	f8 01       	movw	r30, r16
     4d8:	60 81       	ld	r22, Z
     4da:	71 81       	ldd	r23, Z+1	; 0x01
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
     4de:	93 81       	ldd	r25, Z+3	; 0x03
     4e0:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     4e4:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     4e6:	f8 01       	movw	r30, r16
     4e8:	64 81       	ldd	r22, Z+4	; 0x04
     4ea:	75 81       	ldd	r23, Z+5	; 0x05
     4ec:	86 81       	ldd	r24, Z+6	; 0x06
     4ee:	97 81       	ldd	r25, Z+7	; 0x07
     4f0:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     4f4:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     4f6:	f8 01       	movw	r30, r16
     4f8:	64 81       	ldd	r22, Z+4	; 0x04
     4fa:	75 81       	ldd	r23, Z+5	; 0x05
     4fc:	86 81       	ldd	r24, Z+6	; 0x06
     4fe:	97 81       	ldd	r25, Z+7	; 0x07
     500:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__fixunssfsi>
     504:	7d 83       	std	Y+5, r23	; 0x05
			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	be 01       	movw	r22, r28
     50a:	8c e0       	ldi	r24, 0x0C	; 12
     50c:	0e 94 2b 14 	call	0x2856	; 0x2856 <m_rf_send>
			usb_tx_string("case 3 \n");
     510:	8a e2       	ldi	r24, 0x2A	; 42
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		
	}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <init_ADC>:
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     526:	ac e7       	ldi	r26, 0x7C	; 124
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	8c 91       	ld	r24, X
     52c:	8f 77       	andi	r24, 0x7F	; 127
     52e:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     530:	8c 91       	ld	r24, X
     532:	80 64       	ori	r24, 0x40	; 64
     534:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     536:	ea e7       	ldi	r30, 0x7A	; 122
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	84 60       	ori	r24, 0x04	; 4
     53e:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     540:	80 81       	ld	r24, Z
     542:	82 60       	ori	r24, 0x02	; 2
     544:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     546:	80 81       	ld	r24, Z
     548:	81 60       	ori	r24, 0x01	; 1
     54a:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     54c:	ce e7       	ldi	r28, 0x7E	; 126
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	88 81       	ld	r24, Y
     552:	81 60       	ori	r24, 0x01	; 1
     554:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     556:	88 81       	ld	r24, Y
     558:	82 60       	ori	r24, 0x02	; 2
     55a:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     55c:	cd e7       	ldi	r28, 0x7D	; 125
     55e:	d0 e0       	ldi	r29, 0x00	; 0
     560:	88 81       	ld	r24, Y
     562:	82 60       	ori	r24, 0x02	; 2
     564:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     566:	88 81       	ld	r24, Y
     568:	84 60       	ori	r24, 0x04	; 4
     56a:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     56c:	88 81       	ld	r24, Y
     56e:	88 60       	ori	r24, 0x08	; 8
     570:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     572:	88 81       	ld	r24, Y
     574:	80 61       	ori	r24, 0x10	; 16
     576:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     578:	88 81       	ld	r24, Y
     57a:	81 60       	ori	r24, 0x01	; 1
     57c:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     57e:	cb e7       	ldi	r28, 0x7B	; 123
     580:	d0 e0       	ldi	r29, 0x00	; 0
     582:	88 81       	ld	r24, Y
     584:	8f 7d       	andi	r24, 0xDF	; 223
     586:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     588:	8c 91       	ld	r24, X
     58a:	8b 7f       	andi	r24, 0xFB	; 251
     58c:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     58e:	8c 91       	ld	r24, X
     590:	8d 7f       	andi	r24, 0xFD	; 253
     592:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     594:	8c 91       	ld	r24, X
     596:	8e 7f       	andi	r24, 0xFE	; 254
     598:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     59a:	80 81       	ld	r24, Z
     59c:	80 62       	ori	r24, 0x20	; 32
     59e:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     5a0:	80 81       	ld	r24, Z
     5a2:	88 60       	ori	r24, 0x08	; 8
     5a4:	80 83       	st	Z, r24
	sei();
     5a6:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     5a8:	80 81       	ld	r24, Z
     5aa:	80 68       	ori	r24, 0x80	; 128
     5ac:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     5ae:	80 81       	ld	r24, Z
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	80 83       	st	Z, r24
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <PID_Pho>:
			break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     5ba:	8f 92       	push	r8
     5bc:	9f 92       	push	r9
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	6b 01       	movw	r12, r22
     5d4:	7c 01       	movw	r14, r24
     5d6:	49 01       	movw	r8, r18
     5d8:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     5da:	c0 91 4a 01 	lds	r28, 0x014A
     5de:	d0 91 4b 01 	lds	r29, 0x014B
     5e2:	80 91 4e 01 	lds	r24, 0x014E
     5e6:	90 91 4f 01 	lds	r25, 0x014F
     5ea:	c8 0f       	add	r28, r24
     5ec:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     5ee:	20 91 4c 01 	lds	r18, 0x014C
     5f2:	30 91 4d 01 	lds	r19, 0x014D
     5f6:	80 91 50 01 	lds	r24, 0x0150
     5fa:	90 91 51 01 	lds	r25, 0x0151
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     602:	c8 1b       	sub	r28, r24
     604:	d9 0b       	sbc	r29, r25
     606:	d0 93 bb 01 	sts	0x01BB, r29
     60a:	c0 93 ba 01 	sts	0x01BA, r28
	diff_Pho = input - input_last;
     60e:	80 91 46 01 	lds	r24, 0x0146
     612:	90 91 47 01 	lds	r25, 0x0147
     616:	8e 01       	movw	r16, r28
     618:	08 1b       	sub	r16, r24
     61a:	19 0b       	sbc	r17, r25
     61c:	10 93 41 01 	sts	0x0141, r17
     620:	00 93 40 01 	sts	0x0140, r16
	sum_Pho = sum_Pho + input;
     624:	80 91 44 01 	lds	r24, 0x0144
     628:	90 91 45 01 	lds	r25, 0x0145
     62c:	8c 0f       	add	r24, r28
     62e:	9d 1f       	adc	r25, r29
     630:	90 93 45 01 	sts	0x0145, r25
     634:	80 93 44 01 	sts	0x0144, r24
	output = Kp * input + Kd * diff_Pho;
     638:	be 01       	movw	r22, r28
     63a:	88 27       	eor	r24, r24
     63c:	77 fd       	sbrc	r23, 7
     63e:	80 95       	com	r24
     640:	98 2f       	mov	r25, r24
     642:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
     646:	a7 01       	movw	r20, r14
     648:	96 01       	movw	r18, r12
     64a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     64e:	6b 01       	movw	r12, r22
     650:	7c 01       	movw	r14, r24
     652:	b8 01       	movw	r22, r16
     654:	88 27       	eor	r24, r24
     656:	77 fd       	sbrc	r23, 7
     658:	80 95       	com	r24
     65a:	98 2f       	mov	r25, r24
     65c:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
     660:	a5 01       	movw	r20, r10
     662:	94 01       	movw	r18, r8
     664:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
     674:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
     678:	70 93 b9 01 	sts	0x01B9, r23
     67c:	60 93 b8 01 	sts	0x01B8, r22
	
	input_last = input;
     680:	d0 93 47 01 	sts	0x0147, r29
     684:	c0 93 46 01 	sts	0x0146, r28
	
	if(output>0){
     688:	16 16       	cp	r1, r22
     68a:	17 06       	cpc	r1, r23
     68c:	74 f5       	brge	.+92     	; 0x6ea <PID_Pho+0x130>
		OCR1C = full_speed - abs(output);
     68e:	9b 01       	movw	r18, r22
     690:	77 23       	and	r23, r23
     692:	24 f4       	brge	.+8      	; 0x69c <PID_Pho+0xe2>
     694:	22 27       	eor	r18, r18
     696:	33 27       	eor	r19, r19
     698:	26 1b       	sub	r18, r22
     69a:	37 0b       	sbc	r19, r23
     69c:	88 e5       	ldi	r24, 0x58	; 88
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	82 1b       	sub	r24, r18
     6a2:	93 0b       	sbc	r25, r19
     6a4:	90 93 8d 00 	sts	0x008D, r25
     6a8:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     6ac:	20 91 00 01 	lds	r18, 0x0100
     6b0:	30 91 01 01 	lds	r19, 0x0101
     6b4:	80 91 b8 01 	lds	r24, 0x01B8
     6b8:	90 91 b9 01 	lds	r25, 0x01B9
     6bc:	99 23       	and	r25, r25
     6be:	1c f4       	brge	.+6      	; 0x6c6 <PID_Pho+0x10c>
     6c0:	91 95       	neg	r25
     6c2:	81 95       	neg	r24
     6c4:	91 09       	sbc	r25, r1
     6c6:	28 17       	cp	r18, r24
     6c8:	39 07       	cpc	r19, r25
     6ca:	44 f4       	brge	.+16     	; 0x6dc <PID_Pho+0x122>
			OCR1C = full_speed - speed_diff_Pho;
     6cc:	88 e5       	ldi	r24, 0x58	; 88
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	82 1b       	sub	r24, r18
     6d2:	93 0b       	sbc	r25, r19
     6d4:	90 93 8d 00 	sts	0x008D, r25
     6d8:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     6dc:	88 e5       	ldi	r24, 0x58	; 88
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	90 93 8b 00 	sts	0x008B, r25
     6e4:	80 93 8a 00 	sts	0x008A, r24
     6e8:	2d c0       	rjmp	.+90     	; 0x744 <PID_Pho+0x18a>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     6ea:	9b 01       	movw	r18, r22
     6ec:	77 23       	and	r23, r23
     6ee:	24 f4       	brge	.+8      	; 0x6f8 <PID_Pho+0x13e>
     6f0:	22 27       	eor	r18, r18
     6f2:	33 27       	eor	r19, r19
     6f4:	26 1b       	sub	r18, r22
     6f6:	37 0b       	sbc	r19, r23
     6f8:	88 e5       	ldi	r24, 0x58	; 88
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	82 1b       	sub	r24, r18
     6fe:	93 0b       	sbc	r25, r19
     700:	90 93 8b 00 	sts	0x008B, r25
     704:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     708:	20 91 00 01 	lds	r18, 0x0100
     70c:	30 91 01 01 	lds	r19, 0x0101
     710:	80 91 b8 01 	lds	r24, 0x01B8
     714:	90 91 b9 01 	lds	r25, 0x01B9
     718:	99 23       	and	r25, r25
     71a:	1c f4       	brge	.+6      	; 0x722 <PID_Pho+0x168>
     71c:	91 95       	neg	r25
     71e:	81 95       	neg	r24
     720:	91 09       	sbc	r25, r1
     722:	28 17       	cp	r18, r24
     724:	39 07       	cpc	r19, r25
     726:	44 f4       	brge	.+16     	; 0x738 <PID_Pho+0x17e>
			OCR1B = full_speed - speed_diff_Pho;
     728:	88 e5       	ldi	r24, 0x58	; 88
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	82 1b       	sub	r24, r18
     72e:	93 0b       	sbc	r25, r19
     730:	90 93 8b 00 	sts	0x008B, r25
     734:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     738:	88 e5       	ldi	r24, 0x58	; 88
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	90 93 8d 00 	sts	0x008D, r25
     740:	80 93 8c 00 	sts	0x008C, r24
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	9f 90       	pop	r9
     75a:	8f 90       	pop	r8
     75c:	08 95       	ret

0000075e <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	6b 01       	movw	r12, r22
     778:	7c 01       	movw	r14, r24
     77a:	49 01       	movw	r8, r18
     77c:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     77e:	c0 91 4a 01 	lds	r28, 0x014A
     782:	d0 91 4b 01 	lds	r29, 0x014B
     786:	80 91 4e 01 	lds	r24, 0x014E
     78a:	90 91 4f 01 	lds	r25, 0x014F
     78e:	c8 0f       	add	r28, r24
     790:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     792:	20 91 4c 01 	lds	r18, 0x014C
     796:	30 91 4d 01 	lds	r19, 0x014D
     79a:	80 91 50 01 	lds	r24, 0x0150
     79e:	90 91 51 01 	lds	r25, 0x0151
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     7a6:	c8 1b       	sub	r28, r24
     7a8:	d9 0b       	sbc	r29, r25
     7aa:	d0 93 bb 01 	sts	0x01BB, r29
     7ae:	c0 93 ba 01 	sts	0x01BA, r28
	diff_stalk = input - input_last;
     7b2:	80 91 46 01 	lds	r24, 0x0146
     7b6:	90 91 47 01 	lds	r25, 0x0147
     7ba:	8e 01       	movw	r16, r28
     7bc:	08 1b       	sub	r16, r24
     7be:	19 0b       	sbc	r17, r25
     7c0:	10 93 3f 01 	sts	0x013F, r17
     7c4:	00 93 3e 01 	sts	0x013E, r16
	sum_stalk = sum_stalk + input;
     7c8:	80 91 42 01 	lds	r24, 0x0142
     7cc:	90 91 43 01 	lds	r25, 0x0143
     7d0:	8c 0f       	add	r24, r28
     7d2:	9d 1f       	adc	r25, r29
     7d4:	90 93 43 01 	sts	0x0143, r25
     7d8:	80 93 42 01 	sts	0x0142, r24
	output = Kp * input + Kd * diff_stalk;
     7dc:	be 01       	movw	r22, r28
     7de:	88 27       	eor	r24, r24
     7e0:	77 fd       	sbrc	r23, 7
     7e2:	80 95       	com	r24
     7e4:	98 2f       	mov	r25, r24
     7e6:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
     7ea:	a7 01       	movw	r20, r14
     7ec:	96 01       	movw	r18, r12
     7ee:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     7f2:	6b 01       	movw	r12, r22
     7f4:	7c 01       	movw	r14, r24
     7f6:	b8 01       	movw	r22, r16
     7f8:	88 27       	eor	r24, r24
     7fa:	77 fd       	sbrc	r23, 7
     7fc:	80 95       	com	r24
     7fe:	98 2f       	mov	r25, r24
     800:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
     804:	a5 01       	movw	r20, r10
     806:	94 01       	movw	r18, r8
     808:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	c7 01       	movw	r24, r14
     812:	b6 01       	movw	r22, r12
     814:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
     818:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
     81c:	70 93 b9 01 	sts	0x01B9, r23
     820:	60 93 b8 01 	sts	0x01B8, r22
	
	input_last = input;
     824:	d0 93 47 01 	sts	0x0147, r29
     828:	c0 93 46 01 	sts	0x0146, r28
	
	if(abs(output) >= full_speed_stalk){
     82c:	9b 01       	movw	r18, r22
     82e:	77 23       	and	r23, r23
     830:	24 f4       	brge	.+8      	; 0x83a <PID_stalk+0xdc>
     832:	22 27       	eor	r18, r18
     834:	33 27       	eor	r19, r19
     836:	26 1b       	sub	r18, r22
     838:	37 0b       	sbc	r19, r23
     83a:	2a 38       	cpi	r18, 0x8A	; 138
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	38 07       	cpc	r19, r24
     840:	5c f0       	brlt	.+22     	; 0x858 <PID_stalk+0xfa>
		OCR1C = full_speed_stalk;
     842:	8a e8       	ldi	r24, 0x8A	; 138
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	90 93 8d 00 	sts	0x008D, r25
     84a:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     84e:	90 93 8b 00 	sts	0x008B, r25
     852:	80 93 8a 00 	sts	0x008A, r24
     856:	11 c0       	rjmp	.+34     	; 0x87a <PID_stalk+0x11c>
	}
	else{
		OCR1C = abs(output);
     858:	30 93 8d 00 	sts	0x008D, r19
     85c:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     860:	80 91 b8 01 	lds	r24, 0x01B8
     864:	90 91 b9 01 	lds	r25, 0x01B9
     868:	99 23       	and	r25, r25
     86a:	1c f4       	brge	.+6      	; 0x872 <PID_stalk+0x114>
     86c:	91 95       	neg	r25
     86e:	81 95       	neg	r24
     870:	91 09       	sbc	r25, r1
     872:	90 93 8b 00 	sts	0x008B, r25
     876:	80 93 8a 00 	sts	0x008A, r24
	}
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	08 95       	ret

00000894 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     894:	6f 92       	push	r6
     896:	7f 92       	push	r7
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	5c 01       	movw	r10, r24
	m_usb_tx_string("\r\n");
     8b2:	84 ef       	ldi	r24, 0xF4	; 244
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("Pho[0]");
     8ba:	8d ee       	ldi	r24, 0xED	; 237
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(Pho[0]);
     8c2:	0f 2e       	mov	r0, r31
     8c4:	fa e4       	ldi	r31, 0x4A	; 74
     8c6:	8f 2e       	mov	r8, r31
     8c8:	f1 e0       	ldi	r31, 0x01	; 1
     8ca:	9f 2e       	mov	r9, r31
     8cc:	f0 2d       	mov	r31, r0
     8ce:	f4 01       	movw	r30, r8
     8d0:	80 81       	ld	r24, Z
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
     8d4:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     8d8:	8a ee       	ldi	r24, 0xEA	; 234
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("Pho[1]");
     8e0:	83 ee       	ldi	r24, 0xE3	; 227
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(Pho[1]);
     8e8:	0c e4       	ldi	r16, 0x4C	; 76
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	f8 01       	movw	r30, r16
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     8f6:	80 ee       	ldi	r24, 0xE0	; 224
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("Pho[2]");
     8fe:	89 ed       	ldi	r24, 0xD9	; 217
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(Pho[2]);
     906:	0f 2e       	mov	r0, r31
     908:	fe e4       	ldi	r31, 0x4E	; 78
     90a:	cf 2e       	mov	r12, r31
     90c:	f1 e0       	ldi	r31, 0x01	; 1
     90e:	df 2e       	mov	r13, r31
     910:	f0 2d       	mov	r31, r0
     912:	f6 01       	movw	r30, r12
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     91c:	86 ed       	ldi	r24, 0xD6	; 214
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("Pho[3]");
     924:	8f ec       	ldi	r24, 0xCF	; 207
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(Pho[3]);
     92c:	c0 e5       	ldi	r28, 0x50	; 80
     92e:	d1 e0       	ldi	r29, 0x01	; 1
     930:	88 81       	ld	r24, Y
     932:	99 81       	ldd	r25, Y+1	; 0x01
     934:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     938:	8c ec       	ldi	r24, 0xCC	; 204
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("Pho[4]");
     940:	85 ec       	ldi	r24, 0xC5	; 197
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(Pho[4]);
     948:	0f 2e       	mov	r0, r31
     94a:	f2 e5       	ldi	r31, 0x52	; 82
     94c:	ef 2e       	mov	r14, r31
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	ff 2e       	mov	r15, r31
     952:	f0 2d       	mov	r31, r0
     954:	f7 01       	movw	r30, r14
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     95e:	82 ec       	ldi	r24, 0xC2	; 194
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("Pho[5]");
     966:	8b eb       	ldi	r24, 0xBB	; 187
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(Pho[5]);
     96e:	0f 2e       	mov	r0, r31
     970:	f4 e5       	ldi	r31, 0x54	; 84
     972:	6f 2e       	mov	r6, r31
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	7f 2e       	mov	r7, r31
     978:	f0 2d       	mov	r31, r0
     97a:	f3 01       	movw	r30, r6
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     984:	88 eb       	ldi	r24, 0xB8	; 184
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("Pho[6]");
     98c:	81 eb       	ldi	r24, 0xB1	; 177
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(Pho[6]);
     994:	80 91 56 01 	lds	r24, 0x0156
     998:	90 91 57 01 	lds	r25, 0x0157
     99c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     9a0:	8e ea       	ldi	r24, 0xAE	; 174
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_string("\r\n");
     9a8:	8b ea       	ldi	r24, 0xAB	; 171
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     9b0:	f4 01       	movw	r30, r8
     9b2:	20 81       	ld	r18, Z
     9b4:	31 81       	ldd	r19, Z+1	; 0x01
     9b6:	f6 01       	movw	r30, r12
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	f7 01       	movw	r30, r14
     9c2:	20 81       	ld	r18, Z
     9c4:	31 81       	ldd	r19, Z+1	; 0x01
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	23 e0       	ldi	r18, 0x03	; 3
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	b9 01       	movw	r22, r18
     9d0:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__divmodhi4>
     9d4:	7b 01       	movw	r14, r22
     9d6:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     9d8:	f8 01       	movw	r30, r16
     9da:	40 81       	ld	r20, Z
     9dc:	51 81       	ldd	r21, Z+1	; 0x01
     9de:	88 81       	ld	r24, Y
     9e0:	99 81       	ldd	r25, Y+1	; 0x01
     9e2:	84 0f       	add	r24, r20
     9e4:	95 1f       	adc	r25, r21
     9e6:	f3 01       	movw	r30, r6
     9e8:	40 81       	ld	r20, Z
     9ea:	51 81       	ldd	r21, Z+1	; 0x01
     9ec:	84 0f       	add	r24, r20
     9ee:	95 1f       	adc	r25, r21
     9f0:	b9 01       	movw	r22, r18
     9f2:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__divmodhi4>
     9f6:	eb 01       	movw	r28, r22
     9f8:	8b 01       	movw	r16, r22
	
	m_usb_tx_string("mean024, mean135: ");
     9fa:	88 e9       	ldi	r24, 0x98	; 152
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(mean024);
     a02:	c7 01       	movw	r24, r14
     a04:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string(", ");
     a08:	85 e9       	ldi	r24, 0x95	; 149
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(mean135);
     a10:	ce 01       	movw	r24, r28
     a12:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
     a16:	83 e9       	ldi	r24, 0x93	; 147
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	switch(state){
     a1e:	f2 e0       	ldi	r31, 0x02	; 2
     a20:	af 16       	cp	r10, r31
     a22:	b1 04       	cpc	r11, r1
     a24:	31 f0       	breq	.+12     	; 0xa32 <findPuck+0x19e>
     a26:	45 e0       	ldi	r20, 0x05	; 5
     a28:	a4 16       	cp	r10, r20
     a2a:	b1 04       	cpc	r11, r1
     a2c:	09 f4       	brne	.+2      	; 0xa30 <findPuck+0x19c>
     a2e:	bb c0       	rjmp	.+374    	; 0xba6 <__stack+0xa7>
     a30:	0e c1       	rjmp	.+540    	; 0xc4e <__stack+0x14f>
		case 2:
			if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     a32:	c7 01       	movw	r24, r14
     a34:	8c 1b       	sub	r24, r28
     a36:	9d 0b       	sbc	r25, r29
     a38:	c3 97       	sbiw	r24, 0x33	; 51
     a3a:	84 f4       	brge	.+32     	; 0xa5c <findPuck+0x1c8>
     a3c:	ce 15       	cp	r28, r14
     a3e:	df 05       	cpc	r29, r15
     a40:	0c f0       	brlt	.+2      	; 0xa44 <findPuck+0x1b0>
     a42:	50 c0       	rjmp	.+160    	; 0xae4 <findPuck+0x250>
     a44:	20 91 52 01 	lds	r18, 0x0152
     a48:	30 91 53 01 	lds	r19, 0x0153
     a4c:	80 91 4e 01 	lds	r24, 0x014E
     a50:	90 91 4f 01 	lds	r25, 0x014F
     a54:	82 17       	cp	r24, r18
     a56:	93 07       	cpc	r25, r19
     a58:	0c f0       	brlt	.+2      	; 0xa5c <findPuck+0x1c8>
     a5a:	44 c0       	rjmp	.+136    	; 0xae4 <findPuck+0x250>
				m_usb_tx_string("turn left\n");
     a5c:	88 e8       	ldi	r24, 0x88	; 136
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				if(mean024 > revThres){
     a64:	51 eb       	ldi	r21, 0xB1	; 177
     a66:	c5 16       	cp	r12, r21
     a68:	54 e0       	ldi	r21, 0x04	; 4
     a6a:	d5 06       	cpc	r13, r21
     a6c:	6c f0       	brlt	.+26     	; 0xa88 <findPuck+0x1f4>
					set(PORTB, 0);
     a6e:	28 9a       	sbi	0x05, 0	; 5
					clear(PORTB, 1);
     a70:	29 98       	cbi	0x05, 1	; 5
					OCR1C = full_speed;
     a72:	88 e5       	ldi	r24, 0x58	; 88
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	90 93 8d 00 	sts	0x008D, r25
     a7a:	80 93 8c 00 	sts	0x008C, r24
					OCR1B = full_speed;
     a7e:	90 93 8b 00 	sts	0x008B, r25
     a82:	80 93 8a 00 	sts	0x008A, r24
     a86:	e3 c0       	rjmp	.+454    	; 0xc4e <__stack+0x14f>
				}
				else{
					set(PORTB, 0);
     a88:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     a8a:	29 9a       	sbi	0x05, 1	; 5
					OCR1C = full_speed - speed_diff_Pho;
     a8c:	88 e5       	ldi	r24, 0x58	; 88
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	20 91 00 01 	lds	r18, 0x0100
     a94:	30 91 01 01 	lds	r19, 0x0101
     a98:	fc 01       	movw	r30, r24
     a9a:	e2 1b       	sub	r30, r18
     a9c:	f3 0b       	sbc	r31, r19
     a9e:	f0 93 8d 00 	sts	0x008D, r31
     aa2:	e0 93 8c 00 	sts	0x008C, r30
					OCR1B = full_speed;
     aa6:	90 93 8b 00 	sts	0x008B, r25
     aaa:	80 93 8a 00 	sts	0x008A, r24
					if(Pho[2]>Pho[4]){
     aae:	20 91 4e 01 	lds	r18, 0x014E
     ab2:	30 91 4f 01 	lds	r19, 0x014F
     ab6:	80 91 52 01 	lds	r24, 0x0152
     aba:	90 91 53 01 	lds	r25, 0x0153
     abe:	82 17       	cp	r24, r18
     ac0:	93 07       	cpc	r25, r19
     ac2:	0c f0       	brlt	.+2      	; 0xac6 <findPuck+0x232>
     ac4:	c4 c0       	rjmp	.+392    	; 0xc4e <__stack+0x14f>
						m_usb_tx_string("PID\n");
     ac6:	83 e8       	ldi	r24, 0x83	; 131
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e7       	ldi	r20, 0x70	; 112
     ad4:	51 e4       	ldi	r21, 0x41	; 65
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	9f e3       	ldi	r25, 0x3F	; 63
     ade:	0e 94 dd 02 	call	0x5ba	; 0x5ba <PID_Pho>
     ae2:	b5 c0       	rjmp	.+362    	; 0xc4e <__stack+0x14f>
					}
				}
			}
		
			else {
				if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     ae4:	ce 19       	sub	r28, r14
     ae6:	df 09       	sbc	r29, r15
     ae8:	e3 97       	sbiw	r28, 0x33	; 51
     aea:	84 f4       	brge	.+32     	; 0xb0c <__stack+0xd>
     aec:	c0 16       	cp	r12, r16
     aee:	d1 06       	cpc	r13, r17
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <findPuck+0x260>
     af2:	4e c0       	rjmp	.+156    	; 0xb90 <__stack+0x91>
     af4:	20 91 54 01 	lds	r18, 0x0154
     af8:	30 91 55 01 	lds	r19, 0x0155
     afc:	80 91 50 01 	lds	r24, 0x0150
     b00:	90 91 51 01 	lds	r25, 0x0151
     b04:	82 17       	cp	r24, r18
     b06:	93 07       	cpc	r25, r19
     b08:	0c f0       	brlt	.+2      	; 0xb0c <__stack+0xd>
     b0a:	42 c0       	rjmp	.+132    	; 0xb90 <__stack+0x91>
					m_usb_tx_string("turn right\n");
     b0c:	87 e7       	ldi	r24, 0x77	; 119
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
					if(mean135 > revThres){
     b14:	01 3b       	cpi	r16, 0xB1	; 177
     b16:	14 40       	sbci	r17, 0x04	; 4
     b18:	6c f0       	brlt	.+26     	; 0xb34 <__stack+0x35>
						set(PORTB, 1);
     b1a:	29 9a       	sbi	0x05, 1	; 5
						clear(PORTB, 0);
     b1c:	28 98       	cbi	0x05, 0	; 5
						OCR1B = full_speed;
     b1e:	88 e5       	ldi	r24, 0x58	; 88
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	90 93 8b 00 	sts	0x008B, r25
     b26:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed;
     b2a:	90 93 8d 00 	sts	0x008D, r25
     b2e:	80 93 8c 00 	sts	0x008C, r24
     b32:	8d c0       	rjmp	.+282    	; 0xc4e <__stack+0x14f>
					}
					else{
						set(PORTB, 0);
     b34:	28 9a       	sbi	0x05, 0	; 5
						set(PORTB, 1);
     b36:	29 9a       	sbi	0x05, 1	; 5
						OCR1B = full_speed - speed_diff_Pho;
     b38:	88 e5       	ldi	r24, 0x58	; 88
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	20 91 00 01 	lds	r18, 0x0100
     b40:	30 91 01 01 	lds	r19, 0x0101
     b44:	ac 01       	movw	r20, r24
     b46:	42 1b       	sub	r20, r18
     b48:	53 0b       	sbc	r21, r19
     b4a:	50 93 8b 00 	sts	0x008B, r21
     b4e:	40 93 8a 00 	sts	0x008A, r20
						OCR1C = full_speed;
     b52:	90 93 8d 00 	sts	0x008D, r25
     b56:	80 93 8c 00 	sts	0x008C, r24
						if(Pho[3]>Pho[5]){
     b5a:	20 91 50 01 	lds	r18, 0x0150
     b5e:	30 91 51 01 	lds	r19, 0x0151
     b62:	80 91 54 01 	lds	r24, 0x0154
     b66:	90 91 55 01 	lds	r25, 0x0155
     b6a:	82 17       	cp	r24, r18
     b6c:	93 07       	cpc	r25, r19
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <__stack+0x73>
     b70:	6e c0       	rjmp	.+220    	; 0xc4e <__stack+0x14f>
							m_usb_tx_string("PID\n");
     b72:	82 e7       	ldi	r24, 0x72	; 114
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
							PID_Pho(Kp_Pho, Kd_Pho);
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e7       	ldi	r20, 0x70	; 112
     b80:	51 e4       	ldi	r21, 0x41	; 65
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	9f e3       	ldi	r25, 0x3F	; 63
     b8a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <PID_Pho>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <__stack+0x14f>
						}
					}
				}
				else{
					PID_Pho(2*Kp_Pho, Kd_Pho);
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e7       	ldi	r20, 0x70	; 112
     b96:	51 e4       	ldi	r21, 0x41	; 65
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e8       	ldi	r24, 0x80	; 128
     b9e:	9f e3       	ldi	r25, 0x3F	; 63
     ba0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <PID_Pho>
     ba4:	54 c0       	rjmp	.+168    	; 0xc4e <__stack+0x14f>
				}
			}
			break;
		case 5:
			if(mean024 - mean135 > strThres){
     ba6:	c7 01       	movw	r24, r14
     ba8:	8c 1b       	sub	r24, r28
     baa:	9d 0b       	sbc	r25, r29
     bac:	c3 97       	sbiw	r24, 0x33	; 51
     bae:	34 f1       	brlt	.+76     	; 0xbfc <__stack+0xfd>
				m_usb_tx_string("turn left\n");
     bb0:	87 e6       	ldi	r24, 0x67	; 103
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				set(PORTB, 0);
     bb8:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
     bba:	29 98       	cbi	0x05, 1	; 5
				if (Pho[2] > Pho[4]){
     bbc:	20 91 4e 01 	lds	r18, 0x014E
     bc0:	30 91 4f 01 	lds	r19, 0x014F
     bc4:	80 91 52 01 	lds	r24, 0x0152
     bc8:	90 91 53 01 	lds	r25, 0x0153
     bcc:	82 17       	cp	r24, r18
     bce:	93 07       	cpc	r25, r19
     bd0:	54 f4       	brge	.+20     	; 0xbe6 <__stack+0xe7>
					PID_stalk(Kp_stalk, Kd_stalk); 
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	63 e3       	ldi	r22, 0x33	; 51
     bda:	73 e3       	ldi	r23, 0x33	; 51
     bdc:	83 e3       	ldi	r24, 0x33	; 51
     bde:	9f e3       	ldi	r25, 0x3F	; 63
     be0:	0e 94 af 03 	call	0x75e	; 0x75e <PID_stalk>
     be4:	34 c0       	rjmp	.+104    	; 0xc4e <__stack+0x14f>
				}
				else{
					OCR1B = full_speed_stalk;
     be6:	8a e8       	ldi	r24, 0x8A	; 138
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	90 93 8b 00 	sts	0x008B, r25
     bee:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
     bf2:	90 93 8d 00 	sts	0x008D, r25
     bf6:	80 93 8c 00 	sts	0x008C, r24
     bfa:	29 c0       	rjmp	.+82     	; 0xc4e <__stack+0x14f>
				}
			}
			else{
				if(mean135 - mean024 > strThres){
     bfc:	ce 19       	sub	r28, r14
     bfe:	df 09       	sbc	r29, r15
     c00:	e3 97       	sbiw	r28, 0x33	; 51
     c02:	2c f1       	brlt	.+74     	; 0xc4e <__stack+0x14f>
					m_usb_tx_string("turn right\n");
     c04:	8b e5       	ldi	r24, 0x5B	; 91
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
					clear(PORTB, 0);
     c0c:	28 98       	cbi	0x05, 0	; 5
					set(PORTB, 1);
     c0e:	29 9a       	sbi	0x05, 1	; 5
					if (Pho[3] > Pho[5]){
     c10:	20 91 50 01 	lds	r18, 0x0150
     c14:	30 91 51 01 	lds	r19, 0x0151
     c18:	80 91 54 01 	lds	r24, 0x0154
     c1c:	90 91 55 01 	lds	r25, 0x0155
     c20:	82 17       	cp	r24, r18
     c22:	93 07       	cpc	r25, r19
     c24:	54 f4       	brge	.+20     	; 0xc3a <__stack+0x13b>
						PID_stalk(Kp_stalk, Kd_stalk);
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	a9 01       	movw	r20, r18
     c2c:	63 e3       	ldi	r22, 0x33	; 51
     c2e:	73 e3       	ldi	r23, 0x33	; 51
     c30:	83 e3       	ldi	r24, 0x33	; 51
     c32:	9f e3       	ldi	r25, 0x3F	; 63
     c34:	0e 94 af 03 	call	0x75e	; 0x75e <PID_stalk>
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <__stack+0x14f>
					}
					else{
						OCR1B = full_speed_stalk;
     c3a:	8a e8       	ldi	r24, 0x8A	; 138
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	90 93 8b 00 	sts	0x008B, r25
     c42:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed_stalk;
     c46:	90 93 8d 00 	sts	0x008D, r25
     c4a:	80 93 8c 00 	sts	0x008C, r24
			break;
		default:
			break;
	}
	
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	08 95       	ret

00000c6c <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ef 93       	push	r30
     ca0:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     ca2:	c0 91 48 01 	lds	r28, 0x0148
     ca6:	d0 91 49 01 	lds	r29, 0x0149
     caa:	a0 90 78 00 	lds	r10, 0x0078
     cae:	b0 90 79 00 	lds	r11, 0x0079
     cb2:	8e 01       	movw	r16, r28
     cb4:	00 0f       	add	r16, r16
     cb6:	11 1f       	adc	r17, r17
     cb8:	06 5b       	subi	r16, 0xB6	; 182
     cba:	1e 4f       	sbci	r17, 0xFE	; 254
     cbc:	f8 01       	movw	r30, r16
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	88 27       	eor	r24, r24
     cc4:	77 fd       	sbrc	r23, 7
     cc6:	80 95       	com	r24
     cc8:	98 2f       	mov	r25, r24
     cca:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
     cce:	2d ec       	ldi	r18, 0xCD	; 205
     cd0:	3c ec       	ldi	r19, 0xCC	; 204
     cd2:	4c e4       	ldi	r20, 0x4C	; 76
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     cda:	6b 01       	movw	r12, r22
     cdc:	7c 01       	movw	r14, r24
     cde:	b5 01       	movw	r22, r10
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
     ce8:	2c ec       	ldi	r18, 0xCC	; 204
     cea:	3c ec       	ldi	r19, 0xCC	; 204
     cec:	4c e4       	ldi	r20, 0x4C	; 76
     cee:	5e e3       	ldi	r21, 0x3E	; 62
     cf0:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	c7 01       	movw	r24, r14
     cfa:	b6 01       	movw	r22, r12
     cfc:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
     d00:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
     d04:	f8 01       	movw	r30, r16
     d06:	71 83       	std	Z+1, r23	; 0x01
     d08:	60 83       	st	Z, r22
	
	i = i + 1;
     d0a:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     d0c:	c8 30       	cpi	r28, 0x08	; 8
     d0e:	d1 05       	cpc	r29, r1
     d10:	2c f4       	brge	.+10     	; 0xd1c <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     d12:	d0 93 49 01 	sts	0x0149, r29
     d16:	c0 93 48 01 	sts	0x0148, r28
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__vector_29+0xb8>
	if(i > 7){
		i = 0;
     d1c:	10 92 49 01 	sts	0x0149, r1
     d20:	10 92 48 01 	sts	0x0148, r1
	}
	
	clear(ADCSRA, ADEN);
     d24:	ea e7       	ldi	r30, 0x7A	; 122
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	80 83       	st	Z, r24
	switch(i){
     d2e:	80 91 48 01 	lds	r24, 0x0148
     d32:	90 91 49 01 	lds	r25, 0x0149
     d36:	87 30       	cpi	r24, 0x07	; 7
     d38:	91 05       	cpc	r25, r1
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <__vector_29+0xd2>
     d3c:	7b c0       	rjmp	.+246    	; 0xe34 <__vector_29+0x1c8>
     d3e:	fc 01       	movw	r30, r24
     d40:	ea 5a       	subi	r30, 0xAA	; 170
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     d48:	eb e7       	ldi	r30, 0x7B	; 123
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 7d       	andi	r24, 0xDF	; 223
     d50:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     d52:	ec e7       	ldi	r30, 0x7C	; 124
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8b 7f       	andi	r24, 0xFB	; 251
     d5a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     d5c:	80 81       	ld	r24, Z
     d5e:	8d 7f       	andi	r24, 0xFD	; 253
     d60:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     d62:	80 81       	ld	r24, Z
     d64:	8e 7f       	andi	r24, 0xFE	; 254
     d66:	80 83       	st	Z, r24
			break;
     d68:	65 c0       	rjmp	.+202    	; 0xe34 <__vector_29+0x1c8>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     d6a:	eb e7       	ldi	r30, 0x7B	; 123
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7d       	andi	r24, 0xDF	; 223
     d72:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     d74:	ec e7       	ldi	r30, 0x7C	; 124
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8b 7f       	andi	r24, 0xFB	; 251
     d7c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     d7e:	80 81       	ld	r24, Z
     d80:	8d 7f       	andi	r24, 0xFD	; 253
     d82:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     d84:	80 81       	ld	r24, Z
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	80 83       	st	Z, r24
			break;
     d8a:	54 c0       	rjmp	.+168    	; 0xe34 <__vector_29+0x1c8>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     d8c:	eb e7       	ldi	r30, 0x7B	; 123
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 62       	ori	r24, 0x20	; 32
     d94:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     d96:	ec e7       	ldi	r30, 0x7C	; 124
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8b 7f       	andi	r24, 0xFB	; 251
     d9e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     da0:	80 81       	ld	r24, Z
     da2:	8d 7f       	andi	r24, 0xFD	; 253
     da4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     da6:	80 81       	ld	r24, Z
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	80 83       	st	Z, r24
			break;
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <__vector_29+0x1c8>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     dae:	eb e7       	ldi	r30, 0x7B	; 123
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 62       	ori	r24, 0x20	; 32
     db6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     db8:	ec e7       	ldi	r30, 0x7C	; 124
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8b 7f       	andi	r24, 0xFB	; 251
     dc0:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     dc2:	80 81       	ld	r24, Z
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     dc8:	80 81       	ld	r24, Z
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	80 83       	st	Z, r24
			break;
     dce:	32 c0       	rjmp	.+100    	; 0xe34 <__vector_29+0x1c8>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     dd0:	eb e7       	ldi	r30, 0x7B	; 123
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 62       	ori	r24, 0x20	; 32
     dd8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     dda:	ec e7       	ldi	r30, 0x7C	; 124
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8b 7f       	andi	r24, 0xFB	; 251
     de2:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     de4:	80 81       	ld	r24, Z
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     dea:	80 81       	ld	r24, Z
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	80 83       	st	Z, r24
			break;
     df0:	21 c0       	rjmp	.+66     	; 0xe34 <__vector_29+0x1c8>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     df2:	eb e7       	ldi	r30, 0x7B	; 123
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 62       	ori	r24, 0x20	; 32
     dfa:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     dfc:	ec e7       	ldi	r30, 0x7C	; 124
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     e06:	80 81       	ld	r24, Z
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     e0c:	80 81       	ld	r24, Z
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	80 83       	st	Z, r24
			break;
     e12:	10 c0       	rjmp	.+32     	; 0xe34 <__vector_29+0x1c8>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     e14:	eb e7       	ldi	r30, 0x7B	; 123
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 62       	ori	r24, 0x20	; 32
     e1c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     e1e:	ec e7       	ldi	r30, 0x7C	; 124
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     e2e:	80 81       	ld	r24, Z
     e30:	8e 7f       	andi	r24, 0xFE	; 254
     e32:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     e34:	ea e7       	ldi	r30, 0x7A	; 122
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	80 83       	st	Z, r24
	
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <deterState>:

void deterState(int *state){
	if (*state == 2 || *state == 3){
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 81       	ld	r18, Z
     e7e:	31 81       	ldd	r19, Z+1	; 0x01
     e80:	22 50       	subi	r18, 0x02	; 2
     e82:	31 09       	sbc	r19, r1
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	e0 f4       	brcc	.+56     	; 0xec2 <deterState+0x48>
		if (Pho[6] >gotThres){
     e8a:	20 91 56 01 	lds	r18, 0x0156
     e8e:	30 91 57 01 	lds	r19, 0x0157
     e92:	28 33       	cpi	r18, 0x38	; 56
     e94:	31 05       	cpc	r19, r1
     e96:	4c f0       	brlt	.+18     	; 0xeaa <deterState+0x30>
			*state = 3;
     e98:	23 e0       	ldi	r18, 0x03	; 3
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	31 83       	std	Z+1, r19	; 0x01
     e9e:	20 83       	st	Z, r18
			m_usb_tx_string("got the puck!\n");
     ea0:	8c e4       	ldi	r24, 0x4C	; 76
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
     ea8:	08 95       	ret
			
		}
		else{
			if(Pho[6] < loseThres){
     eaa:	22 33       	cpi	r18, 0x32	; 50
     eac:	31 05       	cpc	r19, r1
     eae:	4c f4       	brge	.+18     	; 0xec2 <deterState+0x48>
				*state = 2;
     eb0:	22 e0       	ldi	r18, 0x02	; 2
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	fc 01       	movw	r30, r24
     eb6:	31 83       	std	Z+1, r19	; 0x01
     eb8:	20 83       	st	Z, r18
				m_usb_tx_string("lost the puck!\n");
     eba:	8c e3       	ldi	r24, 0x3C	; 60
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
     ec2:	08 95       	ret

00000ec4 <ifGotoPuck>:
		}
	}
}

void ifGotoPuck(int *state, float *dir){
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres){
     ec4:	40 91 4a 01 	lds	r20, 0x014A
     ec8:	50 91 4b 01 	lds	r21, 0x014B
     ecc:	20 91 4c 01 	lds	r18, 0x014C
     ed0:	30 91 4d 01 	lds	r19, 0x014D
     ed4:	42 0f       	add	r20, r18
     ed6:	53 1f       	adc	r21, r19
     ed8:	20 91 4e 01 	lds	r18, 0x014E
     edc:	30 91 4f 01 	lds	r19, 0x014F
     ee0:	42 0f       	add	r20, r18
     ee2:	53 1f       	adc	r21, r19
     ee4:	20 91 50 01 	lds	r18, 0x0150
     ee8:	30 91 51 01 	lds	r19, 0x0151
     eec:	42 0f       	add	r20, r18
     eee:	53 1f       	adc	r21, r19
     ef0:	20 91 02 01 	lds	r18, 0x0102
     ef4:	30 91 03 01 	lds	r19, 0x0103
     ef8:	24 17       	cp	r18, r20
     efa:	35 07       	cpc	r19, r21
     efc:	2c f4       	brge	.+10     	; 0xf08 <ifGotoPuck+0x44>
		*state = 2;
     efe:	22 e0       	ldi	r18, 0x02	; 2
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	fc 01       	movw	r30, r24
     f04:	31 83       	std	Z+1, r19	; 0x01
     f06:	20 83       	st	Z, r18
     f08:	08 95       	ret

00000f0a <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     f0a:	4f 92       	push	r4
     f0c:	5f 92       	push	r5
     f0e:	6f 92       	push	r6
     f10:	7f 92       	push	r7
     f12:	8f 92       	push	r8
     f14:	9f 92       	push	r9
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	60 97       	sbiw	r28, 0x10	; 16
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	2b 01       	movw	r4, r22
     f3c:	3c 01       	movw	r6, r24
     f3e:	2d 83       	std	Y+5, r18	; 0x05
     f40:	3e 83       	std	Y+6, r19	; 0x06
     f42:	4f 83       	std	Y+7, r20	; 0x07
     f44:	58 87       	std	Y+8, r21	; 0x08
     f46:	58 01       	movw	r10, r16
     f48:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     f4a:	d5 01       	movw	r26, r10
     f4c:	cd 90       	ld	r12, X+
     f4e:	dd 90       	ld	r13, X+
     f50:	ed 90       	ld	r14, X+
     f52:	fc 90       	ld	r15, X
     f54:	9b 01       	movw	r18, r22
     f56:	ac 01       	movw	r20, r24
     f58:	c7 01       	movw	r24, r14
     f5a:	b6 01       	movw	r22, r12
     f5c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     f60:	f8 01       	movw	r30, r16
     f62:	20 81       	ld	r18, Z
     f64:	31 81       	ldd	r19, Z+1	; 0x01
     f66:	42 81       	ldd	r20, Z+2	; 0x02
     f68:	53 81       	ldd	r21, Z+3	; 0x03
     f6a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
     f6e:	69 87       	std	Y+9, r22	; 0x09
     f70:	7a 87       	std	Y+10, r23	; 0x0a
     f72:	8b 87       	std	Y+11, r24	; 0x0b
     f74:	9c 87       	std	Y+12, r25	; 0x0c
     f76:	d5 01       	movw	r26, r10
     f78:	14 96       	adiw	r26, 0x04	; 4
     f7a:	8d 91       	ld	r24, X+
     f7c:	9d 91       	ld	r25, X+
     f7e:	0d 90       	ld	r0, X+
     f80:	bc 91       	ld	r27, X
     f82:	a0 2d       	mov	r26, r0
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	ab 83       	std	Y+3, r26	; 0x03
     f8a:	bc 83       	std	Y+4, r27	; 0x04
     f8c:	2d 81       	ldd	r18, Y+5	; 0x05
     f8e:	3e 81       	ldd	r19, Y+6	; 0x06
     f90:	4f 81       	ldd	r20, Y+7	; 0x07
     f92:	58 85       	ldd	r21, Y+8	; 0x08
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     f9c:	6d 87       	std	Y+13, r22	; 0x0d
     f9e:	7e 87       	std	Y+14, r23	; 0x0e
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
     fa2:	98 8b       	std	Y+16, r25	; 0x10
     fa4:	9b 01       	movw	r18, r22
     fa6:	ac 01       	movw	r20, r24
     fa8:	69 85       	ldd	r22, Y+9	; 0x09
     faa:	7a 85       	ldd	r23, Y+10	; 0x0a
     fac:	8b 85       	ldd	r24, Y+11	; 0x0b
     fae:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb0:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
     fb4:	4b 01       	movw	r8, r22
     fb6:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     fb8:	29 81       	ldd	r18, Y+1	; 0x01
     fba:	3a 81       	ldd	r19, Y+2	; 0x02
     fbc:	4b 81       	ldd	r20, Y+3	; 0x03
     fbe:	5c 81       	ldd	r21, Y+4	; 0x04
     fc0:	c3 01       	movw	r24, r6
     fc2:	b2 01       	movw	r22, r4
     fc4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     fc8:	f8 01       	movw	r30, r16
     fca:	24 81       	ldd	r18, Z+4	; 0x04
     fcc:	35 81       	ldd	r19, Z+5	; 0x05
     fce:	46 81       	ldd	r20, Z+6	; 0x06
     fd0:	57 81       	ldd	r21, Z+7	; 0x07
     fd2:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
     fd6:	2b 01       	movw	r4, r22
     fd8:	3c 01       	movw	r6, r24
     fda:	2d 81       	ldd	r18, Y+5	; 0x05
     fdc:	3e 81       	ldd	r19, Y+6	; 0x06
     fde:	4f 81       	ldd	r20, Y+7	; 0x07
     fe0:	58 85       	ldd	r21, Y+8	; 0x08
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
     fe6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	c3 01       	movw	r24, r6
     ff8:	b2 01       	movw	r22, r4
     ffa:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
     ffe:	6b 01       	movw	r12, r22
    1000:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
    1002:	2d 85       	ldd	r18, Y+13	; 0x0d
    1004:	3e 85       	ldd	r19, Y+14	; 0x0e
    1006:	4f 85       	ldd	r20, Y+15	; 0x0f
    1008:	58 89       	ldd	r21, Y+16	; 0x10
    100a:	69 85       	ldd	r22, Y+9	; 0x09
    100c:	7a 85       	ldd	r23, Y+10	; 0x0a
    100e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1010:	9c 85       	ldd	r25, Y+12	; 0x0c
    1012:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    1016:	6d 83       	std	Y+5, r22	; 0x05
    1018:	7e 83       	std	Y+6, r23	; 0x06
    101a:	8f 83       	std	Y+7, r24	; 0x07
    101c:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
    101e:	29 81       	ldd	r18, Y+1	; 0x01
    1020:	3a 81       	ldd	r19, Y+2	; 0x02
    1022:	4b 81       	ldd	r20, Y+3	; 0x03
    1024:	5c 81       	ldd	r21, Y+4	; 0x04
    1026:	c3 01       	movw	r24, r6
    1028:	b2 01       	movw	r22, r4
    102a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    102e:	2b 01       	movw	r4, r22
    1030:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
    1032:	a5 01       	movw	r20, r10
    1034:	94 01       	movw	r18, r8
    1036:	c5 01       	movw	r24, r10
    1038:	b4 01       	movw	r22, r8
    103a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    103e:	4b 01       	movw	r8, r22
    1040:	5c 01       	movw	r10, r24
    1042:	a7 01       	movw	r20, r14
    1044:	96 01       	movw	r18, r12
    1046:	c7 01       	movw	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    104e:	9b 01       	movw	r18, r22
    1050:	ac 01       	movw	r20, r24
    1052:	c5 01       	movw	r24, r10
    1054:	b4 01       	movw	r22, r8
    1056:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    105a:	6b 01       	movw	r12, r22
    105c:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
    105e:	2d 81       	ldd	r18, Y+5	; 0x05
    1060:	3e 81       	ldd	r19, Y+6	; 0x06
    1062:	4f 81       	ldd	r20, Y+7	; 0x07
    1064:	58 85       	ldd	r21, Y+8	; 0x08
    1066:	ca 01       	movw	r24, r20
    1068:	b9 01       	movw	r22, r18
    106a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    106e:	4b 01       	movw	r8, r22
    1070:	5c 01       	movw	r10, r24
    1072:	a3 01       	movw	r20, r6
    1074:	92 01       	movw	r18, r4
    1076:	c3 01       	movw	r24, r6
    1078:	b2 01       	movw	r22, r4
    107a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    107e:	9b 01       	movw	r18, r22
    1080:	ac 01       	movw	r20, r24
    1082:	c5 01       	movw	r24, r10
    1084:	b4 01       	movw	r22, r8
    1086:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
    108e:	01 e0       	ldi	r16, 0x01	; 1
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	c7 01       	movw	r24, r14
    1094:	b6 01       	movw	r22, r12
    1096:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    109a:	88 23       	and	r24, r24
    109c:	14 f0       	brlt	.+4      	; 0x10a2 <find_sign+0x198>
    109e:	00 e0       	ldi	r16, 0x00	; 0
    10a0:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
    10a2:	c8 01       	movw	r24, r16
    10a4:	60 96       	adiw	r28, 0x10	; 16
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	8f 90       	pop	r8
    10c8:	7f 90       	pop	r7
    10ca:	6f 90       	pop	r6
    10cc:	5f 90       	pop	r5
    10ce:	4f 90       	pop	r4
    10d0:	08 95       	ret

000010d2 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
    10d2:	2f 92       	push	r2
    10d4:	3f 92       	push	r3
    10d6:	4f 92       	push	r4
    10d8:	5f 92       	push	r5
    10da:	6f 92       	push	r6
    10dc:	7f 92       	push	r7
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	28 97       	sbiw	r28, 0x08	; 8
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	1c 01       	movw	r2, r24
    1108:	49 83       	std	Y+1, r20	; 0x01
    110a:	5a 83       	std	Y+2, r21	; 0x02
    110c:	6b 83       	std	Y+3, r22	; 0x03
    110e:	7c 83       	std	Y+4, r23	; 0x04
    1110:	0d 83       	std	Y+5, r16	; 0x05
    1112:	1e 83       	std	Y+6, r17	; 0x06
    1114:	2f 83       	std	Y+7, r18	; 0x07
    1116:	38 87       	std	Y+8, r19	; 0x08
    1118:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
    111a:	f6 01       	movw	r30, r12
    111c:	20 81       	ld	r18, Z
    111e:	31 81       	ldd	r19, Z+1	; 0x01
    1120:	42 81       	ldd	r20, Z+2	; 0x02
    1122:	53 81       	ldd	r21, Z+3	; 0x03
    1124:	f7 01       	movw	r30, r14
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    1132:	4b 01       	movw	r8, r22
    1134:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
    1136:	f6 01       	movw	r30, r12
    1138:	24 81       	ldd	r18, Z+4	; 0x04
    113a:	35 81       	ldd	r19, Z+5	; 0x05
    113c:	46 81       	ldd	r20, Z+6	; 0x06
    113e:	57 81       	ldd	r21, Z+7	; 0x07
    1140:	f7 01       	movw	r30, r14
    1142:	64 81       	ldd	r22, Z+4	; 0x04
    1144:	75 81       	ldd	r23, Z+5	; 0x05
    1146:	86 81       	ldd	r24, Z+6	; 0x06
    1148:	97 81       	ldd	r25, Z+7	; 0x07
    114a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    114e:	6b 01       	movw	r12, r22
    1150:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
    1152:	a5 01       	movw	r20, r10
    1154:	94 01       	movw	r18, r8
    1156:	c5 01       	movw	r24, r10
    1158:	b4 01       	movw	r22, r8
    115a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    115e:	2b 01       	movw	r4, r22
    1160:	3c 01       	movw	r6, r24
    1162:	a7 01       	movw	r20, r14
    1164:	96 01       	movw	r18, r12
    1166:	c7 01       	movw	r24, r14
    1168:	b6 01       	movw	r22, r12
    116a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    116e:	9b 01       	movw	r18, r22
    1170:	ac 01       	movw	r20, r24
    1172:	c3 01       	movw	r24, r6
    1174:	b2 01       	movw	r22, r4
    1176:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
    117a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <sqrt>
    117e:	2b 01       	movw	r4, r22
    1180:	3c 01       	movw	r6, r24
    1182:	9b 01       	movw	r18, r22
    1184:	ac 01       	movw	r20, r24
    1186:	c5 01       	movw	r24, r10
    1188:	b4 01       	movw	r22, r8
    118a:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__divsf3>
    118e:	4b 01       	movw	r8, r22
    1190:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
    1192:	a3 01       	movw	r20, r6
    1194:	92 01       	movw	r18, r4
    1196:	c7 01       	movw	r24, r14
    1198:	b6 01       	movw	r22, r12
    119a:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__divsf3>
    119e:	6b 01       	movw	r12, r22
    11a0:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
    11a2:	f8 01       	movw	r30, r16
    11a4:	20 81       	ld	r18, Z
    11a6:	31 81       	ldd	r19, Z+1	; 0x01
    11a8:	42 81       	ldd	r20, Z+2	; 0x02
    11aa:	53 81       	ldd	r21, Z+3	; 0x03
    11ac:	c5 01       	movw	r24, r10
    11ae:	b4 01       	movw	r22, r8
    11b0:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    11b4:	2b 01       	movw	r4, r22
    11b6:	3c 01       	movw	r6, r24
    11b8:	f8 01       	movw	r30, r16
    11ba:	24 81       	ldd	r18, Z+4	; 0x04
    11bc:	35 81       	ldd	r19, Z+5	; 0x05
    11be:	46 81       	ldd	r20, Z+6	; 0x06
    11c0:	57 81       	ldd	r21, Z+7	; 0x07
    11c2:	c7 01       	movw	r24, r14
    11c4:	b6 01       	movw	r22, r12
    11c6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    11ca:	9b 01       	movw	r18, r22
    11cc:	ac 01       	movw	r20, r24
    11ce:	c3 01       	movw	r24, r6
    11d0:	b2 01       	movw	r22, r4
    11d2:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
	alpha = acos(cos_alpha);
    11d6:	0e 94 a9 1c 	call	0x3952	; 0x3952 <acos>
    11da:	2b 01       	movw	r4, r22
    11dc:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
    11de:	2a 94       	dec	r2
    11e0:	23 28       	or	r2, r3
    11e2:	d1 f4       	brne	.+52     	; 0x1218 <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	4f 81       	ldd	r20, Y+7	; 0x07
    11ea:	58 85       	ldd	r21, Y+8	; 0x08
    11ec:	50 58       	subi	r21, 0x80	; 128
    11ee:	c7 01       	movw	r24, r14
    11f0:	b6 01       	movw	r22, r12
    11f2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    11f6:	6b 01       	movw	r12, r22
    11f8:	7c 01       	movw	r14, r24
    11fa:	29 81       	ldd	r18, Y+1	; 0x01
    11fc:	3a 81       	ldd	r19, Y+2	; 0x02
    11fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1200:	5c 81       	ldd	r21, Y+4	; 0x04
    1202:	c5 01       	movw	r24, r10
    1204:	b4 01       	movw	r22, r8
    1206:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    120a:	9b 01       	movw	r18, r22
    120c:	ac 01       	movw	r20, r24
    120e:	c7 01       	movw	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    1216:	19 c0       	rjmp	.+50     	; 0x124a <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    1218:	2d 81       	ldd	r18, Y+5	; 0x05
    121a:	3e 81       	ldd	r19, Y+6	; 0x06
    121c:	4f 81       	ldd	r20, Y+7	; 0x07
    121e:	58 85       	ldd	r21, Y+8	; 0x08
    1220:	50 58       	subi	r21, 0x80	; 128
    1222:	c7 01       	movw	r24, r14
    1224:	b6 01       	movw	r22, r12
    1226:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    122a:	6b 01       	movw	r12, r22
    122c:	7c 01       	movw	r14, r24
    122e:	29 81       	ldd	r18, Y+1	; 0x01
    1230:	3a 81       	ldd	r19, Y+2	; 0x02
    1232:	4b 81       	ldd	r20, Y+3	; 0x03
    1234:	5c 81       	ldd	r21, Y+4	; 0x04
    1236:	c5 01       	movw	r24, r10
    1238:	b4 01       	movw	r22, r8
    123a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	c7 01       	movw	r24, r14
    1244:	b6 01       	movw	r22, r12
    1246:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
	}
	if (c2g_wx < 0){
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1254:	88 23       	and	r24, r24
    1256:	4c f0       	brlt	.+18     	; 0x126a <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    1258:	40 92 64 01 	sts	0x0164, r4
    125c:	50 92 65 01 	sts	0x0165, r5
    1260:	60 92 66 01 	sts	0x0166, r6
    1264:	70 92 67 01 	sts	0x0167, r7
    1268:	0c c0       	rjmp	.+24     	; 0x1282 <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    126a:	77 fa       	bst	r7, 7
    126c:	70 94       	com	r7
    126e:	77 f8       	bld	r7, 7
    1270:	70 94       	com	r7
    1272:	40 92 64 01 	sts	0x0164, r4
    1276:	50 92 65 01 	sts	0x0165, r5
    127a:	60 92 66 01 	sts	0x0166, r6
    127e:	70 92 67 01 	sts	0x0167, r7
	}
	m_usb_tx_string("alpha: ");
    1282:	82 e6       	ldi	r24, 0x62	; 98
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(alpha*10);
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	60 91 64 01 	lds	r22, 0x0164
    1296:	70 91 65 01 	lds	r23, 0x0165
    129a:	80 91 66 01 	lds	r24, 0x0166
    129e:	90 91 67 01 	lds	r25, 0x0167
    12a2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    12a6:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    12aa:	cb 01       	movw	r24, r22
    12ac:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    12b0:	80 e6       	ldi	r24, 0x60	; 96
    12b2:	92 e0       	ldi	r25, 0x02	; 2
    12b4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
}
    12b8:	28 96       	adiw	r28, 0x08	; 8
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	7f 90       	pop	r7
    12de:	6f 90       	pop	r6
    12e0:	5f 90       	pop	r5
    12e2:	4f 90       	pop	r4
    12e4:	3f 90       	pop	r3
    12e6:	2f 90       	pop	r2
    12e8:	08 95       	ret

000012ea <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    12ea:	4f 92       	push	r4
    12ec:	5f 92       	push	r5
    12ee:	6f 92       	push	r6
    12f0:	7f 92       	push	r7
    12f2:	8f 92       	push	r8
    12f4:	9f 92       	push	r9
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	00 d0       	rcall	.+0      	; 0x1308 <PID_alpha+0x1e>
    1308:	00 d0       	rcall	.+0      	; 0x130a <PID_alpha+0x20>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	4b 01       	movw	r8, r22
    1310:	5c 01       	movw	r10, r24
    1312:	29 83       	std	Y+1, r18	; 0x01
    1314:	3a 83       	std	Y+2, r19	; 0x02
    1316:	4b 83       	std	Y+3, r20	; 0x03
    1318:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    131a:	40 90 64 01 	lds	r4, 0x0164
    131e:	50 90 65 01 	lds	r5, 0x0165
    1322:	60 90 66 01 	lds	r6, 0x0166
    1326:	70 90 67 01 	lds	r7, 0x0167
    132a:	20 91 60 01 	lds	r18, 0x0160
    132e:	30 91 61 01 	lds	r19, 0x0161
    1332:	40 91 62 01 	lds	r20, 0x0162
    1336:	50 91 63 01 	lds	r21, 0x0163
    133a:	c3 01       	movw	r24, r6
    133c:	b2 01       	movw	r22, r4
    133e:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    1342:	6b 01       	movw	r12, r22
    1344:	7c 01       	movw	r14, r24
    1346:	60 93 5c 01 	sts	0x015C, r22
    134a:	70 93 5d 01 	sts	0x015D, r23
    134e:	80 93 5e 01 	sts	0x015E, r24
    1352:	90 93 5f 01 	sts	0x015F, r25
	float P =0, D = 0;
	P = Kp * alpha;
    1356:	a5 01       	movw	r20, r10
    1358:	94 01       	movw	r18, r8
    135a:	c3 01       	movw	r24, r6
    135c:	b2 01       	movw	r22, r4
    135e:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1362:	4b 01       	movw	r8, r22
    1364:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    1366:	29 81       	ldd	r18, Y+1	; 0x01
    1368:	3a 81       	ldd	r19, Y+2	; 0x02
    136a:	4b 81       	ldd	r20, Y+3	; 0x03
    136c:	5c 81       	ldd	r21, Y+4	; 0x04
    136e:	c7 01       	movw	r24, r14
    1370:	b6 01       	movw	r22, r12
    1372:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1376:	9b 01       	movw	r18, r22
    1378:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    137a:	c5 01       	movw	r24, r10
    137c:	b4 01       	movw	r22, r8
    137e:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    1382:	60 93 58 01 	sts	0x0158, r22
    1386:	70 93 59 01 	sts	0x0159, r23
    138a:	80 93 5a 01 	sts	0x015A, r24
    138e:	90 93 5b 01 	sts	0x015B, r25
	
	alpha_last = alpha;
    1392:	40 92 60 01 	sts	0x0160, r4
    1396:	50 92 61 01 	sts	0x0161, r5
    139a:	60 92 62 01 	sts	0x0162, r6
    139e:	70 92 63 01 	sts	0x0163, r7
	
	m_usb_tx_string("alpha*10: ");
    13a2:	85 e5       	ldi	r24, 0x55	; 85
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e2       	ldi	r20, 0x20	; 32
    13b0:	51 e4       	ldi	r21, 0x41	; 65
    13b2:	60 91 64 01 	lds	r22, 0x0164
    13b6:	70 91 65 01 	lds	r23, 0x0165
    13ba:	80 91 66 01 	lds	r24, 0x0166
    13be:	90 91 67 01 	lds	r25, 0x0167
    13c2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    13c6:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    13ca:	cb 01       	movw	r24, r22
    13cc:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    13d0:	83 e5       	ldi	r24, 0x53	; 83
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	m_usb_tx_string("gain*10: ");
    13d8:	89 e4       	ldi	r24, 0x49	; 73
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	60 91 58 01 	lds	r22, 0x0158
    13ec:	70 91 59 01 	lds	r23, 0x0159
    13f0:	80 91 5a 01 	lds	r24, 0x015A
    13f4:	90 91 5b 01 	lds	r25, 0x015B
    13f8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    13fc:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1400:	cb 01       	movw	r24, r22
    1402:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1406:	87 e4       	ldi	r24, 0x47	; 71
    1408:	92 e0       	ldi	r25, 0x02	; 2
    140a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	if(gain_loc<0){  // turn right
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	a9 01       	movw	r20, r18
    1414:	60 91 58 01 	lds	r22, 0x0158
    1418:	70 91 59 01 	lds	r23, 0x0159
    141c:	80 91 5a 01 	lds	r24, 0x015A
    1420:	90 91 5b 01 	lds	r25, 0x015B
    1424:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1428:	88 23       	and	r24, r24
    142a:	0c f0       	brlt	.+2      	; 0x142e <PID_alpha+0x144>
    142c:	44 c0       	rjmp	.+136    	; 0x14b6 <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    142e:	8b e3       	ldi	r24, 0x3B	; 59
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1436:	60 91 58 01 	lds	r22, 0x0158
    143a:	70 91 59 01 	lds	r23, 0x0159
    143e:	80 91 5a 01 	lds	r24, 0x015A
    1442:	90 91 5b 01 	lds	r25, 0x015B
    1446:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    144a:	9b 01       	movw	r18, r22
    144c:	77 23       	and	r23, r23
    144e:	24 f4       	brge	.+8      	; 0x1458 <PID_alpha+0x16e>
    1450:	22 27       	eor	r18, r18
    1452:	33 27       	eor	r19, r19
    1454:	26 1b       	sub	r18, r22
    1456:	37 0b       	sbc	r19, r23
    1458:	88 e5       	ldi	r24, 0x58	; 88
    145a:	92 e0       	ldi	r25, 0x02	; 2
    145c:	82 1b       	sub	r24, r18
    145e:	93 0b       	sbc	r25, r19
    1460:	90 93 8b 00 	sts	0x008B, r25
    1464:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    1468:	e0 90 1a 01 	lds	r14, 0x011A
    146c:	f0 90 1b 01 	lds	r15, 0x011B
    1470:	60 91 58 01 	lds	r22, 0x0158
    1474:	70 91 59 01 	lds	r23, 0x0159
    1478:	80 91 5a 01 	lds	r24, 0x015A
    147c:	90 91 5b 01 	lds	r25, 0x015B
    1480:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1484:	9b 01       	movw	r18, r22
    1486:	77 23       	and	r23, r23
    1488:	24 f4       	brge	.+8      	; 0x1492 <PID_alpha+0x1a8>
    148a:	22 27       	eor	r18, r18
    148c:	33 27       	eor	r19, r19
    148e:	26 1b       	sub	r18, r22
    1490:	37 0b       	sbc	r19, r23
    1492:	e2 16       	cp	r14, r18
    1494:	f3 06       	cpc	r15, r19
    1496:	44 f4       	brge	.+16     	; 0x14a8 <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    1498:	88 e5       	ldi	r24, 0x58	; 88
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	8e 19       	sub	r24, r14
    149e:	9f 09       	sbc	r25, r15
    14a0:	90 93 8b 00 	sts	0x008B, r25
    14a4:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    14a8:	88 e5       	ldi	r24, 0x58	; 88
    14aa:	92 e0       	ldi	r25, 0x02	; 2
    14ac:	90 93 8d 00 	sts	0x008D, r25
    14b0:	80 93 8c 00 	sts	0x008C, r24
    14b4:	43 c0       	rjmp	.+134    	; 0x153c <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    14b6:	80 e3       	ldi	r24, 0x30	; 48
    14b8:	92 e0       	ldi	r25, 0x02	; 2
    14ba:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    14be:	60 91 58 01 	lds	r22, 0x0158
    14c2:	70 91 59 01 	lds	r23, 0x0159
    14c6:	80 91 5a 01 	lds	r24, 0x015A
    14ca:	90 91 5b 01 	lds	r25, 0x015B
    14ce:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    14d2:	9b 01       	movw	r18, r22
    14d4:	77 23       	and	r23, r23
    14d6:	24 f4       	brge	.+8      	; 0x14e0 <PID_alpha+0x1f6>
    14d8:	22 27       	eor	r18, r18
    14da:	33 27       	eor	r19, r19
    14dc:	26 1b       	sub	r18, r22
    14de:	37 0b       	sbc	r19, r23
    14e0:	88 e5       	ldi	r24, 0x58	; 88
    14e2:	92 e0       	ldi	r25, 0x02	; 2
    14e4:	82 1b       	sub	r24, r18
    14e6:	93 0b       	sbc	r25, r19
    14e8:	90 93 8d 00 	sts	0x008D, r25
    14ec:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    14f0:	e0 90 1a 01 	lds	r14, 0x011A
    14f4:	f0 90 1b 01 	lds	r15, 0x011B
    14f8:	60 91 58 01 	lds	r22, 0x0158
    14fc:	70 91 59 01 	lds	r23, 0x0159
    1500:	80 91 5a 01 	lds	r24, 0x015A
    1504:	90 91 5b 01 	lds	r25, 0x015B
    1508:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    150c:	9b 01       	movw	r18, r22
    150e:	77 23       	and	r23, r23
    1510:	24 f4       	brge	.+8      	; 0x151a <PID_alpha+0x230>
    1512:	22 27       	eor	r18, r18
    1514:	33 27       	eor	r19, r19
    1516:	26 1b       	sub	r18, r22
    1518:	37 0b       	sbc	r19, r23
    151a:	e2 16       	cp	r14, r18
    151c:	f3 06       	cpc	r15, r19
    151e:	44 f4       	brge	.+16     	; 0x1530 <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    1520:	88 e5       	ldi	r24, 0x58	; 88
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	8e 19       	sub	r24, r14
    1526:	9f 09       	sbc	r25, r15
    1528:	90 93 8d 00 	sts	0x008D, r25
    152c:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1530:	88 e5       	ldi	r24, 0x58	; 88
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	90 93 8b 00 	sts	0x008B, r25
    1538:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	7f 90       	pop	r7
    155a:	6f 90       	pop	r6
    155c:	5f 90       	pop	r5
    155e:	4f 90       	pop	r4
    1560:	08 95       	ret

00001562 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    1562:	4f 92       	push	r4
    1564:	5f 92       	push	r5
    1566:	6f 92       	push	r6
    1568:	7f 92       	push	r7
    156a:	8f 92       	push	r8
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	00 d0       	rcall	.+0      	; 0x1580 <PID_p2p+0x1e>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <PID_p2p+0x20>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	4b 01       	movw	r8, r22
    1588:	5c 01       	movw	r10, r24
    158a:	29 83       	std	Y+1, r18	; 0x01
    158c:	3a 83       	std	Y+2, r19	; 0x02
    158e:	4b 83       	std	Y+3, r20	; 0x03
    1590:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1592:	40 90 64 01 	lds	r4, 0x0164
    1596:	50 90 65 01 	lds	r5, 0x0165
    159a:	60 90 66 01 	lds	r6, 0x0166
    159e:	70 90 67 01 	lds	r7, 0x0167
    15a2:	20 91 60 01 	lds	r18, 0x0160
    15a6:	30 91 61 01 	lds	r19, 0x0161
    15aa:	40 91 62 01 	lds	r20, 0x0162
    15ae:	50 91 63 01 	lds	r21, 0x0163
    15b2:	c3 01       	movw	r24, r6
    15b4:	b2 01       	movw	r22, r4
    15b6:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    15ba:	6b 01       	movw	r12, r22
    15bc:	7c 01       	movw	r14, r24
    15be:	60 93 5c 01 	sts	0x015C, r22
    15c2:	70 93 5d 01 	sts	0x015D, r23
    15c6:	80 93 5e 01 	sts	0x015E, r24
    15ca:	90 93 5f 01 	sts	0x015F, r25
	float P =0, D = 0;
	P = Kp * alpha;
    15ce:	a5 01       	movw	r20, r10
    15d0:	94 01       	movw	r18, r8
    15d2:	c3 01       	movw	r24, r6
    15d4:	b2 01       	movw	r22, r4
    15d6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    15da:	4b 01       	movw	r8, r22
    15dc:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	3a 81       	ldd	r19, Y+2	; 0x02
    15e2:	4b 81       	ldd	r20, Y+3	; 0x03
    15e4:	5c 81       	ldd	r21, Y+4	; 0x04
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    15f2:	c5 01       	movw	r24, r10
    15f4:	b4 01       	movw	r22, r8
    15f6:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    15fa:	60 93 58 01 	sts	0x0158, r22
    15fe:	70 93 59 01 	sts	0x0159, r23
    1602:	80 93 5a 01 	sts	0x015A, r24
    1606:	90 93 5b 01 	sts	0x015B, r25
	
	alpha_last = alpha;
    160a:	40 92 60 01 	sts	0x0160, r4
    160e:	50 92 61 01 	sts	0x0161, r5
    1612:	60 92 62 01 	sts	0x0162, r6
    1616:	70 92 63 01 	sts	0x0163, r7
	
	m_usb_tx_string("alpha*10: ");
    161a:	85 e2       	ldi	r24, 0x25	; 37
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	60 91 64 01 	lds	r22, 0x0164
    162e:	70 91 65 01 	lds	r23, 0x0165
    1632:	80 91 66 01 	lds	r24, 0x0166
    1636:	90 91 67 01 	lds	r25, 0x0167
    163a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    163e:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1642:	cb 01       	movw	r24, r22
    1644:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1648:	83 e2       	ldi	r24, 0x23	; 35
    164a:	92 e0       	ldi	r25, 0x02	; 2
    164c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1650:	89 e1       	ldi	r24, 0x19	; 25
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	60 91 58 01 	lds	r22, 0x0158
    1664:	70 91 59 01 	lds	r23, 0x0159
    1668:	80 91 5a 01 	lds	r24, 0x015A
    166c:	90 91 5b 01 	lds	r25, 0x015B
    1670:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1674:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1678:	cb 01       	movw	r24, r22
    167a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    167e:	87 e1       	ldi	r24, 0x17	; 23
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	if(gain_loc<0){  // turn right
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	a9 01       	movw	r20, r18
    168c:	60 91 58 01 	lds	r22, 0x0158
    1690:	70 91 59 01 	lds	r23, 0x0159
    1694:	80 91 5a 01 	lds	r24, 0x015A
    1698:	90 91 5b 01 	lds	r25, 0x015B
    169c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <PID_p2p+0x144>
    16a4:	44 c0       	rjmp	.+136    	; 0x172e <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    16a6:	8b e0       	ldi	r24, 0x0B	; 11
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    16ae:	60 91 58 01 	lds	r22, 0x0158
    16b2:	70 91 59 01 	lds	r23, 0x0159
    16b6:	80 91 5a 01 	lds	r24, 0x015A
    16ba:	90 91 5b 01 	lds	r25, 0x015B
    16be:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    16c2:	9b 01       	movw	r18, r22
    16c4:	77 23       	and	r23, r23
    16c6:	24 f4       	brge	.+8      	; 0x16d0 <PID_p2p+0x16e>
    16c8:	22 27       	eor	r18, r18
    16ca:	33 27       	eor	r19, r19
    16cc:	26 1b       	sub	r18, r22
    16ce:	37 0b       	sbc	r19, r23
    16d0:	88 e5       	ldi	r24, 0x58	; 88
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	82 1b       	sub	r24, r18
    16d6:	93 0b       	sbc	r25, r19
    16d8:	90 93 8b 00 	sts	0x008B, r25
    16dc:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    16e0:	e0 90 18 01 	lds	r14, 0x0118
    16e4:	f0 90 19 01 	lds	r15, 0x0119
    16e8:	60 91 58 01 	lds	r22, 0x0158
    16ec:	70 91 59 01 	lds	r23, 0x0159
    16f0:	80 91 5a 01 	lds	r24, 0x015A
    16f4:	90 91 5b 01 	lds	r25, 0x015B
    16f8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    16fc:	9b 01       	movw	r18, r22
    16fe:	77 23       	and	r23, r23
    1700:	24 f4       	brge	.+8      	; 0x170a <PID_p2p+0x1a8>
    1702:	22 27       	eor	r18, r18
    1704:	33 27       	eor	r19, r19
    1706:	26 1b       	sub	r18, r22
    1708:	37 0b       	sbc	r19, r23
    170a:	e2 16       	cp	r14, r18
    170c:	f3 06       	cpc	r15, r19
    170e:	44 f4       	brge	.+16     	; 0x1720 <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    1710:	88 e5       	ldi	r24, 0x58	; 88
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	8e 19       	sub	r24, r14
    1716:	9f 09       	sbc	r25, r15
    1718:	90 93 8b 00 	sts	0x008B, r25
    171c:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1720:	88 e5       	ldi	r24, 0x58	; 88
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	90 93 8d 00 	sts	0x008D, r25
    1728:	80 93 8c 00 	sts	0x008C, r24
    172c:	43 c0       	rjmp	.+134    	; 0x17b4 <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1736:	60 91 58 01 	lds	r22, 0x0158
    173a:	70 91 59 01 	lds	r23, 0x0159
    173e:	80 91 5a 01 	lds	r24, 0x015A
    1742:	90 91 5b 01 	lds	r25, 0x015B
    1746:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    174a:	9b 01       	movw	r18, r22
    174c:	77 23       	and	r23, r23
    174e:	24 f4       	brge	.+8      	; 0x1758 <PID_p2p+0x1f6>
    1750:	22 27       	eor	r18, r18
    1752:	33 27       	eor	r19, r19
    1754:	26 1b       	sub	r18, r22
    1756:	37 0b       	sbc	r19, r23
    1758:	88 e5       	ldi	r24, 0x58	; 88
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	82 1b       	sub	r24, r18
    175e:	93 0b       	sbc	r25, r19
    1760:	90 93 8d 00 	sts	0x008D, r25
    1764:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    1768:	e0 90 18 01 	lds	r14, 0x0118
    176c:	f0 90 19 01 	lds	r15, 0x0119
    1770:	60 91 58 01 	lds	r22, 0x0158
    1774:	70 91 59 01 	lds	r23, 0x0159
    1778:	80 91 5a 01 	lds	r24, 0x015A
    177c:	90 91 5b 01 	lds	r25, 0x015B
    1780:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1784:	9b 01       	movw	r18, r22
    1786:	77 23       	and	r23, r23
    1788:	24 f4       	brge	.+8      	; 0x1792 <PID_p2p+0x230>
    178a:	22 27       	eor	r18, r18
    178c:	33 27       	eor	r19, r19
    178e:	26 1b       	sub	r18, r22
    1790:	37 0b       	sbc	r19, r23
    1792:	e2 16       	cp	r14, r18
    1794:	f3 06       	cpc	r15, r19
    1796:	44 f4       	brge	.+16     	; 0x17a8 <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    1798:	88 e5       	ldi	r24, 0x58	; 88
    179a:	92 e0       	ldi	r25, 0x02	; 2
    179c:	8e 19       	sub	r24, r14
    179e:	9f 09       	sbc	r25, r15
    17a0:	90 93 8d 00 	sts	0x008D, r25
    17a4:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    17a8:	88 e5       	ldi	r24, 0x58	; 88
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	90 93 8b 00 	sts	0x008B, r25
    17b0:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	9f 90       	pop	r9
    17ce:	8f 90       	pop	r8
    17d0:	7f 90       	pop	r7
    17d2:	6f 90       	pop	r6
    17d4:	5f 90       	pop	r5
    17d6:	4f 90       	pop	r4
    17d8:	08 95       	ret

000017da <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
	unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
    17e2:	f8 01       	movw	r30, r16
    17e4:	20 81       	ld	r18, Z
    17e6:	31 81       	ldd	r19, Z+1	; 0x01
    17e8:	42 81       	ldd	r20, Z+2	; 0x02
    17ea:	53 81       	ldd	r21, Z+3	; 0x03
    17ec:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    17f0:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    17f4:	9b 01       	movw	r18, r22
    17f6:	77 23       	and	r23, r23
    17f8:	24 f4       	brge	.+8      	; 0x1802 <find_if_reach+0x28>
    17fa:	22 27       	eor	r18, r18
    17fc:	33 27       	eor	r19, r19
    17fe:	26 1b       	sub	r18, r22
    1800:	37 0b       	sbc	r19, r23
    1802:	22 9f       	mul	r18, r18
    1804:	e0 01       	movw	r28, r0
    1806:	23 9f       	mul	r18, r19
    1808:	d0 0d       	add	r29, r0
    180a:	d0 0d       	add	r29, r0
    180c:	11 24       	eor	r1, r1
	m_usb_tx_string("dist: ");
    180e:	89 ef       	ldi	r24, 0xF9	; 249
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(dist); 
    1816:	ce 01       	movw	r24, r28
    1818:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    181c:	87 ef       	ldi	r24, 0xF7	; 247
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	if (dist < dist_threshold){
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	20 91 1c 01 	lds	r18, 0x011C
    182c:	30 91 1d 01 	lds	r19, 0x011D
    1830:	c2 17       	cp	r28, r18
    1832:	d3 07       	cpc	r29, r19
    1834:	10 f0       	brcs	.+4      	; 0x183a <find_if_reach+0x60>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	08 95       	ret

00001844 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int *state, float *goal, float *c_wii, float *dir){
    1844:	2f 92       	push	r2
    1846:	3f 92       	push	r3
    1848:	4f 92       	push	r4
    184a:	5f 92       	push	r5
    184c:	6f 92       	push	r6
    184e:	7f 92       	push	r7
    1850:	8f 92       	push	r8
    1852:	9f 92       	push	r9
    1854:	af 92       	push	r10
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	c6 58       	subi	r28, 0x86	; 134
    186e:	d1 09       	sbc	r29, r1
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cd 57       	subi	r28, 0x7D	; 125
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	99 83       	std	Y+1, r25	; 0x01
    1880:	88 83       	st	Y, r24
    1882:	c3 58       	subi	r28, 0x83	; 131
    1884:	d0 40       	sbci	r29, 0x00	; 0
    1886:	cb 57       	subi	r28, 0x7B	; 123
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	79 83       	std	Y+1, r23	; 0x01
    188c:	68 83       	st	Y, r22
    188e:	c5 58       	subi	r28, 0x85	; 133
    1890:	d0 40       	sbci	r29, 0x00	; 0
    1892:	ed 96       	adiw	r28, 0x3d	; 61
    1894:	5f af       	std	Y+63, r21	; 0x3f
    1896:	4e af       	std	Y+62, r20	; 0x3e
    1898:	ed 97       	sbiw	r28, 0x3d	; 61
    189a:	ef 96       	adiw	r28, 0x3f	; 63
    189c:	3f af       	std	Y+63, r19	; 0x3f
    189e:	2e af       	std	Y+62, r18	; 0x3e
    18a0:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    18a2:	88 e7       	ldi	r24, 0x78	; 120
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 5e 18 	call	0x30bc	; 0x30bc <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    18aa:	60 91 78 01 	lds	r22, 0x0178
    18ae:	70 91 79 01 	lds	r23, 0x0179
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    18ba:	69 83       	std	Y+1, r22	; 0x01
    18bc:	7a 83       	std	Y+2, r23	; 0x02
    18be:	8b 83       	std	Y+3, r24	; 0x03
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	60 91 7e 01 	lds	r22, 0x017E
    18c6:	70 91 7f 01 	lds	r23, 0x017F
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    18d2:	6d 83       	std	Y+5, r22	; 0x05
    18d4:	7e 83       	std	Y+6, r23	; 0x06
    18d6:	8f 83       	std	Y+7, r24	; 0x07
    18d8:	98 87       	std	Y+8, r25	; 0x08
    18da:	60 91 84 01 	lds	r22, 0x0184
    18de:	70 91 85 01 	lds	r23, 0x0185
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    18ea:	69 87       	std	Y+9, r22	; 0x09
    18ec:	7a 87       	std	Y+10, r23	; 0x0a
    18ee:	8b 87       	std	Y+11, r24	; 0x0b
    18f0:	9c 87       	std	Y+12, r25	; 0x0c
    18f2:	60 91 8a 01 	lds	r22, 0x018A
    18f6:	70 91 8b 01 	lds	r23, 0x018B
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    1902:	6d 87       	std	Y+13, r22	; 0x0d
    1904:	7e 87       	std	Y+14, r23	; 0x0e
    1906:	8f 87       	std	Y+15, r24	; 0x0f
    1908:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    190a:	60 91 7a 01 	lds	r22, 0x017A
    190e:	70 91 7b 01 	lds	r23, 0x017B
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    191a:	69 8b       	std	Y+17, r22	; 0x11
    191c:	7a 8b       	std	Y+18, r23	; 0x12
    191e:	8b 8b       	std	Y+19, r24	; 0x13
    1920:	9c 8b       	std	Y+20, r25	; 0x14
    1922:	60 91 80 01 	lds	r22, 0x0180
    1926:	70 91 81 01 	lds	r23, 0x0181
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    1932:	6d 8b       	std	Y+21, r22	; 0x15
    1934:	7e 8b       	std	Y+22, r23	; 0x16
    1936:	8f 8b       	std	Y+23, r24	; 0x17
    1938:	98 8f       	std	Y+24, r25	; 0x18
    193a:	60 91 86 01 	lds	r22, 0x0186
    193e:	70 91 87 01 	lds	r23, 0x0187
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    194a:	69 8f       	std	Y+25, r22	; 0x19
    194c:	7a 8f       	std	Y+26, r23	; 0x1a
    194e:	8b 8f       	std	Y+27, r24	; 0x1b
    1950:	9c 8f       	std	Y+28, r25	; 0x1c
    1952:	60 91 8c 01 	lds	r22, 0x018C
    1956:	70 91 8d 01 	lds	r23, 0x018D
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__floatunsisf>
    1962:	6d 8f       	std	Y+29, r22	; 0x1d
    1964:	7e 8f       	std	Y+30, r23	; 0x1e
    1966:	8f 8f       	std	Y+31, r24	; 0x1f
    1968:	98 a3       	std	Y+32, r25	; 0x20
    196a:	9e 01       	movw	r18, r28
    196c:	2f 5f       	subi	r18, 0xFF	; 255
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	eb 96       	adiw	r28, 0x3b	; 59
    1972:	3f af       	std	Y+63, r19	; 0x3f
    1974:	2e af       	std	Y+62, r18	; 0x3e
    1976:	eb 97       	sbiw	r28, 0x3b	; 59
    1978:	ce 01       	movw	r24, r28
    197a:	41 96       	adiw	r24, 0x11	; 17
    197c:	e3 96       	adiw	r28, 0x33	; 51
    197e:	9f af       	std	Y+63, r25	; 0x3f
    1980:	8e af       	std	Y+62, r24	; 0x3e
    1982:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1984:	ab 96       	adiw	r28, 0x2b	; 43
    1986:	1f ae       	std	Y+63, r1	; 0x3f
    1988:	1e ae       	std	Y+62, r1	; 0x3e
    198a:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    198c:	e9 96       	adiw	r28, 0x39	; 57
    198e:	1f ae       	std	Y+63, r1	; 0x3f
    1990:	1e ae       	std	Y+62, r1	; 0x3e
    1992:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1994:	ab 96       	adiw	r28, 0x2b	; 43
    1996:	ae ad       	ldd	r26, Y+62	; 0x3e
    1998:	bf ad       	ldd	r27, Y+63	; 0x3f
    199a:	ab 97       	sbiw	r28, 0x2b	; 43
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	e7 96       	adiw	r28, 0x37	; 55
    19a0:	bf af       	std	Y+63, r27	; 0x3f
    19a2:	ae af       	std	Y+62, r26	; 0x3e
    19a4:	e7 97       	sbiw	r28, 0x37	; 55
    19a6:	14 97       	sbiw	r26, 0x04	; 4
    19a8:	0c f0       	brlt	.+2      	; 0x19ac <localization+0x168>
    19aa:	58 c6       	rjmp	.+3248   	; 0x265c <localization+0xe18>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    19ac:	eb 96       	adiw	r28, 0x3b	; 59
    19ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    19b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b2:	eb 97       	sbiw	r28, 0x3b	; 59
    19b4:	81 90       	ld	r8, Z+
    19b6:	91 90       	ld	r9, Z+
    19b8:	a1 90       	ld	r10, Z+
    19ba:	b1 90       	ld	r11, Z+
    19bc:	e9 96       	adiw	r28, 0x39	; 57
    19be:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19c2:	e9 97       	sbiw	r28, 0x39	; 57
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	29 e3       	ldi	r18, 0x39	; 57
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	2c 0f       	add	r18, r28
    19ce:	3d 1f       	adc	r19, r29
    19d0:	28 0f       	add	r18, r24
    19d2:	39 1f       	adc	r19, r25
    19d4:	a3 96       	adiw	r28, 0x23	; 35
    19d6:	3f af       	std	Y+63, r19	; 0x3f
    19d8:	2e af       	std	Y+62, r18	; 0x3e
    19da:	a3 97       	sbiw	r28, 0x23	; 35
    19dc:	a5 e4       	ldi	r26, 0x45	; 69
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ac 0f       	add	r26, r28
    19e2:	bd 1f       	adc	r27, r29
    19e4:	a8 0f       	add	r26, r24
    19e6:	b9 1f       	adc	r27, r25
    19e8:	a7 96       	adiw	r28, 0x27	; 39
    19ea:	bf af       	std	Y+63, r27	; 0x3f
    19ec:	ae af       	std	Y+62, r26	; 0x3e
    19ee:	a7 97       	sbiw	r28, 0x27	; 39
    19f0:	e9 96       	adiw	r28, 0x39	; 57
    19f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    19f6:	e9 97       	sbiw	r28, 0x39	; 57
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0f 2e       	mov	r0, r31
    1a02:	f1 e2       	ldi	r31, 0x21	; 33
    1a04:	6f 2e       	mov	r6, r31
    1a06:	71 2c       	mov	r7, r1
    1a08:	f0 2d       	mov	r31, r0
    1a0a:	6c 0e       	add	r6, r28
    1a0c:	7d 1e       	adc	r7, r29
    1a0e:	68 0e       	add	r6, r24
    1a10:	79 1e       	adc	r7, r25
    1a12:	e3 96       	adiw	r28, 0x33	; 51
    1a14:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a16:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a18:	e3 97       	sbiw	r28, 0x33	; 51
    1a1a:	2c 5f       	subi	r18, 0xFC	; 252
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1a20:	e7 96       	adiw	r28, 0x37	; 55
    1a22:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a24:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a26:	e7 97       	sbiw	r28, 0x37	; 55
    1a28:	e1 96       	adiw	r28, 0x31	; 49
    1a2a:	8c ae       	std	Y+60, r8	; 0x3c
    1a2c:	9d ae       	std	Y+61, r9	; 0x3d
    1a2e:	ae ae       	std	Y+62, r10	; 0x3e
    1a30:	bf ae       	std	Y+63, r11	; 0x3f
    1a32:	e1 97       	sbiw	r28, 0x31	; 49
    1a34:	59 01       	movw	r10, r18
    1a36:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 ec       	ldi	r19, 0xC0	; 192
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	54 e4       	ldi	r21, 0x44	; 68
    1a40:	e1 96       	adiw	r28, 0x31	; 49
    1a42:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a44:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a46:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a48:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a4a:	e1 97       	sbiw	r28, 0x31	; 49
    1a4c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <localization+0x212>
    1a54:	70 c0       	rjmp	.+224    	; 0x1b36 <localization+0x2f2>
    1a56:	e3 96       	adiw	r28, 0x33	; 51
    1a58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a5c:	e3 97       	sbiw	r28, 0x33	; 51
    1a5e:	cd 90       	ld	r12, X+
    1a60:	dd 90       	ld	r13, X+
    1a62:	ed 90       	ld	r14, X+
    1a64:	fc 90       	ld	r15, X
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 ec       	ldi	r19, 0xC0	; 192
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	c7 01       	movw	r24, r14
    1a70:	b6 01       	movw	r22, r12
    1a72:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <localization+0x238>
    1a7a:	5d c0       	rjmp	.+186    	; 0x1b36 <localization+0x2f2>
    1a7c:	f1 01       	movw	r30, r2
    1a7e:	40 80       	ld	r4, Z
    1a80:	51 80       	ldd	r5, Z+1	; 0x01
    1a82:	62 80       	ldd	r6, Z+2	; 0x02
    1a84:	73 80       	ldd	r7, Z+3	; 0x03
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 ec       	ldi	r19, 0xC0	; 192
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	c3 01       	movw	r24, r6
    1a90:	b2 01       	movw	r22, r4
    1a92:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <localization+0x258>
    1a9a:	4d c0       	rjmp	.+154    	; 0x1b36 <localization+0x2f2>
    1a9c:	d5 01       	movw	r26, r10
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	9d 91       	ld	r25, X+
    1aa2:	0d 90       	ld	r0, X+
    1aa4:	bc 91       	ld	r27, X
    1aa6:	a0 2d       	mov	r26, r0
    1aa8:	c1 58       	subi	r28, 0x81	; 129
    1aaa:	df 4f       	sbci	r29, 0xFF	; 255
    1aac:	88 83       	st	Y, r24
    1aae:	99 83       	std	Y+1, r25	; 0x01
    1ab0:	aa 83       	std	Y+2, r26	; 0x02
    1ab2:	bb 83       	std	Y+3, r27	; 0x03
    1ab4:	cf 57       	subi	r28, 0x7F	; 127
    1ab6:	d0 40       	sbci	r29, 0x00	; 0
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 ec       	ldi	r19, 0xC0	; 192
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	a9 f1       	breq	.+106    	; 0x1b36 <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    1acc:	a3 01       	movw	r20, r6
    1ace:	92 01       	movw	r18, r4
    1ad0:	e1 96       	adiw	r28, 0x31	; 49
    1ad2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ad4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ad6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ad8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ada:	e1 97       	sbiw	r28, 0x31	; 49
    1adc:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    1ae0:	2b 01       	movw	r4, r22
    1ae2:	3c 01       	movw	r6, r24
    1ae4:	c1 58       	subi	r28, 0x81	; 129
    1ae6:	df 4f       	sbci	r29, 0xFF	; 255
    1ae8:	28 81       	ld	r18, Y
    1aea:	39 81       	ldd	r19, Y+1	; 0x01
    1aec:	4a 81       	ldd	r20, Y+2	; 0x02
    1aee:	5b 81       	ldd	r21, Y+3	; 0x03
    1af0:	cf 57       	subi	r28, 0x7F	; 127
    1af2:	d0 40       	sbci	r29, 0x00	; 0
    1af4:	c7 01       	movw	r24, r14
    1af6:	b6 01       	movw	r22, r12
    1af8:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    1afc:	6b 01       	movw	r12, r22
    1afe:	7c 01       	movw	r14, r24
    1b00:	a3 01       	movw	r20, r6
    1b02:	92 01       	movw	r18, r4
    1b04:	c3 01       	movw	r24, r6
    1b06:	b2 01       	movw	r22, r4
    1b08:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1b0c:	2b 01       	movw	r4, r22
    1b0e:	3c 01       	movw	r6, r24
    1b10:	a7 01       	movw	r20, r14
    1b12:	96 01       	movw	r18, r12
    1b14:	c7 01       	movw	r24, r14
    1b16:	b6 01       	movw	r22, r12
    1b18:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1b1c:	9b 01       	movw	r18, r22
    1b1e:	ac 01       	movw	r20, r24
    1b20:	c3 01       	movw	r24, r6
    1b22:	b2 01       	movw	r22, r4
    1b24:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    1b28:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <sqrt>
    1b2c:	f4 01       	movw	r30, r8
    1b2e:	60 83       	st	Z, r22
    1b30:	71 83       	std	Z+1, r23	; 0x01
    1b32:	82 83       	std	Z+2, r24	; 0x02
    1b34:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1b36:	a3 96       	adiw	r28, 0x23	; 35
    1b38:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b3a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b3c:	a3 97       	sbiw	r28, 0x23	; 35
    1b3e:	ab 96       	adiw	r28, 0x2b	; 43
    1b40:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b42:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b44:	ab 97       	sbiw	r28, 0x2b	; 43
    1b46:	ed 93       	st	X+, r30
    1b48:	fd 93       	st	X+, r31
    1b4a:	a3 96       	adiw	r28, 0x23	; 35
    1b4c:	bf af       	std	Y+63, r27	; 0x3f
    1b4e:	ae af       	std	Y+62, r26	; 0x3e
    1b50:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1b52:	a7 96       	adiw	r28, 0x27	; 39
    1b54:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b56:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b58:	a7 97       	sbiw	r28, 0x27	; 39
    1b5a:	0d 93       	st	X+, r16
    1b5c:	1d 93       	st	X+, r17
    1b5e:	a7 96       	adiw	r28, 0x27	; 39
    1b60:	bf af       	std	Y+63, r27	; 0x3f
    1b62:	ae af       	std	Y+62, r26	; 0x3e
    1b64:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1b66:	0f 5f       	subi	r16, 0xFF	; 255
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	b4 e0       	ldi	r27, 0x04	; 4
    1b6c:	2b 0e       	add	r2, r27
    1b6e:	31 1c       	adc	r3, r1
    1b70:	e4 e0       	ldi	r30, 0x04	; 4
    1b72:	ae 0e       	add	r10, r30
    1b74:	b1 1c       	adc	r11, r1
    1b76:	f4 e0       	ldi	r31, 0x04	; 4
    1b78:	8f 0e       	add	r8, r31
    1b7a:	91 1c       	adc	r9, r1
    1b7c:	04 30       	cpi	r16, 0x04	; 4
    1b7e:	11 05       	cpc	r17, r1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <localization+0x340>
    1b82:	5a cf       	rjmp	.-332    	; 0x1a38 <localization+0x1f4>
    1b84:	e9 96       	adiw	r28, 0x39	; 57
    1b86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b8a:	e9 97       	sbiw	r28, 0x39	; 57
    1b8c:	e7 96       	adiw	r28, 0x37	; 55
    1b8e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b90:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b92:	e7 97       	sbiw	r28, 0x37	; 55
    1b94:	82 1b       	sub	r24, r18
    1b96:	93 0b       	sbc	r25, r19
    1b98:	dc 01       	movw	r26, r24
    1b9a:	14 96       	adiw	r26, 0x04	; 4
    1b9c:	e9 96       	adiw	r28, 0x39	; 57
    1b9e:	bf af       	std	Y+63, r27	; 0x3f
    1ba0:	ae af       	std	Y+62, r26	; 0x3e
    1ba2:	e9 97       	sbiw	r28, 0x39	; 57
    1ba4:	eb 96       	adiw	r28, 0x3b	; 59
    1ba6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ba8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1baa:	eb 97       	sbiw	r28, 0x3b	; 59
    1bac:	34 96       	adiw	r30, 0x04	; 4
    1bae:	eb 96       	adiw	r28, 0x3b	; 59
    1bb0:	ff af       	std	Y+63, r31	; 0x3f
    1bb2:	ee af       	std	Y+62, r30	; 0x3e
    1bb4:	eb 97       	sbiw	r28, 0x3b	; 59
    1bb6:	e3 96       	adiw	r28, 0x33	; 51
    1bb8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1bba:	3f ad       	ldd	r19, Y+63	; 0x3f
    1bbc:	e3 97       	sbiw	r28, 0x33	; 51
    1bbe:	2c 5f       	subi	r18, 0xFC	; 252
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	e3 96       	adiw	r28, 0x33	; 51
    1bc4:	3f af       	std	Y+63, r19	; 0x3f
    1bc6:	2e af       	std	Y+62, r18	; 0x3e
    1bc8:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1bca:	e7 96       	adiw	r28, 0x37	; 55
    1bcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bce:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bd0:	e7 97       	sbiw	r28, 0x37	; 55
    1bd2:	03 97       	sbiw	r24, 0x03	; 3
    1bd4:	49 f0       	breq	.+18     	; 0x1be8 <localization+0x3a4>
    1bd6:	e7 96       	adiw	r28, 0x37	; 55
    1bd8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bda:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bdc:	e7 97       	sbiw	r28, 0x37	; 55
    1bde:	ab 96       	adiw	r28, 0x2b	; 43
    1be0:	bf af       	std	Y+63, r27	; 0x3f
    1be2:	ae af       	std	Y+62, r26	; 0x3e
    1be4:	ab 97       	sbiw	r28, 0x2b	; 43
    1be6:	d6 ce       	rjmp	.-596    	; 0x1994 <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1be8:	e9 96       	adiw	r28, 0x39	; 57
    1bea:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bec:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bee:	e9 97       	sbiw	r28, 0x39	; 57
    1bf0:	1e 16       	cp	r1, r30
    1bf2:	1f 06       	cpc	r1, r31
    1bf4:	84 f5       	brge	.+96     	; 0x1c56 <localization+0x412>
    1bf6:	6e 01       	movw	r12, r28
    1bf8:	f1 e2       	ldi	r31, 0x21	; 33
    1bfa:	cf 0e       	add	r12, r31
    1bfc:	d1 1c       	adc	r13, r1
    1bfe:	21 2c       	mov	r2, r1
    1c00:	31 2c       	mov	r3, r1
    1c02:	00 e0       	ldi	r16, 0x00	; 0
    1c04:	10 e0       	ldi	r17, 0x00	; 0
    1c06:	e1 2c       	mov	r14, r1
    1c08:	f1 2c       	mov	r15, r1
    1c0a:	e9 96       	adiw	r28, 0x39	; 57
    1c0c:	ae ac       	ldd	r10, Y+62	; 0x3e
    1c0e:	bf ac       	ldd	r11, Y+63	; 0x3f
    1c10:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    1c12:	d6 01       	movw	r26, r12
    1c14:	4d 90       	ld	r4, X+
    1c16:	5d 90       	ld	r5, X+
    1c18:	6d 90       	ld	r6, X+
    1c1a:	7d 90       	ld	r7, X+
    1c1c:	6d 01       	movw	r12, r26
    1c1e:	b8 01       	movw	r22, r16
    1c20:	88 27       	eor	r24, r24
    1c22:	77 fd       	sbrc	r23, 7
    1c24:	80 95       	com	r24
    1c26:	98 2f       	mov	r25, r24
    1c28:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
    1c2c:	9b 01       	movw	r18, r22
    1c2e:	ac 01       	movw	r20, r24
    1c30:	c3 01       	movw	r24, r6
    1c32:	b2 01       	movw	r22, r4
    1c34:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__gesf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	34 f4       	brge	.+12     	; 0x1c48 <localization+0x404>
			indmax = i;
			dmax = d[i];
    1c3c:	c3 01       	movw	r24, r6
    1c3e:	b2 01       	movw	r22, r4
    1c40:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1c44:	8b 01       	movw	r16, r22
    1c46:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1c48:	bf ef       	ldi	r27, 0xFF	; 255
    1c4a:	eb 1a       	sub	r14, r27
    1c4c:	fb 0a       	sbc	r15, r27
    1c4e:	ea 14       	cp	r14, r10
    1c50:	fb 04       	cpc	r15, r11
    1c52:	f9 f6       	brne	.-66     	; 0x1c12 <localization+0x3ce>
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <localization+0x41a>
    1c56:	21 2c       	mov	r2, r1
    1c58:	31 2c       	mov	r3, r1
    1c5a:	00 e0       	ldi	r16, 0x00	; 0
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1c5e:	8a e9       	ldi	r24, 0x9A	; 154
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(dmax);
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1c6c:	88 e9       	ldi	r24, 0x98	; 152
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1c74:	e9 96       	adiw	r28, 0x39	; 57
    1c76:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c78:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c7a:	e9 97       	sbiw	r28, 0x39	; 57
    1c7c:	1e 16       	cp	r1, r30
    1c7e:	1f 06       	cpc	r1, r31
    1c80:	dc f5       	brge	.+118    	; 0x1cf8 <localization+0x4b4>
    1c82:	6e 01       	movw	r12, r28
    1c84:	f1 e2       	ldi	r31, 0x21	; 33
    1c86:	cf 0e       	add	r12, r31
    1c88:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1c8a:	a3 96       	adiw	r28, 0x23	; 35
    1c8c:	1f ae       	std	Y+63, r1	; 0x3f
    1c8e:	1e ae       	std	Y+62, r1	; 0x3e
    1c90:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    1c92:	0f 2e       	mov	r0, r31
    1c94:	f0 e1       	ldi	r31, 0x10	; 16
    1c96:	af 2e       	mov	r10, r31
    1c98:	f7 e2       	ldi	r31, 0x27	; 39
    1c9a:	bf 2e       	mov	r11, r31
    1c9c:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    1c9e:	e1 2c       	mov	r14, r1
    1ca0:	f1 2c       	mov	r15, r1
    1ca2:	48 01       	movw	r8, r16
    1ca4:	e9 96       	adiw	r28, 0x39	; 57
    1ca6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1ca8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1caa:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    1cac:	d6 01       	movw	r26, r12
    1cae:	4d 90       	ld	r4, X+
    1cb0:	5d 90       	ld	r5, X+
    1cb2:	6d 90       	ld	r6, X+
    1cb4:	7d 90       	ld	r7, X+
    1cb6:	6d 01       	movw	r12, r26
    1cb8:	b5 01       	movw	r22, r10
    1cba:	88 27       	eor	r24, r24
    1cbc:	77 fd       	sbrc	r23, 7
    1cbe:	80 95       	com	r24
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
    1cc6:	9b 01       	movw	r18, r22
    1cc8:	ac 01       	movw	r20, r24
    1cca:	c3 01       	movw	r24, r6
    1ccc:	b2 01       	movw	r22, r4
    1cce:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	4c f4       	brge	.+18     	; 0x1ce8 <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    1cd6:	c3 01       	movw	r24, r6
    1cd8:	b2 01       	movw	r22, r4
    1cda:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1cde:	5b 01       	movw	r10, r22
    1ce0:	a3 96       	adiw	r28, 0x23	; 35
    1ce2:	ff ae       	std	Y+63, r15	; 0x3f
    1ce4:	ee ae       	std	Y+62, r14	; 0x3e
    1ce6:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1ce8:	bf ef       	ldi	r27, 0xFF	; 255
    1cea:	eb 1a       	sub	r14, r27
    1cec:	fb 0a       	sbc	r15, r27
    1cee:	e0 16       	cp	r14, r16
    1cf0:	f1 06       	cpc	r15, r17
    1cf2:	e1 f6       	brne	.-72     	; 0x1cac <localization+0x468>
    1cf4:	84 01       	movw	r16, r8
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1cf8:	a3 96       	adiw	r28, 0x23	; 35
    1cfa:	1f ae       	std	Y+63, r1	; 0x3f
    1cfc:	1e ae       	std	Y+62, r1	; 0x3e
    1cfe:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1d00:	80 90 10 01 	lds	r8, 0x0110
    1d04:	90 90 11 01 	lds	r9, 0x0111
    1d08:	a0 90 12 01 	lds	r10, 0x0112
    1d0c:	b0 90 13 01 	lds	r11, 0x0113
    1d10:	b8 01       	movw	r22, r16
    1d12:	88 27       	eor	r24, r24
    1d14:	77 fd       	sbrc	r23, 7
    1d16:	80 95       	com	r24
    1d18:	98 2f       	mov	r25, r24
    1d1a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
    1d1e:	a5 01       	movw	r20, r10
    1d20:	94 01       	movw	r18, r8
    1d22:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1d26:	2b 01       	movw	r4, r22
    1d28:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    1d2a:	c0 90 14 01 	lds	r12, 0x0114
    1d2e:	d0 90 15 01 	lds	r13, 0x0115
    1d32:	e0 90 16 01 	lds	r14, 0x0116
    1d36:	f0 90 17 01 	lds	r15, 0x0117
    1d3a:	e4 e0       	ldi	r30, 0x04	; 4
    1d3c:	f1 e0       	ldi	r31, 0x01	; 1
    1d3e:	ab 96       	adiw	r28, 0x2b	; 43
    1d40:	ff af       	std	Y+63, r31	; 0x3f
    1d42:	ee af       	std	Y+62, r30	; 0x3e
    1d44:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1d46:	a7 96       	adiw	r28, 0x27	; 39
    1d48:	1f ae       	std	Y+63, r1	; 0x3f
    1d4a:	1e ae       	std	Y+62, r1	; 0x3e
    1d4c:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    1d4e:	01 e0       	ldi	r16, 0x01	; 1
    1d50:	10 e0       	ldi	r17, 0x00	; 0
    1d52:	af 96       	adiw	r28, 0x2f	; 47
    1d54:	3f ae       	std	Y+63, r3	; 0x3f
    1d56:	2e ae       	std	Y+62, r2	; 0x3e
    1d58:	af 97       	sbiw	r28, 0x2f	; 47
    1d5a:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    1d5c:	d1 01       	movw	r26, r2
    1d5e:	2d 91       	ld	r18, X+
    1d60:	3d 91       	ld	r19, X+
    1d62:	4d 91       	ld	r20, X+
    1d64:	5d 91       	ld	r21, X+
    1d66:	1d 01       	movw	r2, r26
    1d68:	c3 01       	movw	r24, r6
    1d6a:	b2 01       	movw	r22, r4
    1d6c:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    1d70:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    1d74:	9b 01       	movw	r18, r22
    1d76:	77 23       	and	r23, r23
    1d78:	24 f4       	brge	.+8      	; 0x1d82 <localization+0x53e>
    1d7a:	22 27       	eor	r18, r18
    1d7c:	33 27       	eor	r19, r19
    1d7e:	26 1b       	sub	r18, r22
    1d80:	37 0b       	sbc	r19, r23
    1d82:	b9 01       	movw	r22, r18
    1d84:	88 27       	eor	r24, r24
    1d86:	77 fd       	sbrc	r23, 7
    1d88:	80 95       	com	r24
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__floatsisf>
    1d90:	a7 01       	movw	r20, r14
    1d92:	96 01       	movw	r18, r12
    1d94:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	24 f4       	brge	.+8      	; 0x1da4 <localization+0x560>
    1d9c:	a7 96       	adiw	r28, 0x27	; 39
    1d9e:	1f af       	std	Y+63, r17	; 0x3f
    1da0:	0e af       	std	Y+62, r16	; 0x3e
    1da2:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1da4:	0f 5f       	subi	r16, 0xFF	; 255
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	04 30       	cpi	r16, 0x04	; 4
    1daa:	11 05       	cpc	r17, r1
    1dac:	b9 f6       	brne	.-82     	; 0x1d5c <localization+0x518>
    1dae:	af 96       	adiw	r28, 0x2f	; 47
    1db0:	2e ac       	ldd	r2, Y+62	; 0x3e
    1db2:	3f ac       	ldd	r3, Y+63	; 0x3f
    1db4:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    1db6:	65 96       	adiw	r28, 0x15	; 21
    1db8:	1c ae       	std	Y+60, r1	; 0x3c
    1dba:	1d ae       	std	Y+61, r1	; 0x3d
    1dbc:	1e ae       	std	Y+62, r1	; 0x3e
    1dbe:	1f ae       	std	Y+63, r1	; 0x3f
    1dc0:	65 97       	sbiw	r28, 0x15	; 21
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e8       	ldi	r26, 0x80	; 128
    1dc8:	bf e3       	ldi	r27, 0x3F	; 63
    1dca:	69 96       	adiw	r28, 0x19	; 25
    1dcc:	8c af       	std	Y+60, r24	; 0x3c
    1dce:	9d af       	std	Y+61, r25	; 0x3d
    1dd0:	ae af       	std	Y+62, r26	; 0x3e
    1dd2:	bf af       	std	Y+63, r27	; 0x3f
    1dd4:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1dd6:	a7 96       	adiw	r28, 0x27	; 39
    1dd8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dda:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ddc:	a7 97       	sbiw	r28, 0x27	; 39
    1dde:	e2 30       	cpi	r30, 0x02	; 2
    1de0:	f1 05       	cpc	r31, r1
    1de2:	19 f0       	breq	.+6      	; 0x1dea <localization+0x5a6>
    1de4:	33 97       	sbiw	r30, 0x03	; 3
    1de6:	51 f1       	breq	.+84     	; 0x1e3c <localization+0x5f8>
    1de8:	5a c0       	rjmp	.+180    	; 0x1e9e <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1dea:	a5 01       	movw	r20, r10
    1dec:	94 01       	movw	r18, r8
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	88 e6       	ldi	r24, 0x68	; 104
    1df4:	91 e4       	ldi	r25, 0x41	; 65
    1df6:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__divsf3>
    1dfa:	e1 96       	adiw	r28, 0x31	; 49
    1dfc:	6c af       	std	Y+60, r22	; 0x3c
    1dfe:	7d af       	std	Y+61, r23	; 0x3d
    1e00:	8e af       	std	Y+62, r24	; 0x3e
    1e02:	9f af       	std	Y+63, r25	; 0x3f
    1e04:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    1e06:	84 e9       	ldi	r24, 0x94	; 148
    1e08:	97 e8       	ldi	r25, 0x87	; 135
    1e0a:	a5 ee       	ldi	r26, 0xE5	; 229
    1e0c:	be e3       	ldi	r27, 0x3E	; 62
    1e0e:	65 96       	adiw	r28, 0x15	; 21
    1e10:	8c af       	std	Y+60, r24	; 0x3c
    1e12:	9d af       	std	Y+61, r25	; 0x3d
    1e14:	ae af       	std	Y+62, r26	; 0x3e
    1e16:	bf af       	std	Y+63, r27	; 0x3f
    1e18:	65 97       	sbiw	r28, 0x15	; 21
    1e1a:	81 ea       	ldi	r24, 0xA1	; 161
    1e1c:	96 ed       	ldi	r25, 0xD6	; 214
    1e1e:	a4 e6       	ldi	r26, 0x64	; 100
    1e20:	bf eb       	ldi	r27, 0xBF	; 191
    1e22:	69 96       	adiw	r28, 0x19	; 25
    1e24:	8c af       	std	Y+60, r24	; 0x3c
    1e26:	9d af       	std	Y+61, r25	; 0x3d
    1e28:	ae af       	std	Y+62, r26	; 0x3e
    1e2a:	bf af       	std	Y+63, r27	; 0x3f
    1e2c:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1e2e:	e5 96       	adiw	r28, 0x35	; 53
    1e30:	1c ae       	std	Y+60, r1	; 0x3c
    1e32:	1d ae       	std	Y+61, r1	; 0x3d
    1e34:	1e ae       	std	Y+62, r1	; 0x3e
    1e36:	1f ae       	std	Y+63, r1	; 0x3f
    1e38:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1e3a:	45 c0       	rjmp	.+138    	; 0x1ec6 <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1e3c:	a5 01       	movw	r20, r10
    1e3e:	94 01       	movw	r18, r8
    1e40:	61 ee       	ldi	r22, 0xE1	; 225
    1e42:	7a e7       	ldi	r23, 0x7A	; 122
    1e44:	8a e3       	ldi	r24, 0x3A	; 58
    1e46:	91 e4       	ldi	r25, 0x41	; 65
    1e48:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__divsf3>
    1e4c:	e5 96       	adiw	r28, 0x35	; 53
    1e4e:	6c af       	std	Y+60, r22	; 0x3c
    1e50:	7d af       	std	Y+61, r23	; 0x3d
    1e52:	8e af       	std	Y+62, r24	; 0x3e
    1e54:	9f af       	std	Y+63, r25	; 0x3f
    1e56:	e5 97       	sbiw	r28, 0x35	; 53
    1e58:	a5 01       	movw	r20, r10
    1e5a:	94 01       	movw	r18, r8
    1e5c:	63 e2       	ldi	r22, 0x23	; 35
    1e5e:	7b ed       	ldi	r23, 0xDB	; 219
    1e60:	8b e0       	ldi	r24, 0x0B	; 11
    1e62:	91 ec       	ldi	r25, 0xC1	; 193
    1e64:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__divsf3>
    1e68:	e1 96       	adiw	r28, 0x31	; 49
    1e6a:	6c af       	std	Y+60, r22	; 0x3c
    1e6c:	7d af       	std	Y+61, r23	; 0x3d
    1e6e:	8e af       	std	Y+62, r24	; 0x3e
    1e70:	9f af       	std	Y+63, r25	; 0x3f
    1e72:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1e74:	86 e6       	ldi	r24, 0x66	; 102
    1e76:	96 e6       	ldi	r25, 0x66	; 102
    1e78:	a6 e7       	ldi	r26, 0x76	; 118
    1e7a:	bf eb       	ldi	r27, 0xBF	; 191
    1e7c:	65 96       	adiw	r28, 0x15	; 21
    1e7e:	8c af       	std	Y+60, r24	; 0x3c
    1e80:	9d af       	std	Y+61, r25	; 0x3d
    1e82:	ae af       	std	Y+62, r26	; 0x3e
    1e84:	bf af       	std	Y+63, r27	; 0x3f
    1e86:	65 97       	sbiw	r28, 0x15	; 21
    1e88:	8f e9       	ldi	r24, 0x9F	; 159
    1e8a:	9d ec       	ldi	r25, 0xCD	; 205
    1e8c:	aa e8       	ldi	r26, 0x8A	; 138
    1e8e:	be e3       	ldi	r27, 0x3E	; 62
    1e90:	69 96       	adiw	r28, 0x19	; 25
    1e92:	8c af       	std	Y+60, r24	; 0x3c
    1e94:	9d af       	std	Y+61, r25	; 0x3d
    1e96:	ae af       	std	Y+62, r26	; 0x3e
    1e98:	bf af       	std	Y+63, r27	; 0x3f
    1e9a:	69 97       	sbiw	r28, 0x19	; 25
			break;
    1e9c:	14 c0       	rjmp	.+40     	; 0x1ec6 <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    1e9e:	a7 96       	adiw	r28, 0x27	; 39
    1ea0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ea2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ea4:	a7 97       	sbiw	r28, 0x27	; 39
    1ea6:	12 16       	cp	r1, r18
    1ea8:	13 06       	cpc	r1, r19
    1eaa:	0c f0       	brlt	.+2      	; 0x1eae <localization+0x66a>
    1eac:	46 c3       	rjmp	.+1676   	; 0x253a <localization+0xcf6>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1eae:	e5 96       	adiw	r28, 0x35	; 53
    1eb0:	1c ae       	std	Y+60, r1	; 0x3c
    1eb2:	1d ae       	std	Y+61, r1	; 0x3d
    1eb4:	1e ae       	std	Y+62, r1	; 0x3e
    1eb6:	1f ae       	std	Y+63, r1	; 0x3f
    1eb8:	e5 97       	sbiw	r28, 0x35	; 53
    1eba:	e1 96       	adiw	r28, 0x31	; 49
    1ebc:	1c ae       	std	Y+60, r1	; 0x3c
    1ebe:	1d ae       	std	Y+61, r1	; 0x3d
    1ec0:	1e ae       	std	Y+62, r1	; 0x3e
    1ec2:	1f ae       	std	Y+63, r1	; 0x3f
    1ec4:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    1ec6:	f1 01       	movw	r30, r2
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	8c 0f       	add	r24, r28
    1ed2:	9d 1f       	adc	r25, r29
    1ed4:	e8 0f       	add	r30, r24
    1ed6:	f9 1f       	adc	r31, r25
    1ed8:	00 ad       	ldd	r16, Z+56	; 0x38
    1eda:	11 ad       	ldd	r17, Z+57	; 0x39
    1edc:	a3 96       	adiw	r28, 0x23	; 35
    1ede:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ee0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ee2:	a3 97       	sbiw	r28, 0x23	; 35
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	e8 0f       	add	r30, r24
    1eea:	f9 1f       	adc	r31, r25
    1eec:	80 ad       	ldd	r24, Z+56	; 0x38
    1eee:	91 ad       	ldd	r25, Z+57	; 0x39
    1ef0:	80 17       	cp	r24, r16
    1ef2:	91 07       	cpc	r25, r17
    1ef4:	89 f0       	breq	.+34     	; 0x1f18 <localization+0x6d4>
    1ef6:	a3 96       	adiw	r28, 0x23	; 35
    1ef8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1efa:	ff ad       	ldd	r31, Y+63	; 0x3f
    1efc:	a3 97       	sbiw	r28, 0x23	; 35
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	a5 e4       	ldi	r26, 0x45	; 69
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	ac 0f       	add	r26, r28
    1f08:	bd 1f       	adc	r27, r29
    1f0a:	ea 0f       	add	r30, r26
    1f0c:	fb 1f       	adc	r31, r27
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	08 17       	cp	r16, r24
    1f14:	19 07       	cpc	r17, r25
    1f16:	69 f4       	brne	.+26     	; 0x1f32 <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1f18:	d1 01       	movw	r26, r2
    1f1a:	aa 0f       	add	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	e5 e4       	ldi	r30, 0x45	; 69
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	ec 0f       	add	r30, r28
    1f24:	fd 1f       	adc	r31, r29
    1f26:	ae 0f       	add	r26, r30
    1f28:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1f2a:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    1f2c:	0d 91       	ld	r16, X+
    1f2e:	1c 91       	ld	r17, X
    1f30:	0c c0       	rjmp	.+24     	; 0x1f4a <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    1f32:	f1 01       	movw	r30, r2
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	25 e4       	ldi	r18, 0x45	; 69
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	2c 0f       	add	r18, r28
    1f3e:	3d 1f       	adc	r19, r29
    1f40:	e2 0f       	add	r30, r18
    1f42:	f3 1f       	adc	r31, r19
    1f44:	01 90       	ld	r0, Z+
    1f46:	f0 81       	ld	r31, Z
    1f48:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1f4a:	a7 96       	adiw	r28, 0x27	; 39
    1f4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f50:	a7 97       	sbiw	r28, 0x27	; 39
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <localization+0x714>
    1f56:	45 c0       	rjmp	.+138    	; 0x1fe2 <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    1f58:	6f 01       	movw	r12, r30
    1f5a:	cc 0c       	add	r12, r12
    1f5c:	dd 1c       	adc	r13, r13
    1f5e:	cc 0c       	add	r12, r12
    1f60:	dd 1c       	adc	r13, r13
    1f62:	a1 e0       	ldi	r26, 0x01	; 1
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	ac 0f       	add	r26, r28
    1f68:	bd 1f       	adc	r27, r29
    1f6a:	ca 0e       	add	r12, r26
    1f6c:	db 1e       	adc	r13, r27
    1f6e:	78 01       	movw	r14, r16
    1f70:	ee 0c       	add	r14, r14
    1f72:	ff 1c       	adc	r15, r15
    1f74:	ee 0c       	add	r14, r14
    1f76:	ff 1c       	adc	r15, r15
    1f78:	ea 0e       	add	r14, r26
    1f7a:	fb 1e       	adc	r15, r27
    1f7c:	f7 01       	movw	r30, r14
    1f7e:	20 81       	ld	r18, Z
    1f80:	31 81       	ldd	r19, Z+1	; 0x01
    1f82:	42 81       	ldd	r20, Z+2	; 0x02
    1f84:	53 81       	ldd	r21, Z+3	; 0x03
    1f86:	d6 01       	movw	r26, r12
    1f88:	6d 91       	ld	r22, X+
    1f8a:	7d 91       	ld	r23, X+
    1f8c:	8d 91       	ld	r24, X+
    1f8e:	9c 91       	ld	r25, X
    1f90:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1fa0:	ad 96       	adiw	r28, 0x2d	; 45
    1fa2:	6c af       	std	Y+60, r22	; 0x3c
    1fa4:	7d af       	std	Y+61, r23	; 0x3d
    1fa6:	8e af       	std	Y+62, r24	; 0x3e
    1fa8:	9f af       	std	Y+63, r25	; 0x3f
    1faa:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    1fac:	f7 01       	movw	r30, r14
    1fae:	20 89       	ldd	r18, Z+16	; 0x10
    1fb0:	31 89       	ldd	r19, Z+17	; 0x11
    1fb2:	42 89       	ldd	r20, Z+18	; 0x12
    1fb4:	53 89       	ldd	r21, Z+19	; 0x13
    1fb6:	d6 01       	movw	r26, r12
    1fb8:	50 96       	adiw	r26, 0x10	; 16
    1fba:	6d 91       	ld	r22, X+
    1fbc:	7d 91       	ld	r23, X+
    1fbe:	8d 91       	ld	r24, X+
    1fc0:	9c 91       	ld	r25, X
    1fc2:	53 97       	sbiw	r26, 0x13	; 19
    1fc4:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	5f e3       	ldi	r21, 0x3F	; 63
    1fd0:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    1fd4:	a9 96       	adiw	r28, 0x29	; 41
    1fd6:	6c af       	std	Y+60, r22	; 0x3c
    1fd8:	7d af       	std	Y+61, r23	; 0x3d
    1fda:	8e af       	std	Y+62, r24	; 0x3e
    1fdc:	9f af       	std	Y+63, r25	; 0x3f
    1fde:	a9 97       	sbiw	r28, 0x29	; 41
    1fe0:	1e c0       	rjmp	.+60     	; 0x201e <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	21 e0       	ldi	r18, 0x01	; 1
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	2c 0f       	add	r18, r28
    1ff0:	3d 1f       	adc	r19, r29
    1ff2:	e2 0f       	add	r30, r18
    1ff4:	f3 1f       	adc	r31, r19
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	a2 81       	ldd	r26, Z+2	; 0x02
    1ffc:	b3 81       	ldd	r27, Z+3	; 0x03
    1ffe:	ad 96       	adiw	r28, 0x2d	; 45
    2000:	8c af       	std	Y+60, r24	; 0x3c
    2002:	9d af       	std	Y+61, r25	; 0x3d
    2004:	ae af       	std	Y+62, r26	; 0x3e
    2006:	bf af       	std	Y+63, r27	; 0x3f
    2008:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    200a:	80 89       	ldd	r24, Z+16	; 0x10
    200c:	91 89       	ldd	r25, Z+17	; 0x11
    200e:	a2 89       	ldd	r26, Z+18	; 0x12
    2010:	b3 89       	ldd	r27, Z+19	; 0x13
    2012:	a9 96       	adiw	r28, 0x29	; 41
    2014:	8c af       	std	Y+60, r24	; 0x3c
    2016:	9d af       	std	Y+61, r25	; 0x3d
    2018:	ae af       	std	Y+62, r26	; 0x3e
    201a:	bf af       	std	Y+63, r27	; 0x3f
    201c:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    201e:	00 0f       	add	r16, r16
    2020:	11 1f       	adc	r17, r17
    2022:	00 0f       	add	r16, r16
    2024:	11 1f       	adc	r17, r17
    2026:	a1 e0       	ldi	r26, 0x01	; 1
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ac 0f       	add	r26, r28
    202c:	bd 1f       	adc	r27, r29
    202e:	0a 0f       	add	r16, r26
    2030:	1b 1f       	adc	r17, r27
    2032:	ad 96       	adiw	r28, 0x2d	; 45
    2034:	2c ad       	ldd	r18, Y+60	; 0x3c
    2036:	3d ad       	ldd	r19, Y+61	; 0x3d
    2038:	4e ad       	ldd	r20, Y+62	; 0x3e
    203a:	5f ad       	ldd	r21, Y+63	; 0x3f
    203c:	ad 97       	sbiw	r28, 0x2d	; 45
    203e:	f8 01       	movw	r30, r16
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    204c:	4b 01       	movw	r8, r22
    204e:	5c 01       	movw	r10, r24
    2050:	a9 96       	adiw	r28, 0x29	; 41
    2052:	2c ad       	ldd	r18, Y+60	; 0x3c
    2054:	3d ad       	ldd	r19, Y+61	; 0x3d
    2056:	4e ad       	ldd	r20, Y+62	; 0x3e
    2058:	5f ad       	ldd	r21, Y+63	; 0x3f
    205a:	a9 97       	sbiw	r28, 0x29	; 41
    205c:	d8 01       	movw	r26, r16
    205e:	50 96       	adiw	r26, 0x10	; 16
    2060:	6d 91       	ld	r22, X+
    2062:	7d 91       	ld	r23, X+
    2064:	8d 91       	ld	r24, X+
    2066:	9c 91       	ld	r25, X
    2068:	53 97       	sbiw	r26, 0x13	; 19
    206a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    206e:	6b 01       	movw	r12, r22
    2070:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    2072:	a5 01       	movw	r20, r10
    2074:	94 01       	movw	r18, r8
    2076:	c5 01       	movw	r24, r10
    2078:	b4 01       	movw	r22, r8
    207a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    207e:	2b 01       	movw	r4, r22
    2080:	3c 01       	movw	r6, r24
    2082:	a7 01       	movw	r20, r14
    2084:	96 01       	movw	r18, r12
    2086:	c7 01       	movw	r24, r14
    2088:	b6 01       	movw	r22, r12
    208a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	c3 01       	movw	r24, r6
    2094:	b2 01       	movw	r22, r4
    2096:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    209a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <sqrt>
    209e:	2b 01       	movw	r4, r22
    20a0:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    20a2:	9b 01       	movw	r18, r22
    20a4:	ac 01       	movw	r20, r24
    20a6:	c5 01       	movw	r24, r10
    20a8:	b4 01       	movw	r22, r8
    20aa:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__divsf3>
    20ae:	4b 01       	movw	r8, r22
    20b0:	5c 01       	movw	r10, r24
    20b2:	6d 96       	adiw	r28, 0x1d	; 29
    20b4:	6c af       	std	Y+60, r22	; 0x3c
    20b6:	7d af       	std	Y+61, r23	; 0x3d
    20b8:	8e af       	std	Y+62, r24	; 0x3e
    20ba:	9f af       	std	Y+63, r25	; 0x3f
    20bc:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    20be:	a3 01       	movw	r20, r6
    20c0:	92 01       	movw	r18, r4
    20c2:	c7 01       	movw	r24, r14
    20c4:	b6 01       	movw	r22, r12
    20c6:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__divsf3>
    20ca:	6b 01       	movw	r12, r22
    20cc:	7c 01       	movw	r14, r24
    20ce:	a1 96       	adiw	r28, 0x21	; 33
    20d0:	6c af       	std	Y+60, r22	; 0x3c
    20d2:	7d af       	std	Y+61, r23	; 0x3d
    20d4:	8e af       	std	Y+62, r24	; 0x3e
    20d6:	9f af       	std	Y+63, r25	; 0x3f
    20d8:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    20da:	65 96       	adiw	r28, 0x15	; 21
    20dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    20de:	3d ad       	ldd	r19, Y+61	; 0x3d
    20e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    20e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    20e4:	65 97       	sbiw	r28, 0x15	; 21
    20e6:	c5 01       	movw	r24, r10
    20e8:	b4 01       	movw	r22, r8
    20ea:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    20ee:	4b 01       	movw	r8, r22
    20f0:	5c 01       	movw	r10, r24
    20f2:	69 96       	adiw	r28, 0x19	; 25
    20f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    20f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    20f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    20fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    20fc:	69 97       	sbiw	r28, 0x19	; 25
    20fe:	c7 01       	movw	r24, r14
    2100:	b6 01       	movw	r22, r12
    2102:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    2106:	9b 01       	movw	r18, r22
    2108:	ac 01       	movw	r20, r24
    210a:	c5 01       	movw	r24, r10
    210c:	b4 01       	movw	r22, r8
    210e:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    2112:	2b 01       	movw	r4, r22
    2114:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    2116:	9b 01       	movw	r18, r22
    2118:	ac 01       	movw	r20, r24
    211a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    211e:	9b 01       	movw	r18, r22
    2120:	ac 01       	movw	r20, r24
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	80 e8       	ldi	r24, 0x80	; 128
    2128:	9f e3       	ldi	r25, 0x3F	; 63
    212a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    212e:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <sqrt>
    2132:	a5 96       	adiw	r28, 0x25	; 37
    2134:	6c af       	std	Y+60, r22	; 0x3c
    2136:	7d af       	std	Y+61, r23	; 0x3d
    2138:	8e af       	std	Y+62, r24	; 0x3e
    213a:	9f af       	std	Y+63, r25	; 0x3f
    213c:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    213e:	fe 01       	movw	r30, r28
    2140:	ef 5a       	subi	r30, 0xAF	; 175
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	7f 01       	movw	r14, r30
    2146:	8e 01       	movw	r16, r28
    2148:	07 5a       	subi	r16, 0xA7	; 167
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	9b 01       	movw	r18, r22
    214e:	ac 01       	movw	r20, r24
    2150:	c3 01       	movw	r24, r6
    2152:	b2 01       	movw	r22, r4
    2154:	0e 94 85 07 	call	0xf0a	; 0xf0a <find_sign>
    2158:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	91 05       	cpc	r25, r1
    215e:	09 f0       	breq	.+2      	; 0x2162 <localization+0x91e>
    2160:	a1 c0       	rjmp	.+322    	; 0x22a4 <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    2162:	0f 2e       	mov	r0, r31
    2164:	fe e1       	ldi	r31, 0x1E	; 30
    2166:	af 2e       	mov	r10, r31
    2168:	f1 e0       	ldi	r31, 0x01	; 1
    216a:	bf 2e       	mov	r11, r31
    216c:	f0 2d       	mov	r31, r0
    216e:	d5 01       	movw	r26, r10
    2170:	2d 91       	ld	r18, X+
    2172:	3d 91       	ld	r19, X+
    2174:	4d 91       	ld	r20, X+
    2176:	5c 91       	ld	r21, X
    2178:	ad 96       	adiw	r28, 0x2d	; 45
    217a:	6c ad       	ldd	r22, Y+60	; 0x3c
    217c:	7d ad       	ldd	r23, Y+61	; 0x3d
    217e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2180:	9f ad       	ldd	r25, Y+63	; 0x3f
    2182:	ad 97       	sbiw	r28, 0x2d	; 45
    2184:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    2188:	a3 01       	movw	r20, r6
    218a:	92 01       	movw	r18, r4
    218c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    2190:	9b 01       	movw	r18, r22
    2192:	ac 01       	movw	r20, r24
    2194:	e5 96       	adiw	r28, 0x35	; 53
    2196:	6c ad       	ldd	r22, Y+60	; 0x3c
    2198:	7d ad       	ldd	r23, Y+61	; 0x3d
    219a:	8e ad       	ldd	r24, Y+62	; 0x3e
    219c:	9f ad       	ldd	r25, Y+63	; 0x3f
    219e:	e5 97       	sbiw	r28, 0x35	; 53
    21a0:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    21a4:	6b 01       	movw	r12, r22
    21a6:	7c 01       	movw	r14, r24
    21a8:	02 e2       	ldi	r16, 0x22	; 34
    21aa:	11 e0       	ldi	r17, 0x01	; 1
    21ac:	f8 01       	movw	r30, r16
    21ae:	20 81       	ld	r18, Z
    21b0:	31 81       	ldd	r19, Z+1	; 0x01
    21b2:	42 81       	ldd	r20, Z+2	; 0x02
    21b4:	53 81       	ldd	r21, Z+3	; 0x03
    21b6:	a9 96       	adiw	r28, 0x29	; 41
    21b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    21ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    21bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    21be:	9f ad       	ldd	r25, Y+63	; 0x3f
    21c0:	a9 97       	sbiw	r28, 0x29	; 41
    21c2:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    21c6:	a5 96       	adiw	r28, 0x25	; 37
    21c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    21ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    21cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    21ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    21d0:	a5 97       	sbiw	r28, 0x25	; 37
    21d2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    21d6:	9b 01       	movw	r18, r22
    21d8:	ac 01       	movw	r20, r24
    21da:	c7 01       	movw	r24, r14
    21dc:	b6 01       	movw	r22, r12
    21de:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    21e2:	ed 96       	adiw	r28, 0x3d	; 61
    21e4:	ae ad       	ldd	r26, Y+62	; 0x3e
    21e6:	bf ad       	ldd	r27, Y+63	; 0x3f
    21e8:	ed 97       	sbiw	r28, 0x3d	; 61
    21ea:	6d 93       	st	X+, r22
    21ec:	7d 93       	st	X+, r23
    21ee:	8d 93       	st	X+, r24
    21f0:	9c 93       	st	X, r25
    21f2:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    21f4:	f8 01       	movw	r30, r16
    21f6:	20 81       	ld	r18, Z
    21f8:	31 81       	ldd	r19, Z+1	; 0x01
    21fa:	42 81       	ldd	r20, Z+2	; 0x02
    21fc:	53 81       	ldd	r21, Z+3	; 0x03
    21fe:	a9 96       	adiw	r28, 0x29	; 41
    2200:	6c ad       	ldd	r22, Y+60	; 0x3c
    2202:	7d ad       	ldd	r23, Y+61	; 0x3d
    2204:	8e ad       	ldd	r24, Y+62	; 0x3e
    2206:	9f ad       	ldd	r25, Y+63	; 0x3f
    2208:	a9 97       	sbiw	r28, 0x29	; 41
    220a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    220e:	a3 01       	movw	r20, r6
    2210:	92 01       	movw	r18, r4
    2212:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    2216:	9b 01       	movw	r18, r22
    2218:	ac 01       	movw	r20, r24
    221a:	e1 96       	adiw	r28, 0x31	; 49
    221c:	6c ad       	ldd	r22, Y+60	; 0x3c
    221e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2220:	8e ad       	ldd	r24, Y+62	; 0x3e
    2222:	9f ad       	ldd	r25, Y+63	; 0x3f
    2224:	e1 97       	sbiw	r28, 0x31	; 49
    2226:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    222a:	6b 01       	movw	r12, r22
    222c:	7c 01       	movw	r14, r24
    222e:	d5 01       	movw	r26, r10
    2230:	2d 91       	ld	r18, X+
    2232:	3d 91       	ld	r19, X+
    2234:	4d 91       	ld	r20, X+
    2236:	5c 91       	ld	r21, X
    2238:	ad 96       	adiw	r28, 0x2d	; 45
    223a:	6c ad       	ldd	r22, Y+60	; 0x3c
    223c:	7d ad       	ldd	r23, Y+61	; 0x3d
    223e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2240:	9f ad       	ldd	r25, Y+63	; 0x3f
    2242:	ad 97       	sbiw	r28, 0x2d	; 45
    2244:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    2248:	a5 96       	adiw	r28, 0x25	; 37
    224a:	2c ad       	ldd	r18, Y+60	; 0x3c
    224c:	3d ad       	ldd	r19, Y+61	; 0x3d
    224e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2250:	5f ad       	ldd	r21, Y+63	; 0x3f
    2252:	a5 97       	sbiw	r28, 0x25	; 37
    2254:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    2258:	9b 01       	movw	r18, r22
    225a:	ac 01       	movw	r20, r24
    225c:	c7 01       	movw	r24, r14
    225e:	b6 01       	movw	r22, r12
    2260:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    2264:	ed 96       	adiw	r28, 0x3d	; 61
    2266:	ee ad       	ldd	r30, Y+62	; 0x3e
    2268:	ff ad       	ldd	r31, Y+63	; 0x3f
    226a:	ed 97       	sbiw	r28, 0x3d	; 61
    226c:	64 83       	std	Z+4, r22	; 0x04
    226e:	75 83       	std	Z+5, r23	; 0x05
    2270:	86 83       	std	Z+6, r24	; 0x06
    2272:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    2274:	ef 96       	adiw	r28, 0x3f	; 63
    2276:	ae ad       	ldd	r26, Y+62	; 0x3e
    2278:	bf ad       	ldd	r27, Y+63	; 0x3f
    227a:	ef 97       	sbiw	r28, 0x3f	; 63
    227c:	4d 92       	st	X+, r4
    227e:	5d 92       	st	X+, r5
    2280:	6d 92       	st	X+, r6
    2282:	7c 92       	st	X, r7
    2284:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    2286:	a5 96       	adiw	r28, 0x25	; 37
    2288:	8c ad       	ldd	r24, Y+60	; 0x3c
    228a:	9d ad       	ldd	r25, Y+61	; 0x3d
    228c:	ae ad       	ldd	r26, Y+62	; 0x3e
    228e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2290:	a5 97       	sbiw	r28, 0x25	; 37
    2292:	ef 96       	adiw	r28, 0x3f	; 63
    2294:	ee ad       	ldd	r30, Y+62	; 0x3e
    2296:	ff ad       	ldd	r31, Y+63	; 0x3f
    2298:	ef 97       	sbiw	r28, 0x3f	; 63
    229a:	84 83       	std	Z+4, r24	; 0x04
    229c:	95 83       	std	Z+5, r25	; 0x05
    229e:	a6 83       	std	Z+6, r26	; 0x06
    22a0:	b7 83       	std	Z+7, r27	; 0x07
    22a2:	a1 c0       	rjmp	.+322    	; 0x23e6 <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    22a4:	0f 2e       	mov	r0, r31
    22a6:	fe e1       	ldi	r31, 0x1E	; 30
    22a8:	af 2e       	mov	r10, r31
    22aa:	f1 e0       	ldi	r31, 0x01	; 1
    22ac:	bf 2e       	mov	r11, r31
    22ae:	f0 2d       	mov	r31, r0
    22b0:	d5 01       	movw	r26, r10
    22b2:	2d 91       	ld	r18, X+
    22b4:	3d 91       	ld	r19, X+
    22b6:	4d 91       	ld	r20, X+
    22b8:	5c 91       	ld	r21, X
    22ba:	ad 96       	adiw	r28, 0x2d	; 45
    22bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    22be:	7d ad       	ldd	r23, Y+61	; 0x3d
    22c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    22c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    22c4:	ad 97       	sbiw	r28, 0x2d	; 45
    22c6:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    22ca:	a3 01       	movw	r20, r6
    22cc:	92 01       	movw	r18, r4
    22ce:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    22d2:	9b 01       	movw	r18, r22
    22d4:	ac 01       	movw	r20, r24
    22d6:	e5 96       	adiw	r28, 0x35	; 53
    22d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    22da:	7d ad       	ldd	r23, Y+61	; 0x3d
    22dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    22de:	9f ad       	ldd	r25, Y+63	; 0x3f
    22e0:	e5 97       	sbiw	r28, 0x35	; 53
    22e2:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    22e6:	6b 01       	movw	r12, r22
    22e8:	7c 01       	movw	r14, r24
    22ea:	02 e2       	ldi	r16, 0x22	; 34
    22ec:	11 e0       	ldi	r17, 0x01	; 1
    22ee:	f8 01       	movw	r30, r16
    22f0:	20 81       	ld	r18, Z
    22f2:	31 81       	ldd	r19, Z+1	; 0x01
    22f4:	42 81       	ldd	r20, Z+2	; 0x02
    22f6:	53 81       	ldd	r21, Z+3	; 0x03
    22f8:	a9 96       	adiw	r28, 0x29	; 41
    22fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    22fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    22fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2300:	9f ad       	ldd	r25, Y+63	; 0x3f
    2302:	a9 97       	sbiw	r28, 0x29	; 41
    2304:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    2308:	a5 96       	adiw	r28, 0x25	; 37
    230a:	2c ad       	ldd	r18, Y+60	; 0x3c
    230c:	3d ad       	ldd	r19, Y+61	; 0x3d
    230e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2310:	5f ad       	ldd	r21, Y+63	; 0x3f
    2312:	a5 97       	sbiw	r28, 0x25	; 37
    2314:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    2318:	9b 01       	movw	r18, r22
    231a:	ac 01       	movw	r20, r24
    231c:	c7 01       	movw	r24, r14
    231e:	b6 01       	movw	r22, r12
    2320:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    2324:	ed 96       	adiw	r28, 0x3d	; 61
    2326:	ae ad       	ldd	r26, Y+62	; 0x3e
    2328:	bf ad       	ldd	r27, Y+63	; 0x3f
    232a:	ed 97       	sbiw	r28, 0x3d	; 61
    232c:	6d 93       	st	X+, r22
    232e:	7d 93       	st	X+, r23
    2330:	8d 93       	st	X+, r24
    2332:	9c 93       	st	X, r25
    2334:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    2336:	f8 01       	movw	r30, r16
    2338:	20 81       	ld	r18, Z
    233a:	31 81       	ldd	r19, Z+1	; 0x01
    233c:	42 81       	ldd	r20, Z+2	; 0x02
    233e:	53 81       	ldd	r21, Z+3	; 0x03
    2340:	a9 96       	adiw	r28, 0x29	; 41
    2342:	6c ad       	ldd	r22, Y+60	; 0x3c
    2344:	7d ad       	ldd	r23, Y+61	; 0x3d
    2346:	8e ad       	ldd	r24, Y+62	; 0x3e
    2348:	9f ad       	ldd	r25, Y+63	; 0x3f
    234a:	a9 97       	sbiw	r28, 0x29	; 41
    234c:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    2350:	a3 01       	movw	r20, r6
    2352:	92 01       	movw	r18, r4
    2354:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    2358:	9b 01       	movw	r18, r22
    235a:	ac 01       	movw	r20, r24
    235c:	e1 96       	adiw	r28, 0x31	; 49
    235e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2360:	7d ad       	ldd	r23, Y+61	; 0x3d
    2362:	8e ad       	ldd	r24, Y+62	; 0x3e
    2364:	9f ad       	ldd	r25, Y+63	; 0x3f
    2366:	e1 97       	sbiw	r28, 0x31	; 49
    2368:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    236c:	6b 01       	movw	r12, r22
    236e:	7c 01       	movw	r14, r24
    2370:	d5 01       	movw	r26, r10
    2372:	2d 91       	ld	r18, X+
    2374:	3d 91       	ld	r19, X+
    2376:	4d 91       	ld	r20, X+
    2378:	5c 91       	ld	r21, X
    237a:	ad 96       	adiw	r28, 0x2d	; 45
    237c:	6c ad       	ldd	r22, Y+60	; 0x3c
    237e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2380:	8e ad       	ldd	r24, Y+62	; 0x3e
    2382:	9f ad       	ldd	r25, Y+63	; 0x3f
    2384:	ad 97       	sbiw	r28, 0x2d	; 45
    2386:	0e 94 b7 1c 	call	0x396e	; 0x396e <__subsf3>
    238a:	a5 96       	adiw	r28, 0x25	; 37
    238c:	2c ad       	ldd	r18, Y+60	; 0x3c
    238e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2390:	4e ad       	ldd	r20, Y+62	; 0x3e
    2392:	5f ad       	ldd	r21, Y+63	; 0x3f
    2394:	a5 97       	sbiw	r28, 0x25	; 37
    2396:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    239e:	c7 01       	movw	r24, r14
    23a0:	b6 01       	movw	r22, r12
    23a2:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__addsf3>
    23a6:	ed 96       	adiw	r28, 0x3d	; 61
    23a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    23aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    23ac:	ed 97       	sbiw	r28, 0x3d	; 61
    23ae:	64 83       	std	Z+4, r22	; 0x04
    23b0:	75 83       	std	Z+5, r23	; 0x05
    23b2:	86 83       	std	Z+6, r24	; 0x06
    23b4:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    23b6:	ef 96       	adiw	r28, 0x3f	; 63
    23b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    23ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    23bc:	ef 97       	sbiw	r28, 0x3f	; 63
    23be:	4d 92       	st	X+, r4
    23c0:	5d 92       	st	X+, r5
    23c2:	6d 92       	st	X+, r6
    23c4:	7c 92       	st	X, r7
    23c6:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    23c8:	a5 96       	adiw	r28, 0x25	; 37
    23ca:	8c ad       	ldd	r24, Y+60	; 0x3c
    23cc:	9d ad       	ldd	r25, Y+61	; 0x3d
    23ce:	ae ad       	ldd	r26, Y+62	; 0x3e
    23d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    23d2:	a5 97       	sbiw	r28, 0x25	; 37
    23d4:	b0 58       	subi	r27, 0x80	; 128
    23d6:	ef 96       	adiw	r28, 0x3f	; 63
    23d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    23da:	ff ad       	ldd	r31, Y+63	; 0x3f
    23dc:	ef 97       	sbiw	r28, 0x3f	; 63
    23de:	84 83       	std	Z+4, r24	; 0x04
    23e0:	95 83       	std	Z+5, r25	; 0x05
    23e2:	a6 83       	std	Z+6, r26	; 0x06
    23e4:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    23e6:	ed 96       	adiw	r28, 0x3d	; 61
    23e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    23ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    23ec:	ed 97       	sbiw	r28, 0x3d	; 61
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	a2 81       	ldd	r26, Z+2	; 0x02
    23f4:	b3 81       	ldd	r27, Z+3	; 0x03
    23f6:	80 93 70 01 	sts	0x0170, r24
    23fa:	90 93 71 01 	sts	0x0171, r25
    23fe:	a0 93 72 01 	sts	0x0172, r26
    2402:	b0 93 73 01 	sts	0x0173, r27
		c_wii_last[1] = c_wii[1];
    2406:	84 81       	ldd	r24, Z+4	; 0x04
    2408:	95 81       	ldd	r25, Z+5	; 0x05
    240a:	a6 81       	ldd	r26, Z+6	; 0x06
    240c:	b7 81       	ldd	r27, Z+7	; 0x07
    240e:	80 93 74 01 	sts	0x0174, r24
    2412:	90 93 75 01 	sts	0x0175, r25
    2416:	a0 93 76 01 	sts	0x0176, r26
    241a:	b0 93 77 01 	sts	0x0177, r27
		dir_last[0] = dir[0];
    241e:	ef 96       	adiw	r28, 0x3f	; 63
    2420:	ee ad       	ldd	r30, Y+62	; 0x3e
    2422:	ff ad       	ldd	r31, Y+63	; 0x3f
    2424:	ef 97       	sbiw	r28, 0x3f	; 63
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	a2 81       	ldd	r26, Z+2	; 0x02
    242c:	b3 81       	ldd	r27, Z+3	; 0x03
    242e:	80 93 68 01 	sts	0x0168, r24
    2432:	90 93 69 01 	sts	0x0169, r25
    2436:	a0 93 6a 01 	sts	0x016A, r26
    243a:	b0 93 6b 01 	sts	0x016B, r27
		dir_last[1] = dir[1];
    243e:	84 81       	ldd	r24, Z+4	; 0x04
    2440:	95 81       	ldd	r25, Z+5	; 0x05
    2442:	a6 81       	ldd	r26, Z+6	; 0x06
    2444:	b7 81       	ldd	r27, Z+7	; 0x07
    2446:	80 93 6c 01 	sts	0x016C, r24
    244a:	90 93 6d 01 	sts	0x016D, r25
    244e:	a0 93 6e 01 	sts	0x016E, r26
    2452:	b0 93 6f 01 	sts	0x016F, r27
		
		if (*state == 3 || *state == 4){
    2456:	cd 57       	subi	r28, 0x7D	; 125
    2458:	df 4f       	sbci	r29, 0xFF	; 255
    245a:	a8 81       	ld	r26, Y
    245c:	b9 81       	ldd	r27, Y+1	; 0x01
    245e:	c3 58       	subi	r28, 0x83	; 131
    2460:	d0 40       	sbci	r29, 0x00	; 0
    2462:	8d 91       	ld	r24, X+
    2464:	9c 91       	ld	r25, X
    2466:	03 97       	sbiw	r24, 0x03	; 3
    2468:	02 97       	sbiw	r24, 0x02	; 2
    246a:	08 f0       	brcs	.+2      	; 0x246e <localization+0xc2a>
    246c:	9e c0       	rjmp	.+316    	; 0x25aa <localization+0xd66>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    246e:	ed 96       	adiw	r28, 0x3d	; 61
    2470:	ee ad       	ldd	r30, Y+62	; 0x3e
    2472:	ff ad       	ldd	r31, Y+63	; 0x3f
    2474:	ed 97       	sbiw	r28, 0x3d	; 61
    2476:	24 81       	ldd	r18, Z+4	; 0x04
    2478:	35 81       	ldd	r19, Z+5	; 0x05
    247a:	46 81       	ldd	r20, Z+6	; 0x06
    247c:	57 81       	ldd	r21, Z+7	; 0x07
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	cb 57       	subi	r28, 0x7B	; 123
    2488:	df 4f       	sbci	r29, 0xFF	; 255
    248a:	08 81       	ld	r16, Y
    248c:	19 81       	ldd	r17, Y+1	; 0x01
    248e:	c5 58       	subi	r28, 0x85	; 133
    2490:	d0 40       	sbci	r29, 0x00	; 0
    2492:	0e 94 ed 0b 	call	0x17da	; 0x17da <find_if_reach>
			if (!if_reach){
    2496:	89 2b       	or	r24, r25
    2498:	c1 f5       	brne	.+112    	; 0x250a <localization+0xcc6>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    249a:	ef 96       	adiw	r28, 0x3f	; 63
    249c:	ae ac       	ldd	r10, Y+62	; 0x3e
    249e:	bf ac       	ldd	r11, Y+63	; 0x3f
    24a0:	ef 97       	sbiw	r28, 0x3f	; 63
    24a2:	ed 96       	adiw	r28, 0x3d	; 61
    24a4:	ce ac       	ldd	r12, Y+62	; 0x3e
    24a6:	df ac       	ldd	r13, Y+63	; 0x3f
    24a8:	ed 97       	sbiw	r28, 0x3d	; 61
    24aa:	cb 57       	subi	r28, 0x7B	; 123
    24ac:	df 4f       	sbci	r29, 0xFF	; 255
    24ae:	e8 80       	ld	r14, Y
    24b0:	f9 80       	ldd	r15, Y+1	; 0x01
    24b2:	c5 58       	subi	r28, 0x85	; 133
    24b4:	d0 40       	sbci	r29, 0x00	; 0
    24b6:	93 01       	movw	r18, r6
    24b8:	82 01       	movw	r16, r4
    24ba:	a5 96       	adiw	r28, 0x25	; 37
    24bc:	4c ad       	ldd	r20, Y+60	; 0x3c
    24be:	5d ad       	ldd	r21, Y+61	; 0x3d
    24c0:	6e ad       	ldd	r22, Y+62	; 0x3e
    24c2:	7f ad       	ldd	r23, Y+63	; 0x3f
    24c4:	a5 97       	sbiw	r28, 0x25	; 37
    24c6:	c4 01       	movw	r24, r8
    24c8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <cal_angle>
				if (state == 3){
    24cc:	cd 57       	subi	r28, 0x7D	; 125
    24ce:	df 4f       	sbci	r29, 0xFF	; 255
    24d0:	28 81       	ld	r18, Y
    24d2:	39 81       	ldd	r19, Y+1	; 0x01
    24d4:	c3 58       	subi	r28, 0x83	; 131
    24d6:	d0 40       	sbci	r29, 0x00	; 0
    24d8:	23 30       	cpi	r18, 0x03	; 3
    24da:	31 05       	cpc	r19, r1
    24dc:	59 f4       	brne	.+22     	; 0x24f4 <localization+0xcb0>
					PID_alpha(Kp_loc, Kd_loc);
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	48 ec       	ldi	r20, 0xC8	; 200
    24e4:	53 e4       	ldi	r21, 0x43	; 67
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	80 e7       	ldi	r24, 0x70	; 112
    24ec:	92 e4       	ldi	r25, 0x42	; 66
    24ee:	0e 94 75 09 	call	0x12ea	; 0x12ea <PID_alpha>
    24f2:	5b c0       	rjmp	.+182    	; 0x25aa <localization+0xd66>
				}
				else{
					PID_p2p(Kp_p2p, Kd_p2p);
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	48 ec       	ldi	r20, 0xC8	; 200
    24fa:	53 e4       	ldi	r21, 0x43	; 67
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	80 e7       	ldi	r24, 0x70	; 112
    2502:	92 e4       	ldi	r25, 0x42	; 66
    2504:	0e 94 b1 0a 	call	0x1562	; 0x1562 <PID_p2p>
    2508:	50 c0       	rjmp	.+160    	; 0x25aa <localization+0xd66>
				}
			}
			else{ // reach goal, stop
				OCR1B = 0;
    250a:	10 92 8b 00 	sts	0x008B, r1
    250e:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    2512:	10 92 8d 00 	sts	0x008D, r1
    2516:	10 92 8c 00 	sts	0x008C, r1
				if (*state == 4){
    251a:	cd 57       	subi	r28, 0x7D	; 125
    251c:	df 4f       	sbci	r29, 0xFF	; 255
    251e:	a8 81       	ld	r26, Y
    2520:	b9 81       	ldd	r27, Y+1	; 0x01
    2522:	c3 58       	subi	r28, 0x83	; 131
    2524:	d0 40       	sbci	r29, 0x00	; 0
    2526:	8d 91       	ld	r24, X+
    2528:	9c 91       	ld	r25, X
    252a:	11 97       	sbiw	r26, 0x01	; 1
    252c:	04 97       	sbiw	r24, 0x04	; 4
    252e:	e9 f5       	brne	.+122    	; 0x25aa <localization+0xd66>
					*state = 5;
    2530:	85 e0       	ldi	r24, 0x05	; 5
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	8d 93       	st	X+, r24
    2536:	9c 93       	st	X, r25
    2538:	38 c0       	rjmp	.+112    	; 0x25aa <localization+0xd66>
			}
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    253a:	80 91 70 01 	lds	r24, 0x0170
    253e:	90 91 71 01 	lds	r25, 0x0171
    2542:	a0 91 72 01 	lds	r26, 0x0172
    2546:	b0 91 73 01 	lds	r27, 0x0173
    254a:	ed 96       	adiw	r28, 0x3d	; 61
    254c:	ee ad       	ldd	r30, Y+62	; 0x3e
    254e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2550:	ed 97       	sbiw	r28, 0x3d	; 61
    2552:	80 83       	st	Z, r24
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	a2 83       	std	Z+2, r26	; 0x02
    2558:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    255a:	80 91 74 01 	lds	r24, 0x0174
    255e:	90 91 75 01 	lds	r25, 0x0175
    2562:	a0 91 76 01 	lds	r26, 0x0176
    2566:	b0 91 77 01 	lds	r27, 0x0177
    256a:	84 83       	std	Z+4, r24	; 0x04
    256c:	95 83       	std	Z+5, r25	; 0x05
    256e:	a6 83       	std	Z+6, r26	; 0x06
    2570:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    2572:	80 91 68 01 	lds	r24, 0x0168
    2576:	90 91 69 01 	lds	r25, 0x0169
    257a:	a0 91 6a 01 	lds	r26, 0x016A
    257e:	b0 91 6b 01 	lds	r27, 0x016B
    2582:	ef 96       	adiw	r28, 0x3f	; 63
    2584:	ee ad       	ldd	r30, Y+62	; 0x3e
    2586:	ff ad       	ldd	r31, Y+63	; 0x3f
    2588:	ef 97       	sbiw	r28, 0x3f	; 63
    258a:	80 83       	st	Z, r24
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	a2 83       	std	Z+2, r26	; 0x02
    2590:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    2592:	80 91 6c 01 	lds	r24, 0x016C
    2596:	90 91 6d 01 	lds	r25, 0x016D
    259a:	a0 91 6e 01 	lds	r26, 0x016E
    259e:	b0 91 6f 01 	lds	r27, 0x016F
    25a2:	84 83       	std	Z+4, r24	; 0x04
    25a4:	95 83       	std	Z+5, r25	; 0x05
    25a6:	a6 83       	std	Z+6, r26	; 0x06
    25a8:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    25aa:	8c e8       	ldi	r24, 0x8C	; 140
    25ac:	92 e0       	ldi	r25, 0x02	; 2
    25ae:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(c_wii[0]);
    25b2:	ed 96       	adiw	r28, 0x3d	; 61
    25b4:	ae ad       	ldd	r26, Y+62	; 0x3e
    25b6:	bf ad       	ldd	r27, Y+63	; 0x3f
    25b8:	ed 97       	sbiw	r28, 0x3d	; 61
    25ba:	6d 91       	ld	r22, X+
    25bc:	7d 91       	ld	r23, X+
    25be:	8d 91       	ld	r24, X+
    25c0:	9c 91       	ld	r25, X
    25c2:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    25c6:	cb 01       	movw	r24, r22
    25c8:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    25cc:	87 e8       	ldi	r24, 0x87	; 135
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(c_wii[1]);
    25d4:	ed 96       	adiw	r28, 0x3d	; 61
    25d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    25d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    25da:	ed 97       	sbiw	r28, 0x3d	; 61
    25dc:	64 81       	ldd	r22, Z+4	; 0x04
    25de:	75 81       	ldd	r23, Z+5	; 0x05
    25e0:	86 81       	ldd	r24, Z+6	; 0x06
    25e2:	97 81       	ldd	r25, Z+7	; 0x07
    25e4:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    25e8:	cb 01       	movw	r24, r22
    25ea:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    25ee:	85 e8       	ldi	r24, 0x85	; 133
    25f0:	92 e0       	ldi	r25, 0x02	; 2
    25f2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    25f6:	84 e7       	ldi	r24, 0x74	; 116
    25f8:	92 e0       	ldi	r25, 0x02	; 2
    25fa:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(dir[0]*1000);
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	ef 96       	adiw	r28, 0x3f	; 63
    2608:	ae ad       	ldd	r26, Y+62	; 0x3e
    260a:	bf ad       	ldd	r27, Y+63	; 0x3f
    260c:	ef 97       	sbiw	r28, 0x3f	; 63
    260e:	6d 91       	ld	r22, X+
    2610:	7d 91       	ld	r23, X+
    2612:	8d 91       	ld	r24, X+
    2614:	9c 91       	ld	r25, X
    2616:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    261a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    261e:	cb 01       	movw	r24, r22
    2620:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2624:	8c e6       	ldi	r24, 0x6C	; 108
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
	m_usb_tx_int(dir[1]*1000);
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	54 e4       	ldi	r21, 0x44	; 68
    2634:	ef 96       	adiw	r28, 0x3f	; 63
    2636:	ee ad       	ldd	r30, Y+62	; 0x3e
    2638:	ff ad       	ldd	r31, Y+63	; 0x3f
    263a:	ef 97       	sbiw	r28, 0x3f	; 63
    263c:	64 81       	ldd	r22, Z+4	; 0x04
    263e:	75 81       	ldd	r23, Z+5	; 0x05
    2640:	86 81       	ldd	r24, Z+6	; 0x06
    2642:	97 81       	ldd	r25, Z+7	; 0x07
    2644:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsf3>
    2648:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    264c:	cb 01       	movw	r24, r22
    264e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2652:	8a e6       	ldi	r24, 0x6A	; 106
    2654:	92 e0       	ldi	r25, 0x02	; 2
    2656:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <localization+0xe40>
    265c:	eb 96       	adiw	r28, 0x3b	; 59
    265e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2660:	3f ad       	ldd	r19, Y+63	; 0x3f
    2662:	eb 97       	sbiw	r28, 0x3b	; 59
    2664:	2c 5f       	subi	r18, 0xFC	; 252
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	eb 96       	adiw	r28, 0x3b	; 59
    266a:	3f af       	std	Y+63, r19	; 0x3f
    266c:	2e af       	std	Y+62, r18	; 0x3e
    266e:	eb 97       	sbiw	r28, 0x3b	; 59
    2670:	e3 96       	adiw	r28, 0x33	; 51
    2672:	8e ad       	ldd	r24, Y+62	; 0x3e
    2674:	9f ad       	ldd	r25, Y+63	; 0x3f
    2676:	e3 97       	sbiw	r28, 0x33	; 51
    2678:	04 96       	adiw	r24, 0x04	; 4
    267a:	e3 96       	adiw	r28, 0x33	; 51
    267c:	9f af       	std	Y+63, r25	; 0x3f
    267e:	8e af       	std	Y+62, r24	; 0x3e
    2680:	e3 97       	sbiw	r28, 0x33	; 51
    2682:	a9 ca       	rjmp	.-2734   	; 0x1bd6 <localization+0x392>
}
    2684:	ca 57       	subi	r28, 0x7A	; 122
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	bf 90       	pop	r11
    26a4:	af 90       	pop	r10
    26a6:	9f 90       	pop	r9
    26a8:	8f 90       	pop	r8
    26aa:	7f 90       	pop	r7
    26ac:	6f 90       	pop	r6
    26ae:	5f 90       	pop	r5
    26b0:	4f 90       	pop	r4
    26b2:	3f 90       	pop	r3
    26b4:	2f 90       	pop	r2
    26b6:	08 95       	ret

000026b8 <m_bus_init>:
    26b8:	58 9a       	sbi	0x0b, 0	; 11
    26ba:	59 9a       	sbi	0x0b, 1	; 11
    26bc:	5a 9a       	sbi	0x0b, 2	; 11
    26be:	8c e0       	ldi	r24, 0x0C	; 12
    26c0:	80 93 b8 00 	sts	0x00B8, r24
    26c4:	e9 e6       	ldi	r30, 0x69	; 105
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	80 62       	ori	r24, 0x20	; 32
    26cc:	80 83       	st	Z, r24
    26ce:	80 81       	ld	r24, Z
    26d0:	8f 7e       	andi	r24, 0xEF	; 239
    26d2:	80 83       	st	Z, r24
    26d4:	ea 9a       	sbi	0x1d, 2	; 29
    26d6:	78 94       	sei
    26d8:	08 95       	ret

000026da <m_rf_open>:
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	18 2f       	mov	r17, r24
    26e2:	d6 2f       	mov	r29, r22
    26e4:	c4 2f       	mov	r28, r20
    26e6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <m_bus_init>
    26ea:	94 ea       	ldi	r25, 0xA4	; 164
    26ec:	90 93 bc 00 	sts	0x00BC, r25
    26f0:	ec eb       	ldi	r30, 0xBC	; 188
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	90 81       	ld	r25, Z
    26f6:	99 23       	and	r25, r25
    26f8:	ec f7       	brge	.-6      	; 0x26f4 <m_rf_open+0x1a>
    26fa:	90 e5       	ldi	r25, 0x50	; 80
    26fc:	90 93 bb 00 	sts	0x00BB, r25
    2700:	94 e8       	ldi	r25, 0x84	; 132
    2702:	90 93 bc 00 	sts	0x00BC, r25
    2706:	ec eb       	ldi	r30, 0xBC	; 188
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	90 81       	ld	r25, Z
    270c:	99 23       	and	r25, r25
    270e:	ec f7       	brge	.-6      	; 0x270a <m_rf_open+0x30>
    2710:	90 91 b9 00 	lds	r25, 0x00B9
    2714:	98 7f       	andi	r25, 0xF8	; 248
    2716:	90 32       	cpi	r25, 0x20	; 32
    2718:	29 f4       	brne	.+10     	; 0x2724 <m_rf_open+0x4a>
    271a:	84 e9       	ldi	r24, 0x94	; 148
    271c:	80 93 bc 00 	sts	0x00BC, r24
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	2d c0       	rjmp	.+90     	; 0x277e <m_rf_open+0xa4>
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	80 93 bb 00 	sts	0x00BB, r24
    272a:	84 e8       	ldi	r24, 0x84	; 132
    272c:	80 93 bc 00 	sts	0x00BC, r24
    2730:	ec eb       	ldi	r30, 0xBC	; 188
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	90 81       	ld	r25, Z
    2736:	99 23       	and	r25, r25
    2738:	ec f7       	brge	.-6      	; 0x2734 <m_rf_open+0x5a>
    273a:	10 93 bb 00 	sts	0x00BB, r17
    273e:	84 e8       	ldi	r24, 0x84	; 132
    2740:	80 93 bc 00 	sts	0x00BC, r24
    2744:	ec eb       	ldi	r30, 0xBC	; 188
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	88 23       	and	r24, r24
    274c:	ec f7       	brge	.-6      	; 0x2748 <m_rf_open+0x6e>
    274e:	d0 93 bb 00 	sts	0x00BB, r29
    2752:	84 e8       	ldi	r24, 0x84	; 132
    2754:	80 93 bc 00 	sts	0x00BC, r24
    2758:	ec eb       	ldi	r30, 0xBC	; 188
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	88 23       	and	r24, r24
    2760:	ec f7       	brge	.-6      	; 0x275c <m_rf_open+0x82>
    2762:	c0 93 bb 00 	sts	0x00BB, r28
    2766:	84 e8       	ldi	r24, 0x84	; 132
    2768:	80 93 bc 00 	sts	0x00BC, r24
    276c:	ec eb       	ldi	r30, 0xBC	; 188
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	88 23       	and	r24, r24
    2774:	ec f7       	brge	.-6      	; 0x2770 <m_rf_open+0x96>
    2776:	84 e9       	ldi	r24, 0x94	; 148
    2778:	80 93 bc 00 	sts	0x00BC, r24
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	1f 91       	pop	r17
    2784:	08 95       	ret

00002786 <m_rf_read>:
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	24 ea       	ldi	r18, 0xA4	; 164
    278e:	20 93 bc 00 	sts	0x00BC, r18
    2792:	ec eb       	ldi	r30, 0xBC	; 188
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	20 81       	ld	r18, Z
    2798:	22 23       	and	r18, r18
    279a:	ec f7       	brge	.-6      	; 0x2796 <m_rf_read+0x10>
    279c:	21 e5       	ldi	r18, 0x51	; 81
    279e:	20 93 bb 00 	sts	0x00BB, r18
    27a2:	24 e8       	ldi	r18, 0x84	; 132
    27a4:	20 93 bc 00 	sts	0x00BC, r18
    27a8:	ec eb       	ldi	r30, 0xBC	; 188
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	20 81       	ld	r18, Z
    27ae:	22 23       	and	r18, r18
    27b0:	ec f7       	brge	.-6      	; 0x27ac <m_rf_read+0x26>
    27b2:	20 91 b9 00 	lds	r18, 0x00B9
    27b6:	28 7f       	andi	r18, 0xF8	; 248
    27b8:	28 34       	cpi	r18, 0x48	; 72
    27ba:	29 f4       	brne	.+10     	; 0x27c6 <m_rf_read+0x40>
    27bc:	84 e9       	ldi	r24, 0x94	; 148
    27be:	80 93 bc 00 	sts	0x00BC, r24
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	44 c0       	rjmp	.+136    	; 0x284e <m_rf_read+0xc8>
    27c6:	24 ec       	ldi	r18, 0xC4	; 196
    27c8:	20 93 bc 00 	sts	0x00BC, r18
    27cc:	ec eb       	ldi	r30, 0xBC	; 188
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	20 81       	ld	r18, Z
    27d2:	22 23       	and	r18, r18
    27d4:	ec f7       	brge	.-6      	; 0x27d0 <m_rf_read+0x4a>
    27d6:	10 91 bb 00 	lds	r17, 0x00BB
    27da:	16 13       	cpse	r17, r22
    27dc:	0a c0       	rjmp	.+20     	; 0x27f2 <m_rf_read+0x6c>
    27de:	41 2f       	mov	r20, r17
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	41 50       	subi	r20, 0x01	; 1
    27e4:	51 09       	sbc	r21, r1
    27e6:	14 16       	cp	r1, r20
    27e8:	15 06       	cpc	r1, r21
    27ea:	44 f0       	brlt	.+16     	; 0x27fc <m_rf_read+0x76>
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	1c c0       	rjmp	.+56     	; 0x282a <m_rf_read+0xa4>
    27f2:	84 e9       	ldi	r24, 0x94	; 148
    27f4:	80 93 bc 00 	sts	0x00BC, r24
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	29 c0       	rjmp	.+82     	; 0x284e <m_rf_read+0xc8>
    27fc:	dc 01       	movw	r26, r24
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	ec eb       	ldi	r30, 0xBC	; 188
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	74 ec       	ldi	r23, 0xC4	; 196
    2808:	cb eb       	ldi	r28, 0xBB	; 187
    280a:	d0 e0       	ldi	r29, 0x00	; 0
    280c:	70 83       	st	Z, r23
    280e:	60 81       	ld	r22, Z
    2810:	66 23       	and	r22, r22
    2812:	ec f7       	brge	.-6      	; 0x280e <m_rf_read+0x88>
    2814:	68 81       	ld	r22, Y
    2816:	6d 93       	st	X+, r22
    2818:	2f 5f       	subi	r18, 0xFF	; 255
    281a:	3f 4f       	sbci	r19, 0xFF	; 255
    281c:	24 17       	cp	r18, r20
    281e:	35 07       	cpc	r19, r21
    2820:	ac f3       	brlt	.-22     	; 0x280c <m_rf_read+0x86>
    2822:	21 2f       	mov	r18, r17
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	21 50       	subi	r18, 0x01	; 1
    2828:	31 09       	sbc	r19, r1
    282a:	44 e8       	ldi	r20, 0x84	; 132
    282c:	40 93 bc 00 	sts	0x00BC, r20
    2830:	ec eb       	ldi	r30, 0xBC	; 188
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	40 81       	ld	r20, Z
    2836:	44 23       	and	r20, r20
    2838:	ec f7       	brge	.-6      	; 0x2834 <m_rf_read+0xae>
    283a:	40 91 bb 00 	lds	r20, 0x00BB
    283e:	fc 01       	movw	r30, r24
    2840:	e2 0f       	add	r30, r18
    2842:	f3 1f       	adc	r31, r19
    2844:	40 83       	st	Z, r20
    2846:	84 e9       	ldi	r24, 0x94	; 148
    2848:	80 93 bc 00 	sts	0x00BC, r24
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	08 95       	ret

00002856 <m_rf_send>:
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	f8 94       	cli
    285c:	94 ea       	ldi	r25, 0xA4	; 164
    285e:	90 93 bc 00 	sts	0x00BC, r25
    2862:	ec eb       	ldi	r30, 0xBC	; 188
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	90 81       	ld	r25, Z
    2868:	99 23       	and	r25, r25
    286a:	ec f7       	brge	.-6      	; 0x2866 <m_rf_send+0x10>
    286c:	90 e5       	ldi	r25, 0x50	; 80
    286e:	90 93 bb 00 	sts	0x00BB, r25
    2872:	94 e8       	ldi	r25, 0x84	; 132
    2874:	90 93 bc 00 	sts	0x00BC, r25
    2878:	ec eb       	ldi	r30, 0xBC	; 188
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	90 81       	ld	r25, Z
    287e:	99 23       	and	r25, r25
    2880:	ec f7       	brge	.-6      	; 0x287c <m_rf_send+0x26>
    2882:	90 91 b9 00 	lds	r25, 0x00B9
    2886:	98 7f       	andi	r25, 0xF8	; 248
    2888:	90 32       	cpi	r25, 0x20	; 32
    288a:	31 f4       	brne	.+12     	; 0x2898 <m_rf_send+0x42>
    288c:	84 e9       	ldi	r24, 0x94	; 148
    288e:	80 93 bc 00 	sts	0x00BC, r24
    2892:	78 94       	sei
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	32 c0       	rjmp	.+100    	; 0x28fc <m_rf_send+0xa6>
    2898:	93 e0       	ldi	r25, 0x03	; 3
    289a:	90 93 bb 00 	sts	0x00BB, r25
    289e:	94 e8       	ldi	r25, 0x84	; 132
    28a0:	90 93 bc 00 	sts	0x00BC, r25
    28a4:	ec eb       	ldi	r30, 0xBC	; 188
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	90 81       	ld	r25, Z
    28aa:	99 23       	and	r25, r25
    28ac:	ec f7       	brge	.-6      	; 0x28a8 <m_rf_send+0x52>
    28ae:	80 93 bb 00 	sts	0x00BB, r24
    28b2:	84 e8       	ldi	r24, 0x84	; 132
    28b4:	80 93 bc 00 	sts	0x00BC, r24
    28b8:	ec eb       	ldi	r30, 0xBC	; 188
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	88 23       	and	r24, r24
    28c0:	ec f7       	brge	.-6      	; 0x28bc <m_rf_send+0x66>
    28c2:	24 2f       	mov	r18, r20
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	12 16       	cp	r1, r18
    28c8:	13 06       	cpc	r1, r19
    28ca:	9c f4       	brge	.+38     	; 0x28f2 <m_rf_send+0x9c>
    28cc:	a6 2f       	mov	r26, r22
    28ce:	b7 2f       	mov	r27, r23
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	cb eb       	ldi	r28, 0xBB	; 187
    28d6:	d0 e0       	ldi	r29, 0x00	; 0
    28d8:	ec eb       	ldi	r30, 0xBC	; 188
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	54 e8       	ldi	r21, 0x84	; 132
    28de:	4d 91       	ld	r20, X+
    28e0:	48 83       	st	Y, r20
    28e2:	50 83       	st	Z, r21
    28e4:	40 81       	ld	r20, Z
    28e6:	44 23       	and	r20, r20
    28e8:	ec f7       	brge	.-6      	; 0x28e4 <m_rf_send+0x8e>
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	82 17       	cp	r24, r18
    28ee:	93 07       	cpc	r25, r19
    28f0:	b4 f3       	brlt	.-20     	; 0x28de <m_rf_send+0x88>
    28f2:	84 e9       	ldi	r24, 0x94	; 148
    28f4:	80 93 bc 00 	sts	0x00BC, r24
    28f8:	78 94       	sei
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	08 95       	ret

00002902 <m_usb_init>:
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	80 93 d7 00 	sts	0x00D7, r24
    2908:	80 ea       	ldi	r24, 0xA0	; 160
    290a:	80 93 d8 00 	sts	0x00D8, r24
    290e:	82 e1       	ldi	r24, 0x12	; 18
    2910:	89 bd       	out	0x29, r24	; 41
    2912:	09 b4       	in	r0, 0x29	; 41
    2914:	00 fe       	sbrs	r0, 0
    2916:	fd cf       	rjmp	.-6      	; 0x2912 <m_usb_init+0x10>
    2918:	80 e9       	ldi	r24, 0x90	; 144
    291a:	80 93 d8 00 	sts	0x00D8, r24
    291e:	10 92 e0 00 	sts	0x00E0, r1
    2922:	10 92 93 01 	sts	0x0193, r1
    2926:	10 92 90 01 	sts	0x0190, r1
    292a:	8c e0       	ldi	r24, 0x0C	; 12
    292c:	80 93 e2 00 	sts	0x00E2, r24
    2930:	78 94       	sei
    2932:	08 95       	ret

00002934 <m_usb_tx_char>:
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	90 91 93 01 	lds	r25, 0x0193
    293c:	99 23       	and	r25, r25
    293e:	09 f4       	brne	.+2      	; 0x2942 <m_usb_tx_char+0xe>
    2940:	4c c0       	rjmp	.+152    	; 0x29da <m_usb_tx_char+0xa6>
    2942:	9f b7       	in	r25, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	24 e0       	ldi	r18, 0x04	; 4
    2948:	20 93 e9 00 	sts	0x00E9, r18
    294c:	20 91 91 01 	lds	r18, 0x0191
    2950:	22 23       	and	r18, r18
    2952:	49 f0       	breq	.+18     	; 0x2966 <m_usb_tx_char+0x32>
    2954:	20 91 e8 00 	lds	r18, 0x00E8
    2958:	25 fd       	sbrc	r18, 5
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <m_usb_tx_char+0x2e>
    295c:	9f bf       	out	0x3f, r25	; 63
    295e:	8f ef       	ldi	r24, 0xFF	; 255
    2960:	41 c0       	rjmp	.+130    	; 0x29e4 <m_usb_tx_char+0xb0>
    2962:	10 92 91 01 	sts	0x0191, r1
    2966:	30 91 e4 00 	lds	r19, 0x00E4
    296a:	37 5e       	subi	r19, 0xE7	; 231
    296c:	20 91 e8 00 	lds	r18, 0x00E8
    2970:	25 fd       	sbrc	r18, 5
    2972:	24 c0       	rjmp	.+72     	; 0x29bc <m_usb_tx_char+0x88>
    2974:	9f bf       	out	0x3f, r25	; 63
    2976:	90 91 e4 00 	lds	r25, 0x00E4
    297a:	93 17       	cp	r25, r19
    297c:	81 f0       	breq	.+32     	; 0x299e <m_usb_tx_char+0x6a>
    297e:	90 91 93 01 	lds	r25, 0x0193
    2982:	99 23       	and	r25, r25
    2984:	61 f1       	breq	.+88     	; 0x29de <m_usb_tx_char+0xaa>
    2986:	a9 ee       	ldi	r26, 0xE9	; 233
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	44 e0       	ldi	r20, 0x04	; 4
    298c:	e8 ee       	ldi	r30, 0xE8	; 232
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	c4 ee       	ldi	r28, 0xE4	; 228
    2992:	d0 e0       	ldi	r29, 0x00	; 0
    2994:	0d c0       	rjmp	.+26     	; 0x29b0 <m_usb_tx_char+0x7c>
    2996:	9f bf       	out	0x3f, r25	; 63
    2998:	98 81       	ld	r25, Y
    299a:	93 13       	cpse	r25, r19
    299c:	05 c0       	rjmp	.+10     	; 0x29a8 <m_usb_tx_char+0x74>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	80 93 91 01 	sts	0x0191, r24
    29a4:	8f ef       	ldi	r24, 0xFF	; 255
    29a6:	1e c0       	rjmp	.+60     	; 0x29e4 <m_usb_tx_char+0xb0>
    29a8:	90 91 93 01 	lds	r25, 0x0193
    29ac:	99 23       	and	r25, r25
    29ae:	c9 f0       	breq	.+50     	; 0x29e2 <m_usb_tx_char+0xae>
    29b0:	9f b7       	in	r25, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	4c 93       	st	X, r20
    29b6:	20 81       	ld	r18, Z
    29b8:	25 ff       	sbrs	r18, 5
    29ba:	ed cf       	rjmp	.-38     	; 0x2996 <m_usb_tx_char+0x62>
    29bc:	80 93 f1 00 	sts	0x00F1, r24
    29c0:	80 91 e8 00 	lds	r24, 0x00E8
    29c4:	85 fd       	sbrc	r24, 5
    29c6:	03 c0       	rjmp	.+6      	; 0x29ce <m_usb_tx_char+0x9a>
    29c8:	8a e3       	ldi	r24, 0x3A	; 58
    29ca:	80 93 e8 00 	sts	0x00E8, r24
    29ce:	85 e0       	ldi	r24, 0x05	; 5
    29d0:	80 93 92 01 	sts	0x0192, r24
    29d4:	9f bf       	out	0x3f, r25	; 63
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	05 c0       	rjmp	.+10     	; 0x29e4 <m_usb_tx_char+0xb0>
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	03 c0       	rjmp	.+6      	; 0x29e4 <m_usb_tx_char+0xb0>
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	01 c0       	rjmp	.+2      	; 0x29e4 <m_usb_tx_char+0xb0>
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	08 95       	ret

000029ea <__vector_10>:
    29ea:	1f 92       	push	r1
    29ec:	0f 92       	push	r0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	0f 92       	push	r0
    29f2:	11 24       	eor	r1, r1
    29f4:	8f 93       	push	r24
    29f6:	9f 93       	push	r25
    29f8:	ef 93       	push	r30
    29fa:	ff 93       	push	r31
    29fc:	e1 ee       	ldi	r30, 0xE1	; 225
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	10 82       	st	Z, r1
    2a04:	83 ff       	sbrs	r24, 3
    2a06:	11 c0       	rjmp	.+34     	; 0x2a2a <__vector_10+0x40>
    2a08:	10 92 e9 00 	sts	0x00E9, r1
    2a0c:	91 e0       	ldi	r25, 0x01	; 1
    2a0e:	90 93 eb 00 	sts	0x00EB, r25
    2a12:	10 92 ec 00 	sts	0x00EC, r1
    2a16:	92 e1       	ldi	r25, 0x12	; 18
    2a18:	90 93 ed 00 	sts	0x00ED, r25
    2a1c:	98 e0       	ldi	r25, 0x08	; 8
    2a1e:	90 93 f0 00 	sts	0x00F0, r25
    2a22:	10 92 93 01 	sts	0x0193, r1
    2a26:	10 92 90 01 	sts	0x0190, r1
    2a2a:	82 ff       	sbrs	r24, 2
    2a2c:	13 c0       	rjmp	.+38     	; 0x2a54 <__vector_10+0x6a>
    2a2e:	80 91 93 01 	lds	r24, 0x0193
    2a32:	88 23       	and	r24, r24
    2a34:	79 f0       	breq	.+30     	; 0x2a54 <__vector_10+0x6a>
    2a36:	80 91 92 01 	lds	r24, 0x0192
    2a3a:	88 23       	and	r24, r24
    2a3c:	59 f0       	breq	.+22     	; 0x2a54 <__vector_10+0x6a>
    2a3e:	81 50       	subi	r24, 0x01	; 1
    2a40:	80 93 92 01 	sts	0x0192, r24
    2a44:	81 11       	cpse	r24, r1
    2a46:	06 c0       	rjmp	.+12     	; 0x2a54 <__vector_10+0x6a>
    2a48:	84 e0       	ldi	r24, 0x04	; 4
    2a4a:	80 93 e9 00 	sts	0x00E9, r24
    2a4e:	8a e3       	ldi	r24, 0x3A	; 58
    2a50:	80 93 e8 00 	sts	0x00E8, r24
    2a54:	ff 91       	pop	r31
    2a56:	ef 91       	pop	r30
    2a58:	9f 91       	pop	r25
    2a5a:	8f 91       	pop	r24
    2a5c:	0f 90       	pop	r0
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	0f 90       	pop	r0
    2a62:	1f 90       	pop	r1
    2a64:	18 95       	reti

00002a66 <__vector_11>:
    2a66:	1f 92       	push	r1
    2a68:	0f 92       	push	r0
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	0f 92       	push	r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	2f 93       	push	r18
    2a76:	3f 93       	push	r19
    2a78:	4f 93       	push	r20
    2a7a:	5f 93       	push	r21
    2a7c:	6f 93       	push	r22
    2a7e:	7f 93       	push	r23
    2a80:	8f 93       	push	r24
    2a82:	9f 93       	push	r25
    2a84:	af 93       	push	r26
    2a86:	bf 93       	push	r27
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	ef 93       	push	r30
    2a8e:	ff 93       	push	r31
    2a90:	10 92 e9 00 	sts	0x00E9, r1
    2a94:	80 91 e8 00 	lds	r24, 0x00E8
    2a98:	83 ff       	sbrs	r24, 3
    2a9a:	4e c1       	rjmp	.+668    	; 0x2d38 <__vector_11+0x2d2>
    2a9c:	e1 ef       	ldi	r30, 0xF1	; 241
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	c0 81       	ld	r28, Z
    2aa2:	40 81       	ld	r20, Z
    2aa4:	20 81       	ld	r18, Z
    2aa6:	80 81       	ld	r24, Z
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	38 2b       	or	r19, r24
    2aac:	80 81       	ld	r24, Z
    2aae:	50 81       	ld	r21, Z
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	75 2b       	or	r23, r21
    2ab6:	b0 81       	ld	r27, Z
    2ab8:	a0 81       	ld	r26, Z
    2aba:	82 ef       	ldi	r24, 0xF2	; 242
    2abc:	80 93 e8 00 	sts	0x00E8, r24
    2ac0:	46 30       	cpi	r20, 0x06	; 6
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <__vector_11+0x60>
    2ac4:	58 c0       	rjmp	.+176    	; 0x2b76 <__vector_11+0x110>
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <__vector_11+0x6a>
    2ac8:	81 e2       	ldi	r24, 0x21	; 33
    2aca:	80 93 eb 00 	sts	0x00EB, r24
    2ace:	3b c1       	rjmp	.+630    	; 0x2d46 <__vector_11+0x2e0>
    2ad0:	c6 e0       	ldi	r28, 0x06	; 6
    2ad2:	80 ea       	ldi	r24, 0xA0	; 160
    2ad4:	92 e0       	ldi	r25, 0x02	; 2
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	45 91       	lpm	r20, Z+
    2ada:	54 91       	lpm	r21, Z
    2adc:	24 17       	cp	r18, r20
    2ade:	35 07       	cpc	r19, r21
    2ae0:	11 f0       	breq	.+4      	; 0x2ae6 <__vector_11+0x80>
    2ae2:	07 96       	adiw	r24, 0x07	; 7
    2ae4:	23 c0       	rjmp	.+70     	; 0x2b2c <__vector_11+0xc6>
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	32 96       	adiw	r30, 0x02	; 2
    2aea:	45 91       	lpm	r20, Z+
    2aec:	54 91       	lpm	r21, Z
    2aee:	64 17       	cp	r22, r20
    2af0:	75 07       	cpc	r23, r21
    2af2:	11 f0       	breq	.+4      	; 0x2af8 <__vector_11+0x92>
    2af4:	07 96       	adiw	r24, 0x07	; 7
    2af6:	1a c0       	rjmp	.+52     	; 0x2b2c <__vector_11+0xc6>
    2af8:	fc 01       	movw	r30, r24
    2afa:	34 96       	adiw	r30, 0x04	; 4
    2afc:	25 91       	lpm	r18, Z+
    2afe:	34 91       	lpm	r19, Z
    2b00:	fc 01       	movw	r30, r24
    2b02:	36 96       	adiw	r30, 0x06	; 6
    2b04:	54 91       	lpm	r21, Z
    2b06:	8b 2f       	mov	r24, r27
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9a 2b       	or	r25, r26
    2b0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b0e:	91 05       	cpc	r25, r1
    2b10:	19 f0       	breq	.+6      	; 0x2b18 <__vector_11+0xb2>
    2b12:	10 f0       	brcs	.+4      	; 0x2b18 <__vector_11+0xb2>
    2b14:	8f ef       	ldi	r24, 0xFF	; 255
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	85 17       	cp	r24, r21
    2b1a:	08 f4       	brcc	.+2      	; 0x2b1e <__vector_11+0xb8>
    2b1c:	58 2f       	mov	r21, r24
    2b1e:	a8 ee       	ldi	r26, 0xE8	; 232
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	70 e1       	ldi	r23, 0x10	; 16
    2b24:	6e ef       	ldi	r22, 0xFE	; 254
    2b26:	c1 ef       	ldi	r28, 0xF1	; 241
    2b28:	d0 e0       	ldi	r29, 0x00	; 0
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <__vector_11+0xcc>
    2b2c:	c1 50       	subi	r28, 0x01	; 1
    2b2e:	99 f6       	brne	.-90     	; 0x2ad6 <__vector_11+0x70>
    2b30:	cb cf       	rjmp	.-106    	; 0x2ac8 <__vector_11+0x62>
    2b32:	8c 91       	ld	r24, X
    2b34:	98 2f       	mov	r25, r24
    2b36:	95 70       	andi	r25, 0x05	; 5
    2b38:	e1 f3       	breq	.-8      	; 0x2b32 <__vector_11+0xcc>
    2b3a:	82 fd       	sbrc	r24, 2
    2b3c:	04 c1       	rjmp	.+520    	; 0x2d46 <__vector_11+0x2e0>
    2b3e:	45 2f       	mov	r20, r21
    2b40:	51 31       	cpi	r21, 0x11	; 17
    2b42:	08 f0       	brcs	.+2      	; 0x2b46 <__vector_11+0xe0>
    2b44:	47 2f       	mov	r20, r23
    2b46:	44 23       	and	r20, r20
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <__vector_11+0xe6>
    2b4a:	fa c0       	rjmp	.+500    	; 0x2d40 <__vector_11+0x2da>
    2b4c:	f9 01       	movw	r30, r18
    2b4e:	84 2f       	mov	r24, r20
    2b50:	94 91       	lpm	r25, Z
    2b52:	98 83       	st	Y, r25
    2b54:	81 50       	subi	r24, 0x01	; 1
    2b56:	31 96       	adiw	r30, 0x01	; 1
    2b58:	81 11       	cpse	r24, r1
    2b5a:	fa cf       	rjmp	.-12     	; 0x2b50 <__vector_11+0xea>
    2b5c:	8f ef       	ldi	r24, 0xFF	; 255
    2b5e:	84 0f       	add	r24, r20
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	28 0f       	add	r18, r24
    2b66:	39 1f       	adc	r19, r25
    2b68:	54 1b       	sub	r21, r20
    2b6a:	6c 93       	st	X, r22
    2b6c:	51 11       	cpse	r21, r1
    2b6e:	e1 cf       	rjmp	.-62     	; 0x2b32 <__vector_11+0xcc>
    2b70:	40 31       	cpi	r20, 0x10	; 16
    2b72:	f9 f2       	breq	.-66     	; 0x2b32 <__vector_11+0xcc>
    2b74:	e8 c0       	rjmp	.+464    	; 0x2d46 <__vector_11+0x2e0>
    2b76:	45 30       	cpi	r20, 0x05	; 5
    2b78:	61 f4       	brne	.+24     	; 0x2b92 <__vector_11+0x12c>
    2b7a:	8e ef       	ldi	r24, 0xFE	; 254
    2b7c:	80 93 e8 00 	sts	0x00E8, r24
    2b80:	e8 ee       	ldi	r30, 0xE8	; 232
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	80 ff       	sbrs	r24, 0
    2b88:	fd cf       	rjmp	.-6      	; 0x2b84 <__vector_11+0x11e>
    2b8a:	20 68       	ori	r18, 0x80	; 128
    2b8c:	20 93 e3 00 	sts	0x00E3, r18
    2b90:	da c0       	rjmp	.+436    	; 0x2d46 <__vector_11+0x2e0>
    2b92:	49 30       	cpi	r20, 0x09	; 9
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <__vector_11+0x132>
    2b96:	36 c0       	rjmp	.+108    	; 0x2c04 <__vector_11+0x19e>
    2b98:	c1 11       	cpse	r28, r1
    2b9a:	5f c0       	rjmp	.+190    	; 0x2c5a <__vector_11+0x1f4>
    2b9c:	20 93 93 01 	sts	0x0193, r18
    2ba0:	10 92 90 01 	sts	0x0190, r1
    2ba4:	10 92 92 01 	sts	0x0192, r1
    2ba8:	8e ef       	ldi	r24, 0xFE	; 254
    2baa:	80 93 e8 00 	sts	0x00E8, r24
    2bae:	11 e0       	ldi	r17, 0x01	; 1
    2bb0:	89 e4       	ldi	r24, 0x49	; 73
    2bb2:	93 e0       	ldi	r25, 0x03	; 3
    2bb4:	c9 ee       	ldi	r28, 0xE9	; 233
    2bb6:	d0 e0       	ldi	r29, 0x00	; 0
    2bb8:	ab ee       	ldi	r26, 0xEB	; 235
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	6c ee       	ldi	r22, 0xEC	; 236
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	4d ee       	ldi	r20, 0xED	; 237
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	18 83       	st	Y, r17
    2bc6:	9c 01       	movw	r18, r24
    2bc8:	2f 5f       	subi	r18, 0xFF	; 255
    2bca:	3f 4f       	sbci	r19, 0xFF	; 255
    2bcc:	fc 01       	movw	r30, r24
    2bce:	04 91       	lpm	r16, Z
    2bd0:	0c 93       	st	X, r16
    2bd2:	00 23       	and	r16, r16
    2bd4:	61 f0       	breq	.+24     	; 0x2bee <__vector_11+0x188>
    2bd6:	f9 01       	movw	r30, r18
    2bd8:	24 91       	lpm	r18, Z
    2bda:	fb 01       	movw	r30, r22
    2bdc:	20 83       	st	Z, r18
    2bde:	9c 01       	movw	r18, r24
    2be0:	2d 5f       	subi	r18, 0xFD	; 253
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255
    2be4:	fc 01       	movw	r30, r24
    2be6:	32 96       	adiw	r30, 0x02	; 2
    2be8:	84 91       	lpm	r24, Z
    2bea:	fa 01       	movw	r30, r20
    2bec:	80 83       	st	Z, r24
    2bee:	1f 5f       	subi	r17, 0xFF	; 255
    2bf0:	15 30       	cpi	r17, 0x05	; 5
    2bf2:	11 f0       	breq	.+4      	; 0x2bf8 <__vector_11+0x192>
    2bf4:	c9 01       	movw	r24, r18
    2bf6:	e6 cf       	rjmp	.-52     	; 0x2bc4 <__vector_11+0x15e>
    2bf8:	ea ee       	ldi	r30, 0xEA	; 234
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	8e e1       	ldi	r24, 0x1E	; 30
    2bfe:	80 83       	st	Z, r24
    2c00:	10 82       	st	Z, r1
    2c02:	a1 c0       	rjmp	.+322    	; 0x2d46 <__vector_11+0x2e0>
    2c04:	48 30       	cpi	r20, 0x08	; 8
    2c06:	81 f4       	brne	.+32     	; 0x2c28 <__vector_11+0x1c2>
    2c08:	c0 38       	cpi	r28, 0x80	; 128
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <__vector_11+0x1a8>
    2c0c:	42 c0       	rjmp	.+132    	; 0x2c92 <__vector_11+0x22c>
    2c0e:	e8 ee       	ldi	r30, 0xE8	; 232
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	80 ff       	sbrs	r24, 0
    2c16:	fd cf       	rjmp	.-6      	; 0x2c12 <__vector_11+0x1ac>
    2c18:	80 91 93 01 	lds	r24, 0x0193
    2c1c:	80 93 f1 00 	sts	0x00F1, r24
    2c20:	8e ef       	ldi	r24, 0xFE	; 254
    2c22:	80 93 e8 00 	sts	0x00E8, r24
    2c26:	8f c0       	rjmp	.+286    	; 0x2d46 <__vector_11+0x2e0>
    2c28:	41 32       	cpi	r20, 0x21	; 33
    2c2a:	b9 f4       	brne	.+46     	; 0x2c5a <__vector_11+0x1f4>
    2c2c:	c1 3a       	cpi	r28, 0xA1	; 161
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <__vector_11+0x1cc>
    2c30:	40 c0       	rjmp	.+128    	; 0x2cb2 <__vector_11+0x24c>
    2c32:	e8 ee       	ldi	r30, 0xE8	; 232
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	80 ff       	sbrs	r24, 0
    2c3a:	fd cf       	rjmp	.-6      	; 0x2c36 <__vector_11+0x1d0>
    2c3c:	e6 e2       	ldi	r30, 0x26	; 38
    2c3e:	f1 e0       	ldi	r31, 0x01	; 1
    2c40:	8d e2       	ldi	r24, 0x2D	; 45
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	a1 ef       	ldi	r26, 0xF1	; 241
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	21 91       	ld	r18, Z+
    2c4a:	2c 93       	st	X, r18
    2c4c:	e8 17       	cp	r30, r24
    2c4e:	f9 07       	cpc	r31, r25
    2c50:	d9 f7       	brne	.-10     	; 0x2c48 <__vector_11+0x1e2>
    2c52:	8e ef       	ldi	r24, 0xFE	; 254
    2c54:	80 93 e8 00 	sts	0x00E8, r24
    2c58:	76 c0       	rjmp	.+236    	; 0x2d46 <__vector_11+0x2e0>
    2c5a:	40 32       	cpi	r20, 0x20	; 32
    2c5c:	d1 f4       	brne	.+52     	; 0x2c92 <__vector_11+0x22c>
    2c5e:	c1 32       	cpi	r28, 0x21	; 33
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <__vector_11+0x1fe>
    2c62:	43 c0       	rjmp	.+134    	; 0x2cea <__vector_11+0x284>
    2c64:	e8 ee       	ldi	r30, 0xE8	; 232
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	82 ff       	sbrs	r24, 2
    2c6c:	fd cf       	rjmp	.-6      	; 0x2c68 <__vector_11+0x202>
    2c6e:	e6 e2       	ldi	r30, 0x26	; 38
    2c70:	f1 e0       	ldi	r31, 0x01	; 1
    2c72:	8d e2       	ldi	r24, 0x2D	; 45
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	a1 ef       	ldi	r26, 0xF1	; 241
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	2c 91       	ld	r18, X
    2c7c:	21 93       	st	Z+, r18
    2c7e:	e8 17       	cp	r30, r24
    2c80:	f9 07       	cpc	r31, r25
    2c82:	d9 f7       	brne	.-10     	; 0x2c7a <__vector_11+0x214>
    2c84:	e8 ee       	ldi	r30, 0xE8	; 232
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	8b ef       	ldi	r24, 0xFB	; 251
    2c8a:	80 83       	st	Z, r24
    2c8c:	8e ef       	ldi	r24, 0xFE	; 254
    2c8e:	80 83       	st	Z, r24
    2c90:	5a c0       	rjmp	.+180    	; 0x2d46 <__vector_11+0x2e0>
    2c92:	42 32       	cpi	r20, 0x22	; 34
    2c94:	71 f4       	brne	.+28     	; 0x2cb2 <__vector_11+0x24c>
    2c96:	c1 32       	cpi	r28, 0x21	; 33
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <__vector_11+0x236>
    2c9a:	4e c0       	rjmp	.+156    	; 0x2d38 <__vector_11+0x2d2>
    2c9c:	20 93 90 01 	sts	0x0190, r18
    2ca0:	e8 ee       	ldi	r30, 0xE8	; 232
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	80 ff       	sbrs	r24, 0
    2ca8:	fd cf       	rjmp	.-6      	; 0x2ca4 <__vector_11+0x23e>
    2caa:	8e ef       	ldi	r24, 0xFE	; 254
    2cac:	80 93 e8 00 	sts	0x00E8, r24
    2cb0:	4a c0       	rjmp	.+148    	; 0x2d46 <__vector_11+0x2e0>
    2cb2:	41 11       	cpse	r20, r1
    2cb4:	1a c0       	rjmp	.+52     	; 0x2cea <__vector_11+0x284>
    2cb6:	e8 ee       	ldi	r30, 0xE8	; 232
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 ff       	sbrs	r24, 0
    2cbe:	fd cf       	rjmp	.-6      	; 0x2cba <__vector_11+0x254>
    2cc0:	c2 38       	cpi	r28, 0x82	; 130
    2cc2:	51 f4       	brne	.+20     	; 0x2cd8 <__vector_11+0x272>
    2cc4:	e9 ee       	ldi	r30, 0xE9	; 233
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	60 83       	st	Z, r22
    2cca:	80 91 eb 00 	lds	r24, 0x00EB
    2cce:	85 fb       	bst	r24, 5
    2cd0:	88 27       	eor	r24, r24
    2cd2:	80 f9       	bld	r24, 0
    2cd4:	10 82       	st	Z, r1
    2cd6:	01 c0       	rjmp	.+2      	; 0x2cda <__vector_11+0x274>
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	e1 ef       	ldi	r30, 0xF1	; 241
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 83       	st	Z, r24
    2ce0:	10 82       	st	Z, r1
    2ce2:	8e ef       	ldi	r24, 0xFE	; 254
    2ce4:	80 93 e8 00 	sts	0x00E8, r24
    2ce8:	2e c0       	rjmp	.+92     	; 0x2d46 <__vector_11+0x2e0>
    2cea:	84 2f       	mov	r24, r20
    2cec:	8d 7f       	andi	r24, 0xFD	; 253
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	19 f5       	brne	.+70     	; 0x2d38 <__vector_11+0x2d2>
    2cf2:	c2 30       	cpi	r28, 0x02	; 2
    2cf4:	09 f5       	brne	.+66     	; 0x2d38 <__vector_11+0x2d2>
    2cf6:	23 2b       	or	r18, r19
    2cf8:	f9 f4       	brne	.+62     	; 0x2d38 <__vector_11+0x2d2>
    2cfa:	6f 77       	andi	r22, 0x7F	; 127
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	86 0f       	add	r24, r22
    2d00:	84 30       	cpi	r24, 0x04	; 4
    2d02:	d0 f4       	brcc	.+52     	; 0x2d38 <__vector_11+0x2d2>
    2d04:	8e ef       	ldi	r24, 0xFE	; 254
    2d06:	80 93 e8 00 	sts	0x00E8, r24
    2d0a:	60 93 e9 00 	sts	0x00E9, r22
    2d0e:	43 30       	cpi	r20, 0x03	; 3
    2d10:	21 f4       	brne	.+8      	; 0x2d1a <__vector_11+0x2b4>
    2d12:	81 e2       	ldi	r24, 0x21	; 33
    2d14:	80 93 eb 00 	sts	0x00EB, r24
    2d18:	16 c0       	rjmp	.+44     	; 0x2d46 <__vector_11+0x2e0>
    2d1a:	89 e1       	ldi	r24, 0x19	; 25
    2d1c:	80 93 eb 00 	sts	0x00EB, r24
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <__vector_11+0x2c4>
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	6a 95       	dec	r22
    2d2c:	e2 f7       	brpl	.-8      	; 0x2d26 <__vector_11+0x2c0>
    2d2e:	ea ee       	ldi	r30, 0xEA	; 234
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 83       	st	Z, r24
    2d34:	10 82       	st	Z, r1
    2d36:	07 c0       	rjmp	.+14     	; 0x2d46 <__vector_11+0x2e0>
    2d38:	81 e2       	ldi	r24, 0x21	; 33
    2d3a:	80 93 eb 00 	sts	0x00EB, r24
    2d3e:	03 c0       	rjmp	.+6      	; 0x2d46 <__vector_11+0x2e0>
    2d40:	6c 93       	st	X, r22
    2d42:	51 11       	cpse	r21, r1
    2d44:	f6 ce       	rjmp	.-532    	; 0x2b32 <__vector_11+0xcc>
    2d46:	ff 91       	pop	r31
    2d48:	ef 91       	pop	r30
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	bf 91       	pop	r27
    2d50:	af 91       	pop	r26
    2d52:	9f 91       	pop	r25
    2d54:	8f 91       	pop	r24
    2d56:	7f 91       	pop	r23
    2d58:	6f 91       	pop	r22
    2d5a:	5f 91       	pop	r21
    2d5c:	4f 91       	pop	r20
    2d5e:	3f 91       	pop	r19
    2d60:	2f 91       	pop	r18
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	0f 90       	pop	r0
    2d6c:	1f 90       	pop	r1
    2d6e:	18 95       	reti

00002d70 <print_P>:
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	ec 01       	movw	r28, r24
    2d78:	21 96       	adiw	r28, 0x01	; 1
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	14 91       	lpm	r17, Z
    2d7e:	11 23       	and	r17, r17
    2d80:	69 f0       	breq	.+26     	; 0x2d9c <print_P+0x2c>
    2d82:	1a 30       	cpi	r17, 0x0A	; 10
    2d84:	19 f4       	brne	.+6      	; 0x2d8c <print_P+0x1c>
    2d86:	8d e0       	ldi	r24, 0x0D	; 13
    2d88:	0e 94 9a 14 	call	0x2934	; 0x2934 <m_usb_tx_char>
    2d8c:	81 2f       	mov	r24, r17
    2d8e:	0e 94 9a 14 	call	0x2934	; 0x2934 <m_usb_tx_char>
    2d92:	fe 01       	movw	r30, r28
    2d94:	14 91       	lpm	r17, Z
    2d96:	21 96       	adiw	r28, 0x01	; 1
    2d98:	11 11       	cpse	r17, r1
    2d9a:	f3 cf       	rjmp	.-26     	; 0x2d82 <print_P+0x12>
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	1f 91       	pop	r17
    2da2:	08 95       	ret

00002da4 <m_usb_tx_int>:
    2da4:	ef 92       	push	r14
    2da6:	ff 92       	push	r15
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	27 97       	sbiw	r28, 0x07	; 7
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	8e 01       	movw	r16, r28
    2dc2:	0f 5f       	subi	r16, 0xFF	; 255
    2dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc6:	27 e0       	ldi	r18, 0x07	; 7
    2dc8:	f8 01       	movw	r30, r16
    2dca:	11 92       	st	Z+, r1
    2dcc:	2a 95       	dec	r18
    2dce:	e9 f7       	brne	.-6      	; 0x2dca <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2dd0:	4a e0       	ldi	r20, 0x0A	; 10
    2dd2:	b8 01       	movw	r22, r16
    2dd4:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__itoa_ncheck>
    2dd8:	7e 01       	movw	r14, r28
    2dda:	f8 e0       	ldi	r31, 0x08	; 8
    2ddc:	ef 0e       	add	r14, r31
    2dde:	f1 1c       	adc	r15, r1
    2de0:	f8 01       	movw	r30, r16
    2de2:	81 91       	ld	r24, Z+
    2de4:	8f 01       	movw	r16, r30
    2de6:	81 11       	cpse	r24, r1
    2de8:	0e 94 9a 14 	call	0x2934	; 0x2934 <m_usb_tx_char>
    2dec:	0e 15       	cp	r16, r14
    2dee:	1f 05       	cpc	r17, r15
    2df0:	b9 f7       	brne	.-18     	; 0x2de0 <m_usb_tx_int+0x3c>
    2df2:	27 96       	adiw	r28, 0x07	; 7
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	08 95       	ret

00002e0c <twi_wait>:
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	ec eb       	ldi	r30, 0xBC	; 188
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	88 23       	and	r24, r24
    2e18:	34 f0       	brlt	.+12     	; 0x2e26 <twi_wait+0x1a>
    2e1a:	2f 5f       	subi	r18, 0xFF	; 255
    2e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1e:	29 3e       	cpi	r18, 0xE9	; 233
    2e20:	83 e0       	ldi	r24, 0x03	; 3
    2e22:	38 07       	cpc	r19, r24
    2e24:	b9 f7       	brne	.-18     	; 0x2e14 <twi_wait+0x8>
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	28 3e       	cpi	r18, 0xE8	; 232
    2e2a:	33 40       	sbci	r19, 0x03	; 3
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <twi_wait+0x24>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	08 95       	ret

00002e32 <send_byte>:
    2e32:	80 93 bb 00 	sts	0x00BB, r24
    2e36:	84 e8       	ldi	r24, 0x84	; 132
    2e38:	80 93 bc 00 	sts	0x00BC, r24
    2e3c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <twi_wait>
    2e40:	88 23       	and	r24, r24
    2e42:	19 f0       	breq	.+6      	; 0x2e4a <send_byte+0x18>
    2e44:	80 91 b9 00 	lds	r24, 0x00B9
    2e48:	88 7f       	andi	r24, 0xF8	; 248
    2e4a:	08 95       	ret

00002e4c <start_write>:
    2e4c:	cf 93       	push	r28
    2e4e:	c8 2f       	mov	r28, r24
    2e50:	94 ea       	ldi	r25, 0xA4	; 164
    2e52:	90 93 bc 00 	sts	0x00BC, r25
    2e56:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <twi_wait>
    2e5a:	88 23       	and	r24, r24
    2e5c:	61 f0       	breq	.+24     	; 0x2e76 <start_write+0x2a>
    2e5e:	8c 2f       	mov	r24, r28
    2e60:	88 0f       	add	r24, r24
    2e62:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2e66:	80 32       	cpi	r24, 0x20	; 32
    2e68:	29 f4       	brne	.+10     	; 0x2e74 <start_write+0x28>
    2e6a:	84 e9       	ldi	r24, 0x94	; 148
    2e6c:	80 93 bc 00 	sts	0x00BC, r24
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <start_write+0x2a>
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	cf 91       	pop	r28
    2e78:	08 95       	ret

00002e7a <m_wii_open>:
    2e7a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <m_bus_init>
    2e7e:	88 e5       	ldi	r24, 0x58	; 88
    2e80:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <start_write>
    2e84:	88 23       	and	r24, r24
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <m_wii_open+0x10>
    2e88:	cd c0       	rjmp	.+410    	; 0x3024 <m_wii_open+0x1aa>
    2e8a:	80 e3       	ldi	r24, 0x30	; 48
    2e8c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2e90:	88 23       	and	r24, r24
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <m_wii_open+0x1c>
    2e94:	c9 c0       	rjmp	.+402    	; 0x3028 <m_wii_open+0x1ae>
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2e9c:	88 23       	and	r24, r24
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <m_wii_open+0x28>
    2ea0:	c5 c0       	rjmp	.+394    	; 0x302c <m_wii_open+0x1b2>
    2ea2:	84 e9       	ldi	r24, 0x94	; 148
    2ea4:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ea8:	83 ec       	ldi	r24, 0xC3	; 195
    2eaa:	99 e0       	ldi	r25, 0x09	; 9
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <m_wii_open+0x32>
    2eb0:	00 c0       	rjmp	.+0      	; 0x2eb2 <m_wii_open+0x38>
    2eb2:	00 00       	nop
    2eb4:	88 e5       	ldi	r24, 0x58	; 88
    2eb6:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <start_write>
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <m_wii_open+0x46>
    2ebe:	b8 c0       	rjmp	.+368    	; 0x3030 <m_wii_open+0x1b6>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2ec6:	88 23       	and	r24, r24
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <m_wii_open+0x52>
    2eca:	b4 c0       	rjmp	.+360    	; 0x3034 <m_wii_open+0x1ba>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2ed2:	88 23       	and	r24, r24
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <m_wii_open+0x5e>
    2ed6:	b0 c0       	rjmp	.+352    	; 0x3038 <m_wii_open+0x1be>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2ede:	88 23       	and	r24, r24
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <m_wii_open+0x6a>
    2ee2:	ac c0       	rjmp	.+344    	; 0x303c <m_wii_open+0x1c2>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2eea:	88 23       	and	r24, r24
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <m_wii_open+0x76>
    2eee:	a8 c0       	rjmp	.+336    	; 0x3040 <m_wii_open+0x1c6>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2ef6:	88 23       	and	r24, r24
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <m_wii_open+0x82>
    2efa:	a4 c0       	rjmp	.+328    	; 0x3044 <m_wii_open+0x1ca>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f02:	88 23       	and	r24, r24
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <m_wii_open+0x8e>
    2f06:	a0 c0       	rjmp	.+320    	; 0x3048 <m_wii_open+0x1ce>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f0e:	88 23       	and	r24, r24
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <m_wii_open+0x9a>
    2f12:	9c c0       	rjmp	.+312    	; 0x304c <m_wii_open+0x1d2>
    2f14:	80 e9       	ldi	r24, 0x90	; 144
    2f16:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f1a:	88 23       	and	r24, r24
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <m_wii_open+0xa6>
    2f1e:	98 c0       	rjmp	.+304    	; 0x3050 <m_wii_open+0x1d6>
    2f20:	84 e9       	ldi	r24, 0x94	; 148
    2f22:	80 93 bc 00 	sts	0x00BC, r24
    2f26:	83 ec       	ldi	r24, 0xC3	; 195
    2f28:	99 e0       	ldi	r25, 0x09	; 9
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <m_wii_open+0xb0>
    2f2e:	00 c0       	rjmp	.+0      	; 0x2f30 <m_wii_open+0xb6>
    2f30:	00 00       	nop
    2f32:	88 e5       	ldi	r24, 0x58	; 88
    2f34:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <start_write>
    2f38:	88 23       	and	r24, r24
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <m_wii_open+0xc4>
    2f3c:	8b c0       	rjmp	.+278    	; 0x3054 <m_wii_open+0x1da>
    2f3e:	87 e0       	ldi	r24, 0x07	; 7
    2f40:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f44:	88 23       	and	r24, r24
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <m_wii_open+0xd0>
    2f48:	87 c0       	rjmp	.+270    	; 0x3058 <m_wii_open+0x1de>
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f50:	88 23       	and	r24, r24
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <m_wii_open+0xdc>
    2f54:	83 c0       	rjmp	.+262    	; 0x305c <m_wii_open+0x1e2>
    2f56:	81 e4       	ldi	r24, 0x41	; 65
    2f58:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f5c:	88 23       	and	r24, r24
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <m_wii_open+0xe8>
    2f60:	7f c0       	rjmp	.+254    	; 0x3060 <m_wii_open+0x1e6>
    2f62:	84 e9       	ldi	r24, 0x94	; 148
    2f64:	80 93 bc 00 	sts	0x00BC, r24
    2f68:	83 ec       	ldi	r24, 0xC3	; 195
    2f6a:	99 e0       	ldi	r25, 0x09	; 9
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <m_wii_open+0xf2>
    2f70:	00 c0       	rjmp	.+0      	; 0x2f72 <m_wii_open+0xf8>
    2f72:	00 00       	nop
    2f74:	88 e5       	ldi	r24, 0x58	; 88
    2f76:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <start_write>
    2f7a:	88 23       	and	r24, r24
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <m_wii_open+0x106>
    2f7e:	72 c0       	rjmp	.+228    	; 0x3064 <m_wii_open+0x1ea>
    2f80:	8a e1       	ldi	r24, 0x1A	; 26
    2f82:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f86:	88 23       	and	r24, r24
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <m_wii_open+0x112>
    2f8a:	6e c0       	rjmp	.+220    	; 0x3068 <m_wii_open+0x1ee>
    2f8c:	80 e4       	ldi	r24, 0x40	; 64
    2f8e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f92:	88 23       	and	r24, r24
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <m_wii_open+0x11e>
    2f96:	6a c0       	rjmp	.+212    	; 0x306c <m_wii_open+0x1f2>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2f9e:	88 23       	and	r24, r24
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <m_wii_open+0x12a>
    2fa2:	66 c0       	rjmp	.+204    	; 0x3070 <m_wii_open+0x1f6>
    2fa4:	84 e9       	ldi	r24, 0x94	; 148
    2fa6:	80 93 bc 00 	sts	0x00BC, r24
    2faa:	83 ec       	ldi	r24, 0xC3	; 195
    2fac:	99 e0       	ldi	r25, 0x09	; 9
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <m_wii_open+0x134>
    2fb2:	00 c0       	rjmp	.+0      	; 0x2fb4 <m_wii_open+0x13a>
    2fb4:	00 00       	nop
    2fb6:	88 e5       	ldi	r24, 0x58	; 88
    2fb8:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <start_write>
    2fbc:	88 23       	and	r24, r24
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <m_wii_open+0x148>
    2fc0:	59 c0       	rjmp	.+178    	; 0x3074 <m_wii_open+0x1fa>
    2fc2:	83 e3       	ldi	r24, 0x33	; 51
    2fc4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2fc8:	88 23       	and	r24, r24
    2fca:	09 f4       	brne	.+2      	; 0x2fce <m_wii_open+0x154>
    2fcc:	55 c0       	rjmp	.+170    	; 0x3078 <m_wii_open+0x1fe>
    2fce:	83 e0       	ldi	r24, 0x03	; 3
    2fd0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2fd4:	88 23       	and	r24, r24
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <m_wii_open+0x160>
    2fd8:	51 c0       	rjmp	.+162    	; 0x307c <m_wii_open+0x202>
    2fda:	84 e9       	ldi	r24, 0x94	; 148
    2fdc:	80 93 bc 00 	sts	0x00BC, r24
    2fe0:	83 ec       	ldi	r24, 0xC3	; 195
    2fe2:	99 e0       	ldi	r25, 0x09	; 9
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <m_wii_open+0x16a>
    2fe8:	00 c0       	rjmp	.+0      	; 0x2fea <m_wii_open+0x170>
    2fea:	00 00       	nop
    2fec:	88 e5       	ldi	r24, 0x58	; 88
    2fee:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <start_write>
    2ff2:	88 23       	and	r24, r24
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <m_wii_open+0x17e>
    2ff6:	44 c0       	rjmp	.+136    	; 0x3080 <m_wii_open+0x206>
    2ff8:	80 e3       	ldi	r24, 0x30	; 48
    2ffa:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    2ffe:	88 23       	and	r24, r24
    3000:	09 f4       	brne	.+2      	; 0x3004 <m_wii_open+0x18a>
    3002:	40 c0       	rjmp	.+128    	; 0x3084 <m_wii_open+0x20a>
    3004:	88 e0       	ldi	r24, 0x08	; 8
    3006:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    300a:	88 23       	and	r24, r24
    300c:	e9 f1       	breq	.+122    	; 0x3088 <m_wii_open+0x20e>
    300e:	84 e9       	ldi	r24, 0x94	; 148
    3010:	80 93 bc 00 	sts	0x00BC, r24
    3014:	83 ec       	ldi	r24, 0xC3	; 195
    3016:	99 e0       	ldi	r25, 0x09	; 9
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <m_wii_open+0x19e>
    301c:	00 c0       	rjmp	.+0      	; 0x301e <m_wii_open+0x1a4>
    301e:	00 00       	nop
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	08 95       	ret
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	08 95       	ret
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	08 95       	ret
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	08 95       	ret
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	08 95       	ret
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	08 95       	ret
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	08 95       	ret
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	08 95       	ret
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	08 95       	ret
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	08 95       	ret
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	08 95       	ret
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	08 95       	ret
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	08 95       	ret
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	08 95       	ret
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	08 95       	ret
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	08 95       	ret
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	08 95       	ret
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	08 95       	ret
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	08 95       	ret
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	08 95       	ret
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	08 95       	ret
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	08 95       	ret
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	08 95       	ret
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	08 95       	ret
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	08 95       	ret
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	08 95       	ret
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	08 95       	ret

0000308c <start_read>:
    308c:	cf 93       	push	r28
    308e:	c8 2f       	mov	r28, r24
    3090:	94 ea       	ldi	r25, 0xA4	; 164
    3092:	90 93 bc 00 	sts	0x00BC, r25
    3096:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <twi_wait>
    309a:	88 23       	and	r24, r24
    309c:	69 f0       	breq	.+26     	; 0x30b8 <start_read+0x2c>
    309e:	8c 2f       	mov	r24, r28
    30a0:	88 0f       	add	r24, r24
    30a2:	8f 5f       	subi	r24, 0xFF	; 255
    30a4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    30a8:	88 34       	cpi	r24, 0x48	; 72
    30aa:	29 f4       	brne	.+10     	; 0x30b6 <start_read+0x2a>
    30ac:	84 e9       	ldi	r24, 0x94	; 148
    30ae:	80 93 bc 00 	sts	0x00BC, r24
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <start_read+0x2c>
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	cf 91       	pop	r28
    30ba:	08 95       	ret

000030bc <m_wii_read>:
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	60 97       	sbiw	r28, 0x10	; 16
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	08 2f       	mov	r16, r24
    30da:	19 2f       	mov	r17, r25
    30dc:	fe 01       	movw	r30, r28
    30de:	31 96       	adiw	r30, 0x01	; 1
    30e0:	80 e1       	ldi	r24, 0x10	; 16
    30e2:	df 01       	movw	r26, r30
    30e4:	1d 92       	st	X+, r1
    30e6:	8a 95       	dec	r24
    30e8:	e9 f7       	brne	.-6      	; 0x30e4 <m_wii_read+0x28>
    30ea:	88 e5       	ldi	r24, 0x58	; 88
    30ec:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <start_write>
    30f0:	88 23       	and	r24, r24
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <m_wii_read+0x3a>
    30f4:	6e c0       	rjmp	.+220    	; 0x31d2 <m_wii_read+0x116>
    30f6:	86 e3       	ldi	r24, 0x36	; 54
    30f8:	0e 94 19 17 	call	0x2e32	; 0x2e32 <send_byte>
    30fc:	88 23       	and	r24, r24
    30fe:	09 f4       	brne	.+2      	; 0x3102 <m_wii_read+0x46>
    3100:	6a c0       	rjmp	.+212    	; 0x31d6 <m_wii_read+0x11a>
    3102:	84 e9       	ldi	r24, 0x94	; 148
    3104:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3108:	b8 e0       	ldi	r27, 0x08	; 8
    310a:	ba 95       	dec	r27
    310c:	f1 f7       	brne	.-4      	; 0x310a <m_wii_read+0x4e>
    310e:	00 00       	nop
    3110:	88 e5       	ldi	r24, 0x58	; 88
    3112:	0e 94 46 18 	call	0x308c	; 0x308c <start_read>
    3116:	88 23       	and	r24, r24
    3118:	09 f4       	brne	.+2      	; 0x311c <m_wii_read+0x60>
    311a:	5f c0       	rjmp	.+190    	; 0x31da <m_wii_read+0x11e>
    311c:	be 01       	movw	r22, r28
    311e:	6f 5f       	subi	r22, 0xFF	; 255
    3120:	7f 4f       	sbci	r23, 0xFF	; 255
    3122:	9e 01       	movw	r18, r28
    3124:	20 5f       	subi	r18, 0xF0	; 240
    3126:	3f 4f       	sbci	r19, 0xFF	; 255
    3128:	ec eb       	ldi	r30, 0xBC	; 188
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	94 ec       	ldi	r25, 0xC4	; 196
    312e:	4b eb       	ldi	r20, 0xBB	; 187
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	90 83       	st	Z, r25
    3134:	80 81       	ld	r24, Z
    3136:	88 23       	and	r24, r24
    3138:	ec f7       	brge	.-6      	; 0x3134 <m_wii_read+0x78>
    313a:	da 01       	movw	r26, r20
    313c:	8c 91       	ld	r24, X
    313e:	db 01       	movw	r26, r22
    3140:	8d 93       	st	X+, r24
    3142:	bd 01       	movw	r22, r26
    3144:	a2 17       	cp	r26, r18
    3146:	b3 07       	cpc	r27, r19
    3148:	a1 f7       	brne	.-24     	; 0x3132 <m_wii_read+0x76>
    314a:	84 e8       	ldi	r24, 0x84	; 132
    314c:	80 93 bc 00 	sts	0x00BC, r24
    3150:	ec eb       	ldi	r30, 0xBC	; 188
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	88 23       	and	r24, r24
    3158:	ec f7       	brge	.-6      	; 0x3154 <m_wii_read+0x98>
    315a:	80 91 bb 00 	lds	r24, 0x00BB
    315e:	88 8b       	std	Y+16, r24	; 0x10
    3160:	84 e9       	ldi	r24, 0x94	; 148
    3162:	80 93 bc 00 	sts	0x00BC, r24
    3166:	fe 01       	movw	r30, r28
    3168:	34 96       	adiw	r30, 0x04	; 4
    316a:	e0 2e       	mov	r14, r16
    316c:	f1 2e       	mov	r15, r17
    316e:	80 81       	ld	r24, Z
    3170:	98 2f       	mov	r25, r24
    3172:	90 73       	andi	r25, 0x30	; 48
    3174:	af 01       	movw	r20, r30
    3176:	42 50       	subi	r20, 0x02	; 2
    3178:	51 09       	sbc	r21, r1
    317a:	da 01       	movw	r26, r20
    317c:	4c 91       	ld	r20, X
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	b0 e1       	ldi	r27, 0x10	; 16
    3182:	9b 9f       	mul	r25, r27
    3184:	40 0d       	add	r20, r0
    3186:	51 1d       	adc	r21, r1
    3188:	11 24       	eor	r1, r1
    318a:	d7 01       	movw	r26, r14
    318c:	4d 93       	st	X+, r20
    318e:	5c 93       	st	X, r21
    3190:	48 2f       	mov	r20, r24
    3192:	40 7c       	andi	r20, 0xC0	; 192
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	44 0f       	add	r20, r20
    3198:	55 1f       	adc	r21, r21
    319a:	44 0f       	add	r20, r20
    319c:	55 1f       	adc	r21, r21
    319e:	bf 01       	movw	r22, r30
    31a0:	61 50       	subi	r22, 0x01	; 1
    31a2:	71 09       	sbc	r23, r1
    31a4:	db 01       	movw	r26, r22
    31a6:	9c 91       	ld	r25, X
    31a8:	49 0f       	add	r20, r25
    31aa:	51 1d       	adc	r21, r1
    31ac:	d7 01       	movw	r26, r14
    31ae:	13 96       	adiw	r26, 0x03	; 3
    31b0:	5c 93       	st	X, r21
    31b2:	4e 93       	st	-X, r20
    31b4:	12 97       	sbiw	r26, 0x02	; 2
    31b6:	8f 70       	andi	r24, 0x0F	; 15
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	15 96       	adiw	r26, 0x05	; 5
    31bc:	9c 93       	st	X, r25
    31be:	8e 93       	st	-X, r24
    31c0:	14 97       	sbiw	r26, 0x04	; 4
    31c2:	33 96       	adiw	r30, 0x03	; 3
    31c4:	b6 e0       	ldi	r27, 0x06	; 6
    31c6:	eb 0e       	add	r14, r27
    31c8:	f1 1c       	adc	r15, r1
    31ca:	2e 17       	cp	r18, r30
    31cc:	3f 07       	cpc	r19, r31
    31ce:	79 f6       	brne	.-98     	; 0x316e <m_wii_read+0xb2>
    31d0:	06 c0       	rjmp	.+12     	; 0x31de <m_wii_read+0x122>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	05 c0       	rjmp	.+10     	; 0x31e0 <m_wii_read+0x124>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	03 c0       	rjmp	.+6      	; 0x31e0 <m_wii_read+0x124>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <m_wii_read+0x124>
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	60 96       	adiw	r28, 0x10	; 16
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	ff 90       	pop	r15
    31f6:	ef 90       	pop	r14
    31f8:	08 95       	ret

000031fa <__vector_3>:
		m_wait(wait);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){	
    31fa:	1f 92       	push	r1
    31fc:	0f 92       	push	r0
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	0f 92       	push	r0
    3202:	11 24       	eor	r1, r1
    3204:	2f 93       	push	r18
    3206:	3f 93       	push	r19
    3208:	4f 93       	push	r20
    320a:	5f 93       	push	r21
    320c:	6f 93       	push	r22
    320e:	7f 93       	push	r23
    3210:	8f 93       	push	r24
    3212:	9f 93       	push	r25
    3214:	af 93       	push	r26
    3216:	bf 93       	push	r27
    3218:	ef 93       	push	r30
    321a:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    321c:	6a e0       	ldi	r22, 0x0A	; 10
    321e:	8e ea       	ldi	r24, 0xAE	; 174
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	0e 94 c3 13 	call	0x2786	; 0x2786 <m_rf_read>
	switch(buffer[0]){
    3226:	80 91 ae 01 	lds	r24, 0x01AE
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	fc 01       	movw	r30, r24
    322e:	e0 5a       	subi	r30, 0xA0	; 160
    3230:	f1 09       	sbc	r31, r1
    3232:	e4 32       	cpi	r30, 0x24	; 36
    3234:	f1 05       	cpc	r31, r1
    3236:	08 f0       	brcs	.+2      	; 0x323a <__vector_3+0x40>
    3238:	85 c1       	rjmp	.+778    	; 0x3544 <__vector_3+0x34a>
    323a:	e3 5a       	subi	r30, 0xA3	; 163
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    3242:	86 e8       	ldi	r24, 0x86	; 134
    3244:	93 e0       	ldi	r25, 0x03	; 3
    3246:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			state = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	90 93 bd 01 	sts	0x01BD, r25
    3252:	80 93 bc 01 	sts	0x01BC, r24
			break;
    3256:	76 c1       	rjmp	.+748    	; 0x3544 <__vector_3+0x34a>
		case 0xA1:
			m_usb_tx_string("Play \n");
    3258:	8f e7       	ldi	r24, 0x7F	; 127
    325a:	93 e0       	ldi	r25, 0x03	; 3
    325c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			if(check(PINC, 7)){
    3260:	37 9b       	sbis	0x06, 7	; 6
    3262:	19 c0       	rjmp	.+50     	; 0x3296 <__vector_3+0x9c>
				goal[0] = GateB;  // left gate
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	a9 eb       	ldi	r26, 0xB9	; 185
    326a:	b3 ec       	ldi	r27, 0xC3	; 195
    326c:	80 93 35 01 	sts	0x0135, r24
    3270:	90 93 36 01 	sts	0x0136, r25
    3274:	a0 93 37 01 	sts	0x0137, r26
    3278:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = -xline;  // left defense line
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	a8 e4       	ldi	r26, 0x48	; 72
    3282:	b3 ec       	ldi	r27, 0xC3	; 195
    3284:	80 93 2d 01 	sts	0x012D, r24
    3288:	90 93 2e 01 	sts	0x012E, r25
    328c:	a0 93 2f 01 	sts	0x012F, r26
    3290:	b0 93 30 01 	sts	0x0130, r27
    3294:	18 c0       	rjmp	.+48     	; 0x32c6 <__vector_3+0xcc>
			}
			else{
				goal[0] = GateA;  // right gate
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	a9 eb       	ldi	r26, 0xB9	; 185
    329c:	b3 e4       	ldi	r27, 0x43	; 67
    329e:	80 93 35 01 	sts	0x0135, r24
    32a2:	90 93 36 01 	sts	0x0136, r25
    32a6:	a0 93 37 01 	sts	0x0137, r26
    32aa:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = xline;	// right defense line
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	a8 e4       	ldi	r26, 0x48	; 72
    32b4:	b3 e4       	ldi	r27, 0x43	; 67
    32b6:	80 93 2d 01 	sts	0x012D, r24
    32ba:	90 93 2e 01 	sts	0x012E, r25
    32be:	a0 93 2f 01 	sts	0x012F, r26
    32c2:	b0 93 30 01 	sts	0x0130, r27
			}
			if(check(PINC, 6)){
    32c6:	36 9b       	sbis	0x06, 6	; 6
    32c8:	03 c0       	rjmp	.+6      	; 0x32d0 <__vector_3+0xd6>
				set(PORTB, 2); // red light
    32ca:	2a 9a       	sbi	0x05, 2	; 5
				clear(PORTB, 3);
    32cc:	2b 98       	cbi	0x05, 3	; 5
    32ce:	02 c0       	rjmp	.+4      	; 0x32d4 <__vector_3+0xda>
			}
			else{
				set(PORTB, 3); // blue light
    32d0:	2b 9a       	sbi	0x05, 3	; 5
				clear(PORTB, 2);
    32d2:	2a 98       	cbi	0x05, 2	; 5
			}
			state = 2; 
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	90 93 bd 01 	sts	0x01BD, r25
    32dc:	80 93 bc 01 	sts	0x01BC, r24
			findPuck(state);
    32e0:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
    32e4:	2a e9       	ldi	r18, 0x9A	; 154
    32e6:	31 e0       	ldi	r19, 0x01	; 1
    32e8:	42 ea       	ldi	r20, 0xA2	; 162
    32ea:	51 e0       	ldi	r21, 0x01	; 1
    32ec:	65 e3       	ldi	r22, 0x35	; 53
    32ee:	71 e0       	ldi	r23, 0x01	; 1
    32f0:	8c eb       	ldi	r24, 0xBC	; 188
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	0e 94 22 0c 	call	0x1844	; 0x1844 <localization>
			deterState(&state);
    32f8:	8c eb       	ldi	r24, 0xBC	; 188
    32fa:	91 e0       	ldi	r25, 0x01	; 1
    32fc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <deterState>
			break;
    3300:	21 c1       	rjmp	.+578    	; 0x3544 <__vector_3+0x34a>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    3302:	87 e7       	ldi	r24, 0x77	; 119
    3304:	93 e0       	ldi	r25, 0x03	; 3
    3306:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			scoreR = buffer[1];
    330a:	80 91 af 01 	lds	r24, 0x01AF
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	90 93 ad 01 	sts	0x01AD, r25
    3314:	80 93 ac 01 	sts	0x01AC, r24
			scoreB = buffer[2];
    3318:	80 91 b0 01 	lds	r24, 0x01B0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	90 93 ab 01 	sts	0x01AB, r25
    3322:	80 93 aa 01 	sts	0x01AA, r24
			OCR1B = 0;
    3326:	10 92 8b 00 	sts	0x008B, r1
    332a:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    332e:	10 92 8d 00 	sts	0x008D, r1
    3332:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    3336:	10 92 bd 01 	sts	0x01BD, r1
    333a:	10 92 bc 01 	sts	0x01BC, r1
			break;
    333e:	02 c1       	rjmp	.+516    	; 0x3544 <__vector_3+0x34a>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    3340:	8f e6       	ldi	r24, 0x6F	; 111
    3342:	93 e0       	ldi	r25, 0x03	; 3
    3344:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			scoreR = buffer[1];
    3348:	80 91 af 01 	lds	r24, 0x01AF
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	90 93 ad 01 	sts	0x01AD, r25
    3352:	80 93 ac 01 	sts	0x01AC, r24
			scoreB = buffer[2];
    3356:	80 91 b0 01 	lds	r24, 0x01B0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	90 93 ab 01 	sts	0x01AB, r25
    3360:	80 93 aa 01 	sts	0x01AA, r24
			OCR1B = 0;
    3364:	10 92 8b 00 	sts	0x008B, r1
    3368:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    336c:	10 92 8d 00 	sts	0x008D, r1
    3370:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    3374:	10 92 bd 01 	sts	0x01BD, r1
    3378:	10 92 bc 01 	sts	0x01BC, r1
			break;
    337c:	e3 c0       	rjmp	.+454    	; 0x3544 <__vector_3+0x34a>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    337e:	88 e6       	ldi	r24, 0x68	; 104
    3380:	93 e0       	ldi	r25, 0x03	; 3
    3382:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			state = 0;
    3386:	10 92 bd 01 	sts	0x01BD, r1
    338a:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    338e:	10 92 8b 00 	sts	0x008B, r1
    3392:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3396:	10 92 8d 00 	sts	0x008D, r1
    339a:	10 92 8c 00 	sts	0x008C, r1
			break;
    339e:	d2 c0       	rjmp	.+420    	; 0x3544 <__vector_3+0x34a>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    33a0:	8e e5       	ldi	r24, 0x5E	; 94
    33a2:	93 e0       	ldi	r25, 0x03	; 3
    33a4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			if(check(PINC, 6)){
    33a8:	36 9b       	sbis	0x06, 6	; 6
    33aa:	19 c0       	rjmp	.+50     	; 0x33de <__vector_3+0x1e4>
				goal[0] = GateB;  // left gate
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	a9 eb       	ldi	r26, 0xB9	; 185
    33b2:	b3 ec       	ldi	r27, 0xC3	; 195
    33b4:	80 93 35 01 	sts	0x0135, r24
    33b8:	90 93 36 01 	sts	0x0136, r25
    33bc:	a0 93 37 01 	sts	0x0137, r26
    33c0:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = -xline;  // left defense line
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a8 e4       	ldi	r26, 0x48	; 72
    33ca:	b3 ec       	ldi	r27, 0xC3	; 195
    33cc:	80 93 2d 01 	sts	0x012D, r24
    33d0:	90 93 2e 01 	sts	0x012E, r25
    33d4:	a0 93 2f 01 	sts	0x012F, r26
    33d8:	b0 93 30 01 	sts	0x0130, r27
    33dc:	18 c0       	rjmp	.+48     	; 0x340e <__vector_3+0x214>
			}
			else{
				goal[0] = GateA;  // right gate
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	a9 eb       	ldi	r26, 0xB9	; 185
    33e4:	b3 e4       	ldi	r27, 0x43	; 67
    33e6:	80 93 35 01 	sts	0x0135, r24
    33ea:	90 93 36 01 	sts	0x0136, r25
    33ee:	a0 93 37 01 	sts	0x0137, r26
    33f2:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = xline;	// right defense line
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	a8 e4       	ldi	r26, 0x48	; 72
    33fc:	b3 e4       	ldi	r27, 0x43	; 67
    33fe:	80 93 2d 01 	sts	0x012D, r24
    3402:	90 93 2e 01 	sts	0x012E, r25
    3406:	a0 93 2f 01 	sts	0x012F, r26
    340a:	b0 93 30 01 	sts	0x0130, r27
			}

			state = 0;
    340e:	10 92 bd 01 	sts	0x01BD, r1
    3412:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    3416:	10 92 8b 00 	sts	0x008B, r1
    341a:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;			
    341e:	10 92 8d 00 	sts	0x008D, r1
    3422:	10 92 8c 00 	sts	0x008C, r1
			break;
    3426:	8e c0       	rjmp	.+284    	; 0x3544 <__vector_3+0x34a>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    3428:	83 e5       	ldi	r24, 0x53	; 83
    342a:	93 e0       	ldi	r25, 0x03	; 3
    342c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
			state = 0;
    3430:	10 92 bd 01 	sts	0x01BD, r1
    3434:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    3438:	10 92 8b 00 	sts	0x008B, r1
    343c:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3440:	10 92 8d 00 	sts	0x008D, r1
    3444:	10 92 8c 00 	sts	0x008C, r1
			break;
    3448:	7d c0       	rjmp	.+250    	; 0x3544 <__vector_3+0x34a>
// 			m_usb_tx_string("Its location is: ");
// 			m_usb_tx_int(sender_loc[0]);
// 			m_usb_tx_string("		y:");
// 			m_usb_tx_int(sender_loc[1]);
// 			m_usb_tx_string("\n");
			state = 2;
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	90 93 bd 01 	sts	0x01BD, r25
    3452:	80 93 bc 01 	sts	0x01BC, r24
			break;
    3456:	76 c0       	rjmp	.+236    	; 0x3544 <__vector_3+0x34a>
		case 0xC2: // teammates got the puck, extract No. and location
			senderNo = buffer[1]; // buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
    3458:	80 91 af 01 	lds	r24, 0x01AF
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	90 93 99 01 	sts	0x0199, r25
    3462:	80 93 98 01 	sts	0x0198, r24
			sender_loc[0] = *(int*)&buffer[2];
    3466:	ee ea       	ldi	r30, 0xAE	; 174
    3468:	f1 e0       	ldi	r31, 0x01	; 1
    346a:	22 81       	ldd	r18, Z+2	; 0x02
    346c:	33 81       	ldd	r19, Z+3	; 0x03
    346e:	30 93 95 01 	sts	0x0195, r19
    3472:	20 93 94 01 	sts	0x0194, r18
			sender_loc[1] = *(int*)&buffer[4];
    3476:	24 81       	ldd	r18, Z+4	; 0x04
    3478:	35 81       	ldd	r19, Z+5	; 0x05
    347a:	30 93 97 01 	sts	0x0197, r19
    347e:	20 93 96 01 	sts	0x0196, r18
// 			m_usb_tx_string("Its location is: ");
// 			m_usb_tx_int(sender_loc[0]);
// 			m_usb_tx_string("		y:");
// 			m_usb_tx_int(sender_loc[1]);
// 			m_usb_tx_string("\n");
			if (senderNo == 3){
    3482:	03 97       	sbiw	r24, 0x03	; 3
    3484:	e1 f4       	brne	.+56     	; 0x34be <__vector_3+0x2c4>
				if(check(PINC, 7)){
    3486:	37 9b       	sbis	0x06, 7	; 6
    3488:	0d c0       	rjmp	.+26     	; 0x34a4 <__vector_3+0x2aa>
					desPos[0] = GateA - 70;  // right gate
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	a6 e9       	ldi	r26, 0x96	; 150
    3490:	b3 e4       	ldi	r27, 0x43	; 67
    3492:	80 93 2d 01 	sts	0x012D, r24
    3496:	90 93 2e 01 	sts	0x012E, r25
    349a:	a0 93 2f 01 	sts	0x012F, r26
    349e:	b0 93 30 01 	sts	0x0130, r27
    34a2:	28 c0       	rjmp	.+80     	; 0x34f4 <__vector_3+0x2fa>
				}
				else{
					desPos[0] = GateB + 70;  // left gate
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	a6 e9       	ldi	r26, 0x96	; 150
    34aa:	b3 ec       	ldi	r27, 0xC3	; 195
    34ac:	80 93 2d 01 	sts	0x012D, r24
    34b0:	90 93 2e 01 	sts	0x012E, r25
    34b4:	a0 93 2f 01 	sts	0x012F, r26
    34b8:	b0 93 30 01 	sts	0x0130, r27
    34bc:	1b c0       	rjmp	.+54     	; 0x34f4 <__vector_3+0x2fa>
				}
			} 
			else{
				if(check(PINC, 7)){
    34be:	37 9b       	sbis	0x06, 7	; 6
    34c0:	0d c0       	rjmp	.+26     	; 0x34dc <__vector_3+0x2e2>
					desPos[0] = xline;  // right defense line
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	a8 e4       	ldi	r26, 0x48	; 72
    34c8:	b3 e4       	ldi	r27, 0x43	; 67
    34ca:	80 93 2d 01 	sts	0x012D, r24
    34ce:	90 93 2e 01 	sts	0x012E, r25
    34d2:	a0 93 2f 01 	sts	0x012F, r26
    34d6:	b0 93 30 01 	sts	0x0130, r27
    34da:	0c c0       	rjmp	.+24     	; 0x34f4 <__vector_3+0x2fa>
				}
				else{
					desPos[0] = -xline;  // left defense line
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	a8 e4       	ldi	r26, 0x48	; 72
    34e2:	b3 ec       	ldi	r27, 0xC3	; 195
    34e4:	80 93 2d 01 	sts	0x012D, r24
    34e8:	90 93 2e 01 	sts	0x012E, r25
    34ec:	a0 93 2f 01 	sts	0x012F, r26
    34f0:	b0 93 30 01 	sts	0x0130, r27
				}
			}
			state = 4;
    34f4:	84 e0       	ldi	r24, 0x04	; 4
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	90 93 bd 01 	sts	0x01BD, r25
    34fc:	80 93 bc 01 	sts	0x01BC, r24
			break;
    3500:	21 c0       	rjmp	.+66     	; 0x3544 <__vector_3+0x34a>
		case 0xC3:
			if(check(PINC, 7)){
    3502:	37 9b       	sbis	0x06, 7	; 6
    3504:	0d c0       	rjmp	.+26     	; 0x3520 <__vector_3+0x326>
				desPos[0] = GateA - 70;  // right gate
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	a6 e9       	ldi	r26, 0x96	; 150
    350c:	b3 e4       	ldi	r27, 0x43	; 67
    350e:	80 93 2d 01 	sts	0x012D, r24
    3512:	90 93 2e 01 	sts	0x012E, r25
    3516:	a0 93 2f 01 	sts	0x012F, r26
    351a:	b0 93 30 01 	sts	0x0130, r27
    351e:	0c c0       	rjmp	.+24     	; 0x3538 <__vector_3+0x33e>
			}
			else{
				desPos[0] = GateB + 70;  // left gate
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	a6 e9       	ldi	r26, 0x96	; 150
    3526:	b3 ec       	ldi	r27, 0xC3	; 195
    3528:	80 93 2d 01 	sts	0x012D, r24
    352c:	90 93 2e 01 	sts	0x012E, r25
    3530:	a0 93 2f 01 	sts	0x012F, r26
    3534:	b0 93 30 01 	sts	0x0130, r27
			}
			state = 5;
    3538:	85 e0       	ldi	r24, 0x05	; 5
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	90 93 bd 01 	sts	0x01BD, r25
    3540:	80 93 bc 01 	sts	0x01BC, r24
		default:
			break;
	}
}
    3544:	ff 91       	pop	r31
    3546:	ef 91       	pop	r30
    3548:	bf 91       	pop	r27
    354a:	af 91       	pop	r26
    354c:	9f 91       	pop	r25
    354e:	8f 91       	pop	r24
    3550:	7f 91       	pop	r23
    3552:	6f 91       	pop	r22
    3554:	5f 91       	pop	r21
    3556:	4f 91       	pop	r20
    3558:	3f 91       	pop	r19
    355a:	2f 91       	pop	r18
    355c:	0f 90       	pop	r0
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	0f 90       	pop	r0
    3562:	1f 90       	pop	r1
    3564:	18 95       	reti

00003566 <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    3566:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    3568:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    356a:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    356c:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
    356e:	80 e2       	ldi	r24, 0x20	; 32
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	90 93 89 00 	sts	0x0089, r25
    3576:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    357a:	10 92 8b 00 	sts	0x008B, r1
    357e:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
    3582:	10 92 8d 00 	sts	0x008D, r1
    3586:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    358a:	a1 e8       	ldi	r26, 0x81	; 129
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	8c 91       	ld	r24, X
    3590:	80 61       	ori	r24, 0x10	; 16
    3592:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    3594:	8c 91       	ld	r24, X
    3596:	88 60       	ori	r24, 0x08	; 8
    3598:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    359a:	e0 e8       	ldi	r30, 0x80	; 128
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	82 60       	ori	r24, 0x02	; 2
    35a2:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    35a4:	80 81       	ld	r24, Z
    35a6:	81 60       	ori	r24, 0x01	; 1
    35a8:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    35aa:	80 81       	ld	r24, Z
    35ac:	80 62       	ori	r24, 0x20	; 32
    35ae:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    35b0:	80 81       	ld	r24, Z
    35b2:	8f 7e       	andi	r24, 0xEF	; 239
    35b4:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    35b6:	80 81       	ld	r24, Z
    35b8:	88 60       	ori	r24, 0x08	; 8
    35ba:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    35bc:	80 81       	ld	r24, Z
    35be:	8b 7f       	andi	r24, 0xFB	; 251
    35c0:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    35c2:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    35c4:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    35c6:	8c 91       	ld	r24, X
    35c8:	8b 7f       	andi	r24, 0xFB	; 251
    35ca:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    35cc:	8c 91       	ld	r24, X
    35ce:	8d 7f       	andi	r24, 0xFD	; 253
    35d0:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    35d2:	8c 91       	ld	r24, X
    35d4:	81 60       	ori	r24, 0x01	; 1
    35d6:	8c 93       	st	X, r24
    35d8:	08 95       	ret

000035da <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    35da:	e1 e6       	ldi	r30, 0x61	; 97
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	80 e8       	ldi	r24, 0x80	; 128
    35e0:	80 83       	st	Z, r24
    35e2:	10 82       	st	Z, r1
	
	state = 0;
    35e4:	10 92 bd 01 	sts	0x01BD, r1
    35e8:	10 92 bc 01 	sts	0x01BC, r1
	
	m_usb_init();
    35ec:	0e 94 81 14 	call	0x2902	; 0x2902 <m_usb_init>
	
	m_wii_open();
    35f0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <m_wii_open>
	//m_red(ON);
	//while(!m_wii_open());
	//m_red(OFF);
	
	m_red(ON);
    35f4:	6e 9a       	sbi	0x0d, 6	; 13
    35f6:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    35f8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    35fc:	4a e0       	ldi	r20, 0x0A	; 10
    35fe:	6d e0       	ldi	r22, 0x0D	; 13
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	0e 94 6d 13 	call	0x26da	; 0x26da <m_rf_open>
	m_red(OFF);
    3606:	6e 9a       	sbi	0x0d, 6	; 13
    3608:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    360a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <init_timer>
	init_ADC();
    360e:	0e 94 91 02 	call	0x522	; 0x522 <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    3612:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
    3614:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
    3616:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
    3618:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    361a:	23 9a       	sbi	0x04, 3	; 4

	if(check(PINC, 7)){
    361c:	37 9b       	sbis	0x06, 7	; 6
    361e:	19 c0       	rjmp	.+50     	; 0x3652 <main+0x78>
		goal[0] = GateB;  // left gate
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	a9 eb       	ldi	r26, 0xB9	; 185
    3626:	b3 ec       	ldi	r27, 0xC3	; 195
    3628:	80 93 35 01 	sts	0x0135, r24
    362c:	90 93 36 01 	sts	0x0136, r25
    3630:	a0 93 37 01 	sts	0x0137, r26
    3634:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = xline;  // right defense line
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	a8 e4       	ldi	r26, 0x48	; 72
    363e:	b3 e4       	ldi	r27, 0x43	; 67
    3640:	80 93 2d 01 	sts	0x012D, r24
    3644:	90 93 2e 01 	sts	0x012E, r25
    3648:	a0 93 2f 01 	sts	0x012F, r26
    364c:	b0 93 30 01 	sts	0x0130, r27
    3650:	18 c0       	rjmp	.+48     	; 0x3682 <main+0xa8>
	}
	else{
		goal[0] = GateA;  // right gate
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	a9 eb       	ldi	r26, 0xB9	; 185
    3658:	b3 e4       	ldi	r27, 0x43	; 67
    365a:	80 93 35 01 	sts	0x0135, r24
    365e:	90 93 36 01 	sts	0x0136, r25
    3662:	a0 93 37 01 	sts	0x0137, r26
    3666:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = -xline;	// left defense line
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	a8 e4       	ldi	r26, 0x48	; 72
    3670:	b3 ec       	ldi	r27, 0xC3	; 195
    3672:	80 93 2d 01 	sts	0x012D, r24
    3676:	90 93 2e 01 	sts	0x012E, r25
    367a:	a0 93 2f 01 	sts	0x012F, r26
    367e:	b0 93 30 01 	sts	0x0130, r27
	}
	if(check(PINC, 6)){
    3682:	36 9b       	sbis	0x06, 6	; 6
    3684:	1c c0       	rjmp	.+56     	; 0x36be <main+0xe4>
		set(PORTB, 2); // red light
    3686:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
    3688:	2b 98       	cbi	0x05, 3	; 5
				}
				m_red(TOGGLE);
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    368a:	68 94       	set
    368c:	bb 24       	eor	r11, r11
    368e:	b6 f8       	bld	r11, 6
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
				m_usb_tx_string("\n");
				break;
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    3690:	68 94       	set
    3692:	aa 24       	eor	r10, r10
    3694:	a2 f8       	bld	r10, 2
				m_red(TOGGLE);
				localization(&state, &desPos[0], &c_wii[0], &dir[0]);
				m_usb_tx_string("Desire Position = ");
				m_usb_tx_int(desPos[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(desPos[1]);
    3696:	0f 2e       	mov	r0, r31
    3698:	f1 e3       	ldi	r31, 0x31	; 49
    369a:	cf 2e       	mov	r12, r31
    369c:	f1 e0       	ldi	r31, 0x01	; 1
    369e:	df 2e       	mov	r13, r31
    36a0:	f0 2d       	mov	r31, r0
					findPuck(state);
				}
				m_usb_tx_string("goal = ");
				m_usb_tx_int(goal[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
    36a2:	0f 2e       	mov	r0, r31
    36a4:	f9 e3       	ldi	r31, 0x39	; 57
    36a6:	ef 2e       	mov	r14, r31
    36a8:	f1 e0       	ldi	r31, 0x01	; 1
    36aa:	ff 2e       	mov	r15, r31
    36ac:	f0 2d       	mov	r31, r0
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
    36ae:	0a e8       	ldi	r16, 0x8A	; 138
    36b0:	10 e0       	ldi	r17, 0x00	; 0
				OCR1C = 0;
    36b2:	cc e8       	ldi	r28, 0x8C	; 140
    36b4:	d0 e0       	ldi	r29, 0x00	; 0
				if(check(PINC, 6)){
					toggle(PORTB, 2); // blue Red
					clear(PORTB, 3);
				}
				else{
					toggle(PORTB, 3); // red blue
    36b6:	68 94       	set
    36b8:	99 24       	eor	r9, r9
    36ba:	93 f8       	bld	r9, 3
    36bc:	03 c0       	rjmp	.+6      	; 0x36c4 <main+0xea>
	if(check(PINC, 6)){
		set(PORTB, 2); // red light
		clear(PORTB, 3);
	}
	else{
		set(PORTB, 3); // blue light
    36be:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
    36c0:	2a 98       	cbi	0x05, 2	; 5
    36c2:	e3 cf       	rjmp	.-58     	; 0x368a <main+0xb0>
	}
	while(1)
	{	
		m_usb_tx_string("state: ");
    36c4:	87 e0       	ldi	r24, 0x07	; 7
    36c6:	94 e0       	ldi	r25, 0x04	; 4
    36c8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		m_usb_tx_int(state);
    36cc:	80 91 bc 01 	lds	r24, 0x01BC
    36d0:	90 91 bd 01 	lds	r25, 0x01BD
    36d4:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
		m_usb_tx_string("\n");
    36d8:	85 e0       	ldi	r24, 0x05	; 5
    36da:	94 e0       	ldi	r25, 0x04	; 4
    36dc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		switch(state){
    36e0:	80 91 bc 01 	lds	r24, 0x01BC
    36e4:	90 91 bd 01 	lds	r25, 0x01BD
    36e8:	82 30       	cpi	r24, 0x02	; 2
    36ea:	91 05       	cpc	r25, r1
    36ec:	79 f1       	breq	.+94     	; 0x374c <main+0x172>
    36ee:	2c f4       	brge	.+10     	; 0x36fa <main+0x120>
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	69 f0       	breq	.+26     	; 0x370e <main+0x134>
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	89 f0       	breq	.+34     	; 0x371a <main+0x140>
    36f8:	10 c1       	rjmp	.+544    	; 0x391a <main+0x340>
    36fa:	84 30       	cpi	r24, 0x04	; 4
    36fc:	91 05       	cpc	r25, r1
    36fe:	09 f4       	brne	.+2      	; 0x3702 <main+0x128>
    3700:	a5 c0       	rjmp	.+330    	; 0x384c <main+0x272>
    3702:	0c f4       	brge	.+2      	; 0x3706 <main+0x12c>
    3704:	52 c0       	rjmp	.+164    	; 0x37aa <main+0x1d0>
    3706:	05 97       	sbiw	r24, 0x05	; 5
    3708:	09 f4       	brne	.+2      	; 0x370c <main+0x132>
    370a:	d6 c0       	rjmp	.+428    	; 0x38b8 <main+0x2de>
    370c:	06 c1       	rjmp	.+524    	; 0x391a <main+0x340>
			case 0:
				// stop
				OCR1B = 0;
    370e:	f8 01       	movw	r30, r16
    3710:	11 82       	std	Z+1, r1	; 0x01
    3712:	10 82       	st	Z, r1
				OCR1C = 0;
    3714:	19 82       	std	Y+1, r1	; 0x01
    3716:	18 82       	st	Y, r1
				break;
    3718:	00 c1       	rjmp	.+512    	; 0x391a <main+0x340>
			case 1:		// comm test, flash a LED
				if(check(PINC, 6)){
    371a:	36 9b       	sbis	0x06, 6	; 6
    371c:	05 c0       	rjmp	.+10     	; 0x3728 <main+0x14e>
					toggle(PORTB, 2); // blue Red
    371e:	85 b1       	in	r24, 0x05	; 5
    3720:	8a 25       	eor	r24, r10
    3722:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 3);
    3724:	2b 98       	cbi	0x05, 3	; 5
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <main+0x156>
				}
				else{
					toggle(PORTB, 3); // red blue
    3728:	85 b1       	in	r24, 0x05	; 5
    372a:	89 25       	eor	r24, r9
    372c:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 2);
    372e:	2a 98       	cbi	0x05, 2	; 5
				}
				m_red(TOGGLE);
    3730:	6e 9a       	sbi	0x0d, 6	; 13
    3732:	8e b1       	in	r24, 0x0e	; 14
    3734:	8b 25       	eor	r24, r11
    3736:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3738:	ff e3       	ldi	r31, 0x3F	; 63
    373a:	2d e0       	ldi	r18, 0x0D	; 13
    373c:	83 e0       	ldi	r24, 0x03	; 3
    373e:	f1 50       	subi	r31, 0x01	; 1
    3740:	20 40       	sbci	r18, 0x00	; 0
    3742:	80 40       	sbci	r24, 0x00	; 0
    3744:	e1 f7       	brne	.-8      	; 0x373e <main+0x164>
    3746:	00 c0       	rjmp	.+0      	; 0x3748 <main+0x16e>
    3748:	00 00       	nop
    374a:	e7 c0       	rjmp	.+462    	; 0x391a <main+0x340>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    374c:	6e 9a       	sbi	0x0d, 6	; 13
    374e:	8e b1       	in	r24, 0x0e	; 14
    3750:	8b 25       	eor	r24, r11
    3752:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    3754:	6a 9a       	sbi	0x0d, 2	; 13
    3756:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    3758:	80 91 bc 01 	lds	r24, 0x01BC
    375c:	90 91 bd 01 	lds	r25, 0x01BD
    3760:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
				deterState(&state);
    3764:	8c eb       	ldi	r24, 0xBC	; 188
    3766:	91 e0       	ldi	r25, 0x01	; 1
    3768:	0e 94 3d 07 	call	0xe7a	; 0xe7a <deterState>
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    376c:	2a e9       	ldi	r18, 0x9A	; 154
    376e:	31 e0       	ldi	r19, 0x01	; 1
    3770:	42 ea       	ldi	r20, 0xA2	; 162
    3772:	51 e0       	ldi	r21, 0x01	; 1
    3774:	65 e3       	ldi	r22, 0x35	; 53
    3776:	71 e0       	ldi	r23, 0x01	; 1
    3778:	8c eb       	ldi	r24, 0xBC	; 188
    377a:	91 e0       	ldi	r25, 0x01	; 1
    377c:	0e 94 22 0c 	call	0x1844	; 0x1844 <localization>
				if(state != 2){
    3780:	80 91 bc 01 	lds	r24, 0x01BC
    3784:	90 91 bd 01 	lds	r25, 0x01BD
    3788:	82 30       	cpi	r24, 0x02	; 2
    378a:	91 05       	cpc	r25, r1
    378c:	09 f4       	brne	.+2      	; 0x3790 <main+0x1b6>
    378e:	c5 c0       	rjmp	.+394    	; 0x391a <main+0x340>
					send_message(state, No, &buffer[0], &c_wii[0]);
    3790:	22 ea       	ldi	r18, 0xA2	; 162
    3792:	31 e0       	ldi	r19, 0x01	; 1
    3794:	4e ea       	ldi	r20, 0xAE	; 174
    3796:	51 e0       	ldi	r21, 0x01	; 1
    3798:	62 e0       	ldi	r22, 0x02	; 2
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	0e 94 27 02 	call	0x44e	; 0x44e <send_message>
					m_usb_tx_string("sent found messsage.\n");
    37a0:	8f ee       	ldi	r24, 0xEF	; 239
    37a2:	93 e0       	ldi	r25, 0x03	; 3
    37a4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
    37a8:	b8 c0       	rjmp	.+368    	; 0x391a <main+0x340>
				}
				break;
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    37aa:	6a 9a       	sbi	0x0d, 2	; 13
    37ac:	8e b1       	in	r24, 0x0e	; 14
    37ae:	8a 25       	eor	r24, r10
    37b0:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    37b2:	6e 9a       	sbi	0x0d, 6	; 13
    37b4:	76 9a       	sbi	0x0e, 6	; 14
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    37b6:	2a e9       	ldi	r18, 0x9A	; 154
    37b8:	31 e0       	ldi	r19, 0x01	; 1
    37ba:	42 ea       	ldi	r20, 0xA2	; 162
    37bc:	51 e0       	ldi	r21, 0x01	; 1
    37be:	65 e3       	ldi	r22, 0x35	; 53
    37c0:	71 e0       	ldi	r23, 0x01	; 1
    37c2:	8c eb       	ldi	r24, 0xBC	; 188
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	0e 94 22 0c 	call	0x1844	; 0x1844 <localization>
				deterState(&state);
    37ca:	8c eb       	ldi	r24, 0xBC	; 188
    37cc:	91 e0       	ldi	r25, 0x01	; 1
    37ce:	0e 94 3d 07 	call	0xe7a	; 0xe7a <deterState>
				if(state != 3){
    37d2:	80 91 bc 01 	lds	r24, 0x01BC
    37d6:	90 91 bd 01 	lds	r25, 0x01BD
    37da:	83 30       	cpi	r24, 0x03	; 3
    37dc:	91 05       	cpc	r25, r1
    37de:	91 f0       	breq	.+36     	; 0x3804 <main+0x22a>
					send_message(state, No, &buffer[0], &c_wii[0]);
    37e0:	22 ea       	ldi	r18, 0xA2	; 162
    37e2:	31 e0       	ldi	r19, 0x01	; 1
    37e4:	4e ea       	ldi	r20, 0xAE	; 174
    37e6:	51 e0       	ldi	r21, 0x01	; 1
    37e8:	62 e0       	ldi	r22, 0x02	; 2
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	0e 94 27 02 	call	0x44e	; 0x44e <send_message>
					m_usb_tx_string("sent lost messsage.\n");
    37f0:	8a ed       	ldi	r24, 0xDA	; 218
    37f2:	93 e0       	ldi	r25, 0x03	; 3
    37f4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
					findPuck(state);
    37f8:	80 91 bc 01 	lds	r24, 0x01BC
    37fc:	90 91 bd 01 	lds	r25, 0x01BD
    3800:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
				}
				m_usb_tx_string("goal = ");
    3804:	82 ed       	ldi	r24, 0xD2	; 210
    3806:	93 e0       	ldi	r25, 0x03	; 3
    3808:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				m_usb_tx_int(goal[0]);
    380c:	60 91 35 01 	lds	r22, 0x0135
    3810:	70 91 36 01 	lds	r23, 0x0136
    3814:	80 91 37 01 	lds	r24, 0x0137
    3818:	90 91 38 01 	lds	r25, 0x0138
    381c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    3820:	cb 01       	movw	r24, r22
    3822:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
				m_usb_tx_string(", ");
    3826:	8f ec       	ldi	r24, 0xCF	; 207
    3828:	93 e0       	ldi	r25, 0x03	; 3
    382a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				m_usb_tx_int(goal[1]);
    382e:	f7 01       	movw	r30, r14
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    383c:	cb 01       	movw	r24, r22
    383e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
				m_usb_tx_string("\n");
    3842:	8d ec       	ldi	r24, 0xCD	; 205
    3844:	93 e0       	ldi	r25, 0x03	; 3
    3846:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				break;
    384a:	67 c0       	rjmp	.+206    	; 0x391a <main+0x340>
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    384c:	6a 9a       	sbi	0x0d, 2	; 13
    384e:	8e b1       	in	r24, 0x0e	; 14
    3850:	8a 25       	eor	r24, r10
    3852:	8e b9       	out	0x0e, r24	; 14
				m_red(TOGGLE);
    3854:	6e 9a       	sbi	0x0d, 6	; 13
    3856:	8e b1       	in	r24, 0x0e	; 14
    3858:	8b 25       	eor	r24, r11
    385a:	8e b9       	out	0x0e, r24	; 14
				localization(&state, &desPos[0], &c_wii[0], &dir[0]);
    385c:	2a e9       	ldi	r18, 0x9A	; 154
    385e:	31 e0       	ldi	r19, 0x01	; 1
    3860:	42 ea       	ldi	r20, 0xA2	; 162
    3862:	51 e0       	ldi	r21, 0x01	; 1
    3864:	6d e2       	ldi	r22, 0x2D	; 45
    3866:	71 e0       	ldi	r23, 0x01	; 1
    3868:	8c eb       	ldi	r24, 0xBC	; 188
    386a:	91 e0       	ldi	r25, 0x01	; 1
    386c:	0e 94 22 0c 	call	0x1844	; 0x1844 <localization>
				m_usb_tx_string("Desire Position = ");
    3870:	8a eb       	ldi	r24, 0xBA	; 186
    3872:	93 e0       	ldi	r25, 0x03	; 3
    3874:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				m_usb_tx_int(desPos[0]);
    3878:	60 91 2d 01 	lds	r22, 0x012D
    387c:	70 91 2e 01 	lds	r23, 0x012E
    3880:	80 91 2f 01 	lds	r24, 0x012F
    3884:	90 91 30 01 	lds	r25, 0x0130
    3888:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    388c:	cb 01       	movw	r24, r22
    388e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
				m_usb_tx_string(", ");
    3892:	87 eb       	ldi	r24, 0xB7	; 183
    3894:	93 e0       	ldi	r25, 0x03	; 3
    3896:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				m_usb_tx_int(desPos[1]);
    389a:	f6 01       	movw	r30, r12
    389c:	60 81       	ld	r22, Z
    389e:	71 81       	ldd	r23, Z+1	; 0x01
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__fixsfsi>
    38a8:	cb 01       	movw	r24, r22
    38aa:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
				m_usb_tx_string("\n");
    38ae:	85 eb       	ldi	r24, 0xB5	; 181
    38b0:	93 e0       	ldi	r25, 0x03	; 3
    38b2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				break;
    38b6:	31 c0       	rjmp	.+98     	; 0x391a <main+0x340>
			case 5:		// defense mode
				m_red(TOGGLE);
    38b8:	6e 9a       	sbi	0x0d, 6	; 13
    38ba:	8e b1       	in	r24, 0x0e	; 14
    38bc:	8b 25       	eor	r24, r11
    38be:	8e b9       	out	0x0e, r24	; 14
				m_green(TOGGLE);
    38c0:	6a 9a       	sbi	0x0d, 2	; 13
    38c2:	8e b1       	in	r24, 0x0e	; 14
    38c4:	8a 25       	eor	r24, r10
    38c6:	8e b9       	out	0x0e, r24	; 14
				findPuck(state);
    38c8:	80 91 bc 01 	lds	r24, 0x01BC
    38cc:	90 91 bd 01 	lds	r25, 0x01BD
    38d0:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    38d4:	2a e9       	ldi	r18, 0x9A	; 154
    38d6:	31 e0       	ldi	r19, 0x01	; 1
    38d8:	42 ea       	ldi	r20, 0xA2	; 162
    38da:	51 e0       	ldi	r21, 0x01	; 1
    38dc:	65 e3       	ldi	r22, 0x35	; 53
    38de:	71 e0       	ldi	r23, 0x01	; 1
    38e0:	8c eb       	ldi	r24, 0xBC	; 188
    38e2:	91 e0       	ldi	r25, 0x01	; 1
    38e4:	0e 94 22 0c 	call	0x1844	; 0x1844 <localization>
				ifGotoPuck(&state, &dir[0]);
    38e8:	6a e9       	ldi	r22, 0x9A	; 154
    38ea:	71 e0       	ldi	r23, 0x01	; 1
    38ec:	8c eb       	ldi	r24, 0xBC	; 188
    38ee:	91 e0       	ldi	r25, 0x01	; 1
    38f0:	0e 94 62 07 	call	0xec4	; 0xec4 <ifGotoPuck>
				if(state != 5){
    38f4:	80 91 bc 01 	lds	r24, 0x01BC
    38f8:	90 91 bd 01 	lds	r25, 0x01BD
    38fc:	85 30       	cpi	r24, 0x05	; 5
    38fe:	91 05       	cpc	r25, r1
    3900:	61 f0       	breq	.+24     	; 0x391a <main+0x340>
					send_message(state, No, &buffer[0], &c_wii[0]);
    3902:	22 ea       	ldi	r18, 0xA2	; 162
    3904:	31 e0       	ldi	r19, 0x01	; 1
    3906:	4e ea       	ldi	r20, 0xAE	; 174
    3908:	51 e0       	ldi	r21, 0x01	; 1
    390a:	62 e0       	ldi	r22, 0x02	; 2
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	0e 94 27 02 	call	0x44e	; 0x44e <send_message>
					m_usb_tx_string("sent found message.\n");
    3912:	80 ea       	ldi	r24, 0xA0	; 160
    3914:	93 e0       	ldi	r25, 0x03	; 3
    3916:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
				break;
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    391a:	87 e9       	ldi	r24, 0x97	; 151
    391c:	93 e0       	ldi	r25, 0x03	; 3
    391e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		m_usb_tx_int(OCR1B);
    3922:	f8 01       	movw	r30, r16
    3924:	80 81       	ld	r24, Z
    3926:	91 81       	ldd	r25, Z+1	; 0x01
    3928:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
		m_usb_tx_string(", ");
    392c:	84 e9       	ldi	r24, 0x94	; 148
    392e:	93 e0       	ldi	r25, 0x03	; 3
    3930:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
		m_usb_tx_int(OCR1C);
    3934:	88 81       	ld	r24, Y
    3936:	99 81       	ldd	r25, Y+1	; 0x01
    3938:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <m_usb_tx_int>
		m_usb_tx_string("\n");
    393c:	82 e9       	ldi	r24, 0x92	; 146
    393e:	93 e0       	ldi	r25, 0x03	; 3
    3940:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <print_P>
    3944:	83 ec       	ldi	r24, 0xC3	; 195
    3946:	99 e0       	ldi	r25, 0x09	; 9
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	f1 f7       	brne	.-4      	; 0x3948 <main+0x36e>
    394c:	00 c0       	rjmp	.+0      	; 0x394e <main+0x374>
    394e:	00 00       	nop
    3950:	b9 ce       	rjmp	.-654    	; 0x36c4 <main+0xea>

00003952 <acos>:
    3952:	9f 93       	push	r25
    3954:	9f 77       	andi	r25, 0x7F	; 127
    3956:	4a d1       	rcall	.+660    	; 0x3bec <__fp_arccos>
    3958:	0f 90       	pop	r0
    395a:	00 20       	and	r0, r0
    395c:	3a f4       	brpl	.+14     	; 0x396c <acos+0x1a>
    395e:	90 58       	subi	r25, 0x80	; 128
    3960:	a2 ea       	ldi	r26, 0xA2	; 162
    3962:	2a ed       	ldi	r18, 0xDA	; 218
    3964:	3f e0       	ldi	r19, 0x0F	; 15
    3966:	49 e4       	ldi	r20, 0x49	; 73
    3968:	50 e4       	ldi	r21, 0x40	; 64
    396a:	13 d0       	rcall	.+38     	; 0x3992 <__addsf3x>
    396c:	ba c1       	rjmp	.+884    	; 0x3ce2 <__fp_round>

0000396e <__subsf3>:
    396e:	50 58       	subi	r21, 0x80	; 128

00003970 <__addsf3>:
    3970:	bb 27       	eor	r27, r27
    3972:	aa 27       	eor	r26, r26
    3974:	0e d0       	rcall	.+28     	; 0x3992 <__addsf3x>
    3976:	b5 c1       	rjmp	.+874    	; 0x3ce2 <__fp_round>
    3978:	a6 d1       	rcall	.+844    	; 0x3cc6 <__fp_pscA>
    397a:	30 f0       	brcs	.+12     	; 0x3988 <__addsf3+0x18>
    397c:	ab d1       	rcall	.+854    	; 0x3cd4 <__fp_pscB>
    397e:	20 f0       	brcs	.+8      	; 0x3988 <__addsf3+0x18>
    3980:	31 f4       	brne	.+12     	; 0x398e <__addsf3+0x1e>
    3982:	9f 3f       	cpi	r25, 0xFF	; 255
    3984:	11 f4       	brne	.+4      	; 0x398a <__addsf3+0x1a>
    3986:	1e f4       	brtc	.+6      	; 0x398e <__addsf3+0x1e>
    3988:	76 c1       	rjmp	.+748    	; 0x3c76 <__fp_nan>
    398a:	0e f4       	brtc	.+2      	; 0x398e <__addsf3+0x1e>
    398c:	e0 95       	com	r30
    398e:	e7 fb       	bst	r30, 7
    3990:	6c c1       	rjmp	.+728    	; 0x3c6a <__fp_inf>

00003992 <__addsf3x>:
    3992:	e9 2f       	mov	r30, r25
    3994:	b7 d1       	rcall	.+878    	; 0x3d04 <__fp_split3>
    3996:	80 f3       	brcs	.-32     	; 0x3978 <__addsf3+0x8>
    3998:	ba 17       	cp	r27, r26
    399a:	62 07       	cpc	r22, r18
    399c:	73 07       	cpc	r23, r19
    399e:	84 07       	cpc	r24, r20
    39a0:	95 07       	cpc	r25, r21
    39a2:	18 f0       	brcs	.+6      	; 0x39aa <__addsf3x+0x18>
    39a4:	71 f4       	brne	.+28     	; 0x39c2 <__addsf3x+0x30>
    39a6:	9e f5       	brtc	.+102    	; 0x3a0e <__addsf3x+0x7c>
    39a8:	cf c1       	rjmp	.+926    	; 0x3d48 <__fp_zero>
    39aa:	0e f4       	brtc	.+2      	; 0x39ae <__addsf3x+0x1c>
    39ac:	e0 95       	com	r30
    39ae:	0b 2e       	mov	r0, r27
    39b0:	ba 2f       	mov	r27, r26
    39b2:	a0 2d       	mov	r26, r0
    39b4:	0b 01       	movw	r0, r22
    39b6:	b9 01       	movw	r22, r18
    39b8:	90 01       	movw	r18, r0
    39ba:	0c 01       	movw	r0, r24
    39bc:	ca 01       	movw	r24, r20
    39be:	a0 01       	movw	r20, r0
    39c0:	11 24       	eor	r1, r1
    39c2:	ff 27       	eor	r31, r31
    39c4:	59 1b       	sub	r21, r25
    39c6:	99 f0       	breq	.+38     	; 0x39ee <__addsf3x+0x5c>
    39c8:	59 3f       	cpi	r21, 0xF9	; 249
    39ca:	50 f4       	brcc	.+20     	; 0x39e0 <__addsf3x+0x4e>
    39cc:	50 3e       	cpi	r21, 0xE0	; 224
    39ce:	68 f1       	brcs	.+90     	; 0x3a2a <__addsf3x+0x98>
    39d0:	1a 16       	cp	r1, r26
    39d2:	f0 40       	sbci	r31, 0x00	; 0
    39d4:	a2 2f       	mov	r26, r18
    39d6:	23 2f       	mov	r18, r19
    39d8:	34 2f       	mov	r19, r20
    39da:	44 27       	eor	r20, r20
    39dc:	58 5f       	subi	r21, 0xF8	; 248
    39de:	f3 cf       	rjmp	.-26     	; 0x39c6 <__addsf3x+0x34>
    39e0:	46 95       	lsr	r20
    39e2:	37 95       	ror	r19
    39e4:	27 95       	ror	r18
    39e6:	a7 95       	ror	r26
    39e8:	f0 40       	sbci	r31, 0x00	; 0
    39ea:	53 95       	inc	r21
    39ec:	c9 f7       	brne	.-14     	; 0x39e0 <__addsf3x+0x4e>
    39ee:	7e f4       	brtc	.+30     	; 0x3a0e <__addsf3x+0x7c>
    39f0:	1f 16       	cp	r1, r31
    39f2:	ba 0b       	sbc	r27, r26
    39f4:	62 0b       	sbc	r22, r18
    39f6:	73 0b       	sbc	r23, r19
    39f8:	84 0b       	sbc	r24, r20
    39fa:	ba f0       	brmi	.+46     	; 0x3a2a <__addsf3x+0x98>
    39fc:	91 50       	subi	r25, 0x01	; 1
    39fe:	a1 f0       	breq	.+40     	; 0x3a28 <__addsf3x+0x96>
    3a00:	ff 0f       	add	r31, r31
    3a02:	bb 1f       	adc	r27, r27
    3a04:	66 1f       	adc	r22, r22
    3a06:	77 1f       	adc	r23, r23
    3a08:	88 1f       	adc	r24, r24
    3a0a:	c2 f7       	brpl	.-16     	; 0x39fc <__addsf3x+0x6a>
    3a0c:	0e c0       	rjmp	.+28     	; 0x3a2a <__addsf3x+0x98>
    3a0e:	ba 0f       	add	r27, r26
    3a10:	62 1f       	adc	r22, r18
    3a12:	73 1f       	adc	r23, r19
    3a14:	84 1f       	adc	r24, r20
    3a16:	48 f4       	brcc	.+18     	; 0x3a2a <__addsf3x+0x98>
    3a18:	87 95       	ror	r24
    3a1a:	77 95       	ror	r23
    3a1c:	67 95       	ror	r22
    3a1e:	b7 95       	ror	r27
    3a20:	f7 95       	ror	r31
    3a22:	9e 3f       	cpi	r25, 0xFE	; 254
    3a24:	08 f0       	brcs	.+2      	; 0x3a28 <__addsf3x+0x96>
    3a26:	b3 cf       	rjmp	.-154    	; 0x398e <__addsf3+0x1e>
    3a28:	93 95       	inc	r25
    3a2a:	88 0f       	add	r24, r24
    3a2c:	08 f0       	brcs	.+2      	; 0x3a30 <__addsf3x+0x9e>
    3a2e:	99 27       	eor	r25, r25
    3a30:	ee 0f       	add	r30, r30
    3a32:	97 95       	ror	r25
    3a34:	87 95       	ror	r24
    3a36:	08 95       	ret

00003a38 <__cmpsf2>:
    3a38:	f4 d0       	rcall	.+488    	; 0x3c22 <__fp_cmp>
    3a3a:	08 f4       	brcc	.+2      	; 0x3a3e <__cmpsf2+0x6>
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	08 95       	ret

00003a40 <__divsf3>:
    3a40:	0c d0       	rcall	.+24     	; 0x3a5a <__divsf3x>
    3a42:	4f c1       	rjmp	.+670    	; 0x3ce2 <__fp_round>
    3a44:	47 d1       	rcall	.+654    	; 0x3cd4 <__fp_pscB>
    3a46:	40 f0       	brcs	.+16     	; 0x3a58 <__divsf3+0x18>
    3a48:	3e d1       	rcall	.+636    	; 0x3cc6 <__fp_pscA>
    3a4a:	30 f0       	brcs	.+12     	; 0x3a58 <__divsf3+0x18>
    3a4c:	21 f4       	brne	.+8      	; 0x3a56 <__divsf3+0x16>
    3a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a50:	19 f0       	breq	.+6      	; 0x3a58 <__divsf3+0x18>
    3a52:	0b c1       	rjmp	.+534    	; 0x3c6a <__fp_inf>
    3a54:	51 11       	cpse	r21, r1
    3a56:	79 c1       	rjmp	.+754    	; 0x3d4a <__fp_szero>
    3a58:	0e c1       	rjmp	.+540    	; 0x3c76 <__fp_nan>

00003a5a <__divsf3x>:
    3a5a:	54 d1       	rcall	.+680    	; 0x3d04 <__fp_split3>
    3a5c:	98 f3       	brcs	.-26     	; 0x3a44 <__divsf3+0x4>

00003a5e <__divsf3_pse>:
    3a5e:	99 23       	and	r25, r25
    3a60:	c9 f3       	breq	.-14     	; 0x3a54 <__divsf3+0x14>
    3a62:	55 23       	and	r21, r21
    3a64:	b1 f3       	breq	.-20     	; 0x3a52 <__divsf3+0x12>
    3a66:	95 1b       	sub	r25, r21
    3a68:	55 0b       	sbc	r21, r21
    3a6a:	bb 27       	eor	r27, r27
    3a6c:	aa 27       	eor	r26, r26
    3a6e:	62 17       	cp	r22, r18
    3a70:	73 07       	cpc	r23, r19
    3a72:	84 07       	cpc	r24, r20
    3a74:	38 f0       	brcs	.+14     	; 0x3a84 <__divsf3_pse+0x26>
    3a76:	9f 5f       	subi	r25, 0xFF	; 255
    3a78:	5f 4f       	sbci	r21, 0xFF	; 255
    3a7a:	22 0f       	add	r18, r18
    3a7c:	33 1f       	adc	r19, r19
    3a7e:	44 1f       	adc	r20, r20
    3a80:	aa 1f       	adc	r26, r26
    3a82:	a9 f3       	breq	.-22     	; 0x3a6e <__divsf3_pse+0x10>
    3a84:	33 d0       	rcall	.+102    	; 0x3aec <__divsf3_pse+0x8e>
    3a86:	0e 2e       	mov	r0, r30
    3a88:	3a f0       	brmi	.+14     	; 0x3a98 <__divsf3_pse+0x3a>
    3a8a:	e0 e8       	ldi	r30, 0x80	; 128
    3a8c:	30 d0       	rcall	.+96     	; 0x3aee <__divsf3_pse+0x90>
    3a8e:	91 50       	subi	r25, 0x01	; 1
    3a90:	50 40       	sbci	r21, 0x00	; 0
    3a92:	e6 95       	lsr	r30
    3a94:	00 1c       	adc	r0, r0
    3a96:	ca f7       	brpl	.-14     	; 0x3a8a <__divsf3_pse+0x2c>
    3a98:	29 d0       	rcall	.+82     	; 0x3aec <__divsf3_pse+0x8e>
    3a9a:	fe 2f       	mov	r31, r30
    3a9c:	27 d0       	rcall	.+78     	; 0x3aec <__divsf3_pse+0x8e>
    3a9e:	66 0f       	add	r22, r22
    3aa0:	77 1f       	adc	r23, r23
    3aa2:	88 1f       	adc	r24, r24
    3aa4:	bb 1f       	adc	r27, r27
    3aa6:	26 17       	cp	r18, r22
    3aa8:	37 07       	cpc	r19, r23
    3aaa:	48 07       	cpc	r20, r24
    3aac:	ab 07       	cpc	r26, r27
    3aae:	b0 e8       	ldi	r27, 0x80	; 128
    3ab0:	09 f0       	breq	.+2      	; 0x3ab4 <__divsf3_pse+0x56>
    3ab2:	bb 0b       	sbc	r27, r27
    3ab4:	80 2d       	mov	r24, r0
    3ab6:	bf 01       	movw	r22, r30
    3ab8:	ff 27       	eor	r31, r31
    3aba:	93 58       	subi	r25, 0x83	; 131
    3abc:	5f 4f       	sbci	r21, 0xFF	; 255
    3abe:	2a f0       	brmi	.+10     	; 0x3aca <__divsf3_pse+0x6c>
    3ac0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ac2:	51 05       	cpc	r21, r1
    3ac4:	68 f0       	brcs	.+26     	; 0x3ae0 <__divsf3_pse+0x82>
    3ac6:	d1 c0       	rjmp	.+418    	; 0x3c6a <__fp_inf>
    3ac8:	40 c1       	rjmp	.+640    	; 0x3d4a <__fp_szero>
    3aca:	5f 3f       	cpi	r21, 0xFF	; 255
    3acc:	ec f3       	brlt	.-6      	; 0x3ac8 <__divsf3_pse+0x6a>
    3ace:	98 3e       	cpi	r25, 0xE8	; 232
    3ad0:	dc f3       	brlt	.-10     	; 0x3ac8 <__divsf3_pse+0x6a>
    3ad2:	86 95       	lsr	r24
    3ad4:	77 95       	ror	r23
    3ad6:	67 95       	ror	r22
    3ad8:	b7 95       	ror	r27
    3ada:	f7 95       	ror	r31
    3adc:	9f 5f       	subi	r25, 0xFF	; 255
    3ade:	c9 f7       	brne	.-14     	; 0x3ad2 <__divsf3_pse+0x74>
    3ae0:	88 0f       	add	r24, r24
    3ae2:	91 1d       	adc	r25, r1
    3ae4:	96 95       	lsr	r25
    3ae6:	87 95       	ror	r24
    3ae8:	97 f9       	bld	r25, 7
    3aea:	08 95       	ret
    3aec:	e1 e0       	ldi	r30, 0x01	; 1
    3aee:	66 0f       	add	r22, r22
    3af0:	77 1f       	adc	r23, r23
    3af2:	88 1f       	adc	r24, r24
    3af4:	bb 1f       	adc	r27, r27
    3af6:	62 17       	cp	r22, r18
    3af8:	73 07       	cpc	r23, r19
    3afa:	84 07       	cpc	r24, r20
    3afc:	ba 07       	cpc	r27, r26
    3afe:	20 f0       	brcs	.+8      	; 0x3b08 <__divsf3_pse+0xaa>
    3b00:	62 1b       	sub	r22, r18
    3b02:	73 0b       	sbc	r23, r19
    3b04:	84 0b       	sbc	r24, r20
    3b06:	ba 0b       	sbc	r27, r26
    3b08:	ee 1f       	adc	r30, r30
    3b0a:	88 f7       	brcc	.-30     	; 0x3aee <__divsf3_pse+0x90>
    3b0c:	e0 95       	com	r30
    3b0e:	08 95       	ret

00003b10 <__fixsfsi>:
    3b10:	04 d0       	rcall	.+8      	; 0x3b1a <__fixunssfsi>
    3b12:	68 94       	set
    3b14:	b1 11       	cpse	r27, r1
    3b16:	19 c1       	rjmp	.+562    	; 0x3d4a <__fp_szero>
    3b18:	08 95       	ret

00003b1a <__fixunssfsi>:
    3b1a:	fc d0       	rcall	.+504    	; 0x3d14 <__fp_splitA>
    3b1c:	88 f0       	brcs	.+34     	; 0x3b40 <__fixunssfsi+0x26>
    3b1e:	9f 57       	subi	r25, 0x7F	; 127
    3b20:	90 f0       	brcs	.+36     	; 0x3b46 <__fixunssfsi+0x2c>
    3b22:	b9 2f       	mov	r27, r25
    3b24:	99 27       	eor	r25, r25
    3b26:	b7 51       	subi	r27, 0x17	; 23
    3b28:	a0 f0       	brcs	.+40     	; 0x3b52 <__fixunssfsi+0x38>
    3b2a:	d1 f0       	breq	.+52     	; 0x3b60 <__fixunssfsi+0x46>
    3b2c:	66 0f       	add	r22, r22
    3b2e:	77 1f       	adc	r23, r23
    3b30:	88 1f       	adc	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	1a f0       	brmi	.+6      	; 0x3b3c <__fixunssfsi+0x22>
    3b36:	ba 95       	dec	r27
    3b38:	c9 f7       	brne	.-14     	; 0x3b2c <__fixunssfsi+0x12>
    3b3a:	12 c0       	rjmp	.+36     	; 0x3b60 <__fixunssfsi+0x46>
    3b3c:	b1 30       	cpi	r27, 0x01	; 1
    3b3e:	81 f0       	breq	.+32     	; 0x3b60 <__fixunssfsi+0x46>
    3b40:	03 d1       	rcall	.+518    	; 0x3d48 <__fp_zero>
    3b42:	b1 e0       	ldi	r27, 0x01	; 1
    3b44:	08 95       	ret
    3b46:	00 c1       	rjmp	.+512    	; 0x3d48 <__fp_zero>
    3b48:	67 2f       	mov	r22, r23
    3b4a:	78 2f       	mov	r23, r24
    3b4c:	88 27       	eor	r24, r24
    3b4e:	b8 5f       	subi	r27, 0xF8	; 248
    3b50:	39 f0       	breq	.+14     	; 0x3b60 <__fixunssfsi+0x46>
    3b52:	b9 3f       	cpi	r27, 0xF9	; 249
    3b54:	cc f3       	brlt	.-14     	; 0x3b48 <__fixunssfsi+0x2e>
    3b56:	86 95       	lsr	r24
    3b58:	77 95       	ror	r23
    3b5a:	67 95       	ror	r22
    3b5c:	b3 95       	inc	r27
    3b5e:	d9 f7       	brne	.-10     	; 0x3b56 <__fixunssfsi+0x3c>
    3b60:	3e f4       	brtc	.+14     	; 0x3b70 <__fixunssfsi+0x56>
    3b62:	90 95       	com	r25
    3b64:	80 95       	com	r24
    3b66:	70 95       	com	r23
    3b68:	61 95       	neg	r22
    3b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b70:	08 95       	ret

00003b72 <__floatunsisf>:
    3b72:	e8 94       	clt
    3b74:	09 c0       	rjmp	.+18     	; 0x3b88 <__floatsisf+0x12>

00003b76 <__floatsisf>:
    3b76:	97 fb       	bst	r25, 7
    3b78:	3e f4       	brtc	.+14     	; 0x3b88 <__floatsisf+0x12>
    3b7a:	90 95       	com	r25
    3b7c:	80 95       	com	r24
    3b7e:	70 95       	com	r23
    3b80:	61 95       	neg	r22
    3b82:	7f 4f       	sbci	r23, 0xFF	; 255
    3b84:	8f 4f       	sbci	r24, 0xFF	; 255
    3b86:	9f 4f       	sbci	r25, 0xFF	; 255
    3b88:	99 23       	and	r25, r25
    3b8a:	a9 f0       	breq	.+42     	; 0x3bb6 <__floatsisf+0x40>
    3b8c:	f9 2f       	mov	r31, r25
    3b8e:	96 e9       	ldi	r25, 0x96	; 150
    3b90:	bb 27       	eor	r27, r27
    3b92:	93 95       	inc	r25
    3b94:	f6 95       	lsr	r31
    3b96:	87 95       	ror	r24
    3b98:	77 95       	ror	r23
    3b9a:	67 95       	ror	r22
    3b9c:	b7 95       	ror	r27
    3b9e:	f1 11       	cpse	r31, r1
    3ba0:	f8 cf       	rjmp	.-16     	; 0x3b92 <__floatsisf+0x1c>
    3ba2:	fa f4       	brpl	.+62     	; 0x3be2 <__floatsisf+0x6c>
    3ba4:	bb 0f       	add	r27, r27
    3ba6:	11 f4       	brne	.+4      	; 0x3bac <__floatsisf+0x36>
    3ba8:	60 ff       	sbrs	r22, 0
    3baa:	1b c0       	rjmp	.+54     	; 0x3be2 <__floatsisf+0x6c>
    3bac:	6f 5f       	subi	r22, 0xFF	; 255
    3bae:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    3bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb4:	16 c0       	rjmp	.+44     	; 0x3be2 <__floatsisf+0x6c>
    3bb6:	88 23       	and	r24, r24
    3bb8:	11 f0       	breq	.+4      	; 0x3bbe <__floatsisf+0x48>
    3bba:	96 e9       	ldi	r25, 0x96	; 150
    3bbc:	11 c0       	rjmp	.+34     	; 0x3be0 <__floatsisf+0x6a>
    3bbe:	77 23       	and	r23, r23
    3bc0:	21 f0       	breq	.+8      	; 0x3bca <__floatsisf+0x54>
    3bc2:	9e e8       	ldi	r25, 0x8E	; 142
    3bc4:	87 2f       	mov	r24, r23
    3bc6:	76 2f       	mov	r23, r22
    3bc8:	05 c0       	rjmp	.+10     	; 0x3bd4 <__floatsisf+0x5e>
    3bca:	66 23       	and	r22, r22
    3bcc:	71 f0       	breq	.+28     	; 0x3bea <__floatsisf+0x74>
    3bce:	96 e8       	ldi	r25, 0x86	; 134
    3bd0:	86 2f       	mov	r24, r22
    3bd2:	70 e0       	ldi	r23, 0x00	; 0
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	2a f0       	brmi	.+10     	; 0x3be2 <__floatsisf+0x6c>
    3bd8:	9a 95       	dec	r25
    3bda:	66 0f       	add	r22, r22
    3bdc:	77 1f       	adc	r23, r23
    3bde:	88 1f       	adc	r24, r24
    3be0:	da f7       	brpl	.-10     	; 0x3bd8 <__floatsisf+0x62>
    3be2:	88 0f       	add	r24, r24
    3be4:	96 95       	lsr	r25
    3be6:	87 95       	ror	r24
    3be8:	97 f9       	bld	r25, 7
    3bea:	08 95       	ret

00003bec <__fp_arccos>:
    3bec:	df 93       	push	r29
    3bee:	cf 93       	push	r28
    3bf0:	1f 93       	push	r17
    3bf2:	0f 93       	push	r16
    3bf4:	8b 01       	movw	r16, r22
    3bf6:	ec 01       	movw	r28, r24
    3bf8:	e2 e0       	ldi	r30, 0x02	; 2
    3bfa:	f1 e0       	ldi	r31, 0x01	; 1
    3bfc:	3f d0       	rcall	.+126    	; 0x3c7c <__fp_powser>
    3bfe:	71 d0       	rcall	.+226    	; 0x3ce2 <__fp_round>
    3c00:	98 01       	movw	r18, r16
    3c02:	ae 01       	movw	r20, r28
    3c04:	8b 01       	movw	r16, r22
    3c06:	ec 01       	movw	r28, r24
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	80 e8       	ldi	r24, 0x80	; 128
    3c0e:	9f e3       	ldi	r25, 0x3F	; 63
    3c10:	ae de       	rcall	.-676    	; 0x396e <__subsf3>
    3c12:	0c d1       	rcall	.+536    	; 0x3e2c <sqrt>
    3c14:	98 01       	movw	r18, r16
    3c16:	ae 01       	movw	r20, r28
    3c18:	0f 91       	pop	r16
    3c1a:	1f 91       	pop	r17
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	aa c0       	rjmp	.+340    	; 0x3d76 <__mulsf3x>

00003c22 <__fp_cmp>:
    3c22:	99 0f       	add	r25, r25
    3c24:	00 08       	sbc	r0, r0
    3c26:	55 0f       	add	r21, r21
    3c28:	aa 0b       	sbc	r26, r26
    3c2a:	e0 e8       	ldi	r30, 0x80	; 128
    3c2c:	fe ef       	ldi	r31, 0xFE	; 254
    3c2e:	16 16       	cp	r1, r22
    3c30:	17 06       	cpc	r1, r23
    3c32:	e8 07       	cpc	r30, r24
    3c34:	f9 07       	cpc	r31, r25
    3c36:	c0 f0       	brcs	.+48     	; 0x3c68 <__fp_cmp+0x46>
    3c38:	12 16       	cp	r1, r18
    3c3a:	13 06       	cpc	r1, r19
    3c3c:	e4 07       	cpc	r30, r20
    3c3e:	f5 07       	cpc	r31, r21
    3c40:	98 f0       	brcs	.+38     	; 0x3c68 <__fp_cmp+0x46>
    3c42:	62 1b       	sub	r22, r18
    3c44:	73 0b       	sbc	r23, r19
    3c46:	84 0b       	sbc	r24, r20
    3c48:	95 0b       	sbc	r25, r21
    3c4a:	39 f4       	brne	.+14     	; 0x3c5a <__fp_cmp+0x38>
    3c4c:	0a 26       	eor	r0, r26
    3c4e:	61 f0       	breq	.+24     	; 0x3c68 <__fp_cmp+0x46>
    3c50:	23 2b       	or	r18, r19
    3c52:	24 2b       	or	r18, r20
    3c54:	25 2b       	or	r18, r21
    3c56:	21 f4       	brne	.+8      	; 0x3c60 <__fp_cmp+0x3e>
    3c58:	08 95       	ret
    3c5a:	0a 26       	eor	r0, r26
    3c5c:	09 f4       	brne	.+2      	; 0x3c60 <__fp_cmp+0x3e>
    3c5e:	a1 40       	sbci	r26, 0x01	; 1
    3c60:	a6 95       	lsr	r26
    3c62:	8f ef       	ldi	r24, 0xFF	; 255
    3c64:	81 1d       	adc	r24, r1
    3c66:	81 1d       	adc	r24, r1
    3c68:	08 95       	ret

00003c6a <__fp_inf>:
    3c6a:	97 f9       	bld	r25, 7
    3c6c:	9f 67       	ori	r25, 0x7F	; 127
    3c6e:	80 e8       	ldi	r24, 0x80	; 128
    3c70:	70 e0       	ldi	r23, 0x00	; 0
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	08 95       	ret

00003c76 <__fp_nan>:
    3c76:	9f ef       	ldi	r25, 0xFF	; 255
    3c78:	80 ec       	ldi	r24, 0xC0	; 192
    3c7a:	08 95       	ret

00003c7c <__fp_powser>:
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	1f 93       	push	r17
    3c82:	0f 93       	push	r16
    3c84:	ff 92       	push	r15
    3c86:	ef 92       	push	r14
    3c88:	df 92       	push	r13
    3c8a:	7b 01       	movw	r14, r22
    3c8c:	8c 01       	movw	r16, r24
    3c8e:	68 94       	set
    3c90:	05 c0       	rjmp	.+10     	; 0x3c9c <__fp_powser+0x20>
    3c92:	da 2e       	mov	r13, r26
    3c94:	ef 01       	movw	r28, r30
    3c96:	6f d0       	rcall	.+222    	; 0x3d76 <__mulsf3x>
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e8 94       	clt
    3c9c:	a5 91       	lpm	r26, Z+
    3c9e:	25 91       	lpm	r18, Z+
    3ca0:	35 91       	lpm	r19, Z+
    3ca2:	45 91       	lpm	r20, Z+
    3ca4:	55 91       	lpm	r21, Z+
    3ca6:	ae f3       	brts	.-22     	; 0x3c92 <__fp_powser+0x16>
    3ca8:	ef 01       	movw	r28, r30
    3caa:	73 de       	rcall	.-794    	; 0x3992 <__addsf3x>
    3cac:	fe 01       	movw	r30, r28
    3cae:	97 01       	movw	r18, r14
    3cb0:	a8 01       	movw	r20, r16
    3cb2:	da 94       	dec	r13
    3cb4:	79 f7       	brne	.-34     	; 0x3c94 <__fp_powser+0x18>
    3cb6:	df 90       	pop	r13
    3cb8:	ef 90       	pop	r14
    3cba:	ff 90       	pop	r15
    3cbc:	0f 91       	pop	r16
    3cbe:	1f 91       	pop	r17
    3cc0:	cf 91       	pop	r28
    3cc2:	df 91       	pop	r29
    3cc4:	08 95       	ret

00003cc6 <__fp_pscA>:
    3cc6:	00 24       	eor	r0, r0
    3cc8:	0a 94       	dec	r0
    3cca:	16 16       	cp	r1, r22
    3ccc:	17 06       	cpc	r1, r23
    3cce:	18 06       	cpc	r1, r24
    3cd0:	09 06       	cpc	r0, r25
    3cd2:	08 95       	ret

00003cd4 <__fp_pscB>:
    3cd4:	00 24       	eor	r0, r0
    3cd6:	0a 94       	dec	r0
    3cd8:	12 16       	cp	r1, r18
    3cda:	13 06       	cpc	r1, r19
    3cdc:	14 06       	cpc	r1, r20
    3cde:	05 06       	cpc	r0, r21
    3ce0:	08 95       	ret

00003ce2 <__fp_round>:
    3ce2:	09 2e       	mov	r0, r25
    3ce4:	03 94       	inc	r0
    3ce6:	00 0c       	add	r0, r0
    3ce8:	11 f4       	brne	.+4      	; 0x3cee <__fp_round+0xc>
    3cea:	88 23       	and	r24, r24
    3cec:	52 f0       	brmi	.+20     	; 0x3d02 <__fp_round+0x20>
    3cee:	bb 0f       	add	r27, r27
    3cf0:	40 f4       	brcc	.+16     	; 0x3d02 <__fp_round+0x20>
    3cf2:	bf 2b       	or	r27, r31
    3cf4:	11 f4       	brne	.+4      	; 0x3cfa <__fp_round+0x18>
    3cf6:	60 ff       	sbrs	r22, 0
    3cf8:	04 c0       	rjmp	.+8      	; 0x3d02 <__fp_round+0x20>
    3cfa:	6f 5f       	subi	r22, 0xFF	; 255
    3cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    3d00:	9f 4f       	sbci	r25, 0xFF	; 255
    3d02:	08 95       	ret

00003d04 <__fp_split3>:
    3d04:	57 fd       	sbrc	r21, 7
    3d06:	90 58       	subi	r25, 0x80	; 128
    3d08:	44 0f       	add	r20, r20
    3d0a:	55 1f       	adc	r21, r21
    3d0c:	59 f0       	breq	.+22     	; 0x3d24 <__fp_splitA+0x10>
    3d0e:	5f 3f       	cpi	r21, 0xFF	; 255
    3d10:	71 f0       	breq	.+28     	; 0x3d2e <__fp_splitA+0x1a>
    3d12:	47 95       	ror	r20

00003d14 <__fp_splitA>:
    3d14:	88 0f       	add	r24, r24
    3d16:	97 fb       	bst	r25, 7
    3d18:	99 1f       	adc	r25, r25
    3d1a:	61 f0       	breq	.+24     	; 0x3d34 <__fp_splitA+0x20>
    3d1c:	9f 3f       	cpi	r25, 0xFF	; 255
    3d1e:	79 f0       	breq	.+30     	; 0x3d3e <__fp_splitA+0x2a>
    3d20:	87 95       	ror	r24
    3d22:	08 95       	ret
    3d24:	12 16       	cp	r1, r18
    3d26:	13 06       	cpc	r1, r19
    3d28:	14 06       	cpc	r1, r20
    3d2a:	55 1f       	adc	r21, r21
    3d2c:	f2 cf       	rjmp	.-28     	; 0x3d12 <__fp_split3+0xe>
    3d2e:	46 95       	lsr	r20
    3d30:	f1 df       	rcall	.-30     	; 0x3d14 <__fp_splitA>
    3d32:	08 c0       	rjmp	.+16     	; 0x3d44 <__fp_splitA+0x30>
    3d34:	16 16       	cp	r1, r22
    3d36:	17 06       	cpc	r1, r23
    3d38:	18 06       	cpc	r1, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	f1 cf       	rjmp	.-30     	; 0x3d20 <__fp_splitA+0xc>
    3d3e:	86 95       	lsr	r24
    3d40:	71 05       	cpc	r23, r1
    3d42:	61 05       	cpc	r22, r1
    3d44:	08 94       	sec
    3d46:	08 95       	ret

00003d48 <__fp_zero>:
    3d48:	e8 94       	clt

00003d4a <__fp_szero>:
    3d4a:	bb 27       	eor	r27, r27
    3d4c:	66 27       	eor	r22, r22
    3d4e:	77 27       	eor	r23, r23
    3d50:	cb 01       	movw	r24, r22
    3d52:	97 f9       	bld	r25, 7
    3d54:	08 95       	ret

00003d56 <__gesf2>:
    3d56:	65 df       	rcall	.-310    	; 0x3c22 <__fp_cmp>
    3d58:	08 f4       	brcc	.+2      	; 0x3d5c <__gesf2+0x6>
    3d5a:	8f ef       	ldi	r24, 0xFF	; 255
    3d5c:	08 95       	ret

00003d5e <__mulsf3>:
    3d5e:	0b d0       	rcall	.+22     	; 0x3d76 <__mulsf3x>
    3d60:	c0 cf       	rjmp	.-128    	; 0x3ce2 <__fp_round>
    3d62:	b1 df       	rcall	.-158    	; 0x3cc6 <__fp_pscA>
    3d64:	28 f0       	brcs	.+10     	; 0x3d70 <__mulsf3+0x12>
    3d66:	b6 df       	rcall	.-148    	; 0x3cd4 <__fp_pscB>
    3d68:	18 f0       	brcs	.+6      	; 0x3d70 <__mulsf3+0x12>
    3d6a:	95 23       	and	r25, r21
    3d6c:	09 f0       	breq	.+2      	; 0x3d70 <__mulsf3+0x12>
    3d6e:	7d cf       	rjmp	.-262    	; 0x3c6a <__fp_inf>
    3d70:	82 cf       	rjmp	.-252    	; 0x3c76 <__fp_nan>
    3d72:	11 24       	eor	r1, r1
    3d74:	ea cf       	rjmp	.-44     	; 0x3d4a <__fp_szero>

00003d76 <__mulsf3x>:
    3d76:	c6 df       	rcall	.-116    	; 0x3d04 <__fp_split3>
    3d78:	a0 f3       	brcs	.-24     	; 0x3d62 <__mulsf3+0x4>

00003d7a <__mulsf3_pse>:
    3d7a:	95 9f       	mul	r25, r21
    3d7c:	d1 f3       	breq	.-12     	; 0x3d72 <__mulsf3+0x14>
    3d7e:	95 0f       	add	r25, r21
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	55 1f       	adc	r21, r21
    3d84:	62 9f       	mul	r22, r18
    3d86:	f0 01       	movw	r30, r0
    3d88:	72 9f       	mul	r23, r18
    3d8a:	bb 27       	eor	r27, r27
    3d8c:	f0 0d       	add	r31, r0
    3d8e:	b1 1d       	adc	r27, r1
    3d90:	63 9f       	mul	r22, r19
    3d92:	aa 27       	eor	r26, r26
    3d94:	f0 0d       	add	r31, r0
    3d96:	b1 1d       	adc	r27, r1
    3d98:	aa 1f       	adc	r26, r26
    3d9a:	64 9f       	mul	r22, r20
    3d9c:	66 27       	eor	r22, r22
    3d9e:	b0 0d       	add	r27, r0
    3da0:	a1 1d       	adc	r26, r1
    3da2:	66 1f       	adc	r22, r22
    3da4:	82 9f       	mul	r24, r18
    3da6:	22 27       	eor	r18, r18
    3da8:	b0 0d       	add	r27, r0
    3daa:	a1 1d       	adc	r26, r1
    3dac:	62 1f       	adc	r22, r18
    3dae:	73 9f       	mul	r23, r19
    3db0:	b0 0d       	add	r27, r0
    3db2:	a1 1d       	adc	r26, r1
    3db4:	62 1f       	adc	r22, r18
    3db6:	83 9f       	mul	r24, r19
    3db8:	a0 0d       	add	r26, r0
    3dba:	61 1d       	adc	r22, r1
    3dbc:	22 1f       	adc	r18, r18
    3dbe:	74 9f       	mul	r23, r20
    3dc0:	33 27       	eor	r19, r19
    3dc2:	a0 0d       	add	r26, r0
    3dc4:	61 1d       	adc	r22, r1
    3dc6:	23 1f       	adc	r18, r19
    3dc8:	84 9f       	mul	r24, r20
    3dca:	60 0d       	add	r22, r0
    3dcc:	21 1d       	adc	r18, r1
    3dce:	82 2f       	mov	r24, r18
    3dd0:	76 2f       	mov	r23, r22
    3dd2:	6a 2f       	mov	r22, r26
    3dd4:	11 24       	eor	r1, r1
    3dd6:	9f 57       	subi	r25, 0x7F	; 127
    3dd8:	50 40       	sbci	r21, 0x00	; 0
    3dda:	8a f0       	brmi	.+34     	; 0x3dfe <__mulsf3_pse+0x84>
    3ddc:	e1 f0       	breq	.+56     	; 0x3e16 <__mulsf3_pse+0x9c>
    3dde:	88 23       	and	r24, r24
    3de0:	4a f0       	brmi	.+18     	; 0x3df4 <__mulsf3_pse+0x7a>
    3de2:	ee 0f       	add	r30, r30
    3de4:	ff 1f       	adc	r31, r31
    3de6:	bb 1f       	adc	r27, r27
    3de8:	66 1f       	adc	r22, r22
    3dea:	77 1f       	adc	r23, r23
    3dec:	88 1f       	adc	r24, r24
    3dee:	91 50       	subi	r25, 0x01	; 1
    3df0:	50 40       	sbci	r21, 0x00	; 0
    3df2:	a9 f7       	brne	.-22     	; 0x3dde <__mulsf3_pse+0x64>
    3df4:	9e 3f       	cpi	r25, 0xFE	; 254
    3df6:	51 05       	cpc	r21, r1
    3df8:	70 f0       	brcs	.+28     	; 0x3e16 <__mulsf3_pse+0x9c>
    3dfa:	37 cf       	rjmp	.-402    	; 0x3c6a <__fp_inf>
    3dfc:	a6 cf       	rjmp	.-180    	; 0x3d4a <__fp_szero>
    3dfe:	5f 3f       	cpi	r21, 0xFF	; 255
    3e00:	ec f3       	brlt	.-6      	; 0x3dfc <__mulsf3_pse+0x82>
    3e02:	98 3e       	cpi	r25, 0xE8	; 232
    3e04:	dc f3       	brlt	.-10     	; 0x3dfc <__mulsf3_pse+0x82>
    3e06:	86 95       	lsr	r24
    3e08:	77 95       	ror	r23
    3e0a:	67 95       	ror	r22
    3e0c:	b7 95       	ror	r27
    3e0e:	f7 95       	ror	r31
    3e10:	e7 95       	ror	r30
    3e12:	9f 5f       	subi	r25, 0xFF	; 255
    3e14:	c1 f7       	brne	.-16     	; 0x3e06 <__mulsf3_pse+0x8c>
    3e16:	fe 2b       	or	r31, r30
    3e18:	88 0f       	add	r24, r24
    3e1a:	91 1d       	adc	r25, r1
    3e1c:	96 95       	lsr	r25
    3e1e:	87 95       	ror	r24
    3e20:	97 f9       	bld	r25, 7
    3e22:	08 95       	ret
    3e24:	11 f4       	brne	.+4      	; 0x3e2a <__mulsf3_pse+0xb0>
    3e26:	0e f4       	brtc	.+2      	; 0x3e2a <__mulsf3_pse+0xb0>
    3e28:	26 cf       	rjmp	.-436    	; 0x3c76 <__fp_nan>
    3e2a:	3e c0       	rjmp	.+124    	; 0x3ea8 <__fp_mpack>

00003e2c <sqrt>:
    3e2c:	73 df       	rcall	.-282    	; 0x3d14 <__fp_splitA>
    3e2e:	d0 f3       	brcs	.-12     	; 0x3e24 <__mulsf3_pse+0xaa>
    3e30:	99 23       	and	r25, r25
    3e32:	d9 f3       	breq	.-10     	; 0x3e2a <__mulsf3_pse+0xb0>
    3e34:	ce f3       	brts	.-14     	; 0x3e28 <__mulsf3_pse+0xae>
    3e36:	9f 57       	subi	r25, 0x7F	; 127
    3e38:	55 0b       	sbc	r21, r21
    3e3a:	87 ff       	sbrs	r24, 7
    3e3c:	43 d0       	rcall	.+134    	; 0x3ec4 <__fp_norm2>
    3e3e:	00 24       	eor	r0, r0
    3e40:	a0 e6       	ldi	r26, 0x60	; 96
    3e42:	40 ea       	ldi	r20, 0xA0	; 160
    3e44:	90 01       	movw	r18, r0
    3e46:	80 58       	subi	r24, 0x80	; 128
    3e48:	56 95       	lsr	r21
    3e4a:	97 95       	ror	r25
    3e4c:	28 f4       	brcc	.+10     	; 0x3e58 <sqrt+0x2c>
    3e4e:	80 5c       	subi	r24, 0xC0	; 192
    3e50:	66 0f       	add	r22, r22
    3e52:	77 1f       	adc	r23, r23
    3e54:	88 1f       	adc	r24, r24
    3e56:	20 f0       	brcs	.+8      	; 0x3e60 <sqrt+0x34>
    3e58:	26 17       	cp	r18, r22
    3e5a:	37 07       	cpc	r19, r23
    3e5c:	48 07       	cpc	r20, r24
    3e5e:	30 f4       	brcc	.+12     	; 0x3e6c <sqrt+0x40>
    3e60:	62 1b       	sub	r22, r18
    3e62:	73 0b       	sbc	r23, r19
    3e64:	84 0b       	sbc	r24, r20
    3e66:	20 29       	or	r18, r0
    3e68:	31 29       	or	r19, r1
    3e6a:	4a 2b       	or	r20, r26
    3e6c:	a6 95       	lsr	r26
    3e6e:	17 94       	ror	r1
    3e70:	07 94       	ror	r0
    3e72:	20 25       	eor	r18, r0
    3e74:	31 25       	eor	r19, r1
    3e76:	4a 27       	eor	r20, r26
    3e78:	58 f7       	brcc	.-42     	; 0x3e50 <sqrt+0x24>
    3e7a:	66 0f       	add	r22, r22
    3e7c:	77 1f       	adc	r23, r23
    3e7e:	88 1f       	adc	r24, r24
    3e80:	20 f0       	brcs	.+8      	; 0x3e8a <sqrt+0x5e>
    3e82:	26 17       	cp	r18, r22
    3e84:	37 07       	cpc	r19, r23
    3e86:	48 07       	cpc	r20, r24
    3e88:	30 f4       	brcc	.+12     	; 0x3e96 <sqrt+0x6a>
    3e8a:	62 0b       	sbc	r22, r18
    3e8c:	73 0b       	sbc	r23, r19
    3e8e:	84 0b       	sbc	r24, r20
    3e90:	20 0d       	add	r18, r0
    3e92:	31 1d       	adc	r19, r1
    3e94:	41 1d       	adc	r20, r1
    3e96:	a0 95       	com	r26
    3e98:	81 f7       	brne	.-32     	; 0x3e7a <sqrt+0x4e>
    3e9a:	b9 01       	movw	r22, r18
    3e9c:	84 2f       	mov	r24, r20
    3e9e:	91 58       	subi	r25, 0x81	; 129
    3ea0:	88 0f       	add	r24, r24
    3ea2:	96 95       	lsr	r25
    3ea4:	87 95       	ror	r24
    3ea6:	08 95       	ret

00003ea8 <__fp_mpack>:
    3ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    3eaa:	31 f0       	breq	.+12     	; 0x3eb8 <__fp_mpack_finite+0xc>

00003eac <__fp_mpack_finite>:
    3eac:	91 50       	subi	r25, 0x01	; 1
    3eae:	20 f4       	brcc	.+8      	; 0x3eb8 <__fp_mpack_finite+0xc>
    3eb0:	87 95       	ror	r24
    3eb2:	77 95       	ror	r23
    3eb4:	67 95       	ror	r22
    3eb6:	b7 95       	ror	r27
    3eb8:	88 0f       	add	r24, r24
    3eba:	91 1d       	adc	r25, r1
    3ebc:	96 95       	lsr	r25
    3ebe:	87 95       	ror	r24
    3ec0:	97 f9       	bld	r25, 7
    3ec2:	08 95       	ret

00003ec4 <__fp_norm2>:
    3ec4:	91 50       	subi	r25, 0x01	; 1
    3ec6:	50 40       	sbci	r21, 0x00	; 0
    3ec8:	66 0f       	add	r22, r22
    3eca:	77 1f       	adc	r23, r23
    3ecc:	88 1f       	adc	r24, r24
    3ece:	d2 f7       	brpl	.-12     	; 0x3ec4 <__fp_norm2>
    3ed0:	08 95       	ret

00003ed2 <__divmodhi4>:
    3ed2:	97 fb       	bst	r25, 7
    3ed4:	07 2e       	mov	r0, r23
    3ed6:	16 f4       	brtc	.+4      	; 0x3edc <__divmodhi4+0xa>
    3ed8:	00 94       	com	r0
    3eda:	07 d0       	rcall	.+14     	; 0x3eea <__divmodhi4_neg1>
    3edc:	77 fd       	sbrc	r23, 7
    3ede:	09 d0       	rcall	.+18     	; 0x3ef2 <__divmodhi4_neg2>
    3ee0:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__udivmodhi4>
    3ee4:	07 fc       	sbrc	r0, 7
    3ee6:	05 d0       	rcall	.+10     	; 0x3ef2 <__divmodhi4_neg2>
    3ee8:	3e f4       	brtc	.+14     	; 0x3ef8 <__divmodhi4_exit>

00003eea <__divmodhi4_neg1>:
    3eea:	90 95       	com	r25
    3eec:	81 95       	neg	r24
    3eee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef0:	08 95       	ret

00003ef2 <__divmodhi4_neg2>:
    3ef2:	70 95       	com	r23
    3ef4:	61 95       	neg	r22
    3ef6:	7f 4f       	sbci	r23, 0xFF	; 255

00003ef8 <__divmodhi4_exit>:
    3ef8:	08 95       	ret

00003efa <__tablejump2__>:
    3efa:	ee 0f       	add	r30, r30
    3efc:	ff 1f       	adc	r31, r31

00003efe <__tablejump__>:
    3efe:	05 90       	lpm	r0, Z+
    3f00:	f4 91       	lpm	r31, Z
    3f02:	e0 2d       	mov	r30, r0
    3f04:	09 94       	ijmp

00003f06 <__udivmodhi4>:
    3f06:	aa 1b       	sub	r26, r26
    3f08:	bb 1b       	sub	r27, r27
    3f0a:	51 e1       	ldi	r21, 0x11	; 17
    3f0c:	07 c0       	rjmp	.+14     	; 0x3f1c <__udivmodhi4_ep>

00003f0e <__udivmodhi4_loop>:
    3f0e:	aa 1f       	adc	r26, r26
    3f10:	bb 1f       	adc	r27, r27
    3f12:	a6 17       	cp	r26, r22
    3f14:	b7 07       	cpc	r27, r23
    3f16:	10 f0       	brcs	.+4      	; 0x3f1c <__udivmodhi4_ep>
    3f18:	a6 1b       	sub	r26, r22
    3f1a:	b7 0b       	sbc	r27, r23

00003f1c <__udivmodhi4_ep>:
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	99 1f       	adc	r25, r25
    3f20:	5a 95       	dec	r21
    3f22:	a9 f7       	brne	.-22     	; 0x3f0e <__udivmodhi4_loop>
    3f24:	80 95       	com	r24
    3f26:	90 95       	com	r25
    3f28:	bc 01       	movw	r22, r24
    3f2a:	cd 01       	movw	r24, r26
    3f2c:	08 95       	ret

00003f2e <__itoa_ncheck>:
    3f2e:	bb 27       	eor	r27, r27
    3f30:	4a 30       	cpi	r20, 0x0A	; 10
    3f32:	31 f4       	brne	.+12     	; 0x3f40 <__itoa_ncheck+0x12>
    3f34:	99 23       	and	r25, r25
    3f36:	22 f4       	brpl	.+8      	; 0x3f40 <__itoa_ncheck+0x12>
    3f38:	bd e2       	ldi	r27, 0x2D	; 45
    3f3a:	90 95       	com	r25
    3f3c:	81 95       	neg	r24
    3f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f40:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <__utoa_common>

00003f44 <__utoa_ncheck>:
    3f44:	bb 27       	eor	r27, r27

00003f46 <__utoa_common>:
    3f46:	fb 01       	movw	r30, r22
    3f48:	55 27       	eor	r21, r21
    3f4a:	aa 27       	eor	r26, r26
    3f4c:	88 0f       	add	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	aa 1f       	adc	r26, r26
    3f52:	a4 17       	cp	r26, r20
    3f54:	10 f0       	brcs	.+4      	; 0x3f5a <__utoa_common+0x14>
    3f56:	a4 1b       	sub	r26, r20
    3f58:	83 95       	inc	r24
    3f5a:	50 51       	subi	r21, 0x10	; 16
    3f5c:	b9 f7       	brne	.-18     	; 0x3f4c <__utoa_common+0x6>
    3f5e:	a0 5d       	subi	r26, 0xD0	; 208
    3f60:	aa 33       	cpi	r26, 0x3A	; 58
    3f62:	08 f0       	brcs	.+2      	; 0x3f66 <__utoa_common+0x20>
    3f64:	a9 5d       	subi	r26, 0xD9	; 217
    3f66:	a1 93       	st	Z+, r26
    3f68:	00 97       	sbiw	r24, 0x00	; 0
    3f6a:	79 f7       	brne	.-34     	; 0x3f4a <__utoa_common+0x4>
    3f6c:	b1 11       	cpse	r27, r1
    3f6e:	b1 93       	st	Z+, r27
    3f70:	11 92       	st	Z+, r1
    3f72:	cb 01       	movw	r24, r22
    3f74:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <strrev>

00003f78 <strrev>:
    3f78:	dc 01       	movw	r26, r24
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	67 2f       	mov	r22, r23
    3f7e:	71 91       	ld	r23, Z+
    3f80:	77 23       	and	r23, r23
    3f82:	e1 f7       	brne	.-8      	; 0x3f7c <strrev+0x4>
    3f84:	32 97       	sbiw	r30, 0x02	; 2
    3f86:	04 c0       	rjmp	.+8      	; 0x3f90 <strrev+0x18>
    3f88:	7c 91       	ld	r23, X
    3f8a:	6d 93       	st	X+, r22
    3f8c:	70 83       	st	Z, r23
    3f8e:	62 91       	ld	r22, -Z
    3f90:	ae 17       	cp	r26, r30
    3f92:	bf 07       	cpc	r27, r31
    3f94:	c8 f3       	brcs	.-14     	; 0x3f88 <strrev+0x10>
    3f96:	08 95       	ret

00003f98 <_exit>:
    3f98:	f8 94       	cli

00003f9a <__stop_program>:
    3f9a:	ff cf       	rjmp	.-2      	; 0x3f9a <__stop_program>


robockey_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00003fa4  00004038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  0080013e  0080013e  00004076  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004076  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  000040a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038d8  00000000  00000000  00004346  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c9f  00000000  00000000  00007c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001258  00000000  00000000  000088bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009dc  00000000  00000000  00009b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009d1  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004154  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000f019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 02 	jmp	0x410	; 0x410 <__ctors_end>
       4:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
       8:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
       c:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__vector_3>
      10:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      14:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      18:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      1c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      20:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      24:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      28:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__vector_10>
      2c:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__vector_11>
      30:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      38:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      3c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      40:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      44:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      48:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      4c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      50:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      54:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      58:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      5c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      60:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      64:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      68:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      6c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      70:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      74:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_29>
      78:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      7c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      80:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      84:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      88:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      8c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      90:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      94:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      98:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      9c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      a0:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      a4:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      a8:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      ac:	a4 06       	cpc	r10, r20
      ae:	b5 06       	cpc	r11, r21
      b0:	c6 06       	cpc	r12, r22
      b2:	d7 06       	cpc	r13, r23
      b4:	e8 06       	cpc	r14, r24
      b6:	f9 06       	cpc	r15, r25
      b8:	0a 07       	cpc	r16, r26
      ba:	23 19       	sub	r18, r3
      bc:	2e 19       	sub	r18, r14
      be:	83 19       	sub	r24, r3
      c0:	a2 19       	sub	r26, r2
      c2:	c1 19       	sub	r28, r1
      c4:	a4 1a       	sub	r10, r20
      c6:	d2 19       	sub	r29, r2
      c8:	16 1a       	sub	r1, r22
      ca:	a4 1a       	sub	r10, r20
      cc:	a4 1a       	sub	r10, r20
      ce:	a4 1a       	sub	r10, r20
      d0:	a4 1a       	sub	r10, r20
      d2:	a4 1a       	sub	r10, r20
      d4:	a4 1a       	sub	r10, r20
      d6:	a4 1a       	sub	r10, r20
      d8:	a4 1a       	sub	r10, r20
      da:	a4 1a       	sub	r10, r20
      dc:	a4 1a       	sub	r10, r20
      de:	a4 1a       	sub	r10, r20
      e0:	a4 1a       	sub	r10, r20
      e2:	a4 1a       	sub	r10, r20
      e4:	a4 1a       	sub	r10, r20
      e6:	a4 1a       	sub	r10, r20
      e8:	a4 1a       	sub	r10, r20
      ea:	a4 1a       	sub	r10, r20
      ec:	a4 1a       	sub	r10, r20
      ee:	a4 1a       	sub	r10, r20
      f0:	a4 1a       	sub	r10, r20
      f2:	a4 1a       	sub	r10, r20
      f4:	a4 1a       	sub	r10, r20
      f6:	a4 1a       	sub	r10, r20
      f8:	a4 1a       	sub	r10, r20
      fa:	a4 1a       	sub	r10, r20
      fc:	27 1a       	sub	r2, r23
      fe:	2e 1a       	sub	r2, r30
     100:	83 1a       	sub	r8, r19
     102:	07 2c       	mov	r0, r7
     104:	7a a5       	ldd	r23, Y+42	; 0x2a
     106:	ba 6c       	ori	r27, 0xCA	; 202
     108:	c5 90       	lpm	r12, Z+
     10a:	da 3b       	cpi	r29, 0xBA	; 186
     10c:	93 65       	ori	r25, 0x53	; 83
     10e:	fc 8b       	std	Y+20, r31	; 0x14
     110:	bc 53       	subi	r27, 0x3C	; 60
     112:	f8 10       	cpse	r15, r8
     114:	fd 3c       	cpi	r31, 0xCD	; 205
     116:	56 92       	lac	Z, r5
     118:	83 4d       	sbci	r24, 0xD3	; 211
     11a:	bd 87       	std	Y+13, r27	; 0x0d
     11c:	9d 3a       	cpi	r25, 0xAD	; 173
     11e:	b6 3d       	cpi	r27, 0xD6	; 214
     120:	cb c9       	rjmp	.-3178   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
     122:	bf 5b       	subi	r27, 0xBF	; 191
     124:	be 73       	andi	r27, 0x3E	; 62
     126:	da 0f       	add	r29, r26
     128:	c9 3f       	cpi	r28, 0xF9	; 249

0000012a <__trampolines_end>:
     12a:	63 61       	ori	r22, 0x13	; 19
     12c:	73 65       	ori	r23, 0x53	; 83
     12e:	20 33       	cpi	r18, 0x30	; 48
     130:	20 0a       	sbc	r2, r16
	...

00000133 <__c.1988>:
     133:	63 61 73 65 20 32 20 0a 00                          case 2 ..

0000013c <__c.2099>:
     13c:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

0000014c <__c.2097>:
     14c:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

0000015b <__c.2066>:
     15b:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000167 <__c.2064>:
     167:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000172 <__c.2060>:
     172:	50 49 44 0a 00                                      PID..

00000177 <__c.2058>:
     177:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000183 <__c.2056>:
     183:	50 49 44 0a 00                                      PID..

00000188 <__c.2054>:
     188:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000193 <__c.2051>:
     193:	0a 00                                               ..

00000195 <__c.2049>:
     195:	2c 20 00                                            , .

00000198 <__c.2047>:
     198:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     1a8:	3a 20 00                                            : .

000001ab <__c.2043>:
     1ab:	0d 0a 00                                            ...

000001ae <__c.2041>:
     1ae:	0d 0a 00                                            ...

000001b1 <__c.2039>:
     1b1:	50 68 6f 5b 36 5d 00                                Pho[6].

000001b8 <__c.2037>:
     1b8:	0d 0a 00                                            ...

000001bb <__c.2035>:
     1bb:	50 68 6f 5b 35 5d 00                                Pho[5].

000001c2 <__c.2033>:
     1c2:	0d 0a 00                                            ...

000001c5 <__c.2031>:
     1c5:	50 68 6f 5b 34 5d 00                                Pho[4].

000001cc <__c.2029>:
     1cc:	0d 0a 00                                            ...

000001cf <__c.2027>:
     1cf:	50 68 6f 5b 33 5d 00                                Pho[3].

000001d6 <__c.2025>:
     1d6:	0d 0a 00                                            ...

000001d9 <__c.2023>:
     1d9:	50 68 6f 5b 32 5d 00                                Pho[2].

000001e0 <__c.2021>:
     1e0:	0d 0a 00                                            ...

000001e3 <__c.2019>:
     1e3:	50 68 6f 5b 31 5d 00                                Pho[1].

000001ea <__c.2017>:
     1ea:	0d 0a 00                                            ...

000001ed <__c.2015>:
     1ed:	50 68 6f 5b 30 5d 00                                Pho[0].

000001f4 <__c.2013>:
     1f4:	0d 0a 00                                            ...

000001f7 <__c.2156>:
     1f7:	0a 00                                               ..

000001f9 <__c.2154>:
     1f9:	64 69 73 74 3a 20 00                                dist: .

00000200 <__c.2146>:
     200:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000020b <__c.2144>:
     20b:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000217 <__c.2142>:
     217:	0a 00                                               ..

00000219 <__c.2140>:
     219:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000223 <__c.2138>:
     223:	0a 00                                               ..

00000225 <__c.2136>:
     225:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000230 <__c.2128>:
     230:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000023b <__c.2126>:
     23b:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000247 <__c.2124>:
     247:	0a 00                                               ..

00000249 <__c.2122>:
     249:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000253 <__c.2120>:
     253:	0a 00                                               ..

00000255 <__c.2118>:
     255:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000260 <__c.2110>:
     260:	0a 00                                               ..

00000262 <__c.2108>:
     262:	61 6c 70 68 61 3a 20 00                             alpha: .

0000026a <__c.2084>:
     26a:	0a 00                                               ..

0000026c <__c.2082>:
     26c:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000274 <__c.2080>:
     274:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000285 <__c.2078>:
     285:	0a 00                                               ..

00000287 <__c.2076>:
     287:	09 09 79 3a 00                                      ..y:.

0000028c <__c.2074>:
     28c:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000298 <__c.2046>:
     298:	0a 00                                               ..

0000029a <__c.2044>:
     29a:	64 6d 61 78 3a 00                                   dmax:.

000002a0 <descriptor_list>:
     2a0:	00 01 00 00 37 03 12 00 02 00 00 f4 02 43 00 03     ....7........C..
     2b0:	00 00 f0 02 04 01 03 09 04 dc 02 12 02 03 09 04     ................
     2c0:	d4 02 06 03 03 09 04 ca 02 08                       ..........

000002ca <string3>:
     2ca:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000002d4 <string2>:
     2d4:	06 03 4d 00 32 00 00 00                             ..M.2...

000002dc <string1>:
     2dc:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     2ec:	65 00 00 00                                         e...

000002f0 <string0>:
     2f0:	04 03 09 04                                         ....

000002f4 <config1_descriptor>:
     2f4:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     304:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     314:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     324:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     334:	40 00 00                                            @..

00000337 <device_descriptor>:
     337:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     347:	03 01                                               ..

00000349 <endpoint_config_table>:
     349:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000353 <__c.2100>:
     353:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

0000035e <__c.2097>:
     35e:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000368 <__c.2094>:
     368:	50 61 75 73 65 0a 00                                Pause..

0000036f <__c.2091>:
     36f:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000377 <__c.2088>:
     377:	47 6f 61 6c 20 41 0a 00                             Goal A..

0000037f <__c.2085>:
     37f:	50 6c 61 79 20 0a 00                                Play ..

00000386 <__c.2081>:
     386:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

00000392 <__c.2072>:
     392:	0a 00                                               ..

00000394 <__c.2070>:
     394:	2c 20 00                                            , .

00000397 <__c.2068>:
     397:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

000003a0 <__c.2065>:
     3a0:	73 65 6e 74 20 66 6f 75 6e 64 20 6d 65 73 73 61     sent found messa
     3b0:	67 65 2e 0a 00                                      ge...

000003b5 <__c.2062>:
     3b5:	0a 00                                               ..

000003b7 <__c.2060>:
     3b7:	2c 20 00                                            , .

000003ba <__c.2058>:
     3ba:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     3ca:	3d 20 00                                            = .

000003cd <__c.2055>:
     3cd:	0a 00                                               ..

000003cf <__c.2053>:
     3cf:	2c 20 00                                            , .

000003d2 <__c.2051>:
     3d2:	67 6f 61 6c 20 3d 20 00                             goal = .

000003da <__c.2049>:
     3da:	73 65 6e 74 20 6c 6f 73 74 20 6d 65 73 73 73 61     sent lost messsa
     3ea:	67 65 2e 0a 00                                      ge...

000003ef <__c.2046>:
     3ef:	73 65 6e 74 20 66 6f 75 6e 64 20 6d 65 73 73 73     sent found messs
     3ff:	61 67 65 2e 0a 00                                   age...

00000405 <__c.2040>:
     405:	0a 00                                               ..

00000407 <__c.2038>:
     407:	73 74 61 74 65 3a 20 00 00                          state: ..

00000410 <__ctors_end>:
     410:	11 24       	eor	r1, r1
     412:	1f be       	out	0x3f, r1	; 63
     414:	cf ef       	ldi	r28, 0xFF	; 255
     416:	da e0       	ldi	r29, 0x0A	; 10
     418:	de bf       	out	0x3e, r29	; 62
     41a:	cd bf       	out	0x3d, r28	; 61

0000041c <__do_copy_data>:
     41c:	11 e0       	ldi	r17, 0x01	; 1
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	e4 ea       	ldi	r30, 0xA4	; 164
     424:	ff e3       	ldi	r31, 0x3F	; 63
     426:	02 c0       	rjmp	.+4      	; 0x42c <__do_copy_data+0x10>
     428:	05 90       	lpm	r0, Z+
     42a:	0d 92       	st	X+, r0
     42c:	ae 33       	cpi	r26, 0x3E	; 62
     42e:	b1 07       	cpc	r27, r17
     430:	d9 f7       	brne	.-10     	; 0x428 <__do_copy_data+0xc>

00000432 <__do_clear_bss>:
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	ae e3       	ldi	r26, 0x3E	; 62
     436:	b1 e0       	ldi	r27, 0x01	; 1
     438:	01 c0       	rjmp	.+2      	; 0x43c <.do_clear_bss_start>

0000043a <.do_clear_bss_loop>:
     43a:	1d 92       	st	X+, r1

0000043c <.do_clear_bss_start>:
     43c:	ae 3b       	cpi	r26, 0xBE	; 190
     43e:	b2 07       	cpc	r27, r18
     440:	e1 f7       	brne	.-8      	; 0x43a <.do_clear_bss_loop>
     442:	0e 94 ef 1a 	call	0x35de	; 0x35de <main>
     446:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <_exit>

0000044a <__bad_interrupt>:
     44a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044e <send_message>:
 */ 

#include "communication.h"


void send_message(int state, int num, char *buffer, float *c_wii){
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	ea 01       	movw	r28, r20
     458:	89 01       	movw	r16, r18
	switch(state){ 
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	91 05       	cpc	r25, r1
     45e:	19 f0       	breq	.+6      	; 0x466 <send_message+0x18>
     460:	03 97       	sbiw	r24, 0x03	; 3
     462:	71 f1       	breq	.+92     	; 0x4c0 <send_message+0x72>
     464:	59 c0       	rjmp	.+178    	; 0x518 <send_message+0xca>
		case 2:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xC1;
     466:	81 ec       	ldi	r24, 0xC1	; 193
     468:	88 83       	st	Y, r24
			buffer[1] = num;
     46a:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     46c:	f9 01       	movw	r30, r18
     46e:	60 81       	ld	r22, Z
     470:	71 81       	ldd	r23, Z+1	; 0x01
     472:	82 81       	ldd	r24, Z+2	; 0x02
     474:	93 81       	ldd	r25, Z+3	; 0x03
     476:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     47a:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     47c:	f8 01       	movw	r30, r16
     47e:	60 81       	ld	r22, Z
     480:	71 81       	ldd	r23, Z+1	; 0x01
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	93 81       	ldd	r25, Z+3	; 0x03
     486:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     48a:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     48c:	f8 01       	movw	r30, r16
     48e:	64 81       	ldd	r22, Z+4	; 0x04
     490:	75 81       	ldd	r23, Z+5	; 0x05
     492:	86 81       	ldd	r24, Z+6	; 0x06
     494:	97 81       	ldd	r25, Z+7	; 0x07
     496:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     49a:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     49c:	f8 01       	movw	r30, r16
     49e:	64 81       	ldd	r22, Z+4	; 0x04
     4a0:	75 81       	ldd	r23, Z+5	; 0x05
     4a2:	86 81       	ldd	r24, Z+6	; 0x06
     4a4:	97 81       	ldd	r25, Z+7	; 0x07
     4a6:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     4aa:	7d 83       	std	Y+5, r23	; 0x05
 			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     4ac:	4a e0       	ldi	r20, 0x0A	; 10
     4ae:	be 01       	movw	r22, r28
     4b0:	8d e0       	ldi	r24, 0x0D	; 13
     4b2:	0e 94 2d 14 	call	0x285a	; 0x285a <m_rf_send>
			usb_tx_string("case 2 \n");
     4b6:	83 e3       	ldi	r24, 0x33	; 51
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			break;
     4be:	2c c0       	rjmp	.+88     	; 0x518 <send_message+0xca>
		case 3:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xC2;
     4c0:	82 ec       	ldi	r24, 0xC2	; 194
     4c2:	88 83       	st	Y, r24
			buffer[1] = num;
     4c4:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     4c6:	f9 01       	movw	r30, r18
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     4d4:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     4d6:	f8 01       	movw	r30, r16
     4d8:	60 81       	ld	r22, Z
     4da:	71 81       	ldd	r23, Z+1	; 0x01
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
     4de:	93 81       	ldd	r25, Z+3	; 0x03
     4e0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     4e4:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     4e6:	f8 01       	movw	r30, r16
     4e8:	64 81       	ldd	r22, Z+4	; 0x04
     4ea:	75 81       	ldd	r23, Z+5	; 0x05
     4ec:	86 81       	ldd	r24, Z+6	; 0x06
     4ee:	97 81       	ldd	r25, Z+7	; 0x07
     4f0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     4f4:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     4f6:	f8 01       	movw	r30, r16
     4f8:	64 81       	ldd	r22, Z+4	; 0x04
     4fa:	75 81       	ldd	r23, Z+5	; 0x05
     4fc:	86 81       	ldd	r24, Z+6	; 0x06
     4fe:	97 81       	ldd	r25, Z+7	; 0x07
     500:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__fixunssfsi>
     504:	7d 83       	std	Y+5, r23	; 0x05
			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	be 01       	movw	r22, r28
     50a:	8d e0       	ldi	r24, 0x0D	; 13
     50c:	0e 94 2d 14 	call	0x285a	; 0x285a <m_rf_send>
			usb_tx_string("case 3 \n");
     510:	8a e2       	ldi	r24, 0x2A	; 42
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		
	}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <init_ADC>:
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     526:	ac e7       	ldi	r26, 0x7C	; 124
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	8c 91       	ld	r24, X
     52c:	8f 77       	andi	r24, 0x7F	; 127
     52e:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     530:	8c 91       	ld	r24, X
     532:	80 64       	ori	r24, 0x40	; 64
     534:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     536:	ea e7       	ldi	r30, 0x7A	; 122
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	84 60       	ori	r24, 0x04	; 4
     53e:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     540:	80 81       	ld	r24, Z
     542:	82 60       	ori	r24, 0x02	; 2
     544:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     546:	80 81       	ld	r24, Z
     548:	81 60       	ori	r24, 0x01	; 1
     54a:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     54c:	ce e7       	ldi	r28, 0x7E	; 126
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	88 81       	ld	r24, Y
     552:	81 60       	ori	r24, 0x01	; 1
     554:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     556:	88 81       	ld	r24, Y
     558:	82 60       	ori	r24, 0x02	; 2
     55a:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     55c:	cd e7       	ldi	r28, 0x7D	; 125
     55e:	d0 e0       	ldi	r29, 0x00	; 0
     560:	88 81       	ld	r24, Y
     562:	82 60       	ori	r24, 0x02	; 2
     564:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     566:	88 81       	ld	r24, Y
     568:	84 60       	ori	r24, 0x04	; 4
     56a:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     56c:	88 81       	ld	r24, Y
     56e:	88 60       	ori	r24, 0x08	; 8
     570:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     572:	88 81       	ld	r24, Y
     574:	80 61       	ori	r24, 0x10	; 16
     576:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     578:	88 81       	ld	r24, Y
     57a:	81 60       	ori	r24, 0x01	; 1
     57c:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     57e:	cb e7       	ldi	r28, 0x7B	; 123
     580:	d0 e0       	ldi	r29, 0x00	; 0
     582:	88 81       	ld	r24, Y
     584:	8f 7d       	andi	r24, 0xDF	; 223
     586:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     588:	8c 91       	ld	r24, X
     58a:	8b 7f       	andi	r24, 0xFB	; 251
     58c:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     58e:	8c 91       	ld	r24, X
     590:	8d 7f       	andi	r24, 0xFD	; 253
     592:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     594:	8c 91       	ld	r24, X
     596:	8e 7f       	andi	r24, 0xFE	; 254
     598:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     59a:	80 81       	ld	r24, Z
     59c:	80 62       	ori	r24, 0x20	; 32
     59e:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     5a0:	80 81       	ld	r24, Z
     5a2:	88 60       	ori	r24, 0x08	; 8
     5a4:	80 83       	st	Z, r24
	sei();
     5a6:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     5a8:	80 81       	ld	r24, Z
     5aa:	80 68       	ori	r24, 0x80	; 128
     5ac:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     5ae:	80 81       	ld	r24, Z
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	80 83       	st	Z, r24
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <PID_Pho>:
			break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     5ba:	8f 92       	push	r8
     5bc:	9f 92       	push	r9
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	6b 01       	movw	r12, r22
     5d4:	7c 01       	movw	r14, r24
     5d6:	49 01       	movw	r8, r18
     5d8:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     5da:	c0 91 4a 01 	lds	r28, 0x014A
     5de:	d0 91 4b 01 	lds	r29, 0x014B
     5e2:	80 91 4e 01 	lds	r24, 0x014E
     5e6:	90 91 4f 01 	lds	r25, 0x014F
     5ea:	c8 0f       	add	r28, r24
     5ec:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     5ee:	20 91 4c 01 	lds	r18, 0x014C
     5f2:	30 91 4d 01 	lds	r19, 0x014D
     5f6:	80 91 50 01 	lds	r24, 0x0150
     5fa:	90 91 51 01 	lds	r25, 0x0151
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     602:	c8 1b       	sub	r28, r24
     604:	d9 0b       	sbc	r29, r25
     606:	d0 93 bb 01 	sts	0x01BB, r29
     60a:	c0 93 ba 01 	sts	0x01BA, r28
	diff_Pho = input - input_last;
     60e:	80 91 46 01 	lds	r24, 0x0146
     612:	90 91 47 01 	lds	r25, 0x0147
     616:	8e 01       	movw	r16, r28
     618:	08 1b       	sub	r16, r24
     61a:	19 0b       	sbc	r17, r25
     61c:	10 93 41 01 	sts	0x0141, r17
     620:	00 93 40 01 	sts	0x0140, r16
	sum_Pho = sum_Pho + input;
     624:	80 91 44 01 	lds	r24, 0x0144
     628:	90 91 45 01 	lds	r25, 0x0145
     62c:	8c 0f       	add	r24, r28
     62e:	9d 1f       	adc	r25, r29
     630:	90 93 45 01 	sts	0x0145, r25
     634:	80 93 44 01 	sts	0x0144, r24
	output = Kp * input + Kd * diff_Pho;
     638:	be 01       	movw	r22, r28
     63a:	88 27       	eor	r24, r24
     63c:	77 fd       	sbrc	r23, 7
     63e:	80 95       	com	r24
     640:	98 2f       	mov	r25, r24
     642:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
     646:	a7 01       	movw	r20, r14
     648:	96 01       	movw	r18, r12
     64a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     64e:	6b 01       	movw	r12, r22
     650:	7c 01       	movw	r14, r24
     652:	b8 01       	movw	r22, r16
     654:	88 27       	eor	r24, r24
     656:	77 fd       	sbrc	r23, 7
     658:	80 95       	com	r24
     65a:	98 2f       	mov	r25, r24
     65c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
     660:	a5 01       	movw	r20, r10
     662:	94 01       	movw	r18, r8
     664:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
     674:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
     678:	70 93 b9 01 	sts	0x01B9, r23
     67c:	60 93 b8 01 	sts	0x01B8, r22
	
	input_last = input;
     680:	d0 93 47 01 	sts	0x0147, r29
     684:	c0 93 46 01 	sts	0x0146, r28
	
	if(output>0){
     688:	16 16       	cp	r1, r22
     68a:	17 06       	cpc	r1, r23
     68c:	74 f5       	brge	.+92     	; 0x6ea <PID_Pho+0x130>
		OCR1C = full_speed - abs(output);
     68e:	9b 01       	movw	r18, r22
     690:	77 23       	and	r23, r23
     692:	24 f4       	brge	.+8      	; 0x69c <PID_Pho+0xe2>
     694:	22 27       	eor	r18, r18
     696:	33 27       	eor	r19, r19
     698:	26 1b       	sub	r18, r22
     69a:	37 0b       	sbc	r19, r23
     69c:	8a e8       	ldi	r24, 0x8A	; 138
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	82 1b       	sub	r24, r18
     6a2:	93 0b       	sbc	r25, r19
     6a4:	90 93 8d 00 	sts	0x008D, r25
     6a8:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     6ac:	20 91 00 01 	lds	r18, 0x0100
     6b0:	30 91 01 01 	lds	r19, 0x0101
     6b4:	80 91 b8 01 	lds	r24, 0x01B8
     6b8:	90 91 b9 01 	lds	r25, 0x01B9
     6bc:	99 23       	and	r25, r25
     6be:	1c f4       	brge	.+6      	; 0x6c6 <PID_Pho+0x10c>
     6c0:	91 95       	neg	r25
     6c2:	81 95       	neg	r24
     6c4:	91 09       	sbc	r25, r1
     6c6:	28 17       	cp	r18, r24
     6c8:	39 07       	cpc	r19, r25
     6ca:	44 f4       	brge	.+16     	; 0x6dc <PID_Pho+0x122>
			OCR1C = full_speed - speed_diff_Pho;
     6cc:	8a e8       	ldi	r24, 0x8A	; 138
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	82 1b       	sub	r24, r18
     6d2:	93 0b       	sbc	r25, r19
     6d4:	90 93 8d 00 	sts	0x008D, r25
     6d8:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     6dc:	8a e8       	ldi	r24, 0x8A	; 138
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	90 93 8b 00 	sts	0x008B, r25
     6e4:	80 93 8a 00 	sts	0x008A, r24
     6e8:	2d c0       	rjmp	.+90     	; 0x744 <PID_Pho+0x18a>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     6ea:	9b 01       	movw	r18, r22
     6ec:	77 23       	and	r23, r23
     6ee:	24 f4       	brge	.+8      	; 0x6f8 <PID_Pho+0x13e>
     6f0:	22 27       	eor	r18, r18
     6f2:	33 27       	eor	r19, r19
     6f4:	26 1b       	sub	r18, r22
     6f6:	37 0b       	sbc	r19, r23
     6f8:	8a e8       	ldi	r24, 0x8A	; 138
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	82 1b       	sub	r24, r18
     6fe:	93 0b       	sbc	r25, r19
     700:	90 93 8b 00 	sts	0x008B, r25
     704:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     708:	20 91 00 01 	lds	r18, 0x0100
     70c:	30 91 01 01 	lds	r19, 0x0101
     710:	80 91 b8 01 	lds	r24, 0x01B8
     714:	90 91 b9 01 	lds	r25, 0x01B9
     718:	99 23       	and	r25, r25
     71a:	1c f4       	brge	.+6      	; 0x722 <PID_Pho+0x168>
     71c:	91 95       	neg	r25
     71e:	81 95       	neg	r24
     720:	91 09       	sbc	r25, r1
     722:	28 17       	cp	r18, r24
     724:	39 07       	cpc	r19, r25
     726:	44 f4       	brge	.+16     	; 0x738 <PID_Pho+0x17e>
			OCR1B = full_speed - speed_diff_Pho;
     728:	8a e8       	ldi	r24, 0x8A	; 138
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	82 1b       	sub	r24, r18
     72e:	93 0b       	sbc	r25, r19
     730:	90 93 8b 00 	sts	0x008B, r25
     734:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     738:	8a e8       	ldi	r24, 0x8A	; 138
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	90 93 8d 00 	sts	0x008D, r25
     740:	80 93 8c 00 	sts	0x008C, r24
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	9f 90       	pop	r9
     75a:	8f 90       	pop	r8
     75c:	08 95       	ret

0000075e <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	6b 01       	movw	r12, r22
     778:	7c 01       	movw	r14, r24
     77a:	49 01       	movw	r8, r18
     77c:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     77e:	c0 91 4a 01 	lds	r28, 0x014A
     782:	d0 91 4b 01 	lds	r29, 0x014B
     786:	80 91 4e 01 	lds	r24, 0x014E
     78a:	90 91 4f 01 	lds	r25, 0x014F
     78e:	c8 0f       	add	r28, r24
     790:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     792:	20 91 4c 01 	lds	r18, 0x014C
     796:	30 91 4d 01 	lds	r19, 0x014D
     79a:	80 91 50 01 	lds	r24, 0x0150
     79e:	90 91 51 01 	lds	r25, 0x0151
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     7a6:	c8 1b       	sub	r28, r24
     7a8:	d9 0b       	sbc	r29, r25
     7aa:	d0 93 bb 01 	sts	0x01BB, r29
     7ae:	c0 93 ba 01 	sts	0x01BA, r28
	diff_stalk = input - input_last;
     7b2:	80 91 46 01 	lds	r24, 0x0146
     7b6:	90 91 47 01 	lds	r25, 0x0147
     7ba:	8e 01       	movw	r16, r28
     7bc:	08 1b       	sub	r16, r24
     7be:	19 0b       	sbc	r17, r25
     7c0:	10 93 3f 01 	sts	0x013F, r17
     7c4:	00 93 3e 01 	sts	0x013E, r16
	sum_stalk = sum_stalk + input;
     7c8:	80 91 42 01 	lds	r24, 0x0142
     7cc:	90 91 43 01 	lds	r25, 0x0143
     7d0:	8c 0f       	add	r24, r28
     7d2:	9d 1f       	adc	r25, r29
     7d4:	90 93 43 01 	sts	0x0143, r25
     7d8:	80 93 42 01 	sts	0x0142, r24
	output = Kp * input + Kd * diff_stalk;
     7dc:	be 01       	movw	r22, r28
     7de:	88 27       	eor	r24, r24
     7e0:	77 fd       	sbrc	r23, 7
     7e2:	80 95       	com	r24
     7e4:	98 2f       	mov	r25, r24
     7e6:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
     7ea:	a7 01       	movw	r20, r14
     7ec:	96 01       	movw	r18, r12
     7ee:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     7f2:	6b 01       	movw	r12, r22
     7f4:	7c 01       	movw	r14, r24
     7f6:	b8 01       	movw	r22, r16
     7f8:	88 27       	eor	r24, r24
     7fa:	77 fd       	sbrc	r23, 7
     7fc:	80 95       	com	r24
     7fe:	98 2f       	mov	r25, r24
     800:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
     804:	a5 01       	movw	r20, r10
     806:	94 01       	movw	r18, r8
     808:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	c7 01       	movw	r24, r14
     812:	b6 01       	movw	r22, r12
     814:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
     818:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
     81c:	70 93 b9 01 	sts	0x01B9, r23
     820:	60 93 b8 01 	sts	0x01B8, r22
	
	input_last = input;
     824:	d0 93 47 01 	sts	0x0147, r29
     828:	c0 93 46 01 	sts	0x0146, r28
	
	if(abs(output) >= full_speed_stalk){
     82c:	9b 01       	movw	r18, r22
     82e:	77 23       	and	r23, r23
     830:	24 f4       	brge	.+8      	; 0x83a <PID_stalk+0xdc>
     832:	22 27       	eor	r18, r18
     834:	33 27       	eor	r19, r19
     836:	26 1b       	sub	r18, r22
     838:	37 0b       	sbc	r19, r23
     83a:	2a 38       	cpi	r18, 0x8A	; 138
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	38 07       	cpc	r19, r24
     840:	5c f0       	brlt	.+22     	; 0x858 <PID_stalk+0xfa>
		OCR1C = full_speed_stalk;
     842:	8a e8       	ldi	r24, 0x8A	; 138
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	90 93 8d 00 	sts	0x008D, r25
     84a:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     84e:	90 93 8b 00 	sts	0x008B, r25
     852:	80 93 8a 00 	sts	0x008A, r24
     856:	11 c0       	rjmp	.+34     	; 0x87a <PID_stalk+0x11c>
	}
	else{
		OCR1C = abs(output);
     858:	30 93 8d 00 	sts	0x008D, r19
     85c:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     860:	80 91 b8 01 	lds	r24, 0x01B8
     864:	90 91 b9 01 	lds	r25, 0x01B9
     868:	99 23       	and	r25, r25
     86a:	1c f4       	brge	.+6      	; 0x872 <PID_stalk+0x114>
     86c:	91 95       	neg	r25
     86e:	81 95       	neg	r24
     870:	91 09       	sbc	r25, r1
     872:	90 93 8b 00 	sts	0x008B, r25
     876:	80 93 8a 00 	sts	0x008A, r24
	}
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	08 95       	ret

00000894 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     894:	6f 92       	push	r6
     896:	7f 92       	push	r7
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	5c 01       	movw	r10, r24
	m_usb_tx_string("\r\n");
     8b2:	84 ef       	ldi	r24, 0xF4	; 244
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("Pho[0]");
     8ba:	8d ee       	ldi	r24, 0xED	; 237
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(Pho[0]);
     8c2:	0f 2e       	mov	r0, r31
     8c4:	fa e4       	ldi	r31, 0x4A	; 74
     8c6:	8f 2e       	mov	r8, r31
     8c8:	f1 e0       	ldi	r31, 0x01	; 1
     8ca:	9f 2e       	mov	r9, r31
     8cc:	f0 2d       	mov	r31, r0
     8ce:	f4 01       	movw	r30, r8
     8d0:	80 81       	ld	r24, Z
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
     8d4:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     8d8:	8a ee       	ldi	r24, 0xEA	; 234
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("Pho[1]");
     8e0:	83 ee       	ldi	r24, 0xE3	; 227
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(Pho[1]);
     8e8:	0c e4       	ldi	r16, 0x4C	; 76
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	f8 01       	movw	r30, r16
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     8f6:	80 ee       	ldi	r24, 0xE0	; 224
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("Pho[2]");
     8fe:	89 ed       	ldi	r24, 0xD9	; 217
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(Pho[2]);
     906:	0f 2e       	mov	r0, r31
     908:	fe e4       	ldi	r31, 0x4E	; 78
     90a:	cf 2e       	mov	r12, r31
     90c:	f1 e0       	ldi	r31, 0x01	; 1
     90e:	df 2e       	mov	r13, r31
     910:	f0 2d       	mov	r31, r0
     912:	f6 01       	movw	r30, r12
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     91c:	86 ed       	ldi	r24, 0xD6	; 214
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("Pho[3]");
     924:	8f ec       	ldi	r24, 0xCF	; 207
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(Pho[3]);
     92c:	c0 e5       	ldi	r28, 0x50	; 80
     92e:	d1 e0       	ldi	r29, 0x01	; 1
     930:	88 81       	ld	r24, Y
     932:	99 81       	ldd	r25, Y+1	; 0x01
     934:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     938:	8c ec       	ldi	r24, 0xCC	; 204
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("Pho[4]");
     940:	85 ec       	ldi	r24, 0xC5	; 197
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(Pho[4]);
     948:	0f 2e       	mov	r0, r31
     94a:	f2 e5       	ldi	r31, 0x52	; 82
     94c:	ef 2e       	mov	r14, r31
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	ff 2e       	mov	r15, r31
     952:	f0 2d       	mov	r31, r0
     954:	f7 01       	movw	r30, r14
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     95e:	82 ec       	ldi	r24, 0xC2	; 194
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("Pho[5]");
     966:	8b eb       	ldi	r24, 0xBB	; 187
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(Pho[5]);
     96e:	0f 2e       	mov	r0, r31
     970:	f4 e5       	ldi	r31, 0x54	; 84
     972:	6f 2e       	mov	r6, r31
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	7f 2e       	mov	r7, r31
     978:	f0 2d       	mov	r31, r0
     97a:	f3 01       	movw	r30, r6
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     984:	88 eb       	ldi	r24, 0xB8	; 184
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("Pho[6]");
     98c:	81 eb       	ldi	r24, 0xB1	; 177
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(Pho[6]);
     994:	80 91 56 01 	lds	r24, 0x0156
     998:	90 91 57 01 	lds	r25, 0x0157
     99c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     9a0:	8e ea       	ldi	r24, 0xAE	; 174
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_string("\r\n");
     9a8:	8b ea       	ldi	r24, 0xAB	; 171
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     9b0:	f4 01       	movw	r30, r8
     9b2:	20 81       	ld	r18, Z
     9b4:	31 81       	ldd	r19, Z+1	; 0x01
     9b6:	f6 01       	movw	r30, r12
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	f7 01       	movw	r30, r14
     9c2:	20 81       	ld	r18, Z
     9c4:	31 81       	ldd	r19, Z+1	; 0x01
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	23 e0       	ldi	r18, 0x03	; 3
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	b9 01       	movw	r22, r18
     9d0:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__divmodhi4>
     9d4:	7b 01       	movw	r14, r22
     9d6:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     9d8:	f8 01       	movw	r30, r16
     9da:	40 81       	ld	r20, Z
     9dc:	51 81       	ldd	r21, Z+1	; 0x01
     9de:	88 81       	ld	r24, Y
     9e0:	99 81       	ldd	r25, Y+1	; 0x01
     9e2:	84 0f       	add	r24, r20
     9e4:	95 1f       	adc	r25, r21
     9e6:	f3 01       	movw	r30, r6
     9e8:	40 81       	ld	r20, Z
     9ea:	51 81       	ldd	r21, Z+1	; 0x01
     9ec:	84 0f       	add	r24, r20
     9ee:	95 1f       	adc	r25, r21
     9f0:	b9 01       	movw	r22, r18
     9f2:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__divmodhi4>
     9f6:	eb 01       	movw	r28, r22
     9f8:	8b 01       	movw	r16, r22
	
	m_usb_tx_string("mean024, mean135: ");
     9fa:	88 e9       	ldi	r24, 0x98	; 152
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(mean024);
     a02:	c7 01       	movw	r24, r14
     a04:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string(", ");
     a08:	85 e9       	ldi	r24, 0x95	; 149
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(mean135);
     a10:	ce 01       	movw	r24, r28
     a12:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
     a16:	83 e9       	ldi	r24, 0x93	; 147
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	switch(state){
     a1e:	f2 e0       	ldi	r31, 0x02	; 2
     a20:	af 16       	cp	r10, r31
     a22:	b1 04       	cpc	r11, r1
     a24:	31 f0       	breq	.+12     	; 0xa32 <findPuck+0x19e>
     a26:	45 e0       	ldi	r20, 0x05	; 5
     a28:	a4 16       	cp	r10, r20
     a2a:	b1 04       	cpc	r11, r1
     a2c:	09 f4       	brne	.+2      	; 0xa30 <findPuck+0x19c>
     a2e:	bb c0       	rjmp	.+374    	; 0xba6 <__stack+0xa7>
     a30:	0e c1       	rjmp	.+540    	; 0xc4e <__stack+0x14f>
		case 2:
			if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     a32:	c7 01       	movw	r24, r14
     a34:	8c 1b       	sub	r24, r28
     a36:	9d 0b       	sbc	r25, r29
     a38:	c3 97       	sbiw	r24, 0x33	; 51
     a3a:	84 f4       	brge	.+32     	; 0xa5c <findPuck+0x1c8>
     a3c:	ce 15       	cp	r28, r14
     a3e:	df 05       	cpc	r29, r15
     a40:	0c f0       	brlt	.+2      	; 0xa44 <findPuck+0x1b0>
     a42:	50 c0       	rjmp	.+160    	; 0xae4 <findPuck+0x250>
     a44:	20 91 52 01 	lds	r18, 0x0152
     a48:	30 91 53 01 	lds	r19, 0x0153
     a4c:	80 91 4e 01 	lds	r24, 0x014E
     a50:	90 91 4f 01 	lds	r25, 0x014F
     a54:	82 17       	cp	r24, r18
     a56:	93 07       	cpc	r25, r19
     a58:	0c f0       	brlt	.+2      	; 0xa5c <findPuck+0x1c8>
     a5a:	44 c0       	rjmp	.+136    	; 0xae4 <findPuck+0x250>
				m_usb_tx_string("turn left\n");
     a5c:	88 e8       	ldi	r24, 0x88	; 136
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				if(mean024 > revThres){
     a64:	51 eb       	ldi	r21, 0xB1	; 177
     a66:	c5 16       	cp	r12, r21
     a68:	54 e0       	ldi	r21, 0x04	; 4
     a6a:	d5 06       	cpc	r13, r21
     a6c:	6c f0       	brlt	.+26     	; 0xa88 <findPuck+0x1f4>
					set(PORTB, 0);
     a6e:	28 9a       	sbi	0x05, 0	; 5
					clear(PORTB, 1);
     a70:	29 98       	cbi	0x05, 1	; 5
					OCR1C = full_speed;
     a72:	8a e8       	ldi	r24, 0x8A	; 138
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	90 93 8d 00 	sts	0x008D, r25
     a7a:	80 93 8c 00 	sts	0x008C, r24
					OCR1B = full_speed;
     a7e:	90 93 8b 00 	sts	0x008B, r25
     a82:	80 93 8a 00 	sts	0x008A, r24
     a86:	e3 c0       	rjmp	.+454    	; 0xc4e <__stack+0x14f>
				}
				else{
					set(PORTB, 0);
     a88:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     a8a:	29 9a       	sbi	0x05, 1	; 5
					OCR1C = full_speed - speed_diff_Pho;
     a8c:	8a e8       	ldi	r24, 0x8A	; 138
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	20 91 00 01 	lds	r18, 0x0100
     a94:	30 91 01 01 	lds	r19, 0x0101
     a98:	fc 01       	movw	r30, r24
     a9a:	e2 1b       	sub	r30, r18
     a9c:	f3 0b       	sbc	r31, r19
     a9e:	f0 93 8d 00 	sts	0x008D, r31
     aa2:	e0 93 8c 00 	sts	0x008C, r30
					OCR1B = full_speed;
     aa6:	90 93 8b 00 	sts	0x008B, r25
     aaa:	80 93 8a 00 	sts	0x008A, r24
					if(Pho[2]>Pho[4]){
     aae:	20 91 4e 01 	lds	r18, 0x014E
     ab2:	30 91 4f 01 	lds	r19, 0x014F
     ab6:	80 91 52 01 	lds	r24, 0x0152
     aba:	90 91 53 01 	lds	r25, 0x0153
     abe:	82 17       	cp	r24, r18
     ac0:	93 07       	cpc	r25, r19
     ac2:	0c f0       	brlt	.+2      	; 0xac6 <findPuck+0x232>
     ac4:	c4 c0       	rjmp	.+392    	; 0xc4e <__stack+0x14f>
						m_usb_tx_string("PID\n");
     ac6:	83 e8       	ldi	r24, 0x83	; 131
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e7       	ldi	r20, 0x70	; 112
     ad4:	51 e4       	ldi	r21, 0x41	; 65
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	9f e3       	ldi	r25, 0x3F	; 63
     ade:	0e 94 dd 02 	call	0x5ba	; 0x5ba <PID_Pho>
     ae2:	b5 c0       	rjmp	.+362    	; 0xc4e <__stack+0x14f>
					}
				}
			}
		
			else {
				if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     ae4:	ce 19       	sub	r28, r14
     ae6:	df 09       	sbc	r29, r15
     ae8:	e3 97       	sbiw	r28, 0x33	; 51
     aea:	84 f4       	brge	.+32     	; 0xb0c <__stack+0xd>
     aec:	c0 16       	cp	r12, r16
     aee:	d1 06       	cpc	r13, r17
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <findPuck+0x260>
     af2:	4e c0       	rjmp	.+156    	; 0xb90 <__stack+0x91>
     af4:	20 91 54 01 	lds	r18, 0x0154
     af8:	30 91 55 01 	lds	r19, 0x0155
     afc:	80 91 50 01 	lds	r24, 0x0150
     b00:	90 91 51 01 	lds	r25, 0x0151
     b04:	82 17       	cp	r24, r18
     b06:	93 07       	cpc	r25, r19
     b08:	0c f0       	brlt	.+2      	; 0xb0c <__stack+0xd>
     b0a:	42 c0       	rjmp	.+132    	; 0xb90 <__stack+0x91>
					m_usb_tx_string("turn right\n");
     b0c:	87 e7       	ldi	r24, 0x77	; 119
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
					if(mean135 > revThres){
     b14:	01 3b       	cpi	r16, 0xB1	; 177
     b16:	14 40       	sbci	r17, 0x04	; 4
     b18:	6c f0       	brlt	.+26     	; 0xb34 <__stack+0x35>
						set(PORTB, 1);
     b1a:	29 9a       	sbi	0x05, 1	; 5
						clear(PORTB, 0);
     b1c:	28 98       	cbi	0x05, 0	; 5
						OCR1B = full_speed;
     b1e:	8a e8       	ldi	r24, 0x8A	; 138
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	90 93 8b 00 	sts	0x008B, r25
     b26:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed;
     b2a:	90 93 8d 00 	sts	0x008D, r25
     b2e:	80 93 8c 00 	sts	0x008C, r24
     b32:	8d c0       	rjmp	.+282    	; 0xc4e <__stack+0x14f>
					}
					else{
						set(PORTB, 0);
     b34:	28 9a       	sbi	0x05, 0	; 5
						set(PORTB, 1);
     b36:	29 9a       	sbi	0x05, 1	; 5
						OCR1B = full_speed - speed_diff_Pho;
     b38:	8a e8       	ldi	r24, 0x8A	; 138
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	20 91 00 01 	lds	r18, 0x0100
     b40:	30 91 01 01 	lds	r19, 0x0101
     b44:	ac 01       	movw	r20, r24
     b46:	42 1b       	sub	r20, r18
     b48:	53 0b       	sbc	r21, r19
     b4a:	50 93 8b 00 	sts	0x008B, r21
     b4e:	40 93 8a 00 	sts	0x008A, r20
						OCR1C = full_speed;
     b52:	90 93 8d 00 	sts	0x008D, r25
     b56:	80 93 8c 00 	sts	0x008C, r24
						if(Pho[3]>Pho[5]){
     b5a:	20 91 50 01 	lds	r18, 0x0150
     b5e:	30 91 51 01 	lds	r19, 0x0151
     b62:	80 91 54 01 	lds	r24, 0x0154
     b66:	90 91 55 01 	lds	r25, 0x0155
     b6a:	82 17       	cp	r24, r18
     b6c:	93 07       	cpc	r25, r19
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <__stack+0x73>
     b70:	6e c0       	rjmp	.+220    	; 0xc4e <__stack+0x14f>
							m_usb_tx_string("PID\n");
     b72:	82 e7       	ldi	r24, 0x72	; 114
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
							PID_Pho(Kp_Pho, Kd_Pho);
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e7       	ldi	r20, 0x70	; 112
     b80:	51 e4       	ldi	r21, 0x41	; 65
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	9f e3       	ldi	r25, 0x3F	; 63
     b8a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <PID_Pho>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <__stack+0x14f>
						}
					}
				}
				else{
					PID_Pho(2*Kp_Pho, Kd_Pho);
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e7       	ldi	r20, 0x70	; 112
     b96:	51 e4       	ldi	r21, 0x41	; 65
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e8       	ldi	r24, 0x80	; 128
     b9e:	9f e3       	ldi	r25, 0x3F	; 63
     ba0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <PID_Pho>
     ba4:	54 c0       	rjmp	.+168    	; 0xc4e <__stack+0x14f>
				}
			}
			break;
		case 5:
			if(mean024 - mean135 > strThres){
     ba6:	c7 01       	movw	r24, r14
     ba8:	8c 1b       	sub	r24, r28
     baa:	9d 0b       	sbc	r25, r29
     bac:	c3 97       	sbiw	r24, 0x33	; 51
     bae:	34 f1       	brlt	.+76     	; 0xbfc <__stack+0xfd>
				m_usb_tx_string("turn left\n");
     bb0:	87 e6       	ldi	r24, 0x67	; 103
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				set(PORTB, 0);
     bb8:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
     bba:	29 98       	cbi	0x05, 1	; 5
				if (Pho[2] > Pho[4]){
     bbc:	20 91 4e 01 	lds	r18, 0x014E
     bc0:	30 91 4f 01 	lds	r19, 0x014F
     bc4:	80 91 52 01 	lds	r24, 0x0152
     bc8:	90 91 53 01 	lds	r25, 0x0153
     bcc:	82 17       	cp	r24, r18
     bce:	93 07       	cpc	r25, r19
     bd0:	54 f4       	brge	.+20     	; 0xbe6 <__stack+0xe7>
					PID_stalk(Kp_stalk, Kd_stalk); 
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	63 e3       	ldi	r22, 0x33	; 51
     bda:	73 e3       	ldi	r23, 0x33	; 51
     bdc:	83 e3       	ldi	r24, 0x33	; 51
     bde:	9f e3       	ldi	r25, 0x3F	; 63
     be0:	0e 94 af 03 	call	0x75e	; 0x75e <PID_stalk>
     be4:	34 c0       	rjmp	.+104    	; 0xc4e <__stack+0x14f>
				}
				else{
					OCR1B = full_speed_stalk;
     be6:	8a e8       	ldi	r24, 0x8A	; 138
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	90 93 8b 00 	sts	0x008B, r25
     bee:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
     bf2:	90 93 8d 00 	sts	0x008D, r25
     bf6:	80 93 8c 00 	sts	0x008C, r24
     bfa:	29 c0       	rjmp	.+82     	; 0xc4e <__stack+0x14f>
				}
			}
			else{
				if(mean135 - mean024 > strThres){
     bfc:	ce 19       	sub	r28, r14
     bfe:	df 09       	sbc	r29, r15
     c00:	e3 97       	sbiw	r28, 0x33	; 51
     c02:	2c f1       	brlt	.+74     	; 0xc4e <__stack+0x14f>
					m_usb_tx_string("turn right\n");
     c04:	8b e5       	ldi	r24, 0x5B	; 91
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
					clear(PORTB, 0);
     c0c:	28 98       	cbi	0x05, 0	; 5
					set(PORTB, 1);
     c0e:	29 9a       	sbi	0x05, 1	; 5
					if (Pho[3] > Pho[5]){
     c10:	20 91 50 01 	lds	r18, 0x0150
     c14:	30 91 51 01 	lds	r19, 0x0151
     c18:	80 91 54 01 	lds	r24, 0x0154
     c1c:	90 91 55 01 	lds	r25, 0x0155
     c20:	82 17       	cp	r24, r18
     c22:	93 07       	cpc	r25, r19
     c24:	54 f4       	brge	.+20     	; 0xc3a <__stack+0x13b>
						PID_stalk(Kp_stalk, Kd_stalk);
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	a9 01       	movw	r20, r18
     c2c:	63 e3       	ldi	r22, 0x33	; 51
     c2e:	73 e3       	ldi	r23, 0x33	; 51
     c30:	83 e3       	ldi	r24, 0x33	; 51
     c32:	9f e3       	ldi	r25, 0x3F	; 63
     c34:	0e 94 af 03 	call	0x75e	; 0x75e <PID_stalk>
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <__stack+0x14f>
					}
					else{
						OCR1B = full_speed_stalk;
     c3a:	8a e8       	ldi	r24, 0x8A	; 138
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	90 93 8b 00 	sts	0x008B, r25
     c42:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed_stalk;
     c46:	90 93 8d 00 	sts	0x008D, r25
     c4a:	80 93 8c 00 	sts	0x008C, r24
			break;
		default:
			break;
	}
	
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	08 95       	ret

00000c6c <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ef 93       	push	r30
     ca0:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     ca2:	c0 91 48 01 	lds	r28, 0x0148
     ca6:	d0 91 49 01 	lds	r29, 0x0149
     caa:	a0 90 78 00 	lds	r10, 0x0078
     cae:	b0 90 79 00 	lds	r11, 0x0079
     cb2:	8e 01       	movw	r16, r28
     cb4:	00 0f       	add	r16, r16
     cb6:	11 1f       	adc	r17, r17
     cb8:	06 5b       	subi	r16, 0xB6	; 182
     cba:	1e 4f       	sbci	r17, 0xFE	; 254
     cbc:	f8 01       	movw	r30, r16
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	88 27       	eor	r24, r24
     cc4:	77 fd       	sbrc	r23, 7
     cc6:	80 95       	com	r24
     cc8:	98 2f       	mov	r25, r24
     cca:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
     cce:	2d ec       	ldi	r18, 0xCD	; 205
     cd0:	3c ec       	ldi	r19, 0xCC	; 204
     cd2:	4c e4       	ldi	r20, 0x4C	; 76
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     cda:	6b 01       	movw	r12, r22
     cdc:	7c 01       	movw	r14, r24
     cde:	b5 01       	movw	r22, r10
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
     ce8:	2c ec       	ldi	r18, 0xCC	; 204
     cea:	3c ec       	ldi	r19, 0xCC	; 204
     cec:	4c e4       	ldi	r20, 0x4C	; 76
     cee:	5e e3       	ldi	r21, 0x3E	; 62
     cf0:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	c7 01       	movw	r24, r14
     cfa:	b6 01       	movw	r22, r12
     cfc:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
     d00:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
     d04:	f8 01       	movw	r30, r16
     d06:	71 83       	std	Z+1, r23	; 0x01
     d08:	60 83       	st	Z, r22
	
	i = i + 1;
     d0a:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     d0c:	c8 30       	cpi	r28, 0x08	; 8
     d0e:	d1 05       	cpc	r29, r1
     d10:	2c f4       	brge	.+10     	; 0xd1c <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     d12:	d0 93 49 01 	sts	0x0149, r29
     d16:	c0 93 48 01 	sts	0x0148, r28
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__vector_29+0xb8>
	if(i > 7){
		i = 0;
     d1c:	10 92 49 01 	sts	0x0149, r1
     d20:	10 92 48 01 	sts	0x0148, r1
	}
	
	clear(ADCSRA, ADEN);
     d24:	ea e7       	ldi	r30, 0x7A	; 122
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	80 83       	st	Z, r24
	switch(i){
     d2e:	80 91 48 01 	lds	r24, 0x0148
     d32:	90 91 49 01 	lds	r25, 0x0149
     d36:	87 30       	cpi	r24, 0x07	; 7
     d38:	91 05       	cpc	r25, r1
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <__vector_29+0xd2>
     d3c:	7b c0       	rjmp	.+246    	; 0xe34 <__vector_29+0x1c8>
     d3e:	fc 01       	movw	r30, r24
     d40:	ea 5a       	subi	r30, 0xAA	; 170
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     d48:	eb e7       	ldi	r30, 0x7B	; 123
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 7d       	andi	r24, 0xDF	; 223
     d50:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     d52:	ec e7       	ldi	r30, 0x7C	; 124
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8b 7f       	andi	r24, 0xFB	; 251
     d5a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     d5c:	80 81       	ld	r24, Z
     d5e:	8d 7f       	andi	r24, 0xFD	; 253
     d60:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     d62:	80 81       	ld	r24, Z
     d64:	8e 7f       	andi	r24, 0xFE	; 254
     d66:	80 83       	st	Z, r24
			break;
     d68:	65 c0       	rjmp	.+202    	; 0xe34 <__vector_29+0x1c8>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     d6a:	eb e7       	ldi	r30, 0x7B	; 123
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7d       	andi	r24, 0xDF	; 223
     d72:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     d74:	ec e7       	ldi	r30, 0x7C	; 124
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8b 7f       	andi	r24, 0xFB	; 251
     d7c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     d7e:	80 81       	ld	r24, Z
     d80:	8d 7f       	andi	r24, 0xFD	; 253
     d82:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     d84:	80 81       	ld	r24, Z
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	80 83       	st	Z, r24
			break;
     d8a:	54 c0       	rjmp	.+168    	; 0xe34 <__vector_29+0x1c8>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     d8c:	eb e7       	ldi	r30, 0x7B	; 123
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 62       	ori	r24, 0x20	; 32
     d94:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     d96:	ec e7       	ldi	r30, 0x7C	; 124
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8b 7f       	andi	r24, 0xFB	; 251
     d9e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     da0:	80 81       	ld	r24, Z
     da2:	8d 7f       	andi	r24, 0xFD	; 253
     da4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     da6:	80 81       	ld	r24, Z
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	80 83       	st	Z, r24
			break;
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <__vector_29+0x1c8>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     dae:	eb e7       	ldi	r30, 0x7B	; 123
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 62       	ori	r24, 0x20	; 32
     db6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     db8:	ec e7       	ldi	r30, 0x7C	; 124
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8b 7f       	andi	r24, 0xFB	; 251
     dc0:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     dc2:	80 81       	ld	r24, Z
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     dc8:	80 81       	ld	r24, Z
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	80 83       	st	Z, r24
			break;
     dce:	32 c0       	rjmp	.+100    	; 0xe34 <__vector_29+0x1c8>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     dd0:	eb e7       	ldi	r30, 0x7B	; 123
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 62       	ori	r24, 0x20	; 32
     dd8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     dda:	ec e7       	ldi	r30, 0x7C	; 124
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8b 7f       	andi	r24, 0xFB	; 251
     de2:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     de4:	80 81       	ld	r24, Z
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     dea:	80 81       	ld	r24, Z
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	80 83       	st	Z, r24
			break;
     df0:	21 c0       	rjmp	.+66     	; 0xe34 <__vector_29+0x1c8>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     df2:	eb e7       	ldi	r30, 0x7B	; 123
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 62       	ori	r24, 0x20	; 32
     dfa:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     dfc:	ec e7       	ldi	r30, 0x7C	; 124
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     e06:	80 81       	ld	r24, Z
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     e0c:	80 81       	ld	r24, Z
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	80 83       	st	Z, r24
			break;
     e12:	10 c0       	rjmp	.+32     	; 0xe34 <__vector_29+0x1c8>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     e14:	eb e7       	ldi	r30, 0x7B	; 123
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 62       	ori	r24, 0x20	; 32
     e1c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     e1e:	ec e7       	ldi	r30, 0x7C	; 124
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     e2e:	80 81       	ld	r24, Z
     e30:	8e 7f       	andi	r24, 0xFE	; 254
     e32:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     e34:	ea e7       	ldi	r30, 0x7A	; 122
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	80 83       	st	Z, r24
	
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <deterState>:

void deterState(int *state){
	if (*state == 2 || *state == 3){
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 81       	ld	r18, Z
     e7e:	31 81       	ldd	r19, Z+1	; 0x01
     e80:	22 50       	subi	r18, 0x02	; 2
     e82:	31 09       	sbc	r19, r1
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	f0 f4       	brcc	.+60     	; 0xec6 <deterState+0x4c>
		if (Pho[6] >gotThres){
     e8a:	20 91 56 01 	lds	r18, 0x0156
     e8e:	30 91 57 01 	lds	r19, 0x0157
     e92:	27 3b       	cpi	r18, 0xB7	; 183
     e94:	f3 e0       	ldi	r31, 0x03	; 3
     e96:	3f 07       	cpc	r19, r31
     e98:	54 f0       	brlt	.+20     	; 0xeae <deterState+0x34>
			*state = 3;
     e9a:	23 e0       	ldi	r18, 0x03	; 3
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	fc 01       	movw	r30, r24
     ea0:	31 83       	std	Z+1, r19	; 0x01
     ea2:	20 83       	st	Z, r18
			m_usb_tx_string("got the puck!\n");
     ea4:	8c e4       	ldi	r24, 0x4C	; 76
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
     eac:	08 95       	ret
			
		}
		else{
			if(Pho[6] < loseThres){
     eae:	20 32       	cpi	r18, 0x20	; 32
     eb0:	33 40       	sbci	r19, 0x03	; 3
     eb2:	4c f4       	brge	.+18     	; 0xec6 <deterState+0x4c>
				*state = 2;
     eb4:	22 e0       	ldi	r18, 0x02	; 2
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	fc 01       	movw	r30, r24
     eba:	31 83       	std	Z+1, r19	; 0x01
     ebc:	20 83       	st	Z, r18
				m_usb_tx_string("lost the puck!\n");
     ebe:	8c e3       	ldi	r24, 0x3C	; 60
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
     ec6:	08 95       	ret

00000ec8 <ifGotoPuck>:
		}
	}
}

void ifGotoPuck(int *state, float *dir){
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres){
     ec8:	40 91 4a 01 	lds	r20, 0x014A
     ecc:	50 91 4b 01 	lds	r21, 0x014B
     ed0:	20 91 4c 01 	lds	r18, 0x014C
     ed4:	30 91 4d 01 	lds	r19, 0x014D
     ed8:	42 0f       	add	r20, r18
     eda:	53 1f       	adc	r21, r19
     edc:	20 91 4e 01 	lds	r18, 0x014E
     ee0:	30 91 4f 01 	lds	r19, 0x014F
     ee4:	42 0f       	add	r20, r18
     ee6:	53 1f       	adc	r21, r19
     ee8:	20 91 50 01 	lds	r18, 0x0150
     eec:	30 91 51 01 	lds	r19, 0x0151
     ef0:	42 0f       	add	r20, r18
     ef2:	53 1f       	adc	r21, r19
     ef4:	20 91 02 01 	lds	r18, 0x0102
     ef8:	30 91 03 01 	lds	r19, 0x0103
     efc:	24 17       	cp	r18, r20
     efe:	35 07       	cpc	r19, r21
     f00:	2c f4       	brge	.+10     	; 0xf0c <ifGotoPuck+0x44>
		*state = 2;
     f02:	22 e0       	ldi	r18, 0x02	; 2
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	fc 01       	movw	r30, r24
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	20 83       	st	Z, r18
     f0c:	08 95       	ret

00000f0e <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     f0e:	4f 92       	push	r4
     f10:	5f 92       	push	r5
     f12:	6f 92       	push	r6
     f14:	7f 92       	push	r7
     f16:	8f 92       	push	r8
     f18:	9f 92       	push	r9
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	60 97       	sbiw	r28, 0x10	; 16
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	2b 01       	movw	r4, r22
     f40:	3c 01       	movw	r6, r24
     f42:	2d 83       	std	Y+5, r18	; 0x05
     f44:	3e 83       	std	Y+6, r19	; 0x06
     f46:	4f 83       	std	Y+7, r20	; 0x07
     f48:	58 87       	std	Y+8, r21	; 0x08
     f4a:	58 01       	movw	r10, r16
     f4c:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     f4e:	d5 01       	movw	r26, r10
     f50:	cd 90       	ld	r12, X+
     f52:	dd 90       	ld	r13, X+
     f54:	ed 90       	ld	r14, X+
     f56:	fc 90       	ld	r15, X
     f58:	9b 01       	movw	r18, r22
     f5a:	ac 01       	movw	r20, r24
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     f64:	f8 01       	movw	r30, r16
     f66:	20 81       	ld	r18, Z
     f68:	31 81       	ldd	r19, Z+1	; 0x01
     f6a:	42 81       	ldd	r20, Z+2	; 0x02
     f6c:	53 81       	ldd	r21, Z+3	; 0x03
     f6e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
     f72:	69 87       	std	Y+9, r22	; 0x09
     f74:	7a 87       	std	Y+10, r23	; 0x0a
     f76:	8b 87       	std	Y+11, r24	; 0x0b
     f78:	9c 87       	std	Y+12, r25	; 0x0c
     f7a:	d5 01       	movw	r26, r10
     f7c:	14 96       	adiw	r26, 0x04	; 4
     f7e:	8d 91       	ld	r24, X+
     f80:	9d 91       	ld	r25, X+
     f82:	0d 90       	ld	r0, X+
     f84:	bc 91       	ld	r27, X
     f86:	a0 2d       	mov	r26, r0
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	ab 83       	std	Y+3, r26	; 0x03
     f8e:	bc 83       	std	Y+4, r27	; 0x04
     f90:	2d 81       	ldd	r18, Y+5	; 0x05
     f92:	3e 81       	ldd	r19, Y+6	; 0x06
     f94:	4f 81       	ldd	r20, Y+7	; 0x07
     f96:	58 85       	ldd	r21, Y+8	; 0x08
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     fa0:	6d 87       	std	Y+13, r22	; 0x0d
     fa2:	7e 87       	std	Y+14, r23	; 0x0e
     fa4:	8f 87       	std	Y+15, r24	; 0x0f
     fa6:	98 8b       	std	Y+16, r25	; 0x10
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	69 85       	ldd	r22, Y+9	; 0x09
     fae:	7a 85       	ldd	r23, Y+10	; 0x0a
     fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb4:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
     fb8:	4b 01       	movw	r8, r22
     fba:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     fbc:	29 81       	ldd	r18, Y+1	; 0x01
     fbe:	3a 81       	ldd	r19, Y+2	; 0x02
     fc0:	4b 81       	ldd	r20, Y+3	; 0x03
     fc2:	5c 81       	ldd	r21, Y+4	; 0x04
     fc4:	c3 01       	movw	r24, r6
     fc6:	b2 01       	movw	r22, r4
     fc8:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     fcc:	f8 01       	movw	r30, r16
     fce:	24 81       	ldd	r18, Z+4	; 0x04
     fd0:	35 81       	ldd	r19, Z+5	; 0x05
     fd2:	46 81       	ldd	r20, Z+6	; 0x06
     fd4:	57 81       	ldd	r21, Z+7	; 0x07
     fd6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
     fda:	2b 01       	movw	r4, r22
     fdc:	3c 01       	movw	r6, r24
     fde:	2d 81       	ldd	r18, Y+5	; 0x05
     fe0:	3e 81       	ldd	r19, Y+6	; 0x06
     fe2:	4f 81       	ldd	r20, Y+7	; 0x07
     fe4:	58 85       	ldd	r21, Y+8	; 0x08
     fe6:	c7 01       	movw	r24, r14
     fe8:	b6 01       	movw	r22, r12
     fea:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
     fee:	69 83       	std	Y+1, r22	; 0x01
     ff0:	7a 83       	std	Y+2, r23	; 0x02
     ff2:	8b 83       	std	Y+3, r24	; 0x03
     ff4:	9c 83       	std	Y+4, r25	; 0x04
     ff6:	9b 01       	movw	r18, r22
     ff8:	ac 01       	movw	r20, r24
     ffa:	c3 01       	movw	r24, r6
     ffc:	b2 01       	movw	r22, r4
     ffe:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    1002:	6b 01       	movw	r12, r22
    1004:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
    1006:	2d 85       	ldd	r18, Y+13	; 0x0d
    1008:	3e 85       	ldd	r19, Y+14	; 0x0e
    100a:	4f 85       	ldd	r20, Y+15	; 0x0f
    100c:	58 89       	ldd	r21, Y+16	; 0x10
    100e:	69 85       	ldd	r22, Y+9	; 0x09
    1010:	7a 85       	ldd	r23, Y+10	; 0x0a
    1012:	8b 85       	ldd	r24, Y+11	; 0x0b
    1014:	9c 85       	ldd	r25, Y+12	; 0x0c
    1016:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    101a:	6d 83       	std	Y+5, r22	; 0x05
    101c:	7e 83       	std	Y+6, r23	; 0x06
    101e:	8f 83       	std	Y+7, r24	; 0x07
    1020:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
    1022:	29 81       	ldd	r18, Y+1	; 0x01
    1024:	3a 81       	ldd	r19, Y+2	; 0x02
    1026:	4b 81       	ldd	r20, Y+3	; 0x03
    1028:	5c 81       	ldd	r21, Y+4	; 0x04
    102a:	c3 01       	movw	r24, r6
    102c:	b2 01       	movw	r22, r4
    102e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    1032:	2b 01       	movw	r4, r22
    1034:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
    1036:	a5 01       	movw	r20, r10
    1038:	94 01       	movw	r18, r8
    103a:	c5 01       	movw	r24, r10
    103c:	b4 01       	movw	r22, r8
    103e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1042:	4b 01       	movw	r8, r22
    1044:	5c 01       	movw	r10, r24
    1046:	a7 01       	movw	r20, r14
    1048:	96 01       	movw	r18, r12
    104a:	c7 01       	movw	r24, r14
    104c:	b6 01       	movw	r22, r12
    104e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	c5 01       	movw	r24, r10
    1058:	b4 01       	movw	r22, r8
    105a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    105e:	6b 01       	movw	r12, r22
    1060:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
    1062:	2d 81       	ldd	r18, Y+5	; 0x05
    1064:	3e 81       	ldd	r19, Y+6	; 0x06
    1066:	4f 81       	ldd	r20, Y+7	; 0x07
    1068:	58 85       	ldd	r21, Y+8	; 0x08
    106a:	ca 01       	movw	r24, r20
    106c:	b9 01       	movw	r22, r18
    106e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1072:	4b 01       	movw	r8, r22
    1074:	5c 01       	movw	r10, r24
    1076:	a3 01       	movw	r20, r6
    1078:	92 01       	movw	r18, r4
    107a:	c3 01       	movw	r24, r6
    107c:	b2 01       	movw	r22, r4
    107e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	c5 01       	movw	r24, r10
    1088:	b4 01       	movw	r22, r8
    108a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    108e:	9b 01       	movw	r18, r22
    1090:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
    1092:	01 e0       	ldi	r16, 0x01	; 1
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	c7 01       	movw	r24, r14
    1098:	b6 01       	movw	r22, r12
    109a:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    109e:	88 23       	and	r24, r24
    10a0:	14 f0       	brlt	.+4      	; 0x10a6 <find_sign+0x198>
    10a2:	00 e0       	ldi	r16, 0x00	; 0
    10a4:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
    10a6:	c8 01       	movw	r24, r16
    10a8:	60 96       	adiw	r28, 0x10	; 16
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	5f 90       	pop	r5
    10d2:	4f 90       	pop	r4
    10d4:	08 95       	ret

000010d6 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
    10d6:	2f 92       	push	r2
    10d8:	3f 92       	push	r3
    10da:	4f 92       	push	r4
    10dc:	5f 92       	push	r5
    10de:	6f 92       	push	r6
    10e0:	7f 92       	push	r7
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	28 97       	sbiw	r28, 0x08	; 8
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	1c 01       	movw	r2, r24
    110c:	49 83       	std	Y+1, r20	; 0x01
    110e:	5a 83       	std	Y+2, r21	; 0x02
    1110:	6b 83       	std	Y+3, r22	; 0x03
    1112:	7c 83       	std	Y+4, r23	; 0x04
    1114:	0d 83       	std	Y+5, r16	; 0x05
    1116:	1e 83       	std	Y+6, r17	; 0x06
    1118:	2f 83       	std	Y+7, r18	; 0x07
    111a:	38 87       	std	Y+8, r19	; 0x08
    111c:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
    111e:	f6 01       	movw	r30, r12
    1120:	20 81       	ld	r18, Z
    1122:	31 81       	ldd	r19, Z+1	; 0x01
    1124:	42 81       	ldd	r20, Z+2	; 0x02
    1126:	53 81       	ldd	r21, Z+3	; 0x03
    1128:	f7 01       	movw	r30, r14
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    1136:	4b 01       	movw	r8, r22
    1138:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
    113a:	f6 01       	movw	r30, r12
    113c:	24 81       	ldd	r18, Z+4	; 0x04
    113e:	35 81       	ldd	r19, Z+5	; 0x05
    1140:	46 81       	ldd	r20, Z+6	; 0x06
    1142:	57 81       	ldd	r21, Z+7	; 0x07
    1144:	f7 01       	movw	r30, r14
    1146:	64 81       	ldd	r22, Z+4	; 0x04
    1148:	75 81       	ldd	r23, Z+5	; 0x05
    114a:	86 81       	ldd	r24, Z+6	; 0x06
    114c:	97 81       	ldd	r25, Z+7	; 0x07
    114e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    1152:	6b 01       	movw	r12, r22
    1154:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
    1156:	a5 01       	movw	r20, r10
    1158:	94 01       	movw	r18, r8
    115a:	c5 01       	movw	r24, r10
    115c:	b4 01       	movw	r22, r8
    115e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1162:	2b 01       	movw	r4, r22
    1164:	3c 01       	movw	r6, r24
    1166:	a7 01       	movw	r20, r14
    1168:	96 01       	movw	r18, r12
    116a:	c7 01       	movw	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1172:	9b 01       	movw	r18, r22
    1174:	ac 01       	movw	r20, r24
    1176:	c3 01       	movw	r24, r6
    1178:	b2 01       	movw	r22, r4
    117a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
    117e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <sqrt>
    1182:	2b 01       	movw	r4, r22
    1184:	3c 01       	movw	r6, r24
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	c5 01       	movw	r24, r10
    118c:	b4 01       	movw	r22, r8
    118e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    1192:	4b 01       	movw	r8, r22
    1194:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
    1196:	a3 01       	movw	r20, r6
    1198:	92 01       	movw	r18, r4
    119a:	c7 01       	movw	r24, r14
    119c:	b6 01       	movw	r22, r12
    119e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    11a2:	6b 01       	movw	r12, r22
    11a4:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
    11a6:	f8 01       	movw	r30, r16
    11a8:	20 81       	ld	r18, Z
    11aa:	31 81       	ldd	r19, Z+1	; 0x01
    11ac:	42 81       	ldd	r20, Z+2	; 0x02
    11ae:	53 81       	ldd	r21, Z+3	; 0x03
    11b0:	c5 01       	movw	r24, r10
    11b2:	b4 01       	movw	r22, r8
    11b4:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    11b8:	2b 01       	movw	r4, r22
    11ba:	3c 01       	movw	r6, r24
    11bc:	f8 01       	movw	r30, r16
    11be:	24 81       	ldd	r18, Z+4	; 0x04
    11c0:	35 81       	ldd	r19, Z+5	; 0x05
    11c2:	46 81       	ldd	r20, Z+6	; 0x06
    11c4:	57 81       	ldd	r21, Z+7	; 0x07
    11c6:	c7 01       	movw	r24, r14
    11c8:	b6 01       	movw	r22, r12
    11ca:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    11ce:	9b 01       	movw	r18, r22
    11d0:	ac 01       	movw	r20, r24
    11d2:	c3 01       	movw	r24, r6
    11d4:	b2 01       	movw	r22, r4
    11d6:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
	alpha = acos(cos_alpha);
    11da:	0e 94 ad 1c 	call	0x395a	; 0x395a <acos>
    11de:	2b 01       	movw	r4, r22
    11e0:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
    11e2:	2a 94       	dec	r2
    11e4:	23 28       	or	r2, r3
    11e6:	d1 f4       	brne	.+52     	; 0x121c <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
    11e8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ea:	3e 81       	ldd	r19, Y+6	; 0x06
    11ec:	4f 81       	ldd	r20, Y+7	; 0x07
    11ee:	58 85       	ldd	r21, Y+8	; 0x08
    11f0:	50 58       	subi	r21, 0x80	; 128
    11f2:	c7 01       	movw	r24, r14
    11f4:	b6 01       	movw	r22, r12
    11f6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    11fa:	6b 01       	movw	r12, r22
    11fc:	7c 01       	movw	r14, r24
    11fe:	29 81       	ldd	r18, Y+1	; 0x01
    1200:	3a 81       	ldd	r19, Y+2	; 0x02
    1202:	4b 81       	ldd	r20, Y+3	; 0x03
    1204:	5c 81       	ldd	r21, Y+4	; 0x04
    1206:	c5 01       	movw	r24, r10
    1208:	b4 01       	movw	r22, r8
    120a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    120e:	9b 01       	movw	r18, r22
    1210:	ac 01       	movw	r20, r24
    1212:	c7 01       	movw	r24, r14
    1214:	b6 01       	movw	r22, r12
    1216:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    121a:	19 c0       	rjmp	.+50     	; 0x124e <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    121c:	2d 81       	ldd	r18, Y+5	; 0x05
    121e:	3e 81       	ldd	r19, Y+6	; 0x06
    1220:	4f 81       	ldd	r20, Y+7	; 0x07
    1222:	58 85       	ldd	r21, Y+8	; 0x08
    1224:	50 58       	subi	r21, 0x80	; 128
    1226:	c7 01       	movw	r24, r14
    1228:	b6 01       	movw	r22, r12
    122a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    122e:	6b 01       	movw	r12, r22
    1230:	7c 01       	movw	r14, r24
    1232:	29 81       	ldd	r18, Y+1	; 0x01
    1234:	3a 81       	ldd	r19, Y+2	; 0x02
    1236:	4b 81       	ldd	r20, Y+3	; 0x03
    1238:	5c 81       	ldd	r21, Y+4	; 0x04
    123a:	c5 01       	movw	r24, r10
    123c:	b4 01       	movw	r22, r8
    123e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	c7 01       	movw	r24, r14
    1248:	b6 01       	movw	r22, r12
    124a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
	}
	if (c2g_wx < 0){
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	a9 01       	movw	r20, r18
    1254:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1258:	88 23       	and	r24, r24
    125a:	4c f0       	brlt	.+18     	; 0x126e <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    125c:	40 92 64 01 	sts	0x0164, r4
    1260:	50 92 65 01 	sts	0x0165, r5
    1264:	60 92 66 01 	sts	0x0166, r6
    1268:	70 92 67 01 	sts	0x0167, r7
    126c:	0c c0       	rjmp	.+24     	; 0x1286 <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    126e:	77 fa       	bst	r7, 7
    1270:	70 94       	com	r7
    1272:	77 f8       	bld	r7, 7
    1274:	70 94       	com	r7
    1276:	40 92 64 01 	sts	0x0164, r4
    127a:	50 92 65 01 	sts	0x0165, r5
    127e:	60 92 66 01 	sts	0x0166, r6
    1282:	70 92 67 01 	sts	0x0167, r7
	}
	m_usb_tx_string("alpha: ");
    1286:	82 e6       	ldi	r24, 0x62	; 98
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(alpha*10);
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	60 91 64 01 	lds	r22, 0x0164
    129a:	70 91 65 01 	lds	r23, 0x0165
    129e:	80 91 66 01 	lds	r24, 0x0166
    12a2:	90 91 67 01 	lds	r25, 0x0167
    12a6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    12aa:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    12ae:	cb 01       	movw	r24, r22
    12b0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    12b4:	80 e6       	ldi	r24, 0x60	; 96
    12b6:	92 e0       	ldi	r25, 0x02	; 2
    12b8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
}
    12bc:	28 96       	adiw	r28, 0x08	; 8
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	3f 90       	pop	r3
    12ea:	2f 90       	pop	r2
    12ec:	08 95       	ret

000012ee <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    12ee:	4f 92       	push	r4
    12f0:	5f 92       	push	r5
    12f2:	6f 92       	push	r6
    12f4:	7f 92       	push	r7
    12f6:	8f 92       	push	r8
    12f8:	9f 92       	push	r9
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	00 d0       	rcall	.+0      	; 0x130c <PID_alpha+0x1e>
    130c:	00 d0       	rcall	.+0      	; 0x130e <PID_alpha+0x20>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	4b 01       	movw	r8, r22
    1314:	5c 01       	movw	r10, r24
    1316:	29 83       	std	Y+1, r18	; 0x01
    1318:	3a 83       	std	Y+2, r19	; 0x02
    131a:	4b 83       	std	Y+3, r20	; 0x03
    131c:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    131e:	40 90 64 01 	lds	r4, 0x0164
    1322:	50 90 65 01 	lds	r5, 0x0165
    1326:	60 90 66 01 	lds	r6, 0x0166
    132a:	70 90 67 01 	lds	r7, 0x0167
    132e:	20 91 60 01 	lds	r18, 0x0160
    1332:	30 91 61 01 	lds	r19, 0x0161
    1336:	40 91 62 01 	lds	r20, 0x0162
    133a:	50 91 63 01 	lds	r21, 0x0163
    133e:	c3 01       	movw	r24, r6
    1340:	b2 01       	movw	r22, r4
    1342:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    1346:	6b 01       	movw	r12, r22
    1348:	7c 01       	movw	r14, r24
    134a:	60 93 5c 01 	sts	0x015C, r22
    134e:	70 93 5d 01 	sts	0x015D, r23
    1352:	80 93 5e 01 	sts	0x015E, r24
    1356:	90 93 5f 01 	sts	0x015F, r25
	float P =0, D = 0;
	P = Kp * alpha;
    135a:	a5 01       	movw	r20, r10
    135c:	94 01       	movw	r18, r8
    135e:	c3 01       	movw	r24, r6
    1360:	b2 01       	movw	r22, r4
    1362:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1366:	4b 01       	movw	r8, r22
    1368:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    136a:	29 81       	ldd	r18, Y+1	; 0x01
    136c:	3a 81       	ldd	r19, Y+2	; 0x02
    136e:	4b 81       	ldd	r20, Y+3	; 0x03
    1370:	5c 81       	ldd	r21, Y+4	; 0x04
    1372:	c7 01       	movw	r24, r14
    1374:	b6 01       	movw	r22, r12
    1376:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    137a:	9b 01       	movw	r18, r22
    137c:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    137e:	c5 01       	movw	r24, r10
    1380:	b4 01       	movw	r22, r8
    1382:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    1386:	60 93 58 01 	sts	0x0158, r22
    138a:	70 93 59 01 	sts	0x0159, r23
    138e:	80 93 5a 01 	sts	0x015A, r24
    1392:	90 93 5b 01 	sts	0x015B, r25
	
	alpha_last = alpha;
    1396:	40 92 60 01 	sts	0x0160, r4
    139a:	50 92 61 01 	sts	0x0161, r5
    139e:	60 92 62 01 	sts	0x0162, r6
    13a2:	70 92 63 01 	sts	0x0163, r7
	
	m_usb_tx_string("alpha*10: ");
    13a6:	85 e5       	ldi	r24, 0x55	; 85
    13a8:	92 e0       	ldi	r25, 0x02	; 2
    13aa:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	60 91 64 01 	lds	r22, 0x0164
    13ba:	70 91 65 01 	lds	r23, 0x0165
    13be:	80 91 66 01 	lds	r24, 0x0166
    13c2:	90 91 67 01 	lds	r25, 0x0167
    13c6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    13ca:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    13ce:	cb 01       	movw	r24, r22
    13d0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    13d4:	83 e5       	ldi	r24, 0x53	; 83
    13d6:	92 e0       	ldi	r25, 0x02	; 2
    13d8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	m_usb_tx_string("gain*10: ");
    13dc:	89 e4       	ldi	r24, 0x49	; 73
    13de:	92 e0       	ldi	r25, 0x02	; 2
    13e0:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	60 91 58 01 	lds	r22, 0x0158
    13f0:	70 91 59 01 	lds	r23, 0x0159
    13f4:	80 91 5a 01 	lds	r24, 0x015A
    13f8:	90 91 5b 01 	lds	r25, 0x015B
    13fc:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1400:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1404:	cb 01       	movw	r24, r22
    1406:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    140a:	87 e4       	ldi	r24, 0x47	; 71
    140c:	92 e0       	ldi	r25, 0x02	; 2
    140e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	if(gain_loc<0){  // turn right
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	60 91 58 01 	lds	r22, 0x0158
    141c:	70 91 59 01 	lds	r23, 0x0159
    1420:	80 91 5a 01 	lds	r24, 0x015A
    1424:	90 91 5b 01 	lds	r25, 0x015B
    1428:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    142c:	88 23       	and	r24, r24
    142e:	0c f0       	brlt	.+2      	; 0x1432 <PID_alpha+0x144>
    1430:	44 c0       	rjmp	.+136    	; 0x14ba <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    1432:	8b e3       	ldi	r24, 0x3B	; 59
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    143a:	60 91 58 01 	lds	r22, 0x0158
    143e:	70 91 59 01 	lds	r23, 0x0159
    1442:	80 91 5a 01 	lds	r24, 0x015A
    1446:	90 91 5b 01 	lds	r25, 0x015B
    144a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    144e:	9b 01       	movw	r18, r22
    1450:	77 23       	and	r23, r23
    1452:	24 f4       	brge	.+8      	; 0x145c <PID_alpha+0x16e>
    1454:	22 27       	eor	r18, r18
    1456:	33 27       	eor	r19, r19
    1458:	26 1b       	sub	r18, r22
    145a:	37 0b       	sbc	r19, r23
    145c:	8a e8       	ldi	r24, 0x8A	; 138
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	82 1b       	sub	r24, r18
    1462:	93 0b       	sbc	r25, r19
    1464:	90 93 8b 00 	sts	0x008B, r25
    1468:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    146c:	e0 90 1a 01 	lds	r14, 0x011A
    1470:	f0 90 1b 01 	lds	r15, 0x011B
    1474:	60 91 58 01 	lds	r22, 0x0158
    1478:	70 91 59 01 	lds	r23, 0x0159
    147c:	80 91 5a 01 	lds	r24, 0x015A
    1480:	90 91 5b 01 	lds	r25, 0x015B
    1484:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1488:	9b 01       	movw	r18, r22
    148a:	77 23       	and	r23, r23
    148c:	24 f4       	brge	.+8      	; 0x1496 <PID_alpha+0x1a8>
    148e:	22 27       	eor	r18, r18
    1490:	33 27       	eor	r19, r19
    1492:	26 1b       	sub	r18, r22
    1494:	37 0b       	sbc	r19, r23
    1496:	e2 16       	cp	r14, r18
    1498:	f3 06       	cpc	r15, r19
    149a:	44 f4       	brge	.+16     	; 0x14ac <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    149c:	8a e8       	ldi	r24, 0x8A	; 138
    149e:	92 e0       	ldi	r25, 0x02	; 2
    14a0:	8e 19       	sub	r24, r14
    14a2:	9f 09       	sbc	r25, r15
    14a4:	90 93 8b 00 	sts	0x008B, r25
    14a8:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    14ac:	8a e8       	ldi	r24, 0x8A	; 138
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	90 93 8d 00 	sts	0x008D, r25
    14b4:	80 93 8c 00 	sts	0x008C, r24
    14b8:	43 c0       	rjmp	.+134    	; 0x1540 <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    14ba:	80 e3       	ldi	r24, 0x30	; 48
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    14c2:	60 91 58 01 	lds	r22, 0x0158
    14c6:	70 91 59 01 	lds	r23, 0x0159
    14ca:	80 91 5a 01 	lds	r24, 0x015A
    14ce:	90 91 5b 01 	lds	r25, 0x015B
    14d2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    14d6:	9b 01       	movw	r18, r22
    14d8:	77 23       	and	r23, r23
    14da:	24 f4       	brge	.+8      	; 0x14e4 <PID_alpha+0x1f6>
    14dc:	22 27       	eor	r18, r18
    14de:	33 27       	eor	r19, r19
    14e0:	26 1b       	sub	r18, r22
    14e2:	37 0b       	sbc	r19, r23
    14e4:	8a e8       	ldi	r24, 0x8A	; 138
    14e6:	92 e0       	ldi	r25, 0x02	; 2
    14e8:	82 1b       	sub	r24, r18
    14ea:	93 0b       	sbc	r25, r19
    14ec:	90 93 8d 00 	sts	0x008D, r25
    14f0:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    14f4:	e0 90 1a 01 	lds	r14, 0x011A
    14f8:	f0 90 1b 01 	lds	r15, 0x011B
    14fc:	60 91 58 01 	lds	r22, 0x0158
    1500:	70 91 59 01 	lds	r23, 0x0159
    1504:	80 91 5a 01 	lds	r24, 0x015A
    1508:	90 91 5b 01 	lds	r25, 0x015B
    150c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1510:	9b 01       	movw	r18, r22
    1512:	77 23       	and	r23, r23
    1514:	24 f4       	brge	.+8      	; 0x151e <PID_alpha+0x230>
    1516:	22 27       	eor	r18, r18
    1518:	33 27       	eor	r19, r19
    151a:	26 1b       	sub	r18, r22
    151c:	37 0b       	sbc	r19, r23
    151e:	e2 16       	cp	r14, r18
    1520:	f3 06       	cpc	r15, r19
    1522:	44 f4       	brge	.+16     	; 0x1534 <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    1524:	8a e8       	ldi	r24, 0x8A	; 138
    1526:	92 e0       	ldi	r25, 0x02	; 2
    1528:	8e 19       	sub	r24, r14
    152a:	9f 09       	sbc	r25, r15
    152c:	90 93 8d 00 	sts	0x008D, r25
    1530:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1534:	8a e8       	ldi	r24, 0x8A	; 138
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	90 93 8b 00 	sts	0x008B, r25
    153c:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	7f 90       	pop	r7
    155e:	6f 90       	pop	r6
    1560:	5f 90       	pop	r5
    1562:	4f 90       	pop	r4
    1564:	08 95       	ret

00001566 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    1566:	4f 92       	push	r4
    1568:	5f 92       	push	r5
    156a:	6f 92       	push	r6
    156c:	7f 92       	push	r7
    156e:	8f 92       	push	r8
    1570:	9f 92       	push	r9
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	00 d0       	rcall	.+0      	; 0x1584 <PID_p2p+0x1e>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <PID_p2p+0x20>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	4b 01       	movw	r8, r22
    158c:	5c 01       	movw	r10, r24
    158e:	29 83       	std	Y+1, r18	; 0x01
    1590:	3a 83       	std	Y+2, r19	; 0x02
    1592:	4b 83       	std	Y+3, r20	; 0x03
    1594:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1596:	40 90 64 01 	lds	r4, 0x0164
    159a:	50 90 65 01 	lds	r5, 0x0165
    159e:	60 90 66 01 	lds	r6, 0x0166
    15a2:	70 90 67 01 	lds	r7, 0x0167
    15a6:	20 91 60 01 	lds	r18, 0x0160
    15aa:	30 91 61 01 	lds	r19, 0x0161
    15ae:	40 91 62 01 	lds	r20, 0x0162
    15b2:	50 91 63 01 	lds	r21, 0x0163
    15b6:	c3 01       	movw	r24, r6
    15b8:	b2 01       	movw	r22, r4
    15ba:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    15be:	6b 01       	movw	r12, r22
    15c0:	7c 01       	movw	r14, r24
    15c2:	60 93 5c 01 	sts	0x015C, r22
    15c6:	70 93 5d 01 	sts	0x015D, r23
    15ca:	80 93 5e 01 	sts	0x015E, r24
    15ce:	90 93 5f 01 	sts	0x015F, r25
	float P =0, D = 0;
	P = Kp * alpha;
    15d2:	a5 01       	movw	r20, r10
    15d4:	94 01       	movw	r18, r8
    15d6:	c3 01       	movw	r24, r6
    15d8:	b2 01       	movw	r22, r4
    15da:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    15de:	4b 01       	movw	r8, r22
    15e0:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    15e2:	29 81       	ldd	r18, Y+1	; 0x01
    15e4:	3a 81       	ldd	r19, Y+2	; 0x02
    15e6:	4b 81       	ldd	r20, Y+3	; 0x03
    15e8:	5c 81       	ldd	r21, Y+4	; 0x04
    15ea:	c7 01       	movw	r24, r14
    15ec:	b6 01       	movw	r22, r12
    15ee:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    15f6:	c5 01       	movw	r24, r10
    15f8:	b4 01       	movw	r22, r8
    15fa:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    15fe:	60 93 58 01 	sts	0x0158, r22
    1602:	70 93 59 01 	sts	0x0159, r23
    1606:	80 93 5a 01 	sts	0x015A, r24
    160a:	90 93 5b 01 	sts	0x015B, r25
	
	alpha_last = alpha;
    160e:	40 92 60 01 	sts	0x0160, r4
    1612:	50 92 61 01 	sts	0x0161, r5
    1616:	60 92 62 01 	sts	0x0162, r6
    161a:	70 92 63 01 	sts	0x0163, r7
	
	m_usb_tx_string("alpha*10: ");
    161e:	85 e2       	ldi	r24, 0x25	; 37
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	60 91 64 01 	lds	r22, 0x0164
    1632:	70 91 65 01 	lds	r23, 0x0165
    1636:	80 91 66 01 	lds	r24, 0x0166
    163a:	90 91 67 01 	lds	r25, 0x0167
    163e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1642:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1646:	cb 01       	movw	r24, r22
    1648:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    164c:	83 e2       	ldi	r24, 0x23	; 35
    164e:	92 e0       	ldi	r25, 0x02	; 2
    1650:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1654:	89 e1       	ldi	r24, 0x19	; 25
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	60 91 58 01 	lds	r22, 0x0158
    1668:	70 91 59 01 	lds	r23, 0x0159
    166c:	80 91 5a 01 	lds	r24, 0x015A
    1670:	90 91 5b 01 	lds	r25, 0x015B
    1674:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1678:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    167c:	cb 01       	movw	r24, r22
    167e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1682:	87 e1       	ldi	r24, 0x17	; 23
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	if(gain_loc<0){  // turn right
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	60 91 58 01 	lds	r22, 0x0158
    1694:	70 91 59 01 	lds	r23, 0x0159
    1698:	80 91 5a 01 	lds	r24, 0x015A
    169c:	90 91 5b 01 	lds	r25, 0x015B
    16a0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    16a4:	88 23       	and	r24, r24
    16a6:	0c f0       	brlt	.+2      	; 0x16aa <PID_p2p+0x144>
    16a8:	44 c0       	rjmp	.+136    	; 0x1732 <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    16aa:	8b e0       	ldi	r24, 0x0B	; 11
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    16b2:	60 91 58 01 	lds	r22, 0x0158
    16b6:	70 91 59 01 	lds	r23, 0x0159
    16ba:	80 91 5a 01 	lds	r24, 0x015A
    16be:	90 91 5b 01 	lds	r25, 0x015B
    16c2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    16c6:	9b 01       	movw	r18, r22
    16c8:	77 23       	and	r23, r23
    16ca:	24 f4       	brge	.+8      	; 0x16d4 <PID_p2p+0x16e>
    16cc:	22 27       	eor	r18, r18
    16ce:	33 27       	eor	r19, r19
    16d0:	26 1b       	sub	r18, r22
    16d2:	37 0b       	sbc	r19, r23
    16d4:	8a e8       	ldi	r24, 0x8A	; 138
    16d6:	92 e0       	ldi	r25, 0x02	; 2
    16d8:	82 1b       	sub	r24, r18
    16da:	93 0b       	sbc	r25, r19
    16dc:	90 93 8b 00 	sts	0x008B, r25
    16e0:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    16e4:	e0 90 18 01 	lds	r14, 0x0118
    16e8:	f0 90 19 01 	lds	r15, 0x0119
    16ec:	60 91 58 01 	lds	r22, 0x0158
    16f0:	70 91 59 01 	lds	r23, 0x0159
    16f4:	80 91 5a 01 	lds	r24, 0x015A
    16f8:	90 91 5b 01 	lds	r25, 0x015B
    16fc:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1700:	9b 01       	movw	r18, r22
    1702:	77 23       	and	r23, r23
    1704:	24 f4       	brge	.+8      	; 0x170e <PID_p2p+0x1a8>
    1706:	22 27       	eor	r18, r18
    1708:	33 27       	eor	r19, r19
    170a:	26 1b       	sub	r18, r22
    170c:	37 0b       	sbc	r19, r23
    170e:	e2 16       	cp	r14, r18
    1710:	f3 06       	cpc	r15, r19
    1712:	44 f4       	brge	.+16     	; 0x1724 <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    1714:	8a e8       	ldi	r24, 0x8A	; 138
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	8e 19       	sub	r24, r14
    171a:	9f 09       	sbc	r25, r15
    171c:	90 93 8b 00 	sts	0x008B, r25
    1720:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1724:	8a e8       	ldi	r24, 0x8A	; 138
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	90 93 8d 00 	sts	0x008D, r25
    172c:	80 93 8c 00 	sts	0x008C, r24
    1730:	43 c0       	rjmp	.+134    	; 0x17b8 <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    173a:	60 91 58 01 	lds	r22, 0x0158
    173e:	70 91 59 01 	lds	r23, 0x0159
    1742:	80 91 5a 01 	lds	r24, 0x015A
    1746:	90 91 5b 01 	lds	r25, 0x015B
    174a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    174e:	9b 01       	movw	r18, r22
    1750:	77 23       	and	r23, r23
    1752:	24 f4       	brge	.+8      	; 0x175c <PID_p2p+0x1f6>
    1754:	22 27       	eor	r18, r18
    1756:	33 27       	eor	r19, r19
    1758:	26 1b       	sub	r18, r22
    175a:	37 0b       	sbc	r19, r23
    175c:	8a e8       	ldi	r24, 0x8A	; 138
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	82 1b       	sub	r24, r18
    1762:	93 0b       	sbc	r25, r19
    1764:	90 93 8d 00 	sts	0x008D, r25
    1768:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    176c:	e0 90 18 01 	lds	r14, 0x0118
    1770:	f0 90 19 01 	lds	r15, 0x0119
    1774:	60 91 58 01 	lds	r22, 0x0158
    1778:	70 91 59 01 	lds	r23, 0x0159
    177c:	80 91 5a 01 	lds	r24, 0x015A
    1780:	90 91 5b 01 	lds	r25, 0x015B
    1784:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1788:	9b 01       	movw	r18, r22
    178a:	77 23       	and	r23, r23
    178c:	24 f4       	brge	.+8      	; 0x1796 <PID_p2p+0x230>
    178e:	22 27       	eor	r18, r18
    1790:	33 27       	eor	r19, r19
    1792:	26 1b       	sub	r18, r22
    1794:	37 0b       	sbc	r19, r23
    1796:	e2 16       	cp	r14, r18
    1798:	f3 06       	cpc	r15, r19
    179a:	44 f4       	brge	.+16     	; 0x17ac <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    179c:	8a e8       	ldi	r24, 0x8A	; 138
    179e:	92 e0       	ldi	r25, 0x02	; 2
    17a0:	8e 19       	sub	r24, r14
    17a2:	9f 09       	sbc	r25, r15
    17a4:	90 93 8d 00 	sts	0x008D, r25
    17a8:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    17ac:	8a e8       	ldi	r24, 0x8A	; 138
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	90 93 8b 00 	sts	0x008B, r25
    17b4:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	08 95       	ret

000017de <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
	unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
    17e6:	f8 01       	movw	r30, r16
    17e8:	20 81       	ld	r18, Z
    17ea:	31 81       	ldd	r19, Z+1	; 0x01
    17ec:	42 81       	ldd	r20, Z+2	; 0x02
    17ee:	53 81       	ldd	r21, Z+3	; 0x03
    17f0:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    17f4:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    17f8:	9b 01       	movw	r18, r22
    17fa:	77 23       	and	r23, r23
    17fc:	24 f4       	brge	.+8      	; 0x1806 <find_if_reach+0x28>
    17fe:	22 27       	eor	r18, r18
    1800:	33 27       	eor	r19, r19
    1802:	26 1b       	sub	r18, r22
    1804:	37 0b       	sbc	r19, r23
    1806:	22 9f       	mul	r18, r18
    1808:	e0 01       	movw	r28, r0
    180a:	23 9f       	mul	r18, r19
    180c:	d0 0d       	add	r29, r0
    180e:	d0 0d       	add	r29, r0
    1810:	11 24       	eor	r1, r1
	m_usb_tx_string("dist: ");
    1812:	89 ef       	ldi	r24, 0xF9	; 249
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(dist); 
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1820:	87 ef       	ldi	r24, 0xF7	; 247
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	if (dist < dist_threshold){
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	20 91 1c 01 	lds	r18, 0x011C
    1830:	30 91 1d 01 	lds	r19, 0x011D
    1834:	c2 17       	cp	r28, r18
    1836:	d3 07       	cpc	r29, r19
    1838:	10 f0       	brcs	.+4      	; 0x183e <find_if_reach+0x60>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int *state, float *goal, float *c_wii, float *dir){
    1848:	2f 92       	push	r2
    184a:	3f 92       	push	r3
    184c:	4f 92       	push	r4
    184e:	5f 92       	push	r5
    1850:	6f 92       	push	r6
    1852:	7f 92       	push	r7
    1854:	8f 92       	push	r8
    1856:	9f 92       	push	r9
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	c6 58       	subi	r28, 0x86	; 134
    1872:	d1 09       	sbc	r29, r1
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cd 57       	subi	r28, 0x7D	; 125
    1880:	df 4f       	sbci	r29, 0xFF	; 255
    1882:	99 83       	std	Y+1, r25	; 0x01
    1884:	88 83       	st	Y, r24
    1886:	c3 58       	subi	r28, 0x83	; 131
    1888:	d0 40       	sbci	r29, 0x00	; 0
    188a:	cb 57       	subi	r28, 0x7B	; 123
    188c:	df 4f       	sbci	r29, 0xFF	; 255
    188e:	79 83       	std	Y+1, r23	; 0x01
    1890:	68 83       	st	Y, r22
    1892:	c5 58       	subi	r28, 0x85	; 133
    1894:	d0 40       	sbci	r29, 0x00	; 0
    1896:	ed 96       	adiw	r28, 0x3d	; 61
    1898:	5f af       	std	Y+63, r21	; 0x3f
    189a:	4e af       	std	Y+62, r20	; 0x3e
    189c:	ed 97       	sbiw	r28, 0x3d	; 61
    189e:	ef 96       	adiw	r28, 0x3f	; 63
    18a0:	3f af       	std	Y+63, r19	; 0x3f
    18a2:	2e af       	std	Y+62, r18	; 0x3e
    18a4:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    18a6:	88 e7       	ldi	r24, 0x78	; 120
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	0e 94 60 18 	call	0x30c0	; 0x30c0 <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    18ae:	60 91 78 01 	lds	r22, 0x0178
    18b2:	70 91 79 01 	lds	r23, 0x0179
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    18be:	69 83       	std	Y+1, r22	; 0x01
    18c0:	7a 83       	std	Y+2, r23	; 0x02
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	60 91 7e 01 	lds	r22, 0x017E
    18ca:	70 91 7f 01 	lds	r23, 0x017F
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    18d6:	6d 83       	std	Y+5, r22	; 0x05
    18d8:	7e 83       	std	Y+6, r23	; 0x06
    18da:	8f 83       	std	Y+7, r24	; 0x07
    18dc:	98 87       	std	Y+8, r25	; 0x08
    18de:	60 91 84 01 	lds	r22, 0x0184
    18e2:	70 91 85 01 	lds	r23, 0x0185
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    18ee:	69 87       	std	Y+9, r22	; 0x09
    18f0:	7a 87       	std	Y+10, r23	; 0x0a
    18f2:	8b 87       	std	Y+11, r24	; 0x0b
    18f4:	9c 87       	std	Y+12, r25	; 0x0c
    18f6:	60 91 8a 01 	lds	r22, 0x018A
    18fa:	70 91 8b 01 	lds	r23, 0x018B
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    1906:	6d 87       	std	Y+13, r22	; 0x0d
    1908:	7e 87       	std	Y+14, r23	; 0x0e
    190a:	8f 87       	std	Y+15, r24	; 0x0f
    190c:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    190e:	60 91 7a 01 	lds	r22, 0x017A
    1912:	70 91 7b 01 	lds	r23, 0x017B
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    191e:	69 8b       	std	Y+17, r22	; 0x11
    1920:	7a 8b       	std	Y+18, r23	; 0x12
    1922:	8b 8b       	std	Y+19, r24	; 0x13
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	60 91 80 01 	lds	r22, 0x0180
    192a:	70 91 81 01 	lds	r23, 0x0181
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    1936:	6d 8b       	std	Y+21, r22	; 0x15
    1938:	7e 8b       	std	Y+22, r23	; 0x16
    193a:	8f 8b       	std	Y+23, r24	; 0x17
    193c:	98 8f       	std	Y+24, r25	; 0x18
    193e:	60 91 86 01 	lds	r22, 0x0186
    1942:	70 91 87 01 	lds	r23, 0x0187
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    194e:	69 8f       	std	Y+25, r22	; 0x19
    1950:	7a 8f       	std	Y+26, r23	; 0x1a
    1952:	8b 8f       	std	Y+27, r24	; 0x1b
    1954:	9c 8f       	std	Y+28, r25	; 0x1c
    1956:	60 91 8c 01 	lds	r22, 0x018C
    195a:	70 91 8d 01 	lds	r23, 0x018D
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__floatunsisf>
    1966:	6d 8f       	std	Y+29, r22	; 0x1d
    1968:	7e 8f       	std	Y+30, r23	; 0x1e
    196a:	8f 8f       	std	Y+31, r24	; 0x1f
    196c:	98 a3       	std	Y+32, r25	; 0x20
    196e:	9e 01       	movw	r18, r28
    1970:	2f 5f       	subi	r18, 0xFF	; 255
    1972:	3f 4f       	sbci	r19, 0xFF	; 255
    1974:	eb 96       	adiw	r28, 0x3b	; 59
    1976:	3f af       	std	Y+63, r19	; 0x3f
    1978:	2e af       	std	Y+62, r18	; 0x3e
    197a:	eb 97       	sbiw	r28, 0x3b	; 59
    197c:	ce 01       	movw	r24, r28
    197e:	41 96       	adiw	r24, 0x11	; 17
    1980:	e3 96       	adiw	r28, 0x33	; 51
    1982:	9f af       	std	Y+63, r25	; 0x3f
    1984:	8e af       	std	Y+62, r24	; 0x3e
    1986:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1988:	ab 96       	adiw	r28, 0x2b	; 43
    198a:	1f ae       	std	Y+63, r1	; 0x3f
    198c:	1e ae       	std	Y+62, r1	; 0x3e
    198e:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    1990:	e9 96       	adiw	r28, 0x39	; 57
    1992:	1f ae       	std	Y+63, r1	; 0x3f
    1994:	1e ae       	std	Y+62, r1	; 0x3e
    1996:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1998:	ab 96       	adiw	r28, 0x2b	; 43
    199a:	ae ad       	ldd	r26, Y+62	; 0x3e
    199c:	bf ad       	ldd	r27, Y+63	; 0x3f
    199e:	ab 97       	sbiw	r28, 0x2b	; 43
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	e7 96       	adiw	r28, 0x37	; 55
    19a4:	bf af       	std	Y+63, r27	; 0x3f
    19a6:	ae af       	std	Y+62, r26	; 0x3e
    19a8:	e7 97       	sbiw	r28, 0x37	; 55
    19aa:	14 97       	sbiw	r26, 0x04	; 4
    19ac:	0c f0       	brlt	.+2      	; 0x19b0 <localization+0x168>
    19ae:	58 c6       	rjmp	.+3248   	; 0x2660 <localization+0xe18>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    19b0:	eb 96       	adiw	r28, 0x3b	; 59
    19b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    19b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b6:	eb 97       	sbiw	r28, 0x3b	; 59
    19b8:	81 90       	ld	r8, Z+
    19ba:	91 90       	ld	r9, Z+
    19bc:	a1 90       	ld	r10, Z+
    19be:	b1 90       	ld	r11, Z+
    19c0:	e9 96       	adiw	r28, 0x39	; 57
    19c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    19c6:	e9 97       	sbiw	r28, 0x39	; 57
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	29 e3       	ldi	r18, 0x39	; 57
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	2c 0f       	add	r18, r28
    19d2:	3d 1f       	adc	r19, r29
    19d4:	28 0f       	add	r18, r24
    19d6:	39 1f       	adc	r19, r25
    19d8:	a3 96       	adiw	r28, 0x23	; 35
    19da:	3f af       	std	Y+63, r19	; 0x3f
    19dc:	2e af       	std	Y+62, r18	; 0x3e
    19de:	a3 97       	sbiw	r28, 0x23	; 35
    19e0:	a5 e4       	ldi	r26, 0x45	; 69
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ac 0f       	add	r26, r28
    19e6:	bd 1f       	adc	r27, r29
    19e8:	a8 0f       	add	r26, r24
    19ea:	b9 1f       	adc	r27, r25
    19ec:	a7 96       	adiw	r28, 0x27	; 39
    19ee:	bf af       	std	Y+63, r27	; 0x3f
    19f0:	ae af       	std	Y+62, r26	; 0x3e
    19f2:	a7 97       	sbiw	r28, 0x27	; 39
    19f4:	e9 96       	adiw	r28, 0x39	; 57
    19f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    19fa:	e9 97       	sbiw	r28, 0x39	; 57
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0f 2e       	mov	r0, r31
    1a06:	f1 e2       	ldi	r31, 0x21	; 33
    1a08:	6f 2e       	mov	r6, r31
    1a0a:	71 2c       	mov	r7, r1
    1a0c:	f0 2d       	mov	r31, r0
    1a0e:	6c 0e       	add	r6, r28
    1a10:	7d 1e       	adc	r7, r29
    1a12:	68 0e       	add	r6, r24
    1a14:	79 1e       	adc	r7, r25
    1a16:	e3 96       	adiw	r28, 0x33	; 51
    1a18:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a1a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a1c:	e3 97       	sbiw	r28, 0x33	; 51
    1a1e:	2c 5f       	subi	r18, 0xFC	; 252
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1a24:	e7 96       	adiw	r28, 0x37	; 55
    1a26:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a28:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a2a:	e7 97       	sbiw	r28, 0x37	; 55
    1a2c:	e1 96       	adiw	r28, 0x31	; 49
    1a2e:	8c ae       	std	Y+60, r8	; 0x3c
    1a30:	9d ae       	std	Y+61, r9	; 0x3d
    1a32:	ae ae       	std	Y+62, r10	; 0x3e
    1a34:	bf ae       	std	Y+63, r11	; 0x3f
    1a36:	e1 97       	sbiw	r28, 0x31	; 49
    1a38:	59 01       	movw	r10, r18
    1a3a:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 ec       	ldi	r19, 0xC0	; 192
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	e1 96       	adiw	r28, 0x31	; 49
    1a46:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a48:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a4e:	e1 97       	sbiw	r28, 0x31	; 49
    1a50:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <localization+0x212>
    1a58:	70 c0       	rjmp	.+224    	; 0x1b3a <localization+0x2f2>
    1a5a:	e3 96       	adiw	r28, 0x33	; 51
    1a5c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a5e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a60:	e3 97       	sbiw	r28, 0x33	; 51
    1a62:	cd 90       	ld	r12, X+
    1a64:	dd 90       	ld	r13, X+
    1a66:	ed 90       	ld	r14, X+
    1a68:	fc 90       	ld	r15, X
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 ec       	ldi	r19, 0xC0	; 192
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	c7 01       	movw	r24, r14
    1a74:	b6 01       	movw	r22, r12
    1a76:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <localization+0x238>
    1a7e:	5d c0       	rjmp	.+186    	; 0x1b3a <localization+0x2f2>
    1a80:	f1 01       	movw	r30, r2
    1a82:	40 80       	ld	r4, Z
    1a84:	51 80       	ldd	r5, Z+1	; 0x01
    1a86:	62 80       	ldd	r6, Z+2	; 0x02
    1a88:	73 80       	ldd	r7, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 ec       	ldi	r19, 0xC0	; 192
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	54 e4       	ldi	r21, 0x44	; 68
    1a92:	c3 01       	movw	r24, r6
    1a94:	b2 01       	movw	r22, r4
    1a96:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <localization+0x258>
    1a9e:	4d c0       	rjmp	.+154    	; 0x1b3a <localization+0x2f2>
    1aa0:	d5 01       	movw	r26, r10
    1aa2:	8d 91       	ld	r24, X+
    1aa4:	9d 91       	ld	r25, X+
    1aa6:	0d 90       	ld	r0, X+
    1aa8:	bc 91       	ld	r27, X
    1aaa:	a0 2d       	mov	r26, r0
    1aac:	c1 58       	subi	r28, 0x81	; 129
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	88 83       	st	Y, r24
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	aa 83       	std	Y+2, r26	; 0x02
    1ab6:	bb 83       	std	Y+3, r27	; 0x03
    1ab8:	cf 57       	subi	r28, 0x7F	; 127
    1aba:	d0 40       	sbci	r29, 0x00	; 0
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 ec       	ldi	r19, 0xC0	; 192
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	a9 f1       	breq	.+106    	; 0x1b3a <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    1ad0:	a3 01       	movw	r20, r6
    1ad2:	92 01       	movw	r18, r4
    1ad4:	e1 96       	adiw	r28, 0x31	; 49
    1ad6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ad8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ada:	8e ad       	ldd	r24, Y+62	; 0x3e
    1adc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ade:	e1 97       	sbiw	r28, 0x31	; 49
    1ae0:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    1ae4:	2b 01       	movw	r4, r22
    1ae6:	3c 01       	movw	r6, r24
    1ae8:	c1 58       	subi	r28, 0x81	; 129
    1aea:	df 4f       	sbci	r29, 0xFF	; 255
    1aec:	28 81       	ld	r18, Y
    1aee:	39 81       	ldd	r19, Y+1	; 0x01
    1af0:	4a 81       	ldd	r20, Y+2	; 0x02
    1af2:	5b 81       	ldd	r21, Y+3	; 0x03
    1af4:	cf 57       	subi	r28, 0x7F	; 127
    1af6:	d0 40       	sbci	r29, 0x00	; 0
    1af8:	c7 01       	movw	r24, r14
    1afa:	b6 01       	movw	r22, r12
    1afc:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    1b00:	6b 01       	movw	r12, r22
    1b02:	7c 01       	movw	r14, r24
    1b04:	a3 01       	movw	r20, r6
    1b06:	92 01       	movw	r18, r4
    1b08:	c3 01       	movw	r24, r6
    1b0a:	b2 01       	movw	r22, r4
    1b0c:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1b10:	2b 01       	movw	r4, r22
    1b12:	3c 01       	movw	r6, r24
    1b14:	a7 01       	movw	r20, r14
    1b16:	96 01       	movw	r18, r12
    1b18:	c7 01       	movw	r24, r14
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1b20:	9b 01       	movw	r18, r22
    1b22:	ac 01       	movw	r20, r24
    1b24:	c3 01       	movw	r24, r6
    1b26:	b2 01       	movw	r22, r4
    1b28:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    1b2c:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <sqrt>
    1b30:	f4 01       	movw	r30, r8
    1b32:	60 83       	st	Z, r22
    1b34:	71 83       	std	Z+1, r23	; 0x01
    1b36:	82 83       	std	Z+2, r24	; 0x02
    1b38:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1b3a:	a3 96       	adiw	r28, 0x23	; 35
    1b3c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b3e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b40:	a3 97       	sbiw	r28, 0x23	; 35
    1b42:	ab 96       	adiw	r28, 0x2b	; 43
    1b44:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b46:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b48:	ab 97       	sbiw	r28, 0x2b	; 43
    1b4a:	ed 93       	st	X+, r30
    1b4c:	fd 93       	st	X+, r31
    1b4e:	a3 96       	adiw	r28, 0x23	; 35
    1b50:	bf af       	std	Y+63, r27	; 0x3f
    1b52:	ae af       	std	Y+62, r26	; 0x3e
    1b54:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1b56:	a7 96       	adiw	r28, 0x27	; 39
    1b58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b5c:	a7 97       	sbiw	r28, 0x27	; 39
    1b5e:	0d 93       	st	X+, r16
    1b60:	1d 93       	st	X+, r17
    1b62:	a7 96       	adiw	r28, 0x27	; 39
    1b64:	bf af       	std	Y+63, r27	; 0x3f
    1b66:	ae af       	std	Y+62, r26	; 0x3e
    1b68:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1b6a:	0f 5f       	subi	r16, 0xFF	; 255
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	b4 e0       	ldi	r27, 0x04	; 4
    1b70:	2b 0e       	add	r2, r27
    1b72:	31 1c       	adc	r3, r1
    1b74:	e4 e0       	ldi	r30, 0x04	; 4
    1b76:	ae 0e       	add	r10, r30
    1b78:	b1 1c       	adc	r11, r1
    1b7a:	f4 e0       	ldi	r31, 0x04	; 4
    1b7c:	8f 0e       	add	r8, r31
    1b7e:	91 1c       	adc	r9, r1
    1b80:	04 30       	cpi	r16, 0x04	; 4
    1b82:	11 05       	cpc	r17, r1
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <localization+0x340>
    1b86:	5a cf       	rjmp	.-332    	; 0x1a3c <localization+0x1f4>
    1b88:	e9 96       	adiw	r28, 0x39	; 57
    1b8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b8e:	e9 97       	sbiw	r28, 0x39	; 57
    1b90:	e7 96       	adiw	r28, 0x37	; 55
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	e7 97       	sbiw	r28, 0x37	; 55
    1b98:	82 1b       	sub	r24, r18
    1b9a:	93 0b       	sbc	r25, r19
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	14 96       	adiw	r26, 0x04	; 4
    1ba0:	e9 96       	adiw	r28, 0x39	; 57
    1ba2:	bf af       	std	Y+63, r27	; 0x3f
    1ba4:	ae af       	std	Y+62, r26	; 0x3e
    1ba6:	e9 97       	sbiw	r28, 0x39	; 57
    1ba8:	eb 96       	adiw	r28, 0x3b	; 59
    1baa:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bac:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bae:	eb 97       	sbiw	r28, 0x3b	; 59
    1bb0:	34 96       	adiw	r30, 0x04	; 4
    1bb2:	eb 96       	adiw	r28, 0x3b	; 59
    1bb4:	ff af       	std	Y+63, r31	; 0x3f
    1bb6:	ee af       	std	Y+62, r30	; 0x3e
    1bb8:	eb 97       	sbiw	r28, 0x3b	; 59
    1bba:	e3 96       	adiw	r28, 0x33	; 51
    1bbc:	2e ad       	ldd	r18, Y+62	; 0x3e
    1bbe:	3f ad       	ldd	r19, Y+63	; 0x3f
    1bc0:	e3 97       	sbiw	r28, 0x33	; 51
    1bc2:	2c 5f       	subi	r18, 0xFC	; 252
    1bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc6:	e3 96       	adiw	r28, 0x33	; 51
    1bc8:	3f af       	std	Y+63, r19	; 0x3f
    1bca:	2e af       	std	Y+62, r18	; 0x3e
    1bcc:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1bce:	e7 96       	adiw	r28, 0x37	; 55
    1bd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bd4:	e7 97       	sbiw	r28, 0x37	; 55
    1bd6:	03 97       	sbiw	r24, 0x03	; 3
    1bd8:	49 f0       	breq	.+18     	; 0x1bec <localization+0x3a4>
    1bda:	e7 96       	adiw	r28, 0x37	; 55
    1bdc:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bde:	bf ad       	ldd	r27, Y+63	; 0x3f
    1be0:	e7 97       	sbiw	r28, 0x37	; 55
    1be2:	ab 96       	adiw	r28, 0x2b	; 43
    1be4:	bf af       	std	Y+63, r27	; 0x3f
    1be6:	ae af       	std	Y+62, r26	; 0x3e
    1be8:	ab 97       	sbiw	r28, 0x2b	; 43
    1bea:	d6 ce       	rjmp	.-596    	; 0x1998 <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1bec:	e9 96       	adiw	r28, 0x39	; 57
    1bee:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bf0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bf2:	e9 97       	sbiw	r28, 0x39	; 57
    1bf4:	1e 16       	cp	r1, r30
    1bf6:	1f 06       	cpc	r1, r31
    1bf8:	84 f5       	brge	.+96     	; 0x1c5a <localization+0x412>
    1bfa:	6e 01       	movw	r12, r28
    1bfc:	f1 e2       	ldi	r31, 0x21	; 33
    1bfe:	cf 0e       	add	r12, r31
    1c00:	d1 1c       	adc	r13, r1
    1c02:	21 2c       	mov	r2, r1
    1c04:	31 2c       	mov	r3, r1
    1c06:	00 e0       	ldi	r16, 0x00	; 0
    1c08:	10 e0       	ldi	r17, 0x00	; 0
    1c0a:	e1 2c       	mov	r14, r1
    1c0c:	f1 2c       	mov	r15, r1
    1c0e:	e9 96       	adiw	r28, 0x39	; 57
    1c10:	ae ac       	ldd	r10, Y+62	; 0x3e
    1c12:	bf ac       	ldd	r11, Y+63	; 0x3f
    1c14:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    1c16:	d6 01       	movw	r26, r12
    1c18:	4d 90       	ld	r4, X+
    1c1a:	5d 90       	ld	r5, X+
    1c1c:	6d 90       	ld	r6, X+
    1c1e:	7d 90       	ld	r7, X+
    1c20:	6d 01       	movw	r12, r26
    1c22:	b8 01       	movw	r22, r16
    1c24:	88 27       	eor	r24, r24
    1c26:	77 fd       	sbrc	r23, 7
    1c28:	80 95       	com	r24
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
    1c30:	9b 01       	movw	r18, r22
    1c32:	ac 01       	movw	r20, r24
    1c34:	c3 01       	movw	r24, r6
    1c36:	b2 01       	movw	r22, r4
    1c38:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__gesf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	34 f4       	brge	.+12     	; 0x1c4c <localization+0x404>
			indmax = i;
			dmax = d[i];
    1c40:	c3 01       	movw	r24, r6
    1c42:	b2 01       	movw	r22, r4
    1c44:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1c48:	8b 01       	movw	r16, r22
    1c4a:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1c4c:	bf ef       	ldi	r27, 0xFF	; 255
    1c4e:	eb 1a       	sub	r14, r27
    1c50:	fb 0a       	sbc	r15, r27
    1c52:	ea 14       	cp	r14, r10
    1c54:	fb 04       	cpc	r15, r11
    1c56:	f9 f6       	brne	.-66     	; 0x1c16 <localization+0x3ce>
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <localization+0x41a>
    1c5a:	21 2c       	mov	r2, r1
    1c5c:	31 2c       	mov	r3, r1
    1c5e:	00 e0       	ldi	r16, 0x00	; 0
    1c60:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1c62:	8a e9       	ldi	r24, 0x9A	; 154
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(dmax);
    1c6a:	c8 01       	movw	r24, r16
    1c6c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1c70:	88 e9       	ldi	r24, 0x98	; 152
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1c78:	e9 96       	adiw	r28, 0x39	; 57
    1c7a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c7c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c7e:	e9 97       	sbiw	r28, 0x39	; 57
    1c80:	1e 16       	cp	r1, r30
    1c82:	1f 06       	cpc	r1, r31
    1c84:	dc f5       	brge	.+118    	; 0x1cfc <localization+0x4b4>
    1c86:	6e 01       	movw	r12, r28
    1c88:	f1 e2       	ldi	r31, 0x21	; 33
    1c8a:	cf 0e       	add	r12, r31
    1c8c:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1c8e:	a3 96       	adiw	r28, 0x23	; 35
    1c90:	1f ae       	std	Y+63, r1	; 0x3f
    1c92:	1e ae       	std	Y+62, r1	; 0x3e
    1c94:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    1c96:	0f 2e       	mov	r0, r31
    1c98:	f0 e1       	ldi	r31, 0x10	; 16
    1c9a:	af 2e       	mov	r10, r31
    1c9c:	f7 e2       	ldi	r31, 0x27	; 39
    1c9e:	bf 2e       	mov	r11, r31
    1ca0:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    1ca2:	e1 2c       	mov	r14, r1
    1ca4:	f1 2c       	mov	r15, r1
    1ca6:	48 01       	movw	r8, r16
    1ca8:	e9 96       	adiw	r28, 0x39	; 57
    1caa:	0e ad       	ldd	r16, Y+62	; 0x3e
    1cac:	1f ad       	ldd	r17, Y+63	; 0x3f
    1cae:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    1cb0:	d6 01       	movw	r26, r12
    1cb2:	4d 90       	ld	r4, X+
    1cb4:	5d 90       	ld	r5, X+
    1cb6:	6d 90       	ld	r6, X+
    1cb8:	7d 90       	ld	r7, X+
    1cba:	6d 01       	movw	r12, r26
    1cbc:	b5 01       	movw	r22, r10
    1cbe:	88 27       	eor	r24, r24
    1cc0:	77 fd       	sbrc	r23, 7
    1cc2:	80 95       	com	r24
    1cc4:	98 2f       	mov	r25, r24
    1cc6:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
    1cca:	9b 01       	movw	r18, r22
    1ccc:	ac 01       	movw	r20, r24
    1cce:	c3 01       	movw	r24, r6
    1cd0:	b2 01       	movw	r22, r4
    1cd2:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	4c f4       	brge	.+18     	; 0x1cec <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    1cda:	c3 01       	movw	r24, r6
    1cdc:	b2 01       	movw	r22, r4
    1cde:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1ce2:	5b 01       	movw	r10, r22
    1ce4:	a3 96       	adiw	r28, 0x23	; 35
    1ce6:	ff ae       	std	Y+63, r15	; 0x3f
    1ce8:	ee ae       	std	Y+62, r14	; 0x3e
    1cea:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1cec:	bf ef       	ldi	r27, 0xFF	; 255
    1cee:	eb 1a       	sub	r14, r27
    1cf0:	fb 0a       	sbc	r15, r27
    1cf2:	e0 16       	cp	r14, r16
    1cf4:	f1 06       	cpc	r15, r17
    1cf6:	e1 f6       	brne	.-72     	; 0x1cb0 <localization+0x468>
    1cf8:	84 01       	movw	r16, r8
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1cfc:	a3 96       	adiw	r28, 0x23	; 35
    1cfe:	1f ae       	std	Y+63, r1	; 0x3f
    1d00:	1e ae       	std	Y+62, r1	; 0x3e
    1d02:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1d04:	80 90 10 01 	lds	r8, 0x0110
    1d08:	90 90 11 01 	lds	r9, 0x0111
    1d0c:	a0 90 12 01 	lds	r10, 0x0112
    1d10:	b0 90 13 01 	lds	r11, 0x0113
    1d14:	b8 01       	movw	r22, r16
    1d16:	88 27       	eor	r24, r24
    1d18:	77 fd       	sbrc	r23, 7
    1d1a:	80 95       	com	r24
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
    1d22:	a5 01       	movw	r20, r10
    1d24:	94 01       	movw	r18, r8
    1d26:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1d2a:	2b 01       	movw	r4, r22
    1d2c:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    1d2e:	c0 90 14 01 	lds	r12, 0x0114
    1d32:	d0 90 15 01 	lds	r13, 0x0115
    1d36:	e0 90 16 01 	lds	r14, 0x0116
    1d3a:	f0 90 17 01 	lds	r15, 0x0117
    1d3e:	e4 e0       	ldi	r30, 0x04	; 4
    1d40:	f1 e0       	ldi	r31, 0x01	; 1
    1d42:	ab 96       	adiw	r28, 0x2b	; 43
    1d44:	ff af       	std	Y+63, r31	; 0x3f
    1d46:	ee af       	std	Y+62, r30	; 0x3e
    1d48:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1d4a:	a7 96       	adiw	r28, 0x27	; 39
    1d4c:	1f ae       	std	Y+63, r1	; 0x3f
    1d4e:	1e ae       	std	Y+62, r1	; 0x3e
    1d50:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    1d52:	01 e0       	ldi	r16, 0x01	; 1
    1d54:	10 e0       	ldi	r17, 0x00	; 0
    1d56:	af 96       	adiw	r28, 0x2f	; 47
    1d58:	3f ae       	std	Y+63, r3	; 0x3f
    1d5a:	2e ae       	std	Y+62, r2	; 0x3e
    1d5c:	af 97       	sbiw	r28, 0x2f	; 47
    1d5e:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    1d60:	d1 01       	movw	r26, r2
    1d62:	2d 91       	ld	r18, X+
    1d64:	3d 91       	ld	r19, X+
    1d66:	4d 91       	ld	r20, X+
    1d68:	5d 91       	ld	r21, X+
    1d6a:	1d 01       	movw	r2, r26
    1d6c:	c3 01       	movw	r24, r6
    1d6e:	b2 01       	movw	r22, r4
    1d70:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    1d74:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    1d78:	9b 01       	movw	r18, r22
    1d7a:	77 23       	and	r23, r23
    1d7c:	24 f4       	brge	.+8      	; 0x1d86 <localization+0x53e>
    1d7e:	22 27       	eor	r18, r18
    1d80:	33 27       	eor	r19, r19
    1d82:	26 1b       	sub	r18, r22
    1d84:	37 0b       	sbc	r19, r23
    1d86:	b9 01       	movw	r22, r18
    1d88:	88 27       	eor	r24, r24
    1d8a:	77 fd       	sbrc	r23, 7
    1d8c:	80 95       	com	r24
    1d8e:	98 2f       	mov	r25, r24
    1d90:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatsisf>
    1d94:	a7 01       	movw	r20, r14
    1d96:	96 01       	movw	r18, r12
    1d98:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	24 f4       	brge	.+8      	; 0x1da8 <localization+0x560>
    1da0:	a7 96       	adiw	r28, 0x27	; 39
    1da2:	1f af       	std	Y+63, r17	; 0x3f
    1da4:	0e af       	std	Y+62, r16	; 0x3e
    1da6:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1da8:	0f 5f       	subi	r16, 0xFF	; 255
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	04 30       	cpi	r16, 0x04	; 4
    1dae:	11 05       	cpc	r17, r1
    1db0:	b9 f6       	brne	.-82     	; 0x1d60 <localization+0x518>
    1db2:	af 96       	adiw	r28, 0x2f	; 47
    1db4:	2e ac       	ldd	r2, Y+62	; 0x3e
    1db6:	3f ac       	ldd	r3, Y+63	; 0x3f
    1db8:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    1dba:	65 96       	adiw	r28, 0x15	; 21
    1dbc:	1c ae       	std	Y+60, r1	; 0x3c
    1dbe:	1d ae       	std	Y+61, r1	; 0x3d
    1dc0:	1e ae       	std	Y+62, r1	; 0x3e
    1dc2:	1f ae       	std	Y+63, r1	; 0x3f
    1dc4:	65 97       	sbiw	r28, 0x15	; 21
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e8       	ldi	r26, 0x80	; 128
    1dcc:	bf e3       	ldi	r27, 0x3F	; 63
    1dce:	69 96       	adiw	r28, 0x19	; 25
    1dd0:	8c af       	std	Y+60, r24	; 0x3c
    1dd2:	9d af       	std	Y+61, r25	; 0x3d
    1dd4:	ae af       	std	Y+62, r26	; 0x3e
    1dd6:	bf af       	std	Y+63, r27	; 0x3f
    1dd8:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1dda:	a7 96       	adiw	r28, 0x27	; 39
    1ddc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dde:	ff ad       	ldd	r31, Y+63	; 0x3f
    1de0:	a7 97       	sbiw	r28, 0x27	; 39
    1de2:	e2 30       	cpi	r30, 0x02	; 2
    1de4:	f1 05       	cpc	r31, r1
    1de6:	19 f0       	breq	.+6      	; 0x1dee <localization+0x5a6>
    1de8:	33 97       	sbiw	r30, 0x03	; 3
    1dea:	51 f1       	breq	.+84     	; 0x1e40 <localization+0x5f8>
    1dec:	5a c0       	rjmp	.+180    	; 0x1ea2 <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1dee:	a5 01       	movw	r20, r10
    1df0:	94 01       	movw	r18, r8
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	88 e6       	ldi	r24, 0x68	; 104
    1df8:	91 e4       	ldi	r25, 0x41	; 65
    1dfa:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    1dfe:	e1 96       	adiw	r28, 0x31	; 49
    1e00:	6c af       	std	Y+60, r22	; 0x3c
    1e02:	7d af       	std	Y+61, r23	; 0x3d
    1e04:	8e af       	std	Y+62, r24	; 0x3e
    1e06:	9f af       	std	Y+63, r25	; 0x3f
    1e08:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    1e0a:	84 e9       	ldi	r24, 0x94	; 148
    1e0c:	97 e8       	ldi	r25, 0x87	; 135
    1e0e:	a5 ee       	ldi	r26, 0xE5	; 229
    1e10:	be e3       	ldi	r27, 0x3E	; 62
    1e12:	65 96       	adiw	r28, 0x15	; 21
    1e14:	8c af       	std	Y+60, r24	; 0x3c
    1e16:	9d af       	std	Y+61, r25	; 0x3d
    1e18:	ae af       	std	Y+62, r26	; 0x3e
    1e1a:	bf af       	std	Y+63, r27	; 0x3f
    1e1c:	65 97       	sbiw	r28, 0x15	; 21
    1e1e:	81 ea       	ldi	r24, 0xA1	; 161
    1e20:	96 ed       	ldi	r25, 0xD6	; 214
    1e22:	a4 e6       	ldi	r26, 0x64	; 100
    1e24:	bf eb       	ldi	r27, 0xBF	; 191
    1e26:	69 96       	adiw	r28, 0x19	; 25
    1e28:	8c af       	std	Y+60, r24	; 0x3c
    1e2a:	9d af       	std	Y+61, r25	; 0x3d
    1e2c:	ae af       	std	Y+62, r26	; 0x3e
    1e2e:	bf af       	std	Y+63, r27	; 0x3f
    1e30:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1e32:	e5 96       	adiw	r28, 0x35	; 53
    1e34:	1c ae       	std	Y+60, r1	; 0x3c
    1e36:	1d ae       	std	Y+61, r1	; 0x3d
    1e38:	1e ae       	std	Y+62, r1	; 0x3e
    1e3a:	1f ae       	std	Y+63, r1	; 0x3f
    1e3c:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1e3e:	45 c0       	rjmp	.+138    	; 0x1eca <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1e40:	a5 01       	movw	r20, r10
    1e42:	94 01       	movw	r18, r8
    1e44:	61 ee       	ldi	r22, 0xE1	; 225
    1e46:	7a e7       	ldi	r23, 0x7A	; 122
    1e48:	8a e3       	ldi	r24, 0x3A	; 58
    1e4a:	91 e4       	ldi	r25, 0x41	; 65
    1e4c:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    1e50:	e5 96       	adiw	r28, 0x35	; 53
    1e52:	6c af       	std	Y+60, r22	; 0x3c
    1e54:	7d af       	std	Y+61, r23	; 0x3d
    1e56:	8e af       	std	Y+62, r24	; 0x3e
    1e58:	9f af       	std	Y+63, r25	; 0x3f
    1e5a:	e5 97       	sbiw	r28, 0x35	; 53
    1e5c:	a5 01       	movw	r20, r10
    1e5e:	94 01       	movw	r18, r8
    1e60:	63 e2       	ldi	r22, 0x23	; 35
    1e62:	7b ed       	ldi	r23, 0xDB	; 219
    1e64:	8b e0       	ldi	r24, 0x0B	; 11
    1e66:	91 ec       	ldi	r25, 0xC1	; 193
    1e68:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    1e6c:	e1 96       	adiw	r28, 0x31	; 49
    1e6e:	6c af       	std	Y+60, r22	; 0x3c
    1e70:	7d af       	std	Y+61, r23	; 0x3d
    1e72:	8e af       	std	Y+62, r24	; 0x3e
    1e74:	9f af       	std	Y+63, r25	; 0x3f
    1e76:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1e78:	86 e6       	ldi	r24, 0x66	; 102
    1e7a:	96 e6       	ldi	r25, 0x66	; 102
    1e7c:	a6 e7       	ldi	r26, 0x76	; 118
    1e7e:	bf eb       	ldi	r27, 0xBF	; 191
    1e80:	65 96       	adiw	r28, 0x15	; 21
    1e82:	8c af       	std	Y+60, r24	; 0x3c
    1e84:	9d af       	std	Y+61, r25	; 0x3d
    1e86:	ae af       	std	Y+62, r26	; 0x3e
    1e88:	bf af       	std	Y+63, r27	; 0x3f
    1e8a:	65 97       	sbiw	r28, 0x15	; 21
    1e8c:	8f e9       	ldi	r24, 0x9F	; 159
    1e8e:	9d ec       	ldi	r25, 0xCD	; 205
    1e90:	aa e8       	ldi	r26, 0x8A	; 138
    1e92:	be e3       	ldi	r27, 0x3E	; 62
    1e94:	69 96       	adiw	r28, 0x19	; 25
    1e96:	8c af       	std	Y+60, r24	; 0x3c
    1e98:	9d af       	std	Y+61, r25	; 0x3d
    1e9a:	ae af       	std	Y+62, r26	; 0x3e
    1e9c:	bf af       	std	Y+63, r27	; 0x3f
    1e9e:	69 97       	sbiw	r28, 0x19	; 25
			break;
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    1ea2:	a7 96       	adiw	r28, 0x27	; 39
    1ea4:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ea6:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ea8:	a7 97       	sbiw	r28, 0x27	; 39
    1eaa:	12 16       	cp	r1, r18
    1eac:	13 06       	cpc	r1, r19
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <localization+0x66a>
    1eb0:	46 c3       	rjmp	.+1676   	; 0x253e <localization+0xcf6>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1eb2:	e5 96       	adiw	r28, 0x35	; 53
    1eb4:	1c ae       	std	Y+60, r1	; 0x3c
    1eb6:	1d ae       	std	Y+61, r1	; 0x3d
    1eb8:	1e ae       	std	Y+62, r1	; 0x3e
    1eba:	1f ae       	std	Y+63, r1	; 0x3f
    1ebc:	e5 97       	sbiw	r28, 0x35	; 53
    1ebe:	e1 96       	adiw	r28, 0x31	; 49
    1ec0:	1c ae       	std	Y+60, r1	; 0x3c
    1ec2:	1d ae       	std	Y+61, r1	; 0x3d
    1ec4:	1e ae       	std	Y+62, r1	; 0x3e
    1ec6:	1f ae       	std	Y+63, r1	; 0x3f
    1ec8:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    1eca:	f1 01       	movw	r30, r2
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	8c 0f       	add	r24, r28
    1ed6:	9d 1f       	adc	r25, r29
    1ed8:	e8 0f       	add	r30, r24
    1eda:	f9 1f       	adc	r31, r25
    1edc:	00 ad       	ldd	r16, Z+56	; 0x38
    1ede:	11 ad       	ldd	r17, Z+57	; 0x39
    1ee0:	a3 96       	adiw	r28, 0x23	; 35
    1ee2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ee4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ee6:	a3 97       	sbiw	r28, 0x23	; 35
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	e8 0f       	add	r30, r24
    1eee:	f9 1f       	adc	r31, r25
    1ef0:	80 ad       	ldd	r24, Z+56	; 0x38
    1ef2:	91 ad       	ldd	r25, Z+57	; 0x39
    1ef4:	80 17       	cp	r24, r16
    1ef6:	91 07       	cpc	r25, r17
    1ef8:	89 f0       	breq	.+34     	; 0x1f1c <localization+0x6d4>
    1efa:	a3 96       	adiw	r28, 0x23	; 35
    1efc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1efe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f00:	a3 97       	sbiw	r28, 0x23	; 35
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	a5 e4       	ldi	r26, 0x45	; 69
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	ac 0f       	add	r26, r28
    1f0c:	bd 1f       	adc	r27, r29
    1f0e:	ea 0f       	add	r30, r26
    1f10:	fb 1f       	adc	r31, r27
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	08 17       	cp	r16, r24
    1f18:	19 07       	cpc	r17, r25
    1f1a:	69 f4       	brne	.+26     	; 0x1f36 <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1f1c:	d1 01       	movw	r26, r2
    1f1e:	aa 0f       	add	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	e5 e4       	ldi	r30, 0x45	; 69
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	ec 0f       	add	r30, r28
    1f28:	fd 1f       	adc	r31, r29
    1f2a:	ae 0f       	add	r26, r30
    1f2c:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1f2e:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    1f30:	0d 91       	ld	r16, X+
    1f32:	1c 91       	ld	r17, X
    1f34:	0c c0       	rjmp	.+24     	; 0x1f4e <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    1f36:	f1 01       	movw	r30, r2
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	25 e4       	ldi	r18, 0x45	; 69
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	2c 0f       	add	r18, r28
    1f42:	3d 1f       	adc	r19, r29
    1f44:	e2 0f       	add	r30, r18
    1f46:	f3 1f       	adc	r31, r19
    1f48:	01 90       	ld	r0, Z+
    1f4a:	f0 81       	ld	r31, Z
    1f4c:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1f4e:	a7 96       	adiw	r28, 0x27	; 39
    1f50:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f52:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f54:	a7 97       	sbiw	r28, 0x27	; 39
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <localization+0x714>
    1f5a:	45 c0       	rjmp	.+138    	; 0x1fe6 <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    1f5c:	6f 01       	movw	r12, r30
    1f5e:	cc 0c       	add	r12, r12
    1f60:	dd 1c       	adc	r13, r13
    1f62:	cc 0c       	add	r12, r12
    1f64:	dd 1c       	adc	r13, r13
    1f66:	a1 e0       	ldi	r26, 0x01	; 1
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	ac 0f       	add	r26, r28
    1f6c:	bd 1f       	adc	r27, r29
    1f6e:	ca 0e       	add	r12, r26
    1f70:	db 1e       	adc	r13, r27
    1f72:	78 01       	movw	r14, r16
    1f74:	ee 0c       	add	r14, r14
    1f76:	ff 1c       	adc	r15, r15
    1f78:	ee 0c       	add	r14, r14
    1f7a:	ff 1c       	adc	r15, r15
    1f7c:	ea 0e       	add	r14, r26
    1f7e:	fb 1e       	adc	r15, r27
    1f80:	f7 01       	movw	r30, r14
    1f82:	20 81       	ld	r18, Z
    1f84:	31 81       	ldd	r19, Z+1	; 0x01
    1f86:	42 81       	ldd	r20, Z+2	; 0x02
    1f88:	53 81       	ldd	r21, Z+3	; 0x03
    1f8a:	d6 01       	movw	r26, r12
    1f8c:	6d 91       	ld	r22, X+
    1f8e:	7d 91       	ld	r23, X+
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1fa4:	ad 96       	adiw	r28, 0x2d	; 45
    1fa6:	6c af       	std	Y+60, r22	; 0x3c
    1fa8:	7d af       	std	Y+61, r23	; 0x3d
    1faa:	8e af       	std	Y+62, r24	; 0x3e
    1fac:	9f af       	std	Y+63, r25	; 0x3f
    1fae:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	20 89       	ldd	r18, Z+16	; 0x10
    1fb4:	31 89       	ldd	r19, Z+17	; 0x11
    1fb6:	42 89       	ldd	r20, Z+18	; 0x12
    1fb8:	53 89       	ldd	r21, Z+19	; 0x13
    1fba:	d6 01       	movw	r26, r12
    1fbc:	50 96       	adiw	r26, 0x10	; 16
    1fbe:	6d 91       	ld	r22, X+
    1fc0:	7d 91       	ld	r23, X+
    1fc2:	8d 91       	ld	r24, X+
    1fc4:	9c 91       	ld	r25, X
    1fc6:	53 97       	sbiw	r26, 0x13	; 19
    1fc8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    1fd8:	a9 96       	adiw	r28, 0x29	; 41
    1fda:	6c af       	std	Y+60, r22	; 0x3c
    1fdc:	7d af       	std	Y+61, r23	; 0x3d
    1fde:	8e af       	std	Y+62, r24	; 0x3e
    1fe0:	9f af       	std	Y+63, r25	; 0x3f
    1fe2:	a9 97       	sbiw	r28, 0x29	; 41
    1fe4:	1e c0       	rjmp	.+60     	; 0x2022 <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	21 e0       	ldi	r18, 0x01	; 1
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	2c 0f       	add	r18, r28
    1ff4:	3d 1f       	adc	r19, r29
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	a2 81       	ldd	r26, Z+2	; 0x02
    2000:	b3 81       	ldd	r27, Z+3	; 0x03
    2002:	ad 96       	adiw	r28, 0x2d	; 45
    2004:	8c af       	std	Y+60, r24	; 0x3c
    2006:	9d af       	std	Y+61, r25	; 0x3d
    2008:	ae af       	std	Y+62, r26	; 0x3e
    200a:	bf af       	std	Y+63, r27	; 0x3f
    200c:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    200e:	80 89       	ldd	r24, Z+16	; 0x10
    2010:	91 89       	ldd	r25, Z+17	; 0x11
    2012:	a2 89       	ldd	r26, Z+18	; 0x12
    2014:	b3 89       	ldd	r27, Z+19	; 0x13
    2016:	a9 96       	adiw	r28, 0x29	; 41
    2018:	8c af       	std	Y+60, r24	; 0x3c
    201a:	9d af       	std	Y+61, r25	; 0x3d
    201c:	ae af       	std	Y+62, r26	; 0x3e
    201e:	bf af       	std	Y+63, r27	; 0x3f
    2020:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    2022:	00 0f       	add	r16, r16
    2024:	11 1f       	adc	r17, r17
    2026:	00 0f       	add	r16, r16
    2028:	11 1f       	adc	r17, r17
    202a:	a1 e0       	ldi	r26, 0x01	; 1
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	ac 0f       	add	r26, r28
    2030:	bd 1f       	adc	r27, r29
    2032:	0a 0f       	add	r16, r26
    2034:	1b 1f       	adc	r17, r27
    2036:	ad 96       	adiw	r28, 0x2d	; 45
    2038:	2c ad       	ldd	r18, Y+60	; 0x3c
    203a:	3d ad       	ldd	r19, Y+61	; 0x3d
    203c:	4e ad       	ldd	r20, Y+62	; 0x3e
    203e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2040:	ad 97       	sbiw	r28, 0x2d	; 45
    2042:	f8 01       	movw	r30, r16
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2050:	4b 01       	movw	r8, r22
    2052:	5c 01       	movw	r10, r24
    2054:	a9 96       	adiw	r28, 0x29	; 41
    2056:	2c ad       	ldd	r18, Y+60	; 0x3c
    2058:	3d ad       	ldd	r19, Y+61	; 0x3d
    205a:	4e ad       	ldd	r20, Y+62	; 0x3e
    205c:	5f ad       	ldd	r21, Y+63	; 0x3f
    205e:	a9 97       	sbiw	r28, 0x29	; 41
    2060:	d8 01       	movw	r26, r16
    2062:	50 96       	adiw	r26, 0x10	; 16
    2064:	6d 91       	ld	r22, X+
    2066:	7d 91       	ld	r23, X+
    2068:	8d 91       	ld	r24, X+
    206a:	9c 91       	ld	r25, X
    206c:	53 97       	sbiw	r26, 0x13	; 19
    206e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2072:	6b 01       	movw	r12, r22
    2074:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    2076:	a5 01       	movw	r20, r10
    2078:	94 01       	movw	r18, r8
    207a:	c5 01       	movw	r24, r10
    207c:	b4 01       	movw	r22, r8
    207e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    2082:	2b 01       	movw	r4, r22
    2084:	3c 01       	movw	r6, r24
    2086:	a7 01       	movw	r20, r14
    2088:	96 01       	movw	r18, r12
    208a:	c7 01       	movw	r24, r14
    208c:	b6 01       	movw	r22, r12
    208e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	c3 01       	movw	r24, r6
    2098:	b2 01       	movw	r22, r4
    209a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    209e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <sqrt>
    20a2:	2b 01       	movw	r4, r22
    20a4:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    20a6:	9b 01       	movw	r18, r22
    20a8:	ac 01       	movw	r20, r24
    20aa:	c5 01       	movw	r24, r10
    20ac:	b4 01       	movw	r22, r8
    20ae:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    20b2:	4b 01       	movw	r8, r22
    20b4:	5c 01       	movw	r10, r24
    20b6:	6d 96       	adiw	r28, 0x1d	; 29
    20b8:	6c af       	std	Y+60, r22	; 0x3c
    20ba:	7d af       	std	Y+61, r23	; 0x3d
    20bc:	8e af       	std	Y+62, r24	; 0x3e
    20be:	9f af       	std	Y+63, r25	; 0x3f
    20c0:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    20c2:	a3 01       	movw	r20, r6
    20c4:	92 01       	movw	r18, r4
    20c6:	c7 01       	movw	r24, r14
    20c8:	b6 01       	movw	r22, r12
    20ca:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    20ce:	6b 01       	movw	r12, r22
    20d0:	7c 01       	movw	r14, r24
    20d2:	a1 96       	adiw	r28, 0x21	; 33
    20d4:	6c af       	std	Y+60, r22	; 0x3c
    20d6:	7d af       	std	Y+61, r23	; 0x3d
    20d8:	8e af       	std	Y+62, r24	; 0x3e
    20da:	9f af       	std	Y+63, r25	; 0x3f
    20dc:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    20de:	65 96       	adiw	r28, 0x15	; 21
    20e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    20e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    20e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    20e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    20e8:	65 97       	sbiw	r28, 0x15	; 21
    20ea:	c5 01       	movw	r24, r10
    20ec:	b4 01       	movw	r22, r8
    20ee:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    20f2:	4b 01       	movw	r8, r22
    20f4:	5c 01       	movw	r10, r24
    20f6:	69 96       	adiw	r28, 0x19	; 25
    20f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    20fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    20fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    20fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    2100:	69 97       	sbiw	r28, 0x19	; 25
    2102:	c7 01       	movw	r24, r14
    2104:	b6 01       	movw	r22, r12
    2106:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    210a:	9b 01       	movw	r18, r22
    210c:	ac 01       	movw	r20, r24
    210e:	c5 01       	movw	r24, r10
    2110:	b4 01       	movw	r22, r8
    2112:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    2116:	2b 01       	movw	r4, r22
    2118:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    211a:	9b 01       	movw	r18, r22
    211c:	ac 01       	movw	r20, r24
    211e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	80 e8       	ldi	r24, 0x80	; 128
    212c:	9f e3       	ldi	r25, 0x3F	; 63
    212e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2132:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <sqrt>
    2136:	a5 96       	adiw	r28, 0x25	; 37
    2138:	6c af       	std	Y+60, r22	; 0x3c
    213a:	7d af       	std	Y+61, r23	; 0x3d
    213c:	8e af       	std	Y+62, r24	; 0x3e
    213e:	9f af       	std	Y+63, r25	; 0x3f
    2140:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    2142:	fe 01       	movw	r30, r28
    2144:	ef 5a       	subi	r30, 0xAF	; 175
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	7f 01       	movw	r14, r30
    214a:	8e 01       	movw	r16, r28
    214c:	07 5a       	subi	r16, 0xA7	; 167
    214e:	1f 4f       	sbci	r17, 0xFF	; 255
    2150:	9b 01       	movw	r18, r22
    2152:	ac 01       	movw	r20, r24
    2154:	c3 01       	movw	r24, r6
    2156:	b2 01       	movw	r22, r4
    2158:	0e 94 87 07 	call	0xf0e	; 0xf0e <find_sign>
    215c:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	91 05       	cpc	r25, r1
    2162:	09 f0       	breq	.+2      	; 0x2166 <localization+0x91e>
    2164:	a1 c0       	rjmp	.+322    	; 0x22a8 <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    2166:	0f 2e       	mov	r0, r31
    2168:	fe e1       	ldi	r31, 0x1E	; 30
    216a:	af 2e       	mov	r10, r31
    216c:	f1 e0       	ldi	r31, 0x01	; 1
    216e:	bf 2e       	mov	r11, r31
    2170:	f0 2d       	mov	r31, r0
    2172:	d5 01       	movw	r26, r10
    2174:	2d 91       	ld	r18, X+
    2176:	3d 91       	ld	r19, X+
    2178:	4d 91       	ld	r20, X+
    217a:	5c 91       	ld	r21, X
    217c:	ad 96       	adiw	r28, 0x2d	; 45
    217e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2180:	7d ad       	ldd	r23, Y+61	; 0x3d
    2182:	8e ad       	ldd	r24, Y+62	; 0x3e
    2184:	9f ad       	ldd	r25, Y+63	; 0x3f
    2186:	ad 97       	sbiw	r28, 0x2d	; 45
    2188:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    218c:	a3 01       	movw	r20, r6
    218e:	92 01       	movw	r18, r4
    2190:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    2194:	9b 01       	movw	r18, r22
    2196:	ac 01       	movw	r20, r24
    2198:	e5 96       	adiw	r28, 0x35	; 53
    219a:	6c ad       	ldd	r22, Y+60	; 0x3c
    219c:	7d ad       	ldd	r23, Y+61	; 0x3d
    219e:	8e ad       	ldd	r24, Y+62	; 0x3e
    21a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    21a2:	e5 97       	sbiw	r28, 0x35	; 53
    21a4:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    21a8:	6b 01       	movw	r12, r22
    21aa:	7c 01       	movw	r14, r24
    21ac:	02 e2       	ldi	r16, 0x22	; 34
    21ae:	11 e0       	ldi	r17, 0x01	; 1
    21b0:	f8 01       	movw	r30, r16
    21b2:	20 81       	ld	r18, Z
    21b4:	31 81       	ldd	r19, Z+1	; 0x01
    21b6:	42 81       	ldd	r20, Z+2	; 0x02
    21b8:	53 81       	ldd	r21, Z+3	; 0x03
    21ba:	a9 96       	adiw	r28, 0x29	; 41
    21bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    21be:	7d ad       	ldd	r23, Y+61	; 0x3d
    21c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    21c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    21c4:	a9 97       	sbiw	r28, 0x29	; 41
    21c6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    21ca:	a5 96       	adiw	r28, 0x25	; 37
    21cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    21ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    21d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    21d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    21d4:	a5 97       	sbiw	r28, 0x25	; 37
    21d6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	c7 01       	movw	r24, r14
    21e0:	b6 01       	movw	r22, r12
    21e2:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    21e6:	ed 96       	adiw	r28, 0x3d	; 61
    21e8:	ae ad       	ldd	r26, Y+62	; 0x3e
    21ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    21ec:	ed 97       	sbiw	r28, 0x3d	; 61
    21ee:	6d 93       	st	X+, r22
    21f0:	7d 93       	st	X+, r23
    21f2:	8d 93       	st	X+, r24
    21f4:	9c 93       	st	X, r25
    21f6:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    21f8:	f8 01       	movw	r30, r16
    21fa:	20 81       	ld	r18, Z
    21fc:	31 81       	ldd	r19, Z+1	; 0x01
    21fe:	42 81       	ldd	r20, Z+2	; 0x02
    2200:	53 81       	ldd	r21, Z+3	; 0x03
    2202:	a9 96       	adiw	r28, 0x29	; 41
    2204:	6c ad       	ldd	r22, Y+60	; 0x3c
    2206:	7d ad       	ldd	r23, Y+61	; 0x3d
    2208:	8e ad       	ldd	r24, Y+62	; 0x3e
    220a:	9f ad       	ldd	r25, Y+63	; 0x3f
    220c:	a9 97       	sbiw	r28, 0x29	; 41
    220e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2212:	a3 01       	movw	r20, r6
    2214:	92 01       	movw	r18, r4
    2216:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    221a:	9b 01       	movw	r18, r22
    221c:	ac 01       	movw	r20, r24
    221e:	e1 96       	adiw	r28, 0x31	; 49
    2220:	6c ad       	ldd	r22, Y+60	; 0x3c
    2222:	7d ad       	ldd	r23, Y+61	; 0x3d
    2224:	8e ad       	ldd	r24, Y+62	; 0x3e
    2226:	9f ad       	ldd	r25, Y+63	; 0x3f
    2228:	e1 97       	sbiw	r28, 0x31	; 49
    222a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    222e:	6b 01       	movw	r12, r22
    2230:	7c 01       	movw	r14, r24
    2232:	d5 01       	movw	r26, r10
    2234:	2d 91       	ld	r18, X+
    2236:	3d 91       	ld	r19, X+
    2238:	4d 91       	ld	r20, X+
    223a:	5c 91       	ld	r21, X
    223c:	ad 96       	adiw	r28, 0x2d	; 45
    223e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2240:	7d ad       	ldd	r23, Y+61	; 0x3d
    2242:	8e ad       	ldd	r24, Y+62	; 0x3e
    2244:	9f ad       	ldd	r25, Y+63	; 0x3f
    2246:	ad 97       	sbiw	r28, 0x2d	; 45
    2248:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    224c:	a5 96       	adiw	r28, 0x25	; 37
    224e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2250:	3d ad       	ldd	r19, Y+61	; 0x3d
    2252:	4e ad       	ldd	r20, Y+62	; 0x3e
    2254:	5f ad       	ldd	r21, Y+63	; 0x3f
    2256:	a5 97       	sbiw	r28, 0x25	; 37
    2258:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    225c:	9b 01       	movw	r18, r22
    225e:	ac 01       	movw	r20, r24
    2260:	c7 01       	movw	r24, r14
    2262:	b6 01       	movw	r22, r12
    2264:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2268:	ed 96       	adiw	r28, 0x3d	; 61
    226a:	ee ad       	ldd	r30, Y+62	; 0x3e
    226c:	ff ad       	ldd	r31, Y+63	; 0x3f
    226e:	ed 97       	sbiw	r28, 0x3d	; 61
    2270:	64 83       	std	Z+4, r22	; 0x04
    2272:	75 83       	std	Z+5, r23	; 0x05
    2274:	86 83       	std	Z+6, r24	; 0x06
    2276:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    2278:	ef 96       	adiw	r28, 0x3f	; 63
    227a:	ae ad       	ldd	r26, Y+62	; 0x3e
    227c:	bf ad       	ldd	r27, Y+63	; 0x3f
    227e:	ef 97       	sbiw	r28, 0x3f	; 63
    2280:	4d 92       	st	X+, r4
    2282:	5d 92       	st	X+, r5
    2284:	6d 92       	st	X+, r6
    2286:	7c 92       	st	X, r7
    2288:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    228a:	a5 96       	adiw	r28, 0x25	; 37
    228c:	8c ad       	ldd	r24, Y+60	; 0x3c
    228e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2290:	ae ad       	ldd	r26, Y+62	; 0x3e
    2292:	bf ad       	ldd	r27, Y+63	; 0x3f
    2294:	a5 97       	sbiw	r28, 0x25	; 37
    2296:	ef 96       	adiw	r28, 0x3f	; 63
    2298:	ee ad       	ldd	r30, Y+62	; 0x3e
    229a:	ff ad       	ldd	r31, Y+63	; 0x3f
    229c:	ef 97       	sbiw	r28, 0x3f	; 63
    229e:	84 83       	std	Z+4, r24	; 0x04
    22a0:	95 83       	std	Z+5, r25	; 0x05
    22a2:	a6 83       	std	Z+6, r26	; 0x06
    22a4:	b7 83       	std	Z+7, r27	; 0x07
    22a6:	a1 c0       	rjmp	.+322    	; 0x23ea <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    22a8:	0f 2e       	mov	r0, r31
    22aa:	fe e1       	ldi	r31, 0x1E	; 30
    22ac:	af 2e       	mov	r10, r31
    22ae:	f1 e0       	ldi	r31, 0x01	; 1
    22b0:	bf 2e       	mov	r11, r31
    22b2:	f0 2d       	mov	r31, r0
    22b4:	d5 01       	movw	r26, r10
    22b6:	2d 91       	ld	r18, X+
    22b8:	3d 91       	ld	r19, X+
    22ba:	4d 91       	ld	r20, X+
    22bc:	5c 91       	ld	r21, X
    22be:	ad 96       	adiw	r28, 0x2d	; 45
    22c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    22c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    22c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22c8:	ad 97       	sbiw	r28, 0x2d	; 45
    22ca:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    22ce:	a3 01       	movw	r20, r6
    22d0:	92 01       	movw	r18, r4
    22d2:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    22d6:	9b 01       	movw	r18, r22
    22d8:	ac 01       	movw	r20, r24
    22da:	e5 96       	adiw	r28, 0x35	; 53
    22dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    22de:	7d ad       	ldd	r23, Y+61	; 0x3d
    22e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    22e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    22e4:	e5 97       	sbiw	r28, 0x35	; 53
    22e6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    22ea:	6b 01       	movw	r12, r22
    22ec:	7c 01       	movw	r14, r24
    22ee:	02 e2       	ldi	r16, 0x22	; 34
    22f0:	11 e0       	ldi	r17, 0x01	; 1
    22f2:	f8 01       	movw	r30, r16
    22f4:	20 81       	ld	r18, Z
    22f6:	31 81       	ldd	r19, Z+1	; 0x01
    22f8:	42 81       	ldd	r20, Z+2	; 0x02
    22fa:	53 81       	ldd	r21, Z+3	; 0x03
    22fc:	a9 96       	adiw	r28, 0x29	; 41
    22fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    2300:	7d ad       	ldd	r23, Y+61	; 0x3d
    2302:	8e ad       	ldd	r24, Y+62	; 0x3e
    2304:	9f ad       	ldd	r25, Y+63	; 0x3f
    2306:	a9 97       	sbiw	r28, 0x29	; 41
    2308:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    230c:	a5 96       	adiw	r28, 0x25	; 37
    230e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2310:	3d ad       	ldd	r19, Y+61	; 0x3d
    2312:	4e ad       	ldd	r20, Y+62	; 0x3e
    2314:	5f ad       	ldd	r21, Y+63	; 0x3f
    2316:	a5 97       	sbiw	r28, 0x25	; 37
    2318:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    231c:	9b 01       	movw	r18, r22
    231e:	ac 01       	movw	r20, r24
    2320:	c7 01       	movw	r24, r14
    2322:	b6 01       	movw	r22, r12
    2324:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2328:	ed 96       	adiw	r28, 0x3d	; 61
    232a:	ae ad       	ldd	r26, Y+62	; 0x3e
    232c:	bf ad       	ldd	r27, Y+63	; 0x3f
    232e:	ed 97       	sbiw	r28, 0x3d	; 61
    2330:	6d 93       	st	X+, r22
    2332:	7d 93       	st	X+, r23
    2334:	8d 93       	st	X+, r24
    2336:	9c 93       	st	X, r25
    2338:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    233a:	f8 01       	movw	r30, r16
    233c:	20 81       	ld	r18, Z
    233e:	31 81       	ldd	r19, Z+1	; 0x01
    2340:	42 81       	ldd	r20, Z+2	; 0x02
    2342:	53 81       	ldd	r21, Z+3	; 0x03
    2344:	a9 96       	adiw	r28, 0x29	; 41
    2346:	6c ad       	ldd	r22, Y+60	; 0x3c
    2348:	7d ad       	ldd	r23, Y+61	; 0x3d
    234a:	8e ad       	ldd	r24, Y+62	; 0x3e
    234c:	9f ad       	ldd	r25, Y+63	; 0x3f
    234e:	a9 97       	sbiw	r28, 0x29	; 41
    2350:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2354:	a3 01       	movw	r20, r6
    2356:	92 01       	movw	r18, r4
    2358:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    235c:	9b 01       	movw	r18, r22
    235e:	ac 01       	movw	r20, r24
    2360:	e1 96       	adiw	r28, 0x31	; 49
    2362:	6c ad       	ldd	r22, Y+60	; 0x3c
    2364:	7d ad       	ldd	r23, Y+61	; 0x3d
    2366:	8e ad       	ldd	r24, Y+62	; 0x3e
    2368:	9f ad       	ldd	r25, Y+63	; 0x3f
    236a:	e1 97       	sbiw	r28, 0x31	; 49
    236c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    2370:	6b 01       	movw	r12, r22
    2372:	7c 01       	movw	r14, r24
    2374:	d5 01       	movw	r26, r10
    2376:	2d 91       	ld	r18, X+
    2378:	3d 91       	ld	r19, X+
    237a:	4d 91       	ld	r20, X+
    237c:	5c 91       	ld	r21, X
    237e:	ad 96       	adiw	r28, 0x2d	; 45
    2380:	6c ad       	ldd	r22, Y+60	; 0x3c
    2382:	7d ad       	ldd	r23, Y+61	; 0x3d
    2384:	8e ad       	ldd	r24, Y+62	; 0x3e
    2386:	9f ad       	ldd	r25, Y+63	; 0x3f
    2388:	ad 97       	sbiw	r28, 0x2d	; 45
    238a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__subsf3>
    238e:	a5 96       	adiw	r28, 0x25	; 37
    2390:	2c ad       	ldd	r18, Y+60	; 0x3c
    2392:	3d ad       	ldd	r19, Y+61	; 0x3d
    2394:	4e ad       	ldd	r20, Y+62	; 0x3e
    2396:	5f ad       	ldd	r21, Y+63	; 0x3f
    2398:	a5 97       	sbiw	r28, 0x25	; 37
    239a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    239e:	9b 01       	movw	r18, r22
    23a0:	ac 01       	movw	r20, r24
    23a2:	c7 01       	movw	r24, r14
    23a4:	b6 01       	movw	r22, r12
    23a6:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__addsf3>
    23aa:	ed 96       	adiw	r28, 0x3d	; 61
    23ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    23ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    23b0:	ed 97       	sbiw	r28, 0x3d	; 61
    23b2:	64 83       	std	Z+4, r22	; 0x04
    23b4:	75 83       	std	Z+5, r23	; 0x05
    23b6:	86 83       	std	Z+6, r24	; 0x06
    23b8:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    23ba:	ef 96       	adiw	r28, 0x3f	; 63
    23bc:	ae ad       	ldd	r26, Y+62	; 0x3e
    23be:	bf ad       	ldd	r27, Y+63	; 0x3f
    23c0:	ef 97       	sbiw	r28, 0x3f	; 63
    23c2:	4d 92       	st	X+, r4
    23c4:	5d 92       	st	X+, r5
    23c6:	6d 92       	st	X+, r6
    23c8:	7c 92       	st	X, r7
    23ca:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    23cc:	a5 96       	adiw	r28, 0x25	; 37
    23ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    23d0:	9d ad       	ldd	r25, Y+61	; 0x3d
    23d2:	ae ad       	ldd	r26, Y+62	; 0x3e
    23d4:	bf ad       	ldd	r27, Y+63	; 0x3f
    23d6:	a5 97       	sbiw	r28, 0x25	; 37
    23d8:	b0 58       	subi	r27, 0x80	; 128
    23da:	ef 96       	adiw	r28, 0x3f	; 63
    23dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    23de:	ff ad       	ldd	r31, Y+63	; 0x3f
    23e0:	ef 97       	sbiw	r28, 0x3f	; 63
    23e2:	84 83       	std	Z+4, r24	; 0x04
    23e4:	95 83       	std	Z+5, r25	; 0x05
    23e6:	a6 83       	std	Z+6, r26	; 0x06
    23e8:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    23ea:	ed 96       	adiw	r28, 0x3d	; 61
    23ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    23ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    23f0:	ed 97       	sbiw	r28, 0x3d	; 61
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	a2 81       	ldd	r26, Z+2	; 0x02
    23f8:	b3 81       	ldd	r27, Z+3	; 0x03
    23fa:	80 93 70 01 	sts	0x0170, r24
    23fe:	90 93 71 01 	sts	0x0171, r25
    2402:	a0 93 72 01 	sts	0x0172, r26
    2406:	b0 93 73 01 	sts	0x0173, r27
		c_wii_last[1] = c_wii[1];
    240a:	84 81       	ldd	r24, Z+4	; 0x04
    240c:	95 81       	ldd	r25, Z+5	; 0x05
    240e:	a6 81       	ldd	r26, Z+6	; 0x06
    2410:	b7 81       	ldd	r27, Z+7	; 0x07
    2412:	80 93 74 01 	sts	0x0174, r24
    2416:	90 93 75 01 	sts	0x0175, r25
    241a:	a0 93 76 01 	sts	0x0176, r26
    241e:	b0 93 77 01 	sts	0x0177, r27
		dir_last[0] = dir[0];
    2422:	ef 96       	adiw	r28, 0x3f	; 63
    2424:	ee ad       	ldd	r30, Y+62	; 0x3e
    2426:	ff ad       	ldd	r31, Y+63	; 0x3f
    2428:	ef 97       	sbiw	r28, 0x3f	; 63
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	a2 81       	ldd	r26, Z+2	; 0x02
    2430:	b3 81       	ldd	r27, Z+3	; 0x03
    2432:	80 93 68 01 	sts	0x0168, r24
    2436:	90 93 69 01 	sts	0x0169, r25
    243a:	a0 93 6a 01 	sts	0x016A, r26
    243e:	b0 93 6b 01 	sts	0x016B, r27
		dir_last[1] = dir[1];
    2442:	84 81       	ldd	r24, Z+4	; 0x04
    2444:	95 81       	ldd	r25, Z+5	; 0x05
    2446:	a6 81       	ldd	r26, Z+6	; 0x06
    2448:	b7 81       	ldd	r27, Z+7	; 0x07
    244a:	80 93 6c 01 	sts	0x016C, r24
    244e:	90 93 6d 01 	sts	0x016D, r25
    2452:	a0 93 6e 01 	sts	0x016E, r26
    2456:	b0 93 6f 01 	sts	0x016F, r27
		
		if (*state == 3 || *state == 4){
    245a:	cd 57       	subi	r28, 0x7D	; 125
    245c:	df 4f       	sbci	r29, 0xFF	; 255
    245e:	a8 81       	ld	r26, Y
    2460:	b9 81       	ldd	r27, Y+1	; 0x01
    2462:	c3 58       	subi	r28, 0x83	; 131
    2464:	d0 40       	sbci	r29, 0x00	; 0
    2466:	8d 91       	ld	r24, X+
    2468:	9c 91       	ld	r25, X
    246a:	03 97       	sbiw	r24, 0x03	; 3
    246c:	02 97       	sbiw	r24, 0x02	; 2
    246e:	08 f0       	brcs	.+2      	; 0x2472 <localization+0xc2a>
    2470:	9e c0       	rjmp	.+316    	; 0x25ae <localization+0xd66>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    2472:	ed 96       	adiw	r28, 0x3d	; 61
    2474:	ee ad       	ldd	r30, Y+62	; 0x3e
    2476:	ff ad       	ldd	r31, Y+63	; 0x3f
    2478:	ed 97       	sbiw	r28, 0x3d	; 61
    247a:	24 81       	ldd	r18, Z+4	; 0x04
    247c:	35 81       	ldd	r19, Z+5	; 0x05
    247e:	46 81       	ldd	r20, Z+6	; 0x06
    2480:	57 81       	ldd	r21, Z+7	; 0x07
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	cb 57       	subi	r28, 0x7B	; 123
    248c:	df 4f       	sbci	r29, 0xFF	; 255
    248e:	08 81       	ld	r16, Y
    2490:	19 81       	ldd	r17, Y+1	; 0x01
    2492:	c5 58       	subi	r28, 0x85	; 133
    2494:	d0 40       	sbci	r29, 0x00	; 0
    2496:	0e 94 ef 0b 	call	0x17de	; 0x17de <find_if_reach>
			if (!if_reach){
    249a:	89 2b       	or	r24, r25
    249c:	c1 f5       	brne	.+112    	; 0x250e <localization+0xcc6>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    249e:	ef 96       	adiw	r28, 0x3f	; 63
    24a0:	ae ac       	ldd	r10, Y+62	; 0x3e
    24a2:	bf ac       	ldd	r11, Y+63	; 0x3f
    24a4:	ef 97       	sbiw	r28, 0x3f	; 63
    24a6:	ed 96       	adiw	r28, 0x3d	; 61
    24a8:	ce ac       	ldd	r12, Y+62	; 0x3e
    24aa:	df ac       	ldd	r13, Y+63	; 0x3f
    24ac:	ed 97       	sbiw	r28, 0x3d	; 61
    24ae:	cb 57       	subi	r28, 0x7B	; 123
    24b0:	df 4f       	sbci	r29, 0xFF	; 255
    24b2:	e8 80       	ld	r14, Y
    24b4:	f9 80       	ldd	r15, Y+1	; 0x01
    24b6:	c5 58       	subi	r28, 0x85	; 133
    24b8:	d0 40       	sbci	r29, 0x00	; 0
    24ba:	93 01       	movw	r18, r6
    24bc:	82 01       	movw	r16, r4
    24be:	a5 96       	adiw	r28, 0x25	; 37
    24c0:	4c ad       	ldd	r20, Y+60	; 0x3c
    24c2:	5d ad       	ldd	r21, Y+61	; 0x3d
    24c4:	6e ad       	ldd	r22, Y+62	; 0x3e
    24c6:	7f ad       	ldd	r23, Y+63	; 0x3f
    24c8:	a5 97       	sbiw	r28, 0x25	; 37
    24ca:	c4 01       	movw	r24, r8
    24cc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <cal_angle>
				if (state == 3){
    24d0:	cd 57       	subi	r28, 0x7D	; 125
    24d2:	df 4f       	sbci	r29, 0xFF	; 255
    24d4:	28 81       	ld	r18, Y
    24d6:	39 81       	ldd	r19, Y+1	; 0x01
    24d8:	c3 58       	subi	r28, 0x83	; 131
    24da:	d0 40       	sbci	r29, 0x00	; 0
    24dc:	23 30       	cpi	r18, 0x03	; 3
    24de:	31 05       	cpc	r19, r1
    24e0:	59 f4       	brne	.+22     	; 0x24f8 <localization+0xcb0>
					PID_alpha(Kp_loc, Kd_loc);
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	48 ec       	ldi	r20, 0xC8	; 200
    24e8:	53 e4       	ldi	r21, 0x43	; 67
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	80 e7       	ldi	r24, 0x70	; 112
    24f0:	92 e4       	ldi	r25, 0x42	; 66
    24f2:	0e 94 77 09 	call	0x12ee	; 0x12ee <PID_alpha>
    24f6:	5b c0       	rjmp	.+182    	; 0x25ae <localization+0xd66>
				}
				else{
					PID_p2p(Kp_p2p, Kd_p2p);
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	48 ec       	ldi	r20, 0xC8	; 200
    24fe:	53 e4       	ldi	r21, 0x43	; 67
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	80 e7       	ldi	r24, 0x70	; 112
    2506:	92 e4       	ldi	r25, 0x42	; 66
    2508:	0e 94 b3 0a 	call	0x1566	; 0x1566 <PID_p2p>
    250c:	50 c0       	rjmp	.+160    	; 0x25ae <localization+0xd66>
				}
			}
			else{ // reach goal, stop
				OCR1B = 0;
    250e:	10 92 8b 00 	sts	0x008B, r1
    2512:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    2516:	10 92 8d 00 	sts	0x008D, r1
    251a:	10 92 8c 00 	sts	0x008C, r1
				if (*state == 4){
    251e:	cd 57       	subi	r28, 0x7D	; 125
    2520:	df 4f       	sbci	r29, 0xFF	; 255
    2522:	a8 81       	ld	r26, Y
    2524:	b9 81       	ldd	r27, Y+1	; 0x01
    2526:	c3 58       	subi	r28, 0x83	; 131
    2528:	d0 40       	sbci	r29, 0x00	; 0
    252a:	8d 91       	ld	r24, X+
    252c:	9c 91       	ld	r25, X
    252e:	11 97       	sbiw	r26, 0x01	; 1
    2530:	04 97       	sbiw	r24, 0x04	; 4
    2532:	e9 f5       	brne	.+122    	; 0x25ae <localization+0xd66>
					*state = 5;
    2534:	85 e0       	ldi	r24, 0x05	; 5
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	8d 93       	st	X+, r24
    253a:	9c 93       	st	X, r25
    253c:	38 c0       	rjmp	.+112    	; 0x25ae <localization+0xd66>
			}
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    253e:	80 91 70 01 	lds	r24, 0x0170
    2542:	90 91 71 01 	lds	r25, 0x0171
    2546:	a0 91 72 01 	lds	r26, 0x0172
    254a:	b0 91 73 01 	lds	r27, 0x0173
    254e:	ed 96       	adiw	r28, 0x3d	; 61
    2550:	ee ad       	ldd	r30, Y+62	; 0x3e
    2552:	ff ad       	ldd	r31, Y+63	; 0x3f
    2554:	ed 97       	sbiw	r28, 0x3d	; 61
    2556:	80 83       	st	Z, r24
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	a2 83       	std	Z+2, r26	; 0x02
    255c:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    255e:	80 91 74 01 	lds	r24, 0x0174
    2562:	90 91 75 01 	lds	r25, 0x0175
    2566:	a0 91 76 01 	lds	r26, 0x0176
    256a:	b0 91 77 01 	lds	r27, 0x0177
    256e:	84 83       	std	Z+4, r24	; 0x04
    2570:	95 83       	std	Z+5, r25	; 0x05
    2572:	a6 83       	std	Z+6, r26	; 0x06
    2574:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    2576:	80 91 68 01 	lds	r24, 0x0168
    257a:	90 91 69 01 	lds	r25, 0x0169
    257e:	a0 91 6a 01 	lds	r26, 0x016A
    2582:	b0 91 6b 01 	lds	r27, 0x016B
    2586:	ef 96       	adiw	r28, 0x3f	; 63
    2588:	ee ad       	ldd	r30, Y+62	; 0x3e
    258a:	ff ad       	ldd	r31, Y+63	; 0x3f
    258c:	ef 97       	sbiw	r28, 0x3f	; 63
    258e:	80 83       	st	Z, r24
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	a2 83       	std	Z+2, r26	; 0x02
    2594:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    2596:	80 91 6c 01 	lds	r24, 0x016C
    259a:	90 91 6d 01 	lds	r25, 0x016D
    259e:	a0 91 6e 01 	lds	r26, 0x016E
    25a2:	b0 91 6f 01 	lds	r27, 0x016F
    25a6:	84 83       	std	Z+4, r24	; 0x04
    25a8:	95 83       	std	Z+5, r25	; 0x05
    25aa:	a6 83       	std	Z+6, r26	; 0x06
    25ac:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    25ae:	8c e8       	ldi	r24, 0x8C	; 140
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(c_wii[0]);
    25b6:	ed 96       	adiw	r28, 0x3d	; 61
    25b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    25ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    25bc:	ed 97       	sbiw	r28, 0x3d	; 61
    25be:	6d 91       	ld	r22, X+
    25c0:	7d 91       	ld	r23, X+
    25c2:	8d 91       	ld	r24, X+
    25c4:	9c 91       	ld	r25, X
    25c6:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    25ca:	cb 01       	movw	r24, r22
    25cc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    25d0:	87 e8       	ldi	r24, 0x87	; 135
    25d2:	92 e0       	ldi	r25, 0x02	; 2
    25d4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(c_wii[1]);
    25d8:	ed 96       	adiw	r28, 0x3d	; 61
    25da:	ee ad       	ldd	r30, Y+62	; 0x3e
    25dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    25de:	ed 97       	sbiw	r28, 0x3d	; 61
    25e0:	64 81       	ldd	r22, Z+4	; 0x04
    25e2:	75 81       	ldd	r23, Z+5	; 0x05
    25e4:	86 81       	ldd	r24, Z+6	; 0x06
    25e6:	97 81       	ldd	r25, Z+7	; 0x07
    25e8:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    25ec:	cb 01       	movw	r24, r22
    25ee:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    25f2:	85 e8       	ldi	r24, 0x85	; 133
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    25fa:	84 e7       	ldi	r24, 0x74	; 116
    25fc:	92 e0       	ldi	r25, 0x02	; 2
    25fe:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(dir[0]*1000);
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a e7       	ldi	r20, 0x7A	; 122
    2608:	54 e4       	ldi	r21, 0x44	; 68
    260a:	ef 96       	adiw	r28, 0x3f	; 63
    260c:	ae ad       	ldd	r26, Y+62	; 0x3e
    260e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2610:	ef 97       	sbiw	r28, 0x3f	; 63
    2612:	6d 91       	ld	r22, X+
    2614:	7d 91       	ld	r23, X+
    2616:	8d 91       	ld	r24, X+
    2618:	9c 91       	ld	r25, X
    261a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    261e:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    2622:	cb 01       	movw	r24, r22
    2624:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2628:	8c e6       	ldi	r24, 0x6C	; 108
    262a:	92 e0       	ldi	r25, 0x02	; 2
    262c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
	m_usb_tx_int(dir[1]*1000);
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	ef 96       	adiw	r28, 0x3f	; 63
    263a:	ee ad       	ldd	r30, Y+62	; 0x3e
    263c:	ff ad       	ldd	r31, Y+63	; 0x3f
    263e:	ef 97       	sbiw	r28, 0x3f	; 63
    2640:	64 81       	ldd	r22, Z+4	; 0x04
    2642:	75 81       	ldd	r23, Z+5	; 0x05
    2644:	86 81       	ldd	r24, Z+6	; 0x06
    2646:	97 81       	ldd	r25, Z+7	; 0x07
    2648:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__mulsf3>
    264c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    2650:	cb 01       	movw	r24, r22
    2652:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2656:	8a e6       	ldi	r24, 0x6A	; 106
    2658:	92 e0       	ldi	r25, 0x02	; 2
    265a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
    265e:	14 c0       	rjmp	.+40     	; 0x2688 <localization+0xe40>
    2660:	eb 96       	adiw	r28, 0x3b	; 59
    2662:	2e ad       	ldd	r18, Y+62	; 0x3e
    2664:	3f ad       	ldd	r19, Y+63	; 0x3f
    2666:	eb 97       	sbiw	r28, 0x3b	; 59
    2668:	2c 5f       	subi	r18, 0xFC	; 252
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	eb 96       	adiw	r28, 0x3b	; 59
    266e:	3f af       	std	Y+63, r19	; 0x3f
    2670:	2e af       	std	Y+62, r18	; 0x3e
    2672:	eb 97       	sbiw	r28, 0x3b	; 59
    2674:	e3 96       	adiw	r28, 0x33	; 51
    2676:	8e ad       	ldd	r24, Y+62	; 0x3e
    2678:	9f ad       	ldd	r25, Y+63	; 0x3f
    267a:	e3 97       	sbiw	r28, 0x33	; 51
    267c:	04 96       	adiw	r24, 0x04	; 4
    267e:	e3 96       	adiw	r28, 0x33	; 51
    2680:	9f af       	std	Y+63, r25	; 0x3f
    2682:	8e af       	std	Y+62, r24	; 0x3e
    2684:	e3 97       	sbiw	r28, 0x33	; 51
    2686:	a9 ca       	rjmp	.-2734   	; 0x1bda <localization+0x392>
}
    2688:	ca 57       	subi	r28, 0x7A	; 122
    268a:	df 4f       	sbci	r29, 0xFF	; 255
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	df 90       	pop	r13
    26a4:	cf 90       	pop	r12
    26a6:	bf 90       	pop	r11
    26a8:	af 90       	pop	r10
    26aa:	9f 90       	pop	r9
    26ac:	8f 90       	pop	r8
    26ae:	7f 90       	pop	r7
    26b0:	6f 90       	pop	r6
    26b2:	5f 90       	pop	r5
    26b4:	4f 90       	pop	r4
    26b6:	3f 90       	pop	r3
    26b8:	2f 90       	pop	r2
    26ba:	08 95       	ret

000026bc <m_bus_init>:
    26bc:	58 9a       	sbi	0x0b, 0	; 11
    26be:	59 9a       	sbi	0x0b, 1	; 11
    26c0:	5a 9a       	sbi	0x0b, 2	; 11
    26c2:	8c e0       	ldi	r24, 0x0C	; 12
    26c4:	80 93 b8 00 	sts	0x00B8, r24
    26c8:	e9 e6       	ldi	r30, 0x69	; 105
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	80 62       	ori	r24, 0x20	; 32
    26d0:	80 83       	st	Z, r24
    26d2:	80 81       	ld	r24, Z
    26d4:	8f 7e       	andi	r24, 0xEF	; 239
    26d6:	80 83       	st	Z, r24
    26d8:	ea 9a       	sbi	0x1d, 2	; 29
    26da:	78 94       	sei
    26dc:	08 95       	ret

000026de <m_rf_open>:
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	18 2f       	mov	r17, r24
    26e6:	d6 2f       	mov	r29, r22
    26e8:	c4 2f       	mov	r28, r20
    26ea:	0e 94 5e 13 	call	0x26bc	; 0x26bc <m_bus_init>
    26ee:	94 ea       	ldi	r25, 0xA4	; 164
    26f0:	90 93 bc 00 	sts	0x00BC, r25
    26f4:	ec eb       	ldi	r30, 0xBC	; 188
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	90 81       	ld	r25, Z
    26fa:	99 23       	and	r25, r25
    26fc:	ec f7       	brge	.-6      	; 0x26f8 <m_rf_open+0x1a>
    26fe:	90 e5       	ldi	r25, 0x50	; 80
    2700:	90 93 bb 00 	sts	0x00BB, r25
    2704:	94 e8       	ldi	r25, 0x84	; 132
    2706:	90 93 bc 00 	sts	0x00BC, r25
    270a:	ec eb       	ldi	r30, 0xBC	; 188
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	90 81       	ld	r25, Z
    2710:	99 23       	and	r25, r25
    2712:	ec f7       	brge	.-6      	; 0x270e <m_rf_open+0x30>
    2714:	90 91 b9 00 	lds	r25, 0x00B9
    2718:	98 7f       	andi	r25, 0xF8	; 248
    271a:	90 32       	cpi	r25, 0x20	; 32
    271c:	29 f4       	brne	.+10     	; 0x2728 <m_rf_open+0x4a>
    271e:	84 e9       	ldi	r24, 0x94	; 148
    2720:	80 93 bc 00 	sts	0x00BC, r24
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	2d c0       	rjmp	.+90     	; 0x2782 <m_rf_open+0xa4>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	80 93 bb 00 	sts	0x00BB, r24
    272e:	84 e8       	ldi	r24, 0x84	; 132
    2730:	80 93 bc 00 	sts	0x00BC, r24
    2734:	ec eb       	ldi	r30, 0xBC	; 188
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	90 81       	ld	r25, Z
    273a:	99 23       	and	r25, r25
    273c:	ec f7       	brge	.-6      	; 0x2738 <m_rf_open+0x5a>
    273e:	10 93 bb 00 	sts	0x00BB, r17
    2742:	84 e8       	ldi	r24, 0x84	; 132
    2744:	80 93 bc 00 	sts	0x00BC, r24
    2748:	ec eb       	ldi	r30, 0xBC	; 188
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	88 23       	and	r24, r24
    2750:	ec f7       	brge	.-6      	; 0x274c <m_rf_open+0x6e>
    2752:	d0 93 bb 00 	sts	0x00BB, r29
    2756:	84 e8       	ldi	r24, 0x84	; 132
    2758:	80 93 bc 00 	sts	0x00BC, r24
    275c:	ec eb       	ldi	r30, 0xBC	; 188
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 23       	and	r24, r24
    2764:	ec f7       	brge	.-6      	; 0x2760 <m_rf_open+0x82>
    2766:	c0 93 bb 00 	sts	0x00BB, r28
    276a:	84 e8       	ldi	r24, 0x84	; 132
    276c:	80 93 bc 00 	sts	0x00BC, r24
    2770:	ec eb       	ldi	r30, 0xBC	; 188
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	88 23       	and	r24, r24
    2778:	ec f7       	brge	.-6      	; 0x2774 <m_rf_open+0x96>
    277a:	84 e9       	ldi	r24, 0x94	; 148
    277c:	80 93 bc 00 	sts	0x00BC, r24
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	08 95       	ret

0000278a <m_rf_read>:
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	24 ea       	ldi	r18, 0xA4	; 164
    2792:	20 93 bc 00 	sts	0x00BC, r18
    2796:	ec eb       	ldi	r30, 0xBC	; 188
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	20 81       	ld	r18, Z
    279c:	22 23       	and	r18, r18
    279e:	ec f7       	brge	.-6      	; 0x279a <m_rf_read+0x10>
    27a0:	21 e5       	ldi	r18, 0x51	; 81
    27a2:	20 93 bb 00 	sts	0x00BB, r18
    27a6:	24 e8       	ldi	r18, 0x84	; 132
    27a8:	20 93 bc 00 	sts	0x00BC, r18
    27ac:	ec eb       	ldi	r30, 0xBC	; 188
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	20 81       	ld	r18, Z
    27b2:	22 23       	and	r18, r18
    27b4:	ec f7       	brge	.-6      	; 0x27b0 <m_rf_read+0x26>
    27b6:	20 91 b9 00 	lds	r18, 0x00B9
    27ba:	28 7f       	andi	r18, 0xF8	; 248
    27bc:	28 34       	cpi	r18, 0x48	; 72
    27be:	29 f4       	brne	.+10     	; 0x27ca <m_rf_read+0x40>
    27c0:	84 e9       	ldi	r24, 0x94	; 148
    27c2:	80 93 bc 00 	sts	0x00BC, r24
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	44 c0       	rjmp	.+136    	; 0x2852 <m_rf_read+0xc8>
    27ca:	24 ec       	ldi	r18, 0xC4	; 196
    27cc:	20 93 bc 00 	sts	0x00BC, r18
    27d0:	ec eb       	ldi	r30, 0xBC	; 188
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	20 81       	ld	r18, Z
    27d6:	22 23       	and	r18, r18
    27d8:	ec f7       	brge	.-6      	; 0x27d4 <m_rf_read+0x4a>
    27da:	10 91 bb 00 	lds	r17, 0x00BB
    27de:	16 13       	cpse	r17, r22
    27e0:	0a c0       	rjmp	.+20     	; 0x27f6 <m_rf_read+0x6c>
    27e2:	41 2f       	mov	r20, r17
    27e4:	50 e0       	ldi	r21, 0x00	; 0
    27e6:	41 50       	subi	r20, 0x01	; 1
    27e8:	51 09       	sbc	r21, r1
    27ea:	14 16       	cp	r1, r20
    27ec:	15 06       	cpc	r1, r21
    27ee:	44 f0       	brlt	.+16     	; 0x2800 <m_rf_read+0x76>
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	1c c0       	rjmp	.+56     	; 0x282e <m_rf_read+0xa4>
    27f6:	84 e9       	ldi	r24, 0x94	; 148
    27f8:	80 93 bc 00 	sts	0x00BC, r24
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	29 c0       	rjmp	.+82     	; 0x2852 <m_rf_read+0xc8>
    2800:	dc 01       	movw	r26, r24
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	ec eb       	ldi	r30, 0xBC	; 188
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	74 ec       	ldi	r23, 0xC4	; 196
    280c:	cb eb       	ldi	r28, 0xBB	; 187
    280e:	d0 e0       	ldi	r29, 0x00	; 0
    2810:	70 83       	st	Z, r23
    2812:	60 81       	ld	r22, Z
    2814:	66 23       	and	r22, r22
    2816:	ec f7       	brge	.-6      	; 0x2812 <m_rf_read+0x88>
    2818:	68 81       	ld	r22, Y
    281a:	6d 93       	st	X+, r22
    281c:	2f 5f       	subi	r18, 0xFF	; 255
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	24 17       	cp	r18, r20
    2822:	35 07       	cpc	r19, r21
    2824:	ac f3       	brlt	.-22     	; 0x2810 <m_rf_read+0x86>
    2826:	21 2f       	mov	r18, r17
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	21 50       	subi	r18, 0x01	; 1
    282c:	31 09       	sbc	r19, r1
    282e:	44 e8       	ldi	r20, 0x84	; 132
    2830:	40 93 bc 00 	sts	0x00BC, r20
    2834:	ec eb       	ldi	r30, 0xBC	; 188
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	40 81       	ld	r20, Z
    283a:	44 23       	and	r20, r20
    283c:	ec f7       	brge	.-6      	; 0x2838 <m_rf_read+0xae>
    283e:	40 91 bb 00 	lds	r20, 0x00BB
    2842:	fc 01       	movw	r30, r24
    2844:	e2 0f       	add	r30, r18
    2846:	f3 1f       	adc	r31, r19
    2848:	40 83       	st	Z, r20
    284a:	84 e9       	ldi	r24, 0x94	; 148
    284c:	80 93 bc 00 	sts	0x00BC, r24
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	08 95       	ret

0000285a <m_rf_send>:
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	f8 94       	cli
    2860:	94 ea       	ldi	r25, 0xA4	; 164
    2862:	90 93 bc 00 	sts	0x00BC, r25
    2866:	ec eb       	ldi	r30, 0xBC	; 188
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	90 81       	ld	r25, Z
    286c:	99 23       	and	r25, r25
    286e:	ec f7       	brge	.-6      	; 0x286a <m_rf_send+0x10>
    2870:	90 e5       	ldi	r25, 0x50	; 80
    2872:	90 93 bb 00 	sts	0x00BB, r25
    2876:	94 e8       	ldi	r25, 0x84	; 132
    2878:	90 93 bc 00 	sts	0x00BC, r25
    287c:	ec eb       	ldi	r30, 0xBC	; 188
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	90 81       	ld	r25, Z
    2882:	99 23       	and	r25, r25
    2884:	ec f7       	brge	.-6      	; 0x2880 <m_rf_send+0x26>
    2886:	90 91 b9 00 	lds	r25, 0x00B9
    288a:	98 7f       	andi	r25, 0xF8	; 248
    288c:	90 32       	cpi	r25, 0x20	; 32
    288e:	31 f4       	brne	.+12     	; 0x289c <m_rf_send+0x42>
    2890:	84 e9       	ldi	r24, 0x94	; 148
    2892:	80 93 bc 00 	sts	0x00BC, r24
    2896:	78 94       	sei
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	32 c0       	rjmp	.+100    	; 0x2900 <m_rf_send+0xa6>
    289c:	93 e0       	ldi	r25, 0x03	; 3
    289e:	90 93 bb 00 	sts	0x00BB, r25
    28a2:	94 e8       	ldi	r25, 0x84	; 132
    28a4:	90 93 bc 00 	sts	0x00BC, r25
    28a8:	ec eb       	ldi	r30, 0xBC	; 188
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	90 81       	ld	r25, Z
    28ae:	99 23       	and	r25, r25
    28b0:	ec f7       	brge	.-6      	; 0x28ac <m_rf_send+0x52>
    28b2:	80 93 bb 00 	sts	0x00BB, r24
    28b6:	84 e8       	ldi	r24, 0x84	; 132
    28b8:	80 93 bc 00 	sts	0x00BC, r24
    28bc:	ec eb       	ldi	r30, 0xBC	; 188
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	88 23       	and	r24, r24
    28c4:	ec f7       	brge	.-6      	; 0x28c0 <m_rf_send+0x66>
    28c6:	24 2f       	mov	r18, r20
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	12 16       	cp	r1, r18
    28cc:	13 06       	cpc	r1, r19
    28ce:	9c f4       	brge	.+38     	; 0x28f6 <m_rf_send+0x9c>
    28d0:	a6 2f       	mov	r26, r22
    28d2:	b7 2f       	mov	r27, r23
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	cb eb       	ldi	r28, 0xBB	; 187
    28da:	d0 e0       	ldi	r29, 0x00	; 0
    28dc:	ec eb       	ldi	r30, 0xBC	; 188
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	54 e8       	ldi	r21, 0x84	; 132
    28e2:	4d 91       	ld	r20, X+
    28e4:	48 83       	st	Y, r20
    28e6:	50 83       	st	Z, r21
    28e8:	40 81       	ld	r20, Z
    28ea:	44 23       	and	r20, r20
    28ec:	ec f7       	brge	.-6      	; 0x28e8 <m_rf_send+0x8e>
    28ee:	01 96       	adiw	r24, 0x01	; 1
    28f0:	82 17       	cp	r24, r18
    28f2:	93 07       	cpc	r25, r19
    28f4:	b4 f3       	brlt	.-20     	; 0x28e2 <m_rf_send+0x88>
    28f6:	84 e9       	ldi	r24, 0x94	; 148
    28f8:	80 93 bc 00 	sts	0x00BC, r24
    28fc:	78 94       	sei
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	08 95       	ret

00002906 <m_usb_init>:
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	80 93 d7 00 	sts	0x00D7, r24
    290c:	80 ea       	ldi	r24, 0xA0	; 160
    290e:	80 93 d8 00 	sts	0x00D8, r24
    2912:	82 e1       	ldi	r24, 0x12	; 18
    2914:	89 bd       	out	0x29, r24	; 41
    2916:	09 b4       	in	r0, 0x29	; 41
    2918:	00 fe       	sbrs	r0, 0
    291a:	fd cf       	rjmp	.-6      	; 0x2916 <m_usb_init+0x10>
    291c:	80 e9       	ldi	r24, 0x90	; 144
    291e:	80 93 d8 00 	sts	0x00D8, r24
    2922:	10 92 e0 00 	sts	0x00E0, r1
    2926:	10 92 93 01 	sts	0x0193, r1
    292a:	10 92 90 01 	sts	0x0190, r1
    292e:	8c e0       	ldi	r24, 0x0C	; 12
    2930:	80 93 e2 00 	sts	0x00E2, r24
    2934:	78 94       	sei
    2936:	08 95       	ret

00002938 <m_usb_tx_char>:
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	90 91 93 01 	lds	r25, 0x0193
    2940:	99 23       	and	r25, r25
    2942:	09 f4       	brne	.+2      	; 0x2946 <m_usb_tx_char+0xe>
    2944:	4c c0       	rjmp	.+152    	; 0x29de <m_usb_tx_char+0xa6>
    2946:	9f b7       	in	r25, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	24 e0       	ldi	r18, 0x04	; 4
    294c:	20 93 e9 00 	sts	0x00E9, r18
    2950:	20 91 91 01 	lds	r18, 0x0191
    2954:	22 23       	and	r18, r18
    2956:	49 f0       	breq	.+18     	; 0x296a <m_usb_tx_char+0x32>
    2958:	20 91 e8 00 	lds	r18, 0x00E8
    295c:	25 fd       	sbrc	r18, 5
    295e:	03 c0       	rjmp	.+6      	; 0x2966 <m_usb_tx_char+0x2e>
    2960:	9f bf       	out	0x3f, r25	; 63
    2962:	8f ef       	ldi	r24, 0xFF	; 255
    2964:	41 c0       	rjmp	.+130    	; 0x29e8 <m_usb_tx_char+0xb0>
    2966:	10 92 91 01 	sts	0x0191, r1
    296a:	30 91 e4 00 	lds	r19, 0x00E4
    296e:	37 5e       	subi	r19, 0xE7	; 231
    2970:	20 91 e8 00 	lds	r18, 0x00E8
    2974:	25 fd       	sbrc	r18, 5
    2976:	24 c0       	rjmp	.+72     	; 0x29c0 <m_usb_tx_char+0x88>
    2978:	9f bf       	out	0x3f, r25	; 63
    297a:	90 91 e4 00 	lds	r25, 0x00E4
    297e:	93 17       	cp	r25, r19
    2980:	81 f0       	breq	.+32     	; 0x29a2 <m_usb_tx_char+0x6a>
    2982:	90 91 93 01 	lds	r25, 0x0193
    2986:	99 23       	and	r25, r25
    2988:	61 f1       	breq	.+88     	; 0x29e2 <m_usb_tx_char+0xaa>
    298a:	a9 ee       	ldi	r26, 0xE9	; 233
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	44 e0       	ldi	r20, 0x04	; 4
    2990:	e8 ee       	ldi	r30, 0xE8	; 232
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	c4 ee       	ldi	r28, 0xE4	; 228
    2996:	d0 e0       	ldi	r29, 0x00	; 0
    2998:	0d c0       	rjmp	.+26     	; 0x29b4 <m_usb_tx_char+0x7c>
    299a:	9f bf       	out	0x3f, r25	; 63
    299c:	98 81       	ld	r25, Y
    299e:	93 13       	cpse	r25, r19
    29a0:	05 c0       	rjmp	.+10     	; 0x29ac <m_usb_tx_char+0x74>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	80 93 91 01 	sts	0x0191, r24
    29a8:	8f ef       	ldi	r24, 0xFF	; 255
    29aa:	1e c0       	rjmp	.+60     	; 0x29e8 <m_usb_tx_char+0xb0>
    29ac:	90 91 93 01 	lds	r25, 0x0193
    29b0:	99 23       	and	r25, r25
    29b2:	c9 f0       	breq	.+50     	; 0x29e6 <m_usb_tx_char+0xae>
    29b4:	9f b7       	in	r25, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	4c 93       	st	X, r20
    29ba:	20 81       	ld	r18, Z
    29bc:	25 ff       	sbrs	r18, 5
    29be:	ed cf       	rjmp	.-38     	; 0x299a <m_usb_tx_char+0x62>
    29c0:	80 93 f1 00 	sts	0x00F1, r24
    29c4:	80 91 e8 00 	lds	r24, 0x00E8
    29c8:	85 fd       	sbrc	r24, 5
    29ca:	03 c0       	rjmp	.+6      	; 0x29d2 <m_usb_tx_char+0x9a>
    29cc:	8a e3       	ldi	r24, 0x3A	; 58
    29ce:	80 93 e8 00 	sts	0x00E8, r24
    29d2:	85 e0       	ldi	r24, 0x05	; 5
    29d4:	80 93 92 01 	sts	0x0192, r24
    29d8:	9f bf       	out	0x3f, r25	; 63
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	05 c0       	rjmp	.+10     	; 0x29e8 <m_usb_tx_char+0xb0>
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	03 c0       	rjmp	.+6      	; 0x29e8 <m_usb_tx_char+0xb0>
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <m_usb_tx_char+0xb0>
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <__vector_10>:
    29ee:	1f 92       	push	r1
    29f0:	0f 92       	push	r0
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	0f 92       	push	r0
    29f6:	11 24       	eor	r1, r1
    29f8:	8f 93       	push	r24
    29fa:	9f 93       	push	r25
    29fc:	ef 93       	push	r30
    29fe:	ff 93       	push	r31
    2a00:	e1 ee       	ldi	r30, 0xE1	; 225
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	10 82       	st	Z, r1
    2a08:	83 ff       	sbrs	r24, 3
    2a0a:	11 c0       	rjmp	.+34     	; 0x2a2e <__vector_10+0x40>
    2a0c:	10 92 e9 00 	sts	0x00E9, r1
    2a10:	91 e0       	ldi	r25, 0x01	; 1
    2a12:	90 93 eb 00 	sts	0x00EB, r25
    2a16:	10 92 ec 00 	sts	0x00EC, r1
    2a1a:	92 e1       	ldi	r25, 0x12	; 18
    2a1c:	90 93 ed 00 	sts	0x00ED, r25
    2a20:	98 e0       	ldi	r25, 0x08	; 8
    2a22:	90 93 f0 00 	sts	0x00F0, r25
    2a26:	10 92 93 01 	sts	0x0193, r1
    2a2a:	10 92 90 01 	sts	0x0190, r1
    2a2e:	82 ff       	sbrs	r24, 2
    2a30:	13 c0       	rjmp	.+38     	; 0x2a58 <__vector_10+0x6a>
    2a32:	80 91 93 01 	lds	r24, 0x0193
    2a36:	88 23       	and	r24, r24
    2a38:	79 f0       	breq	.+30     	; 0x2a58 <__vector_10+0x6a>
    2a3a:	80 91 92 01 	lds	r24, 0x0192
    2a3e:	88 23       	and	r24, r24
    2a40:	59 f0       	breq	.+22     	; 0x2a58 <__vector_10+0x6a>
    2a42:	81 50       	subi	r24, 0x01	; 1
    2a44:	80 93 92 01 	sts	0x0192, r24
    2a48:	81 11       	cpse	r24, r1
    2a4a:	06 c0       	rjmp	.+12     	; 0x2a58 <__vector_10+0x6a>
    2a4c:	84 e0       	ldi	r24, 0x04	; 4
    2a4e:	80 93 e9 00 	sts	0x00E9, r24
    2a52:	8a e3       	ldi	r24, 0x3A	; 58
    2a54:	80 93 e8 00 	sts	0x00E8, r24
    2a58:	ff 91       	pop	r31
    2a5a:	ef 91       	pop	r30
    2a5c:	9f 91       	pop	r25
    2a5e:	8f 91       	pop	r24
    2a60:	0f 90       	pop	r0
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	0f 90       	pop	r0
    2a66:	1f 90       	pop	r1
    2a68:	18 95       	reti

00002a6a <__vector_11>:
    2a6a:	1f 92       	push	r1
    2a6c:	0f 92       	push	r0
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	0f 92       	push	r0
    2a72:	11 24       	eor	r1, r1
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	2f 93       	push	r18
    2a7a:	3f 93       	push	r19
    2a7c:	4f 93       	push	r20
    2a7e:	5f 93       	push	r21
    2a80:	6f 93       	push	r22
    2a82:	7f 93       	push	r23
    2a84:	8f 93       	push	r24
    2a86:	9f 93       	push	r25
    2a88:	af 93       	push	r26
    2a8a:	bf 93       	push	r27
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	ef 93       	push	r30
    2a92:	ff 93       	push	r31
    2a94:	10 92 e9 00 	sts	0x00E9, r1
    2a98:	80 91 e8 00 	lds	r24, 0x00E8
    2a9c:	83 ff       	sbrs	r24, 3
    2a9e:	4e c1       	rjmp	.+668    	; 0x2d3c <__vector_11+0x2d2>
    2aa0:	e1 ef       	ldi	r30, 0xF1	; 241
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	c0 81       	ld	r28, Z
    2aa6:	40 81       	ld	r20, Z
    2aa8:	20 81       	ld	r18, Z
    2aaa:	80 81       	ld	r24, Z
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	38 2b       	or	r19, r24
    2ab0:	80 81       	ld	r24, Z
    2ab2:	50 81       	ld	r21, Z
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	75 2b       	or	r23, r21
    2aba:	b0 81       	ld	r27, Z
    2abc:	a0 81       	ld	r26, Z
    2abe:	82 ef       	ldi	r24, 0xF2	; 242
    2ac0:	80 93 e8 00 	sts	0x00E8, r24
    2ac4:	46 30       	cpi	r20, 0x06	; 6
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <__vector_11+0x60>
    2ac8:	58 c0       	rjmp	.+176    	; 0x2b7a <__vector_11+0x110>
    2aca:	04 c0       	rjmp	.+8      	; 0x2ad4 <__vector_11+0x6a>
    2acc:	81 e2       	ldi	r24, 0x21	; 33
    2ace:	80 93 eb 00 	sts	0x00EB, r24
    2ad2:	3b c1       	rjmp	.+630    	; 0x2d4a <__vector_11+0x2e0>
    2ad4:	c6 e0       	ldi	r28, 0x06	; 6
    2ad6:	80 ea       	ldi	r24, 0xA0	; 160
    2ad8:	92 e0       	ldi	r25, 0x02	; 2
    2ada:	fc 01       	movw	r30, r24
    2adc:	45 91       	lpm	r20, Z+
    2ade:	54 91       	lpm	r21, Z
    2ae0:	24 17       	cp	r18, r20
    2ae2:	35 07       	cpc	r19, r21
    2ae4:	11 f0       	breq	.+4      	; 0x2aea <__vector_11+0x80>
    2ae6:	07 96       	adiw	r24, 0x07	; 7
    2ae8:	23 c0       	rjmp	.+70     	; 0x2b30 <__vector_11+0xc6>
    2aea:	fc 01       	movw	r30, r24
    2aec:	32 96       	adiw	r30, 0x02	; 2
    2aee:	45 91       	lpm	r20, Z+
    2af0:	54 91       	lpm	r21, Z
    2af2:	64 17       	cp	r22, r20
    2af4:	75 07       	cpc	r23, r21
    2af6:	11 f0       	breq	.+4      	; 0x2afc <__vector_11+0x92>
    2af8:	07 96       	adiw	r24, 0x07	; 7
    2afa:	1a c0       	rjmp	.+52     	; 0x2b30 <__vector_11+0xc6>
    2afc:	fc 01       	movw	r30, r24
    2afe:	34 96       	adiw	r30, 0x04	; 4
    2b00:	25 91       	lpm	r18, Z+
    2b02:	34 91       	lpm	r19, Z
    2b04:	fc 01       	movw	r30, r24
    2b06:	36 96       	adiw	r30, 0x06	; 6
    2b08:	54 91       	lpm	r21, Z
    2b0a:	8b 2f       	mov	r24, r27
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9a 2b       	or	r25, r26
    2b10:	8f 3f       	cpi	r24, 0xFF	; 255
    2b12:	91 05       	cpc	r25, r1
    2b14:	19 f0       	breq	.+6      	; 0x2b1c <__vector_11+0xb2>
    2b16:	10 f0       	brcs	.+4      	; 0x2b1c <__vector_11+0xb2>
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	85 17       	cp	r24, r21
    2b1e:	08 f4       	brcc	.+2      	; 0x2b22 <__vector_11+0xb8>
    2b20:	58 2f       	mov	r21, r24
    2b22:	a8 ee       	ldi	r26, 0xE8	; 232
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	70 e1       	ldi	r23, 0x10	; 16
    2b28:	6e ef       	ldi	r22, 0xFE	; 254
    2b2a:	c1 ef       	ldi	r28, 0xF1	; 241
    2b2c:	d0 e0       	ldi	r29, 0x00	; 0
    2b2e:	03 c0       	rjmp	.+6      	; 0x2b36 <__vector_11+0xcc>
    2b30:	c1 50       	subi	r28, 0x01	; 1
    2b32:	99 f6       	brne	.-90     	; 0x2ada <__vector_11+0x70>
    2b34:	cb cf       	rjmp	.-106    	; 0x2acc <__vector_11+0x62>
    2b36:	8c 91       	ld	r24, X
    2b38:	98 2f       	mov	r25, r24
    2b3a:	95 70       	andi	r25, 0x05	; 5
    2b3c:	e1 f3       	breq	.-8      	; 0x2b36 <__vector_11+0xcc>
    2b3e:	82 fd       	sbrc	r24, 2
    2b40:	04 c1       	rjmp	.+520    	; 0x2d4a <__vector_11+0x2e0>
    2b42:	45 2f       	mov	r20, r21
    2b44:	51 31       	cpi	r21, 0x11	; 17
    2b46:	08 f0       	brcs	.+2      	; 0x2b4a <__vector_11+0xe0>
    2b48:	47 2f       	mov	r20, r23
    2b4a:	44 23       	and	r20, r20
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <__vector_11+0xe6>
    2b4e:	fa c0       	rjmp	.+500    	; 0x2d44 <__vector_11+0x2da>
    2b50:	f9 01       	movw	r30, r18
    2b52:	84 2f       	mov	r24, r20
    2b54:	94 91       	lpm	r25, Z
    2b56:	98 83       	st	Y, r25
    2b58:	81 50       	subi	r24, 0x01	; 1
    2b5a:	31 96       	adiw	r30, 0x01	; 1
    2b5c:	81 11       	cpse	r24, r1
    2b5e:	fa cf       	rjmp	.-12     	; 0x2b54 <__vector_11+0xea>
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	84 0f       	add	r24, r20
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	28 0f       	add	r18, r24
    2b6a:	39 1f       	adc	r19, r25
    2b6c:	54 1b       	sub	r21, r20
    2b6e:	6c 93       	st	X, r22
    2b70:	51 11       	cpse	r21, r1
    2b72:	e1 cf       	rjmp	.-62     	; 0x2b36 <__vector_11+0xcc>
    2b74:	40 31       	cpi	r20, 0x10	; 16
    2b76:	f9 f2       	breq	.-66     	; 0x2b36 <__vector_11+0xcc>
    2b78:	e8 c0       	rjmp	.+464    	; 0x2d4a <__vector_11+0x2e0>
    2b7a:	45 30       	cpi	r20, 0x05	; 5
    2b7c:	61 f4       	brne	.+24     	; 0x2b96 <__vector_11+0x12c>
    2b7e:	8e ef       	ldi	r24, 0xFE	; 254
    2b80:	80 93 e8 00 	sts	0x00E8, r24
    2b84:	e8 ee       	ldi	r30, 0xE8	; 232
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	80 ff       	sbrs	r24, 0
    2b8c:	fd cf       	rjmp	.-6      	; 0x2b88 <__vector_11+0x11e>
    2b8e:	20 68       	ori	r18, 0x80	; 128
    2b90:	20 93 e3 00 	sts	0x00E3, r18
    2b94:	da c0       	rjmp	.+436    	; 0x2d4a <__vector_11+0x2e0>
    2b96:	49 30       	cpi	r20, 0x09	; 9
    2b98:	09 f0       	breq	.+2      	; 0x2b9c <__vector_11+0x132>
    2b9a:	36 c0       	rjmp	.+108    	; 0x2c08 <__vector_11+0x19e>
    2b9c:	c1 11       	cpse	r28, r1
    2b9e:	5f c0       	rjmp	.+190    	; 0x2c5e <__vector_11+0x1f4>
    2ba0:	20 93 93 01 	sts	0x0193, r18
    2ba4:	10 92 90 01 	sts	0x0190, r1
    2ba8:	10 92 92 01 	sts	0x0192, r1
    2bac:	8e ef       	ldi	r24, 0xFE	; 254
    2bae:	80 93 e8 00 	sts	0x00E8, r24
    2bb2:	11 e0       	ldi	r17, 0x01	; 1
    2bb4:	89 e4       	ldi	r24, 0x49	; 73
    2bb6:	93 e0       	ldi	r25, 0x03	; 3
    2bb8:	c9 ee       	ldi	r28, 0xE9	; 233
    2bba:	d0 e0       	ldi	r29, 0x00	; 0
    2bbc:	ab ee       	ldi	r26, 0xEB	; 235
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	6c ee       	ldi	r22, 0xEC	; 236
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	4d ee       	ldi	r20, 0xED	; 237
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	18 83       	st	Y, r17
    2bca:	9c 01       	movw	r18, r24
    2bcc:	2f 5f       	subi	r18, 0xFF	; 255
    2bce:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	04 91       	lpm	r16, Z
    2bd4:	0c 93       	st	X, r16
    2bd6:	00 23       	and	r16, r16
    2bd8:	61 f0       	breq	.+24     	; 0x2bf2 <__vector_11+0x188>
    2bda:	f9 01       	movw	r30, r18
    2bdc:	24 91       	lpm	r18, Z
    2bde:	fb 01       	movw	r30, r22
    2be0:	20 83       	st	Z, r18
    2be2:	9c 01       	movw	r18, r24
    2be4:	2d 5f       	subi	r18, 0xFD	; 253
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
    2be8:	fc 01       	movw	r30, r24
    2bea:	32 96       	adiw	r30, 0x02	; 2
    2bec:	84 91       	lpm	r24, Z
    2bee:	fa 01       	movw	r30, r20
    2bf0:	80 83       	st	Z, r24
    2bf2:	1f 5f       	subi	r17, 0xFF	; 255
    2bf4:	15 30       	cpi	r17, 0x05	; 5
    2bf6:	11 f0       	breq	.+4      	; 0x2bfc <__vector_11+0x192>
    2bf8:	c9 01       	movw	r24, r18
    2bfa:	e6 cf       	rjmp	.-52     	; 0x2bc8 <__vector_11+0x15e>
    2bfc:	ea ee       	ldi	r30, 0xEA	; 234
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	8e e1       	ldi	r24, 0x1E	; 30
    2c02:	80 83       	st	Z, r24
    2c04:	10 82       	st	Z, r1
    2c06:	a1 c0       	rjmp	.+322    	; 0x2d4a <__vector_11+0x2e0>
    2c08:	48 30       	cpi	r20, 0x08	; 8
    2c0a:	81 f4       	brne	.+32     	; 0x2c2c <__vector_11+0x1c2>
    2c0c:	c0 38       	cpi	r28, 0x80	; 128
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <__vector_11+0x1a8>
    2c10:	42 c0       	rjmp	.+132    	; 0x2c96 <__vector_11+0x22c>
    2c12:	e8 ee       	ldi	r30, 0xE8	; 232
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	80 ff       	sbrs	r24, 0
    2c1a:	fd cf       	rjmp	.-6      	; 0x2c16 <__vector_11+0x1ac>
    2c1c:	80 91 93 01 	lds	r24, 0x0193
    2c20:	80 93 f1 00 	sts	0x00F1, r24
    2c24:	8e ef       	ldi	r24, 0xFE	; 254
    2c26:	80 93 e8 00 	sts	0x00E8, r24
    2c2a:	8f c0       	rjmp	.+286    	; 0x2d4a <__vector_11+0x2e0>
    2c2c:	41 32       	cpi	r20, 0x21	; 33
    2c2e:	b9 f4       	brne	.+46     	; 0x2c5e <__vector_11+0x1f4>
    2c30:	c1 3a       	cpi	r28, 0xA1	; 161
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <__vector_11+0x1cc>
    2c34:	40 c0       	rjmp	.+128    	; 0x2cb6 <__vector_11+0x24c>
    2c36:	e8 ee       	ldi	r30, 0xE8	; 232
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 ff       	sbrs	r24, 0
    2c3e:	fd cf       	rjmp	.-6      	; 0x2c3a <__vector_11+0x1d0>
    2c40:	e6 e2       	ldi	r30, 0x26	; 38
    2c42:	f1 e0       	ldi	r31, 0x01	; 1
    2c44:	8d e2       	ldi	r24, 0x2D	; 45
    2c46:	91 e0       	ldi	r25, 0x01	; 1
    2c48:	a1 ef       	ldi	r26, 0xF1	; 241
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	21 91       	ld	r18, Z+
    2c4e:	2c 93       	st	X, r18
    2c50:	e8 17       	cp	r30, r24
    2c52:	f9 07       	cpc	r31, r25
    2c54:	d9 f7       	brne	.-10     	; 0x2c4c <__vector_11+0x1e2>
    2c56:	8e ef       	ldi	r24, 0xFE	; 254
    2c58:	80 93 e8 00 	sts	0x00E8, r24
    2c5c:	76 c0       	rjmp	.+236    	; 0x2d4a <__vector_11+0x2e0>
    2c5e:	40 32       	cpi	r20, 0x20	; 32
    2c60:	d1 f4       	brne	.+52     	; 0x2c96 <__vector_11+0x22c>
    2c62:	c1 32       	cpi	r28, 0x21	; 33
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <__vector_11+0x1fe>
    2c66:	43 c0       	rjmp	.+134    	; 0x2cee <__vector_11+0x284>
    2c68:	e8 ee       	ldi	r30, 0xE8	; 232
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	82 ff       	sbrs	r24, 2
    2c70:	fd cf       	rjmp	.-6      	; 0x2c6c <__vector_11+0x202>
    2c72:	e6 e2       	ldi	r30, 0x26	; 38
    2c74:	f1 e0       	ldi	r31, 0x01	; 1
    2c76:	8d e2       	ldi	r24, 0x2D	; 45
    2c78:	91 e0       	ldi	r25, 0x01	; 1
    2c7a:	a1 ef       	ldi	r26, 0xF1	; 241
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	2c 91       	ld	r18, X
    2c80:	21 93       	st	Z+, r18
    2c82:	e8 17       	cp	r30, r24
    2c84:	f9 07       	cpc	r31, r25
    2c86:	d9 f7       	brne	.-10     	; 0x2c7e <__vector_11+0x214>
    2c88:	e8 ee       	ldi	r30, 0xE8	; 232
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	8b ef       	ldi	r24, 0xFB	; 251
    2c8e:	80 83       	st	Z, r24
    2c90:	8e ef       	ldi	r24, 0xFE	; 254
    2c92:	80 83       	st	Z, r24
    2c94:	5a c0       	rjmp	.+180    	; 0x2d4a <__vector_11+0x2e0>
    2c96:	42 32       	cpi	r20, 0x22	; 34
    2c98:	71 f4       	brne	.+28     	; 0x2cb6 <__vector_11+0x24c>
    2c9a:	c1 32       	cpi	r28, 0x21	; 33
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <__vector_11+0x236>
    2c9e:	4e c0       	rjmp	.+156    	; 0x2d3c <__vector_11+0x2d2>
    2ca0:	20 93 90 01 	sts	0x0190, r18
    2ca4:	e8 ee       	ldi	r30, 0xE8	; 232
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	80 ff       	sbrs	r24, 0
    2cac:	fd cf       	rjmp	.-6      	; 0x2ca8 <__vector_11+0x23e>
    2cae:	8e ef       	ldi	r24, 0xFE	; 254
    2cb0:	80 93 e8 00 	sts	0x00E8, r24
    2cb4:	4a c0       	rjmp	.+148    	; 0x2d4a <__vector_11+0x2e0>
    2cb6:	41 11       	cpse	r20, r1
    2cb8:	1a c0       	rjmp	.+52     	; 0x2cee <__vector_11+0x284>
    2cba:	e8 ee       	ldi	r30, 0xE8	; 232
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	80 ff       	sbrs	r24, 0
    2cc2:	fd cf       	rjmp	.-6      	; 0x2cbe <__vector_11+0x254>
    2cc4:	c2 38       	cpi	r28, 0x82	; 130
    2cc6:	51 f4       	brne	.+20     	; 0x2cdc <__vector_11+0x272>
    2cc8:	e9 ee       	ldi	r30, 0xE9	; 233
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	60 83       	st	Z, r22
    2cce:	80 91 eb 00 	lds	r24, 0x00EB
    2cd2:	85 fb       	bst	r24, 5
    2cd4:	88 27       	eor	r24, r24
    2cd6:	80 f9       	bld	r24, 0
    2cd8:	10 82       	st	Z, r1
    2cda:	01 c0       	rjmp	.+2      	; 0x2cde <__vector_11+0x274>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	e1 ef       	ldi	r30, 0xF1	; 241
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 83       	st	Z, r24
    2ce4:	10 82       	st	Z, r1
    2ce6:	8e ef       	ldi	r24, 0xFE	; 254
    2ce8:	80 93 e8 00 	sts	0x00E8, r24
    2cec:	2e c0       	rjmp	.+92     	; 0x2d4a <__vector_11+0x2e0>
    2cee:	84 2f       	mov	r24, r20
    2cf0:	8d 7f       	andi	r24, 0xFD	; 253
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	19 f5       	brne	.+70     	; 0x2d3c <__vector_11+0x2d2>
    2cf6:	c2 30       	cpi	r28, 0x02	; 2
    2cf8:	09 f5       	brne	.+66     	; 0x2d3c <__vector_11+0x2d2>
    2cfa:	23 2b       	or	r18, r19
    2cfc:	f9 f4       	brne	.+62     	; 0x2d3c <__vector_11+0x2d2>
    2cfe:	6f 77       	andi	r22, 0x7F	; 127
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	86 0f       	add	r24, r22
    2d04:	84 30       	cpi	r24, 0x04	; 4
    2d06:	d0 f4       	brcc	.+52     	; 0x2d3c <__vector_11+0x2d2>
    2d08:	8e ef       	ldi	r24, 0xFE	; 254
    2d0a:	80 93 e8 00 	sts	0x00E8, r24
    2d0e:	60 93 e9 00 	sts	0x00E9, r22
    2d12:	43 30       	cpi	r20, 0x03	; 3
    2d14:	21 f4       	brne	.+8      	; 0x2d1e <__vector_11+0x2b4>
    2d16:	81 e2       	ldi	r24, 0x21	; 33
    2d18:	80 93 eb 00 	sts	0x00EB, r24
    2d1c:	16 c0       	rjmp	.+44     	; 0x2d4a <__vector_11+0x2e0>
    2d1e:	89 e1       	ldi	r24, 0x19	; 25
    2d20:	80 93 eb 00 	sts	0x00EB, r24
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <__vector_11+0x2c4>
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	6a 95       	dec	r22
    2d30:	e2 f7       	brpl	.-8      	; 0x2d2a <__vector_11+0x2c0>
    2d32:	ea ee       	ldi	r30, 0xEA	; 234
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 83       	st	Z, r24
    2d38:	10 82       	st	Z, r1
    2d3a:	07 c0       	rjmp	.+14     	; 0x2d4a <__vector_11+0x2e0>
    2d3c:	81 e2       	ldi	r24, 0x21	; 33
    2d3e:	80 93 eb 00 	sts	0x00EB, r24
    2d42:	03 c0       	rjmp	.+6      	; 0x2d4a <__vector_11+0x2e0>
    2d44:	6c 93       	st	X, r22
    2d46:	51 11       	cpse	r21, r1
    2d48:	f6 ce       	rjmp	.-532    	; 0x2b36 <__vector_11+0xcc>
    2d4a:	ff 91       	pop	r31
    2d4c:	ef 91       	pop	r30
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	bf 91       	pop	r27
    2d54:	af 91       	pop	r26
    2d56:	9f 91       	pop	r25
    2d58:	8f 91       	pop	r24
    2d5a:	7f 91       	pop	r23
    2d5c:	6f 91       	pop	r22
    2d5e:	5f 91       	pop	r21
    2d60:	4f 91       	pop	r20
    2d62:	3f 91       	pop	r19
    2d64:	2f 91       	pop	r18
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	0f 90       	pop	r0
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	0f 90       	pop	r0
    2d70:	1f 90       	pop	r1
    2d72:	18 95       	reti

00002d74 <print_P>:
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	ec 01       	movw	r28, r24
    2d7c:	21 96       	adiw	r28, 0x01	; 1
    2d7e:	fc 01       	movw	r30, r24
    2d80:	14 91       	lpm	r17, Z
    2d82:	11 23       	and	r17, r17
    2d84:	69 f0       	breq	.+26     	; 0x2da0 <print_P+0x2c>
    2d86:	1a 30       	cpi	r17, 0x0A	; 10
    2d88:	19 f4       	brne	.+6      	; 0x2d90 <print_P+0x1c>
    2d8a:	8d e0       	ldi	r24, 0x0D	; 13
    2d8c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_char>
    2d90:	81 2f       	mov	r24, r17
    2d92:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_char>
    2d96:	fe 01       	movw	r30, r28
    2d98:	14 91       	lpm	r17, Z
    2d9a:	21 96       	adiw	r28, 0x01	; 1
    2d9c:	11 11       	cpse	r17, r1
    2d9e:	f3 cf       	rjmp	.-26     	; 0x2d86 <print_P+0x12>
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	08 95       	ret

00002da8 <m_usb_tx_int>:
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	27 97       	sbiw	r28, 0x07	; 7
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	8e 01       	movw	r16, r28
    2dc6:	0f 5f       	subi	r16, 0xFF	; 255
    2dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dca:	27 e0       	ldi	r18, 0x07	; 7
    2dcc:	f8 01       	movw	r30, r16
    2dce:	11 92       	st	Z+, r1
    2dd0:	2a 95       	dec	r18
    2dd2:	e9 f7       	brne	.-6      	; 0x2dce <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2dd4:	4a e0       	ldi	r20, 0x0A	; 10
    2dd6:	b8 01       	movw	r22, r16
    2dd8:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__itoa_ncheck>
    2ddc:	7e 01       	movw	r14, r28
    2dde:	f8 e0       	ldi	r31, 0x08	; 8
    2de0:	ef 0e       	add	r14, r31
    2de2:	f1 1c       	adc	r15, r1
    2de4:	f8 01       	movw	r30, r16
    2de6:	81 91       	ld	r24, Z+
    2de8:	8f 01       	movw	r16, r30
    2dea:	81 11       	cpse	r24, r1
    2dec:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_char>
    2df0:	0e 15       	cp	r16, r14
    2df2:	1f 05       	cpc	r17, r15
    2df4:	b9 f7       	brne	.-18     	; 0x2de4 <m_usb_tx_int+0x3c>
    2df6:	27 96       	adiw	r28, 0x07	; 7
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	08 95       	ret

00002e10 <twi_wait>:
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	ec eb       	ldi	r30, 0xBC	; 188
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	88 23       	and	r24, r24
    2e1c:	34 f0       	brlt	.+12     	; 0x2e2a <twi_wait+0x1a>
    2e1e:	2f 5f       	subi	r18, 0xFF	; 255
    2e20:	3f 4f       	sbci	r19, 0xFF	; 255
    2e22:	29 3e       	cpi	r18, 0xE9	; 233
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	38 07       	cpc	r19, r24
    2e28:	b9 f7       	brne	.-18     	; 0x2e18 <twi_wait+0x8>
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	28 3e       	cpi	r18, 0xE8	; 232
    2e2e:	33 40       	sbci	r19, 0x03	; 3
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <twi_wait+0x24>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	08 95       	ret

00002e36 <send_byte>:
    2e36:	80 93 bb 00 	sts	0x00BB, r24
    2e3a:	84 e8       	ldi	r24, 0x84	; 132
    2e3c:	80 93 bc 00 	sts	0x00BC, r24
    2e40:	0e 94 08 17 	call	0x2e10	; 0x2e10 <twi_wait>
    2e44:	88 23       	and	r24, r24
    2e46:	19 f0       	breq	.+6      	; 0x2e4e <send_byte+0x18>
    2e48:	80 91 b9 00 	lds	r24, 0x00B9
    2e4c:	88 7f       	andi	r24, 0xF8	; 248
    2e4e:	08 95       	ret

00002e50 <start_write>:
    2e50:	cf 93       	push	r28
    2e52:	c8 2f       	mov	r28, r24
    2e54:	94 ea       	ldi	r25, 0xA4	; 164
    2e56:	90 93 bc 00 	sts	0x00BC, r25
    2e5a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <twi_wait>
    2e5e:	88 23       	and	r24, r24
    2e60:	61 f0       	breq	.+24     	; 0x2e7a <start_write+0x2a>
    2e62:	8c 2f       	mov	r24, r28
    2e64:	88 0f       	add	r24, r24
    2e66:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2e6a:	80 32       	cpi	r24, 0x20	; 32
    2e6c:	29 f4       	brne	.+10     	; 0x2e78 <start_write+0x28>
    2e6e:	84 e9       	ldi	r24, 0x94	; 148
    2e70:	80 93 bc 00 	sts	0x00BC, r24
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	01 c0       	rjmp	.+2      	; 0x2e7a <start_write+0x2a>
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	cf 91       	pop	r28
    2e7c:	08 95       	ret

00002e7e <m_wii_open>:
    2e7e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <m_bus_init>
    2e82:	88 e5       	ldi	r24, 0x58	; 88
    2e84:	0e 94 28 17 	call	0x2e50	; 0x2e50 <start_write>
    2e88:	88 23       	and	r24, r24
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <m_wii_open+0x10>
    2e8c:	cd c0       	rjmp	.+410    	; 0x3028 <m_wii_open+0x1aa>
    2e8e:	80 e3       	ldi	r24, 0x30	; 48
    2e90:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2e94:	88 23       	and	r24, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <m_wii_open+0x1c>
    2e98:	c9 c0       	rjmp	.+402    	; 0x302c <m_wii_open+0x1ae>
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2ea0:	88 23       	and	r24, r24
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <m_wii_open+0x28>
    2ea4:	c5 c0       	rjmp	.+394    	; 0x3030 <m_wii_open+0x1b2>
    2ea6:	84 e9       	ldi	r24, 0x94	; 148
    2ea8:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2eac:	83 ec       	ldi	r24, 0xC3	; 195
    2eae:	99 e0       	ldi	r25, 0x09	; 9
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <m_wii_open+0x32>
    2eb4:	00 c0       	rjmp	.+0      	; 0x2eb6 <m_wii_open+0x38>
    2eb6:	00 00       	nop
    2eb8:	88 e5       	ldi	r24, 0x58	; 88
    2eba:	0e 94 28 17 	call	0x2e50	; 0x2e50 <start_write>
    2ebe:	88 23       	and	r24, r24
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <m_wii_open+0x46>
    2ec2:	b8 c0       	rjmp	.+368    	; 0x3034 <m_wii_open+0x1b6>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2eca:	88 23       	and	r24, r24
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <m_wii_open+0x52>
    2ece:	b4 c0       	rjmp	.+360    	; 0x3038 <m_wii_open+0x1ba>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2ed6:	88 23       	and	r24, r24
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <m_wii_open+0x5e>
    2eda:	b0 c0       	rjmp	.+352    	; 0x303c <m_wii_open+0x1be>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2ee2:	88 23       	and	r24, r24
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <m_wii_open+0x6a>
    2ee6:	ac c0       	rjmp	.+344    	; 0x3040 <m_wii_open+0x1c2>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2eee:	88 23       	and	r24, r24
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <m_wii_open+0x76>
    2ef2:	a8 c0       	rjmp	.+336    	; 0x3044 <m_wii_open+0x1c6>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2efa:	88 23       	and	r24, r24
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <m_wii_open+0x82>
    2efe:	a4 c0       	rjmp	.+328    	; 0x3048 <m_wii_open+0x1ca>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f06:	88 23       	and	r24, r24
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <m_wii_open+0x8e>
    2f0a:	a0 c0       	rjmp	.+320    	; 0x304c <m_wii_open+0x1ce>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f12:	88 23       	and	r24, r24
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <m_wii_open+0x9a>
    2f16:	9c c0       	rjmp	.+312    	; 0x3050 <m_wii_open+0x1d2>
    2f18:	80 e9       	ldi	r24, 0x90	; 144
    2f1a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f1e:	88 23       	and	r24, r24
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <m_wii_open+0xa6>
    2f22:	98 c0       	rjmp	.+304    	; 0x3054 <m_wii_open+0x1d6>
    2f24:	84 e9       	ldi	r24, 0x94	; 148
    2f26:	80 93 bc 00 	sts	0x00BC, r24
    2f2a:	83 ec       	ldi	r24, 0xC3	; 195
    2f2c:	99 e0       	ldi	r25, 0x09	; 9
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <m_wii_open+0xb0>
    2f32:	00 c0       	rjmp	.+0      	; 0x2f34 <m_wii_open+0xb6>
    2f34:	00 00       	nop
    2f36:	88 e5       	ldi	r24, 0x58	; 88
    2f38:	0e 94 28 17 	call	0x2e50	; 0x2e50 <start_write>
    2f3c:	88 23       	and	r24, r24
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <m_wii_open+0xc4>
    2f40:	8b c0       	rjmp	.+278    	; 0x3058 <m_wii_open+0x1da>
    2f42:	87 e0       	ldi	r24, 0x07	; 7
    2f44:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f48:	88 23       	and	r24, r24
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <m_wii_open+0xd0>
    2f4c:	87 c0       	rjmp	.+270    	; 0x305c <m_wii_open+0x1de>
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f54:	88 23       	and	r24, r24
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <m_wii_open+0xdc>
    2f58:	83 c0       	rjmp	.+262    	; 0x3060 <m_wii_open+0x1e2>
    2f5a:	81 e4       	ldi	r24, 0x41	; 65
    2f5c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f60:	88 23       	and	r24, r24
    2f62:	09 f4       	brne	.+2      	; 0x2f66 <m_wii_open+0xe8>
    2f64:	7f c0       	rjmp	.+254    	; 0x3064 <m_wii_open+0x1e6>
    2f66:	84 e9       	ldi	r24, 0x94	; 148
    2f68:	80 93 bc 00 	sts	0x00BC, r24
    2f6c:	83 ec       	ldi	r24, 0xC3	; 195
    2f6e:	99 e0       	ldi	r25, 0x09	; 9
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <m_wii_open+0xf2>
    2f74:	00 c0       	rjmp	.+0      	; 0x2f76 <m_wii_open+0xf8>
    2f76:	00 00       	nop
    2f78:	88 e5       	ldi	r24, 0x58	; 88
    2f7a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <start_write>
    2f7e:	88 23       	and	r24, r24
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <m_wii_open+0x106>
    2f82:	72 c0       	rjmp	.+228    	; 0x3068 <m_wii_open+0x1ea>
    2f84:	8a e1       	ldi	r24, 0x1A	; 26
    2f86:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f8a:	88 23       	and	r24, r24
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <m_wii_open+0x112>
    2f8e:	6e c0       	rjmp	.+220    	; 0x306c <m_wii_open+0x1ee>
    2f90:	80 e4       	ldi	r24, 0x40	; 64
    2f92:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2f96:	88 23       	and	r24, r24
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <m_wii_open+0x11e>
    2f9a:	6a c0       	rjmp	.+212    	; 0x3070 <m_wii_open+0x1f2>
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2fa2:	88 23       	and	r24, r24
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <m_wii_open+0x12a>
    2fa6:	66 c0       	rjmp	.+204    	; 0x3074 <m_wii_open+0x1f6>
    2fa8:	84 e9       	ldi	r24, 0x94	; 148
    2faa:	80 93 bc 00 	sts	0x00BC, r24
    2fae:	83 ec       	ldi	r24, 0xC3	; 195
    2fb0:	99 e0       	ldi	r25, 0x09	; 9
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <m_wii_open+0x134>
    2fb6:	00 c0       	rjmp	.+0      	; 0x2fb8 <m_wii_open+0x13a>
    2fb8:	00 00       	nop
    2fba:	88 e5       	ldi	r24, 0x58	; 88
    2fbc:	0e 94 28 17 	call	0x2e50	; 0x2e50 <start_write>
    2fc0:	88 23       	and	r24, r24
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <m_wii_open+0x148>
    2fc4:	59 c0       	rjmp	.+178    	; 0x3078 <m_wii_open+0x1fa>
    2fc6:	83 e3       	ldi	r24, 0x33	; 51
    2fc8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2fcc:	88 23       	and	r24, r24
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <m_wii_open+0x154>
    2fd0:	55 c0       	rjmp	.+170    	; 0x307c <m_wii_open+0x1fe>
    2fd2:	83 e0       	ldi	r24, 0x03	; 3
    2fd4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    2fd8:	88 23       	and	r24, r24
    2fda:	09 f4       	brne	.+2      	; 0x2fde <m_wii_open+0x160>
    2fdc:	51 c0       	rjmp	.+162    	; 0x3080 <m_wii_open+0x202>
    2fde:	84 e9       	ldi	r24, 0x94	; 148
    2fe0:	80 93 bc 00 	sts	0x00BC, r24
    2fe4:	83 ec       	ldi	r24, 0xC3	; 195
    2fe6:	99 e0       	ldi	r25, 0x09	; 9
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <m_wii_open+0x16a>
    2fec:	00 c0       	rjmp	.+0      	; 0x2fee <m_wii_open+0x170>
    2fee:	00 00       	nop
    2ff0:	88 e5       	ldi	r24, 0x58	; 88
    2ff2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <start_write>
    2ff6:	88 23       	and	r24, r24
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <m_wii_open+0x17e>
    2ffa:	44 c0       	rjmp	.+136    	; 0x3084 <m_wii_open+0x206>
    2ffc:	80 e3       	ldi	r24, 0x30	; 48
    2ffe:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    3002:	88 23       	and	r24, r24
    3004:	09 f4       	brne	.+2      	; 0x3008 <m_wii_open+0x18a>
    3006:	40 c0       	rjmp	.+128    	; 0x3088 <m_wii_open+0x20a>
    3008:	88 e0       	ldi	r24, 0x08	; 8
    300a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    300e:	88 23       	and	r24, r24
    3010:	e9 f1       	breq	.+122    	; 0x308c <m_wii_open+0x20e>
    3012:	84 e9       	ldi	r24, 0x94	; 148
    3014:	80 93 bc 00 	sts	0x00BC, r24
    3018:	83 ec       	ldi	r24, 0xC3	; 195
    301a:	99 e0       	ldi	r25, 0x09	; 9
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <m_wii_open+0x19e>
    3020:	00 c0       	rjmp	.+0      	; 0x3022 <m_wii_open+0x1a4>
    3022:	00 00       	nop
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	08 95       	ret
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	08 95       	ret
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	08 95       	ret
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	08 95       	ret
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	08 95       	ret
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	08 95       	ret
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	08 95       	ret
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	08 95       	ret
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	08 95       	ret
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	08 95       	ret
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	08 95       	ret
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	08 95       	ret
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	08 95       	ret
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	08 95       	ret
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	08 95       	ret
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	08 95       	ret
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	08 95       	ret
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	08 95       	ret
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	08 95       	ret
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	08 95       	ret
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	08 95       	ret
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	08 95       	ret
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	08 95       	ret
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	08 95       	ret
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	08 95       	ret
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	08 95       	ret
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	08 95       	ret

00003090 <start_read>:
    3090:	cf 93       	push	r28
    3092:	c8 2f       	mov	r28, r24
    3094:	94 ea       	ldi	r25, 0xA4	; 164
    3096:	90 93 bc 00 	sts	0x00BC, r25
    309a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <twi_wait>
    309e:	88 23       	and	r24, r24
    30a0:	69 f0       	breq	.+26     	; 0x30bc <start_read+0x2c>
    30a2:	8c 2f       	mov	r24, r28
    30a4:	88 0f       	add	r24, r24
    30a6:	8f 5f       	subi	r24, 0xFF	; 255
    30a8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    30ac:	88 34       	cpi	r24, 0x48	; 72
    30ae:	29 f4       	brne	.+10     	; 0x30ba <start_read+0x2a>
    30b0:	84 e9       	ldi	r24, 0x94	; 148
    30b2:	80 93 bc 00 	sts	0x00BC, r24
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <start_read+0x2c>
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	cf 91       	pop	r28
    30be:	08 95       	ret

000030c0 <m_wii_read>:
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	60 97       	sbiw	r28, 0x10	; 16
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	08 2f       	mov	r16, r24
    30de:	19 2f       	mov	r17, r25
    30e0:	fe 01       	movw	r30, r28
    30e2:	31 96       	adiw	r30, 0x01	; 1
    30e4:	80 e1       	ldi	r24, 0x10	; 16
    30e6:	df 01       	movw	r26, r30
    30e8:	1d 92       	st	X+, r1
    30ea:	8a 95       	dec	r24
    30ec:	e9 f7       	brne	.-6      	; 0x30e8 <m_wii_read+0x28>
    30ee:	88 e5       	ldi	r24, 0x58	; 88
    30f0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <start_write>
    30f4:	88 23       	and	r24, r24
    30f6:	09 f4       	brne	.+2      	; 0x30fa <m_wii_read+0x3a>
    30f8:	6e c0       	rjmp	.+220    	; 0x31d6 <m_wii_read+0x116>
    30fa:	86 e3       	ldi	r24, 0x36	; 54
    30fc:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <send_byte>
    3100:	88 23       	and	r24, r24
    3102:	09 f4       	brne	.+2      	; 0x3106 <m_wii_read+0x46>
    3104:	6a c0       	rjmp	.+212    	; 0x31da <m_wii_read+0x11a>
    3106:	84 e9       	ldi	r24, 0x94	; 148
    3108:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    310c:	b8 e0       	ldi	r27, 0x08	; 8
    310e:	ba 95       	dec	r27
    3110:	f1 f7       	brne	.-4      	; 0x310e <m_wii_read+0x4e>
    3112:	00 00       	nop
    3114:	88 e5       	ldi	r24, 0x58	; 88
    3116:	0e 94 48 18 	call	0x3090	; 0x3090 <start_read>
    311a:	88 23       	and	r24, r24
    311c:	09 f4       	brne	.+2      	; 0x3120 <m_wii_read+0x60>
    311e:	5f c0       	rjmp	.+190    	; 0x31de <m_wii_read+0x11e>
    3120:	be 01       	movw	r22, r28
    3122:	6f 5f       	subi	r22, 0xFF	; 255
    3124:	7f 4f       	sbci	r23, 0xFF	; 255
    3126:	9e 01       	movw	r18, r28
    3128:	20 5f       	subi	r18, 0xF0	; 240
    312a:	3f 4f       	sbci	r19, 0xFF	; 255
    312c:	ec eb       	ldi	r30, 0xBC	; 188
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	94 ec       	ldi	r25, 0xC4	; 196
    3132:	4b eb       	ldi	r20, 0xBB	; 187
    3134:	50 e0       	ldi	r21, 0x00	; 0
    3136:	90 83       	st	Z, r25
    3138:	80 81       	ld	r24, Z
    313a:	88 23       	and	r24, r24
    313c:	ec f7       	brge	.-6      	; 0x3138 <m_wii_read+0x78>
    313e:	da 01       	movw	r26, r20
    3140:	8c 91       	ld	r24, X
    3142:	db 01       	movw	r26, r22
    3144:	8d 93       	st	X+, r24
    3146:	bd 01       	movw	r22, r26
    3148:	a2 17       	cp	r26, r18
    314a:	b3 07       	cpc	r27, r19
    314c:	a1 f7       	brne	.-24     	; 0x3136 <m_wii_read+0x76>
    314e:	84 e8       	ldi	r24, 0x84	; 132
    3150:	80 93 bc 00 	sts	0x00BC, r24
    3154:	ec eb       	ldi	r30, 0xBC	; 188
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	88 23       	and	r24, r24
    315c:	ec f7       	brge	.-6      	; 0x3158 <m_wii_read+0x98>
    315e:	80 91 bb 00 	lds	r24, 0x00BB
    3162:	88 8b       	std	Y+16, r24	; 0x10
    3164:	84 e9       	ldi	r24, 0x94	; 148
    3166:	80 93 bc 00 	sts	0x00BC, r24
    316a:	fe 01       	movw	r30, r28
    316c:	34 96       	adiw	r30, 0x04	; 4
    316e:	e0 2e       	mov	r14, r16
    3170:	f1 2e       	mov	r15, r17
    3172:	80 81       	ld	r24, Z
    3174:	98 2f       	mov	r25, r24
    3176:	90 73       	andi	r25, 0x30	; 48
    3178:	af 01       	movw	r20, r30
    317a:	42 50       	subi	r20, 0x02	; 2
    317c:	51 09       	sbc	r21, r1
    317e:	da 01       	movw	r26, r20
    3180:	4c 91       	ld	r20, X
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	b0 e1       	ldi	r27, 0x10	; 16
    3186:	9b 9f       	mul	r25, r27
    3188:	40 0d       	add	r20, r0
    318a:	51 1d       	adc	r21, r1
    318c:	11 24       	eor	r1, r1
    318e:	d7 01       	movw	r26, r14
    3190:	4d 93       	st	X+, r20
    3192:	5c 93       	st	X, r21
    3194:	48 2f       	mov	r20, r24
    3196:	40 7c       	andi	r20, 0xC0	; 192
    3198:	50 e0       	ldi	r21, 0x00	; 0
    319a:	44 0f       	add	r20, r20
    319c:	55 1f       	adc	r21, r21
    319e:	44 0f       	add	r20, r20
    31a0:	55 1f       	adc	r21, r21
    31a2:	bf 01       	movw	r22, r30
    31a4:	61 50       	subi	r22, 0x01	; 1
    31a6:	71 09       	sbc	r23, r1
    31a8:	db 01       	movw	r26, r22
    31aa:	9c 91       	ld	r25, X
    31ac:	49 0f       	add	r20, r25
    31ae:	51 1d       	adc	r21, r1
    31b0:	d7 01       	movw	r26, r14
    31b2:	13 96       	adiw	r26, 0x03	; 3
    31b4:	5c 93       	st	X, r21
    31b6:	4e 93       	st	-X, r20
    31b8:	12 97       	sbiw	r26, 0x02	; 2
    31ba:	8f 70       	andi	r24, 0x0F	; 15
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	15 96       	adiw	r26, 0x05	; 5
    31c0:	9c 93       	st	X, r25
    31c2:	8e 93       	st	-X, r24
    31c4:	14 97       	sbiw	r26, 0x04	; 4
    31c6:	33 96       	adiw	r30, 0x03	; 3
    31c8:	b6 e0       	ldi	r27, 0x06	; 6
    31ca:	eb 0e       	add	r14, r27
    31cc:	f1 1c       	adc	r15, r1
    31ce:	2e 17       	cp	r18, r30
    31d0:	3f 07       	cpc	r19, r31
    31d2:	79 f6       	brne	.-98     	; 0x3172 <m_wii_read+0xb2>
    31d4:	06 c0       	rjmp	.+12     	; 0x31e2 <m_wii_read+0x122>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <m_wii_read+0x124>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	03 c0       	rjmp	.+6      	; 0x31e4 <m_wii_read+0x124>
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	01 c0       	rjmp	.+2      	; 0x31e4 <m_wii_read+0x124>
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	60 96       	adiw	r28, 0x10	; 16
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	ef 90       	pop	r14
    31fc:	08 95       	ret

000031fe <__vector_3>:
		m_wait(wait);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){	
    31fe:	1f 92       	push	r1
    3200:	0f 92       	push	r0
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	0f 92       	push	r0
    3206:	11 24       	eor	r1, r1
    3208:	2f 93       	push	r18
    320a:	3f 93       	push	r19
    320c:	4f 93       	push	r20
    320e:	5f 93       	push	r21
    3210:	6f 93       	push	r22
    3212:	7f 93       	push	r23
    3214:	8f 93       	push	r24
    3216:	9f 93       	push	r25
    3218:	af 93       	push	r26
    321a:	bf 93       	push	r27
    321c:	ef 93       	push	r30
    321e:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    3220:	6a e0       	ldi	r22, 0x0A	; 10
    3222:	8e ea       	ldi	r24, 0xAE	; 174
    3224:	91 e0       	ldi	r25, 0x01	; 1
    3226:	0e 94 c5 13 	call	0x278a	; 0x278a <m_rf_read>
	switch(buffer[0]){
    322a:	80 91 ae 01 	lds	r24, 0x01AE
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	fc 01       	movw	r30, r24
    3232:	e0 5a       	subi	r30, 0xA0	; 160
    3234:	f1 09       	sbc	r31, r1
    3236:	e4 32       	cpi	r30, 0x24	; 36
    3238:	f1 05       	cpc	r31, r1
    323a:	08 f0       	brcs	.+2      	; 0x323e <__vector_3+0x40>
    323c:	85 c1       	rjmp	.+778    	; 0x3548 <__vector_3+0x34a>
    323e:	e3 5a       	subi	r30, 0xA3	; 163
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    3246:	86 e8       	ldi	r24, 0x86	; 134
    3248:	93 e0       	ldi	r25, 0x03	; 3
    324a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			state = 1;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	90 93 bd 01 	sts	0x01BD, r25
    3256:	80 93 bc 01 	sts	0x01BC, r24
			break;
    325a:	76 c1       	rjmp	.+748    	; 0x3548 <__vector_3+0x34a>
		case 0xA1:
			m_usb_tx_string("Play \n");
    325c:	8f e7       	ldi	r24, 0x7F	; 127
    325e:	93 e0       	ldi	r25, 0x03	; 3
    3260:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			if(check(PINC, 7)){
    3264:	37 9b       	sbis	0x06, 7	; 6
    3266:	19 c0       	rjmp	.+50     	; 0x329a <__vector_3+0x9c>
				goal[0] = GateB;  // left gate
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	a9 eb       	ldi	r26, 0xB9	; 185
    326e:	b3 ec       	ldi	r27, 0xC3	; 195
    3270:	80 93 35 01 	sts	0x0135, r24
    3274:	90 93 36 01 	sts	0x0136, r25
    3278:	a0 93 37 01 	sts	0x0137, r26
    327c:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = -xline;  // left defense line
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	a8 e4       	ldi	r26, 0x48	; 72
    3286:	b3 ec       	ldi	r27, 0xC3	; 195
    3288:	80 93 2d 01 	sts	0x012D, r24
    328c:	90 93 2e 01 	sts	0x012E, r25
    3290:	a0 93 2f 01 	sts	0x012F, r26
    3294:	b0 93 30 01 	sts	0x0130, r27
    3298:	18 c0       	rjmp	.+48     	; 0x32ca <__vector_3+0xcc>
			}
			else{
				goal[0] = GateA;  // right gate
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	a9 eb       	ldi	r26, 0xB9	; 185
    32a0:	b3 e4       	ldi	r27, 0x43	; 67
    32a2:	80 93 35 01 	sts	0x0135, r24
    32a6:	90 93 36 01 	sts	0x0136, r25
    32aa:	a0 93 37 01 	sts	0x0137, r26
    32ae:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = xline;	// right defense line
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	a8 e4       	ldi	r26, 0x48	; 72
    32b8:	b3 e4       	ldi	r27, 0x43	; 67
    32ba:	80 93 2d 01 	sts	0x012D, r24
    32be:	90 93 2e 01 	sts	0x012E, r25
    32c2:	a0 93 2f 01 	sts	0x012F, r26
    32c6:	b0 93 30 01 	sts	0x0130, r27
			}
			if(check(PINC, 6)){
    32ca:	36 9b       	sbis	0x06, 6	; 6
    32cc:	03 c0       	rjmp	.+6      	; 0x32d4 <__vector_3+0xd6>
				set(PORTB, 2); // red light
    32ce:	2a 9a       	sbi	0x05, 2	; 5
				clear(PORTB, 3);
    32d0:	2b 98       	cbi	0x05, 3	; 5
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <__vector_3+0xda>
			}
			else{
				set(PORTB, 3); // blue light
    32d4:	2b 9a       	sbi	0x05, 3	; 5
				clear(PORTB, 2);
    32d6:	2a 98       	cbi	0x05, 2	; 5
			}
			state = 2; 
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	90 93 bd 01 	sts	0x01BD, r25
    32e0:	80 93 bc 01 	sts	0x01BC, r24
			findPuck(state);
    32e4:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
    32e8:	2a e9       	ldi	r18, 0x9A	; 154
    32ea:	31 e0       	ldi	r19, 0x01	; 1
    32ec:	42 ea       	ldi	r20, 0xA2	; 162
    32ee:	51 e0       	ldi	r21, 0x01	; 1
    32f0:	65 e3       	ldi	r22, 0x35	; 53
    32f2:	71 e0       	ldi	r23, 0x01	; 1
    32f4:	8c eb       	ldi	r24, 0xBC	; 188
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	0e 94 24 0c 	call	0x1848	; 0x1848 <localization>
			deterState(&state);
    32fc:	8c eb       	ldi	r24, 0xBC	; 188
    32fe:	91 e0       	ldi	r25, 0x01	; 1
    3300:	0e 94 3d 07 	call	0xe7a	; 0xe7a <deterState>
			break;
    3304:	21 c1       	rjmp	.+578    	; 0x3548 <__vector_3+0x34a>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    3306:	87 e7       	ldi	r24, 0x77	; 119
    3308:	93 e0       	ldi	r25, 0x03	; 3
    330a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			scoreR = buffer[1];
    330e:	80 91 af 01 	lds	r24, 0x01AF
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	90 93 ad 01 	sts	0x01AD, r25
    3318:	80 93 ac 01 	sts	0x01AC, r24
			scoreB = buffer[2];
    331c:	80 91 b0 01 	lds	r24, 0x01B0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	90 93 ab 01 	sts	0x01AB, r25
    3326:	80 93 aa 01 	sts	0x01AA, r24
			OCR1B = 0;
    332a:	10 92 8b 00 	sts	0x008B, r1
    332e:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3332:	10 92 8d 00 	sts	0x008D, r1
    3336:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    333a:	10 92 bd 01 	sts	0x01BD, r1
    333e:	10 92 bc 01 	sts	0x01BC, r1
			break;
    3342:	02 c1       	rjmp	.+516    	; 0x3548 <__vector_3+0x34a>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    3344:	8f e6       	ldi	r24, 0x6F	; 111
    3346:	93 e0       	ldi	r25, 0x03	; 3
    3348:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			scoreR = buffer[1];
    334c:	80 91 af 01 	lds	r24, 0x01AF
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	90 93 ad 01 	sts	0x01AD, r25
    3356:	80 93 ac 01 	sts	0x01AC, r24
			scoreB = buffer[2];
    335a:	80 91 b0 01 	lds	r24, 0x01B0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	90 93 ab 01 	sts	0x01AB, r25
    3364:	80 93 aa 01 	sts	0x01AA, r24
			OCR1B = 0;
    3368:	10 92 8b 00 	sts	0x008B, r1
    336c:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3370:	10 92 8d 00 	sts	0x008D, r1
    3374:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    3378:	10 92 bd 01 	sts	0x01BD, r1
    337c:	10 92 bc 01 	sts	0x01BC, r1
			break;
    3380:	e3 c0       	rjmp	.+454    	; 0x3548 <__vector_3+0x34a>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    3382:	88 e6       	ldi	r24, 0x68	; 104
    3384:	93 e0       	ldi	r25, 0x03	; 3
    3386:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			state = 0;
    338a:	10 92 bd 01 	sts	0x01BD, r1
    338e:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    3392:	10 92 8b 00 	sts	0x008B, r1
    3396:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    339a:	10 92 8d 00 	sts	0x008D, r1
    339e:	10 92 8c 00 	sts	0x008C, r1
			break;
    33a2:	d2 c0       	rjmp	.+420    	; 0x3548 <__vector_3+0x34a>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    33a4:	8e e5       	ldi	r24, 0x5E	; 94
    33a6:	93 e0       	ldi	r25, 0x03	; 3
    33a8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			if(check(PINC, 6)){
    33ac:	36 9b       	sbis	0x06, 6	; 6
    33ae:	19 c0       	rjmp	.+50     	; 0x33e2 <__vector_3+0x1e4>
				goal[0] = GateB;  // left gate
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	a9 eb       	ldi	r26, 0xB9	; 185
    33b6:	b3 ec       	ldi	r27, 0xC3	; 195
    33b8:	80 93 35 01 	sts	0x0135, r24
    33bc:	90 93 36 01 	sts	0x0136, r25
    33c0:	a0 93 37 01 	sts	0x0137, r26
    33c4:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = -xline;  // left defense line
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	a8 e4       	ldi	r26, 0x48	; 72
    33ce:	b3 ec       	ldi	r27, 0xC3	; 195
    33d0:	80 93 2d 01 	sts	0x012D, r24
    33d4:	90 93 2e 01 	sts	0x012E, r25
    33d8:	a0 93 2f 01 	sts	0x012F, r26
    33dc:	b0 93 30 01 	sts	0x0130, r27
    33e0:	18 c0       	rjmp	.+48     	; 0x3412 <__vector_3+0x214>
			}
			else{
				goal[0] = GateA;  // right gate
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	a9 eb       	ldi	r26, 0xB9	; 185
    33e8:	b3 e4       	ldi	r27, 0x43	; 67
    33ea:	80 93 35 01 	sts	0x0135, r24
    33ee:	90 93 36 01 	sts	0x0136, r25
    33f2:	a0 93 37 01 	sts	0x0137, r26
    33f6:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = xline;	// right defense line
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	a8 e4       	ldi	r26, 0x48	; 72
    3400:	b3 e4       	ldi	r27, 0x43	; 67
    3402:	80 93 2d 01 	sts	0x012D, r24
    3406:	90 93 2e 01 	sts	0x012E, r25
    340a:	a0 93 2f 01 	sts	0x012F, r26
    340e:	b0 93 30 01 	sts	0x0130, r27
			}

			state = 0;
    3412:	10 92 bd 01 	sts	0x01BD, r1
    3416:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    341a:	10 92 8b 00 	sts	0x008B, r1
    341e:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;			
    3422:	10 92 8d 00 	sts	0x008D, r1
    3426:	10 92 8c 00 	sts	0x008C, r1
			break;
    342a:	8e c0       	rjmp	.+284    	; 0x3548 <__vector_3+0x34a>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    342c:	83 e5       	ldi	r24, 0x53	; 83
    342e:	93 e0       	ldi	r25, 0x03	; 3
    3430:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
			state = 0;
    3434:	10 92 bd 01 	sts	0x01BD, r1
    3438:	10 92 bc 01 	sts	0x01BC, r1
			OCR1B = 0;
    343c:	10 92 8b 00 	sts	0x008B, r1
    3440:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3444:	10 92 8d 00 	sts	0x008D, r1
    3448:	10 92 8c 00 	sts	0x008C, r1
			break;
    344c:	7d c0       	rjmp	.+250    	; 0x3548 <__vector_3+0x34a>
// 			m_usb_tx_string("Its location is: ");
// 			m_usb_tx_int(sender_loc[0]);
// 			m_usb_tx_string("		y:");
// 			m_usb_tx_int(sender_loc[1]);
// 			m_usb_tx_string("\n");
			state = 2;
    344e:	82 e0       	ldi	r24, 0x02	; 2
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	90 93 bd 01 	sts	0x01BD, r25
    3456:	80 93 bc 01 	sts	0x01BC, r24
			break;
    345a:	76 c0       	rjmp	.+236    	; 0x3548 <__vector_3+0x34a>
		case 0xC2: // teammates got the puck, extract No. and location
			senderNo = buffer[1]; // buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
    345c:	80 91 af 01 	lds	r24, 0x01AF
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	90 93 99 01 	sts	0x0199, r25
    3466:	80 93 98 01 	sts	0x0198, r24
			sender_loc[0] = *(int*)&buffer[2];
    346a:	ee ea       	ldi	r30, 0xAE	; 174
    346c:	f1 e0       	ldi	r31, 0x01	; 1
    346e:	22 81       	ldd	r18, Z+2	; 0x02
    3470:	33 81       	ldd	r19, Z+3	; 0x03
    3472:	30 93 95 01 	sts	0x0195, r19
    3476:	20 93 94 01 	sts	0x0194, r18
			sender_loc[1] = *(int*)&buffer[4];
    347a:	24 81       	ldd	r18, Z+4	; 0x04
    347c:	35 81       	ldd	r19, Z+5	; 0x05
    347e:	30 93 97 01 	sts	0x0197, r19
    3482:	20 93 96 01 	sts	0x0196, r18
// 			m_usb_tx_string("Its location is: ");
// 			m_usb_tx_int(sender_loc[0]);
// 			m_usb_tx_string("		y:");
// 			m_usb_tx_int(sender_loc[1]);
// 			m_usb_tx_string("\n");
			if (senderNo == 3){
    3486:	03 97       	sbiw	r24, 0x03	; 3
    3488:	e1 f4       	brne	.+56     	; 0x34c2 <__vector_3+0x2c4>
				if(check(PINC, 7)){
    348a:	37 9b       	sbis	0x06, 7	; 6
    348c:	0d c0       	rjmp	.+26     	; 0x34a8 <__vector_3+0x2aa>
					desPos[0] = GateA - 70;  // right gate
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	a6 e9       	ldi	r26, 0x96	; 150
    3494:	b3 e4       	ldi	r27, 0x43	; 67
    3496:	80 93 2d 01 	sts	0x012D, r24
    349a:	90 93 2e 01 	sts	0x012E, r25
    349e:	a0 93 2f 01 	sts	0x012F, r26
    34a2:	b0 93 30 01 	sts	0x0130, r27
    34a6:	28 c0       	rjmp	.+80     	; 0x34f8 <__vector_3+0x2fa>
				}
				else{
					desPos[0] = GateB + 70;  // left gate
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a6 e9       	ldi	r26, 0x96	; 150
    34ae:	b3 ec       	ldi	r27, 0xC3	; 195
    34b0:	80 93 2d 01 	sts	0x012D, r24
    34b4:	90 93 2e 01 	sts	0x012E, r25
    34b8:	a0 93 2f 01 	sts	0x012F, r26
    34bc:	b0 93 30 01 	sts	0x0130, r27
    34c0:	1b c0       	rjmp	.+54     	; 0x34f8 <__vector_3+0x2fa>
				}
			} 
			else{
				if(check(PINC, 7)){
    34c2:	37 9b       	sbis	0x06, 7	; 6
    34c4:	0d c0       	rjmp	.+26     	; 0x34e0 <__vector_3+0x2e2>
					desPos[0] = xline;  // right defense line
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	a8 e4       	ldi	r26, 0x48	; 72
    34cc:	b3 e4       	ldi	r27, 0x43	; 67
    34ce:	80 93 2d 01 	sts	0x012D, r24
    34d2:	90 93 2e 01 	sts	0x012E, r25
    34d6:	a0 93 2f 01 	sts	0x012F, r26
    34da:	b0 93 30 01 	sts	0x0130, r27
    34de:	0c c0       	rjmp	.+24     	; 0x34f8 <__vector_3+0x2fa>
				}
				else{
					desPos[0] = -xline;  // left defense line
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	a8 e4       	ldi	r26, 0x48	; 72
    34e6:	b3 ec       	ldi	r27, 0xC3	; 195
    34e8:	80 93 2d 01 	sts	0x012D, r24
    34ec:	90 93 2e 01 	sts	0x012E, r25
    34f0:	a0 93 2f 01 	sts	0x012F, r26
    34f4:	b0 93 30 01 	sts	0x0130, r27
				}
			}
			state = 4;
    34f8:	84 e0       	ldi	r24, 0x04	; 4
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	90 93 bd 01 	sts	0x01BD, r25
    3500:	80 93 bc 01 	sts	0x01BC, r24
			break;
    3504:	21 c0       	rjmp	.+66     	; 0x3548 <__vector_3+0x34a>
		case 0xC3:
			if(check(PINC, 7)){
    3506:	37 9b       	sbis	0x06, 7	; 6
    3508:	0d c0       	rjmp	.+26     	; 0x3524 <__vector_3+0x326>
				desPos[0] = GateA - 70;  // right gate
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	a6 e9       	ldi	r26, 0x96	; 150
    3510:	b3 e4       	ldi	r27, 0x43	; 67
    3512:	80 93 2d 01 	sts	0x012D, r24
    3516:	90 93 2e 01 	sts	0x012E, r25
    351a:	a0 93 2f 01 	sts	0x012F, r26
    351e:	b0 93 30 01 	sts	0x0130, r27
    3522:	0c c0       	rjmp	.+24     	; 0x353c <__vector_3+0x33e>
			}
			else{
				desPos[0] = GateB + 70;  // left gate
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	a6 e9       	ldi	r26, 0x96	; 150
    352a:	b3 ec       	ldi	r27, 0xC3	; 195
    352c:	80 93 2d 01 	sts	0x012D, r24
    3530:	90 93 2e 01 	sts	0x012E, r25
    3534:	a0 93 2f 01 	sts	0x012F, r26
    3538:	b0 93 30 01 	sts	0x0130, r27
			}
			state = 5;
    353c:	85 e0       	ldi	r24, 0x05	; 5
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	90 93 bd 01 	sts	0x01BD, r25
    3544:	80 93 bc 01 	sts	0x01BC, r24
		default:
			break;
	}
}
    3548:	ff 91       	pop	r31
    354a:	ef 91       	pop	r30
    354c:	bf 91       	pop	r27
    354e:	af 91       	pop	r26
    3550:	9f 91       	pop	r25
    3552:	8f 91       	pop	r24
    3554:	7f 91       	pop	r23
    3556:	6f 91       	pop	r22
    3558:	5f 91       	pop	r21
    355a:	4f 91       	pop	r20
    355c:	3f 91       	pop	r19
    355e:	2f 91       	pop	r18
    3560:	0f 90       	pop	r0
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	0f 90       	pop	r0
    3566:	1f 90       	pop	r1
    3568:	18 95       	reti

0000356a <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    356a:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    356c:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    356e:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    3570:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
    3572:	80 e2       	ldi	r24, 0x20	; 32
    3574:	93 e0       	ldi	r25, 0x03	; 3
    3576:	90 93 89 00 	sts	0x0089, r25
    357a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    357e:	10 92 8b 00 	sts	0x008B, r1
    3582:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
    3586:	10 92 8d 00 	sts	0x008D, r1
    358a:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    358e:	a1 e8       	ldi	r26, 0x81	; 129
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	8c 91       	ld	r24, X
    3594:	80 61       	ori	r24, 0x10	; 16
    3596:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    3598:	8c 91       	ld	r24, X
    359a:	88 60       	ori	r24, 0x08	; 8
    359c:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    359e:	e0 e8       	ldi	r30, 0x80	; 128
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	82 60       	ori	r24, 0x02	; 2
    35a6:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    35a8:	80 81       	ld	r24, Z
    35aa:	81 60       	ori	r24, 0x01	; 1
    35ac:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    35ae:	80 81       	ld	r24, Z
    35b0:	80 62       	ori	r24, 0x20	; 32
    35b2:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    35b4:	80 81       	ld	r24, Z
    35b6:	8f 7e       	andi	r24, 0xEF	; 239
    35b8:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    35ba:	80 81       	ld	r24, Z
    35bc:	88 60       	ori	r24, 0x08	; 8
    35be:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    35c0:	80 81       	ld	r24, Z
    35c2:	8b 7f       	andi	r24, 0xFB	; 251
    35c4:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    35c6:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    35c8:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    35ca:	8c 91       	ld	r24, X
    35cc:	8b 7f       	andi	r24, 0xFB	; 251
    35ce:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    35d0:	8c 91       	ld	r24, X
    35d2:	8d 7f       	andi	r24, 0xFD	; 253
    35d4:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    35d6:	8c 91       	ld	r24, X
    35d8:	81 60       	ori	r24, 0x01	; 1
    35da:	8c 93       	st	X, r24
    35dc:	08 95       	ret

000035de <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    35de:	e1 e6       	ldi	r30, 0x61	; 97
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 e8       	ldi	r24, 0x80	; 128
    35e4:	80 83       	st	Z, r24
    35e6:	10 82       	st	Z, r1
	
	state = 2;
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	90 93 bd 01 	sts	0x01BD, r25
    35f0:	80 93 bc 01 	sts	0x01BC, r24
	
	m_usb_init();
    35f4:	0e 94 83 14 	call	0x2906	; 0x2906 <m_usb_init>
	
	m_wii_open();
    35f8:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <m_wii_open>
	//m_red(ON);
	//while(!m_wii_open());
	//m_red(OFF);
	
	m_red(ON);
    35fc:	6e 9a       	sbi	0x0d, 6	; 13
    35fe:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    3600:	0e 94 5e 13 	call	0x26bc	; 0x26bc <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    3604:	4a e0       	ldi	r20, 0x0A	; 10
    3606:	6c e0       	ldi	r22, 0x0C	; 12
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	0e 94 6f 13 	call	0x26de	; 0x26de <m_rf_open>
	m_red(OFF);
    360e:	6e 9a       	sbi	0x0d, 6	; 13
    3610:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    3612:	0e 94 b5 1a 	call	0x356a	; 0x356a <init_timer>
	init_ADC();
    3616:	0e 94 91 02 	call	0x522	; 0x522 <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    361a:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
    361c:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
    361e:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
    3620:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    3622:	23 9a       	sbi	0x04, 3	; 4

	if(check(PINC, 7)){
    3624:	37 9b       	sbis	0x06, 7	; 6
    3626:	19 c0       	rjmp	.+50     	; 0x365a <main+0x7c>
		goal[0] = GateB;  // left gate
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	a9 eb       	ldi	r26, 0xB9	; 185
    362e:	b3 ec       	ldi	r27, 0xC3	; 195
    3630:	80 93 35 01 	sts	0x0135, r24
    3634:	90 93 36 01 	sts	0x0136, r25
    3638:	a0 93 37 01 	sts	0x0137, r26
    363c:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = xline;  // right defense line
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a8 e4       	ldi	r26, 0x48	; 72
    3646:	b3 e4       	ldi	r27, 0x43	; 67
    3648:	80 93 2d 01 	sts	0x012D, r24
    364c:	90 93 2e 01 	sts	0x012E, r25
    3650:	a0 93 2f 01 	sts	0x012F, r26
    3654:	b0 93 30 01 	sts	0x0130, r27
    3658:	18 c0       	rjmp	.+48     	; 0x368a <main+0xac>
	}
	else{
		goal[0] = GateA;  // right gate
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	a9 eb       	ldi	r26, 0xB9	; 185
    3660:	b3 e4       	ldi	r27, 0x43	; 67
    3662:	80 93 35 01 	sts	0x0135, r24
    3666:	90 93 36 01 	sts	0x0136, r25
    366a:	a0 93 37 01 	sts	0x0137, r26
    366e:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = -xline;	// left defense line
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a8 e4       	ldi	r26, 0x48	; 72
    3678:	b3 ec       	ldi	r27, 0xC3	; 195
    367a:	80 93 2d 01 	sts	0x012D, r24
    367e:	90 93 2e 01 	sts	0x012E, r25
    3682:	a0 93 2f 01 	sts	0x012F, r26
    3686:	b0 93 30 01 	sts	0x0130, r27
	}
	if(check(PINC, 6)){
    368a:	36 9b       	sbis	0x06, 6	; 6
    368c:	1c c0       	rjmp	.+56     	; 0x36c6 <main+0xe8>
		set(PORTB, 2); // red light
    368e:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
    3690:	2b 98       	cbi	0x05, 3	; 5
				}
				m_red(TOGGLE);
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    3692:	68 94       	set
    3694:	bb 24       	eor	r11, r11
    3696:	b6 f8       	bld	r11, 6
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
				m_usb_tx_string("\n");
				break;
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    3698:	68 94       	set
    369a:	aa 24       	eor	r10, r10
    369c:	a2 f8       	bld	r10, 2
				m_red(TOGGLE);
				localization(&state, &desPos[0], &c_wii[0], &dir[0]);
				m_usb_tx_string("Desire Position = ");
				m_usb_tx_int(desPos[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(desPos[1]);
    369e:	0f 2e       	mov	r0, r31
    36a0:	f1 e3       	ldi	r31, 0x31	; 49
    36a2:	cf 2e       	mov	r12, r31
    36a4:	f1 e0       	ldi	r31, 0x01	; 1
    36a6:	df 2e       	mov	r13, r31
    36a8:	f0 2d       	mov	r31, r0
					findPuck(state);
				}
				m_usb_tx_string("goal = ");
				m_usb_tx_int(goal[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
    36aa:	0f 2e       	mov	r0, r31
    36ac:	f9 e3       	ldi	r31, 0x39	; 57
    36ae:	ef 2e       	mov	r14, r31
    36b0:	f1 e0       	ldi	r31, 0x01	; 1
    36b2:	ff 2e       	mov	r15, r31
    36b4:	f0 2d       	mov	r31, r0
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
    36b6:	0a e8       	ldi	r16, 0x8A	; 138
    36b8:	10 e0       	ldi	r17, 0x00	; 0
				OCR1C = 0;
    36ba:	cc e8       	ldi	r28, 0x8C	; 140
    36bc:	d0 e0       	ldi	r29, 0x00	; 0
				if(check(PINC, 6)){
					toggle(PORTB, 2); // blue Red
					clear(PORTB, 3);
				}
				else{
					toggle(PORTB, 3); // red blue
    36be:	68 94       	set
    36c0:	99 24       	eor	r9, r9
    36c2:	93 f8       	bld	r9, 3
    36c4:	03 c0       	rjmp	.+6      	; 0x36cc <main+0xee>
	if(check(PINC, 6)){
		set(PORTB, 2); // red light
		clear(PORTB, 3);
	}
	else{
		set(PORTB, 3); // blue light
    36c6:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
    36c8:	2a 98       	cbi	0x05, 2	; 5
    36ca:	e3 cf       	rjmp	.-58     	; 0x3692 <main+0xb4>
	}
	while(1)
	{	
		m_usb_tx_string("state: ");
    36cc:	87 e0       	ldi	r24, 0x07	; 7
    36ce:	94 e0       	ldi	r25, 0x04	; 4
    36d0:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		m_usb_tx_int(state);
    36d4:	80 91 bc 01 	lds	r24, 0x01BC
    36d8:	90 91 bd 01 	lds	r25, 0x01BD
    36dc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    36e0:	85 e0       	ldi	r24, 0x05	; 5
    36e2:	94 e0       	ldi	r25, 0x04	; 4
    36e4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		switch(state){
    36e8:	80 91 bc 01 	lds	r24, 0x01BC
    36ec:	90 91 bd 01 	lds	r25, 0x01BD
    36f0:	82 30       	cpi	r24, 0x02	; 2
    36f2:	91 05       	cpc	r25, r1
    36f4:	79 f1       	breq	.+94     	; 0x3754 <main+0x176>
    36f6:	2c f4       	brge	.+10     	; 0x3702 <main+0x124>
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	69 f0       	breq	.+26     	; 0x3716 <main+0x138>
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	89 f0       	breq	.+34     	; 0x3722 <main+0x144>
    3700:	10 c1       	rjmp	.+544    	; 0x3922 <main+0x344>
    3702:	84 30       	cpi	r24, 0x04	; 4
    3704:	91 05       	cpc	r25, r1
    3706:	09 f4       	brne	.+2      	; 0x370a <main+0x12c>
    3708:	a5 c0       	rjmp	.+330    	; 0x3854 <main+0x276>
    370a:	0c f4       	brge	.+2      	; 0x370e <main+0x130>
    370c:	52 c0       	rjmp	.+164    	; 0x37b2 <main+0x1d4>
    370e:	05 97       	sbiw	r24, 0x05	; 5
    3710:	09 f4       	brne	.+2      	; 0x3714 <main+0x136>
    3712:	d6 c0       	rjmp	.+428    	; 0x38c0 <main+0x2e2>
    3714:	06 c1       	rjmp	.+524    	; 0x3922 <main+0x344>
			case 0:
				// stop
				OCR1B = 0;
    3716:	f8 01       	movw	r30, r16
    3718:	11 82       	std	Z+1, r1	; 0x01
    371a:	10 82       	st	Z, r1
				OCR1C = 0;
    371c:	19 82       	std	Y+1, r1	; 0x01
    371e:	18 82       	st	Y, r1
				break;
    3720:	00 c1       	rjmp	.+512    	; 0x3922 <main+0x344>
			case 1:		// comm test, flash a LED
				if(check(PINC, 6)){
    3722:	36 9b       	sbis	0x06, 6	; 6
    3724:	05 c0       	rjmp	.+10     	; 0x3730 <main+0x152>
					toggle(PORTB, 2); // blue Red
    3726:	85 b1       	in	r24, 0x05	; 5
    3728:	8a 25       	eor	r24, r10
    372a:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 3);
    372c:	2b 98       	cbi	0x05, 3	; 5
    372e:	04 c0       	rjmp	.+8      	; 0x3738 <main+0x15a>
				}
				else{
					toggle(PORTB, 3); // red blue
    3730:	85 b1       	in	r24, 0x05	; 5
    3732:	89 25       	eor	r24, r9
    3734:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 2);
    3736:	2a 98       	cbi	0x05, 2	; 5
				}
				m_red(TOGGLE);
    3738:	6e 9a       	sbi	0x0d, 6	; 13
    373a:	8e b1       	in	r24, 0x0e	; 14
    373c:	8b 25       	eor	r24, r11
    373e:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3740:	ff e3       	ldi	r31, 0x3F	; 63
    3742:	2d e0       	ldi	r18, 0x0D	; 13
    3744:	83 e0       	ldi	r24, 0x03	; 3
    3746:	f1 50       	subi	r31, 0x01	; 1
    3748:	20 40       	sbci	r18, 0x00	; 0
    374a:	80 40       	sbci	r24, 0x00	; 0
    374c:	e1 f7       	brne	.-8      	; 0x3746 <main+0x168>
    374e:	00 c0       	rjmp	.+0      	; 0x3750 <main+0x172>
    3750:	00 00       	nop
    3752:	e7 c0       	rjmp	.+462    	; 0x3922 <main+0x344>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    3754:	6e 9a       	sbi	0x0d, 6	; 13
    3756:	8e b1       	in	r24, 0x0e	; 14
    3758:	8b 25       	eor	r24, r11
    375a:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    375c:	6a 9a       	sbi	0x0d, 2	; 13
    375e:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    3760:	80 91 bc 01 	lds	r24, 0x01BC
    3764:	90 91 bd 01 	lds	r25, 0x01BD
    3768:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
				deterState(&state);
    376c:	8c eb       	ldi	r24, 0xBC	; 188
    376e:	91 e0       	ldi	r25, 0x01	; 1
    3770:	0e 94 3d 07 	call	0xe7a	; 0xe7a <deterState>
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    3774:	2a e9       	ldi	r18, 0x9A	; 154
    3776:	31 e0       	ldi	r19, 0x01	; 1
    3778:	42 ea       	ldi	r20, 0xA2	; 162
    377a:	51 e0       	ldi	r21, 0x01	; 1
    377c:	65 e3       	ldi	r22, 0x35	; 53
    377e:	71 e0       	ldi	r23, 0x01	; 1
    3780:	8c eb       	ldi	r24, 0xBC	; 188
    3782:	91 e0       	ldi	r25, 0x01	; 1
    3784:	0e 94 24 0c 	call	0x1848	; 0x1848 <localization>
				if(state != 2){
    3788:	80 91 bc 01 	lds	r24, 0x01BC
    378c:	90 91 bd 01 	lds	r25, 0x01BD
    3790:	82 30       	cpi	r24, 0x02	; 2
    3792:	91 05       	cpc	r25, r1
    3794:	09 f4       	brne	.+2      	; 0x3798 <main+0x1ba>
    3796:	c5 c0       	rjmp	.+394    	; 0x3922 <main+0x344>
					send_message(state, No, &buffer[0], &c_wii[0]);
    3798:	22 ea       	ldi	r18, 0xA2	; 162
    379a:	31 e0       	ldi	r19, 0x01	; 1
    379c:	4e ea       	ldi	r20, 0xAE	; 174
    379e:	51 e0       	ldi	r21, 0x01	; 1
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	0e 94 27 02 	call	0x44e	; 0x44e <send_message>
					m_usb_tx_string("sent found messsage.\n");
    37a8:	8f ee       	ldi	r24, 0xEF	; 239
    37aa:	93 e0       	ldi	r25, 0x03	; 3
    37ac:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
    37b0:	b8 c0       	rjmp	.+368    	; 0x3922 <main+0x344>
				}
				break;
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    37b2:	6a 9a       	sbi	0x0d, 2	; 13
    37b4:	8e b1       	in	r24, 0x0e	; 14
    37b6:	8a 25       	eor	r24, r10
    37b8:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    37ba:	6e 9a       	sbi	0x0d, 6	; 13
    37bc:	76 9a       	sbi	0x0e, 6	; 14
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    37be:	2a e9       	ldi	r18, 0x9A	; 154
    37c0:	31 e0       	ldi	r19, 0x01	; 1
    37c2:	42 ea       	ldi	r20, 0xA2	; 162
    37c4:	51 e0       	ldi	r21, 0x01	; 1
    37c6:	65 e3       	ldi	r22, 0x35	; 53
    37c8:	71 e0       	ldi	r23, 0x01	; 1
    37ca:	8c eb       	ldi	r24, 0xBC	; 188
    37cc:	91 e0       	ldi	r25, 0x01	; 1
    37ce:	0e 94 24 0c 	call	0x1848	; 0x1848 <localization>
				deterState(&state);
    37d2:	8c eb       	ldi	r24, 0xBC	; 188
    37d4:	91 e0       	ldi	r25, 0x01	; 1
    37d6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <deterState>
				if(state != 3){
    37da:	80 91 bc 01 	lds	r24, 0x01BC
    37de:	90 91 bd 01 	lds	r25, 0x01BD
    37e2:	83 30       	cpi	r24, 0x03	; 3
    37e4:	91 05       	cpc	r25, r1
    37e6:	91 f0       	breq	.+36     	; 0x380c <main+0x22e>
					send_message(state, No, &buffer[0], &c_wii[0]);
    37e8:	22 ea       	ldi	r18, 0xA2	; 162
    37ea:	31 e0       	ldi	r19, 0x01	; 1
    37ec:	4e ea       	ldi	r20, 0xAE	; 174
    37ee:	51 e0       	ldi	r21, 0x01	; 1
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	0e 94 27 02 	call	0x44e	; 0x44e <send_message>
					m_usb_tx_string("sent lost messsage.\n");
    37f8:	8a ed       	ldi	r24, 0xDA	; 218
    37fa:	93 e0       	ldi	r25, 0x03	; 3
    37fc:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
					findPuck(state);
    3800:	80 91 bc 01 	lds	r24, 0x01BC
    3804:	90 91 bd 01 	lds	r25, 0x01BD
    3808:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
				}
				m_usb_tx_string("goal = ");
    380c:	82 ed       	ldi	r24, 0xD2	; 210
    380e:	93 e0       	ldi	r25, 0x03	; 3
    3810:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				m_usb_tx_int(goal[0]);
    3814:	60 91 35 01 	lds	r22, 0x0135
    3818:	70 91 36 01 	lds	r23, 0x0136
    381c:	80 91 37 01 	lds	r24, 0x0137
    3820:	90 91 38 01 	lds	r25, 0x0138
    3824:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    3828:	cb 01       	movw	r24, r22
    382a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
				m_usb_tx_string(", ");
    382e:	8f ec       	ldi	r24, 0xCF	; 207
    3830:	93 e0       	ldi	r25, 0x03	; 3
    3832:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				m_usb_tx_int(goal[1]);
    3836:	f7 01       	movw	r30, r14
    3838:	60 81       	ld	r22, Z
    383a:	71 81       	ldd	r23, Z+1	; 0x01
    383c:	82 81       	ldd	r24, Z+2	; 0x02
    383e:	93 81       	ldd	r25, Z+3	; 0x03
    3840:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    3844:	cb 01       	movw	r24, r22
    3846:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
				m_usb_tx_string("\n");
    384a:	8d ec       	ldi	r24, 0xCD	; 205
    384c:	93 e0       	ldi	r25, 0x03	; 3
    384e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				break;
    3852:	67 c0       	rjmp	.+206    	; 0x3922 <main+0x344>
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    3854:	6a 9a       	sbi	0x0d, 2	; 13
    3856:	8e b1       	in	r24, 0x0e	; 14
    3858:	8a 25       	eor	r24, r10
    385a:	8e b9       	out	0x0e, r24	; 14
				m_red(TOGGLE);
    385c:	6e 9a       	sbi	0x0d, 6	; 13
    385e:	8e b1       	in	r24, 0x0e	; 14
    3860:	8b 25       	eor	r24, r11
    3862:	8e b9       	out	0x0e, r24	; 14
				localization(&state, &desPos[0], &c_wii[0], &dir[0]);
    3864:	2a e9       	ldi	r18, 0x9A	; 154
    3866:	31 e0       	ldi	r19, 0x01	; 1
    3868:	42 ea       	ldi	r20, 0xA2	; 162
    386a:	51 e0       	ldi	r21, 0x01	; 1
    386c:	6d e2       	ldi	r22, 0x2D	; 45
    386e:	71 e0       	ldi	r23, 0x01	; 1
    3870:	8c eb       	ldi	r24, 0xBC	; 188
    3872:	91 e0       	ldi	r25, 0x01	; 1
    3874:	0e 94 24 0c 	call	0x1848	; 0x1848 <localization>
				m_usb_tx_string("Desire Position = ");
    3878:	8a eb       	ldi	r24, 0xBA	; 186
    387a:	93 e0       	ldi	r25, 0x03	; 3
    387c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				m_usb_tx_int(desPos[0]);
    3880:	60 91 2d 01 	lds	r22, 0x012D
    3884:	70 91 2e 01 	lds	r23, 0x012E
    3888:	80 91 2f 01 	lds	r24, 0x012F
    388c:	90 91 30 01 	lds	r25, 0x0130
    3890:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    3894:	cb 01       	movw	r24, r22
    3896:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
				m_usb_tx_string(", ");
    389a:	87 eb       	ldi	r24, 0xB7	; 183
    389c:	93 e0       	ldi	r25, 0x03	; 3
    389e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				m_usb_tx_int(desPos[1]);
    38a2:	f6 01       	movw	r30, r12
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__fixsfsi>
    38b0:	cb 01       	movw	r24, r22
    38b2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
				m_usb_tx_string("\n");
    38b6:	85 eb       	ldi	r24, 0xB5	; 181
    38b8:	93 e0       	ldi	r25, 0x03	; 3
    38ba:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				break;
    38be:	31 c0       	rjmp	.+98     	; 0x3922 <main+0x344>
			case 5:		// defense mode
				m_red(TOGGLE);
    38c0:	6e 9a       	sbi	0x0d, 6	; 13
    38c2:	8e b1       	in	r24, 0x0e	; 14
    38c4:	8b 25       	eor	r24, r11
    38c6:	8e b9       	out	0x0e, r24	; 14
				m_green(TOGGLE);
    38c8:	6a 9a       	sbi	0x0d, 2	; 13
    38ca:	8e b1       	in	r24, 0x0e	; 14
    38cc:	8a 25       	eor	r24, r10
    38ce:	8e b9       	out	0x0e, r24	; 14
				findPuck(state);
    38d0:	80 91 bc 01 	lds	r24, 0x01BC
    38d4:	90 91 bd 01 	lds	r25, 0x01BD
    38d8:	0e 94 4a 04 	call	0x894	; 0x894 <findPuck>
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    38dc:	2a e9       	ldi	r18, 0x9A	; 154
    38de:	31 e0       	ldi	r19, 0x01	; 1
    38e0:	42 ea       	ldi	r20, 0xA2	; 162
    38e2:	51 e0       	ldi	r21, 0x01	; 1
    38e4:	65 e3       	ldi	r22, 0x35	; 53
    38e6:	71 e0       	ldi	r23, 0x01	; 1
    38e8:	8c eb       	ldi	r24, 0xBC	; 188
    38ea:	91 e0       	ldi	r25, 0x01	; 1
    38ec:	0e 94 24 0c 	call	0x1848	; 0x1848 <localization>
				ifGotoPuck(&state, &dir[0]);
    38f0:	6a e9       	ldi	r22, 0x9A	; 154
    38f2:	71 e0       	ldi	r23, 0x01	; 1
    38f4:	8c eb       	ldi	r24, 0xBC	; 188
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	0e 94 64 07 	call	0xec8	; 0xec8 <ifGotoPuck>
				if(state != 5){
    38fc:	80 91 bc 01 	lds	r24, 0x01BC
    3900:	90 91 bd 01 	lds	r25, 0x01BD
    3904:	85 30       	cpi	r24, 0x05	; 5
    3906:	91 05       	cpc	r25, r1
    3908:	61 f0       	breq	.+24     	; 0x3922 <main+0x344>
					send_message(state, No, &buffer[0], &c_wii[0]);
    390a:	22 ea       	ldi	r18, 0xA2	; 162
    390c:	31 e0       	ldi	r19, 0x01	; 1
    390e:	4e ea       	ldi	r20, 0xAE	; 174
    3910:	51 e0       	ldi	r21, 0x01	; 1
    3912:	61 e0       	ldi	r22, 0x01	; 1
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	0e 94 27 02 	call	0x44e	; 0x44e <send_message>
					m_usb_tx_string("sent found message.\n");
    391a:	80 ea       	ldi	r24, 0xA0	; 160
    391c:	93 e0       	ldi	r25, 0x03	; 3
    391e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
				break;
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    3922:	87 e9       	ldi	r24, 0x97	; 151
    3924:	93 e0       	ldi	r25, 0x03	; 3
    3926:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		m_usb_tx_int(OCR1B);
    392a:	f8 01       	movw	r30, r16
    392c:	80 81       	ld	r24, Z
    392e:	91 81       	ldd	r25, Z+1	; 0x01
    3930:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
		m_usb_tx_string(", ");
    3934:	84 e9       	ldi	r24, 0x94	; 148
    3936:	93 e0       	ldi	r25, 0x03	; 3
    3938:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
		m_usb_tx_int(OCR1C);
    393c:	88 81       	ld	r24, Y
    393e:	99 81       	ldd	r25, Y+1	; 0x01
    3940:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    3944:	82 e9       	ldi	r24, 0x92	; 146
    3946:	93 e0       	ldi	r25, 0x03	; 3
    3948:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <print_P>
    394c:	83 ec       	ldi	r24, 0xC3	; 195
    394e:	99 e0       	ldi	r25, 0x09	; 9
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <main+0x372>
    3954:	00 c0       	rjmp	.+0      	; 0x3956 <main+0x378>
    3956:	00 00       	nop
    3958:	b9 ce       	rjmp	.-654    	; 0x36cc <main+0xee>

0000395a <acos>:
    395a:	9f 93       	push	r25
    395c:	9f 77       	andi	r25, 0x7F	; 127
    395e:	4a d1       	rcall	.+660    	; 0x3bf4 <__fp_arccos>
    3960:	0f 90       	pop	r0
    3962:	00 20       	and	r0, r0
    3964:	3a f4       	brpl	.+14     	; 0x3974 <acos+0x1a>
    3966:	90 58       	subi	r25, 0x80	; 128
    3968:	a2 ea       	ldi	r26, 0xA2	; 162
    396a:	2a ed       	ldi	r18, 0xDA	; 218
    396c:	3f e0       	ldi	r19, 0x0F	; 15
    396e:	49 e4       	ldi	r20, 0x49	; 73
    3970:	50 e4       	ldi	r21, 0x40	; 64
    3972:	13 d0       	rcall	.+38     	; 0x399a <__addsf3x>
    3974:	ba c1       	rjmp	.+884    	; 0x3cea <__fp_round>

00003976 <__subsf3>:
    3976:	50 58       	subi	r21, 0x80	; 128

00003978 <__addsf3>:
    3978:	bb 27       	eor	r27, r27
    397a:	aa 27       	eor	r26, r26
    397c:	0e d0       	rcall	.+28     	; 0x399a <__addsf3x>
    397e:	b5 c1       	rjmp	.+874    	; 0x3cea <__fp_round>
    3980:	a6 d1       	rcall	.+844    	; 0x3cce <__fp_pscA>
    3982:	30 f0       	brcs	.+12     	; 0x3990 <__addsf3+0x18>
    3984:	ab d1       	rcall	.+854    	; 0x3cdc <__fp_pscB>
    3986:	20 f0       	brcs	.+8      	; 0x3990 <__addsf3+0x18>
    3988:	31 f4       	brne	.+12     	; 0x3996 <__addsf3+0x1e>
    398a:	9f 3f       	cpi	r25, 0xFF	; 255
    398c:	11 f4       	brne	.+4      	; 0x3992 <__addsf3+0x1a>
    398e:	1e f4       	brtc	.+6      	; 0x3996 <__addsf3+0x1e>
    3990:	76 c1       	rjmp	.+748    	; 0x3c7e <__fp_nan>
    3992:	0e f4       	brtc	.+2      	; 0x3996 <__addsf3+0x1e>
    3994:	e0 95       	com	r30
    3996:	e7 fb       	bst	r30, 7
    3998:	6c c1       	rjmp	.+728    	; 0x3c72 <__fp_inf>

0000399a <__addsf3x>:
    399a:	e9 2f       	mov	r30, r25
    399c:	b7 d1       	rcall	.+878    	; 0x3d0c <__fp_split3>
    399e:	80 f3       	brcs	.-32     	; 0x3980 <__addsf3+0x8>
    39a0:	ba 17       	cp	r27, r26
    39a2:	62 07       	cpc	r22, r18
    39a4:	73 07       	cpc	r23, r19
    39a6:	84 07       	cpc	r24, r20
    39a8:	95 07       	cpc	r25, r21
    39aa:	18 f0       	brcs	.+6      	; 0x39b2 <__addsf3x+0x18>
    39ac:	71 f4       	brne	.+28     	; 0x39ca <__addsf3x+0x30>
    39ae:	9e f5       	brtc	.+102    	; 0x3a16 <__addsf3x+0x7c>
    39b0:	cf c1       	rjmp	.+926    	; 0x3d50 <__fp_zero>
    39b2:	0e f4       	brtc	.+2      	; 0x39b6 <__addsf3x+0x1c>
    39b4:	e0 95       	com	r30
    39b6:	0b 2e       	mov	r0, r27
    39b8:	ba 2f       	mov	r27, r26
    39ba:	a0 2d       	mov	r26, r0
    39bc:	0b 01       	movw	r0, r22
    39be:	b9 01       	movw	r22, r18
    39c0:	90 01       	movw	r18, r0
    39c2:	0c 01       	movw	r0, r24
    39c4:	ca 01       	movw	r24, r20
    39c6:	a0 01       	movw	r20, r0
    39c8:	11 24       	eor	r1, r1
    39ca:	ff 27       	eor	r31, r31
    39cc:	59 1b       	sub	r21, r25
    39ce:	99 f0       	breq	.+38     	; 0x39f6 <__addsf3x+0x5c>
    39d0:	59 3f       	cpi	r21, 0xF9	; 249
    39d2:	50 f4       	brcc	.+20     	; 0x39e8 <__addsf3x+0x4e>
    39d4:	50 3e       	cpi	r21, 0xE0	; 224
    39d6:	68 f1       	brcs	.+90     	; 0x3a32 <__addsf3x+0x98>
    39d8:	1a 16       	cp	r1, r26
    39da:	f0 40       	sbci	r31, 0x00	; 0
    39dc:	a2 2f       	mov	r26, r18
    39de:	23 2f       	mov	r18, r19
    39e0:	34 2f       	mov	r19, r20
    39e2:	44 27       	eor	r20, r20
    39e4:	58 5f       	subi	r21, 0xF8	; 248
    39e6:	f3 cf       	rjmp	.-26     	; 0x39ce <__addsf3x+0x34>
    39e8:	46 95       	lsr	r20
    39ea:	37 95       	ror	r19
    39ec:	27 95       	ror	r18
    39ee:	a7 95       	ror	r26
    39f0:	f0 40       	sbci	r31, 0x00	; 0
    39f2:	53 95       	inc	r21
    39f4:	c9 f7       	brne	.-14     	; 0x39e8 <__addsf3x+0x4e>
    39f6:	7e f4       	brtc	.+30     	; 0x3a16 <__addsf3x+0x7c>
    39f8:	1f 16       	cp	r1, r31
    39fa:	ba 0b       	sbc	r27, r26
    39fc:	62 0b       	sbc	r22, r18
    39fe:	73 0b       	sbc	r23, r19
    3a00:	84 0b       	sbc	r24, r20
    3a02:	ba f0       	brmi	.+46     	; 0x3a32 <__addsf3x+0x98>
    3a04:	91 50       	subi	r25, 0x01	; 1
    3a06:	a1 f0       	breq	.+40     	; 0x3a30 <__addsf3x+0x96>
    3a08:	ff 0f       	add	r31, r31
    3a0a:	bb 1f       	adc	r27, r27
    3a0c:	66 1f       	adc	r22, r22
    3a0e:	77 1f       	adc	r23, r23
    3a10:	88 1f       	adc	r24, r24
    3a12:	c2 f7       	brpl	.-16     	; 0x3a04 <__addsf3x+0x6a>
    3a14:	0e c0       	rjmp	.+28     	; 0x3a32 <__addsf3x+0x98>
    3a16:	ba 0f       	add	r27, r26
    3a18:	62 1f       	adc	r22, r18
    3a1a:	73 1f       	adc	r23, r19
    3a1c:	84 1f       	adc	r24, r20
    3a1e:	48 f4       	brcc	.+18     	; 0x3a32 <__addsf3x+0x98>
    3a20:	87 95       	ror	r24
    3a22:	77 95       	ror	r23
    3a24:	67 95       	ror	r22
    3a26:	b7 95       	ror	r27
    3a28:	f7 95       	ror	r31
    3a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a2c:	08 f0       	brcs	.+2      	; 0x3a30 <__addsf3x+0x96>
    3a2e:	b3 cf       	rjmp	.-154    	; 0x3996 <__addsf3+0x1e>
    3a30:	93 95       	inc	r25
    3a32:	88 0f       	add	r24, r24
    3a34:	08 f0       	brcs	.+2      	; 0x3a38 <__addsf3x+0x9e>
    3a36:	99 27       	eor	r25, r25
    3a38:	ee 0f       	add	r30, r30
    3a3a:	97 95       	ror	r25
    3a3c:	87 95       	ror	r24
    3a3e:	08 95       	ret

00003a40 <__cmpsf2>:
    3a40:	f4 d0       	rcall	.+488    	; 0x3c2a <__fp_cmp>
    3a42:	08 f4       	brcc	.+2      	; 0x3a46 <__cmpsf2+0x6>
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	08 95       	ret

00003a48 <__divsf3>:
    3a48:	0c d0       	rcall	.+24     	; 0x3a62 <__divsf3x>
    3a4a:	4f c1       	rjmp	.+670    	; 0x3cea <__fp_round>
    3a4c:	47 d1       	rcall	.+654    	; 0x3cdc <__fp_pscB>
    3a4e:	40 f0       	brcs	.+16     	; 0x3a60 <__divsf3+0x18>
    3a50:	3e d1       	rcall	.+636    	; 0x3cce <__fp_pscA>
    3a52:	30 f0       	brcs	.+12     	; 0x3a60 <__divsf3+0x18>
    3a54:	21 f4       	brne	.+8      	; 0x3a5e <__divsf3+0x16>
    3a56:	5f 3f       	cpi	r21, 0xFF	; 255
    3a58:	19 f0       	breq	.+6      	; 0x3a60 <__divsf3+0x18>
    3a5a:	0b c1       	rjmp	.+534    	; 0x3c72 <__fp_inf>
    3a5c:	51 11       	cpse	r21, r1
    3a5e:	79 c1       	rjmp	.+754    	; 0x3d52 <__fp_szero>
    3a60:	0e c1       	rjmp	.+540    	; 0x3c7e <__fp_nan>

00003a62 <__divsf3x>:
    3a62:	54 d1       	rcall	.+680    	; 0x3d0c <__fp_split3>
    3a64:	98 f3       	brcs	.-26     	; 0x3a4c <__divsf3+0x4>

00003a66 <__divsf3_pse>:
    3a66:	99 23       	and	r25, r25
    3a68:	c9 f3       	breq	.-14     	; 0x3a5c <__divsf3+0x14>
    3a6a:	55 23       	and	r21, r21
    3a6c:	b1 f3       	breq	.-20     	; 0x3a5a <__divsf3+0x12>
    3a6e:	95 1b       	sub	r25, r21
    3a70:	55 0b       	sbc	r21, r21
    3a72:	bb 27       	eor	r27, r27
    3a74:	aa 27       	eor	r26, r26
    3a76:	62 17       	cp	r22, r18
    3a78:	73 07       	cpc	r23, r19
    3a7a:	84 07       	cpc	r24, r20
    3a7c:	38 f0       	brcs	.+14     	; 0x3a8c <__divsf3_pse+0x26>
    3a7e:	9f 5f       	subi	r25, 0xFF	; 255
    3a80:	5f 4f       	sbci	r21, 0xFF	; 255
    3a82:	22 0f       	add	r18, r18
    3a84:	33 1f       	adc	r19, r19
    3a86:	44 1f       	adc	r20, r20
    3a88:	aa 1f       	adc	r26, r26
    3a8a:	a9 f3       	breq	.-22     	; 0x3a76 <__divsf3_pse+0x10>
    3a8c:	33 d0       	rcall	.+102    	; 0x3af4 <__divsf3_pse+0x8e>
    3a8e:	0e 2e       	mov	r0, r30
    3a90:	3a f0       	brmi	.+14     	; 0x3aa0 <__divsf3_pse+0x3a>
    3a92:	e0 e8       	ldi	r30, 0x80	; 128
    3a94:	30 d0       	rcall	.+96     	; 0x3af6 <__divsf3_pse+0x90>
    3a96:	91 50       	subi	r25, 0x01	; 1
    3a98:	50 40       	sbci	r21, 0x00	; 0
    3a9a:	e6 95       	lsr	r30
    3a9c:	00 1c       	adc	r0, r0
    3a9e:	ca f7       	brpl	.-14     	; 0x3a92 <__divsf3_pse+0x2c>
    3aa0:	29 d0       	rcall	.+82     	; 0x3af4 <__divsf3_pse+0x8e>
    3aa2:	fe 2f       	mov	r31, r30
    3aa4:	27 d0       	rcall	.+78     	; 0x3af4 <__divsf3_pse+0x8e>
    3aa6:	66 0f       	add	r22, r22
    3aa8:	77 1f       	adc	r23, r23
    3aaa:	88 1f       	adc	r24, r24
    3aac:	bb 1f       	adc	r27, r27
    3aae:	26 17       	cp	r18, r22
    3ab0:	37 07       	cpc	r19, r23
    3ab2:	48 07       	cpc	r20, r24
    3ab4:	ab 07       	cpc	r26, r27
    3ab6:	b0 e8       	ldi	r27, 0x80	; 128
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <__divsf3_pse+0x56>
    3aba:	bb 0b       	sbc	r27, r27
    3abc:	80 2d       	mov	r24, r0
    3abe:	bf 01       	movw	r22, r30
    3ac0:	ff 27       	eor	r31, r31
    3ac2:	93 58       	subi	r25, 0x83	; 131
    3ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ac6:	2a f0       	brmi	.+10     	; 0x3ad2 <__divsf3_pse+0x6c>
    3ac8:	9e 3f       	cpi	r25, 0xFE	; 254
    3aca:	51 05       	cpc	r21, r1
    3acc:	68 f0       	brcs	.+26     	; 0x3ae8 <__divsf3_pse+0x82>
    3ace:	d1 c0       	rjmp	.+418    	; 0x3c72 <__fp_inf>
    3ad0:	40 c1       	rjmp	.+640    	; 0x3d52 <__fp_szero>
    3ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ad4:	ec f3       	brlt	.-6      	; 0x3ad0 <__divsf3_pse+0x6a>
    3ad6:	98 3e       	cpi	r25, 0xE8	; 232
    3ad8:	dc f3       	brlt	.-10     	; 0x3ad0 <__divsf3_pse+0x6a>
    3ada:	86 95       	lsr	r24
    3adc:	77 95       	ror	r23
    3ade:	67 95       	ror	r22
    3ae0:	b7 95       	ror	r27
    3ae2:	f7 95       	ror	r31
    3ae4:	9f 5f       	subi	r25, 0xFF	; 255
    3ae6:	c9 f7       	brne	.-14     	; 0x3ada <__divsf3_pse+0x74>
    3ae8:	88 0f       	add	r24, r24
    3aea:	91 1d       	adc	r25, r1
    3aec:	96 95       	lsr	r25
    3aee:	87 95       	ror	r24
    3af0:	97 f9       	bld	r25, 7
    3af2:	08 95       	ret
    3af4:	e1 e0       	ldi	r30, 0x01	; 1
    3af6:	66 0f       	add	r22, r22
    3af8:	77 1f       	adc	r23, r23
    3afa:	88 1f       	adc	r24, r24
    3afc:	bb 1f       	adc	r27, r27
    3afe:	62 17       	cp	r22, r18
    3b00:	73 07       	cpc	r23, r19
    3b02:	84 07       	cpc	r24, r20
    3b04:	ba 07       	cpc	r27, r26
    3b06:	20 f0       	brcs	.+8      	; 0x3b10 <__divsf3_pse+0xaa>
    3b08:	62 1b       	sub	r22, r18
    3b0a:	73 0b       	sbc	r23, r19
    3b0c:	84 0b       	sbc	r24, r20
    3b0e:	ba 0b       	sbc	r27, r26
    3b10:	ee 1f       	adc	r30, r30
    3b12:	88 f7       	brcc	.-30     	; 0x3af6 <__divsf3_pse+0x90>
    3b14:	e0 95       	com	r30
    3b16:	08 95       	ret

00003b18 <__fixsfsi>:
    3b18:	04 d0       	rcall	.+8      	; 0x3b22 <__fixunssfsi>
    3b1a:	68 94       	set
    3b1c:	b1 11       	cpse	r27, r1
    3b1e:	19 c1       	rjmp	.+562    	; 0x3d52 <__fp_szero>
    3b20:	08 95       	ret

00003b22 <__fixunssfsi>:
    3b22:	fc d0       	rcall	.+504    	; 0x3d1c <__fp_splitA>
    3b24:	88 f0       	brcs	.+34     	; 0x3b48 <__fixunssfsi+0x26>
    3b26:	9f 57       	subi	r25, 0x7F	; 127
    3b28:	90 f0       	brcs	.+36     	; 0x3b4e <__fixunssfsi+0x2c>
    3b2a:	b9 2f       	mov	r27, r25
    3b2c:	99 27       	eor	r25, r25
    3b2e:	b7 51       	subi	r27, 0x17	; 23
    3b30:	a0 f0       	brcs	.+40     	; 0x3b5a <__fixunssfsi+0x38>
    3b32:	d1 f0       	breq	.+52     	; 0x3b68 <__fixunssfsi+0x46>
    3b34:	66 0f       	add	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	88 1f       	adc	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	1a f0       	brmi	.+6      	; 0x3b44 <__fixunssfsi+0x22>
    3b3e:	ba 95       	dec	r27
    3b40:	c9 f7       	brne	.-14     	; 0x3b34 <__fixunssfsi+0x12>
    3b42:	12 c0       	rjmp	.+36     	; 0x3b68 <__fixunssfsi+0x46>
    3b44:	b1 30       	cpi	r27, 0x01	; 1
    3b46:	81 f0       	breq	.+32     	; 0x3b68 <__fixunssfsi+0x46>
    3b48:	03 d1       	rcall	.+518    	; 0x3d50 <__fp_zero>
    3b4a:	b1 e0       	ldi	r27, 0x01	; 1
    3b4c:	08 95       	ret
    3b4e:	00 c1       	rjmp	.+512    	; 0x3d50 <__fp_zero>
    3b50:	67 2f       	mov	r22, r23
    3b52:	78 2f       	mov	r23, r24
    3b54:	88 27       	eor	r24, r24
    3b56:	b8 5f       	subi	r27, 0xF8	; 248
    3b58:	39 f0       	breq	.+14     	; 0x3b68 <__fixunssfsi+0x46>
    3b5a:	b9 3f       	cpi	r27, 0xF9	; 249
    3b5c:	cc f3       	brlt	.-14     	; 0x3b50 <__fixunssfsi+0x2e>
    3b5e:	86 95       	lsr	r24
    3b60:	77 95       	ror	r23
    3b62:	67 95       	ror	r22
    3b64:	b3 95       	inc	r27
    3b66:	d9 f7       	brne	.-10     	; 0x3b5e <__fixunssfsi+0x3c>
    3b68:	3e f4       	brtc	.+14     	; 0x3b78 <__fixunssfsi+0x56>
    3b6a:	90 95       	com	r25
    3b6c:	80 95       	com	r24
    3b6e:	70 95       	com	r23
    3b70:	61 95       	neg	r22
    3b72:	7f 4f       	sbci	r23, 0xFF	; 255
    3b74:	8f 4f       	sbci	r24, 0xFF	; 255
    3b76:	9f 4f       	sbci	r25, 0xFF	; 255
    3b78:	08 95       	ret

00003b7a <__floatunsisf>:
    3b7a:	e8 94       	clt
    3b7c:	09 c0       	rjmp	.+18     	; 0x3b90 <__floatsisf+0x12>

00003b7e <__floatsisf>:
    3b7e:	97 fb       	bst	r25, 7
    3b80:	3e f4       	brtc	.+14     	; 0x3b90 <__floatsisf+0x12>
    3b82:	90 95       	com	r25
    3b84:	80 95       	com	r24
    3b86:	70 95       	com	r23
    3b88:	61 95       	neg	r22
    3b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b90:	99 23       	and	r25, r25
    3b92:	a9 f0       	breq	.+42     	; 0x3bbe <__floatsisf+0x40>
    3b94:	f9 2f       	mov	r31, r25
    3b96:	96 e9       	ldi	r25, 0x96	; 150
    3b98:	bb 27       	eor	r27, r27
    3b9a:	93 95       	inc	r25
    3b9c:	f6 95       	lsr	r31
    3b9e:	87 95       	ror	r24
    3ba0:	77 95       	ror	r23
    3ba2:	67 95       	ror	r22
    3ba4:	b7 95       	ror	r27
    3ba6:	f1 11       	cpse	r31, r1
    3ba8:	f8 cf       	rjmp	.-16     	; 0x3b9a <__floatsisf+0x1c>
    3baa:	fa f4       	brpl	.+62     	; 0x3bea <__floatsisf+0x6c>
    3bac:	bb 0f       	add	r27, r27
    3bae:	11 f4       	brne	.+4      	; 0x3bb4 <__floatsisf+0x36>
    3bb0:	60 ff       	sbrs	r22, 0
    3bb2:	1b c0       	rjmp	.+54     	; 0x3bea <__floatsisf+0x6c>
    3bb4:	6f 5f       	subi	r22, 0xFF	; 255
    3bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bba:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbc:	16 c0       	rjmp	.+44     	; 0x3bea <__floatsisf+0x6c>
    3bbe:	88 23       	and	r24, r24
    3bc0:	11 f0       	breq	.+4      	; 0x3bc6 <__floatsisf+0x48>
    3bc2:	96 e9       	ldi	r25, 0x96	; 150
    3bc4:	11 c0       	rjmp	.+34     	; 0x3be8 <__floatsisf+0x6a>
    3bc6:	77 23       	and	r23, r23
    3bc8:	21 f0       	breq	.+8      	; 0x3bd2 <__floatsisf+0x54>
    3bca:	9e e8       	ldi	r25, 0x8E	; 142
    3bcc:	87 2f       	mov	r24, r23
    3bce:	76 2f       	mov	r23, r22
    3bd0:	05 c0       	rjmp	.+10     	; 0x3bdc <__floatsisf+0x5e>
    3bd2:	66 23       	and	r22, r22
    3bd4:	71 f0       	breq	.+28     	; 0x3bf2 <__floatsisf+0x74>
    3bd6:	96 e8       	ldi	r25, 0x86	; 134
    3bd8:	86 2f       	mov	r24, r22
    3bda:	70 e0       	ldi	r23, 0x00	; 0
    3bdc:	60 e0       	ldi	r22, 0x00	; 0
    3bde:	2a f0       	brmi	.+10     	; 0x3bea <__floatsisf+0x6c>
    3be0:	9a 95       	dec	r25
    3be2:	66 0f       	add	r22, r22
    3be4:	77 1f       	adc	r23, r23
    3be6:	88 1f       	adc	r24, r24
    3be8:	da f7       	brpl	.-10     	; 0x3be0 <__floatsisf+0x62>
    3bea:	88 0f       	add	r24, r24
    3bec:	96 95       	lsr	r25
    3bee:	87 95       	ror	r24
    3bf0:	97 f9       	bld	r25, 7
    3bf2:	08 95       	ret

00003bf4 <__fp_arccos>:
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	1f 93       	push	r17
    3bfa:	0f 93       	push	r16
    3bfc:	8b 01       	movw	r16, r22
    3bfe:	ec 01       	movw	r28, r24
    3c00:	e2 e0       	ldi	r30, 0x02	; 2
    3c02:	f1 e0       	ldi	r31, 0x01	; 1
    3c04:	3f d0       	rcall	.+126    	; 0x3c84 <__fp_powser>
    3c06:	71 d0       	rcall	.+226    	; 0x3cea <__fp_round>
    3c08:	98 01       	movw	r18, r16
    3c0a:	ae 01       	movw	r20, r28
    3c0c:	8b 01       	movw	r16, r22
    3c0e:	ec 01       	movw	r28, r24
    3c10:	60 e0       	ldi	r22, 0x00	; 0
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	80 e8       	ldi	r24, 0x80	; 128
    3c16:	9f e3       	ldi	r25, 0x3F	; 63
    3c18:	ae de       	rcall	.-676    	; 0x3976 <__subsf3>
    3c1a:	0c d1       	rcall	.+536    	; 0x3e34 <sqrt>
    3c1c:	98 01       	movw	r18, r16
    3c1e:	ae 01       	movw	r20, r28
    3c20:	0f 91       	pop	r16
    3c22:	1f 91       	pop	r17
    3c24:	cf 91       	pop	r28
    3c26:	df 91       	pop	r29
    3c28:	aa c0       	rjmp	.+340    	; 0x3d7e <__mulsf3x>

00003c2a <__fp_cmp>:
    3c2a:	99 0f       	add	r25, r25
    3c2c:	00 08       	sbc	r0, r0
    3c2e:	55 0f       	add	r21, r21
    3c30:	aa 0b       	sbc	r26, r26
    3c32:	e0 e8       	ldi	r30, 0x80	; 128
    3c34:	fe ef       	ldi	r31, 0xFE	; 254
    3c36:	16 16       	cp	r1, r22
    3c38:	17 06       	cpc	r1, r23
    3c3a:	e8 07       	cpc	r30, r24
    3c3c:	f9 07       	cpc	r31, r25
    3c3e:	c0 f0       	brcs	.+48     	; 0x3c70 <__fp_cmp+0x46>
    3c40:	12 16       	cp	r1, r18
    3c42:	13 06       	cpc	r1, r19
    3c44:	e4 07       	cpc	r30, r20
    3c46:	f5 07       	cpc	r31, r21
    3c48:	98 f0       	brcs	.+38     	; 0x3c70 <__fp_cmp+0x46>
    3c4a:	62 1b       	sub	r22, r18
    3c4c:	73 0b       	sbc	r23, r19
    3c4e:	84 0b       	sbc	r24, r20
    3c50:	95 0b       	sbc	r25, r21
    3c52:	39 f4       	brne	.+14     	; 0x3c62 <__fp_cmp+0x38>
    3c54:	0a 26       	eor	r0, r26
    3c56:	61 f0       	breq	.+24     	; 0x3c70 <__fp_cmp+0x46>
    3c58:	23 2b       	or	r18, r19
    3c5a:	24 2b       	or	r18, r20
    3c5c:	25 2b       	or	r18, r21
    3c5e:	21 f4       	brne	.+8      	; 0x3c68 <__fp_cmp+0x3e>
    3c60:	08 95       	ret
    3c62:	0a 26       	eor	r0, r26
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <__fp_cmp+0x3e>
    3c66:	a1 40       	sbci	r26, 0x01	; 1
    3c68:	a6 95       	lsr	r26
    3c6a:	8f ef       	ldi	r24, 0xFF	; 255
    3c6c:	81 1d       	adc	r24, r1
    3c6e:	81 1d       	adc	r24, r1
    3c70:	08 95       	ret

00003c72 <__fp_inf>:
    3c72:	97 f9       	bld	r25, 7
    3c74:	9f 67       	ori	r25, 0x7F	; 127
    3c76:	80 e8       	ldi	r24, 0x80	; 128
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	60 e0       	ldi	r22, 0x00	; 0
    3c7c:	08 95       	ret

00003c7e <__fp_nan>:
    3c7e:	9f ef       	ldi	r25, 0xFF	; 255
    3c80:	80 ec       	ldi	r24, 0xC0	; 192
    3c82:	08 95       	ret

00003c84 <__fp_powser>:
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	1f 93       	push	r17
    3c8a:	0f 93       	push	r16
    3c8c:	ff 92       	push	r15
    3c8e:	ef 92       	push	r14
    3c90:	df 92       	push	r13
    3c92:	7b 01       	movw	r14, r22
    3c94:	8c 01       	movw	r16, r24
    3c96:	68 94       	set
    3c98:	05 c0       	rjmp	.+10     	; 0x3ca4 <__fp_powser+0x20>
    3c9a:	da 2e       	mov	r13, r26
    3c9c:	ef 01       	movw	r28, r30
    3c9e:	6f d0       	rcall	.+222    	; 0x3d7e <__mulsf3x>
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e8 94       	clt
    3ca4:	a5 91       	lpm	r26, Z+
    3ca6:	25 91       	lpm	r18, Z+
    3ca8:	35 91       	lpm	r19, Z+
    3caa:	45 91       	lpm	r20, Z+
    3cac:	55 91       	lpm	r21, Z+
    3cae:	ae f3       	brts	.-22     	; 0x3c9a <__fp_powser+0x16>
    3cb0:	ef 01       	movw	r28, r30
    3cb2:	73 de       	rcall	.-794    	; 0x399a <__addsf3x>
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	97 01       	movw	r18, r14
    3cb8:	a8 01       	movw	r20, r16
    3cba:	da 94       	dec	r13
    3cbc:	79 f7       	brne	.-34     	; 0x3c9c <__fp_powser+0x18>
    3cbe:	df 90       	pop	r13
    3cc0:	ef 90       	pop	r14
    3cc2:	ff 90       	pop	r15
    3cc4:	0f 91       	pop	r16
    3cc6:	1f 91       	pop	r17
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <__fp_pscA>:
    3cce:	00 24       	eor	r0, r0
    3cd0:	0a 94       	dec	r0
    3cd2:	16 16       	cp	r1, r22
    3cd4:	17 06       	cpc	r1, r23
    3cd6:	18 06       	cpc	r1, r24
    3cd8:	09 06       	cpc	r0, r25
    3cda:	08 95       	ret

00003cdc <__fp_pscB>:
    3cdc:	00 24       	eor	r0, r0
    3cde:	0a 94       	dec	r0
    3ce0:	12 16       	cp	r1, r18
    3ce2:	13 06       	cpc	r1, r19
    3ce4:	14 06       	cpc	r1, r20
    3ce6:	05 06       	cpc	r0, r21
    3ce8:	08 95       	ret

00003cea <__fp_round>:
    3cea:	09 2e       	mov	r0, r25
    3cec:	03 94       	inc	r0
    3cee:	00 0c       	add	r0, r0
    3cf0:	11 f4       	brne	.+4      	; 0x3cf6 <__fp_round+0xc>
    3cf2:	88 23       	and	r24, r24
    3cf4:	52 f0       	brmi	.+20     	; 0x3d0a <__fp_round+0x20>
    3cf6:	bb 0f       	add	r27, r27
    3cf8:	40 f4       	brcc	.+16     	; 0x3d0a <__fp_round+0x20>
    3cfa:	bf 2b       	or	r27, r31
    3cfc:	11 f4       	brne	.+4      	; 0x3d02 <__fp_round+0x18>
    3cfe:	60 ff       	sbrs	r22, 0
    3d00:	04 c0       	rjmp	.+8      	; 0x3d0a <__fp_round+0x20>
    3d02:	6f 5f       	subi	r22, 0xFF	; 255
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	8f 4f       	sbci	r24, 0xFF	; 255
    3d08:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0a:	08 95       	ret

00003d0c <__fp_split3>:
    3d0c:	57 fd       	sbrc	r21, 7
    3d0e:	90 58       	subi	r25, 0x80	; 128
    3d10:	44 0f       	add	r20, r20
    3d12:	55 1f       	adc	r21, r21
    3d14:	59 f0       	breq	.+22     	; 0x3d2c <__fp_splitA+0x10>
    3d16:	5f 3f       	cpi	r21, 0xFF	; 255
    3d18:	71 f0       	breq	.+28     	; 0x3d36 <__fp_splitA+0x1a>
    3d1a:	47 95       	ror	r20

00003d1c <__fp_splitA>:
    3d1c:	88 0f       	add	r24, r24
    3d1e:	97 fb       	bst	r25, 7
    3d20:	99 1f       	adc	r25, r25
    3d22:	61 f0       	breq	.+24     	; 0x3d3c <__fp_splitA+0x20>
    3d24:	9f 3f       	cpi	r25, 0xFF	; 255
    3d26:	79 f0       	breq	.+30     	; 0x3d46 <__fp_splitA+0x2a>
    3d28:	87 95       	ror	r24
    3d2a:	08 95       	ret
    3d2c:	12 16       	cp	r1, r18
    3d2e:	13 06       	cpc	r1, r19
    3d30:	14 06       	cpc	r1, r20
    3d32:	55 1f       	adc	r21, r21
    3d34:	f2 cf       	rjmp	.-28     	; 0x3d1a <__fp_split3+0xe>
    3d36:	46 95       	lsr	r20
    3d38:	f1 df       	rcall	.-30     	; 0x3d1c <__fp_splitA>
    3d3a:	08 c0       	rjmp	.+16     	; 0x3d4c <__fp_splitA+0x30>
    3d3c:	16 16       	cp	r1, r22
    3d3e:	17 06       	cpc	r1, r23
    3d40:	18 06       	cpc	r1, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	f1 cf       	rjmp	.-30     	; 0x3d28 <__fp_splitA+0xc>
    3d46:	86 95       	lsr	r24
    3d48:	71 05       	cpc	r23, r1
    3d4a:	61 05       	cpc	r22, r1
    3d4c:	08 94       	sec
    3d4e:	08 95       	ret

00003d50 <__fp_zero>:
    3d50:	e8 94       	clt

00003d52 <__fp_szero>:
    3d52:	bb 27       	eor	r27, r27
    3d54:	66 27       	eor	r22, r22
    3d56:	77 27       	eor	r23, r23
    3d58:	cb 01       	movw	r24, r22
    3d5a:	97 f9       	bld	r25, 7
    3d5c:	08 95       	ret

00003d5e <__gesf2>:
    3d5e:	65 df       	rcall	.-310    	; 0x3c2a <__fp_cmp>
    3d60:	08 f4       	brcc	.+2      	; 0x3d64 <__gesf2+0x6>
    3d62:	8f ef       	ldi	r24, 0xFF	; 255
    3d64:	08 95       	ret

00003d66 <__mulsf3>:
    3d66:	0b d0       	rcall	.+22     	; 0x3d7e <__mulsf3x>
    3d68:	c0 cf       	rjmp	.-128    	; 0x3cea <__fp_round>
    3d6a:	b1 df       	rcall	.-158    	; 0x3cce <__fp_pscA>
    3d6c:	28 f0       	brcs	.+10     	; 0x3d78 <__mulsf3+0x12>
    3d6e:	b6 df       	rcall	.-148    	; 0x3cdc <__fp_pscB>
    3d70:	18 f0       	brcs	.+6      	; 0x3d78 <__mulsf3+0x12>
    3d72:	95 23       	and	r25, r21
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <__mulsf3+0x12>
    3d76:	7d cf       	rjmp	.-262    	; 0x3c72 <__fp_inf>
    3d78:	82 cf       	rjmp	.-252    	; 0x3c7e <__fp_nan>
    3d7a:	11 24       	eor	r1, r1
    3d7c:	ea cf       	rjmp	.-44     	; 0x3d52 <__fp_szero>

00003d7e <__mulsf3x>:
    3d7e:	c6 df       	rcall	.-116    	; 0x3d0c <__fp_split3>
    3d80:	a0 f3       	brcs	.-24     	; 0x3d6a <__mulsf3+0x4>

00003d82 <__mulsf3_pse>:
    3d82:	95 9f       	mul	r25, r21
    3d84:	d1 f3       	breq	.-12     	; 0x3d7a <__mulsf3+0x14>
    3d86:	95 0f       	add	r25, r21
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	55 1f       	adc	r21, r21
    3d8c:	62 9f       	mul	r22, r18
    3d8e:	f0 01       	movw	r30, r0
    3d90:	72 9f       	mul	r23, r18
    3d92:	bb 27       	eor	r27, r27
    3d94:	f0 0d       	add	r31, r0
    3d96:	b1 1d       	adc	r27, r1
    3d98:	63 9f       	mul	r22, r19
    3d9a:	aa 27       	eor	r26, r26
    3d9c:	f0 0d       	add	r31, r0
    3d9e:	b1 1d       	adc	r27, r1
    3da0:	aa 1f       	adc	r26, r26
    3da2:	64 9f       	mul	r22, r20
    3da4:	66 27       	eor	r22, r22
    3da6:	b0 0d       	add	r27, r0
    3da8:	a1 1d       	adc	r26, r1
    3daa:	66 1f       	adc	r22, r22
    3dac:	82 9f       	mul	r24, r18
    3dae:	22 27       	eor	r18, r18
    3db0:	b0 0d       	add	r27, r0
    3db2:	a1 1d       	adc	r26, r1
    3db4:	62 1f       	adc	r22, r18
    3db6:	73 9f       	mul	r23, r19
    3db8:	b0 0d       	add	r27, r0
    3dba:	a1 1d       	adc	r26, r1
    3dbc:	62 1f       	adc	r22, r18
    3dbe:	83 9f       	mul	r24, r19
    3dc0:	a0 0d       	add	r26, r0
    3dc2:	61 1d       	adc	r22, r1
    3dc4:	22 1f       	adc	r18, r18
    3dc6:	74 9f       	mul	r23, r20
    3dc8:	33 27       	eor	r19, r19
    3dca:	a0 0d       	add	r26, r0
    3dcc:	61 1d       	adc	r22, r1
    3dce:	23 1f       	adc	r18, r19
    3dd0:	84 9f       	mul	r24, r20
    3dd2:	60 0d       	add	r22, r0
    3dd4:	21 1d       	adc	r18, r1
    3dd6:	82 2f       	mov	r24, r18
    3dd8:	76 2f       	mov	r23, r22
    3dda:	6a 2f       	mov	r22, r26
    3ddc:	11 24       	eor	r1, r1
    3dde:	9f 57       	subi	r25, 0x7F	; 127
    3de0:	50 40       	sbci	r21, 0x00	; 0
    3de2:	8a f0       	brmi	.+34     	; 0x3e06 <__mulsf3_pse+0x84>
    3de4:	e1 f0       	breq	.+56     	; 0x3e1e <__mulsf3_pse+0x9c>
    3de6:	88 23       	and	r24, r24
    3de8:	4a f0       	brmi	.+18     	; 0x3dfc <__mulsf3_pse+0x7a>
    3dea:	ee 0f       	add	r30, r30
    3dec:	ff 1f       	adc	r31, r31
    3dee:	bb 1f       	adc	r27, r27
    3df0:	66 1f       	adc	r22, r22
    3df2:	77 1f       	adc	r23, r23
    3df4:	88 1f       	adc	r24, r24
    3df6:	91 50       	subi	r25, 0x01	; 1
    3df8:	50 40       	sbci	r21, 0x00	; 0
    3dfa:	a9 f7       	brne	.-22     	; 0x3de6 <__mulsf3_pse+0x64>
    3dfc:	9e 3f       	cpi	r25, 0xFE	; 254
    3dfe:	51 05       	cpc	r21, r1
    3e00:	70 f0       	brcs	.+28     	; 0x3e1e <__mulsf3_pse+0x9c>
    3e02:	37 cf       	rjmp	.-402    	; 0x3c72 <__fp_inf>
    3e04:	a6 cf       	rjmp	.-180    	; 0x3d52 <__fp_szero>
    3e06:	5f 3f       	cpi	r21, 0xFF	; 255
    3e08:	ec f3       	brlt	.-6      	; 0x3e04 <__mulsf3_pse+0x82>
    3e0a:	98 3e       	cpi	r25, 0xE8	; 232
    3e0c:	dc f3       	brlt	.-10     	; 0x3e04 <__mulsf3_pse+0x82>
    3e0e:	86 95       	lsr	r24
    3e10:	77 95       	ror	r23
    3e12:	67 95       	ror	r22
    3e14:	b7 95       	ror	r27
    3e16:	f7 95       	ror	r31
    3e18:	e7 95       	ror	r30
    3e1a:	9f 5f       	subi	r25, 0xFF	; 255
    3e1c:	c1 f7       	brne	.-16     	; 0x3e0e <__mulsf3_pse+0x8c>
    3e1e:	fe 2b       	or	r31, r30
    3e20:	88 0f       	add	r24, r24
    3e22:	91 1d       	adc	r25, r1
    3e24:	96 95       	lsr	r25
    3e26:	87 95       	ror	r24
    3e28:	97 f9       	bld	r25, 7
    3e2a:	08 95       	ret
    3e2c:	11 f4       	brne	.+4      	; 0x3e32 <__mulsf3_pse+0xb0>
    3e2e:	0e f4       	brtc	.+2      	; 0x3e32 <__mulsf3_pse+0xb0>
    3e30:	26 cf       	rjmp	.-436    	; 0x3c7e <__fp_nan>
    3e32:	3e c0       	rjmp	.+124    	; 0x3eb0 <__fp_mpack>

00003e34 <sqrt>:
    3e34:	73 df       	rcall	.-282    	; 0x3d1c <__fp_splitA>
    3e36:	d0 f3       	brcs	.-12     	; 0x3e2c <__mulsf3_pse+0xaa>
    3e38:	99 23       	and	r25, r25
    3e3a:	d9 f3       	breq	.-10     	; 0x3e32 <__mulsf3_pse+0xb0>
    3e3c:	ce f3       	brts	.-14     	; 0x3e30 <__mulsf3_pse+0xae>
    3e3e:	9f 57       	subi	r25, 0x7F	; 127
    3e40:	55 0b       	sbc	r21, r21
    3e42:	87 ff       	sbrs	r24, 7
    3e44:	43 d0       	rcall	.+134    	; 0x3ecc <__fp_norm2>
    3e46:	00 24       	eor	r0, r0
    3e48:	a0 e6       	ldi	r26, 0x60	; 96
    3e4a:	40 ea       	ldi	r20, 0xA0	; 160
    3e4c:	90 01       	movw	r18, r0
    3e4e:	80 58       	subi	r24, 0x80	; 128
    3e50:	56 95       	lsr	r21
    3e52:	97 95       	ror	r25
    3e54:	28 f4       	brcc	.+10     	; 0x3e60 <sqrt+0x2c>
    3e56:	80 5c       	subi	r24, 0xC0	; 192
    3e58:	66 0f       	add	r22, r22
    3e5a:	77 1f       	adc	r23, r23
    3e5c:	88 1f       	adc	r24, r24
    3e5e:	20 f0       	brcs	.+8      	; 0x3e68 <sqrt+0x34>
    3e60:	26 17       	cp	r18, r22
    3e62:	37 07       	cpc	r19, r23
    3e64:	48 07       	cpc	r20, r24
    3e66:	30 f4       	brcc	.+12     	; 0x3e74 <sqrt+0x40>
    3e68:	62 1b       	sub	r22, r18
    3e6a:	73 0b       	sbc	r23, r19
    3e6c:	84 0b       	sbc	r24, r20
    3e6e:	20 29       	or	r18, r0
    3e70:	31 29       	or	r19, r1
    3e72:	4a 2b       	or	r20, r26
    3e74:	a6 95       	lsr	r26
    3e76:	17 94       	ror	r1
    3e78:	07 94       	ror	r0
    3e7a:	20 25       	eor	r18, r0
    3e7c:	31 25       	eor	r19, r1
    3e7e:	4a 27       	eor	r20, r26
    3e80:	58 f7       	brcc	.-42     	; 0x3e58 <sqrt+0x24>
    3e82:	66 0f       	add	r22, r22
    3e84:	77 1f       	adc	r23, r23
    3e86:	88 1f       	adc	r24, r24
    3e88:	20 f0       	brcs	.+8      	; 0x3e92 <sqrt+0x5e>
    3e8a:	26 17       	cp	r18, r22
    3e8c:	37 07       	cpc	r19, r23
    3e8e:	48 07       	cpc	r20, r24
    3e90:	30 f4       	brcc	.+12     	; 0x3e9e <sqrt+0x6a>
    3e92:	62 0b       	sbc	r22, r18
    3e94:	73 0b       	sbc	r23, r19
    3e96:	84 0b       	sbc	r24, r20
    3e98:	20 0d       	add	r18, r0
    3e9a:	31 1d       	adc	r19, r1
    3e9c:	41 1d       	adc	r20, r1
    3e9e:	a0 95       	com	r26
    3ea0:	81 f7       	brne	.-32     	; 0x3e82 <sqrt+0x4e>
    3ea2:	b9 01       	movw	r22, r18
    3ea4:	84 2f       	mov	r24, r20
    3ea6:	91 58       	subi	r25, 0x81	; 129
    3ea8:	88 0f       	add	r24, r24
    3eaa:	96 95       	lsr	r25
    3eac:	87 95       	ror	r24
    3eae:	08 95       	ret

00003eb0 <__fp_mpack>:
    3eb0:	9f 3f       	cpi	r25, 0xFF	; 255
    3eb2:	31 f0       	breq	.+12     	; 0x3ec0 <__fp_mpack_finite+0xc>

00003eb4 <__fp_mpack_finite>:
    3eb4:	91 50       	subi	r25, 0x01	; 1
    3eb6:	20 f4       	brcc	.+8      	; 0x3ec0 <__fp_mpack_finite+0xc>
    3eb8:	87 95       	ror	r24
    3eba:	77 95       	ror	r23
    3ebc:	67 95       	ror	r22
    3ebe:	b7 95       	ror	r27
    3ec0:	88 0f       	add	r24, r24
    3ec2:	91 1d       	adc	r25, r1
    3ec4:	96 95       	lsr	r25
    3ec6:	87 95       	ror	r24
    3ec8:	97 f9       	bld	r25, 7
    3eca:	08 95       	ret

00003ecc <__fp_norm2>:
    3ecc:	91 50       	subi	r25, 0x01	; 1
    3ece:	50 40       	sbci	r21, 0x00	; 0
    3ed0:	66 0f       	add	r22, r22
    3ed2:	77 1f       	adc	r23, r23
    3ed4:	88 1f       	adc	r24, r24
    3ed6:	d2 f7       	brpl	.-12     	; 0x3ecc <__fp_norm2>
    3ed8:	08 95       	ret

00003eda <__divmodhi4>:
    3eda:	97 fb       	bst	r25, 7
    3edc:	07 2e       	mov	r0, r23
    3ede:	16 f4       	brtc	.+4      	; 0x3ee4 <__divmodhi4+0xa>
    3ee0:	00 94       	com	r0
    3ee2:	07 d0       	rcall	.+14     	; 0x3ef2 <__divmodhi4_neg1>
    3ee4:	77 fd       	sbrc	r23, 7
    3ee6:	09 d0       	rcall	.+18     	; 0x3efa <__divmodhi4_neg2>
    3ee8:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__udivmodhi4>
    3eec:	07 fc       	sbrc	r0, 7
    3eee:	05 d0       	rcall	.+10     	; 0x3efa <__divmodhi4_neg2>
    3ef0:	3e f4       	brtc	.+14     	; 0x3f00 <__divmodhi4_exit>

00003ef2 <__divmodhi4_neg1>:
    3ef2:	90 95       	com	r25
    3ef4:	81 95       	neg	r24
    3ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef8:	08 95       	ret

00003efa <__divmodhi4_neg2>:
    3efa:	70 95       	com	r23
    3efc:	61 95       	neg	r22
    3efe:	7f 4f       	sbci	r23, 0xFF	; 255

00003f00 <__divmodhi4_exit>:
    3f00:	08 95       	ret

00003f02 <__tablejump2__>:
    3f02:	ee 0f       	add	r30, r30
    3f04:	ff 1f       	adc	r31, r31

00003f06 <__tablejump__>:
    3f06:	05 90       	lpm	r0, Z+
    3f08:	f4 91       	lpm	r31, Z
    3f0a:	e0 2d       	mov	r30, r0
    3f0c:	09 94       	ijmp

00003f0e <__udivmodhi4>:
    3f0e:	aa 1b       	sub	r26, r26
    3f10:	bb 1b       	sub	r27, r27
    3f12:	51 e1       	ldi	r21, 0x11	; 17
    3f14:	07 c0       	rjmp	.+14     	; 0x3f24 <__udivmodhi4_ep>

00003f16 <__udivmodhi4_loop>:
    3f16:	aa 1f       	adc	r26, r26
    3f18:	bb 1f       	adc	r27, r27
    3f1a:	a6 17       	cp	r26, r22
    3f1c:	b7 07       	cpc	r27, r23
    3f1e:	10 f0       	brcs	.+4      	; 0x3f24 <__udivmodhi4_ep>
    3f20:	a6 1b       	sub	r26, r22
    3f22:	b7 0b       	sbc	r27, r23

00003f24 <__udivmodhi4_ep>:
    3f24:	88 1f       	adc	r24, r24
    3f26:	99 1f       	adc	r25, r25
    3f28:	5a 95       	dec	r21
    3f2a:	a9 f7       	brne	.-22     	; 0x3f16 <__udivmodhi4_loop>
    3f2c:	80 95       	com	r24
    3f2e:	90 95       	com	r25
    3f30:	bc 01       	movw	r22, r24
    3f32:	cd 01       	movw	r24, r26
    3f34:	08 95       	ret

00003f36 <__itoa_ncheck>:
    3f36:	bb 27       	eor	r27, r27
    3f38:	4a 30       	cpi	r20, 0x0A	; 10
    3f3a:	31 f4       	brne	.+12     	; 0x3f48 <__itoa_ncheck+0x12>
    3f3c:	99 23       	and	r25, r25
    3f3e:	22 f4       	brpl	.+8      	; 0x3f48 <__itoa_ncheck+0x12>
    3f40:	bd e2       	ldi	r27, 0x2D	; 45
    3f42:	90 95       	com	r25
    3f44:	81 95       	neg	r24
    3f46:	9f 4f       	sbci	r25, 0xFF	; 255
    3f48:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <__utoa_common>

00003f4c <__utoa_ncheck>:
    3f4c:	bb 27       	eor	r27, r27

00003f4e <__utoa_common>:
    3f4e:	fb 01       	movw	r30, r22
    3f50:	55 27       	eor	r21, r21
    3f52:	aa 27       	eor	r26, r26
    3f54:	88 0f       	add	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	aa 1f       	adc	r26, r26
    3f5a:	a4 17       	cp	r26, r20
    3f5c:	10 f0       	brcs	.+4      	; 0x3f62 <__utoa_common+0x14>
    3f5e:	a4 1b       	sub	r26, r20
    3f60:	83 95       	inc	r24
    3f62:	50 51       	subi	r21, 0x10	; 16
    3f64:	b9 f7       	brne	.-18     	; 0x3f54 <__utoa_common+0x6>
    3f66:	a0 5d       	subi	r26, 0xD0	; 208
    3f68:	aa 33       	cpi	r26, 0x3A	; 58
    3f6a:	08 f0       	brcs	.+2      	; 0x3f6e <__utoa_common+0x20>
    3f6c:	a9 5d       	subi	r26, 0xD9	; 217
    3f6e:	a1 93       	st	Z+, r26
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	79 f7       	brne	.-34     	; 0x3f52 <__utoa_common+0x4>
    3f74:	b1 11       	cpse	r27, r1
    3f76:	b1 93       	st	Z+, r27
    3f78:	11 92       	st	Z+, r1
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <strrev>

00003f80 <strrev>:
    3f80:	dc 01       	movw	r26, r24
    3f82:	fc 01       	movw	r30, r24
    3f84:	67 2f       	mov	r22, r23
    3f86:	71 91       	ld	r23, Z+
    3f88:	77 23       	and	r23, r23
    3f8a:	e1 f7       	brne	.-8      	; 0x3f84 <strrev+0x4>
    3f8c:	32 97       	sbiw	r30, 0x02	; 2
    3f8e:	04 c0       	rjmp	.+8      	; 0x3f98 <strrev+0x18>
    3f90:	7c 91       	ld	r23, X
    3f92:	6d 93       	st	X+, r22
    3f94:	70 83       	st	Z, r23
    3f96:	62 91       	ld	r22, -Z
    3f98:	ae 17       	cp	r26, r30
    3f9a:	bf 07       	cpc	r27, r31
    3f9c:	c8 f3       	brcs	.-14     	; 0x3f90 <strrev+0x10>
    3f9e:	08 95       	ret

00003fa0 <_exit>:
    3fa0:	f8 94       	cli

00003fa2 <__stop_program>:
    3fa2:	ff cf       	rjmp	.-2      	; 0x3fa2 <__stop_program>

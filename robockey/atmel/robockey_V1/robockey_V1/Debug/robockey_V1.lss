
robockey_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000359c  00003630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000359c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800136  00800136  00003666  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003666  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003373  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca6  00000000  00000000  00006cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001219  00000000  00000000  00007979  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f8  00000000  00000000  00008b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094b  00000000  00000000  0000948c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b2f  00000000  00000000  00009dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000d906  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 01 	jmp	0x356	; 0x356 <__ctors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       c:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__vector_3>
      10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      18:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      28:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_10>
      2c:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__vector_11>
      30:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      34:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      38:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      4c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      50:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      60:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      74:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_29>
      78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      7c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      80:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      8c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      90:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      94:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      98:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ac:	b4 04       	cpc	r11, r4
      ae:	c5 04       	cpc	r12, r5
      b0:	d6 04       	cpc	r13, r6
      b2:	e7 04       	cpc	r14, r7
      b4:	f8 04       	cpc	r15, r8
      b6:	09 05       	cpc	r16, r9
      b8:	1a 05       	cpc	r17, r10
      ba:	8a 15       	cp	r24, r10
      bc:	95 15       	cp	r25, r5
      be:	a0 15       	cp	r26, r0
      c0:	b3 15       	cp	r27, r3
      c2:	c6 15       	cp	r28, r6
      c4:	1b 16       	cp	r1, r27
      c6:	cf 15       	cp	r28, r15
      c8:	d8 15       	cp	r29, r8
      ca:	1b 16       	cp	r1, r27
      cc:	e1 15       	cp	r30, r1
      ce:	07 2c       	mov	r0, r7
      d0:	7a a5       	ldd	r23, Y+42	; 0x2a
      d2:	ba 6c       	ori	r27, 0xCA	; 202
      d4:	c5 90       	lpm	r12, Z+
      d6:	da 3b       	cpi	r29, 0xBA	; 186
      d8:	93 65       	ori	r25, 0x53	; 83
      da:	fc 8b       	std	Y+20, r31	; 0x14
      dc:	bc 53       	subi	r27, 0x3C	; 60
      de:	f8 10       	cpse	r15, r8
      e0:	fd 3c       	cpi	r31, 0xCD	; 205
      e2:	56 92       	lac	Z, r5
      e4:	83 4d       	sbci	r24, 0xD3	; 211
      e6:	bd 87       	std	Y+13, r27	; 0x0d
      e8:	9d 3a       	cpi	r25, 0xAD	; 173
      ea:	b6 3d       	cpi	r27, 0xD6	; 214
      ec:	cb c9       	rjmp	.-3178   	; 0xfffff484 <__eeprom_end+0xff7ef484>
      ee:	bf 5b       	subi	r27, 0xBF	; 191
      f0:	be 73       	andi	r27, 0x3E	; 62
      f2:	da 0f       	add	r29, r26
      f4:	c9 3f       	cpi	r28, 0xF9	; 249

000000f6 <__trampolines_end>:
      f6:	44 6f       	ori	r20, 0xF4	; 244
      f8:	6e 65       	ori	r22, 0x5E	; 94
      fa:	20 0a       	sbc	r2, r16
	...

000000fd <__c.2101>:
      fd:	67 65 74 20 74 68 65 20 70 75 63 6b 20 0a 00        get the puck ..

0000010c <__c.2083>:
     10c:	0d 0a 00                                            ...

0000010f <__c.2081>:
     10f:	6f 75 74 70 75 74 3d 00                             output=.

00000117 <__c.2079>:
     117:	0d 0a 00                                            ...

0000011a <__c.2077>:
     11a:	73 75 6d 3d 00                                      sum=.

0000011f <__c.2075>:
     11f:	0d 0a 00                                            ...

00000122 <__c.2073>:
     122:	49 6e 70 75 74 3d 00                                Input=.

00000129 <__c.2064>:
     129:	73 74 72 61 69 67 68 74 0a 00                       straight..

00000133 <__c.2062>:
     133:	50 49 44 0a 00                                      PID..

00000138 <__c.2060>:
     138:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000144 <__c.2058>:
     144:	50 49 44 0a 00                                      PID..

00000149 <__c.2056>:
     149:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000154 <__c.2052>:
     154:	0d 0a 00                                            ...

00000157 <__c.2050>:
     157:	50 68 6f 5b 36 5d 00                                Pho[6].

0000015e <__c.2048>:
     15e:	0d 0a 00                                            ...

00000161 <__c.2046>:
     161:	50 68 6f 5b 35 5d 00                                Pho[5].

00000168 <__c.2044>:
     168:	0d 0a 00                                            ...

0000016b <__c.2042>:
     16b:	50 68 6f 5b 34 5d 00                                Pho[4].

00000172 <__c.2040>:
     172:	0d 0a 00                                            ...

00000175 <__c.2038>:
     175:	50 68 6f 5b 33 5d 00                                Pho[3].

0000017c <__c.2036>:
     17c:	0d 0a 00                                            ...

0000017f <__c.2034>:
     17f:	50 68 6f 5b 32 5d 00                                Pho[2].

00000186 <__c.2032>:
     186:	0d 0a 00                                            ...

00000189 <__c.2030>:
     189:	50 68 6f 5b 31 5d 00                                Pho[1].

00000190 <__c.2028>:
     190:	0d 0a 00                                            ...

00000193 <__c.2026>:
     193:	50 68 6f 5b 30 5d 00                                Pho[0].

0000019a <__c.2024>:
     19a:	0d 0a 00                                            ...

0000019d <__c.2142>:
     19d:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001a8 <__c.2140>:
     1a8:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001b4 <__c.2138>:
     1b4:	0a 00                                               ..

000001b6 <__c.2136>:
     1b6:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

000001c0 <__c.2134>:
     1c0:	0a 00                                               ..

000001c2 <__c.2132>:
     1c2:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

000001cd <__c.2122>:
     1cd:	0a 00                                               ..

000001cf <__c.2120>:
     1cf:	61 6c 70 68 61 3a 20 00                             alpha: .

000001d7 <__c.2096>:
     1d7:	0a 00                                               ..

000001d9 <__c.2094>:
     1d9:	09 76 79 3a 20 30 2e 00                             .vy: 0..

000001e1 <__c.2092>:
     1e1:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

000001f2 <__c.2090>:
     1f2:	0a 00                                               ..

000001f4 <__c.2088>:
     1f4:	09 09 79 3a 00                                      ..y:.

000001f9 <__c.2086>:
     1f9:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000205 <descriptor_list>:
     205:	00 01 00 00 9c 02 12 00 02 00 00 59 02 43 00 03     ...........Y.C..
     215:	00 00 55 02 04 01 03 09 04 41 02 12 02 03 09 04     ..U......A......
     225:	39 02 06 03 03 09 04 2f 02 08                       9....../..

0000022f <string3>:
     22f:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000239 <string2>:
     239:	06 03 4d 00 32 00 00 00                             ..M.2...

00000241 <string1>:
     241:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     251:	65 00 00 00                                         e...

00000255 <string0>:
     255:	04 03 09 04                                         ....

00000259 <config1_descriptor>:
     259:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     269:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     279:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     289:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     299:	40 00 00                                            @..

0000029c <device_descriptor>:
     29c:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2ac:	03 01                                               ..

000002ae <endpoint_config_table>:
     2ae:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000002b8 <__c.2112>:
     2b8:	0a 00                                               ..

000002ba <__c.2110>:
     2ba:	09 09 79 3a 00                                      ..y:.

000002bf <__c.2108>:
     2bf:	49 74 73 20 6c 6f 63 61 74 69 6f 6e 20 69 73 3a     Its location is:
     2cf:	20 00                                                .

000002d1 <__c.2106>:
     2d1:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

000002e0 <__c.2104>:
     2e0:	4e 6f 2e 20 00                                      No. .

000002e5 <__c.2101>:
     2e5:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

000002f0 <__c.2098>:
     2f0:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

000002fa <__c.2095>:
     2fa:	50 61 75 73 65 0a 00                                Pause..

00000301 <__c.2092>:
     301:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000309 <__c.2089>:
     309:	47 6f 61 6c 20 41 0a 00                             Goal A..

00000311 <__c.2086>:
     311:	50 6c 61 79 20 0a 00                                Play ..

00000318 <__c.2082>:
     318:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

00000324 <__c.2073>:
     324:	0a 00                                               ..

00000326 <__c.2071>:
     326:	2c 20 00                                            , .

00000329 <__c.2069>:
     329:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

00000332 <__c.2066>:
     332:	0a 00                                               ..

00000334 <__c.2064>:
     334:	67 6f 61 6c 5b 30 5d 3d 00                          goal[0]=.

0000033d <__c.2062>:
     33d:	73 65 6e 64 20 6d 65 73 73 73 61 67 65 0a 00        send messsage..

0000034c <__c.2055>:
     34c:	0a 00                                               ..

0000034e <__c.2053>:
     34e:	73 74 61 74 65 3a 20 00                             state: .

00000356 <__ctors_end>:
     356:	11 24       	eor	r1, r1
     358:	1f be       	out	0x3f, r1	; 63
     35a:	cf ef       	ldi	r28, 0xFF	; 255
     35c:	da e0       	ldi	r29, 0x0A	; 10
     35e:	de bf       	out	0x3e, r29	; 62
     360:	cd bf       	out	0x3d, r28	; 61

00000362 <__do_copy_data>:
     362:	11 e0       	ldi	r17, 0x01	; 1
     364:	a0 e0       	ldi	r26, 0x00	; 0
     366:	b1 e0       	ldi	r27, 0x01	; 1
     368:	ec e9       	ldi	r30, 0x9C	; 156
     36a:	f5 e3       	ldi	r31, 0x35	; 53
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__do_copy_data+0x10>
     36e:	05 90       	lpm	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	a6 33       	cpi	r26, 0x36	; 54
     374:	b1 07       	cpc	r27, r17
     376:	d9 f7       	brne	.-10     	; 0x36e <__do_copy_data+0xc>

00000378 <__do_clear_bss>:
     378:	21 e0       	ldi	r18, 0x01	; 1
     37a:	a6 e3       	ldi	r26, 0x36	; 54
     37c:	b1 e0       	ldi	r27, 0x01	; 1
     37e:	01 c0       	rjmp	.+2      	; 0x382 <.do_clear_bss_start>

00000380 <.do_clear_bss_loop>:
     380:	1d 92       	st	X+, r1

00000382 <.do_clear_bss_start>:
     382:	aa 3a       	cpi	r26, 0xAA	; 170
     384:	b2 07       	cpc	r27, r18
     386:	e1 f7       	brne	.-8      	; 0x380 <.do_clear_bss_loop>
     388:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <main>
     38c:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <_exit>

00000390 <__bad_interrupt>:
     390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000394 <send_message>:
 */ 

#include "communication.h"


void send_message(int state, int num, char *buffer, float *c_wii){
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
	switch(state){ 
     39c:	03 97       	sbiw	r24, 0x03	; 3
     39e:	c9 f5       	brne	.+114    	; 0x412 <send_message+0x7e>
     3a0:	89 01       	movw	r16, r18
     3a2:	ea 01       	movw	r28, r20
		case 3:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xA9;
     3a4:	89 ea       	ldi	r24, 0xA9	; 169
     3a6:	88 83       	st	Y, r24
			buffer[1] = num;
     3a8:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     3aa:	f9 01       	movw	r30, r18
     3ac:	60 81       	ld	r22, Z
     3ae:	71 81       	ldd	r23, Z+1	; 0x01
     3b0:	82 81       	ldd	r24, Z+2	; 0x02
     3b2:	93 81       	ldd	r25, Z+3	; 0x03
     3b4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__fixunssfsi>
     3b8:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     3ba:	f8 01       	movw	r30, r16
     3bc:	60 81       	ld	r22, Z
     3be:	71 81       	ldd	r23, Z+1	; 0x01
     3c0:	82 81       	ldd	r24, Z+2	; 0x02
     3c2:	93 81       	ldd	r25, Z+3	; 0x03
     3c4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__fixunssfsi>
     3c8:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     3ca:	f8 01       	movw	r30, r16
     3cc:	64 81       	ldd	r22, Z+4	; 0x04
     3ce:	75 81       	ldd	r23, Z+5	; 0x05
     3d0:	86 81       	ldd	r24, Z+6	; 0x06
     3d2:	97 81       	ldd	r25, Z+7	; 0x07
     3d4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__fixunssfsi>
     3d8:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     3da:	f8 01       	movw	r30, r16
     3dc:	64 81       	ldd	r22, Z+4	; 0x04
     3de:	75 81       	ldd	r23, Z+5	; 0x05
     3e0:	86 81       	ldd	r24, Z+6	; 0x06
     3e2:	97 81       	ldd	r25, Z+7	; 0x07
     3e4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__fixunssfsi>
     3e8:	7d 83       	std	Y+5, r23	; 0x05
			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     3ea:	4a e0       	ldi	r20, 0x0A	; 10
     3ec:	be 01       	movw	r22, r28
     3ee:	8d e0       	ldi	r24, 0x0D	; 13
     3f0:	0e 94 a2 10 	call	0x2144	; 0x2144 <m_rf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f4:	83 ec       	ldi	r24, 0xC3	; 195
     3f6:	99 e0       	ldi	r25, 0x09	; 9
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <send_message+0x64>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <send_message+0x6a>
     3fe:	00 00       	nop
			m_wait(10);
			m_rf_send(TXADDRESS2,buffer,PACKET_LENGTH);
     400:	4a e0       	ldi	r20, 0x0A	; 10
     402:	be 01       	movw	r22, r28
     404:	8e e0       	ldi	r24, 0x0E	; 14
     406:	0e 94 a2 10 	call	0x2144	; 0x2144 <m_rf_send>
			usb_tx_string("Done \n");
     40a:	86 ef       	ldi	r24, 0xF6	; 246
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <init_ADC>:
int input_last=0;
int output;
int sum_Pho = 0;
int diff_Pho = 0;

void init_ADC(void){
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     420:	ac e7       	ldi	r26, 0x7C	; 124
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	8c 91       	ld	r24, X
     426:	8f 77       	andi	r24, 0x7F	; 127
     428:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     42a:	8c 91       	ld	r24, X
     42c:	80 64       	ori	r24, 0x40	; 64
     42e:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     430:	ea e7       	ldi	r30, 0x7A	; 122
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	84 60       	ori	r24, 0x04	; 4
     438:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     43a:	80 81       	ld	r24, Z
     43c:	82 60       	ori	r24, 0x02	; 2
     43e:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     440:	80 81       	ld	r24, Z
     442:	81 60       	ori	r24, 0x01	; 1
     444:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     446:	ce e7       	ldi	r28, 0x7E	; 126
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	88 81       	ld	r24, Y
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     450:	88 81       	ld	r24, Y
     452:	82 60       	ori	r24, 0x02	; 2
     454:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     456:	cd e7       	ldi	r28, 0x7D	; 125
     458:	d0 e0       	ldi	r29, 0x00	; 0
     45a:	88 81       	ld	r24, Y
     45c:	82 60       	ori	r24, 0x02	; 2
     45e:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     460:	88 81       	ld	r24, Y
     462:	84 60       	ori	r24, 0x04	; 4
     464:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     466:	88 81       	ld	r24, Y
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     46c:	88 81       	ld	r24, Y
     46e:	80 61       	ori	r24, 0x10	; 16
     470:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     472:	88 81       	ld	r24, Y
     474:	81 60       	ori	r24, 0x01	; 1
     476:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     478:	cb e7       	ldi	r28, 0x7B	; 123
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	88 81       	ld	r24, Y
     47e:	8f 7d       	andi	r24, 0xDF	; 223
     480:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     482:	8c 91       	ld	r24, X
     484:	8b 7f       	andi	r24, 0xFB	; 251
     486:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     488:	8c 91       	ld	r24, X
     48a:	8d 7f       	andi	r24, 0xFD	; 253
     48c:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     48e:	8c 91       	ld	r24, X
     490:	8e 7f       	andi	r24, 0xFE	; 254
     492:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     494:	80 81       	ld	r24, Z
     496:	80 62       	ori	r24, 0x20	; 32
     498:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     49a:	80 81       	ld	r24, Z
     49c:	88 60       	ori	r24, 0x08	; 8
     49e:	80 83       	st	Z, r24
	sei();
     4a0:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     4a2:	80 81       	ld	r24, Z
     4a4:	80 68       	ori	r24, 0x80	; 128
     4a6:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     4a8:	80 81       	ld	r24, Z
     4aa:	80 64       	ori	r24, 0x40	; 64
     4ac:	80 83       	st	Z, r24
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <PID_Pho>:
			OCR1C = full_speed;
		}
	}
}

void PID_Pho(float Kp, float Ki, float Kd) {
     4b4:	4f 92       	push	r4
     4b6:	5f 92       	push	r5
     4b8:	6f 92       	push	r6
     4ba:	7f 92       	push	r7
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	2b 01       	movw	r4, r22
     4d2:	3c 01       	movw	r6, r24
     4d4:	49 01       	movw	r8, r18
     4d6:	5a 01       	movw	r10, r20
     4d8:	67 01       	movw	r12, r14
     4da:	78 01       	movw	r14, r16
	int sum02 = Pho[0] + Pho[2];
     4dc:	ee e3       	ldi	r30, 0x3E	; 62
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	20 81       	ld	r18, Z
     4e2:	31 81       	ldd	r19, Z+1	; 0x01
     4e4:	84 81       	ldd	r24, Z+4	; 0x04
     4e6:	95 81       	ldd	r25, Z+5	; 0x05
     4e8:	82 0f       	add	r24, r18
     4ea:	93 1f       	adc	r25, r19
	int sum13 = Pho[1] + Pho[3];
     4ec:	42 81       	ldd	r20, Z+2	; 0x02
     4ee:	53 81       	ldd	r21, Z+3	; 0x03
     4f0:	26 81       	ldd	r18, Z+6	; 0x06
     4f2:	37 81       	ldd	r19, Z+7	; 0x07
     4f4:	24 0f       	add	r18, r20
     4f6:	35 1f       	adc	r19, r21
	input = sum02 - sum13;
     4f8:	82 1b       	sub	r24, r18
     4fa:	93 0b       	sbc	r25, r19
     4fc:	90 93 a7 01 	sts	0x01A7, r25
     500:	80 93 a6 01 	sts	0x01A6, r24
	m_usb_tx_string("Input=");
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(input);
     50c:	80 91 a6 01 	lds	r24, 0x01A6
     510:	90 91 a7 01 	lds	r25, 0x01A7
     514:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     518:	8f e1       	ldi	r24, 0x1F	; 31
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	diff_Pho = input - input_last;
     520:	80 91 a6 01 	lds	r24, 0x01A6
     524:	90 91 a7 01 	lds	r25, 0x01A7
     528:	20 91 3a 01 	lds	r18, 0x013A
     52c:	30 91 3b 01 	lds	r19, 0x013B
     530:	ac 01       	movw	r20, r24
     532:	42 1b       	sub	r20, r18
     534:	53 0b       	sbc	r21, r19
     536:	50 93 37 01 	sts	0x0137, r21
     53a:	40 93 36 01 	sts	0x0136, r20
	sum_Pho = sum_Pho + input;
     53e:	20 91 38 01 	lds	r18, 0x0138
     542:	30 91 39 01 	lds	r19, 0x0139
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
     54a:	90 93 39 01 	sts	0x0139, r25
     54e:	80 93 38 01 	sts	0x0138, r24
	m_usb_tx_string("sum=");
     552:	8a e1       	ldi	r24, 0x1A	; 26
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(sum_Pho);
     55a:	80 91 38 01 	lds	r24, 0x0138
     55e:	90 91 39 01 	lds	r25, 0x0139
     562:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     566:	87 e1       	ldi	r24, 0x17	; 23
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>

	output = Kp * input + Ki*sum_Pho + Kd * diff_Pho;
     56e:	60 91 a6 01 	lds	r22, 0x01A6
     572:	70 91 a7 01 	lds	r23, 0x01A7
     576:	07 2e       	mov	r0, r23
     578:	00 0c       	add	r0, r0
     57a:	88 0b       	sbc	r24, r24
     57c:	99 0b       	sbc	r25, r25
     57e:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
     582:	a3 01       	movw	r20, r6
     584:	92 01       	movw	r18, r4
     586:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     58a:	2b 01       	movw	r4, r22
     58c:	3c 01       	movw	r6, r24
     58e:	60 91 38 01 	lds	r22, 0x0138
     592:	70 91 39 01 	lds	r23, 0x0139
     596:	07 2e       	mov	r0, r23
     598:	00 0c       	add	r0, r0
     59a:	88 0b       	sbc	r24, r24
     59c:	99 0b       	sbc	r25, r25
     59e:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
     5a2:	a5 01       	movw	r20, r10
     5a4:	94 01       	movw	r18, r8
     5a6:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	c3 01       	movw	r24, r6
     5b0:	b2 01       	movw	r22, r4
     5b2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     5b6:	4b 01       	movw	r8, r22
     5b8:	5c 01       	movw	r10, r24
     5ba:	80 91 36 01 	lds	r24, 0x0136
     5be:	90 91 37 01 	lds	r25, 0x0137
     5c2:	bc 01       	movw	r22, r24
     5c4:	99 0f       	add	r25, r25
     5c6:	88 0b       	sbc	r24, r24
     5c8:	99 0b       	sbc	r25, r25
     5ca:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
     5ce:	a7 01       	movw	r20, r14
     5d0:	96 01       	movw	r18, r12
     5d2:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     5d6:	9b 01       	movw	r18, r22
     5d8:	ac 01       	movw	r20, r24
     5da:	c5 01       	movw	r24, r10
     5dc:	b4 01       	movw	r22, r8
     5de:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     5e2:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
     5e6:	70 93 a5 01 	sts	0x01A5, r23
     5ea:	60 93 a4 01 	sts	0x01A4, r22
	m_usb_tx_string("output=");
     5ee:	8f e0       	ldi	r24, 0x0F	; 15
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(output);
     5f6:	80 91 a4 01 	lds	r24, 0x01A4
     5fa:	90 91 a5 01 	lds	r25, 0x01A5
     5fe:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     602:	8c e0       	ldi	r24, 0x0C	; 12
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	
	input_last = input;
     60a:	80 91 a6 01 	lds	r24, 0x01A6
     60e:	90 91 a7 01 	lds	r25, 0x01A7
     612:	90 93 3b 01 	sts	0x013B, r25
     616:	80 93 3a 01 	sts	0x013A, r24
	
	if(output>0){
     61a:	80 91 a4 01 	lds	r24, 0x01A4
     61e:	90 91 a5 01 	lds	r25, 0x01A5
     622:	18 16       	cp	r1, r24
     624:	19 06       	cpc	r1, r25
     626:	44 f5       	brge	.+80     	; 0x678 <PID_Pho+0x1c4>
		OCR1C=full_speed-abs(output);
     628:	9c 01       	movw	r18, r24
     62a:	99 23       	and	r25, r25
     62c:	24 f4       	brge	.+8      	; 0x636 <PID_Pho+0x182>
     62e:	22 27       	eor	r18, r18
     630:	33 27       	eor	r19, r19
     632:	28 1b       	sub	r18, r24
     634:	39 0b       	sbc	r19, r25
     636:	85 ef       	ldi	r24, 0xF5	; 245
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	82 1b       	sub	r24, r18
     63c:	93 0b       	sbc	r25, r19
     63e:	90 93 8d 00 	sts	0x008D, r25
     642:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > (full_speed-50)){
     646:	80 91 a4 01 	lds	r24, 0x01A4
     64a:	90 91 a5 01 	lds	r25, 0x01A5
     64e:	99 23       	and	r25, r25
     650:	1c f4       	brge	.+6      	; 0x658 <PID_Pho+0x1a4>
     652:	91 95       	neg	r25
     654:	81 95       	neg	r24
     656:	91 09       	sbc	r25, r1
     658:	84 3c       	cpi	r24, 0xC4	; 196
     65a:	91 05       	cpc	r25, r1
     65c:	34 f0       	brlt	.+12     	; 0x66a <PID_Pho+0x1b6>
			OCR1C = 50;
     65e:	82 e3       	ldi	r24, 0x32	; 50
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	90 93 8d 00 	sts	0x008D, r25
     666:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B=full_speed;
     66a:	85 ef       	ldi	r24, 0xF5	; 245
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	90 93 8b 00 	sts	0x008B, r25
     672:	80 93 8a 00 	sts	0x008A, r24
     676:	27 c0       	rjmp	.+78     	; 0x6c6 <PID_Pho+0x212>
		
	}
	else{
		OCR1B=full_speed-abs(output);
     678:	9c 01       	movw	r18, r24
     67a:	99 23       	and	r25, r25
     67c:	24 f4       	brge	.+8      	; 0x686 <PID_Pho+0x1d2>
     67e:	22 27       	eor	r18, r18
     680:	33 27       	eor	r19, r19
     682:	28 1b       	sub	r18, r24
     684:	39 0b       	sbc	r19, r25
     686:	85 ef       	ldi	r24, 0xF5	; 245
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	82 1b       	sub	r24, r18
     68c:	93 0b       	sbc	r25, r19
     68e:	90 93 8b 00 	sts	0x008B, r25
     692:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > (full_speed-50)){
     696:	80 91 a4 01 	lds	r24, 0x01A4
     69a:	90 91 a5 01 	lds	r25, 0x01A5
     69e:	99 23       	and	r25, r25
     6a0:	1c f4       	brge	.+6      	; 0x6a8 <PID_Pho+0x1f4>
     6a2:	91 95       	neg	r25
     6a4:	81 95       	neg	r24
     6a6:	91 09       	sbc	r25, r1
     6a8:	84 3c       	cpi	r24, 0xC4	; 196
     6aa:	91 05       	cpc	r25, r1
     6ac:	34 f0       	brlt	.+12     	; 0x6ba <PID_Pho+0x206>
			OCR1B = 50;
     6ae:	82 e3       	ldi	r24, 0x32	; 50
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	90 93 8b 00 	sts	0x008B, r25
     6b6:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C=full_speed;
     6ba:	85 ef       	ldi	r24, 0xF5	; 245
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	90 93 8d 00 	sts	0x008D, r25
     6c2:	80 93 8c 00 	sts	0x008C, r24
	}
}
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	bf 90       	pop	r11
     6d4:	af 90       	pop	r10
     6d6:	9f 90       	pop	r9
     6d8:	8f 90       	pop	r8
     6da:	7f 90       	pop	r7
     6dc:	6f 90       	pop	r6
     6de:	5f 90       	pop	r5
     6e0:	4f 90       	pop	r4
     6e2:	08 95       	ret

000006e4 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     6e4:	8f 92       	push	r8
     6e6:	9f 92       	push	r9
     6e8:	af 92       	push	r10
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
	m_usb_tx_string("\r\n");
     6fc:	8a e9       	ldi	r24, 0x9A	; 154
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_string("Pho[0]");
     704:	83 e9       	ldi	r24, 0x93	; 147
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(Pho[0]);
     70c:	ce e3       	ldi	r28, 0x3E	; 62
     70e:	d1 e0       	ldi	r29, 0x01	; 1
     710:	88 81       	ld	r24, Y
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     718:	80 e9       	ldi	r24, 0x90	; 144
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_string("Pho[1]");
     720:	89 e8       	ldi	r24, 0x89	; 137
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(Pho[1]);
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	9b 81       	ldd	r25, Y+3	; 0x03
     72c:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     730:	86 e8       	ldi	r24, 0x86	; 134
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_string("Pho[2]");
     738:	8f e7       	ldi	r24, 0x7F	; 127
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(Pho[2]);
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	9d 81       	ldd	r25, Y+5	; 0x05
     744:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     748:	8c e7       	ldi	r24, 0x7C	; 124
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_string("Pho[3]");
     750:	85 e7       	ldi	r24, 0x75	; 117
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(Pho[3]);
     758:	8e 81       	ldd	r24, Y+6	; 0x06
     75a:	9f 81       	ldd	r25, Y+7	; 0x07
     75c:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     760:	82 e7       	ldi	r24, 0x72	; 114
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_string("Pho[4]");
     768:	8b e6       	ldi	r24, 0x6B	; 107
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(Pho[4]);
     770:	88 85       	ldd	r24, Y+8	; 0x08
     772:	99 85       	ldd	r25, Y+9	; 0x09
     774:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     778:	88 e6       	ldi	r24, 0x68	; 104
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_string("Pho[5]");
     780:	81 e6       	ldi	r24, 0x61	; 97
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(Pho[5]);
     788:	8a 85       	ldd	r24, Y+10	; 0x0a
     78a:	9b 85       	ldd	r25, Y+11	; 0x0b
     78c:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     790:	8e e5       	ldi	r24, 0x5E	; 94
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_string("Pho[6]");
     798:	87 e5       	ldi	r24, 0x57	; 87
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(Pho[6]);
     7a0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7a2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7a4:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7a8:	84 e5       	ldi	r24, 0x54	; 84
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     7b0:	ec 80       	ldd	r14, Y+4	; 0x04
     7b2:	fd 80       	ldd	r15, Y+5	; 0x05
     7b4:	08 85       	ldd	r16, Y+8	; 0x08
     7b6:	19 85       	ldd	r17, Y+9	; 0x09
     7b8:	88 81       	ld	r24, Y
     7ba:	99 81       	ldd	r25, Y+1	; 0x01
     7bc:	8e 0d       	add	r24, r14
     7be:	9f 1d       	adc	r25, r15
     7c0:	80 0f       	add	r24, r16
     7c2:	91 1f       	adc	r25, r17
     7c4:	e3 e0       	ldi	r30, 0x03	; 3
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	bf 01       	movw	r22, r30
     7ca:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__divmodhi4>
     7ce:	9b 01       	movw	r18, r22
     7d0:	4b 01       	movw	r8, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     7d2:	ae 80       	ldd	r10, Y+6	; 0x06
     7d4:	bf 80       	ldd	r11, Y+7	; 0x07
     7d6:	ca 84       	ldd	r12, Y+10	; 0x0a
     7d8:	db 84       	ldd	r13, Y+11	; 0x0b
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	9b 81       	ldd	r25, Y+3	; 0x03
     7de:	8a 0d       	add	r24, r10
     7e0:	9b 1d       	adc	r25, r11
     7e2:	8c 0d       	add	r24, r12
     7e4:	9d 1d       	adc	r25, r13
     7e6:	bf 01       	movw	r22, r30
     7e8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__divmodhi4>
     7ec:	cb 01       	movw	r24, r22
	
	if(mean024 - mean135> 50 || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     7ee:	a9 01       	movw	r20, r18
     7f0:	46 1b       	sub	r20, r22
     7f2:	57 0b       	sbc	r21, r23
     7f4:	43 33       	cpi	r20, 0x33	; 51
     7f6:	51 05       	cpc	r21, r1
     7f8:	34 f4       	brge	.+12     	; 0x806 <findPuck+0x122>
     7fa:	62 17       	cp	r22, r18
     7fc:	73 07       	cpc	r23, r19
     7fe:	6c f5       	brge	.+90     	; 0x85a <findPuck+0x176>
     800:	e0 16       	cp	r14, r16
     802:	f1 06       	cpc	r15, r17
     804:	54 f5       	brge	.+84     	; 0x85a <findPuck+0x176>
		m_usb_tx_string("turn left\n");
     806:	89 e4       	ldi	r24, 0x49	; 73
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		OCR1C = 50;
     80e:	82 e3       	ldi	r24, 0x32	; 50
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	90 93 8d 00 	sts	0x008D, r25
     816:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed;
     81a:	85 ef       	ldi	r24, 0xF5	; 245
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 8b 00 	sts	0x008B, r25
     822:	80 93 8a 00 	sts	0x008A, r24
		if(Pho[2]>Pho[4]){
     826:	ee e3       	ldi	r30, 0x3E	; 62
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	24 81       	ldd	r18, Z+4	; 0x04
     82c:	35 81       	ldd	r19, Z+5	; 0x05
     82e:	80 85       	ldd	r24, Z+8	; 0x08
     830:	91 85       	ldd	r25, Z+9	; 0x09
     832:	82 17       	cp	r24, r18
     834:	93 07       	cpc	r25, r19
     836:	0c f0       	brlt	.+2      	; 0x83a <findPuck+0x156>
     838:	52 c0       	rjmp	.+164    	; 0x8de <findPuck+0x1fa>
			m_usb_tx_string("PID\n");
     83a:	84 e4       	ldi	r24, 0x44	; 68
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			PID_Pho(Kp_Pho, Ki_Pho, Kd_Pho);
     842:	e1 2c       	mov	r14, r1
     844:	f1 2c       	mov	r15, r1
     846:	87 01       	movw	r16, r14
     848:	a8 01       	movw	r20, r16
     84a:	97 01       	movw	r18, r14
     84c:	6d ec       	ldi	r22, 0xCD	; 205
     84e:	7c ec       	ldi	r23, 0xCC	; 204
     850:	8c ec       	ldi	r24, 0xCC	; 204
     852:	9d e3       	ldi	r25, 0x3D	; 61
     854:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PID_Pho>
     858:	42 c0       	rjmp	.+132    	; 0x8de <findPuck+0x1fa>
		}
	}
	
	else {
		if (mean135 - mean024> 50 || (mean135 > mean024 && Pho[5] > Pho[3])){
     85a:	62 1b       	sub	r22, r18
     85c:	73 0b       	sbc	r23, r19
     85e:	63 33       	cpi	r22, 0x33	; 51
     860:	71 05       	cpc	r23, r1
     862:	34 f4       	brge	.+12     	; 0x870 <findPuck+0x18c>
     864:	88 16       	cp	r8, r24
     866:	99 06       	cpc	r9, r25
     868:	64 f5       	brge	.+88     	; 0x8c2 <findPuck+0x1de>
     86a:	ac 14       	cp	r10, r12
     86c:	bd 04       	cpc	r11, r13
     86e:	4c f5       	brge	.+82     	; 0x8c2 <findPuck+0x1de>
			m_usb_tx_string("turn right\n");
     870:	88 e3       	ldi	r24, 0x38	; 56
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			OCR1C = full_speed;
     878:	85 ef       	ldi	r24, 0xF5	; 245
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	90 93 8d 00 	sts	0x008D, r25
     880:	80 93 8c 00 	sts	0x008C, r24
			OCR1B = 50;
     884:	82 e3       	ldi	r24, 0x32	; 50
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	90 93 8b 00 	sts	0x008B, r25
     88c:	80 93 8a 00 	sts	0x008A, r24
			if(Pho[3]>Pho[5]){
     890:	ee e3       	ldi	r30, 0x3E	; 62
     892:	f1 e0       	ldi	r31, 0x01	; 1
     894:	26 81       	ldd	r18, Z+6	; 0x06
     896:	37 81       	ldd	r19, Z+7	; 0x07
     898:	82 85       	ldd	r24, Z+10	; 0x0a
     89a:	93 85       	ldd	r25, Z+11	; 0x0b
     89c:	82 17       	cp	r24, r18
     89e:	93 07       	cpc	r25, r19
     8a0:	f4 f4       	brge	.+60     	; 0x8de <findPuck+0x1fa>
				m_usb_tx_string("PID\n");
     8a2:	83 e3       	ldi	r24, 0x33	; 51
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
				PID_Pho(Kp_Pho, Ki_Pho, Kd_Pho);
     8aa:	e1 2c       	mov	r14, r1
     8ac:	f1 2c       	mov	r15, r1
     8ae:	87 01       	movw	r16, r14
     8b0:	a8 01       	movw	r20, r16
     8b2:	97 01       	movw	r18, r14
     8b4:	6d ec       	ldi	r22, 0xCD	; 205
     8b6:	7c ec       	ldi	r23, 0xCC	; 204
     8b8:	8c ec       	ldi	r24, 0xCC	; 204
     8ba:	9d e3       	ldi	r25, 0x3D	; 61
     8bc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PID_Pho>
     8c0:	0e c0       	rjmp	.+28     	; 0x8de <findPuck+0x1fa>
			}
		}
		else{
			m_usb_tx_string("straight\n");
     8c2:	89 e2       	ldi	r24, 0x29	; 41
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			OCR1B = full_speed;
     8ca:	85 ef       	ldi	r24, 0xF5	; 245
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	90 93 8b 00 	sts	0x008B, r25
     8d2:	80 93 8a 00 	sts	0x008A, r24
			OCR1C = full_speed;
     8d6:	90 93 8d 00 	sts	0x008D, r25
     8da:	80 93 8c 00 	sts	0x008C, r24
		}
	}
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	08 95       	ret

000008f8 <__vector_29>:
		}
		OCR1C=full_speed;
	}
}

ISR(ADC_vect){
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	8f 93       	push	r24
     908:	9f 93       	push	r25
     90a:	ef 93       	push	r30
     90c:	ff 93       	push	r31
	Pho[i]=ADC;
     90e:	80 91 3c 01 	lds	r24, 0x013C
     912:	90 91 3d 01 	lds	r25, 0x013D
     916:	20 91 78 00 	lds	r18, 0x0078
     91a:	30 91 79 00 	lds	r19, 0x0079
     91e:	fc 01       	movw	r30, r24
     920:	ee 0f       	add	r30, r30
     922:	ff 1f       	adc	r31, r31
     924:	e2 5c       	subi	r30, 0xC2	; 194
     926:	fe 4f       	sbci	r31, 0xFE	; 254
     928:	31 83       	std	Z+1, r19	; 0x01
     92a:	20 83       	st	Z, r18
	
	i=i+1;
     92c:	01 96       	adiw	r24, 0x01	; 1
	if(i>7){
     92e:	88 30       	cpi	r24, 0x08	; 8
     930:	91 05       	cpc	r25, r1
     932:	2c f4       	brge	.+10     	; 0x93e <__vector_29+0x46>
}

ISR(ADC_vect){
	Pho[i]=ADC;
	
	i=i+1;
     934:	90 93 3d 01 	sts	0x013D, r25
     938:	80 93 3c 01 	sts	0x013C, r24
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__vector_29+0x4e>
	if(i>7){
		i=0;
     93e:	10 92 3d 01 	sts	0x013D, r1
     942:	10 92 3c 01 	sts	0x013C, r1
	}
	
	clear(ADCSRA, ADEN);
     946:	ea e7       	ldi	r30, 0x7A	; 122
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	8f 77       	andi	r24, 0x7F	; 127
     94e:	80 83       	st	Z, r24
	switch(i){
     950:	e0 91 3c 01 	lds	r30, 0x013C
     954:	f0 91 3d 01 	lds	r31, 0x013D
     958:	e7 30       	cpi	r30, 0x07	; 7
     95a:	f1 05       	cpc	r31, r1
     95c:	08 f0       	brcs	.+2      	; 0x960 <__vector_29+0x68>
     95e:	7a c0       	rjmp	.+244    	; 0xa54 <__vector_29+0x15c>
     960:	ea 5a       	subi	r30, 0xAA	; 170
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     968:	eb e7       	ldi	r30, 0x7B	; 123
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	8f 7d       	andi	r24, 0xDF	; 223
     970:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     972:	ec e7       	ldi	r30, 0x7C	; 124
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	8b 7f       	andi	r24, 0xFB	; 251
     97a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     97c:	80 81       	ld	r24, Z
     97e:	8d 7f       	andi	r24, 0xFD	; 253
     980:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     982:	80 81       	ld	r24, Z
     984:	8e 7f       	andi	r24, 0xFE	; 254
     986:	80 83       	st	Z, r24
			break;
     988:	65 c0       	rjmp	.+202    	; 0xa54 <__vector_29+0x15c>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     98a:	eb e7       	ldi	r30, 0x7B	; 123
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	8f 7d       	andi	r24, 0xDF	; 223
     992:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     994:	ec e7       	ldi	r30, 0x7C	; 124
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	8b 7f       	andi	r24, 0xFB	; 251
     99c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     99e:	80 81       	ld	r24, Z
     9a0:	8d 7f       	andi	r24, 0xFD	; 253
     9a2:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     9a4:	80 81       	ld	r24, Z
     9a6:	81 60       	ori	r24, 0x01	; 1
     9a8:	80 83       	st	Z, r24
			break;
     9aa:	54 c0       	rjmp	.+168    	; 0xa54 <__vector_29+0x15c>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     9ac:	eb e7       	ldi	r30, 0x7B	; 123
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	80 62       	ori	r24, 0x20	; 32
     9b4:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     9b6:	ec e7       	ldi	r30, 0x7C	; 124
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	8b 7f       	andi	r24, 0xFB	; 251
     9be:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     9c0:	80 81       	ld	r24, Z
     9c2:	8d 7f       	andi	r24, 0xFD	; 253
     9c4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     9c6:	80 81       	ld	r24, Z
     9c8:	81 60       	ori	r24, 0x01	; 1
     9ca:	80 83       	st	Z, r24
			break;
     9cc:	43 c0       	rjmp	.+134    	; 0xa54 <__vector_29+0x15c>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     9ce:	eb e7       	ldi	r30, 0x7B	; 123
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	80 62       	ori	r24, 0x20	; 32
     9d6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     9d8:	ec e7       	ldi	r30, 0x7C	; 124
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8b 7f       	andi	r24, 0xFB	; 251
     9e0:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     9e2:	80 81       	ld	r24, Z
     9e4:	82 60       	ori	r24, 0x02	; 2
     9e6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     9e8:	80 81       	ld	r24, Z
     9ea:	8e 7f       	andi	r24, 0xFE	; 254
     9ec:	80 83       	st	Z, r24
			break;
     9ee:	32 c0       	rjmp	.+100    	; 0xa54 <__vector_29+0x15c>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     9f0:	eb e7       	ldi	r30, 0x7B	; 123
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	80 62       	ori	r24, 0x20	; 32
     9f8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     9fa:	ec e7       	ldi	r30, 0x7C	; 124
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	8b 7f       	andi	r24, 0xFB	; 251
     a02:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     a04:	80 81       	ld	r24, Z
     a06:	82 60       	ori	r24, 0x02	; 2
     a08:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     a0a:	80 81       	ld	r24, Z
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	80 83       	st	Z, r24
			break;
     a10:	21 c0       	rjmp	.+66     	; 0xa54 <__vector_29+0x15c>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     a12:	eb e7       	ldi	r30, 0x7B	; 123
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	80 62       	ori	r24, 0x20	; 32
     a1a:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     a1c:	ec e7       	ldi	r30, 0x7C	; 124
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	84 60       	ori	r24, 0x04	; 4
     a24:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     a26:	80 81       	ld	r24, Z
     a28:	8d 7f       	andi	r24, 0xFD	; 253
     a2a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     a2c:	80 81       	ld	r24, Z
     a2e:	8e 7f       	andi	r24, 0xFE	; 254
     a30:	80 83       	st	Z, r24
			break;
     a32:	10 c0       	rjmp	.+32     	; 0xa54 <__vector_29+0x15c>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     a34:	eb e7       	ldi	r30, 0x7B	; 123
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	80 62       	ori	r24, 0x20	; 32
     a3c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     a3e:	ec e7       	ldi	r30, 0x7C	; 124
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	8b 7f       	andi	r24, 0xFB	; 251
     a46:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     a48:	80 81       	ld	r24, Z
     a4a:	8d 7f       	andi	r24, 0xFD	; 253
     a4c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     a4e:	80 81       	ld	r24, Z
     a50:	8e 7f       	andi	r24, 0xFE	; 254
     a52:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     a54:	ea e7       	ldi	r30, 0x7A	; 122
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	80 68       	ori	r24, 0x80	; 128
     a5c:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     a5e:	80 81       	ld	r24, Z
     a60:	80 64       	ori	r24, 0x40	; 64
     a62:	80 83       	st	Z, r24
	
}
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <deterState>:

int deterState(void){
	if (Pho[6] > 300){
     a7a:	80 91 4a 01 	lds	r24, 0x014A
     a7e:	90 91 4b 01 	lds	r25, 0x014B
     a82:	8d 32       	cpi	r24, 0x2D	; 45
     a84:	91 40       	sbci	r25, 0x01	; 1
     a86:	3c f0       	brlt	.+14     	; 0xa96 <deterState+0x1c>
		
		m_usb_tx_string("get the puck \n");
     a88:	8d ef       	ldi	r24, 0xFD	; 253
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		return 3;
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	08 95       	ret
	}
	else{
		
		return 2;
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	90 e0       	ldi	r25, 0x00	; 0
	}
     a9a:	08 95       	ret

00000a9c <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     a9c:	4f 92       	push	r4
     a9e:	5f 92       	push	r5
     aa0:	6f 92       	push	r6
     aa2:	7f 92       	push	r7
     aa4:	8f 92       	push	r8
     aa6:	9f 92       	push	r9
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	60 97       	sbiw	r28, 0x10	; 16
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	2b 01       	movw	r4, r22
     ace:	3c 01       	movw	r6, r24
     ad0:	29 83       	std	Y+1, r18	; 0x01
     ad2:	3a 83       	std	Y+2, r19	; 0x02
     ad4:	4b 83       	std	Y+3, r20	; 0x03
     ad6:	5c 83       	std	Y+4, r21	; 0x04
     ad8:	58 01       	movw	r10, r16
     ada:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     adc:	f5 01       	movw	r30, r10
     ade:	c0 80       	ld	r12, Z
     ae0:	d1 80       	ldd	r13, Z+1	; 0x01
     ae2:	e2 80       	ldd	r14, Z+2	; 0x02
     ae4:	f3 80       	ldd	r15, Z+3	; 0x03
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     af2:	f8 01       	movw	r30, r16
     af4:	20 81       	ld	r18, Z
     af6:	31 81       	ldd	r19, Z+1	; 0x01
     af8:	42 81       	ldd	r20, Z+2	; 0x02
     afa:	53 81       	ldd	r21, Z+3	; 0x03
     afc:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
     b00:	6d 83       	std	Y+5, r22	; 0x05
     b02:	7e 83       	std	Y+6, r23	; 0x06
     b04:	8f 83       	std	Y+7, r24	; 0x07
     b06:	98 87       	std	Y+8, r25	; 0x08
     b08:	f5 01       	movw	r30, r10
     b0a:	84 80       	ldd	r8, Z+4	; 0x04
     b0c:	95 80       	ldd	r9, Z+5	; 0x05
     b0e:	a6 80       	ldd	r10, Z+6	; 0x06
     b10:	b7 80       	ldd	r11, Z+7	; 0x07
     b12:	29 81       	ldd	r18, Y+1	; 0x01
     b14:	3a 81       	ldd	r19, Y+2	; 0x02
     b16:	4b 81       	ldd	r20, Y+3	; 0x03
     b18:	5c 81       	ldd	r21, Y+4	; 0x04
     b1a:	c5 01       	movw	r24, r10
     b1c:	b4 01       	movw	r22, r8
     b1e:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     b22:	69 87       	std	Y+9, r22	; 0x09
     b24:	7a 87       	std	Y+10, r23	; 0x0a
     b26:	8b 87       	std	Y+11, r24	; 0x0b
     b28:	9c 87       	std	Y+12, r25	; 0x0c
     b2a:	9b 01       	movw	r18, r22
     b2c:	ac 01       	movw	r20, r24
     b2e:	6d 81       	ldd	r22, Y+5	; 0x05
     b30:	7e 81       	ldd	r23, Y+6	; 0x06
     b32:	8f 81       	ldd	r24, Y+7	; 0x07
     b34:	98 85       	ldd	r25, Y+8	; 0x08
     b36:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
     b3a:	6d 87       	std	Y+13, r22	; 0x0d
     b3c:	7e 87       	std	Y+14, r23	; 0x0e
     b3e:	8f 87       	std	Y+15, r24	; 0x0f
     b40:	98 8b       	std	Y+16, r25	; 0x10
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     b42:	a5 01       	movw	r20, r10
     b44:	94 01       	movw	r18, r8
     b46:	c3 01       	movw	r24, r6
     b48:	b2 01       	movw	r22, r4
     b4a:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     b4e:	f8 01       	movw	r30, r16
     b50:	24 81       	ldd	r18, Z+4	; 0x04
     b52:	35 81       	ldd	r19, Z+5	; 0x05
     b54:	46 81       	ldd	r20, Z+6	; 0x06
     b56:	57 81       	ldd	r21, Z+7	; 0x07
     b58:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
     b5c:	2b 01       	movw	r4, r22
     b5e:	3c 01       	movw	r6, r24
     b60:	29 81       	ldd	r18, Y+1	; 0x01
     b62:	3a 81       	ldd	r19, Y+2	; 0x02
     b64:	4b 81       	ldd	r20, Y+3	; 0x03
     b66:	5c 81       	ldd	r21, Y+4	; 0x04
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     b70:	69 83       	std	Y+1, r22	; 0x01
     b72:	7a 83       	std	Y+2, r23	; 0x02
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	c3 01       	movw	r24, r6
     b7e:	b2 01       	movw	r22, r4
     b80:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     b84:	6b 01       	movw	r12, r22
     b86:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     b88:	29 85       	ldd	r18, Y+9	; 0x09
     b8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b8c:	4b 85       	ldd	r20, Y+11	; 0x0b
     b8e:	5c 85       	ldd	r21, Y+12	; 0x0c
     b90:	6d 81       	ldd	r22, Y+5	; 0x05
     b92:	7e 81       	ldd	r23, Y+6	; 0x06
     b94:	8f 81       	ldd	r24, Y+7	; 0x07
     b96:	98 85       	ldd	r25, Y+8	; 0x08
     b98:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     b9c:	6d 83       	std	Y+5, r22	; 0x05
     b9e:	7e 83       	std	Y+6, r23	; 0x06
     ba0:	8f 83       	std	Y+7, r24	; 0x07
     ba2:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     ba4:	29 81       	ldd	r18, Y+1	; 0x01
     ba6:	3a 81       	ldd	r19, Y+2	; 0x02
     ba8:	4b 81       	ldd	r20, Y+3	; 0x03
     baa:	5c 81       	ldd	r21, Y+4	; 0x04
     bac:	c3 01       	movw	r24, r6
     bae:	b2 01       	movw	r22, r4
     bb0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
     bb4:	2b 01       	movw	r4, r22
     bb6:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     bb8:	2d 85       	ldd	r18, Y+13	; 0x0d
     bba:	3e 85       	ldd	r19, Y+14	; 0x0e
     bbc:	4f 85       	ldd	r20, Y+15	; 0x0f
     bbe:	58 89       	ldd	r21, Y+16	; 0x10
     bc0:	ca 01       	movw	r24, r20
     bc2:	b9 01       	movw	r22, r18
     bc4:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     bc8:	4b 01       	movw	r8, r22
     bca:	5c 01       	movw	r10, r24
     bcc:	a7 01       	movw	r20, r14
     bce:	96 01       	movw	r18, r12
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	c5 01       	movw	r24, r10
     bde:	b4 01       	movw	r22, r8
     be0:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     be4:	6b 01       	movw	r12, r22
     be6:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     be8:	2d 81       	ldd	r18, Y+5	; 0x05
     bea:	3e 81       	ldd	r19, Y+6	; 0x06
     bec:	4f 81       	ldd	r20, Y+7	; 0x07
     bee:	58 85       	ldd	r21, Y+8	; 0x08
     bf0:	ca 01       	movw	r24, r20
     bf2:	b9 01       	movw	r22, r18
     bf4:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     bf8:	4b 01       	movw	r8, r22
     bfa:	5c 01       	movw	r10, r24
     bfc:	a3 01       	movw	r20, r6
     bfe:	92 01       	movw	r18, r4
     c00:	c3 01       	movw	r24, r6
     c02:	b2 01       	movw	r22, r4
     c04:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     c08:	9b 01       	movw	r18, r22
     c0a:	ac 01       	movw	r20, r24
     c0c:	c5 01       	movw	r24, r10
     c0e:	b4 01       	movw	r22, r8
     c10:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     c14:	9b 01       	movw	r18, r22
     c16:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     c18:	01 e0       	ldi	r16, 0x01	; 1
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	c7 01       	movw	r24, r14
     c1e:	b6 01       	movw	r22, r12
     c20:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
     c24:	88 23       	and	r24, r24
     c26:	14 f0       	brlt	.+4      	; 0xc2c <__stack+0x12d>
     c28:	00 e0       	ldi	r16, 0x00	; 0
     c2a:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     c2c:	c8 01       	movw	r24, r16
     c2e:	60 96       	adiw	r28, 0x10	; 16
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	bf 90       	pop	r11
     c4c:	af 90       	pop	r10
     c4e:	9f 90       	pop	r9
     c50:	8f 90       	pop	r8
     c52:	7f 90       	pop	r7
     c54:	6f 90       	pop	r6
     c56:	5f 90       	pop	r5
     c58:	4f 90       	pop	r4
     c5a:	08 95       	ret

00000c5c <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
     c5c:	2f 92       	push	r2
     c5e:	3f 92       	push	r3
     c60:	4f 92       	push	r4
     c62:	5f 92       	push	r5
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	2c 97       	sbiw	r28, 0x0c	; 12
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	1c 01       	movw	r2, r24
     c92:	4d 83       	std	Y+5, r20	; 0x05
     c94:	5e 83       	std	Y+6, r21	; 0x06
     c96:	6f 83       	std	Y+7, r22	; 0x07
     c98:	78 87       	std	Y+8, r23	; 0x08
     c9a:	09 87       	std	Y+9, r16	; 0x09
     c9c:	1a 87       	std	Y+10, r17	; 0x0a
     c9e:	2b 87       	std	Y+11, r18	; 0x0b
     ca0:	3c 87       	std	Y+12, r19	; 0x0c
     ca2:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     ca4:	f6 01       	movw	r30, r12
     ca6:	20 81       	ld	r18, Z
     ca8:	31 81       	ldd	r19, Z+1	; 0x01
     caa:	42 81       	ldd	r20, Z+2	; 0x02
     cac:	53 81       	ldd	r21, Z+3	; 0x03
     cae:	f7 01       	movw	r30, r14
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
     cb8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
     cbc:	4b 01       	movw	r8, r22
     cbe:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
     cc0:	f6 01       	movw	r30, r12
     cc2:	24 81       	ldd	r18, Z+4	; 0x04
     cc4:	35 81       	ldd	r19, Z+5	; 0x05
     cc6:	46 81       	ldd	r20, Z+6	; 0x06
     cc8:	57 81       	ldd	r21, Z+7	; 0x07
     cca:	f7 01       	movw	r30, r14
     ccc:	64 81       	ldd	r22, Z+4	; 0x04
     cce:	75 81       	ldd	r23, Z+5	; 0x05
     cd0:	86 81       	ldd	r24, Z+6	; 0x06
     cd2:	97 81       	ldd	r25, Z+7	; 0x07
     cd4:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
     cd8:	6b 01       	movw	r12, r22
     cda:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
     cdc:	a5 01       	movw	r20, r10
     cde:	94 01       	movw	r18, r8
     ce0:	c5 01       	movw	r24, r10
     ce2:	b4 01       	movw	r22, r8
     ce4:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     ce8:	2b 01       	movw	r4, r22
     cea:	3c 01       	movw	r6, r24
     cec:	a7 01       	movw	r20, r14
     cee:	96 01       	movw	r18, r12
     cf0:	c7 01       	movw	r24, r14
     cf2:	b6 01       	movw	r22, r12
     cf4:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     cf8:	69 83       	std	Y+1, r22	; 0x01
     cfa:	7a 83       	std	Y+2, r23	; 0x02
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	29 81       	ldd	r18, Y+1	; 0x01
     d02:	3a 81       	ldd	r19, Y+2	; 0x02
     d04:	4b 81       	ldd	r20, Y+3	; 0x03
     d06:	5c 81       	ldd	r21, Y+4	; 0x04
     d08:	c3 01       	movw	r24, r6
     d0a:	b2 01       	movw	r22, r4
     d0c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
     d10:	0e 94 14 1a 	call	0x3428	; 0x3428 <sqrt>
     d14:	2b 01       	movw	r4, r22
     d16:	3c 01       	movw	r6, r24
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	c5 01       	movw	r24, r10
     d1e:	b4 01       	movw	r22, r8
     d20:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__divsf3>
     d24:	4b 01       	movw	r8, r22
     d26:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
     d28:	a3 01       	movw	r20, r6
     d2a:	92 01       	movw	r18, r4
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__divsf3>
     d34:	6b 01       	movw	r12, r22
     d36:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
     d38:	f8 01       	movw	r30, r16
     d3a:	20 81       	ld	r18, Z
     d3c:	31 81       	ldd	r19, Z+1	; 0x01
     d3e:	42 81       	ldd	r20, Z+2	; 0x02
     d40:	53 81       	ldd	r21, Z+3	; 0x03
     d42:	c5 01       	movw	r24, r10
     d44:	b4 01       	movw	r22, r8
     d46:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     d4a:	2b 01       	movw	r4, r22
     d4c:	3c 01       	movw	r6, r24
     d4e:	f8 01       	movw	r30, r16
     d50:	24 81       	ldd	r18, Z+4	; 0x04
     d52:	35 81       	ldd	r19, Z+5	; 0x05
     d54:	46 81       	ldd	r20, Z+6	; 0x06
     d56:	57 81       	ldd	r21, Z+7	; 0x07
     d58:	c7 01       	movw	r24, r14
     d5a:	b6 01       	movw	r22, r12
     d5c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     d60:	9b 01       	movw	r18, r22
     d62:	ac 01       	movw	r20, r24
     d64:	c3 01       	movw	r24, r6
     d66:	b2 01       	movw	r22, r4
     d68:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
	alpha = acos(cos_alpha);
     d6c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <acos>
     d70:	2b 01       	movw	r4, r22
     d72:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
     d74:	2a 94       	dec	r2
     d76:	23 28       	or	r2, r3
     d78:	c9 f4       	brne	.+50     	; 0xdac <cal_angle+0x150>
		c2g_wx = costheta*c2g[0] + sintheta*c2g[1];
     d7a:	29 85       	ldd	r18, Y+9	; 0x09
     d7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d7e:	4b 85       	ldd	r20, Y+11	; 0x0b
     d80:	5c 85       	ldd	r21, Y+12	; 0x0c
     d82:	c5 01       	movw	r24, r10
     d84:	b4 01       	movw	r22, r8
     d86:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     d8a:	4b 01       	movw	r8, r22
     d8c:	5c 01       	movw	r10, r24
     d8e:	2d 81       	ldd	r18, Y+5	; 0x05
     d90:	3e 81       	ldd	r19, Y+6	; 0x06
     d92:	4f 81       	ldd	r20, Y+7	; 0x07
     d94:	58 85       	ldd	r21, Y+8	; 0x08
     d96:	c7 01       	movw	r24, r14
     d98:	b6 01       	movw	r22, r12
     d9a:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	c5 01       	movw	r24, r10
     da4:	b4 01       	movw	r22, r8
     da6:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     daa:	18 c0       	rjmp	.+48     	; 0xddc <cal_angle+0x180>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];
     dac:	29 85       	ldd	r18, Y+9	; 0x09
     dae:	3a 85       	ldd	r19, Y+10	; 0x0a
     db0:	4b 85       	ldd	r20, Y+11	; 0x0b
     db2:	5c 85       	ldd	r21, Y+12	; 0x0c
     db4:	c5 01       	movw	r24, r10
     db6:	b4 01       	movw	r22, r8
     db8:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     dbc:	4b 01       	movw	r8, r22
     dbe:	5c 01       	movw	r10, r24
     dc0:	2d 81       	ldd	r18, Y+5	; 0x05
     dc2:	3e 81       	ldd	r19, Y+6	; 0x06
     dc4:	4f 81       	ldd	r20, Y+7	; 0x07
     dc6:	58 85       	ldd	r21, Y+8	; 0x08
     dc8:	c7 01       	movw	r24, r14
     dca:	b6 01       	movw	r22, r12
     dcc:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	c5 01       	movw	r24, r10
     dd6:	b4 01       	movw	r22, r8
     dd8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
	}
	if (c2g_wx < 0){
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	a9 01       	movw	r20, r18
     de2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
     de6:	88 23       	and	r24, r24
     de8:	4c f0       	brlt	.+18     	; 0xdfc <cal_angle+0x1a0>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
     dea:	40 92 58 01 	sts	0x0158, r4
     dee:	50 92 59 01 	sts	0x0159, r5
     df2:	60 92 5a 01 	sts	0x015A, r6
     df6:	70 92 5b 01 	sts	0x015B, r7
     dfa:	0c c0       	rjmp	.+24     	; 0xe14 <cal_angle+0x1b8>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
     dfc:	77 fa       	bst	r7, 7
     dfe:	70 94       	com	r7
     e00:	77 f8       	bld	r7, 7
     e02:	70 94       	com	r7
     e04:	40 92 58 01 	sts	0x0158, r4
     e08:	50 92 59 01 	sts	0x0159, r5
     e0c:	60 92 5a 01 	sts	0x015A, r6
     e10:	70 92 5b 01 	sts	0x015B, r7
	}
	m_usb_tx_string("alpha: ");
     e14:	8f ec       	ldi	r24, 0xCF	; 207
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(alpha*10);
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	60 91 58 01 	lds	r22, 0x0158
     e28:	70 91 59 01 	lds	r23, 0x0159
     e2c:	80 91 5a 01 	lds	r24, 0x015A
     e30:	90 91 5b 01 	lds	r25, 0x015B
     e34:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     e38:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
     e3c:	cb 01       	movw	r24, r22
     e3e:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\n");
     e42:	8d ec       	ldi	r24, 0xCD	; 205
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	
}
     e4a:	2c 96       	adiw	r28, 0x0c	; 12
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	bf 90       	pop	r11
     e68:	af 90       	pop	r10
     e6a:	9f 90       	pop	r9
     e6c:	8f 90       	pop	r8
     e6e:	7f 90       	pop	r7
     e70:	6f 90       	pop	r6
     e72:	5f 90       	pop	r5
     e74:	4f 90       	pop	r4
     e76:	3f 90       	pop	r3
     e78:	2f 90       	pop	r2
     e7a:	08 95       	ret

00000e7c <PID_alpha>:
void PID_alpha(float Kp, float Ki, float Kd){
     e7c:	4f 92       	push	r4
     e7e:	5f 92       	push	r5
     e80:	6f 92       	push	r6
     e82:	7f 92       	push	r7
     e84:	8f 92       	push	r8
     e86:	9f 92       	push	r9
     e88:	af 92       	push	r10
     e8a:	bf 92       	push	r11
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <PID_alpha+0x22>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <PID_alpha+0x24>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	4b 01       	movw	r8, r22
     ea6:	5c 01       	movw	r10, r24
     ea8:	e9 82       	std	Y+1, r14	; 0x01
     eaa:	fa 82       	std	Y+2, r15	; 0x02
     eac:	0b 83       	std	Y+3, r16	; 0x03
     eae:	1c 83       	std	Y+4, r17	; 0x04
	m_usb_tx_int(Ki);
	m_usb_tx_string(", "); 
	m_usb_tx_int(Kd); 
	m_usb_tx_string("\n");
	*/
	diff_loc = alpha - alpha_last;
     eb0:	40 90 58 01 	lds	r4, 0x0158
     eb4:	50 90 59 01 	lds	r5, 0x0159
     eb8:	60 90 5a 01 	lds	r6, 0x015A
     ebc:	70 90 5b 01 	lds	r7, 0x015B
     ec0:	20 91 54 01 	lds	r18, 0x0154
     ec4:	30 91 55 01 	lds	r19, 0x0155
     ec8:	40 91 56 01 	lds	r20, 0x0156
     ecc:	50 91 57 01 	lds	r21, 0x0157
     ed0:	c3 01       	movw	r24, r6
     ed2:	b2 01       	movw	r22, r4
     ed4:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
     ed8:	6b 01       	movw	r12, r22
     eda:	7c 01       	movw	r14, r24
     edc:	60 93 50 01 	sts	0x0150, r22
     ee0:	70 93 51 01 	sts	0x0151, r23
     ee4:	80 93 52 01 	sts	0x0152, r24
     ee8:	90 93 53 01 	sts	0x0153, r25
	m_usb_tx_string("sumpid: ");
	m_usb_tx_int(sumpid*10);
	m_usb_tx_string("\n");
	*/
	float P =0, I = 0, D = 0;
	P = Kp * alpha;
     eec:	a5 01       	movw	r20, r10
     eee:	94 01       	movw	r18, r8
     ef0:	c3 01       	movw	r24, r6
     ef2:	b2 01       	movw	r22, r4
     ef4:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     ef8:	4b 01       	movw	r8, r22
     efa:	5c 01       	movw	r10, r24
	I = Ki * sum_loc;
	D = Kd * diff_loc;   
     efc:	29 81       	ldd	r18, Y+1	; 0x01
     efe:	3a 81       	ldd	r19, Y+2	; 0x02
     f00:	4b 81       	ldd	r20, Y+3	; 0x03
     f02:	5c 81       	ldd	r21, Y+4	; 0x04
     f04:	c7 01       	movw	r24, r14
     f06:	b6 01       	movw	r22, r12
     f08:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     f0c:	9b 01       	movw	r18, r22
     f0e:	ac 01       	movw	r20, r24
	m_usb_tx_int(I);
	m_usb_tx_string(", ");
	m_usb_tx_int(D*10);
	m_usb_tx_string("\n");
	*/
	gain_loc = P+D;
     f10:	c5 01       	movw	r24, r10
     f12:	b4 01       	movw	r22, r8
     f14:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
     f18:	60 93 4c 01 	sts	0x014C, r22
     f1c:	70 93 4d 01 	sts	0x014D, r23
     f20:	80 93 4e 01 	sts	0x014E, r24
     f24:	90 93 4f 01 	sts	0x014F, r25
	
	alpha_last = alpha;
     f28:	40 92 54 01 	sts	0x0154, r4
     f2c:	50 92 55 01 	sts	0x0155, r5
     f30:	60 92 56 01 	sts	0x0156, r6
     f34:	70 92 57 01 	sts	0x0157, r7
	
	m_usb_tx_string("alpha*10: ");
     f38:	82 ec       	ldi	r24, 0xC2	; 194
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	60 91 58 01 	lds	r22, 0x0158
     f4c:	70 91 59 01 	lds	r23, 0x0159
     f50:	80 91 5a 01 	lds	r24, 0x015A
     f54:	90 91 5b 01 	lds	r25, 0x015B
     f58:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     f5c:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
     f60:	cb 01       	movw	r24, r22
     f62:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\n");
     f66:	80 ec       	ldi	r24, 0xC0	; 192
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	
	m_usb_tx_string("gain*10: ");
     f6e:	86 eb       	ldi	r24, 0xB6	; 182
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	60 91 4c 01 	lds	r22, 0x014C
     f82:	70 91 4d 01 	lds	r23, 0x014D
     f86:	80 91 4e 01 	lds	r24, 0x014E
     f8a:	90 91 4f 01 	lds	r25, 0x014F
     f8e:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
     f92:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
     f96:	cb 01       	movw	r24, r22
     f98:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\n");
     f9c:	84 eb       	ldi	r24, 0xB4	; 180
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	
	if(gain_loc<0){  // turn right
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	a9 01       	movw	r20, r18
     faa:	60 91 4c 01 	lds	r22, 0x014C
     fae:	70 91 4d 01 	lds	r23, 0x014D
     fb2:	80 91 4e 01 	lds	r24, 0x014E
     fb6:	90 91 4f 01 	lds	r25, 0x014F
     fba:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	f4 f5       	brge	.+124    	; 0x103e <PID_alpha+0x1c2>
		m_usb_tx_string("turn right\n");
     fc2:	88 ea       	ldi	r24, 0xA8	; 168
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		OCR1B = full_speed-abs(gain_loc);
     fca:	60 91 4c 01 	lds	r22, 0x014C
     fce:	70 91 4d 01 	lds	r23, 0x014D
     fd2:	80 91 4e 01 	lds	r24, 0x014E
     fd6:	90 91 4f 01 	lds	r25, 0x014F
     fda:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
     fde:	9b 01       	movw	r18, r22
     fe0:	77 23       	and	r23, r23
     fe2:	24 f4       	brge	.+8      	; 0xfec <PID_alpha+0x170>
     fe4:	22 27       	eor	r18, r18
     fe6:	33 27       	eor	r19, r19
     fe8:	26 1b       	sub	r18, r22
     fea:	37 0b       	sbc	r19, r23
     fec:	85 ef       	ldi	r24, 0xF5	; 245
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	82 1b       	sub	r24, r18
     ff2:	93 0b       	sbc	r25, r19
     ff4:	90 93 8b 00 	sts	0x008B, r25
     ff8:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > 100){
     ffc:	60 91 4c 01 	lds	r22, 0x014C
    1000:	70 91 4d 01 	lds	r23, 0x014D
    1004:	80 91 4e 01 	lds	r24, 0x014E
    1008:	90 91 4f 01 	lds	r25, 0x014F
    100c:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    1010:	9b 01       	movw	r18, r22
    1012:	77 23       	and	r23, r23
    1014:	24 f4       	brge	.+8      	; 0x101e <PID_alpha+0x1a2>
    1016:	22 27       	eor	r18, r18
    1018:	33 27       	eor	r19, r19
    101a:	26 1b       	sub	r18, r22
    101c:	37 0b       	sbc	r19, r23
    101e:	25 36       	cpi	r18, 0x65	; 101
    1020:	31 05       	cpc	r19, r1
    1022:	34 f0       	brlt	.+12     	; 0x1030 <PID_alpha+0x1b4>
			OCR1B = 50;
    1024:	82 e3       	ldi	r24, 0x32	; 50
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	90 93 8b 00 	sts	0x008B, r25
    102c:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1030:	85 ef       	ldi	r24, 0xF5	; 245
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	90 93 8d 00 	sts	0x008D, r25
    1038:	80 93 8c 00 	sts	0x008C, r24
    103c:	3d c0       	rjmp	.+122    	; 0x10b8 <PID_alpha+0x23c>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    103e:	8d e9       	ldi	r24, 0x9D	; 157
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1046:	60 91 4c 01 	lds	r22, 0x014C
    104a:	70 91 4d 01 	lds	r23, 0x014D
    104e:	80 91 4e 01 	lds	r24, 0x014E
    1052:	90 91 4f 01 	lds	r25, 0x014F
    1056:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    105a:	9b 01       	movw	r18, r22
    105c:	77 23       	and	r23, r23
    105e:	24 f4       	brge	.+8      	; 0x1068 <PID_alpha+0x1ec>
    1060:	22 27       	eor	r18, r18
    1062:	33 27       	eor	r19, r19
    1064:	26 1b       	sub	r18, r22
    1066:	37 0b       	sbc	r19, r23
    1068:	85 ef       	ldi	r24, 0xF5	; 245
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	82 1b       	sub	r24, r18
    106e:	93 0b       	sbc	r25, r19
    1070:	90 93 8d 00 	sts	0x008D, r25
    1074:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > 100){
    1078:	60 91 4c 01 	lds	r22, 0x014C
    107c:	70 91 4d 01 	lds	r23, 0x014D
    1080:	80 91 4e 01 	lds	r24, 0x014E
    1084:	90 91 4f 01 	lds	r25, 0x014F
    1088:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    108c:	9b 01       	movw	r18, r22
    108e:	77 23       	and	r23, r23
    1090:	24 f4       	brge	.+8      	; 0x109a <PID_alpha+0x21e>
    1092:	22 27       	eor	r18, r18
    1094:	33 27       	eor	r19, r19
    1096:	26 1b       	sub	r18, r22
    1098:	37 0b       	sbc	r19, r23
    109a:	25 36       	cpi	r18, 0x65	; 101
    109c:	31 05       	cpc	r19, r1
    109e:	34 f0       	brlt	.+12     	; 0x10ac <PID_alpha+0x230>
			OCR1C = 50;
    10a0:	82 e3       	ldi	r24, 0x32	; 50
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 8d 00 	sts	0x008D, r25
    10a8:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    10ac:	85 ef       	ldi	r24, 0xF5	; 245
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 8b 00 	sts	0x008B, r25
    10b4:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	9f 90       	pop	r9
    10d6:	8f 90       	pop	r8
    10d8:	7f 90       	pop	r7
    10da:	6f 90       	pop	r6
    10dc:	5f 90       	pop	r5
    10de:	4f 90       	pop	r4
    10e0:	08 95       	ret

000010e2 <find_if_reach>:



int find_if_reach(float x, float y, float *goal){
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	69 01       	movw	r12, r18
    10fc:	7a 01       	movw	r14, r20
    10fe:	e8 01       	movw	r28, r16
	float dist = (x - goal[0]) * (x - goal[0]) + (y - goal[1]) * (y - goal[1]);
    1100:	28 81       	ld	r18, Y
    1102:	39 81       	ldd	r19, Y+1	; 0x01
    1104:	4a 81       	ldd	r20, Y+2	; 0x02
    1106:	5b 81       	ldd	r21, Y+3	; 0x03
    1108:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    110c:	4b 01       	movw	r8, r22
    110e:	5c 01       	movw	r10, r24
    1110:	2c 81       	ldd	r18, Y+4	; 0x04
    1112:	3d 81       	ldd	r19, Y+5	; 0x05
    1114:	4e 81       	ldd	r20, Y+6	; 0x06
    1116:	5f 81       	ldd	r21, Y+7	; 0x07
    1118:	c7 01       	movw	r24, r14
    111a:	b6 01       	movw	r22, r12
    111c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1120:	6b 01       	movw	r12, r22
    1122:	7c 01       	movw	r14, r24
    1124:	a5 01       	movw	r20, r10
    1126:	94 01       	movw	r18, r8
    1128:	c5 01       	movw	r24, r10
    112a:	b4 01       	movw	r22, r8
    112c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1130:	4b 01       	movw	r8, r22
    1132:	5c 01       	movw	r10, r24
    1134:	a7 01       	movw	r20, r14
    1136:	96 01       	movw	r18, r12
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	c5 01       	movw	r24, r10
    1146:	b4 01       	movw	r22, r8
    1148:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    114c:	6b 01       	movw	r12, r22
    114e:	7c 01       	movw	r14, r24
	if (dist < dist_threshold){
    1150:	80 91 14 01 	lds	r24, 0x0114
    1154:	90 91 15 01 	lds	r25, 0x0115
    1158:	bc 01       	movw	r22, r24
    115a:	99 0f       	add	r25, r25
    115c:	88 0b       	sbc	r24, r24
    115e:	99 0b       	sbc	r25, r25
    1160:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	c1 e0       	ldi	r28, 0x01	; 1
    116a:	d0 e0       	ldi	r29, 0x00	; 0
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
    1174:	88 23       	and	r24, r24
    1176:	14 f0       	brlt	.+4      	; 0x117c <find_if_reach+0x9a>
    1178:	c0 e0       	ldi	r28, 0x00	; 0
    117a:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
    117c:	ce 01       	movw	r24, r28
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	af 90       	pop	r10
    1192:	9f 90       	pop	r9
    1194:	8f 90       	pop	r8
    1196:	08 95       	ret

00001198 <localization>:
float alpha = 0;
float alpha_last = 0;
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;
void localization(int state, float *goal, float *c_wii, float *dir){
    1198:	2f 92       	push	r2
    119a:	3f 92       	push	r3
    119c:	4f 92       	push	r4
    119e:	5f 92       	push	r5
    11a0:	6f 92       	push	r6
    11a2:	7f 92       	push	r7
    11a4:	8f 92       	push	r8
    11a6:	9f 92       	push	r9
    11a8:	af 92       	push	r10
    11aa:	bf 92       	push	r11
    11ac:	cf 92       	push	r12
    11ae:	df 92       	push	r13
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	c6 58       	subi	r28, 0x86	; 134
    11c2:	d1 09       	sbc	r29, r1
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cd 57       	subi	r28, 0x7D	; 125
    11d0:	df 4f       	sbci	r29, 0xFF	; 255
    11d2:	99 83       	std	Y+1, r25	; 0x01
    11d4:	88 83       	st	Y, r24
    11d6:	c3 58       	subi	r28, 0x83	; 131
    11d8:	d0 40       	sbci	r29, 0x00	; 0
    11da:	cb 57       	subi	r28, 0x7B	; 123
    11dc:	df 4f       	sbci	r29, 0xFF	; 255
    11de:	79 83       	std	Y+1, r23	; 0x01
    11e0:	68 83       	st	Y, r22
    11e2:	c5 58       	subi	r28, 0x85	; 133
    11e4:	d0 40       	sbci	r29, 0x00	; 0
    11e6:	ef 96       	adiw	r28, 0x3f	; 63
    11e8:	5f af       	std	Y+63, r21	; 0x3f
    11ea:	4e af       	std	Y+62, r20	; 0x3e
    11ec:	ef 97       	sbiw	r28, 0x3f	; 63
    11ee:	c1 58       	subi	r28, 0x81	; 129
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	39 83       	std	Y+1, r19	; 0x01
    11f4:	28 83       	st	Y, r18
    11f6:	cf 57       	subi	r28, 0x7F	; 127
    11f8:	d0 40       	sbci	r29, 0x00	; 0
	m_wii_read(&blobs[0]);
    11fa:	8c e6       	ldi	r24, 0x6C	; 108
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <m_wii_read>
	//unsigned int data[8] = {740, 272, 777, 282, 715, 311, 755, 356};
	//float x[4] = {data[0], data[2], data[4], data[6]};
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    1202:	0c e6       	ldi	r16, 0x6C	; 108
    1204:	11 e0       	ldi	r17, 0x01	; 1
    1206:	d8 01       	movw	r26, r16
    1208:	6d 91       	ld	r22, X+
    120a:	7c 91       	ld	r23, X
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    1214:	69 83       	std	Y+1, r22	; 0x01
    1216:	7a 83       	std	Y+2, r23	; 0x02
    1218:	8b 83       	std	Y+3, r24	; 0x03
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	f8 01       	movw	r30, r16
    121e:	66 81       	ldd	r22, Z+6	; 0x06
    1220:	77 81       	ldd	r23, Z+7	; 0x07
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    122a:	6d 83       	std	Y+5, r22	; 0x05
    122c:	7e 83       	std	Y+6, r23	; 0x06
    122e:	8f 83       	std	Y+7, r24	; 0x07
    1230:	98 87       	std	Y+8, r25	; 0x08
    1232:	d8 01       	movw	r26, r16
    1234:	1c 96       	adiw	r26, 0x0c	; 12
    1236:	6d 91       	ld	r22, X+
    1238:	7c 91       	ld	r23, X
    123a:	1d 97       	sbiw	r26, 0x0d	; 13
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    1244:	69 87       	std	Y+9, r22	; 0x09
    1246:	7a 87       	std	Y+10, r23	; 0x0a
    1248:	8b 87       	std	Y+11, r24	; 0x0b
    124a:	9c 87       	std	Y+12, r25	; 0x0c
    124c:	f8 01       	movw	r30, r16
    124e:	62 89       	ldd	r22, Z+18	; 0x12
    1250:	73 89       	ldd	r23, Z+19	; 0x13
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    125a:	6d 87       	std	Y+13, r22	; 0x0d
    125c:	7e 87       	std	Y+14, r23	; 0x0e
    125e:	8f 87       	std	Y+15, r24	; 0x0f
    1260:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    1262:	d8 01       	movw	r26, r16
    1264:	12 96       	adiw	r26, 0x02	; 2
    1266:	6d 91       	ld	r22, X+
    1268:	7c 91       	ld	r23, X
    126a:	13 97       	sbiw	r26, 0x03	; 3
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    1274:	69 8b       	std	Y+17, r22	; 0x11
    1276:	7a 8b       	std	Y+18, r23	; 0x12
    1278:	8b 8b       	std	Y+19, r24	; 0x13
    127a:	9c 8b       	std	Y+20, r25	; 0x14
    127c:	f8 01       	movw	r30, r16
    127e:	60 85       	ldd	r22, Z+8	; 0x08
    1280:	71 85       	ldd	r23, Z+9	; 0x09
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    128a:	6d 8b       	std	Y+21, r22	; 0x15
    128c:	7e 8b       	std	Y+22, r23	; 0x16
    128e:	8f 8b       	std	Y+23, r24	; 0x17
    1290:	98 8f       	std	Y+24, r25	; 0x18
    1292:	d8 01       	movw	r26, r16
    1294:	1e 96       	adiw	r26, 0x0e	; 14
    1296:	6d 91       	ld	r22, X+
    1298:	7c 91       	ld	r23, X
    129a:	1f 97       	sbiw	r26, 0x0f	; 15
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    12a4:	69 8f       	std	Y+25, r22	; 0x19
    12a6:	7a 8f       	std	Y+26, r23	; 0x1a
    12a8:	8b 8f       	std	Y+27, r24	; 0x1b
    12aa:	9c 8f       	std	Y+28, r25	; 0x1c
    12ac:	f8 01       	movw	r30, r16
    12ae:	64 89       	ldd	r22, Z+20	; 0x14
    12b0:	75 89       	ldd	r23, Z+21	; 0x15
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 a3 18 	call	0x3146	; 0x3146 <__floatunsisf>
    12ba:	6d 8f       	std	Y+29, r22	; 0x1d
    12bc:	7e 8f       	std	Y+30, r23	; 0x1e
    12be:	8f 8f       	std	Y+31, r24	; 0x1f
    12c0:	98 a3       	std	Y+32, r25	; 0x20
    12c2:	9e 01       	movw	r18, r28
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	e7 96       	adiw	r28, 0x37	; 55
    12ca:	3f af       	std	Y+63, r19	; 0x3f
    12cc:	2e af       	std	Y+62, r18	; 0x3e
    12ce:	e7 97       	sbiw	r28, 0x37	; 55
    12d0:	ce 01       	movw	r24, r28
    12d2:	41 96       	adiw	r24, 0x11	; 17
    12d4:	ab 96       	adiw	r28, 0x2b	; 43
    12d6:	9f af       	std	Y+63, r25	; 0x3f
    12d8:	8e af       	std	Y+62, r24	; 0x3e
    12da:	ab 97       	sbiw	r28, 0x2b	; 43
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    12dc:	61 2c       	mov	r6, r1
    12de:	71 2c       	mov	r7, r1
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	10 e0       	ldi	r17, 0x00	; 0
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    12e4:	d3 01       	movw	r26, r6
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	e3 96       	adiw	r28, 0x33	; 51
    12ea:	bf af       	std	Y+63, r27	; 0x3f
    12ec:	ae af       	std	Y+62, r26	; 0x3e
    12ee:	e3 97       	sbiw	r28, 0x33	; 51
    12f0:	14 97       	sbiw	r26, 0x04	; 4
    12f2:	0c f0       	brlt	.+2      	; 0x12f6 <localization+0x15e>
    12f4:	2a c6       	rjmp	.+3156   	; 0x1f4a <localization+0xdb2>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    12f6:	e7 96       	adiw	r28, 0x37	; 55
    12f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    12fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    12fc:	e7 97       	sbiw	r28, 0x37	; 55
    12fe:	8d 91       	ld	r24, X+
    1300:	9d 91       	ld	r25, X+
    1302:	0d 90       	ld	r0, X+
    1304:	bc 91       	ld	r27, X
    1306:	a0 2d       	mov	r26, r0
    1308:	a9 96       	adiw	r28, 0x29	; 41
    130a:	8c af       	std	Y+60, r24	; 0x3c
    130c:	9d af       	std	Y+61, r25	; 0x3d
    130e:	ae af       	std	Y+62, r26	; 0x3e
    1310:	bf af       	std	Y+63, r27	; 0x3f
    1312:	a9 97       	sbiw	r28, 0x29	; 41
    1314:	cf 57       	subi	r28, 0x7F	; 127
    1316:	df 4f       	sbci	r29, 0xFF	; 255
    1318:	19 83       	std	Y+1, r17	; 0x01
    131a:	08 83       	st	Y, r16
    131c:	c1 58       	subi	r28, 0x81	; 129
    131e:	d0 40       	sbci	r29, 0x00	; 0
    1320:	c8 01       	movw	r24, r16
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	e9 e3       	ldi	r30, 0x39	; 57
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	ec 0f       	add	r30, r28
    132c:	fd 1f       	adc	r31, r29
    132e:	e8 0f       	add	r30, r24
    1330:	f9 1f       	adc	r31, r25
    1332:	a3 96       	adiw	r28, 0x23	; 35
    1334:	ff af       	std	Y+63, r31	; 0x3f
    1336:	ee af       	std	Y+62, r30	; 0x3e
    1338:	a3 97       	sbiw	r28, 0x23	; 35
    133a:	0f 2e       	mov	r0, r31
    133c:	f5 e4       	ldi	r31, 0x45	; 69
    133e:	8f 2e       	mov	r8, r31
    1340:	91 2c       	mov	r9, r1
    1342:	f0 2d       	mov	r31, r0
    1344:	8c 0e       	add	r8, r28
    1346:	9d 1e       	adc	r9, r29
    1348:	88 0e       	add	r8, r24
    134a:	99 1e       	adc	r9, r25
    134c:	18 01       	movw	r2, r16
    134e:	22 0c       	add	r2, r2
    1350:	33 1c       	adc	r3, r3
    1352:	22 0c       	add	r2, r2
    1354:	33 1c       	adc	r3, r3
    1356:	21 e2       	ldi	r18, 0x21	; 33
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	2c 0f       	add	r18, r28
    135c:	3d 1f       	adc	r19, r29
    135e:	22 0e       	add	r2, r18
    1360:	33 1e       	adc	r3, r19
    1362:	ab 96       	adiw	r28, 0x2b	; 43
    1364:	ae ac       	ldd	r10, Y+62	; 0x3e
    1366:	bf ac       	ldd	r11, Y+63	; 0x3f
    1368:	ab 97       	sbiw	r28, 0x2b	; 43
    136a:	e7 96       	adiw	r28, 0x37	; 55
    136c:	4e ac       	ldd	r4, Y+62	; 0x3e
    136e:	5f ac       	ldd	r5, Y+63	; 0x3f
    1370:	e7 97       	sbiw	r28, 0x37	; 55
    1372:	e3 96       	adiw	r28, 0x33	; 51
    1374:	0e ad       	ldd	r16, Y+62	; 0x3e
    1376:	1f ad       	ldd	r17, Y+63	; 0x3f
    1378:	e3 97       	sbiw	r28, 0x33	; 51
    137a:	c5 01       	movw	r24, r10
    137c:	53 01       	movw	r10, r6
    137e:	34 01       	movw	r6, r8
    1380:	91 01       	movw	r18, r2
    1382:	12 01       	movw	r2, r4
    1384:	29 01       	movw	r4, r18
    1386:	4c 01       	movw	r8, r24
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 ec       	ldi	r19, 0xC0	; 192
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	54 e4       	ldi	r21, 0x44	; 68
    1390:	a9 96       	adiw	r28, 0x29	; 41
    1392:	6c ad       	ldd	r22, Y+60	; 0x3c
    1394:	7d ad       	ldd	r23, Y+61	; 0x3d
    1396:	8e ad       	ldd	r24, Y+62	; 0x3e
    1398:	9f ad       	ldd	r25, Y+63	; 0x3f
    139a:	a9 97       	sbiw	r28, 0x29	; 41
    139c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <localization+0x20e>
    13a4:	9a c0       	rjmp	.+308    	; 0x14da <localization+0x342>
    13a6:	ab 96       	adiw	r28, 0x2b	; 43
    13a8:	ae ad       	ldd	r26, Y+62	; 0x3e
    13aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    13ac:	ab 97       	sbiw	r28, 0x2b	; 43
    13ae:	cd 90       	ld	r12, X+
    13b0:	dd 90       	ld	r13, X+
    13b2:	ed 90       	ld	r14, X+
    13b4:	fc 90       	ld	r15, X
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 ec       	ldi	r19, 0xC0	; 192
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	54 e4       	ldi	r21, 0x44	; 68
    13be:	c7 01       	movw	r24, r14
    13c0:	b6 01       	movw	r22, r12
    13c2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
    13c6:	88 23       	and	r24, r24
    13c8:	09 f4       	brne	.+2      	; 0x13cc <localization+0x234>
    13ca:	87 c0       	rjmp	.+270    	; 0x14da <localization+0x342>
    13cc:	d1 01       	movw	r26, r2
    13ce:	14 96       	adiw	r26, 0x04	; 4
    13d0:	8d 91       	ld	r24, X+
    13d2:	9d 91       	ld	r25, X+
    13d4:	0d 90       	ld	r0, X+
    13d6:	bc 91       	ld	r27, X
    13d8:	a0 2d       	mov	r26, r0
    13da:	e1 96       	adiw	r28, 0x31	; 49
    13dc:	8c af       	std	Y+60, r24	; 0x3c
    13de:	9d af       	std	Y+61, r25	; 0x3d
    13e0:	ae af       	std	Y+62, r26	; 0x3e
    13e2:	bf af       	std	Y+63, r27	; 0x3f
    13e4:	e1 97       	sbiw	r28, 0x31	; 49
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 ec       	ldi	r19, 0xC0	; 192
    13ea:	4f e7       	ldi	r20, 0x7F	; 127
    13ec:	54 e4       	ldi	r21, 0x44	; 68
    13ee:	bc 01       	movw	r22, r24
    13f0:	cd 01       	movw	r24, r26
    13f2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	09 f4       	brne	.+2      	; 0x13fc <localization+0x264>
    13fa:	6f c0       	rjmp	.+222    	; 0x14da <localization+0x342>
    13fc:	d4 01       	movw	r26, r8
    13fe:	14 96       	adiw	r26, 0x04	; 4
    1400:	8d 91       	ld	r24, X+
    1402:	9d 91       	ld	r25, X+
    1404:	0d 90       	ld	r0, X+
    1406:	bc 91       	ld	r27, X
    1408:	a0 2d       	mov	r26, r0
    140a:	ed 96       	adiw	r28, 0x3d	; 61
    140c:	8c af       	std	Y+60, r24	; 0x3c
    140e:	9d af       	std	Y+61, r25	; 0x3d
    1410:	ae af       	std	Y+62, r26	; 0x3e
    1412:	bf af       	std	Y+63, r27	; 0x3f
    1414:	ed 97       	sbiw	r28, 0x3d	; 61
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 ec       	ldi	r19, 0xC0	; 192
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	54 e4       	ldi	r21, 0x44	; 68
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <localization+0x294>
    142a:	57 c0       	rjmp	.+174    	; 0x14da <localization+0x342>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    142c:	e1 96       	adiw	r28, 0x31	; 49
    142e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1430:	3d ad       	ldd	r19, Y+61	; 0x3d
    1432:	4e ad       	ldd	r20, Y+62	; 0x3e
    1434:	5f ad       	ldd	r21, Y+63	; 0x3f
    1436:	e1 97       	sbiw	r28, 0x31	; 49
    1438:	a9 96       	adiw	r28, 0x29	; 41
    143a:	6c ad       	ldd	r22, Y+60	; 0x3c
    143c:	7d ad       	ldd	r23, Y+61	; 0x3d
    143e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1440:	9f ad       	ldd	r25, Y+63	; 0x3f
    1442:	a9 97       	sbiw	r28, 0x29	; 41
    1444:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1448:	e1 96       	adiw	r28, 0x31	; 49
    144a:	6c af       	std	Y+60, r22	; 0x3c
    144c:	7d af       	std	Y+61, r23	; 0x3d
    144e:	8e af       	std	Y+62, r24	; 0x3e
    1450:	9f af       	std	Y+63, r25	; 0x3f
    1452:	e1 97       	sbiw	r28, 0x31	; 49
    1454:	ed 96       	adiw	r28, 0x3d	; 61
    1456:	2c ad       	ldd	r18, Y+60	; 0x3c
    1458:	3d ad       	ldd	r19, Y+61	; 0x3d
    145a:	4e ad       	ldd	r20, Y+62	; 0x3e
    145c:	5f ad       	ldd	r21, Y+63	; 0x3f
    145e:	ed 97       	sbiw	r28, 0x3d	; 61
    1460:	c7 01       	movw	r24, r14
    1462:	b6 01       	movw	r22, r12
    1464:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1468:	6b 01       	movw	r12, r22
    146a:	7c 01       	movw	r14, r24
    146c:	e1 96       	adiw	r28, 0x31	; 49
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	e1 97       	sbiw	r28, 0x31	; 49
    1478:	ca 01       	movw	r24, r20
    147a:	b9 01       	movw	r22, r18
    147c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1480:	ed 96       	adiw	r28, 0x3d	; 61
    1482:	6c af       	std	Y+60, r22	; 0x3c
    1484:	7d af       	std	Y+61, r23	; 0x3d
    1486:	8e af       	std	Y+62, r24	; 0x3e
    1488:	9f af       	std	Y+63, r25	; 0x3f
    148a:	ed 97       	sbiw	r28, 0x3d	; 61
    148c:	e1 96       	adiw	r28, 0x31	; 49
    148e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1490:	3d ad       	ldd	r19, Y+61	; 0x3d
    1492:	4e ad       	ldd	r20, Y+62	; 0x3e
    1494:	5f ad       	ldd	r21, Y+63	; 0x3f
    1496:	e1 97       	sbiw	r28, 0x31	; 49
    1498:	ca 01       	movw	r24, r20
    149a:	b9 01       	movw	r22, r18
    149c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    14a0:	e1 96       	adiw	r28, 0x31	; 49
    14a2:	6c af       	std	Y+60, r22	; 0x3c
    14a4:	7d af       	std	Y+61, r23	; 0x3d
    14a6:	8e af       	std	Y+62, r24	; 0x3e
    14a8:	9f af       	std	Y+63, r25	; 0x3f
    14aa:	e1 97       	sbiw	r28, 0x31	; 49
    14ac:	a7 01       	movw	r20, r14
    14ae:	96 01       	movw	r18, r12
    14b0:	c7 01       	movw	r24, r14
    14b2:	b6 01       	movw	r22, r12
    14b4:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	e1 96       	adiw	r28, 0x31	; 49
    14be:	6c ad       	ldd	r22, Y+60	; 0x3c
    14c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    14c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    14c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    14c6:	e1 97       	sbiw	r28, 0x31	; 49
    14c8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    14cc:	0e 94 14 1a 	call	0x3428	; 0x3428 <sqrt>
    14d0:	f2 01       	movw	r30, r4
    14d2:	60 83       	st	Z, r22
    14d4:	71 83       	std	Z+1, r23	; 0x01
    14d6:	82 83       	std	Z+2, r24	; 0x02
    14d8:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    14da:	a3 96       	adiw	r28, 0x23	; 35
    14dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    14de:	bf ad       	ldd	r27, Y+63	; 0x3f
    14e0:	a3 97       	sbiw	r28, 0x23	; 35
    14e2:	ad 92       	st	X+, r10
    14e4:	bd 92       	st	X+, r11
    14e6:	a3 96       	adiw	r28, 0x23	; 35
    14e8:	bf af       	std	Y+63, r27	; 0x3f
    14ea:	ae af       	std	Y+62, r26	; 0x3e
    14ec:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    14ee:	f3 01       	movw	r30, r6
    14f0:	01 93       	st	Z+, r16
    14f2:	11 93       	st	Z+, r17
    14f4:	3f 01       	movw	r6, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    14f6:	0f 5f       	subi	r16, 0xFF	; 255
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	f4 e0       	ldi	r31, 0x04	; 4
    14fc:	2f 0e       	add	r2, r31
    14fe:	31 1c       	adc	r3, r1
    1500:	24 e0       	ldi	r18, 0x04	; 4
    1502:	82 0e       	add	r8, r18
    1504:	91 1c       	adc	r9, r1
    1506:	34 e0       	ldi	r19, 0x04	; 4
    1508:	43 0e       	add	r4, r19
    150a:	51 1c       	adc	r5, r1
    150c:	04 30       	cpi	r16, 0x04	; 4
    150e:	11 05       	cpc	r17, r1
    1510:	09 f0       	breq	.+2      	; 0x1514 <localization+0x37c>
    1512:	3a cf       	rjmp	.-396    	; 0x1388 <localization+0x1f0>
    1514:	cf 57       	subi	r28, 0x7F	; 127
    1516:	df 4f       	sbci	r29, 0xFF	; 255
    1518:	08 81       	ld	r16, Y
    151a:	19 81       	ldd	r17, Y+1	; 0x01
    151c:	c1 58       	subi	r28, 0x81	; 129
    151e:	d0 40       	sbci	r29, 0x00	; 0
    1520:	e3 96       	adiw	r28, 0x33	; 51
    1522:	8e ad       	ldd	r24, Y+62	; 0x3e
    1524:	9f ad       	ldd	r25, Y+63	; 0x3f
    1526:	e3 97       	sbiw	r28, 0x33	; 51
    1528:	08 1b       	sub	r16, r24
    152a:	19 0b       	sbc	r17, r25
    152c:	0c 5f       	subi	r16, 0xFC	; 252
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	e7 96       	adiw	r28, 0x37	; 55
    1532:	ae ad       	ldd	r26, Y+62	; 0x3e
    1534:	bf ad       	ldd	r27, Y+63	; 0x3f
    1536:	e7 97       	sbiw	r28, 0x37	; 55
    1538:	14 96       	adiw	r26, 0x04	; 4
    153a:	e7 96       	adiw	r28, 0x37	; 55
    153c:	bf af       	std	Y+63, r27	; 0x3f
    153e:	ae af       	std	Y+62, r26	; 0x3e
    1540:	e7 97       	sbiw	r28, 0x37	; 55
    1542:	ab 96       	adiw	r28, 0x2b	; 43
    1544:	ee ad       	ldd	r30, Y+62	; 0x3e
    1546:	ff ad       	ldd	r31, Y+63	; 0x3f
    1548:	ab 97       	sbiw	r28, 0x2b	; 43
    154a:	34 96       	adiw	r30, 0x04	; 4
    154c:	ab 96       	adiw	r28, 0x2b	; 43
    154e:	ff af       	std	Y+63, r31	; 0x3f
    1550:	ee af       	std	Y+62, r30	; 0x3e
    1552:	ab 97       	sbiw	r28, 0x2b	; 43
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1554:	3c 01       	movw	r6, r24
    1556:	03 97       	sbiw	r24, 0x03	; 3
    1558:	09 f0       	breq	.+2      	; 0x155c <localization+0x3c4>
    155a:	c4 ce       	rjmp	.-632    	; 0x12e4 <localization+0x14c>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    155c:	10 16       	cp	r1, r16
    155e:	11 06       	cpc	r1, r17
    1560:	64 f5       	brge	.+88     	; 0x15ba <localization+0x422>
    1562:	5e 01       	movw	r10, r28
    1564:	21 e2       	ldi	r18, 0x21	; 33
    1566:	a2 0e       	add	r10, r18
    1568:	b1 1c       	adc	r11, r1
    156a:	21 2c       	mov	r2, r1
    156c:	31 2c       	mov	r3, r1
    156e:	e1 2c       	mov	r14, r1
    1570:	f1 2c       	mov	r15, r1
    1572:	c1 2c       	mov	r12, r1
    1574:	d1 2c       	mov	r13, r1
		if(d[i] > dmax){
    1576:	d5 01       	movw	r26, r10
    1578:	4d 90       	ld	r4, X+
    157a:	5d 90       	ld	r5, X+
    157c:	6d 90       	ld	r6, X+
    157e:	7d 90       	ld	r7, X+
    1580:	5d 01       	movw	r10, r26
    1582:	b7 01       	movw	r22, r14
    1584:	0f 2c       	mov	r0, r15
    1586:	00 0c       	add	r0, r0
    1588:	88 0b       	sbc	r24, r24
    158a:	99 0b       	sbc	r25, r25
    158c:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
    1590:	9b 01       	movw	r18, r22
    1592:	ac 01       	movw	r20, r24
    1594:	c3 01       	movw	r24, r6
    1596:	b2 01       	movw	r22, r4
    1598:	0e 94 9c 19 	call	0x3338	; 0x3338 <__gesf2>
    159c:	18 16       	cp	r1, r24
    159e:	34 f4       	brge	.+12     	; 0x15ac <localization+0x414>
			indmax = i;
			dmax = d[i];
    15a0:	c3 01       	movw	r24, r6
    15a2:	b2 01       	movw	r22, r4
    15a4:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    15a8:	7b 01       	movw	r14, r22
    15aa:	16 01       	movw	r2, r12
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    15ac:	bf ef       	ldi	r27, 0xFF	; 255
    15ae:	cb 1a       	sub	r12, r27
    15b0:	db 0a       	sbc	r13, r27
    15b2:	c0 16       	cp	r12, r16
    15b4:	d1 06       	cpc	r13, r17
    15b6:	f9 f6       	brne	.-66     	; 0x1576 <localization+0x3de>
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <localization+0x42a>
    15ba:	21 2c       	mov	r2, r1
    15bc:	31 2c       	mov	r3, r1
    15be:	e1 2c       	mov	r14, r1
    15c0:	f1 2c       	mov	r15, r1
	}
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    15c2:	10 16       	cp	r1, r16
    15c4:	11 06       	cpc	r1, r17
    15c6:	ac f5       	brge	.+106    	; 0x1632 <localization+0x49a>
    15c8:	4e 01       	movw	r8, r28
    15ca:	e1 e2       	ldi	r30, 0x21	; 33
    15cc:	8e 0e       	add	r8, r30
    15ce:	91 1c       	adc	r9, r1
    15d0:	a3 96       	adiw	r28, 0x23	; 35
    15d2:	1f ae       	std	Y+63, r1	; 0x3f
    15d4:	1e ae       	std	Y+62, r1	; 0x3e
    15d6:	a3 97       	sbiw	r28, 0x23	; 35
    15d8:	0f 2e       	mov	r0, r31
    15da:	f0 e1       	ldi	r31, 0x10	; 16
    15dc:	af 2e       	mov	r10, r31
    15de:	f7 e2       	ldi	r31, 0x27	; 39
    15e0:	bf 2e       	mov	r11, r31
    15e2:	f0 2d       	mov	r31, r0
    15e4:	c1 2c       	mov	r12, r1
    15e6:	d1 2c       	mov	r13, r1
		if(d[i] < dmin){
    15e8:	d4 01       	movw	r26, r8
    15ea:	4d 90       	ld	r4, X+
    15ec:	5d 90       	ld	r5, X+
    15ee:	6d 90       	ld	r6, X+
    15f0:	7d 90       	ld	r7, X+
    15f2:	4d 01       	movw	r8, r26
    15f4:	b5 01       	movw	r22, r10
    15f6:	0b 2c       	mov	r0, r11
    15f8:	00 0c       	add	r0, r0
    15fa:	88 0b       	sbc	r24, r24
    15fc:	99 0b       	sbc	r25, r25
    15fe:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
    1602:	9b 01       	movw	r18, r22
    1604:	ac 01       	movw	r20, r24
    1606:	c3 01       	movw	r24, r6
    1608:	b2 01       	movw	r22, r4
    160a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
    160e:	88 23       	and	r24, r24
    1610:	4c f4       	brge	.+18     	; 0x1624 <localization+0x48c>
			indmin = i;
			dmin = d[i];
    1612:	c3 01       	movw	r24, r6
    1614:	b2 01       	movw	r22, r4
    1616:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    161a:	5b 01       	movw	r10, r22
    161c:	a3 96       	adiw	r28, 0x23	; 35
    161e:	df ae       	std	Y+63, r13	; 0x3f
    1620:	ce ae       	std	Y+62, r12	; 0x3e
    1622:	a3 97       	sbiw	r28, 0x23	; 35
	}
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1624:	bf ef       	ldi	r27, 0xFF	; 255
    1626:	cb 1a       	sub	r12, r27
    1628:	db 0a       	sbc	r13, r27
    162a:	c0 16       	cp	r12, r16
    162c:	d1 06       	cpc	r13, r17
    162e:	e1 f6       	brne	.-72     	; 0x15e8 <localization+0x450>
    1630:	04 c0       	rjmp	.+8      	; 0x163a <localization+0x4a2>
    1632:	a3 96       	adiw	r28, 0x23	; 35
    1634:	1f ae       	std	Y+63, r1	; 0x3f
    1636:	1e ae       	std	Y+62, r1	; 0x3e
    1638:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    163a:	80 90 0c 01 	lds	r8, 0x010C
    163e:	90 90 0d 01 	lds	r9, 0x010D
    1642:	a0 90 0e 01 	lds	r10, 0x010E
    1646:	b0 90 0f 01 	lds	r11, 0x010F
    164a:	b7 01       	movw	r22, r14
    164c:	ff 0c       	add	r15, r15
    164e:	88 0b       	sbc	r24, r24
    1650:	99 0b       	sbc	r25, r25
    1652:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
    1656:	a5 01       	movw	r20, r10
    1658:	94 01       	movw	r18, r8
    165a:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    165e:	a9 96       	adiw	r28, 0x29	; 41
    1660:	6c af       	std	Y+60, r22	; 0x3c
    1662:	7d af       	std	Y+61, r23	; 0x3d
    1664:	8e af       	std	Y+62, r24	; 0x3e
    1666:	9f af       	std	Y+63, r25	; 0x3f
    1668:	a9 97       	sbiw	r28, 0x29	; 41
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    166a:	40 90 10 01 	lds	r4, 0x0110
    166e:	50 90 11 01 	lds	r5, 0x0111
    1672:	60 90 12 01 	lds	r6, 0x0112
    1676:	70 90 13 01 	lds	r7, 0x0113
    167a:	0f 2e       	mov	r0, r31
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	ef 2e       	mov	r14, r31
    1680:	f1 e0       	ldi	r31, 0x01	; 1
    1682:	ff 2e       	mov	r15, r31
    1684:	f0 2d       	mov	r31, r0
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1686:	c1 2c       	mov	r12, r1
    1688:	d1 2c       	mov	r13, r1
	for(i = 1; i<4; i++){
    168a:	01 e0       	ldi	r16, 0x01	; 1
    168c:	10 e0       	ldi	r17, 0x00	; 0
		if(abs(actdmax - actmax[i-1])<threshold){
    168e:	f7 01       	movw	r30, r14
    1690:	21 91       	ld	r18, Z+
    1692:	31 91       	ld	r19, Z+
    1694:	41 91       	ld	r20, Z+
    1696:	51 91       	ld	r21, Z+
    1698:	7f 01       	movw	r14, r30
    169a:	a9 96       	adiw	r28, 0x29	; 41
    169c:	6c ad       	ldd	r22, Y+60	; 0x3c
    169e:	7d ad       	ldd	r23, Y+61	; 0x3d
    16a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    16a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    16a4:	a9 97       	sbiw	r28, 0x29	; 41
    16a6:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    16aa:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    16ae:	9b 01       	movw	r18, r22
    16b0:	77 23       	and	r23, r23
    16b2:	24 f4       	brge	.+8      	; 0x16bc <localization+0x524>
    16b4:	22 27       	eor	r18, r18
    16b6:	33 27       	eor	r19, r19
    16b8:	26 1b       	sub	r18, r22
    16ba:	37 0b       	sbc	r19, r23
    16bc:	b9 01       	movw	r22, r18
    16be:	33 0f       	add	r19, r19
    16c0:	88 0b       	sbc	r24, r24
    16c2:	99 0b       	sbc	r25, r25
    16c4:	0e 94 a5 18 	call	0x314a	; 0x314a <__floatsisf>
    16c8:	a3 01       	movw	r20, r6
    16ca:	92 01       	movw	r18, r4
    16cc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__cmpsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	0c f4       	brge	.+2      	; 0x16d6 <localization+0x53e>
    16d4:	68 01       	movw	r12, r16
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    16d6:	0f 5f       	subi	r16, 0xFF	; 255
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	04 30       	cpi	r16, 0x04	; 4
    16dc:	11 05       	cpc	r17, r1
    16de:	b9 f6       	brne	.-82     	; 0x168e <localization+0x4f6>
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    16e0:	65 96       	adiw	r28, 0x15	; 21
    16e2:	1c ae       	std	Y+60, r1	; 0x3c
    16e4:	1d ae       	std	Y+61, r1	; 0x3d
    16e6:	1e ae       	std	Y+62, r1	; 0x3e
    16e8:	1f ae       	std	Y+63, r1	; 0x3f
    16ea:	65 97       	sbiw	r28, 0x15	; 21
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e8       	ldi	r26, 0x80	; 128
    16f2:	bf e3       	ldi	r27, 0x3F	; 63
    16f4:	69 96       	adiw	r28, 0x19	; 25
    16f6:	8c af       	std	Y+60, r24	; 0x3c
    16f8:	9d af       	std	Y+61, r25	; 0x3d
    16fa:	ae af       	std	Y+62, r26	; 0x3e
    16fc:	bf af       	std	Y+63, r27	; 0x3f
    16fe:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1700:	f2 e0       	ldi	r31, 0x02	; 2
    1702:	cf 16       	cp	r12, r31
    1704:	d1 04       	cpc	r13, r1
    1706:	29 f0       	breq	.+10     	; 0x1712 <localization+0x57a>
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	c2 16       	cp	r12, r18
    170c:	d1 04       	cpc	r13, r1
    170e:	51 f1       	breq	.+84     	; 0x1764 <localization+0x5cc>
    1710:	5a c0       	rjmp	.+180    	; 0x17c6 <localization+0x62e>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1712:	a5 01       	movw	r20, r10
    1714:	94 01       	movw	r18, r8
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	88 e6       	ldi	r24, 0x68	; 104
    171c:	91 e4       	ldi	r25, 0x41	; 65
    171e:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__divsf3>
    1722:	e5 96       	adiw	r28, 0x35	; 53
    1724:	6c af       	std	Y+60, r22	; 0x3c
    1726:	7d af       	std	Y+61, r23	; 0x3d
    1728:	8e af       	std	Y+62, r24	; 0x3e
    172a:	9f af       	std	Y+63, r25	; 0x3f
    172c:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    172e:	84 e9       	ldi	r24, 0x94	; 148
    1730:	97 e8       	ldi	r25, 0x87	; 135
    1732:	a5 ee       	ldi	r26, 0xE5	; 229
    1734:	be e3       	ldi	r27, 0x3E	; 62
    1736:	65 96       	adiw	r28, 0x15	; 21
    1738:	8c af       	std	Y+60, r24	; 0x3c
    173a:	9d af       	std	Y+61, r25	; 0x3d
    173c:	ae af       	std	Y+62, r26	; 0x3e
    173e:	bf af       	std	Y+63, r27	; 0x3f
    1740:	65 97       	sbiw	r28, 0x15	; 21
    1742:	81 ea       	ldi	r24, 0xA1	; 161
    1744:	96 ed       	ldi	r25, 0xD6	; 214
    1746:	a4 e6       	ldi	r26, 0x64	; 100
    1748:	bf eb       	ldi	r27, 0xBF	; 191
    174a:	69 96       	adiw	r28, 0x19	; 25
    174c:	8c af       	std	Y+60, r24	; 0x3c
    174e:	9d af       	std	Y+61, r25	; 0x3d
    1750:	ae af       	std	Y+62, r26	; 0x3e
    1752:	bf af       	std	Y+63, r27	; 0x3f
    1754:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1756:	e9 96       	adiw	r28, 0x39	; 57
    1758:	1c ae       	std	Y+60, r1	; 0x3c
    175a:	1d ae       	std	Y+61, r1	; 0x3d
    175c:	1e ae       	std	Y+62, r1	; 0x3e
    175e:	1f ae       	std	Y+63, r1	; 0x3f
    1760:	e9 97       	sbiw	r28, 0x39	; 57
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1762:	41 c0       	rjmp	.+130    	; 0x17e6 <localization+0x64e>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1764:	a5 01       	movw	r20, r10
    1766:	94 01       	movw	r18, r8
    1768:	61 ee       	ldi	r22, 0xE1	; 225
    176a:	7a e7       	ldi	r23, 0x7A	; 122
    176c:	8a e3       	ldi	r24, 0x3A	; 58
    176e:	91 e4       	ldi	r25, 0x41	; 65
    1770:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__divsf3>
    1774:	e9 96       	adiw	r28, 0x39	; 57
    1776:	6c af       	std	Y+60, r22	; 0x3c
    1778:	7d af       	std	Y+61, r23	; 0x3d
    177a:	8e af       	std	Y+62, r24	; 0x3e
    177c:	9f af       	std	Y+63, r25	; 0x3f
    177e:	e9 97       	sbiw	r28, 0x39	; 57
    1780:	a5 01       	movw	r20, r10
    1782:	94 01       	movw	r18, r8
    1784:	63 e2       	ldi	r22, 0x23	; 35
    1786:	7b ed       	ldi	r23, 0xDB	; 219
    1788:	8b e0       	ldi	r24, 0x0B	; 11
    178a:	91 ec       	ldi	r25, 0xC1	; 193
    178c:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__divsf3>
    1790:	e5 96       	adiw	r28, 0x35	; 53
    1792:	6c af       	std	Y+60, r22	; 0x3c
    1794:	7d af       	std	Y+61, r23	; 0x3d
    1796:	8e af       	std	Y+62, r24	; 0x3e
    1798:	9f af       	std	Y+63, r25	; 0x3f
    179a:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    179c:	86 e6       	ldi	r24, 0x66	; 102
    179e:	96 e6       	ldi	r25, 0x66	; 102
    17a0:	a6 e7       	ldi	r26, 0x76	; 118
    17a2:	bf eb       	ldi	r27, 0xBF	; 191
    17a4:	65 96       	adiw	r28, 0x15	; 21
    17a6:	8c af       	std	Y+60, r24	; 0x3c
    17a8:	9d af       	std	Y+61, r25	; 0x3d
    17aa:	ae af       	std	Y+62, r26	; 0x3e
    17ac:	bf af       	std	Y+63, r27	; 0x3f
    17ae:	65 97       	sbiw	r28, 0x15	; 21
    17b0:	8f e9       	ldi	r24, 0x9F	; 159
    17b2:	9d ec       	ldi	r25, 0xCD	; 205
    17b4:	aa e8       	ldi	r26, 0x8A	; 138
    17b6:	be e3       	ldi	r27, 0x3E	; 62
    17b8:	69 96       	adiw	r28, 0x19	; 25
    17ba:	8c af       	std	Y+60, r24	; 0x3c
    17bc:	9d af       	std	Y+61, r25	; 0x3d
    17be:	ae af       	std	Y+62, r26	; 0x3e
    17c0:	bf af       	std	Y+63, r27	; 0x3f
    17c2:	69 97       	sbiw	r28, 0x19	; 25
			break;
    17c4:	10 c0       	rjmp	.+32     	; 0x17e6 <localization+0x64e>
		default:
			break;
	}
	
	if (ca > 0){
    17c6:	1c 14       	cp	r1, r12
    17c8:	1d 04       	cpc	r1, r13
    17ca:	0c f0       	brlt	.+2      	; 0x17ce <localization+0x636>
    17cc:	25 c3       	rjmp	.+1610   	; 0x1e18 <localization+0xc80>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    17ce:	e9 96       	adiw	r28, 0x39	; 57
    17d0:	1c ae       	std	Y+60, r1	; 0x3c
    17d2:	1d ae       	std	Y+61, r1	; 0x3d
    17d4:	1e ae       	std	Y+62, r1	; 0x3e
    17d6:	1f ae       	std	Y+63, r1	; 0x3f
    17d8:	e9 97       	sbiw	r28, 0x39	; 57
    17da:	e5 96       	adiw	r28, 0x35	; 53
    17dc:	1c ae       	std	Y+60, r1	; 0x3c
    17de:	1d ae       	std	Y+61, r1	; 0x3d
    17e0:	1e ae       	std	Y+62, r1	; 0x3e
    17e2:	1f ae       	std	Y+63, r1	; 0x3f
    17e4:	e5 97       	sbiw	r28, 0x35	; 53
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    17e6:	f1 01       	movw	r30, r2
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	8c 0f       	add	r24, r28
    17f2:	9d 1f       	adc	r25, r29
    17f4:	e8 0f       	add	r30, r24
    17f6:	f9 1f       	adc	r31, r25
    17f8:	00 ad       	ldd	r16, Z+56	; 0x38
    17fa:	11 ad       	ldd	r17, Z+57	; 0x39
    17fc:	a3 96       	adiw	r28, 0x23	; 35
    17fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1800:	ff ad       	ldd	r31, Y+63	; 0x3f
    1802:	a3 97       	sbiw	r28, 0x23	; 35
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	e8 0f       	add	r30, r24
    180a:	f9 1f       	adc	r31, r25
    180c:	80 ad       	ldd	r24, Z+56	; 0x38
    180e:	91 ad       	ldd	r25, Z+57	; 0x39
    1810:	80 17       	cp	r24, r16
    1812:	91 07       	cpc	r25, r17
    1814:	89 f0       	breq	.+34     	; 0x1838 <localization+0x6a0>
    1816:	a3 96       	adiw	r28, 0x23	; 35
    1818:	ee ad       	ldd	r30, Y+62	; 0x3e
    181a:	ff ad       	ldd	r31, Y+63	; 0x3f
    181c:	a3 97       	sbiw	r28, 0x23	; 35
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	a5 e4       	ldi	r26, 0x45	; 69
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	ac 0f       	add	r26, r28
    1828:	bd 1f       	adc	r27, r29
    182a:	ea 0f       	add	r30, r26
    182c:	fb 1f       	adc	r31, r27
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	08 17       	cp	r16, r24
    1834:	19 07       	cpc	r17, r25
    1836:	61 f4       	brne	.+24     	; 0x1850 <localization+0x6b8>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1838:	22 0c       	add	r2, r2
    183a:	33 1c       	adc	r3, r3
    183c:	a5 e4       	ldi	r26, 0x45	; 69
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ac 0f       	add	r26, r28
    1842:	bd 1f       	adc	r27, r29
    1844:	a2 0d       	add	r26, r2
    1846:	b3 1d       	adc	r27, r3
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1848:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    184a:	0d 91       	ld	r16, X+
    184c:	1c 91       	ld	r17, X
    184e:	0b c0       	rjmp	.+22     	; 0x1866 <localization+0x6ce>
		}
		else{
			coin_ind = to[indmax];
    1850:	22 0c       	add	r2, r2
    1852:	33 1c       	adc	r3, r3
    1854:	e5 e4       	ldi	r30, 0x45	; 69
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	ec 0f       	add	r30, r28
    185a:	fd 1f       	adc	r31, r29
    185c:	e2 0d       	add	r30, r2
    185e:	f3 1d       	adc	r31, r3
    1860:	01 90       	ld	r0, Z+
    1862:	f0 81       	ld	r31, Z
    1864:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1866:	ca 94       	dec	r12
    1868:	cd 28       	or	r12, r13
    186a:	09 f0       	breq	.+2      	; 0x186e <localization+0x6d6>
    186c:	49 c0       	rjmp	.+146    	; 0x1900 <localization+0x768>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	ee 24       	eor	r14, r14
    1878:	e3 94       	inc	r14
    187a:	f1 2c       	mov	r15, r1
    187c:	ec 0e       	add	r14, r28
    187e:	fd 1e       	adc	r15, r29
    1880:	ee 0e       	add	r14, r30
    1882:	ff 1e       	adc	r15, r31
    1884:	68 01       	movw	r12, r16
    1886:	cc 0c       	add	r12, r12
    1888:	dd 1c       	adc	r13, r13
    188a:	cc 0c       	add	r12, r12
    188c:	dd 1c       	adc	r13, r13
    188e:	e1 e0       	ldi	r30, 0x01	; 1
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	ec 0f       	add	r30, r28
    1894:	fd 1f       	adc	r31, r29
    1896:	ce 0e       	add	r12, r30
    1898:	df 1e       	adc	r13, r31
    189a:	d6 01       	movw	r26, r12
    189c:	2d 91       	ld	r18, X+
    189e:	3d 91       	ld	r19, X+
    18a0:	4d 91       	ld	r20, X+
    18a2:	5c 91       	ld	r21, X
    18a4:	f7 01       	movw	r30, r14
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    18be:	ad 96       	adiw	r28, 0x2d	; 45
    18c0:	6c af       	std	Y+60, r22	; 0x3c
    18c2:	7d af       	std	Y+61, r23	; 0x3d
    18c4:	8e af       	std	Y+62, r24	; 0x3e
    18c6:	9f af       	std	Y+63, r25	; 0x3f
    18c8:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    18ca:	d6 01       	movw	r26, r12
    18cc:	50 96       	adiw	r26, 0x10	; 16
    18ce:	2d 91       	ld	r18, X+
    18d0:	3d 91       	ld	r19, X+
    18d2:	4d 91       	ld	r20, X+
    18d4:	5c 91       	ld	r21, X
    18d6:	53 97       	sbiw	r26, 0x13	; 19
    18d8:	f7 01       	movw	r30, r14
    18da:	60 89       	ldd	r22, Z+16	; 0x10
    18dc:	71 89       	ldd	r23, Z+17	; 0x11
    18de:	82 89       	ldd	r24, Z+18	; 0x12
    18e0:	93 89       	ldd	r25, Z+19	; 0x13
    18e2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    18f2:	a9 96       	adiw	r28, 0x29	; 41
    18f4:	6c af       	std	Y+60, r22	; 0x3c
    18f6:	7d af       	std	Y+61, r23	; 0x3d
    18f8:	8e af       	std	Y+62, r24	; 0x3e
    18fa:	9f af       	std	Y+63, r25	; 0x3f
    18fc:	a9 97       	sbiw	r28, 0x29	; 41
    18fe:	1e c0       	rjmp	.+60     	; 0x193c <localization+0x7a4>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	21 e0       	ldi	r18, 0x01	; 1
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	2c 0f       	add	r18, r28
    190e:	3d 1f       	adc	r19, r29
    1910:	e2 0f       	add	r30, r18
    1912:	f3 1f       	adc	r31, r19
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	a2 81       	ldd	r26, Z+2	; 0x02
    191a:	b3 81       	ldd	r27, Z+3	; 0x03
    191c:	ad 96       	adiw	r28, 0x2d	; 45
    191e:	8c af       	std	Y+60, r24	; 0x3c
    1920:	9d af       	std	Y+61, r25	; 0x3d
    1922:	ae af       	std	Y+62, r26	; 0x3e
    1924:	bf af       	std	Y+63, r27	; 0x3f
    1926:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    1928:	80 89       	ldd	r24, Z+16	; 0x10
    192a:	91 89       	ldd	r25, Z+17	; 0x11
    192c:	a2 89       	ldd	r26, Z+18	; 0x12
    192e:	b3 89       	ldd	r27, Z+19	; 0x13
    1930:	a9 96       	adiw	r28, 0x29	; 41
    1932:	8c af       	std	Y+60, r24	; 0x3c
    1934:	9d af       	std	Y+61, r25	; 0x3d
    1936:	ae af       	std	Y+62, r26	; 0x3e
    1938:	bf af       	std	Y+63, r27	; 0x3f
    193a:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    193c:	00 0f       	add	r16, r16
    193e:	11 1f       	adc	r17, r17
    1940:	00 0f       	add	r16, r16
    1942:	11 1f       	adc	r17, r17
    1944:	a1 e0       	ldi	r26, 0x01	; 1
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ac 0f       	add	r26, r28
    194a:	bd 1f       	adc	r27, r29
    194c:	0a 0f       	add	r16, r26
    194e:	1b 1f       	adc	r17, r27
    1950:	ad 96       	adiw	r28, 0x2d	; 45
    1952:	2c ad       	ldd	r18, Y+60	; 0x3c
    1954:	3d ad       	ldd	r19, Y+61	; 0x3d
    1956:	4e ad       	ldd	r20, Y+62	; 0x3e
    1958:	5f ad       	ldd	r21, Y+63	; 0x3f
    195a:	ad 97       	sbiw	r28, 0x2d	; 45
    195c:	f8 01       	movw	r30, r16
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    196a:	6b 01       	movw	r12, r22
    196c:	7c 01       	movw	r14, r24
    196e:	a9 96       	adiw	r28, 0x29	; 41
    1970:	2c ad       	ldd	r18, Y+60	; 0x3c
    1972:	3d ad       	ldd	r19, Y+61	; 0x3d
    1974:	4e ad       	ldd	r20, Y+62	; 0x3e
    1976:	5f ad       	ldd	r21, Y+63	; 0x3f
    1978:	a9 97       	sbiw	r28, 0x29	; 41
    197a:	d8 01       	movw	r26, r16
    197c:	50 96       	adiw	r26, 0x10	; 16
    197e:	6d 91       	ld	r22, X+
    1980:	7d 91       	ld	r23, X+
    1982:	8d 91       	ld	r24, X+
    1984:	9c 91       	ld	r25, X
    1986:	53 97       	sbiw	r26, 0x13	; 19
    1988:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    198c:	2b 01       	movw	r4, r22
    198e:	3c 01       	movw	r6, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    1990:	a7 01       	movw	r20, r14
    1992:	96 01       	movw	r18, r12
    1994:	c7 01       	movw	r24, r14
    1996:	b6 01       	movw	r22, r12
    1998:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    199c:	4b 01       	movw	r8, r22
    199e:	5c 01       	movw	r10, r24
    19a0:	a3 01       	movw	r20, r6
    19a2:	92 01       	movw	r18, r4
    19a4:	c3 01       	movw	r24, r6
    19a6:	b2 01       	movw	r22, r4
    19a8:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    19ac:	a5 96       	adiw	r28, 0x25	; 37
    19ae:	6c af       	std	Y+60, r22	; 0x3c
    19b0:	7d af       	std	Y+61, r23	; 0x3d
    19b2:	8e af       	std	Y+62, r24	; 0x3e
    19b4:	9f af       	std	Y+63, r25	; 0x3f
    19b6:	a5 97       	sbiw	r28, 0x25	; 37
    19b8:	a5 96       	adiw	r28, 0x25	; 37
    19ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    19bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    19be:	4e ad       	ldd	r20, Y+62	; 0x3e
    19c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    19c2:	a5 97       	sbiw	r28, 0x25	; 37
    19c4:	c5 01       	movw	r24, r10
    19c6:	b4 01       	movw	r22, r8
    19c8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    19cc:	0e 94 14 1a 	call	0x3428	; 0x3428 <sqrt>
    19d0:	4b 01       	movw	r8, r22
    19d2:	5c 01       	movw	r10, r24
		ref_vc[0] = ref_vc[0] / norm;
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	c7 01       	movw	r24, r14
    19da:	b6 01       	movw	r22, r12
    19dc:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__divsf3>
    19e0:	6b 01       	movw	r12, r22
    19e2:	7c 01       	movw	r14, r24
    19e4:	6d 96       	adiw	r28, 0x1d	; 29
    19e6:	6c af       	std	Y+60, r22	; 0x3c
    19e8:	7d af       	std	Y+61, r23	; 0x3d
    19ea:	8e af       	std	Y+62, r24	; 0x3e
    19ec:	9f af       	std	Y+63, r25	; 0x3f
    19ee:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    19f0:	a5 01       	movw	r20, r10
    19f2:	94 01       	movw	r18, r8
    19f4:	c3 01       	movw	r24, r6
    19f6:	b2 01       	movw	r22, r4
    19f8:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__divsf3>
    19fc:	4b 01       	movw	r8, r22
    19fe:	5c 01       	movw	r10, r24
    1a00:	a1 96       	adiw	r28, 0x21	; 33
    1a02:	6c af       	std	Y+60, r22	; 0x3c
    1a04:	7d af       	std	Y+61, r23	; 0x3d
    1a06:	8e af       	std	Y+62, r24	; 0x3e
    1a08:	9f af       	std	Y+63, r25	; 0x3f
    1a0a:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    1a0c:	65 96       	adiw	r28, 0x15	; 21
    1a0e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a10:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a12:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a14:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a16:	65 97       	sbiw	r28, 0x15	; 21
    1a18:	c7 01       	movw	r24, r14
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1a20:	6b 01       	movw	r12, r22
    1a22:	7c 01       	movw	r14, r24
    1a24:	69 96       	adiw	r28, 0x19	; 25
    1a26:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a28:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a2a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a2c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a2e:	69 97       	sbiw	r28, 0x19	; 25
    1a30:	c5 01       	movw	r24, r10
    1a32:	b4 01       	movw	r22, r8
    1a34:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1a38:	9b 01       	movw	r18, r22
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	b6 01       	movw	r22, r12
    1a40:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    1a44:	2b 01       	movw	r4, r22
    1a46:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    1a48:	9b 01       	movw	r18, r22
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1a50:	6b 01       	movw	r12, r22
    1a52:	7c 01       	movw	r14, r24
    1a54:	a7 01       	movw	r20, r14
    1a56:	96 01       	movw	r18, r12
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	9f e3       	ldi	r25, 0x3F	; 63
    1a60:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1a64:	0e 94 14 1a 	call	0x3428	; 0x3428 <sqrt>
    1a68:	a5 96       	adiw	r28, 0x25	; 37
    1a6a:	6c af       	std	Y+60, r22	; 0x3c
    1a6c:	7d af       	std	Y+61, r23	; 0x3d
    1a6e:	8e af       	std	Y+62, r24	; 0x3e
    1a70:	9f af       	std	Y+63, r25	; 0x3f
    1a72:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    1a74:	fe 01       	movw	r30, r28
    1a76:	ef 5a       	subi	r30, 0xAF	; 175
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	7f 01       	movw	r14, r30
    1a7c:	8e 01       	movw	r16, r28
    1a7e:	07 5a       	subi	r16, 0xA7	; 167
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	9b 01       	movw	r18, r22
    1a84:	ac 01       	movw	r20, r24
    1a86:	c3 01       	movw	r24, r6
    1a88:	b2 01       	movw	r22, r4
    1a8a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <find_sign>
    1a8e:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <localization+0x8fe>
    1a94:	9f c0       	rjmp	.+318    	; 0x1bd4 <localization+0xa3c>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    1a96:	06 e1       	ldi	r16, 0x16	; 22
    1a98:	11 e0       	ldi	r17, 0x01	; 1
    1a9a:	d8 01       	movw	r26, r16
    1a9c:	2d 91       	ld	r18, X+
    1a9e:	3d 91       	ld	r19, X+
    1aa0:	4d 91       	ld	r20, X+
    1aa2:	5c 91       	ld	r21, X
    1aa4:	ad 96       	adiw	r28, 0x2d	; 45
    1aa6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1aa8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aae:	ad 97       	sbiw	r28, 0x2d	; 45
    1ab0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1ab4:	a3 01       	movw	r20, r6
    1ab6:	92 01       	movw	r18, r4
    1ab8:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	e9 96       	adiw	r28, 0x39	; 57
    1ac2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ac4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ac6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ac8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aca:	e9 97       	sbiw	r28, 0x39	; 57
    1acc:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1ad0:	6b 01       	movw	r12, r22
    1ad2:	7c 01       	movw	r14, r24
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	24 81       	ldd	r18, Z+4	; 0x04
    1ad8:	35 81       	ldd	r19, Z+5	; 0x05
    1ada:	46 81       	ldd	r20, Z+6	; 0x06
    1adc:	57 81       	ldd	r21, Z+7	; 0x07
    1ade:	a9 96       	adiw	r28, 0x29	; 41
    1ae0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ae2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ae4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ae6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ae8:	a9 97       	sbiw	r28, 0x29	; 41
    1aea:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1aee:	a5 96       	adiw	r28, 0x25	; 37
    1af0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1af2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1af4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1af6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1af8:	a5 97       	sbiw	r28, 0x25	; 37
    1afa:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1afe:	9b 01       	movw	r18, r22
    1b00:	ac 01       	movw	r20, r24
    1b02:	c7 01       	movw	r24, r14
    1b04:	b6 01       	movw	r22, r12
    1b06:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    1b0a:	ef 96       	adiw	r28, 0x3f	; 63
    1b0c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b0e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b10:	ef 97       	sbiw	r28, 0x3f	; 63
    1b12:	6d 93       	st	X+, r22
    1b14:	7d 93       	st	X+, r23
    1b16:	8d 93       	st	X+, r24
    1b18:	9c 93       	st	X, r25
    1b1a:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	24 81       	ldd	r18, Z+4	; 0x04
    1b20:	35 81       	ldd	r19, Z+5	; 0x05
    1b22:	46 81       	ldd	r20, Z+6	; 0x06
    1b24:	57 81       	ldd	r21, Z+7	; 0x07
    1b26:	a9 96       	adiw	r28, 0x29	; 41
    1b28:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b2a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b30:	a9 97       	sbiw	r28, 0x29	; 41
    1b32:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1b36:	a3 01       	movw	r20, r6
    1b38:	92 01       	movw	r18, r4
    1b3a:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1b3e:	9b 01       	movw	r18, r22
    1b40:	ac 01       	movw	r20, r24
    1b42:	e5 96       	adiw	r28, 0x35	; 53
    1b44:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b46:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b48:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b4c:	e5 97       	sbiw	r28, 0x35	; 53
    1b4e:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1b52:	6b 01       	movw	r12, r22
    1b54:	7c 01       	movw	r14, r24
    1b56:	d8 01       	movw	r26, r16
    1b58:	2d 91       	ld	r18, X+
    1b5a:	3d 91       	ld	r19, X+
    1b5c:	4d 91       	ld	r20, X+
    1b5e:	5c 91       	ld	r21, X
    1b60:	ad 96       	adiw	r28, 0x2d	; 45
    1b62:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b64:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b66:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b68:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b6a:	ad 97       	sbiw	r28, 0x2d	; 45
    1b6c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1b70:	a5 96       	adiw	r28, 0x25	; 37
    1b72:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b74:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b76:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b78:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b7a:	a5 97       	sbiw	r28, 0x25	; 37
    1b7c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1b80:	9b 01       	movw	r18, r22
    1b82:	ac 01       	movw	r20, r24
    1b84:	c7 01       	movw	r24, r14
    1b86:	b6 01       	movw	r22, r12
    1b88:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1b8c:	ef 96       	adiw	r28, 0x3f	; 63
    1b8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b90:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b92:	ef 97       	sbiw	r28, 0x3f	; 63
    1b94:	64 83       	std	Z+4, r22	; 0x04
    1b96:	75 83       	std	Z+5, r23	; 0x05
    1b98:	86 83       	std	Z+6, r24	; 0x06
    1b9a:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    1b9c:	c1 58       	subi	r28, 0x81	; 129
    1b9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ba0:	a8 81       	ld	r26, Y
    1ba2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ba4:	cf 57       	subi	r28, 0x7F	; 127
    1ba6:	d0 40       	sbci	r29, 0x00	; 0
    1ba8:	4d 92       	st	X+, r4
    1baa:	5d 92       	st	X+, r5
    1bac:	6d 92       	st	X+, r6
    1bae:	7c 92       	st	X, r7
    1bb0:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    1bb2:	a5 96       	adiw	r28, 0x25	; 37
    1bb4:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bb6:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bb8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bba:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bbc:	a5 97       	sbiw	r28, 0x25	; 37
    1bbe:	c1 58       	subi	r28, 0x81	; 129
    1bc0:	df 4f       	sbci	r29, 0xFF	; 255
    1bc2:	e8 81       	ld	r30, Y
    1bc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc6:	cf 57       	subi	r28, 0x7F	; 127
    1bc8:	d0 40       	sbci	r29, 0x00	; 0
    1bca:	84 83       	std	Z+4, r24	; 0x04
    1bcc:	95 83       	std	Z+5, r25	; 0x05
    1bce:	a6 83       	std	Z+6, r26	; 0x06
    1bd0:	b7 83       	std	Z+7, r27	; 0x07
    1bd2:	9f c0       	rjmp	.+318    	; 0x1d12 <localization+0xb7a>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    1bd4:	06 e1       	ldi	r16, 0x16	; 22
    1bd6:	11 e0       	ldi	r17, 0x01	; 1
    1bd8:	d8 01       	movw	r26, r16
    1bda:	2d 91       	ld	r18, X+
    1bdc:	3d 91       	ld	r19, X+
    1bde:	4d 91       	ld	r20, X+
    1be0:	5c 91       	ld	r21, X
    1be2:	ad 96       	adiw	r28, 0x2d	; 45
    1be4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1be6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1be8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bea:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bec:	ad 97       	sbiw	r28, 0x2d	; 45
    1bee:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1bf2:	a3 01       	movw	r20, r6
    1bf4:	92 01       	movw	r18, r4
    1bf6:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1bfa:	9b 01       	movw	r18, r22
    1bfc:	ac 01       	movw	r20, r24
    1bfe:	e9 96       	adiw	r28, 0x39	; 57
    1c00:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c02:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c04:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c06:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c08:	e9 97       	sbiw	r28, 0x39	; 57
    1c0a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1c0e:	6b 01       	movw	r12, r22
    1c10:	7c 01       	movw	r14, r24
    1c12:	f8 01       	movw	r30, r16
    1c14:	24 81       	ldd	r18, Z+4	; 0x04
    1c16:	35 81       	ldd	r19, Z+5	; 0x05
    1c18:	46 81       	ldd	r20, Z+6	; 0x06
    1c1a:	57 81       	ldd	r21, Z+7	; 0x07
    1c1c:	a9 96       	adiw	r28, 0x29	; 41
    1c1e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c20:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c22:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c24:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c26:	a9 97       	sbiw	r28, 0x29	; 41
    1c28:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1c2c:	a5 96       	adiw	r28, 0x25	; 37
    1c2e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c30:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c32:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c34:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c36:	a5 97       	sbiw	r28, 0x25	; 37
    1c38:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	ac 01       	movw	r20, r24
    1c40:	c7 01       	movw	r24, r14
    1c42:	b6 01       	movw	r22, r12
    1c44:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1c48:	ef 96       	adiw	r28, 0x3f	; 63
    1c4a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c4c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c4e:	ef 97       	sbiw	r28, 0x3f	; 63
    1c50:	6d 93       	st	X+, r22
    1c52:	7d 93       	st	X+, r23
    1c54:	8d 93       	st	X+, r24
    1c56:	9c 93       	st	X, r25
    1c58:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	24 81       	ldd	r18, Z+4	; 0x04
    1c5e:	35 81       	ldd	r19, Z+5	; 0x05
    1c60:	46 81       	ldd	r20, Z+6	; 0x06
    1c62:	57 81       	ldd	r21, Z+7	; 0x07
    1c64:	a9 96       	adiw	r28, 0x29	; 41
    1c66:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c68:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c6e:	a9 97       	sbiw	r28, 0x29	; 41
    1c70:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1c74:	a3 01       	movw	r20, r6
    1c76:	92 01       	movw	r18, r4
    1c78:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1c7c:	9b 01       	movw	r18, r22
    1c7e:	ac 01       	movw	r20, r24
    1c80:	e5 96       	adiw	r28, 0x35	; 53
    1c82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c8a:	e5 97       	sbiw	r28, 0x35	; 53
    1c8c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1c90:	6b 01       	movw	r12, r22
    1c92:	7c 01       	movw	r14, r24
    1c94:	d8 01       	movw	r26, r16
    1c96:	2d 91       	ld	r18, X+
    1c98:	3d 91       	ld	r19, X+
    1c9a:	4d 91       	ld	r20, X+
    1c9c:	5c 91       	ld	r21, X
    1c9e:	ad 96       	adiw	r28, 0x2d	; 45
    1ca0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ca2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ca4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ca6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ca8:	ad 97       	sbiw	r28, 0x2d	; 45
    1caa:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    1cae:	a5 96       	adiw	r28, 0x25	; 37
    1cb0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cb2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cb4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb8:	a5 97       	sbiw	r28, 0x25	; 37
    1cba:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1cbe:	9b 01       	movw	r18, r22
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	c7 01       	movw	r24, r14
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3>
    1cca:	ef 96       	adiw	r28, 0x3f	; 63
    1ccc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cce:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cd0:	ef 97       	sbiw	r28, 0x3f	; 63
    1cd2:	64 83       	std	Z+4, r22	; 0x04
    1cd4:	75 83       	std	Z+5, r23	; 0x05
    1cd6:	86 83       	std	Z+6, r24	; 0x06
    1cd8:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    1cda:	c1 58       	subi	r28, 0x81	; 129
    1cdc:	df 4f       	sbci	r29, 0xFF	; 255
    1cde:	a8 81       	ld	r26, Y
    1ce0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ce2:	cf 57       	subi	r28, 0x7F	; 127
    1ce4:	d0 40       	sbci	r29, 0x00	; 0
    1ce6:	4d 92       	st	X+, r4
    1ce8:	5d 92       	st	X+, r5
    1cea:	6d 92       	st	X+, r6
    1cec:	7c 92       	st	X, r7
    1cee:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    1cf0:	a5 96       	adiw	r28, 0x25	; 37
    1cf2:	8c ad       	ldd	r24, Y+60	; 0x3c
    1cf4:	9d ad       	ldd	r25, Y+61	; 0x3d
    1cf6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1cf8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1cfa:	a5 97       	sbiw	r28, 0x25	; 37
    1cfc:	b0 58       	subi	r27, 0x80	; 128
    1cfe:	c1 58       	subi	r28, 0x81	; 129
    1d00:	df 4f       	sbci	r29, 0xFF	; 255
    1d02:	e8 81       	ld	r30, Y
    1d04:	f9 81       	ldd	r31, Y+1	; 0x01
    1d06:	cf 57       	subi	r28, 0x7F	; 127
    1d08:	d0 40       	sbci	r29, 0x00	; 0
    1d0a:	84 83       	std	Z+4, r24	; 0x04
    1d0c:	95 83       	std	Z+5, r25	; 0x05
    1d0e:	a6 83       	std	Z+6, r26	; 0x06
    1d10:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    1d12:	ef 96       	adiw	r28, 0x3f	; 63
    1d14:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d18:	ef 97       	sbiw	r28, 0x3f	; 63
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    1d20:	b3 81       	ldd	r27, Z+3	; 0x03
    1d22:	24 e6       	ldi	r18, 0x64	; 100
    1d24:	31 e0       	ldi	r19, 0x01	; 1
    1d26:	f9 01       	movw	r30, r18
    1d28:	80 83       	st	Z, r24
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	a2 83       	std	Z+2, r26	; 0x02
    1d2e:	b3 83       	std	Z+3, r27	; 0x03
		c_wii_last[1] = c_wii[1];
    1d30:	ef 96       	adiw	r28, 0x3f	; 63
    1d32:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d34:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d36:	ef 97       	sbiw	r28, 0x3f	; 63
    1d38:	84 81       	ldd	r24, Z+4	; 0x04
    1d3a:	95 81       	ldd	r25, Z+5	; 0x05
    1d3c:	a6 81       	ldd	r26, Z+6	; 0x06
    1d3e:	b7 81       	ldd	r27, Z+7	; 0x07
    1d40:	f9 01       	movw	r30, r18
    1d42:	84 83       	std	Z+4, r24	; 0x04
    1d44:	95 83       	std	Z+5, r25	; 0x05
    1d46:	a6 83       	std	Z+6, r26	; 0x06
    1d48:	b7 83       	std	Z+7, r27	; 0x07
		dir_last[0] = dir[0];
    1d4a:	c1 58       	subi	r28, 0x81	; 129
    1d4c:	df 4f       	sbci	r29, 0xFF	; 255
    1d4e:	e8 81       	ld	r30, Y
    1d50:	f9 81       	ldd	r31, Y+1	; 0x01
    1d52:	cf 57       	subi	r28, 0x7F	; 127
    1d54:	d0 40       	sbci	r29, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	a2 81       	ldd	r26, Z+2	; 0x02
    1d5c:	b3 81       	ldd	r27, Z+3	; 0x03
    1d5e:	2c e5       	ldi	r18, 0x5C	; 92
    1d60:	31 e0       	ldi	r19, 0x01	; 1
    1d62:	f9 01       	movw	r30, r18
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
		dir_last[1] = dir[1];
    1d6c:	c1 58       	subi	r28, 0x81	; 129
    1d6e:	df 4f       	sbci	r29, 0xFF	; 255
    1d70:	e8 81       	ld	r30, Y
    1d72:	f9 81       	ldd	r31, Y+1	; 0x01
    1d74:	cf 57       	subi	r28, 0x7F	; 127
    1d76:	d0 40       	sbci	r29, 0x00	; 0
    1d78:	84 81       	ldd	r24, Z+4	; 0x04
    1d7a:	95 81       	ldd	r25, Z+5	; 0x05
    1d7c:	a6 81       	ldd	r26, Z+6	; 0x06
    1d7e:	b7 81       	ldd	r27, Z+7	; 0x07
    1d80:	f9 01       	movw	r30, r18
    1d82:	84 83       	std	Z+4, r24	; 0x04
    1d84:	95 83       	std	Z+5, r25	; 0x05
    1d86:	a6 83       	std	Z+6, r26	; 0x06
    1d88:	b7 83       	std	Z+7, r27	; 0x07
		
		if (state == 3)
    1d8a:	cd 57       	subi	r28, 0x7D	; 125
    1d8c:	df 4f       	sbci	r29, 0xFF	; 255
    1d8e:	28 81       	ld	r18, Y
    1d90:	39 81       	ldd	r19, Y+1	; 0x01
    1d92:	c3 58       	subi	r28, 0x83	; 131
    1d94:	d0 40       	sbci	r29, 0x00	; 0
    1d96:	23 30       	cpi	r18, 0x03	; 3
    1d98:	31 05       	cpc	r19, r1
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <localization+0xc06>
    1d9c:	79 c0       	rjmp	.+242    	; 0x1e90 <localization+0xcf8>
		{
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    1d9e:	ef 96       	adiw	r28, 0x3f	; 63
    1da0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1da2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1da4:	ef 97       	sbiw	r28, 0x3f	; 63
    1da6:	14 96       	adiw	r26, 0x04	; 4
    1da8:	2d 91       	ld	r18, X+
    1daa:	3d 91       	ld	r19, X+
    1dac:	4d 91       	ld	r20, X+
    1dae:	5c 91       	ld	r21, X
    1db0:	17 97       	sbiw	r26, 0x07	; 7
    1db2:	6d 91       	ld	r22, X+
    1db4:	7d 91       	ld	r23, X+
    1db6:	8d 91       	ld	r24, X+
    1db8:	9c 91       	ld	r25, X
    1dba:	cb 57       	subi	r28, 0x7B	; 123
    1dbc:	df 4f       	sbci	r29, 0xFF	; 255
    1dbe:	08 81       	ld	r16, Y
    1dc0:	19 81       	ldd	r17, Y+1	; 0x01
    1dc2:	c5 58       	subi	r28, 0x85	; 133
    1dc4:	d0 40       	sbci	r29, 0x00	; 0
    1dc6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <find_if_reach>
			if (!if_reach){
    1dca:	89 2b       	or	r24, r25
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <localization+0xc38>
    1dce:	60 c0       	rjmp	.+192    	; 0x1e90 <localization+0xcf8>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    1dd0:	c1 58       	subi	r28, 0x81	; 129
    1dd2:	df 4f       	sbci	r29, 0xFF	; 255
    1dd4:	a8 80       	ld	r10, Y
    1dd6:	b9 80       	ldd	r11, Y+1	; 0x01
    1dd8:	cf 57       	subi	r28, 0x7F	; 127
    1dda:	d0 40       	sbci	r29, 0x00	; 0
    1ddc:	ef 96       	adiw	r28, 0x3f	; 63
    1dde:	ce ac       	ldd	r12, Y+62	; 0x3e
    1de0:	df ac       	ldd	r13, Y+63	; 0x3f
    1de2:	ef 97       	sbiw	r28, 0x3f	; 63
    1de4:	78 01       	movw	r14, r16
    1de6:	93 01       	movw	r18, r6
    1de8:	82 01       	movw	r16, r4
    1dea:	a5 96       	adiw	r28, 0x25	; 37
    1dec:	4c ad       	ldd	r20, Y+60	; 0x3c
    1dee:	5d ad       	ldd	r21, Y+61	; 0x3d
    1df0:	6e ad       	ldd	r22, Y+62	; 0x3e
    1df2:	7f ad       	ldd	r23, Y+63	; 0x3f
    1df4:	a5 97       	sbiw	r28, 0x25	; 37
    1df6:	c4 01       	movw	r24, r8
    1df8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <cal_angle>
				PID_alpha(Kp_loc, Ki_loc, Kd_loc);
    1dfc:	e1 2c       	mov	r14, r1
    1dfe:	f1 2c       	mov	r15, r1
    1e00:	08 ec       	ldi	r16, 0xC8	; 200
    1e02:	12 e4       	ldi	r17, 0x42	; 66
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	a9 01       	movw	r20, r18
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	86 e1       	ldi	r24, 0x16	; 22
    1e10:	93 e4       	ldi	r25, 0x43	; 67
    1e12:	0e 94 3e 07 	call	0xe7c	; 0xe7c <PID_alpha>
    1e16:	3c c0       	rjmp	.+120    	; 0x1e90 <localization+0xcf8>
				state = 0;
			}
		}
	}
	else{
		c_wii[0] = c_wii_last[0];
    1e18:	24 e6       	ldi	r18, 0x64	; 100
    1e1a:	31 e0       	ldi	r19, 0x01	; 1
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	a2 81       	ldd	r26, Z+2	; 0x02
    1e24:	b3 81       	ldd	r27, Z+3	; 0x03
    1e26:	ef 96       	adiw	r28, 0x3f	; 63
    1e28:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e2c:	ef 97       	sbiw	r28, 0x3f	; 63
    1e2e:	80 83       	st	Z, r24
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	a2 83       	std	Z+2, r26	; 0x02
    1e34:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    1e36:	f9 01       	movw	r30, r18
    1e38:	84 81       	ldd	r24, Z+4	; 0x04
    1e3a:	95 81       	ldd	r25, Z+5	; 0x05
    1e3c:	a6 81       	ldd	r26, Z+6	; 0x06
    1e3e:	b7 81       	ldd	r27, Z+7	; 0x07
    1e40:	ef 96       	adiw	r28, 0x3f	; 63
    1e42:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e44:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e46:	ef 97       	sbiw	r28, 0x3f	; 63
    1e48:	84 83       	std	Z+4, r24	; 0x04
    1e4a:	95 83       	std	Z+5, r25	; 0x05
    1e4c:	a6 83       	std	Z+6, r26	; 0x06
    1e4e:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    1e50:	2c e5       	ldi	r18, 0x5C	; 92
    1e52:	31 e0       	ldi	r19, 0x01	; 1
    1e54:	f9 01       	movw	r30, r18
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	a2 81       	ldd	r26, Z+2	; 0x02
    1e5c:	b3 81       	ldd	r27, Z+3	; 0x03
    1e5e:	c1 58       	subi	r28, 0x81	; 129
    1e60:	df 4f       	sbci	r29, 0xFF	; 255
    1e62:	e8 81       	ld	r30, Y
    1e64:	f9 81       	ldd	r31, Y+1	; 0x01
    1e66:	cf 57       	subi	r28, 0x7F	; 127
    1e68:	d0 40       	sbci	r29, 0x00	; 0
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    1e72:	f9 01       	movw	r30, r18
    1e74:	84 81       	ldd	r24, Z+4	; 0x04
    1e76:	95 81       	ldd	r25, Z+5	; 0x05
    1e78:	a6 81       	ldd	r26, Z+6	; 0x06
    1e7a:	b7 81       	ldd	r27, Z+7	; 0x07
    1e7c:	c1 58       	subi	r28, 0x81	; 129
    1e7e:	df 4f       	sbci	r29, 0xFF	; 255
    1e80:	e8 81       	ld	r30, Y
    1e82:	f9 81       	ldd	r31, Y+1	; 0x01
    1e84:	cf 57       	subi	r28, 0x7F	; 127
    1e86:	d0 40       	sbci	r29, 0x00	; 0
    1e88:	84 83       	std	Z+4, r24	; 0x04
    1e8a:	95 83       	std	Z+5, r25	; 0x05
    1e8c:	a6 83       	std	Z+6, r26	; 0x06
    1e8e:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    1e90:	89 ef       	ldi	r24, 0xF9	; 249
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(c_wii[0]);
    1e98:	ef 96       	adiw	r28, 0x3f	; 63
    1e9a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e9c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e9e:	ef 97       	sbiw	r28, 0x3f	; 63
    1ea0:	6d 91       	ld	r22, X+
    1ea2:	7d 91       	ld	r23, X+
    1ea4:	8d 91       	ld	r24, X+
    1ea6:	9c 91       	ld	r25, X
    1ea8:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    1eac:	cb 01       	movw	r24, r22
    1eae:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    1eb2:	84 ef       	ldi	r24, 0xF4	; 244
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(c_wii[1]);
    1eba:	ef 96       	adiw	r28, 0x3f	; 63
    1ebc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ebe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ec0:	ef 97       	sbiw	r28, 0x3f	; 63
    1ec2:	64 81       	ldd	r22, Z+4	; 0x04
    1ec4:	75 81       	ldd	r23, Z+5	; 0x05
    1ec6:	86 81       	ldd	r24, Z+6	; 0x06
    1ec8:	97 81       	ldd	r25, Z+7	; 0x07
    1eca:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    1ece:	cb 01       	movw	r24, r22
    1ed0:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1ed4:	82 ef       	ldi	r24, 0xF2	; 242
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    1edc:	81 ee       	ldi	r24, 0xE1	; 225
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(dir[0]*1000);
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a e7       	ldi	r20, 0x7A	; 122
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	c1 58       	subi	r28, 0x81	; 129
    1eee:	df 4f       	sbci	r29, 0xFF	; 255
    1ef0:	a8 81       	ld	r26, Y
    1ef2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ef4:	cf 57       	subi	r28, 0x7F	; 127
    1ef6:	d0 40       	sbci	r29, 0x00	; 0
    1ef8:	6d 91       	ld	r22, X+
    1efa:	7d 91       	ld	r23, X+
    1efc:	8d 91       	ld	r24, X+
    1efe:	9c 91       	ld	r25, X
    1f00:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1f04:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    1f08:	cb 01       	movw	r24, r22
    1f0a:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    1f0e:	89 ed       	ldi	r24, 0xD9	; 217
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
	m_usb_tx_int(dir[1]*1000);
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a e7       	ldi	r20, 0x7A	; 122
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	c1 58       	subi	r28, 0x81	; 129
    1f20:	df 4f       	sbci	r29, 0xFF	; 255
    1f22:	e8 81       	ld	r30, Y
    1f24:	f9 81       	ldd	r31, Y+1	; 0x01
    1f26:	cf 57       	subi	r28, 0x7F	; 127
    1f28:	d0 40       	sbci	r29, 0x00	; 0
    1f2a:	64 81       	ldd	r22, Z+4	; 0x04
    1f2c:	75 81       	ldd	r23, Z+5	; 0x05
    1f2e:	86 81       	ldd	r24, Z+6	; 0x06
    1f30:	97 81       	ldd	r25, Z+7	; 0x07
    1f32:	0e 94 a1 19 	call	0x3342	; 0x3342 <__mulsf3>
    1f36:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1f40:	87 ed       	ldi	r24, 0xD7	; 215
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
    1f48:	18 c0       	rjmp	.+48     	; 0x1f7a <localization+0xde2>
    1f4a:	e7 96       	adiw	r28, 0x37	; 55
    1f4c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f4e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f50:	e7 97       	sbiw	r28, 0x37	; 55
    1f52:	2c 5f       	subi	r18, 0xFC	; 252
    1f54:	3f 4f       	sbci	r19, 0xFF	; 255
    1f56:	e7 96       	adiw	r28, 0x37	; 55
    1f58:	3f af       	std	Y+63, r19	; 0x3f
    1f5a:	2e af       	std	Y+62, r18	; 0x3e
    1f5c:	e7 97       	sbiw	r28, 0x37	; 55
    1f5e:	ab 96       	adiw	r28, 0x2b	; 43
    1f60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f64:	ab 97       	sbiw	r28, 0x2b	; 43
    1f66:	04 96       	adiw	r24, 0x04	; 4
    1f68:	ab 96       	adiw	r28, 0x2b	; 43
    1f6a:	9f af       	std	Y+63, r25	; 0x3f
    1f6c:	8e af       	std	Y+62, r24	; 0x3e
    1f6e:	ab 97       	sbiw	r28, 0x2b	; 43
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1f70:	e3 96       	adiw	r28, 0x33	; 51
    1f72:	6e ac       	ldd	r6, Y+62	; 0x3e
    1f74:	7f ac       	ldd	r7, Y+63	; 0x3f
    1f76:	e3 97       	sbiw	r28, 0x33	; 51
    1f78:	b5 c9       	rjmp	.-3222   	; 0x12e4 <localization+0x14c>
	m_usb_tx_string("Direction vx: 0.");
	m_usb_tx_int(dir[0]*1000);
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}
    1f7a:	ca 57       	subi	r28, 0x7A	; 122
    1f7c:	df 4f       	sbci	r29, 0xFF	; 255
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	cf 90       	pop	r12
    1f98:	bf 90       	pop	r11
    1f9a:	af 90       	pop	r10
    1f9c:	9f 90       	pop	r9
    1f9e:	8f 90       	pop	r8
    1fa0:	7f 90       	pop	r7
    1fa2:	6f 90       	pop	r6
    1fa4:	5f 90       	pop	r5
    1fa6:	4f 90       	pop	r4
    1fa8:	3f 90       	pop	r3
    1faa:	2f 90       	pop	r2
    1fac:	08 95       	ret

00001fae <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1fae:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1fb0:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1fb2:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1fb4:	8c e0       	ldi	r24, 0x0C	; 12
    1fb6:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1fba:	e9 e6       	ldi	r30, 0x69	; 105
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	80 62       	ori	r24, 0x20	; 32
    1fc2:	80 83       	st	Z, r24
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 7e       	andi	r24, 0xEF	; 239
    1fc8:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1fca:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1fcc:	78 94       	sei
    1fce:	08 95       	ret

00001fd0 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1fd0:	1f 93       	push	r17
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	18 2f       	mov	r17, r24
    1fd8:	d6 2f       	mov	r29, r22
    1fda:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1fdc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1fe0:	94 ea       	ldi	r25, 0xA4	; 164
    1fe2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1fe6:	ec eb       	ldi	r30, 0xBC	; 188
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	90 81       	ld	r25, Z
    1fec:	99 23       	and	r25, r25
    1fee:	ec f7       	brge	.-6      	; 0x1fea <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1ff0:	90 e5       	ldi	r25, 0x50	; 80
    1ff2:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ff6:	94 e8       	ldi	r25, 0x84	; 132
    1ff8:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1ffc:	ec eb       	ldi	r30, 0xBC	; 188
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	90 81       	ld	r25, Z
    2002:	99 23       	and	r25, r25
    2004:	ec f7       	brge	.-6      	; 0x2000 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2006:	90 91 b9 00 	lds	r25, 0x00B9
    200a:	98 7f       	andi	r25, 0xF8	; 248
    200c:	90 32       	cpi	r25, 0x20	; 32
    200e:	29 f4       	brne	.+10     	; 0x201a <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2010:	84 e9       	ldi	r24, 0x94	; 148
    2012:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	2d c0       	rjmp	.+90     	; 0x2074 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2020:	84 e8       	ldi	r24, 0x84	; 132
    2022:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2026:	ec eb       	ldi	r30, 0xBC	; 188
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	90 81       	ld	r25, Z
    202c:	99 23       	and	r25, r25
    202e:	ec f7       	brge	.-6      	; 0x202a <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2030:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2034:	84 e8       	ldi	r24, 0x84	; 132
    2036:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    203a:	ec eb       	ldi	r30, 0xBC	; 188
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	88 23       	and	r24, r24
    2042:	ec f7       	brge	.-6      	; 0x203e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2044:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2048:	84 e8       	ldi	r24, 0x84	; 132
    204a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    204e:	ec eb       	ldi	r30, 0xBC	; 188
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	88 23       	and	r24, r24
    2056:	ec f7       	brge	.-6      	; 0x2052 <m_rf_open+0x82>
	
	TWDR = packet_length;
    2058:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    205c:	84 e8       	ldi	r24, 0x84	; 132
    205e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2062:	ec eb       	ldi	r30, 0xBC	; 188
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	88 23       	and	r24, r24
    206a:	ec f7       	brge	.-6      	; 0x2066 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    206c:	84 e9       	ldi	r24, 0x94	; 148
    206e:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
}
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	08 95       	ret

0000207c <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2082:	84 ea       	ldi	r24, 0xA4	; 164
    2084:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2088:	ec eb       	ldi	r30, 0xBC	; 188
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	90 81       	ld	r25, Z
    208e:	99 23       	and	r25, r25
    2090:	ec f7       	brge	.-6      	; 0x208c <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2092:	81 e5       	ldi	r24, 0x51	; 81
    2094:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2098:	84 e8       	ldi	r24, 0x84	; 132
    209a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    209e:	ec eb       	ldi	r30, 0xBC	; 188
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	90 81       	ld	r25, Z
    20a4:	99 23       	and	r25, r25
    20a6:	ec f7       	brge	.-6      	; 0x20a2 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    20a8:	80 91 b9 00 	lds	r24, 0x00B9
    20ac:	88 7f       	andi	r24, 0xF8	; 248
    20ae:	88 34       	cpi	r24, 0x48	; 72
    20b0:	29 f4       	brne	.+10     	; 0x20bc <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    20b2:	84 e9       	ldi	r24, 0x94	; 148
    20b4:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	41 c0       	rjmp	.+130    	; 0x213e <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    20bc:	84 ec       	ldi	r24, 0xC4	; 196
    20be:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    20c2:	ec eb       	ldi	r30, 0xBC	; 188
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	90 81       	ld	r25, Z
    20c8:	99 23       	and	r25, r25
    20ca:	ec f7       	brge	.-6      	; 0x20c6 <m_rf_read+0x4a>
	bytes = TWDR;
    20cc:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    20d0:	46 13       	cpse	r20, r22
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    20d4:	84 2f       	mov	r24, r20
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	18 16       	cp	r1, r24
    20dc:	19 06       	cpc	r1, r25
    20de:	44 f0       	brlt	.+16     	; 0x20f0 <m_rf_read+0x74>
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	1a c0       	rjmp	.+52     	; 0x211a <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    20e6:	84 e9       	ldi	r24, 0x94	; 148
    20e8:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	27 c0       	rjmp	.+78     	; 0x213e <m_rf_read+0xc2>
    20f0:	d9 01       	movw	r26, r18
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	41 50       	subi	r20, 0x01	; 1
    20f6:	51 09       	sbc	r21, r1
    20f8:	b9 01       	movw	r22, r18
    20fa:	64 0f       	add	r22, r20
    20fc:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    20fe:	ec eb       	ldi	r30, 0xBC	; 188
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2104:	cb eb       	ldi	r28, 0xBB	; 187
    2106:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2108:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    210a:	90 81       	ld	r25, Z
    210c:	99 23       	and	r25, r25
    210e:	ec f7       	brge	.-6      	; 0x210a <m_rf_read+0x8e>
		buffer[i] = TWDR;
    2110:	98 81       	ld	r25, Y
    2112:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2114:	a6 17       	cp	r26, r22
    2116:	b7 07       	cpc	r27, r23
    2118:	b9 f7       	brne	.-18     	; 0x2108 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    211a:	84 e8       	ldi	r24, 0x84	; 132
    211c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2120:	ec eb       	ldi	r30, 0xBC	; 188
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	90 81       	ld	r25, Z
    2126:	99 23       	and	r25, r25
    2128:	ec f7       	brge	.-6      	; 0x2124 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    212a:	80 91 bb 00 	lds	r24, 0x00BB
    212e:	f9 01       	movw	r30, r18
    2130:	e4 0f       	add	r30, r20
    2132:	f5 1f       	adc	r31, r21
    2134:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2136:	84 e9       	ldi	r24, 0x94	; 148
    2138:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
}
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	08 95       	ret

00002144 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    2148:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    214a:	94 ea       	ldi	r25, 0xA4	; 164
    214c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2150:	ec eb       	ldi	r30, 0xBC	; 188
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	90 81       	ld	r25, Z
    2156:	99 23       	and	r25, r25
    2158:	ec f7       	brge	.-6      	; 0x2154 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    215a:	90 e5       	ldi	r25, 0x50	; 80
    215c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2160:	94 e8       	ldi	r25, 0x84	; 132
    2162:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2166:	ec eb       	ldi	r30, 0xBC	; 188
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	90 81       	ld	r25, Z
    216c:	99 23       	and	r25, r25
    216e:	ec f7       	brge	.-6      	; 0x216a <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2170:	90 91 b9 00 	lds	r25, 0x00B9
    2174:	98 7f       	andi	r25, 0xF8	; 248
    2176:	90 32       	cpi	r25, 0x20	; 32
    2178:	31 f4       	brne	.+12     	; 0x2186 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    217a:	84 e9       	ldi	r24, 0x94	; 148
    217c:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    2180:	78 94       	sei
		return 0;
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	2d c0       	rjmp	.+90     	; 0x21e0 <m_rf_send+0x9c>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    2186:	93 e0       	ldi	r25, 0x03	; 3
    2188:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    218c:	94 e8       	ldi	r25, 0x84	; 132
    218e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2192:	ec eb       	ldi	r30, 0xBC	; 188
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	90 81       	ld	r25, Z
    2198:	99 23       	and	r25, r25
    219a:	ec f7       	brge	.-6      	; 0x2196 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    219c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    21a0:	84 e8       	ldi	r24, 0x84	; 132
    21a2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    21a6:	ec eb       	ldi	r30, 0xBC	; 188
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	88 23       	and	r24, r24
    21ae:	ec f7       	brge	.-6      	; 0x21aa <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    21b0:	44 23       	and	r20, r20
    21b2:	89 f0       	breq	.+34     	; 0x21d6 <m_rf_send+0x92>
    21b4:	db 01       	movw	r26, r22
    21b6:	64 0f       	add	r22, r20
    21b8:	71 1d       	adc	r23, r1
		TWDR = buffer[i];
    21ba:	cb eb       	ldi	r28, 0xBB	; 187
    21bc:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    21be:	ec eb       	ldi	r30, 0xBC	; 188
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	94 e8       	ldi	r25, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    21c4:	8d 91       	ld	r24, X+
    21c6:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
    21c8:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){};
    21ca:	80 81       	ld	r24, Z
    21cc:	88 23       	and	r24, r24
    21ce:	ec f7       	brge	.-6      	; 0x21ca <m_rf_send+0x86>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    21d0:	a6 17       	cp	r26, r22
    21d2:	b7 07       	cpc	r27, r23
    21d4:	b9 f7       	brne	.-18     	; 0x21c4 <m_rf_send+0x80>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    21d6:	84 e9       	ldi	r24, 0x94	; 148
    21d8:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    21dc:	78 94       	sei
	
	return 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
}
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret

000021e6 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    21ec:	80 ea       	ldi	r24, 0xA0	; 160
    21ee:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    21f2:	82 e1       	ldi	r24, 0x12	; 18
    21f4:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    21f6:	09 b4       	in	r0, 0x29	; 41
    21f8:	00 fe       	sbrs	r0, 0
    21fa:	fd cf       	rjmp	.-6      	; 0x21f6 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    21fc:	80 e9       	ldi	r24, 0x90	; 144
    21fe:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2202:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2206:	10 92 87 01 	sts	0x0187, r1
	cdc_line_rtsdtr = 0;
    220a:	10 92 84 01 	sts	0x0184, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    220e:	8c e0       	ldi	r24, 0x0C	; 12
    2210:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2214:	78 94       	sei
    2216:	08 95       	ret

00002218 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    221c:	90 91 87 01 	lds	r25, 0x0187
    2220:	99 23       	and	r25, r25
    2222:	09 f4       	brne	.+2      	; 0x2226 <m_usb_tx_char+0xe>
    2224:	4c c0       	rjmp	.+152    	; 0x22be <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2226:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2228:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    222a:	24 e0       	ldi	r18, 0x04	; 4
    222c:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2230:	20 91 85 01 	lds	r18, 0x0185
    2234:	22 23       	and	r18, r18
    2236:	49 f0       	breq	.+18     	; 0x224a <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    2238:	20 91 e8 00 	lds	r18, 0x00E8
    223c:	25 fd       	sbrc	r18, 5
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    2240:	9f bf       	out	0x3f, r25	; 63
			return -1;
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	41 c0       	rjmp	.+130    	; 0x22c8 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    2246:	10 92 85 01 	sts	0x0185, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    224a:	30 91 e4 00 	lds	r19, 0x00E4
    224e:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2250:	20 91 e8 00 	lds	r18, 0x00E8
    2254:	25 fd       	sbrc	r18, 5
    2256:	24 c0       	rjmp	.+72     	; 0x22a0 <m_usb_tx_char+0x88>
		SREG = intr_state;
    2258:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    225a:	90 91 e4 00 	lds	r25, 0x00E4
    225e:	93 17       	cp	r25, r19
    2260:	81 f0       	breq	.+32     	; 0x2282 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2262:	90 91 87 01 	lds	r25, 0x0187
    2266:	99 23       	and	r25, r25
    2268:	61 f1       	breq	.+88     	; 0x22c2 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    226a:	a9 ee       	ldi	r26, 0xE9	; 233
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2270:	e8 ee       	ldi	r30, 0xE8	; 232
    2272:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2274:	c4 ee       	ldi	r28, 0xE4	; 228
    2276:	d0 e0       	ldi	r29, 0x00	; 0
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    227a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    227c:	98 81       	ld	r25, Y
    227e:	93 13       	cpse	r25, r19
    2280:	05 c0       	rjmp	.+10     	; 0x228c <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	80 93 85 01 	sts	0x0185, r24
			return -1;
    2288:	8f ef       	ldi	r24, 0xFF	; 255
    228a:	1e c0       	rjmp	.+60     	; 0x22c8 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    228c:	90 91 87 01 	lds	r25, 0x0187
    2290:	99 23       	and	r25, r25
    2292:	c9 f0       	breq	.+50     	; 0x22c6 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    2294:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2296:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2298:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    229a:	20 81       	ld	r18, Z
    229c:	25 ff       	sbrs	r18, 5
    229e:	ed cf       	rjmp	.-38     	; 0x227a <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    22a0:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    22a4:	80 91 e8 00 	lds	r24, 0x00E8
    22a8:	85 fd       	sbrc	r24, 5
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <m_usb_tx_char+0x9a>
    22ac:	8a e3       	ldi	r24, 0x3A	; 58
    22ae:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    22b2:	85 e0       	ldi	r24, 0x05	; 5
    22b4:	80 93 86 01 	sts	0x0186, r24
	SREG = intr_state;
    22b8:	9f bf       	out	0x3f, r25	; 63
	return 0;
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    22c2:	8f ef       	ldi	r24, 0xFF	; 255
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <m_usb_tx_char+0xb0>
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	08 95       	ret

000022ce <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	8f 93       	push	r24
    22da:	9f 93       	push	r25
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    22e0:	e1 ee       	ldi	r30, 0xE1	; 225
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
        UDINT = 0;
    22e6:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    22e8:	83 ff       	sbrs	r24, 3
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <__vector_10+0x40>
		UENUM = 0;
    22ec:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    22f0:	91 e0       	ldi	r25, 0x01	; 1
    22f2:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    22f6:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    22fa:	92 e1       	ldi	r25, 0x12	; 18
    22fc:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2300:	98 e0       	ldi	r25, 0x08	; 8
    2302:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2306:	10 92 87 01 	sts	0x0187, r1
		cdc_line_rtsdtr = 0;
    230a:	10 92 84 01 	sts	0x0184, r1
        }
	if (intbits & (1<<SOFI)) {
    230e:	82 ff       	sbrs	r24, 2
    2310:	13 c0       	rjmp	.+38     	; 0x2338 <__vector_10+0x6a>
		if (usb_configuration) {
    2312:	80 91 87 01 	lds	r24, 0x0187
    2316:	88 23       	and	r24, r24
    2318:	79 f0       	breq	.+30     	; 0x2338 <__vector_10+0x6a>
			t = transmit_flush_timer;
    231a:	80 91 86 01 	lds	r24, 0x0186
			if (t) {
    231e:	88 23       	and	r24, r24
    2320:	59 f0       	breq	.+22     	; 0x2338 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2322:	81 50       	subi	r24, 0x01	; 1
    2324:	80 93 86 01 	sts	0x0186, r24
				if (!t) {
    2328:	81 11       	cpse	r24, r1
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    232c:	84 e0       	ldi	r24, 0x04	; 4
    232e:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2332:	8a e3       	ldi	r24, 0x3A	; 58
    2334:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2338:	ff 91       	pop	r31
    233a:	ef 91       	pop	r30
    233c:	9f 91       	pop	r25
    233e:	8f 91       	pop	r24
    2340:	0f 90       	pop	r0
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	0f 90       	pop	r0
    2346:	1f 90       	pop	r1
    2348:	18 95       	reti

0000234a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    234a:	1f 92       	push	r1
    234c:	0f 92       	push	r0
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	0f 92       	push	r0
    2352:	11 24       	eor	r1, r1
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	2f 93       	push	r18
    235a:	3f 93       	push	r19
    235c:	4f 93       	push	r20
    235e:	5f 93       	push	r21
    2360:	6f 93       	push	r22
    2362:	7f 93       	push	r23
    2364:	8f 93       	push	r24
    2366:	9f 93       	push	r25
    2368:	af 93       	push	r26
    236a:	bf 93       	push	r27
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	ef 93       	push	r30
    2372:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2374:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2378:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    237c:	83 ff       	sbrs	r24, 3
    237e:	4c c1       	rjmp	.+664    	; 0x2618 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    2380:	e1 ef       	ldi	r30, 0xF1	; 241
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    2386:	80 81       	ld	r24, Z
                wValue = UEDATX;
    2388:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    238a:	90 81       	ld	r25, Z
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    2390:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    2392:	90 81       	ld	r25, Z
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	59 2b       	or	r21, r25
                wLength = UEDATX;
    2398:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    239a:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    239c:	92 ef       	ldi	r25, 0xF2	; 242
    239e:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    23a2:	86 30       	cpi	r24, 0x06	; 6
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <__vector_11+0x5e>
    23a6:	58 c0       	rjmp	.+176    	; 0x2458 <__vector_11+0x10e>
    23a8:	04 c0       	rjmp	.+8      	; 0x23b2 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    23aa:	81 e2       	ldi	r24, 0x21	; 33
    23ac:	80 93 eb 00 	sts	0x00EB, r24
					return;
    23b0:	3a c1       	rjmp	.+628    	; 0x2626 <__vector_11+0x2dc>
    23b2:	66 e0       	ldi	r22, 0x06	; 6
    23b4:	85 e0       	ldi	r24, 0x05	; 5
    23b6:	92 e0       	ldi	r25, 0x02	; 2
				}
				desc_val = pgm_read_word(list);
    23b8:	fc 01       	movw	r30, r24
    23ba:	a5 91       	lpm	r26, Z+
    23bc:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    23be:	2a 17       	cp	r18, r26
    23c0:	3b 07       	cpc	r19, r27
    23c2:	11 f0       	breq	.+4      	; 0x23c8 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    23c4:	07 96       	adiw	r24, 0x07	; 7
					continue;
    23c6:	23 c0       	rjmp	.+70     	; 0x240e <__vector_11+0xc4>
				}
				list += 2;
    23c8:	fc 01       	movw	r30, r24
    23ca:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    23cc:	a5 91       	lpm	r26, Z+
    23ce:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    23d0:	4a 17       	cp	r20, r26
    23d2:	5b 07       	cpc	r21, r27
    23d4:	11 f0       	breq	.+4      	; 0x23da <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    23d6:	07 96       	adiw	r24, 0x07	; 7
					continue;
    23d8:	1a c0       	rjmp	.+52     	; 0x240e <__vector_11+0xc4>
				}
				list += 2;
    23da:	fc 01       	movw	r30, r24
    23dc:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    23de:	45 91       	lpm	r20, Z+
    23e0:	54 91       	lpm	r21, Z
				list += 2;
    23e2:	fc 01       	movw	r30, r24
    23e4:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    23e6:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    23e8:	87 2f       	mov	r24, r23
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    23ee:	8f 3f       	cpi	r24, 0xFF	; 255
    23f0:	91 05       	cpc	r25, r1
    23f2:	19 f0       	breq	.+6      	; 0x23fa <__vector_11+0xb0>
    23f4:	10 f0       	brcs	.+4      	; 0x23fa <__vector_11+0xb0>
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	82 17       	cp	r24, r18
    23fc:	08 f4       	brcc	.+2      	; 0x2400 <__vector_11+0xb6>
    23fe:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2400:	a8 ee       	ldi	r26, 0xE8	; 232
    2402:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2404:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2406:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2408:	c1 ef       	ldi	r28, 0xF1	; 241
    240a:	d0 e0       	ldi	r29, 0x00	; 0
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <__vector_11+0xca>
    240e:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2410:	99 f6       	brne	.-90     	; 0x23b8 <__vector_11+0x6e>
    2412:	cb cf       	rjmp	.-106    	; 0x23aa <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2414:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2416:	98 2f       	mov	r25, r24
    2418:	95 70       	andi	r25, 0x05	; 5
    241a:	e1 f3       	breq	.-8      	; 0x2414 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    241c:	82 fd       	sbrc	r24, 2
    241e:	03 c1       	rjmp	.+518    	; 0x2626 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2420:	32 2f       	mov	r19, r18
    2422:	21 31       	cpi	r18, 0x11	; 17
    2424:	08 f0       	brcs	.+2      	; 0x2428 <__vector_11+0xde>
    2426:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    2428:	33 23       	and	r19, r19
    242a:	09 f4       	brne	.+2      	; 0x242e <__vector_11+0xe4>
    242c:	f9 c0       	rjmp	.+498    	; 0x2620 <__vector_11+0x2d6>
    242e:	fa 01       	movw	r30, r20
    2430:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    2432:	94 91       	lpm	r25, Z
    2434:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2436:	81 50       	subi	r24, 0x01	; 1
    2438:	31 96       	adiw	r30, 0x01	; 1
    243a:	81 11       	cpse	r24, r1
    243c:	fa cf       	rjmp	.-12     	; 0x2432 <__vector_11+0xe8>
    243e:	8f ef       	ldi	r24, 0xFF	; 255
    2440:	83 0f       	add	r24, r19
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	48 0f       	add	r20, r24
    2448:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    244a:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    244c:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    244e:	21 11       	cpse	r18, r1
    2450:	e1 cf       	rjmp	.-62     	; 0x2414 <__vector_11+0xca>
    2452:	30 31       	cpi	r19, 0x10	; 16
    2454:	f9 f2       	breq	.-66     	; 0x2414 <__vector_11+0xca>
    2456:	e7 c0       	rjmp	.+462    	; 0x2626 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2458:	85 30       	cpi	r24, 0x05	; 5
    245a:	61 f4       	brne	.+24     	; 0x2474 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    245c:	8e ef       	ldi	r24, 0xFE	; 254
    245e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2462:	e8 ee       	ldi	r30, 0xE8	; 232
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	80 ff       	sbrs	r24, 0
    246a:	fd cf       	rjmp	.-6      	; 0x2466 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    246c:	20 68       	ori	r18, 0x80	; 128
    246e:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2472:	d9 c0       	rjmp	.+434    	; 0x2626 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2474:	89 30       	cpi	r24, 0x09	; 9
    2476:	09 f0       	breq	.+2      	; 0x247a <__vector_11+0x130>
    2478:	35 c0       	rjmp	.+106    	; 0x24e4 <__vector_11+0x19a>
    247a:	61 11       	cpse	r22, r1
    247c:	cd c0       	rjmp	.+410    	; 0x2618 <__vector_11+0x2ce>
			usb_configuration = wValue;
    247e:	20 93 87 01 	sts	0x0187, r18
			cdc_line_rtsdtr = 0;
    2482:	10 92 84 01 	sts	0x0184, r1
			transmit_flush_timer = 0;
    2486:	10 92 86 01 	sts	0x0186, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    248a:	8e ef       	ldi	r24, 0xFE	; 254
    248c:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2490:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2492:	2e ea       	ldi	r18, 0xAE	; 174
    2494:	32 e0       	ldi	r19, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    2496:	c9 ee       	ldi	r28, 0xE9	; 233
    2498:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    249a:	ab ee       	ldi	r26, 0xEB	; 235
    249c:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    249e:	0c ee       	ldi	r16, 0xEC	; 236
    24a0:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    24a2:	6d ee       	ldi	r22, 0xED	; 237
    24a4:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    24a6:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    24a8:	a9 01       	movw	r20, r18
    24aa:	4f 5f       	subi	r20, 0xFF	; 255
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	f9 01       	movw	r30, r18
    24b0:	94 91       	lpm	r25, Z
				UECONX = en;
    24b2:	9c 93       	st	X, r25
				if (en) {
    24b4:	99 23       	and	r25, r25
    24b6:	61 f0       	breq	.+24     	; 0x24d0 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    24b8:	fa 01       	movw	r30, r20
    24ba:	44 91       	lpm	r20, Z
    24bc:	f8 01       	movw	r30, r16
    24be:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    24c0:	f9 01       	movw	r30, r18
    24c2:	32 96       	adiw	r30, 0x02	; 2
    24c4:	94 91       	lpm	r25, Z
    24c6:	2d 5f       	subi	r18, 0xFD	; 253
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	fb 01       	movw	r30, r22
    24cc:	90 83       	st	Z, r25
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    24d0:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	85 30       	cpi	r24, 0x05	; 5
    24d6:	39 f7       	brne	.-50     	; 0x24a6 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    24d8:	ea ee       	ldi	r30, 0xEA	; 234
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	8e e1       	ldi	r24, 0x1E	; 30
    24de:	80 83       	st	Z, r24
        		UERST = 0;
    24e0:	10 82       	st	Z, r1
			return;
    24e2:	a1 c0       	rjmp	.+322    	; 0x2626 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    24e4:	88 30       	cpi	r24, 0x08	; 8
    24e6:	81 f4       	brne	.+32     	; 0x2508 <__vector_11+0x1be>
    24e8:	60 38       	cpi	r22, 0x80	; 128
    24ea:	09 f0       	breq	.+2      	; 0x24ee <__vector_11+0x1a4>
    24ec:	95 c0       	rjmp	.+298    	; 0x2618 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    24ee:	e8 ee       	ldi	r30, 0xE8	; 232
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	80 ff       	sbrs	r24, 0
    24f6:	fd cf       	rjmp	.-6      	; 0x24f2 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    24f8:	80 91 87 01 	lds	r24, 0x0187
    24fc:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2500:	8e ef       	ldi	r24, 0xFE	; 254
    2502:	80 93 e8 00 	sts	0x00E8, r24
    2506:	8f c0       	rjmp	.+286    	; 0x2626 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2508:	81 32       	cpi	r24, 0x21	; 33
    250a:	b9 f4       	brne	.+46     	; 0x253a <__vector_11+0x1f0>
    250c:	61 3a       	cpi	r22, 0xA1	; 161
    250e:	09 f0       	breq	.+2      	; 0x2512 <__vector_11+0x1c8>
    2510:	83 c0       	rjmp	.+262    	; 0x2618 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2512:	e8 ee       	ldi	r30, 0xE8	; 232
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	80 ff       	sbrs	r24, 0
    251a:	fd cf       	rjmp	.-6      	; 0x2516 <__vector_11+0x1cc>
    251c:	ee e1       	ldi	r30, 0x1E	; 30
    251e:	f1 e0       	ldi	r31, 0x01	; 1
    2520:	25 e2       	ldi	r18, 0x25	; 37
    2522:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2524:	a1 ef       	ldi	r26, 0xF1	; 241
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	81 91       	ld	r24, Z+
    252a:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    252c:	e2 17       	cp	r30, r18
    252e:	f3 07       	cpc	r31, r19
    2530:	d9 f7       	brne	.-10     	; 0x2528 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2532:	8e ef       	ldi	r24, 0xFE	; 254
    2534:	80 93 e8 00 	sts	0x00E8, r24
    2538:	76 c0       	rjmp	.+236    	; 0x2626 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    253a:	80 32       	cpi	r24, 0x20	; 32
    253c:	d1 f4       	brne	.+52     	; 0x2572 <__vector_11+0x228>
    253e:	61 32       	cpi	r22, 0x21	; 33
    2540:	09 f0       	breq	.+2      	; 0x2544 <__vector_11+0x1fa>
    2542:	6a c0       	rjmp	.+212    	; 0x2618 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2544:	e8 ee       	ldi	r30, 0xE8	; 232
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	82 ff       	sbrs	r24, 2
    254c:	fd cf       	rjmp	.-6      	; 0x2548 <__vector_11+0x1fe>
    254e:	ee e1       	ldi	r30, 0x1E	; 30
    2550:	f1 e0       	ldi	r31, 0x01	; 1
    2552:	25 e2       	ldi	r18, 0x25	; 37
    2554:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2556:	a1 ef       	ldi	r26, 0xF1	; 241
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	8c 91       	ld	r24, X
    255c:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    255e:	e2 17       	cp	r30, r18
    2560:	f3 07       	cpc	r31, r19
    2562:	d9 f7       	brne	.-10     	; 0x255a <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2564:	e8 ee       	ldi	r30, 0xE8	; 232
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	8b ef       	ldi	r24, 0xFB	; 251
    256a:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    256c:	8e ef       	ldi	r24, 0xFE	; 254
    256e:	80 83       	st	Z, r24
    2570:	5a c0       	rjmp	.+180    	; 0x2626 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2572:	82 32       	cpi	r24, 0x22	; 34
    2574:	71 f4       	brne	.+28     	; 0x2592 <__vector_11+0x248>
    2576:	61 32       	cpi	r22, 0x21	; 33
    2578:	09 f0       	breq	.+2      	; 0x257c <__vector_11+0x232>
    257a:	4e c0       	rjmp	.+156    	; 0x2618 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    257c:	20 93 84 01 	sts	0x0184, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2580:	e8 ee       	ldi	r30, 0xE8	; 232
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	80 ff       	sbrs	r24, 0
    2588:	fd cf       	rjmp	.-6      	; 0x2584 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    258a:	8e ef       	ldi	r24, 0xFE	; 254
    258c:	80 93 e8 00 	sts	0x00E8, r24
    2590:	4a c0       	rjmp	.+148    	; 0x2626 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2592:	81 11       	cpse	r24, r1
    2594:	1a c0       	rjmp	.+52     	; 0x25ca <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2596:	e8 ee       	ldi	r30, 0xE8	; 232
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 ff       	sbrs	r24, 0
    259e:	fd cf       	rjmp	.-6      	; 0x259a <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    25a0:	62 38       	cpi	r22, 0x82	; 130
    25a2:	51 f4       	brne	.+20     	; 0x25b8 <__vector_11+0x26e>
				UENUM = wIndex;
    25a4:	e9 ee       	ldi	r30, 0xE9	; 233
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    25aa:	80 91 eb 00 	lds	r24, 0x00EB
    25ae:	85 fb       	bst	r24, 5
    25b0:	88 27       	eor	r24, r24
    25b2:	80 f9       	bld	r24, 0
				UENUM = 0;
    25b4:	10 82       	st	Z, r1
    25b6:	01 c0       	rjmp	.+2      	; 0x25ba <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    25b8:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    25ba:	e1 ef       	ldi	r30, 0xF1	; 241
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 83       	st	Z, r24
			UEDATX = 0;
    25c0:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    25c2:	8e ef       	ldi	r24, 0xFE	; 254
    25c4:	80 93 e8 00 	sts	0x00E8, r24
    25c8:	2e c0       	rjmp	.+92     	; 0x2626 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    25ca:	98 2f       	mov	r25, r24
    25cc:	9d 7f       	andi	r25, 0xFD	; 253
    25ce:	91 30       	cpi	r25, 0x01	; 1
    25d0:	19 f5       	brne	.+70     	; 0x2618 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    25d2:	62 30       	cpi	r22, 0x02	; 2
    25d4:	09 f5       	brne	.+66     	; 0x2618 <__vector_11+0x2ce>
    25d6:	23 2b       	or	r18, r19
    25d8:	f9 f4       	brne	.+62     	; 0x2618 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    25da:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    25dc:	9f ef       	ldi	r25, 0xFF	; 255
    25de:	94 0f       	add	r25, r20
    25e0:	94 30       	cpi	r25, 0x04	; 4
    25e2:	d0 f4       	brcc	.+52     	; 0x2618 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    25e4:	9e ef       	ldi	r25, 0xFE	; 254
    25e6:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    25ea:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    25ee:	83 30       	cpi	r24, 0x03	; 3
    25f0:	21 f4       	brne	.+8      	; 0x25fa <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    25f2:	81 e2       	ldi	r24, 0x21	; 33
    25f4:	80 93 eb 00 	sts	0x00EB, r24
    25f8:	16 c0       	rjmp	.+44     	; 0x2626 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    25fa:	89 e1       	ldi	r24, 0x19	; 25
    25fc:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	02 c0       	rjmp	.+4      	; 0x260a <__vector_11+0x2c0>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	4a 95       	dec	r20
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <__vector_11+0x2bc>
    260e:	ea ee       	ldi	r30, 0xEA	; 234
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 83       	st	Z, r24
					UERST = 0;
    2614:	10 82       	st	Z, r1
    2616:	07 c0       	rjmp	.+14     	; 0x2626 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2618:	81 e2       	ldi	r24, 0x21	; 33
    261a:	80 93 eb 00 	sts	0x00EB, r24
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2620:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2622:	21 11       	cpse	r18, r1
    2624:	f7 ce       	rjmp	.-530    	; 0x2414 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2626:	ff 91       	pop	r31
    2628:	ef 91       	pop	r30
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	bf 91       	pop	r27
    2630:	af 91       	pop	r26
    2632:	9f 91       	pop	r25
    2634:	8f 91       	pop	r24
    2636:	7f 91       	pop	r23
    2638:	6f 91       	pop	r22
    263a:	5f 91       	pop	r21
    263c:	4f 91       	pop	r20
    263e:	3f 91       	pop	r19
    2640:	2f 91       	pop	r18
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2656:	8c 01       	movw	r16, r24
    2658:	0f 5f       	subi	r16, 0xFF	; 255
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	fc 01       	movw	r30, r24
    265e:	c4 91       	lpm	r28, Z
		if (!c) break;
    2660:	cc 23       	and	r28, r28
    2662:	71 f0       	breq	.+28     	; 0x2680 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
    2664:	ca 30       	cpi	r28, 0x0A	; 10
    2666:	19 f4       	brne	.+6      	; 0x266e <print_P+0x1e>
    2668:	8d e0       	ldi	r24, 0x0D	; 13
    266a:	0e 94 0c 11 	call	0x2218	; 0x2218 <m_usb_tx_char>
		usb_tx_char(c);
    266e:	8c 2f       	mov	r24, r28
    2670:	0e 94 0c 11 	call	0x2218	; 0x2218 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2674:	f8 01       	movw	r30, r16
    2676:	c4 91       	lpm	r28, Z
    2678:	0f 5f       	subi	r16, 0xFF	; 255
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
    267c:	c1 11       	cpse	r28, r1
    267e:	f2 cf       	rjmp	.-28     	; 0x2664 <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	08 95       	ret

00002688 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2688:	ef 92       	push	r14
    268a:	ff 92       	push	r15
    268c:	0f 93       	push	r16
    268e:	1f 93       	push	r17
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	27 97       	sbiw	r28, 0x07	; 7
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    26a4:	8e 01       	movw	r16, r28
    26a6:	0f 5f       	subi	r16, 0xFF	; 255
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	27 e0       	ldi	r18, 0x07	; 7
    26ac:	f8 01       	movw	r30, r16
    26ae:	11 92       	st	Z+, r1
    26b0:	2a 95       	dec	r18
    26b2:	e9 f7       	brne	.-6      	; 0x26ae <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    26b4:	4a e0       	ldi	r20, 0x0A	; 10
    26b6:	b8 01       	movw	r22, r16
    26b8:	0e 94 97 1a 	call	0x352e	; 0x352e <__itoa_ncheck>
    26bc:	7e 01       	movw	r14, r28
    26be:	f8 e0       	ldi	r31, 0x08	; 8
    26c0:	ef 0e       	add	r14, r31
    26c2:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    26c4:	f8 01       	movw	r30, r16
    26c6:	81 91       	ld	r24, Z+
    26c8:	8f 01       	movw	r16, r30
    26ca:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    26cc:	0e 94 0c 11 	call	0x2218	; 0x2218 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    26d0:	0e 15       	cp	r16, r14
    26d2:	1f 05       	cpc	r17, r15
    26d4:	b9 f7       	brne	.-18     	; 0x26c4 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    26d6:	27 96       	adiw	r28, 0x07	; 7
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	ef 90       	pop	r14
    26ee:	08 95       	ret

000026f0 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    26f4:	ec eb       	ldi	r30, 0xBC	; 188
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	88 23       	and	r24, r24
    26fc:	34 f0       	brlt	.+12     	; 0x270a <twi_wait+0x1a>
    26fe:	2f 5f       	subi	r18, 0xFF	; 255
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	29 3e       	cpi	r18, 0xE9	; 233
    2704:	83 e0       	ldi	r24, 0x03	; 3
    2706:	38 07       	cpc	r19, r24
    2708:	b9 f7       	brne	.-18     	; 0x26f8 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	28 3e       	cpi	r18, 0xE8	; 232
    270e:	33 40       	sbci	r19, 0x03	; 3
    2710:	09 f4       	brne	.+2      	; 0x2714 <twi_wait+0x24>
    2712:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2714:	08 95       	ret

00002716 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2716:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    271a:	84 e8       	ldi	r24, 0x84	; 132
    271c:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2720:	0e 94 78 13 	call	0x26f0	; 0x26f0 <twi_wait>
    2724:	88 23       	and	r24, r24
    2726:	19 f0       	breq	.+6      	; 0x272e <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2728:	80 91 b9 00 	lds	r24, 0x00B9
    272c:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    272e:	08 95       	ret

00002730 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2730:	cf 93       	push	r28
    2732:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2734:	94 ea       	ldi	r25, 0xA4	; 164
    2736:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    273a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <twi_wait>
    273e:	88 23       	and	r24, r24
    2740:	61 f0       	breq	.+24     	; 0x275a <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2742:	8c 2f       	mov	r24, r28
    2744:	88 0f       	add	r24, r24
    2746:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    274a:	80 32       	cpi	r24, 0x20	; 32
    274c:	29 f4       	brne	.+10     	; 0x2758 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    274e:	84 e9       	ldi	r24, 0x94	; 148
    2750:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	01 c0       	rjmp	.+2      	; 0x275a <start_write+0x2a>
	}	
	return 1;	// success
    2758:	81 e0       	ldi	r24, 0x01	; 1
}	
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

0000275e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    275e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2762:	88 e5       	ldi	r24, 0x58	; 88
    2764:	0e 94 98 13 	call	0x2730	; 0x2730 <start_write>
    2768:	88 23       	and	r24, r24
    276a:	09 f4       	brne	.+2      	; 0x276e <m_wii_open+0x10>
    276c:	cd c0       	rjmp	.+410    	; 0x2908 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    2774:	88 23       	and	r24, r24
    2776:	09 f4       	brne	.+2      	; 0x277a <m_wii_open+0x1c>
    2778:	c9 c0       	rjmp	.+402    	; 0x290c <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <m_wii_open+0x28>
    2784:	c5 c0       	rjmp	.+394    	; 0x2910 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2786:	84 e9       	ldi	r24, 0x94	; 148
    2788:	80 93 bc 00 	sts	0x00BC, r24
    278c:	83 ec       	ldi	r24, 0xC3	; 195
    278e:	99 e0       	ldi	r25, 0x09	; 9
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <m_wii_open+0x32>
    2794:	00 c0       	rjmp	.+0      	; 0x2796 <m_wii_open+0x38>
    2796:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2798:	88 e5       	ldi	r24, 0x58	; 88
    279a:	0e 94 98 13 	call	0x2730	; 0x2730 <start_write>
    279e:	88 23       	and	r24, r24
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <m_wii_open+0x46>
    27a2:	b8 c0       	rjmp	.+368    	; 0x2914 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27aa:	88 23       	and	r24, r24
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <m_wii_open+0x52>
    27ae:	b4 c0       	rjmp	.+360    	; 0x2918 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27b6:	88 23       	and	r24, r24
    27b8:	09 f4       	brne	.+2      	; 0x27bc <m_wii_open+0x5e>
    27ba:	b0 c0       	rjmp	.+352    	; 0x291c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27c2:	88 23       	and	r24, r24
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <m_wii_open+0x6a>
    27c6:	ac c0       	rjmp	.+344    	; 0x2920 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27ce:	88 23       	and	r24, r24
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <m_wii_open+0x76>
    27d2:	a8 c0       	rjmp	.+336    	; 0x2924 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27da:	88 23       	and	r24, r24
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <m_wii_open+0x82>
    27de:	a4 c0       	rjmp	.+328    	; 0x2928 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27e6:	88 23       	and	r24, r24
    27e8:	09 f4       	brne	.+2      	; 0x27ec <m_wii_open+0x8e>
    27ea:	a0 c0       	rjmp	.+320    	; 0x292c <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27f2:	88 23       	and	r24, r24
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <m_wii_open+0x9a>
    27f6:	9c c0       	rjmp	.+312    	; 0x2930 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    27f8:	80 e9       	ldi	r24, 0x90	; 144
    27fa:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    27fe:	88 23       	and	r24, r24
    2800:	09 f4       	brne	.+2      	; 0x2804 <m_wii_open+0xa6>
    2802:	98 c0       	rjmp	.+304    	; 0x2934 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2804:	84 e9       	ldi	r24, 0x94	; 148
    2806:	80 93 bc 00 	sts	0x00BC, r24
    280a:	83 ec       	ldi	r24, 0xC3	; 195
    280c:	99 e0       	ldi	r25, 0x09	; 9
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <m_wii_open+0xb0>
    2812:	00 c0       	rjmp	.+0      	; 0x2814 <m_wii_open+0xb6>
    2814:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2816:	88 e5       	ldi	r24, 0x58	; 88
    2818:	0e 94 98 13 	call	0x2730	; 0x2730 <start_write>
    281c:	88 23       	and	r24, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <m_wii_open+0xc4>
    2820:	8b c0       	rjmp	.+278    	; 0x2938 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2822:	87 e0       	ldi	r24, 0x07	; 7
    2824:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    2828:	88 23       	and	r24, r24
    282a:	09 f4       	brne	.+2      	; 0x282e <m_wii_open+0xd0>
    282c:	87 c0       	rjmp	.+270    	; 0x293c <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    2834:	88 23       	and	r24, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <m_wii_open+0xdc>
    2838:	83 c0       	rjmp	.+262    	; 0x2940 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    283a:	81 e4       	ldi	r24, 0x41	; 65
    283c:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    2840:	88 23       	and	r24, r24
    2842:	09 f4       	brne	.+2      	; 0x2846 <m_wii_open+0xe8>
    2844:	7f c0       	rjmp	.+254    	; 0x2944 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2846:	84 e9       	ldi	r24, 0x94	; 148
    2848:	80 93 bc 00 	sts	0x00BC, r24
    284c:	83 ec       	ldi	r24, 0xC3	; 195
    284e:	99 e0       	ldi	r25, 0x09	; 9
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <m_wii_open+0xf2>
    2854:	00 c0       	rjmp	.+0      	; 0x2856 <m_wii_open+0xf8>
    2856:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2858:	88 e5       	ldi	r24, 0x58	; 88
    285a:	0e 94 98 13 	call	0x2730	; 0x2730 <start_write>
    285e:	88 23       	and	r24, r24
    2860:	09 f4       	brne	.+2      	; 0x2864 <m_wii_open+0x106>
    2862:	72 c0       	rjmp	.+228    	; 0x2948 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2864:	8a e1       	ldi	r24, 0x1A	; 26
    2866:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    286a:	88 23       	and	r24, r24
    286c:	09 f4       	brne	.+2      	; 0x2870 <m_wii_open+0x112>
    286e:	6e c0       	rjmp	.+220    	; 0x294c <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2870:	80 e4       	ldi	r24, 0x40	; 64
    2872:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    2876:	88 23       	and	r24, r24
    2878:	09 f4       	brne	.+2      	; 0x287c <m_wii_open+0x11e>
    287a:	6a c0       	rjmp	.+212    	; 0x2950 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    2882:	88 23       	and	r24, r24
    2884:	09 f4       	brne	.+2      	; 0x2888 <m_wii_open+0x12a>
    2886:	66 c0       	rjmp	.+204    	; 0x2954 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2888:	84 e9       	ldi	r24, 0x94	; 148
    288a:	80 93 bc 00 	sts	0x00BC, r24
    288e:	83 ec       	ldi	r24, 0xC3	; 195
    2890:	99 e0       	ldi	r25, 0x09	; 9
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <m_wii_open+0x134>
    2896:	00 c0       	rjmp	.+0      	; 0x2898 <m_wii_open+0x13a>
    2898:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    289a:	88 e5       	ldi	r24, 0x58	; 88
    289c:	0e 94 98 13 	call	0x2730	; 0x2730 <start_write>
    28a0:	88 23       	and	r24, r24
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <m_wii_open+0x148>
    28a4:	59 c0       	rjmp	.+178    	; 0x2958 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    28a6:	83 e3       	ldi	r24, 0x33	; 51
    28a8:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    28ac:	88 23       	and	r24, r24
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <m_wii_open+0x154>
    28b0:	55 c0       	rjmp	.+170    	; 0x295c <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    28b8:	88 23       	and	r24, r24
    28ba:	09 f4       	brne	.+2      	; 0x28be <m_wii_open+0x160>
    28bc:	51 c0       	rjmp	.+162    	; 0x2960 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28be:	84 e9       	ldi	r24, 0x94	; 148
    28c0:	80 93 bc 00 	sts	0x00BC, r24
    28c4:	83 ec       	ldi	r24, 0xC3	; 195
    28c6:	99 e0       	ldi	r25, 0x09	; 9
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <m_wii_open+0x16a>
    28cc:	00 c0       	rjmp	.+0      	; 0x28ce <m_wii_open+0x170>
    28ce:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28d0:	88 e5       	ldi	r24, 0x58	; 88
    28d2:	0e 94 98 13 	call	0x2730	; 0x2730 <start_write>
    28d6:	88 23       	and	r24, r24
    28d8:	09 f4       	brne	.+2      	; 0x28dc <m_wii_open+0x17e>
    28da:	44 c0       	rjmp	.+136    	; 0x2964 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    28dc:	80 e3       	ldi	r24, 0x30	; 48
    28de:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    28e2:	88 23       	and	r24, r24
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <m_wii_open+0x18a>
    28e6:	40 c0       	rjmp	.+128    	; 0x2968 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    28e8:	88 e0       	ldi	r24, 0x08	; 8
    28ea:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    28ee:	88 23       	and	r24, r24
    28f0:	e9 f1       	breq	.+122    	; 0x296c <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28f2:	84 e9       	ldi	r24, 0x94	; 148
    28f4:	80 93 bc 00 	sts	0x00BC, r24
    28f8:	83 ec       	ldi	r24, 0xC3	; 195
    28fa:	99 e0       	ldi	r25, 0x09	; 9
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <m_wii_open+0x19e>
    2900:	00 c0       	rjmp	.+0      	; 0x2902 <m_wii_open+0x1a4>
    2902:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    296c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    296e:	08 95       	ret

00002970 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2970:	cf 93       	push	r28
    2972:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2974:	84 ea       	ldi	r24, 0xA4	; 164
    2976:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    297a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <twi_wait>
    297e:	88 23       	and	r24, r24
    2980:	69 f0       	breq	.+26     	; 0x299c <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2982:	8c 2f       	mov	r24, r28
    2984:	88 0f       	add	r24, r24
    2986:	8f 5f       	subi	r24, 0xFF	; 255
    2988:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    298c:	88 34       	cpi	r24, 0x48	; 72
    298e:	29 f4       	brne	.+10     	; 0x299a <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2990:	84 e9       	ldi	r24, 0x94	; 148
    2992:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	01 c0       	rjmp	.+2      	; 0x299c <start_read+0x2c>
	}	
	return 1;	// success
    299a:	81 e0       	ldi	r24, 0x01	; 1
}	
    299c:	cf 91       	pop	r28
    299e:	08 95       	ret

000029a0 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	60 97       	sbiw	r28, 0x10	; 16
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    29ba:	fe 01       	movw	r30, r28
    29bc:	31 96       	adiw	r30, 0x01	; 1
    29be:	80 e1       	ldi	r24, 0x10	; 16
    29c0:	df 01       	movw	r26, r30
    29c2:	1d 92       	st	X+, r1
    29c4:	8a 95       	dec	r24
    29c6:	e9 f7       	brne	.-6      	; 0x29c2 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    29c8:	88 e5       	ldi	r24, 0x58	; 88
    29ca:	0e 94 98 13 	call	0x2730	; 0x2730 <start_write>
    29ce:	88 23       	and	r24, r24
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <m_wii_read+0x34>
    29d2:	69 c0       	rjmp	.+210    	; 0x2aa6 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    29d4:	86 e3       	ldi	r24, 0x36	; 54
    29d6:	0e 94 8b 13 	call	0x2716	; 0x2716 <send_byte>
    29da:	88 23       	and	r24, r24
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <m_wii_read+0x40>
    29de:	65 c0       	rjmp	.+202    	; 0x2aaa <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    29e0:	84 e9       	ldi	r24, 0x94	; 148
    29e2:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29e6:	b8 e0       	ldi	r27, 0x08	; 8
    29e8:	ba 95       	dec	r27
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <m_wii_read+0x48>
    29ec:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    29ee:	88 e5       	ldi	r24, 0x58	; 88
    29f0:	0e 94 b8 14 	call	0x2970	; 0x2970 <start_read>
    29f4:	88 23       	and	r24, r24
    29f6:	09 f4       	brne	.+2      	; 0x29fa <m_wii_read+0x5a>
    29f8:	5a c0       	rjmp	.+180    	; 0x2aae <m_wii_read+0x10e>
    29fa:	be 01       	movw	r22, r28
    29fc:	6f 5f       	subi	r22, 0xFF	; 255
    29fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2a00:	ae 01       	movw	r20, r28
    2a02:	40 5f       	subi	r20, 0xF0	; 240
    2a04:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2a06:	ec eb       	ldi	r30, 0xBC	; 188
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2a0c:	2b eb       	ldi	r18, 0xBB	; 187
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2a10:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2a12:	90 81       	ld	r25, Z
    2a14:	99 23       	and	r25, r25
    2a16:	ec f7       	brge	.-6      	; 0x2a12 <m_wii_read+0x72>
		temp[i] = TWDR;
    2a18:	d9 01       	movw	r26, r18
    2a1a:	9c 91       	ld	r25, X
    2a1c:	db 01       	movw	r26, r22
    2a1e:	9d 93       	st	X+, r25
    2a20:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2a22:	a4 17       	cp	r26, r20
    2a24:	b5 07       	cpc	r27, r21
    2a26:	a1 f7       	brne	.-24     	; 0x2a10 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2a28:	84 e8       	ldi	r24, 0x84	; 132
    2a2a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2a2e:	ec eb       	ldi	r30, 0xBC	; 188
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	88 23       	and	r24, r24
    2a36:	ec f7       	brge	.-6      	; 0x2a32 <m_wii_read+0x92>
	temp[15] = TWDR;
    2a38:	80 91 bb 00 	lds	r24, 0x00BB
    2a3c:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2a3e:	84 e9       	ldi	r24, 0x94	; 148
    2a40:	80 93 bc 00 	sts	0x00BC, r24
    2a44:	be 01       	movw	r22, r28
    2a46:	6c 5f       	subi	r22, 0xFC	; 252
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	08 5e       	subi	r16, 0xE8	; 232
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2a50:	db 01       	movw	r26, r22
    2a52:	2c 91       	ld	r18, X
    2a54:	32 2f       	mov	r19, r18
    2a56:	30 73       	andi	r19, 0x30	; 48
    2a58:	cb 01       	movw	r24, r22
    2a5a:	02 97       	sbiw	r24, 0x02	; 2
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	8c 91       	ld	r24, X
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	b0 e1       	ldi	r27, 0x10	; 16
    2a64:	3b 9f       	mul	r19, r27
    2a66:	80 0d       	add	r24, r0
    2a68:	91 1d       	adc	r25, r1
    2a6a:	11 24       	eor	r1, r1
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2a70:	42 2f       	mov	r20, r18
    2a72:	40 7c       	andi	r20, 0xC0	; 192
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	44 0f       	add	r20, r20
    2a78:	55 1f       	adc	r21, r21
    2a7a:	44 0f       	add	r20, r20
    2a7c:	55 1f       	adc	r21, r21
    2a7e:	cb 01       	movw	r24, r22
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	dc 01       	movw	r26, r24
    2a84:	8c 91       	ld	r24, X
    2a86:	48 0f       	add	r20, r24
    2a88:	51 1d       	adc	r21, r1
    2a8a:	53 83       	std	Z+3, r21	; 0x03
    2a8c:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2a8e:	2f 70       	andi	r18, 0x0F	; 15
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	35 83       	std	Z+5, r19	; 0x05
    2a94:	24 83       	std	Z+4, r18	; 0x04
    2a96:	6d 5f       	subi	r22, 0xFD	; 253
    2a98:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9a:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2a9c:	e0 17       	cp	r30, r16
    2a9e:	f1 07       	cpc	r31, r17
    2aa0:	b9 f6       	brne	.-82     	; 0x2a50 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	05 c0       	rjmp	.+10     	; 0x2ab0 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2aae:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2ab0:	60 96       	adiw	r28, 0x10	; 16
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <__vector_3>:
		

	}
}

ISR(INT2_vect){
    2ac6:	1f 92       	push	r1
    2ac8:	0f 92       	push	r0
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	0f 92       	push	r0
    2ace:	11 24       	eor	r1, r1
    2ad0:	2f 93       	push	r18
    2ad2:	3f 93       	push	r19
    2ad4:	4f 93       	push	r20
    2ad6:	5f 93       	push	r21
    2ad8:	6f 93       	push	r22
    2ada:	7f 93       	push	r23
    2adc:	8f 93       	push	r24
    2ade:	9f 93       	push	r25
    2ae0:	af 93       	push	r26
    2ae2:	bf 93       	push	r27
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	ef 93       	push	r30
    2aea:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    2aec:	6a e0       	ldi	r22, 0x0A	; 10
    2aee:	8a e9       	ldi	r24, 0x9A	; 154
    2af0:	91 e0       	ldi	r25, 0x01	; 1
    2af2:	0e 94 3e 10 	call	0x207c	; 0x207c <m_rf_read>
	switch(buffer[0]){
    2af6:	e0 91 9a 01 	lds	r30, 0x019A
    2afa:	8e 2f       	mov	r24, r30
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	fc 01       	movw	r30, r24
    2b00:	e0 5a       	subi	r30, 0xA0	; 160
    2b02:	f1 09       	sbc	r31, r1
    2b04:	ea 30       	cpi	r30, 0x0A	; 10
    2b06:	f1 05       	cpc	r31, r1
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <__vector_3+0x46>
    2b0a:	95 c0       	rjmp	.+298    	; 0x2c36 <__vector_3+0x170>
    2b0c:	e3 5a       	subi	r30, 0xA3	; 163
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    2b14:	88 e1       	ldi	r24, 0x18	; 24
    2b16:	93 e0       	ldi	r25, 0x03	; 3
    2b18:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			state = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	90 93 a9 01 	sts	0x01A9, r25
    2b24:	80 93 a8 01 	sts	0x01A8, r24
			break;
    2b28:	86 c0       	rjmp	.+268    	; 0x2c36 <__vector_3+0x170>
		case 0xA1:
			m_usb_tx_string("Play \n");
    2b2a:	81 e1       	ldi	r24, 0x11	; 17
    2b2c:	93 e0       	ldi	r25, 0x03	; 3
    2b2e:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			state = 2; 
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	90 93 a9 01 	sts	0x01A9, r25
    2b3a:	80 93 a8 01 	sts	0x01A8, r24
// 				goal[1] = 0;
// 				}else{
// 				goal[0] = GateA;
// 				goal[1] = 0;
// 			}
			break;
    2b3e:	7b c0       	rjmp	.+246    	; 0x2c36 <__vector_3+0x170>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    2b40:	89 e0       	ldi	r24, 0x09	; 9
    2b42:	93 e0       	ldi	r25, 0x03	; 3
    2b44:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			scoreR = buffer[1];
    2b48:	ea e9       	ldi	r30, 0x9A	; 154
    2b4a:	f1 e0       	ldi	r31, 0x01	; 1
    2b4c:	81 81       	ldd	r24, Z+1	; 0x01
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	90 93 99 01 	sts	0x0199, r25
    2b54:	80 93 98 01 	sts	0x0198, r24
			scoreB = buffer[2];
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	90 93 97 01 	sts	0x0197, r25
    2b60:	80 93 96 01 	sts	0x0196, r24
			break;
    2b64:	68 c0       	rjmp	.+208    	; 0x2c36 <__vector_3+0x170>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	93 e0       	ldi	r25, 0x03	; 3
    2b6a:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			scoreR = buffer[1];
    2b6e:	ea e9       	ldi	r30, 0x9A	; 154
    2b70:	f1 e0       	ldi	r31, 0x01	; 1
    2b72:	81 81       	ldd	r24, Z+1	; 0x01
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	90 93 99 01 	sts	0x0199, r25
    2b7a:	80 93 98 01 	sts	0x0198, r24
			scoreB = buffer[2];
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	90 93 97 01 	sts	0x0197, r25
    2b86:	80 93 96 01 	sts	0x0196, r24
			break;
    2b8a:	55 c0       	rjmp	.+170    	; 0x2c36 <__vector_3+0x170>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    2b8c:	8a ef       	ldi	r24, 0xFA	; 250
    2b8e:	92 e0       	ldi	r25, 0x02	; 2
    2b90:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			state = 0;
    2b94:	10 92 a9 01 	sts	0x01A9, r1
    2b98:	10 92 a8 01 	sts	0x01A8, r1
			break;
    2b9c:	4c c0       	rjmp	.+152    	; 0x2c36 <__vector_3+0x170>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    2b9e:	80 ef       	ldi	r24, 0xF0	; 240
    2ba0:	92 e0       	ldi	r25, 0x02	; 2
    2ba2:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			state = 0;
    2ba6:	10 92 a9 01 	sts	0x01A9, r1
    2baa:	10 92 a8 01 	sts	0x01A8, r1
			break;
    2bae:	43 c0       	rjmp	.+134    	; 0x2c36 <__vector_3+0x170>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    2bb0:	85 ee       	ldi	r24, 0xE5	; 229
    2bb2:	92 e0       	ldi	r25, 0x02	; 2
    2bb4:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			state = 0;
    2bb8:	10 92 a9 01 	sts	0x01A9, r1
    2bbc:	10 92 a8 01 	sts	0x01A8, r1
			break;
    2bc0:	3a c0       	rjmp	.+116    	; 0x2c36 <__vector_3+0x170>
		case 0xA9: // teammates got the puck, extract No. and location
			state = 4; 
    2bc2:	84 e0       	ldi	r24, 0x04	; 4
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	90 93 a9 01 	sts	0x01A9, r25
    2bca:	80 93 a8 01 	sts	0x01A8, r24
			puck_holder = buffer[1]; // buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
    2bce:	ea e9       	ldi	r30, 0x9A	; 154
    2bd0:	f1 e0       	ldi	r31, 0x01	; 1
    2bd2:	81 81       	ldd	r24, Z+1	; 0x01
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	90 93 8d 01 	sts	0x018D, r25
    2bda:	80 93 8c 01 	sts	0x018C, r24
			puck_loc[0] = *(int*)&buffer[2];
    2bde:	c8 e8       	ldi	r28, 0x88	; 136
    2be0:	d1 e0       	ldi	r29, 0x01	; 1
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	99 83       	std	Y+1, r25	; 0x01
    2be8:	88 83       	st	Y, r24
			puck_loc[1] = *(int*)&buffer[4];
    2bea:	84 81       	ldd	r24, Z+4	; 0x04
    2bec:	95 81       	ldd	r25, Z+5	; 0x05
    2bee:	9b 83       	std	Y+3, r25	; 0x03
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
			m_usb_tx_string("No. ");		
    2bf2:	80 ee       	ldi	r24, 0xE0	; 224
    2bf4:	92 e0       	ldi	r25, 0x02	; 2
    2bf6:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			m_usb_tx_int(puck_holder);
    2bfa:	80 91 8c 01 	lds	r24, 0x018C
    2bfe:	90 91 8d 01 	lds	r25, 0x018D
    2c02:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
			m_usb_tx_string("got the puck!\n");
    2c06:	81 ed       	ldi	r24, 0xD1	; 209
    2c08:	92 e0       	ldi	r25, 0x02	; 2
    2c0a:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			m_usb_tx_string("Its location is: ");
    2c0e:	8f eb       	ldi	r24, 0xBF	; 191
    2c10:	92 e0       	ldi	r25, 0x02	; 2
    2c12:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			m_usb_tx_int(puck_loc[0]);
    2c16:	88 81       	ld	r24, Y
    2c18:	99 81       	ldd	r25, Y+1	; 0x01
    2c1a:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
			m_usb_tx_string("		y:");
    2c1e:	8a eb       	ldi	r24, 0xBA	; 186
    2c20:	92 e0       	ldi	r25, 0x02	; 2
    2c22:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			m_usb_tx_int(puck_loc[1]);
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2a:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
			m_usb_tx_string("\n");
    2c2e:	88 eb       	ldi	r24, 0xB8	; 184
    2c30:	92 e0       	ldi	r25, 0x02	; 2
    2c32:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
			break;
		default:
			break;
	}
}
    2c36:	ff 91       	pop	r31
    2c38:	ef 91       	pop	r30
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	bf 91       	pop	r27
    2c40:	af 91       	pop	r26
    2c42:	9f 91       	pop	r25
    2c44:	8f 91       	pop	r24
    2c46:	7f 91       	pop	r23
    2c48:	6f 91       	pop	r22
    2c4a:	5f 91       	pop	r21
    2c4c:	4f 91       	pop	r20
    2c4e:	3f 91       	pop	r19
    2c50:	2f 91       	pop	r18
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	0f 90       	pop	r0
    2c58:	1f 90       	pop	r1
    2c5a:	18 95       	reti

00002c5c <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    2c5c:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    2c5e:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    2c60:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    2c62:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 250;
    2c64:	8a ef       	ldi	r24, 0xFA	; 250
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	90 93 89 00 	sts	0x0089, r25
    2c6c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = full_speed;
    2c70:	85 ef       	ldi	r24, 0xF5	; 245
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	90 93 8b 00 	sts	0x008B, r25
    2c78:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = full_speed;
    2c7c:	90 93 8d 00 	sts	0x008D, r25
    2c80:	80 93 8c 00 	sts	0x008C, r24
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    2c84:	a1 e8       	ldi	r26, 0x81	; 129
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	8c 91       	ld	r24, X
    2c8a:	80 61       	ori	r24, 0x10	; 16
    2c8c:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    2c8e:	8c 91       	ld	r24, X
    2c90:	88 60       	ori	r24, 0x08	; 8
    2c92:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    2c94:	e0 e8       	ldi	r30, 0x80	; 128
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	82 60       	ori	r24, 0x02	; 2
    2c9c:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    2c9e:	80 81       	ld	r24, Z
    2ca0:	81 60       	ori	r24, 0x01	; 1
    2ca2:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    2ca4:	80 81       	ld	r24, Z
    2ca6:	80 62       	ori	r24, 0x20	; 32
    2ca8:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    2caa:	80 81       	ld	r24, Z
    2cac:	8f 7e       	andi	r24, 0xEF	; 239
    2cae:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 60       	ori	r24, 0x08	; 8
    2cb4:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8b 7f       	andi	r24, 0xFB	; 251
    2cba:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    2cbc:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    2cbe:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    2cc0:	8c 91       	ld	r24, X
    2cc2:	8b 7f       	andi	r24, 0xFB	; 251
    2cc4:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    2cc6:	8c 91       	ld	r24, X
    2cc8:	8d 7f       	andi	r24, 0xFD	; 253
    2cca:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    2ccc:	8c 91       	ld	r24, X
    2cce:	81 60       	ori	r24, 0x01	; 1
    2cd0:	8c 93       	st	X, r24
    2cd2:	08 95       	ret

00002cd4 <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    2cd4:	e1 e6       	ldi	r30, 0x61	; 97
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 e8       	ldi	r24, 0x80	; 128
    2cda:	80 83       	st	Z, r24
    2cdc:	10 82       	st	Z, r1
	
	m_usb_init();
    2cde:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <m_usb_init>
	
	//m_wii_open();
	m_red(ON);
    2ce2:	6e 9a       	sbi	0x0d, 6	; 13
    2ce4:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
    2ce6:	0e 94 af 13 	call	0x275e	; 0x275e <m_wii_open>
    2cea:	88 23       	and	r24, r24
    2cec:	e1 f3       	breq	.-8      	; 0x2ce6 <main+0x12>
	m_red(OFF);
    2cee:	6e 9a       	sbi	0x0d, 6	; 13
    2cf0:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);
    2cf2:	6e 9a       	sbi	0x0d, 6	; 13
    2cf4:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    2cf6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    2cfa:	4a e0       	ldi	r20, 0x0A	; 10
    2cfc:	6c e0       	ldi	r22, 0x0C	; 12
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <m_rf_open>
	m_red(OFF);
    2d04:	6e 9a       	sbi	0x0d, 6	; 13
    2d06:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    2d08:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <init_timer>
	init_ADC();
    2d0c:	0e 94 0e 02 	call	0x41c	; 0x41c <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    2d10:	3e 98       	cbi	0x07, 6	; 7
	set(DDRB, 2);
    2d12:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    2d14:	23 9a       	sbi	0x04, 3	; 4
	state = 0;
    2d16:	10 92 a9 01 	sts	0x01A9, r1
    2d1a:	10 92 a8 01 	sts	0x01A8, r1
			goal[1] = 0;
		}
		else{
			set(PORTB, 3); // red blue
			clear(PORTB, 2);
			goal[0] = GateB;  // left gate
    2d1e:	c5 e2       	ldi	r28, 0x25	; 37
    2d20:	d1 e0       	ldi	r29, 0x01	; 1
    2d22:	0f 2e       	mov	r0, r31
    2d24:	41 2c       	mov	r4, r1
    2d26:	51 2c       	mov	r5, r1
    2d28:	ff ea       	ldi	r31, 0xAF	; 175
    2d2a:	6f 2e       	mov	r6, r31
    2d2c:	f3 ec       	ldi	r31, 0xC3	; 195
    2d2e:	7f 2e       	mov	r7, r31
    2d30:	f0 2d       	mov	r31, r0
	while(1)
	{	
		if(check(PINC, 6)){
			set(PORTB, 2); // blue Red
			clear(PORTB, 3);
			goal[0] = GateA;  // right gate
    2d32:	0f 2e       	mov	r0, r31
    2d34:	81 2c       	mov	r8, r1
    2d36:	91 2c       	mov	r9, r1
    2d38:	ff ea       	ldi	r31, 0xAF	; 175
    2d3a:	af 2e       	mov	r10, r31
    2d3c:	f3 e4       	ldi	r31, 0x43	; 67
    2d3e:	bf 2e       	mov	r11, r31
    2d40:	f0 2d       	mov	r31, r0
				// stop
				OCR1B = 0;
				OCR1C = 0;
				break;
			case 1:		// comm test, flash a LED
				toggle(PORTB, 2);	// Toggle F4
    2d42:	68 94       	set
    2d44:	cc 24       	eor	r12, r12
    2d46:	c2 f8       	bld	r12, 2
				toggle(PORTB, 3);	// Toggle F5
    2d48:	68 94       	set
    2d4a:	33 24       	eor	r3, r3
    2d4c:	33 f8       	bld	r3, 3
				m_red(TOGGLE);	// Toggle red led for qualify
    2d4e:	68 94       	set
    2d50:	dd 24       	eor	r13, r13
    2d52:	d6 f8       	bld	r13, 6
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
    2d54:	0f 2e       	mov	r0, r31
    2d56:	fa e8       	ldi	r31, 0x8A	; 138
    2d58:	ef 2e       	mov	r14, r31
    2d5a:	f1 2c       	mov	r15, r1
    2d5c:	f0 2d       	mov	r31, r0
				OCR1C = 0;
    2d5e:	0c e8       	ldi	r16, 0x8C	; 140
    2d60:	10 e0       	ldi	r17, 0x00	; 0
	set(DDRB, 2);
	set(DDRB, 3);
	state = 0;
	while(1)
	{	
		if(check(PINC, 6)){
    2d62:	36 9b       	sbis	0x06, 6	; 6
    2d64:	0b c0       	rjmp	.+22     	; 0x2d7c <main+0xa8>
			set(PORTB, 2); // blue Red
    2d66:	2a 9a       	sbi	0x05, 2	; 5
			clear(PORTB, 3);
    2d68:	2b 98       	cbi	0x05, 3	; 5
			goal[0] = GateA;  // right gate
    2d6a:	88 82       	st	Y, r8
    2d6c:	99 82       	std	Y+1, r9	; 0x01
    2d6e:	aa 82       	std	Y+2, r10	; 0x02
    2d70:	bb 82       	std	Y+3, r11	; 0x03
			goal[1] = 0;
    2d72:	1c 82       	std	Y+4, r1	; 0x04
    2d74:	1d 82       	std	Y+5, r1	; 0x05
    2d76:	1e 82       	std	Y+6, r1	; 0x06
    2d78:	1f 82       	std	Y+7, r1	; 0x07
    2d7a:	0a c0       	rjmp	.+20     	; 0x2d90 <main+0xbc>
		}
		else{
			set(PORTB, 3); // red blue
    2d7c:	2b 9a       	sbi	0x05, 3	; 5
			clear(PORTB, 2);
    2d7e:	2a 98       	cbi	0x05, 2	; 5
			goal[0] = GateB;  // left gate
    2d80:	48 82       	st	Y, r4
    2d82:	59 82       	std	Y+1, r5	; 0x01
    2d84:	6a 82       	std	Y+2, r6	; 0x02
    2d86:	7b 82       	std	Y+3, r7	; 0x03
			goal[1] = 0;
    2d88:	1c 82       	std	Y+4, r1	; 0x04
    2d8a:	1d 82       	std	Y+5, r1	; 0x05
    2d8c:	1e 82       	std	Y+6, r1	; 0x06
    2d8e:	1f 82       	std	Y+7, r1	; 0x07
		}
		
		m_usb_tx_string("state: ");
    2d90:	8e e4       	ldi	r24, 0x4E	; 78
    2d92:	93 e0       	ldi	r25, 0x03	; 3
    2d94:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		m_usb_tx_int(state);
    2d98:	80 91 a8 01 	lds	r24, 0x01A8
    2d9c:	90 91 a9 01 	lds	r25, 0x01A9
    2da0:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
		m_usb_tx_string("\n");
    2da4:	8c e4       	ldi	r24, 0x4C	; 76
    2da6:	93 e0       	ldi	r25, 0x03	; 3
    2da8:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		switch(state){
    2dac:	80 91 a8 01 	lds	r24, 0x01A8
    2db0:	90 91 a9 01 	lds	r25, 0x01A9
    2db4:	81 30       	cpi	r24, 0x01	; 1
    2db6:	91 05       	cpc	r25, r1
    2db8:	89 f0       	breq	.+34     	; 0x2ddc <main+0x108>
    2dba:	1c f4       	brge	.+6      	; 0x2dc2 <main+0xee>
    2dbc:	89 2b       	or	r24, r25
    2dbe:	39 f0       	breq	.+14     	; 0x2dce <main+0xfa>
    2dc0:	77 c0       	rjmp	.+238    	; 0x2eb0 <main+0x1dc>
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	f1 f0       	breq	.+60     	; 0x2e04 <main+0x130>
    2dc8:	03 97       	sbiw	r24, 0x03	; 3
    2dca:	d1 f1       	breq	.+116    	; 0x2e40 <main+0x16c>
    2dcc:	71 c0       	rjmp	.+226    	; 0x2eb0 <main+0x1dc>
			case 0:
				// stop
				OCR1B = 0;
    2dce:	f7 01       	movw	r30, r14
    2dd0:	11 82       	std	Z+1, r1	; 0x01
    2dd2:	10 82       	st	Z, r1
				OCR1C = 0;
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	11 82       	std	Z+1, r1	; 0x01
    2dd8:	10 82       	st	Z, r1
				break;
    2dda:	6a c0       	rjmp	.+212    	; 0x2eb0 <main+0x1dc>
			case 1:		// comm test, flash a LED
				toggle(PORTB, 2);	// Toggle F4
    2ddc:	85 b1       	in	r24, 0x05	; 5
    2dde:	8c 25       	eor	r24, r12
    2de0:	85 b9       	out	0x05, r24	; 5
				toggle(PORTB, 3);	// Toggle F5
    2de2:	85 b1       	in	r24, 0x05	; 5
    2de4:	83 25       	eor	r24, r3
    2de6:	85 b9       	out	0x05, r24	; 5
				m_red(TOGGLE);	// Toggle red led for qualify
    2de8:	6e 9a       	sbi	0x0d, 6	; 13
    2dea:	8e b1       	in	r24, 0x0e	; 14
    2dec:	8d 25       	eor	r24, r13
    2dee:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2df0:	ff e3       	ldi	r31, 0x3F	; 63
    2df2:	2d e0       	ldi	r18, 0x0D	; 13
    2df4:	83 e0       	ldi	r24, 0x03	; 3
    2df6:	f1 50       	subi	r31, 0x01	; 1
    2df8:	20 40       	sbci	r18, 0x00	; 0
    2dfa:	80 40       	sbci	r24, 0x00	; 0
    2dfc:	e1 f7       	brne	.-8      	; 0x2df6 <main+0x122>
    2dfe:	00 c0       	rjmp	.+0      	; 0x2e00 <main+0x12c>
    2e00:	00 00       	nop
    2e02:	56 c0       	rjmp	.+172    	; 0x2eb0 <main+0x1dc>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    2e04:	6e 9a       	sbi	0x0d, 6	; 13
    2e06:	8e b1       	in	r24, 0x0e	; 14
    2e08:	8d 25       	eor	r24, r13
    2e0a:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    2e0c:	6a 9a       	sbi	0x0d, 2	; 13
    2e0e:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    2e10:	80 91 a8 01 	lds	r24, 0x01A8
    2e14:	90 91 a9 01 	lds	r25, 0x01A9
    2e18:	0e 94 72 03 	call	0x6e4	; 0x6e4 <findPuck>
				
				
				localization(state, &goal[0], &c_wii[0], &ypdir[0]);
    2e1c:	2e e8       	ldi	r18, 0x8E	; 142
    2e1e:	31 e0       	ldi	r19, 0x01	; 1
    2e20:	4d e2       	ldi	r20, 0x2D	; 45
    2e22:	51 e0       	ldi	r21, 0x01	; 1
    2e24:	be 01       	movw	r22, r28
    2e26:	80 91 a8 01 	lds	r24, 0x01A8
    2e2a:	90 91 a9 01 	lds	r25, 0x01A9
    2e2e:	0e 94 cc 08 	call	0x1198	; 0x1198 <localization>
				state=deterState();
    2e32:	0e 94 3d 05 	call	0xa7a	; 0xa7a <deterState>
    2e36:	90 93 a9 01 	sts	0x01A9, r25
    2e3a:	80 93 a8 01 	sts	0x01A8, r24
				break;
    2e3e:	38 c0       	rjmp	.+112    	; 0x2eb0 <main+0x1dc>
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    2e40:	6a 9a       	sbi	0x0d, 2	; 13
    2e42:	8e b1       	in	r24, 0x0e	; 14
    2e44:	8c 25       	eor	r24, r12
    2e46:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    2e48:	6e 9a       	sbi	0x0d, 6	; 13
    2e4a:	76 9a       	sbi	0x0e, 6	; 14
				send_message(state, No, &buffer[0], &c_wii[0]);
    2e4c:	2d e2       	ldi	r18, 0x2D	; 45
    2e4e:	31 e0       	ldi	r19, 0x01	; 1
    2e50:	4a e9       	ldi	r20, 0x9A	; 154
    2e52:	51 e0       	ldi	r21, 0x01	; 1
    2e54:	61 e0       	ldi	r22, 0x01	; 1
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	80 91 a8 01 	lds	r24, 0x01A8
    2e5c:	90 91 a9 01 	lds	r25, 0x01A9
    2e60:	0e 94 ca 01 	call	0x394	; 0x394 <send_message>
				localization(state, &goal[0], &c_wii[0], &ypdir[0]);
    2e64:	2e e8       	ldi	r18, 0x8E	; 142
    2e66:	31 e0       	ldi	r19, 0x01	; 1
    2e68:	4d e2       	ldi	r20, 0x2D	; 45
    2e6a:	51 e0       	ldi	r21, 0x01	; 1
    2e6c:	be 01       	movw	r22, r28
    2e6e:	80 91 a8 01 	lds	r24, 0x01A8
    2e72:	90 91 a9 01 	lds	r25, 0x01A9
    2e76:	0e 94 cc 08 	call	0x1198	; 0x1198 <localization>
				m_usb_tx_string("send messsage\n");
    2e7a:	8d e3       	ldi	r24, 0x3D	; 61
    2e7c:	93 e0       	ldi	r25, 0x03	; 3
    2e7e:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
				state=deterState();
    2e82:	0e 94 3d 05 	call	0xa7a	; 0xa7a <deterState>
    2e86:	90 93 a9 01 	sts	0x01A9, r25
    2e8a:	80 93 a8 01 	sts	0x01A8, r24
				m_usb_tx_string("goal[0]=");
    2e8e:	84 e3       	ldi	r24, 0x34	; 52
    2e90:	93 e0       	ldi	r25, 0x03	; 3
    2e92:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
				m_usb_tx_int(goal[0]);
    2e96:	68 81       	ld	r22, Y
    2e98:	79 81       	ldd	r23, Y+1	; 0x01
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixsfsi>
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
				m_usb_tx_string("\n");
    2ea8:	82 e3       	ldi	r24, 0x32	; 50
    2eaa:	93 e0       	ldi	r25, 0x03	; 3
    2eac:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
 				break;
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    2eb0:	89 e2       	ldi	r24, 0x29	; 41
    2eb2:	93 e0       	ldi	r25, 0x03	; 3
    2eb4:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		m_usb_tx_int(OCR1B);
    2eb8:	f7 01       	movw	r30, r14
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
		m_usb_tx_string(", ");
    2ec2:	86 e2       	ldi	r24, 0x26	; 38
    2ec4:	93 e0       	ldi	r25, 0x03	; 3
    2ec6:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
		m_usb_tx_int(OCR1C);
    2eca:	f8 01       	movw	r30, r16
    2ecc:	80 81       	ld	r24, Z
    2ece:	91 81       	ldd	r25, Z+1	; 0x01
    2ed0:	0e 94 44 13 	call	0x2688	; 0x2688 <m_usb_tx_int>
		m_usb_tx_string("\n");
    2ed4:	84 e2       	ldi	r24, 0x24	; 36
    2ed6:	93 e0       	ldi	r25, 0x03	; 3
    2ed8:	0e 94 28 13 	call	0x2650	; 0x2650 <print_P>
    2edc:	ff e9       	ldi	r31, 0x9F	; 159
    2ede:	26 e8       	ldi	r18, 0x86	; 134
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	f1 50       	subi	r31, 0x01	; 1
    2ee4:	20 40       	sbci	r18, 0x00	; 0
    2ee6:	80 40       	sbci	r24, 0x00	; 0
    2ee8:	e1 f7       	brne	.-8      	; 0x2ee2 <main+0x20e>
    2eea:	00 c0       	rjmp	.+0      	; 0x2eec <main+0x218>
    2eec:	00 00       	nop
    2eee:	39 cf       	rjmp	.-398    	; 0x2d62 <main+0x8e>

00002ef0 <acos>:
    2ef0:	9f 93       	push	r25
    2ef2:	9f 77       	andi	r25, 0x7F	; 127
    2ef4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__fp_arccos>
    2ef8:	0f 90       	pop	r0
    2efa:	00 20       	and	r0, r0
    2efc:	42 f4       	brpl	.+16     	; 0x2f0e <acos+0x1e>
    2efe:	90 58       	subi	r25, 0x80	; 128
    2f00:	a2 ea       	ldi	r26, 0xA2	; 162
    2f02:	2a ed       	ldi	r18, 0xDA	; 218
    2f04:	3f e0       	ldi	r19, 0x0F	; 15
    2f06:	49 e4       	ldi	r20, 0x49	; 73
    2f08:	50 e4       	ldi	r21, 0x40	; 64
    2f0a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__addsf3x>
    2f0e:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__fp_round>

00002f12 <__subsf3>:
    2f12:	50 58       	subi	r21, 0x80	; 128

00002f14 <__addsf3>:
    2f14:	bb 27       	eor	r27, r27
    2f16:	aa 27       	eor	r26, r26
    2f18:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__addsf3x>
    2f1c:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__fp_round>
    2f20:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__fp_pscA>
    2f24:	38 f0       	brcs	.+14     	; 0x2f34 <__addsf3+0x20>
    2f26:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__fp_pscB>
    2f2a:	20 f0       	brcs	.+8      	; 0x2f34 <__addsf3+0x20>
    2f2c:	39 f4       	brne	.+14     	; 0x2f3c <__addsf3+0x28>
    2f2e:	9f 3f       	cpi	r25, 0xFF	; 255
    2f30:	19 f4       	brne	.+6      	; 0x2f38 <__addsf3+0x24>
    2f32:	26 f4       	brtc	.+8      	; 0x2f3c <__addsf3+0x28>
    2f34:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_nan>
    2f38:	0e f4       	brtc	.+2      	; 0x2f3c <__addsf3+0x28>
    2f3a:	e0 95       	com	r30
    2f3c:	e7 fb       	bst	r30, 7
    2f3e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_inf>

00002f42 <__addsf3x>:
    2f42:	e9 2f       	mov	r30, r25
    2f44:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_split3>
    2f48:	58 f3       	brcs	.-42     	; 0x2f20 <__addsf3+0xc>
    2f4a:	ba 17       	cp	r27, r26
    2f4c:	62 07       	cpc	r22, r18
    2f4e:	73 07       	cpc	r23, r19
    2f50:	84 07       	cpc	r24, r20
    2f52:	95 07       	cpc	r25, r21
    2f54:	20 f0       	brcs	.+8      	; 0x2f5e <__addsf3x+0x1c>
    2f56:	79 f4       	brne	.+30     	; 0x2f76 <__addsf3x+0x34>
    2f58:	a6 f5       	brtc	.+104    	; 0x2fc2 <__addsf3x+0x80>
    2f5a:	0c 94 95 19 	jmp	0x332a	; 0x332a <__fp_zero>
    2f5e:	0e f4       	brtc	.+2      	; 0x2f62 <__addsf3x+0x20>
    2f60:	e0 95       	com	r30
    2f62:	0b 2e       	mov	r0, r27
    2f64:	ba 2f       	mov	r27, r26
    2f66:	a0 2d       	mov	r26, r0
    2f68:	0b 01       	movw	r0, r22
    2f6a:	b9 01       	movw	r22, r18
    2f6c:	90 01       	movw	r18, r0
    2f6e:	0c 01       	movw	r0, r24
    2f70:	ca 01       	movw	r24, r20
    2f72:	a0 01       	movw	r20, r0
    2f74:	11 24       	eor	r1, r1
    2f76:	ff 27       	eor	r31, r31
    2f78:	59 1b       	sub	r21, r25
    2f7a:	99 f0       	breq	.+38     	; 0x2fa2 <__addsf3x+0x60>
    2f7c:	59 3f       	cpi	r21, 0xF9	; 249
    2f7e:	50 f4       	brcc	.+20     	; 0x2f94 <__addsf3x+0x52>
    2f80:	50 3e       	cpi	r21, 0xE0	; 224
    2f82:	68 f1       	brcs	.+90     	; 0x2fde <__addsf3x+0x9c>
    2f84:	1a 16       	cp	r1, r26
    2f86:	f0 40       	sbci	r31, 0x00	; 0
    2f88:	a2 2f       	mov	r26, r18
    2f8a:	23 2f       	mov	r18, r19
    2f8c:	34 2f       	mov	r19, r20
    2f8e:	44 27       	eor	r20, r20
    2f90:	58 5f       	subi	r21, 0xF8	; 248
    2f92:	f3 cf       	rjmp	.-26     	; 0x2f7a <__addsf3x+0x38>
    2f94:	46 95       	lsr	r20
    2f96:	37 95       	ror	r19
    2f98:	27 95       	ror	r18
    2f9a:	a7 95       	ror	r26
    2f9c:	f0 40       	sbci	r31, 0x00	; 0
    2f9e:	53 95       	inc	r21
    2fa0:	c9 f7       	brne	.-14     	; 0x2f94 <__addsf3x+0x52>
    2fa2:	7e f4       	brtc	.+30     	; 0x2fc2 <__addsf3x+0x80>
    2fa4:	1f 16       	cp	r1, r31
    2fa6:	ba 0b       	sbc	r27, r26
    2fa8:	62 0b       	sbc	r22, r18
    2faa:	73 0b       	sbc	r23, r19
    2fac:	84 0b       	sbc	r24, r20
    2fae:	ba f0       	brmi	.+46     	; 0x2fde <__addsf3x+0x9c>
    2fb0:	91 50       	subi	r25, 0x01	; 1
    2fb2:	a1 f0       	breq	.+40     	; 0x2fdc <__addsf3x+0x9a>
    2fb4:	ff 0f       	add	r31, r31
    2fb6:	bb 1f       	adc	r27, r27
    2fb8:	66 1f       	adc	r22, r22
    2fba:	77 1f       	adc	r23, r23
    2fbc:	88 1f       	adc	r24, r24
    2fbe:	c2 f7       	brpl	.-16     	; 0x2fb0 <__addsf3x+0x6e>
    2fc0:	0e c0       	rjmp	.+28     	; 0x2fde <__addsf3x+0x9c>
    2fc2:	ba 0f       	add	r27, r26
    2fc4:	62 1f       	adc	r22, r18
    2fc6:	73 1f       	adc	r23, r19
    2fc8:	84 1f       	adc	r24, r20
    2fca:	48 f4       	brcc	.+18     	; 0x2fde <__addsf3x+0x9c>
    2fcc:	87 95       	ror	r24
    2fce:	77 95       	ror	r23
    2fd0:	67 95       	ror	r22
    2fd2:	b7 95       	ror	r27
    2fd4:	f7 95       	ror	r31
    2fd6:	9e 3f       	cpi	r25, 0xFE	; 254
    2fd8:	08 f0       	brcs	.+2      	; 0x2fdc <__addsf3x+0x9a>
    2fda:	b0 cf       	rjmp	.-160    	; 0x2f3c <__addsf3+0x28>
    2fdc:	93 95       	inc	r25
    2fde:	88 0f       	add	r24, r24
    2fe0:	08 f0       	brcs	.+2      	; 0x2fe4 <__addsf3x+0xa2>
    2fe2:	99 27       	eor	r25, r25
    2fe4:	ee 0f       	add	r30, r30
    2fe6:	97 95       	ror	r25
    2fe8:	87 95       	ror	r24
    2fea:	08 95       	ret

00002fec <__cmpsf2>:
    2fec:	0e 94 00 19 	call	0x3200	; 0x3200 <__fp_cmp>
    2ff0:	08 f4       	brcc	.+2      	; 0x2ff4 <__cmpsf2+0x8>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	08 95       	ret

00002ff6 <__divsf3>:
    2ff6:	0e 94 0f 18 	call	0x301e	; 0x301e <__divsf3x>
    2ffa:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__fp_round>
    2ffe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__fp_pscB>
    3002:	58 f0       	brcs	.+22     	; 0x301a <__divsf3+0x24>
    3004:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__fp_pscA>
    3008:	40 f0       	brcs	.+16     	; 0x301a <__divsf3+0x24>
    300a:	29 f4       	brne	.+10     	; 0x3016 <__divsf3+0x20>
    300c:	5f 3f       	cpi	r21, 0xFF	; 255
    300e:	29 f0       	breq	.+10     	; 0x301a <__divsf3+0x24>
    3010:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_inf>
    3014:	51 11       	cpse	r21, r1
    3016:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>
    301a:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_nan>

0000301e <__divsf3x>:
    301e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_split3>
    3022:	68 f3       	brcs	.-38     	; 0x2ffe <__divsf3+0x8>

00003024 <__divsf3_pse>:
    3024:	99 23       	and	r25, r25
    3026:	b1 f3       	breq	.-20     	; 0x3014 <__divsf3+0x1e>
    3028:	55 23       	and	r21, r21
    302a:	91 f3       	breq	.-28     	; 0x3010 <__divsf3+0x1a>
    302c:	95 1b       	sub	r25, r21
    302e:	55 0b       	sbc	r21, r21
    3030:	bb 27       	eor	r27, r27
    3032:	aa 27       	eor	r26, r26
    3034:	62 17       	cp	r22, r18
    3036:	73 07       	cpc	r23, r19
    3038:	84 07       	cpc	r24, r20
    303a:	38 f0       	brcs	.+14     	; 0x304a <__divsf3_pse+0x26>
    303c:	9f 5f       	subi	r25, 0xFF	; 255
    303e:	5f 4f       	sbci	r21, 0xFF	; 255
    3040:	22 0f       	add	r18, r18
    3042:	33 1f       	adc	r19, r19
    3044:	44 1f       	adc	r20, r20
    3046:	aa 1f       	adc	r26, r26
    3048:	a9 f3       	breq	.-22     	; 0x3034 <__divsf3_pse+0x10>
    304a:	35 d0       	rcall	.+106    	; 0x30b6 <__divsf3_pse+0x92>
    304c:	0e 2e       	mov	r0, r30
    304e:	3a f0       	brmi	.+14     	; 0x305e <__divsf3_pse+0x3a>
    3050:	e0 e8       	ldi	r30, 0x80	; 128
    3052:	32 d0       	rcall	.+100    	; 0x30b8 <__divsf3_pse+0x94>
    3054:	91 50       	subi	r25, 0x01	; 1
    3056:	50 40       	sbci	r21, 0x00	; 0
    3058:	e6 95       	lsr	r30
    305a:	00 1c       	adc	r0, r0
    305c:	ca f7       	brpl	.-14     	; 0x3050 <__divsf3_pse+0x2c>
    305e:	2b d0       	rcall	.+86     	; 0x30b6 <__divsf3_pse+0x92>
    3060:	fe 2f       	mov	r31, r30
    3062:	29 d0       	rcall	.+82     	; 0x30b6 <__divsf3_pse+0x92>
    3064:	66 0f       	add	r22, r22
    3066:	77 1f       	adc	r23, r23
    3068:	88 1f       	adc	r24, r24
    306a:	bb 1f       	adc	r27, r27
    306c:	26 17       	cp	r18, r22
    306e:	37 07       	cpc	r19, r23
    3070:	48 07       	cpc	r20, r24
    3072:	ab 07       	cpc	r26, r27
    3074:	b0 e8       	ldi	r27, 0x80	; 128
    3076:	09 f0       	breq	.+2      	; 0x307a <__divsf3_pse+0x56>
    3078:	bb 0b       	sbc	r27, r27
    307a:	80 2d       	mov	r24, r0
    307c:	bf 01       	movw	r22, r30
    307e:	ff 27       	eor	r31, r31
    3080:	93 58       	subi	r25, 0x83	; 131
    3082:	5f 4f       	sbci	r21, 0xFF	; 255
    3084:	3a f0       	brmi	.+14     	; 0x3094 <__divsf3_pse+0x70>
    3086:	9e 3f       	cpi	r25, 0xFE	; 254
    3088:	51 05       	cpc	r21, r1
    308a:	78 f0       	brcs	.+30     	; 0x30aa <__divsf3_pse+0x86>
    308c:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_inf>
    3090:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>
    3094:	5f 3f       	cpi	r21, 0xFF	; 255
    3096:	e4 f3       	brlt	.-8      	; 0x3090 <__divsf3_pse+0x6c>
    3098:	98 3e       	cpi	r25, 0xE8	; 232
    309a:	d4 f3       	brlt	.-12     	; 0x3090 <__divsf3_pse+0x6c>
    309c:	86 95       	lsr	r24
    309e:	77 95       	ror	r23
    30a0:	67 95       	ror	r22
    30a2:	b7 95       	ror	r27
    30a4:	f7 95       	ror	r31
    30a6:	9f 5f       	subi	r25, 0xFF	; 255
    30a8:	c9 f7       	brne	.-14     	; 0x309c <__divsf3_pse+0x78>
    30aa:	88 0f       	add	r24, r24
    30ac:	91 1d       	adc	r25, r1
    30ae:	96 95       	lsr	r25
    30b0:	87 95       	ror	r24
    30b2:	97 f9       	bld	r25, 7
    30b4:	08 95       	ret
    30b6:	e1 e0       	ldi	r30, 0x01	; 1
    30b8:	66 0f       	add	r22, r22
    30ba:	77 1f       	adc	r23, r23
    30bc:	88 1f       	adc	r24, r24
    30be:	bb 1f       	adc	r27, r27
    30c0:	62 17       	cp	r22, r18
    30c2:	73 07       	cpc	r23, r19
    30c4:	84 07       	cpc	r24, r20
    30c6:	ba 07       	cpc	r27, r26
    30c8:	20 f0       	brcs	.+8      	; 0x30d2 <__divsf3_pse+0xae>
    30ca:	62 1b       	sub	r22, r18
    30cc:	73 0b       	sbc	r23, r19
    30ce:	84 0b       	sbc	r24, r20
    30d0:	ba 0b       	sbc	r27, r26
    30d2:	ee 1f       	adc	r30, r30
    30d4:	88 f7       	brcc	.-30     	; 0x30b8 <__divsf3_pse+0x94>
    30d6:	e0 95       	com	r30
    30d8:	08 95       	ret

000030da <__fixsfsi>:
    30da:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__fixunssfsi>
    30de:	68 94       	set
    30e0:	b1 11       	cpse	r27, r1
    30e2:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>
    30e6:	08 95       	ret

000030e8 <__fixunssfsi>:
    30e8:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__fp_splitA>
    30ec:	88 f0       	brcs	.+34     	; 0x3110 <__fixunssfsi+0x28>
    30ee:	9f 57       	subi	r25, 0x7F	; 127
    30f0:	98 f0       	brcs	.+38     	; 0x3118 <__fixunssfsi+0x30>
    30f2:	b9 2f       	mov	r27, r25
    30f4:	99 27       	eor	r25, r25
    30f6:	b7 51       	subi	r27, 0x17	; 23
    30f8:	b0 f0       	brcs	.+44     	; 0x3126 <__fixunssfsi+0x3e>
    30fa:	e1 f0       	breq	.+56     	; 0x3134 <__fixunssfsi+0x4c>
    30fc:	66 0f       	add	r22, r22
    30fe:	77 1f       	adc	r23, r23
    3100:	88 1f       	adc	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	1a f0       	brmi	.+6      	; 0x310c <__fixunssfsi+0x24>
    3106:	ba 95       	dec	r27
    3108:	c9 f7       	brne	.-14     	; 0x30fc <__fixunssfsi+0x14>
    310a:	14 c0       	rjmp	.+40     	; 0x3134 <__fixunssfsi+0x4c>
    310c:	b1 30       	cpi	r27, 0x01	; 1
    310e:	91 f0       	breq	.+36     	; 0x3134 <__fixunssfsi+0x4c>
    3110:	0e 94 95 19 	call	0x332a	; 0x332a <__fp_zero>
    3114:	b1 e0       	ldi	r27, 0x01	; 1
    3116:	08 95       	ret
    3118:	0c 94 95 19 	jmp	0x332a	; 0x332a <__fp_zero>
    311c:	67 2f       	mov	r22, r23
    311e:	78 2f       	mov	r23, r24
    3120:	88 27       	eor	r24, r24
    3122:	b8 5f       	subi	r27, 0xF8	; 248
    3124:	39 f0       	breq	.+14     	; 0x3134 <__fixunssfsi+0x4c>
    3126:	b9 3f       	cpi	r27, 0xF9	; 249
    3128:	cc f3       	brlt	.-14     	; 0x311c <__fixunssfsi+0x34>
    312a:	86 95       	lsr	r24
    312c:	77 95       	ror	r23
    312e:	67 95       	ror	r22
    3130:	b3 95       	inc	r27
    3132:	d9 f7       	brne	.-10     	; 0x312a <__fixunssfsi+0x42>
    3134:	3e f4       	brtc	.+14     	; 0x3144 <__fixunssfsi+0x5c>
    3136:	90 95       	com	r25
    3138:	80 95       	com	r24
    313a:	70 95       	com	r23
    313c:	61 95       	neg	r22
    313e:	7f 4f       	sbci	r23, 0xFF	; 255
    3140:	8f 4f       	sbci	r24, 0xFF	; 255
    3142:	9f 4f       	sbci	r25, 0xFF	; 255
    3144:	08 95       	ret

00003146 <__floatunsisf>:
    3146:	e8 94       	clt
    3148:	09 c0       	rjmp	.+18     	; 0x315c <__floatsisf+0x12>

0000314a <__floatsisf>:
    314a:	97 fb       	bst	r25, 7
    314c:	3e f4       	brtc	.+14     	; 0x315c <__floatsisf+0x12>
    314e:	90 95       	com	r25
    3150:	80 95       	com	r24
    3152:	70 95       	com	r23
    3154:	61 95       	neg	r22
    3156:	7f 4f       	sbci	r23, 0xFF	; 255
    3158:	8f 4f       	sbci	r24, 0xFF	; 255
    315a:	9f 4f       	sbci	r25, 0xFF	; 255
    315c:	99 23       	and	r25, r25
    315e:	a9 f0       	breq	.+42     	; 0x318a <__floatsisf+0x40>
    3160:	f9 2f       	mov	r31, r25
    3162:	96 e9       	ldi	r25, 0x96	; 150
    3164:	bb 27       	eor	r27, r27
    3166:	93 95       	inc	r25
    3168:	f6 95       	lsr	r31
    316a:	87 95       	ror	r24
    316c:	77 95       	ror	r23
    316e:	67 95       	ror	r22
    3170:	b7 95       	ror	r27
    3172:	f1 11       	cpse	r31, r1
    3174:	f8 cf       	rjmp	.-16     	; 0x3166 <__floatsisf+0x1c>
    3176:	fa f4       	brpl	.+62     	; 0x31b6 <__floatsisf+0x6c>
    3178:	bb 0f       	add	r27, r27
    317a:	11 f4       	brne	.+4      	; 0x3180 <__floatsisf+0x36>
    317c:	60 ff       	sbrs	r22, 0
    317e:	1b c0       	rjmp	.+54     	; 0x31b6 <__floatsisf+0x6c>
    3180:	6f 5f       	subi	r22, 0xFF	; 255
    3182:	7f 4f       	sbci	r23, 0xFF	; 255
    3184:	8f 4f       	sbci	r24, 0xFF	; 255
    3186:	9f 4f       	sbci	r25, 0xFF	; 255
    3188:	16 c0       	rjmp	.+44     	; 0x31b6 <__floatsisf+0x6c>
    318a:	88 23       	and	r24, r24
    318c:	11 f0       	breq	.+4      	; 0x3192 <__floatsisf+0x48>
    318e:	96 e9       	ldi	r25, 0x96	; 150
    3190:	11 c0       	rjmp	.+34     	; 0x31b4 <__floatsisf+0x6a>
    3192:	77 23       	and	r23, r23
    3194:	21 f0       	breq	.+8      	; 0x319e <__floatsisf+0x54>
    3196:	9e e8       	ldi	r25, 0x8E	; 142
    3198:	87 2f       	mov	r24, r23
    319a:	76 2f       	mov	r23, r22
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <__floatsisf+0x5e>
    319e:	66 23       	and	r22, r22
    31a0:	71 f0       	breq	.+28     	; 0x31be <__floatsisf+0x74>
    31a2:	96 e8       	ldi	r25, 0x86	; 134
    31a4:	86 2f       	mov	r24, r22
    31a6:	70 e0       	ldi	r23, 0x00	; 0
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	2a f0       	brmi	.+10     	; 0x31b6 <__floatsisf+0x6c>
    31ac:	9a 95       	dec	r25
    31ae:	66 0f       	add	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	88 1f       	adc	r24, r24
    31b4:	da f7       	brpl	.-10     	; 0x31ac <__floatsisf+0x62>
    31b6:	88 0f       	add	r24, r24
    31b8:	96 95       	lsr	r25
    31ba:	87 95       	ror	r24
    31bc:	97 f9       	bld	r25, 7
    31be:	08 95       	ret

000031c0 <__fp_arccos>:
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	1f 93       	push	r17
    31c6:	0f 93       	push	r16
    31c8:	8b 01       	movw	r16, r22
    31ca:	ec 01       	movw	r28, r24
    31cc:	ee ec       	ldi	r30, 0xCE	; 206
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	0e 94 2d 19 	call	0x325a	; 0x325a <__fp_powser>
    31d4:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__fp_round>
    31d8:	98 01       	movw	r18, r16
    31da:	ae 01       	movw	r20, r28
    31dc:	8b 01       	movw	r16, r22
    31de:	ec 01       	movw	r28, r24
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	80 e8       	ldi	r24, 0x80	; 128
    31e6:	9f e3       	ldi	r25, 0x3F	; 63
    31e8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__subsf3>
    31ec:	0e 94 14 1a 	call	0x3428	; 0x3428 <sqrt>
    31f0:	98 01       	movw	r18, r16
    31f2:	ae 01       	movw	r20, r28
    31f4:	0f 91       	pop	r16
    31f6:	1f 91       	pop	r17
    31f8:	cf 91       	pop	r28
    31fa:	df 91       	pop	r29
    31fc:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__mulsf3x>

00003200 <__fp_cmp>:
    3200:	99 0f       	add	r25, r25
    3202:	00 08       	sbc	r0, r0
    3204:	55 0f       	add	r21, r21
    3206:	aa 0b       	sbc	r26, r26
    3208:	e0 e8       	ldi	r30, 0x80	; 128
    320a:	fe ef       	ldi	r31, 0xFE	; 254
    320c:	16 16       	cp	r1, r22
    320e:	17 06       	cpc	r1, r23
    3210:	e8 07       	cpc	r30, r24
    3212:	f9 07       	cpc	r31, r25
    3214:	c0 f0       	brcs	.+48     	; 0x3246 <__fp_cmp+0x46>
    3216:	12 16       	cp	r1, r18
    3218:	13 06       	cpc	r1, r19
    321a:	e4 07       	cpc	r30, r20
    321c:	f5 07       	cpc	r31, r21
    321e:	98 f0       	brcs	.+38     	; 0x3246 <__fp_cmp+0x46>
    3220:	62 1b       	sub	r22, r18
    3222:	73 0b       	sbc	r23, r19
    3224:	84 0b       	sbc	r24, r20
    3226:	95 0b       	sbc	r25, r21
    3228:	39 f4       	brne	.+14     	; 0x3238 <__fp_cmp+0x38>
    322a:	0a 26       	eor	r0, r26
    322c:	61 f0       	breq	.+24     	; 0x3246 <__fp_cmp+0x46>
    322e:	23 2b       	or	r18, r19
    3230:	24 2b       	or	r18, r20
    3232:	25 2b       	or	r18, r21
    3234:	21 f4       	brne	.+8      	; 0x323e <__fp_cmp+0x3e>
    3236:	08 95       	ret
    3238:	0a 26       	eor	r0, r26
    323a:	09 f4       	brne	.+2      	; 0x323e <__fp_cmp+0x3e>
    323c:	a1 40       	sbci	r26, 0x01	; 1
    323e:	a6 95       	lsr	r26
    3240:	8f ef       	ldi	r24, 0xFF	; 255
    3242:	81 1d       	adc	r24, r1
    3244:	81 1d       	adc	r24, r1
    3246:	08 95       	ret

00003248 <__fp_inf>:
    3248:	97 f9       	bld	r25, 7
    324a:	9f 67       	ori	r25, 0x7F	; 127
    324c:	80 e8       	ldi	r24, 0x80	; 128
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	08 95       	ret

00003254 <__fp_nan>:
    3254:	9f ef       	ldi	r25, 0xFF	; 255
    3256:	80 ec       	ldi	r24, 0xC0	; 192
    3258:	08 95       	ret

0000325a <__fp_powser>:
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	1f 93       	push	r17
    3260:	0f 93       	push	r16
    3262:	ff 92       	push	r15
    3264:	ef 92       	push	r14
    3266:	df 92       	push	r13
    3268:	7b 01       	movw	r14, r22
    326a:	8c 01       	movw	r16, r24
    326c:	68 94       	set
    326e:	06 c0       	rjmp	.+12     	; 0x327c <__fp_powser+0x22>
    3270:	da 2e       	mov	r13, r26
    3272:	ef 01       	movw	r28, r30
    3274:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3x>
    3278:	fe 01       	movw	r30, r28
    327a:	e8 94       	clt
    327c:	a5 91       	lpm	r26, Z+
    327e:	25 91       	lpm	r18, Z+
    3280:	35 91       	lpm	r19, Z+
    3282:	45 91       	lpm	r20, Z+
    3284:	55 91       	lpm	r21, Z+
    3286:	a6 f3       	brts	.-24     	; 0x3270 <__fp_powser+0x16>
    3288:	ef 01       	movw	r28, r30
    328a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__addsf3x>
    328e:	fe 01       	movw	r30, r28
    3290:	97 01       	movw	r18, r14
    3292:	a8 01       	movw	r20, r16
    3294:	da 94       	dec	r13
    3296:	69 f7       	brne	.-38     	; 0x3272 <__fp_powser+0x18>
    3298:	df 90       	pop	r13
    329a:	ef 90       	pop	r14
    329c:	ff 90       	pop	r15
    329e:	0f 91       	pop	r16
    32a0:	1f 91       	pop	r17
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <__fp_pscA>:
    32a8:	00 24       	eor	r0, r0
    32aa:	0a 94       	dec	r0
    32ac:	16 16       	cp	r1, r22
    32ae:	17 06       	cpc	r1, r23
    32b0:	18 06       	cpc	r1, r24
    32b2:	09 06       	cpc	r0, r25
    32b4:	08 95       	ret

000032b6 <__fp_pscB>:
    32b6:	00 24       	eor	r0, r0
    32b8:	0a 94       	dec	r0
    32ba:	12 16       	cp	r1, r18
    32bc:	13 06       	cpc	r1, r19
    32be:	14 06       	cpc	r1, r20
    32c0:	05 06       	cpc	r0, r21
    32c2:	08 95       	ret

000032c4 <__fp_round>:
    32c4:	09 2e       	mov	r0, r25
    32c6:	03 94       	inc	r0
    32c8:	00 0c       	add	r0, r0
    32ca:	11 f4       	brne	.+4      	; 0x32d0 <__fp_round+0xc>
    32cc:	88 23       	and	r24, r24
    32ce:	52 f0       	brmi	.+20     	; 0x32e4 <__fp_round+0x20>
    32d0:	bb 0f       	add	r27, r27
    32d2:	40 f4       	brcc	.+16     	; 0x32e4 <__fp_round+0x20>
    32d4:	bf 2b       	or	r27, r31
    32d6:	11 f4       	brne	.+4      	; 0x32dc <__fp_round+0x18>
    32d8:	60 ff       	sbrs	r22, 0
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <__fp_round+0x20>
    32dc:	6f 5f       	subi	r22, 0xFF	; 255
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
    32e0:	8f 4f       	sbci	r24, 0xFF	; 255
    32e2:	9f 4f       	sbci	r25, 0xFF	; 255
    32e4:	08 95       	ret

000032e6 <__fp_split3>:
    32e6:	57 fd       	sbrc	r21, 7
    32e8:	90 58       	subi	r25, 0x80	; 128
    32ea:	44 0f       	add	r20, r20
    32ec:	55 1f       	adc	r21, r21
    32ee:	59 f0       	breq	.+22     	; 0x3306 <__fp_splitA+0x10>
    32f0:	5f 3f       	cpi	r21, 0xFF	; 255
    32f2:	71 f0       	breq	.+28     	; 0x3310 <__fp_splitA+0x1a>
    32f4:	47 95       	ror	r20

000032f6 <__fp_splitA>:
    32f6:	88 0f       	add	r24, r24
    32f8:	97 fb       	bst	r25, 7
    32fa:	99 1f       	adc	r25, r25
    32fc:	61 f0       	breq	.+24     	; 0x3316 <__fp_splitA+0x20>
    32fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3300:	79 f0       	breq	.+30     	; 0x3320 <__fp_splitA+0x2a>
    3302:	87 95       	ror	r24
    3304:	08 95       	ret
    3306:	12 16       	cp	r1, r18
    3308:	13 06       	cpc	r1, r19
    330a:	14 06       	cpc	r1, r20
    330c:	55 1f       	adc	r21, r21
    330e:	f2 cf       	rjmp	.-28     	; 0x32f4 <__fp_split3+0xe>
    3310:	46 95       	lsr	r20
    3312:	f1 df       	rcall	.-30     	; 0x32f6 <__fp_splitA>
    3314:	08 c0       	rjmp	.+16     	; 0x3326 <__fp_splitA+0x30>
    3316:	16 16       	cp	r1, r22
    3318:	17 06       	cpc	r1, r23
    331a:	18 06       	cpc	r1, r24
    331c:	99 1f       	adc	r25, r25
    331e:	f1 cf       	rjmp	.-30     	; 0x3302 <__fp_splitA+0xc>
    3320:	86 95       	lsr	r24
    3322:	71 05       	cpc	r23, r1
    3324:	61 05       	cpc	r22, r1
    3326:	08 94       	sec
    3328:	08 95       	ret

0000332a <__fp_zero>:
    332a:	e8 94       	clt

0000332c <__fp_szero>:
    332c:	bb 27       	eor	r27, r27
    332e:	66 27       	eor	r22, r22
    3330:	77 27       	eor	r23, r23
    3332:	cb 01       	movw	r24, r22
    3334:	97 f9       	bld	r25, 7
    3336:	08 95       	ret

00003338 <__gesf2>:
    3338:	0e 94 00 19 	call	0x3200	; 0x3200 <__fp_cmp>
    333c:	08 f4       	brcc	.+2      	; 0x3340 <__gesf2+0x8>
    333e:	8f ef       	ldi	r24, 0xFF	; 255
    3340:	08 95       	ret

00003342 <__mulsf3>:
    3342:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3x>
    3346:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__fp_round>
    334a:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__fp_pscA>
    334e:	38 f0       	brcs	.+14     	; 0x335e <__mulsf3+0x1c>
    3350:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__fp_pscB>
    3354:	20 f0       	brcs	.+8      	; 0x335e <__mulsf3+0x1c>
    3356:	95 23       	and	r25, r21
    3358:	11 f0       	breq	.+4      	; 0x335e <__mulsf3+0x1c>
    335a:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_inf>
    335e:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_nan>
    3362:	11 24       	eor	r1, r1
    3364:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>

00003368 <__mulsf3x>:
    3368:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_split3>
    336c:	70 f3       	brcs	.-36     	; 0x334a <__mulsf3+0x8>

0000336e <__mulsf3_pse>:
    336e:	95 9f       	mul	r25, r21
    3370:	c1 f3       	breq	.-16     	; 0x3362 <__mulsf3+0x20>
    3372:	95 0f       	add	r25, r21
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	55 1f       	adc	r21, r21
    3378:	62 9f       	mul	r22, r18
    337a:	f0 01       	movw	r30, r0
    337c:	72 9f       	mul	r23, r18
    337e:	bb 27       	eor	r27, r27
    3380:	f0 0d       	add	r31, r0
    3382:	b1 1d       	adc	r27, r1
    3384:	63 9f       	mul	r22, r19
    3386:	aa 27       	eor	r26, r26
    3388:	f0 0d       	add	r31, r0
    338a:	b1 1d       	adc	r27, r1
    338c:	aa 1f       	adc	r26, r26
    338e:	64 9f       	mul	r22, r20
    3390:	66 27       	eor	r22, r22
    3392:	b0 0d       	add	r27, r0
    3394:	a1 1d       	adc	r26, r1
    3396:	66 1f       	adc	r22, r22
    3398:	82 9f       	mul	r24, r18
    339a:	22 27       	eor	r18, r18
    339c:	b0 0d       	add	r27, r0
    339e:	a1 1d       	adc	r26, r1
    33a0:	62 1f       	adc	r22, r18
    33a2:	73 9f       	mul	r23, r19
    33a4:	b0 0d       	add	r27, r0
    33a6:	a1 1d       	adc	r26, r1
    33a8:	62 1f       	adc	r22, r18
    33aa:	83 9f       	mul	r24, r19
    33ac:	a0 0d       	add	r26, r0
    33ae:	61 1d       	adc	r22, r1
    33b0:	22 1f       	adc	r18, r18
    33b2:	74 9f       	mul	r23, r20
    33b4:	33 27       	eor	r19, r19
    33b6:	a0 0d       	add	r26, r0
    33b8:	61 1d       	adc	r22, r1
    33ba:	23 1f       	adc	r18, r19
    33bc:	84 9f       	mul	r24, r20
    33be:	60 0d       	add	r22, r0
    33c0:	21 1d       	adc	r18, r1
    33c2:	82 2f       	mov	r24, r18
    33c4:	76 2f       	mov	r23, r22
    33c6:	6a 2f       	mov	r22, r26
    33c8:	11 24       	eor	r1, r1
    33ca:	9f 57       	subi	r25, 0x7F	; 127
    33cc:	50 40       	sbci	r21, 0x00	; 0
    33ce:	9a f0       	brmi	.+38     	; 0x33f6 <__mulsf3_pse+0x88>
    33d0:	f1 f0       	breq	.+60     	; 0x340e <__mulsf3_pse+0xa0>
    33d2:	88 23       	and	r24, r24
    33d4:	4a f0       	brmi	.+18     	; 0x33e8 <__mulsf3_pse+0x7a>
    33d6:	ee 0f       	add	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	bb 1f       	adc	r27, r27
    33dc:	66 1f       	adc	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	88 1f       	adc	r24, r24
    33e2:	91 50       	subi	r25, 0x01	; 1
    33e4:	50 40       	sbci	r21, 0x00	; 0
    33e6:	a9 f7       	brne	.-22     	; 0x33d2 <__mulsf3_pse+0x64>
    33e8:	9e 3f       	cpi	r25, 0xFE	; 254
    33ea:	51 05       	cpc	r21, r1
    33ec:	80 f0       	brcs	.+32     	; 0x340e <__mulsf3_pse+0xa0>
    33ee:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__fp_inf>
    33f2:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>
    33f6:	5f 3f       	cpi	r21, 0xFF	; 255
    33f8:	e4 f3       	brlt	.-8      	; 0x33f2 <__mulsf3_pse+0x84>
    33fa:	98 3e       	cpi	r25, 0xE8	; 232
    33fc:	d4 f3       	brlt	.-12     	; 0x33f2 <__mulsf3_pse+0x84>
    33fe:	86 95       	lsr	r24
    3400:	77 95       	ror	r23
    3402:	67 95       	ror	r22
    3404:	b7 95       	ror	r27
    3406:	f7 95       	ror	r31
    3408:	e7 95       	ror	r30
    340a:	9f 5f       	subi	r25, 0xFF	; 255
    340c:	c1 f7       	brne	.-16     	; 0x33fe <__mulsf3_pse+0x90>
    340e:	fe 2b       	or	r31, r30
    3410:	88 0f       	add	r24, r24
    3412:	91 1d       	adc	r25, r1
    3414:	96 95       	lsr	r25
    3416:	87 95       	ror	r24
    3418:	97 f9       	bld	r25, 7
    341a:	08 95       	ret
    341c:	19 f4       	brne	.+6      	; 0x3424 <__mulsf3_pse+0xb6>
    341e:	16 f4       	brtc	.+4      	; 0x3424 <__mulsf3_pse+0xb6>
    3420:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_nan>
    3424:	0c 94 54 1a 	jmp	0x34a8	; 0x34a8 <__fp_mpack>

00003428 <sqrt>:
    3428:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__fp_splitA>
    342c:	b8 f3       	brcs	.-18     	; 0x341c <__mulsf3_pse+0xae>
    342e:	99 23       	and	r25, r25
    3430:	c9 f3       	breq	.-14     	; 0x3424 <__mulsf3_pse+0xb6>
    3432:	b6 f3       	brts	.-20     	; 0x3420 <__mulsf3_pse+0xb2>
    3434:	9f 57       	subi	r25, 0x7F	; 127
    3436:	55 0b       	sbc	r21, r21
    3438:	87 ff       	sbrs	r24, 7
    343a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__fp_norm2>
    343e:	00 24       	eor	r0, r0
    3440:	a0 e6       	ldi	r26, 0x60	; 96
    3442:	40 ea       	ldi	r20, 0xA0	; 160
    3444:	90 01       	movw	r18, r0
    3446:	80 58       	subi	r24, 0x80	; 128
    3448:	56 95       	lsr	r21
    344a:	97 95       	ror	r25
    344c:	28 f4       	brcc	.+10     	; 0x3458 <sqrt+0x30>
    344e:	80 5c       	subi	r24, 0xC0	; 192
    3450:	66 0f       	add	r22, r22
    3452:	77 1f       	adc	r23, r23
    3454:	88 1f       	adc	r24, r24
    3456:	20 f0       	brcs	.+8      	; 0x3460 <sqrt+0x38>
    3458:	26 17       	cp	r18, r22
    345a:	37 07       	cpc	r19, r23
    345c:	48 07       	cpc	r20, r24
    345e:	30 f4       	brcc	.+12     	; 0x346c <sqrt+0x44>
    3460:	62 1b       	sub	r22, r18
    3462:	73 0b       	sbc	r23, r19
    3464:	84 0b       	sbc	r24, r20
    3466:	20 29       	or	r18, r0
    3468:	31 29       	or	r19, r1
    346a:	4a 2b       	or	r20, r26
    346c:	a6 95       	lsr	r26
    346e:	17 94       	ror	r1
    3470:	07 94       	ror	r0
    3472:	20 25       	eor	r18, r0
    3474:	31 25       	eor	r19, r1
    3476:	4a 27       	eor	r20, r26
    3478:	58 f7       	brcc	.-42     	; 0x3450 <sqrt+0x28>
    347a:	66 0f       	add	r22, r22
    347c:	77 1f       	adc	r23, r23
    347e:	88 1f       	adc	r24, r24
    3480:	20 f0       	brcs	.+8      	; 0x348a <sqrt+0x62>
    3482:	26 17       	cp	r18, r22
    3484:	37 07       	cpc	r19, r23
    3486:	48 07       	cpc	r20, r24
    3488:	30 f4       	brcc	.+12     	; 0x3496 <sqrt+0x6e>
    348a:	62 0b       	sbc	r22, r18
    348c:	73 0b       	sbc	r23, r19
    348e:	84 0b       	sbc	r24, r20
    3490:	20 0d       	add	r18, r0
    3492:	31 1d       	adc	r19, r1
    3494:	41 1d       	adc	r20, r1
    3496:	a0 95       	com	r26
    3498:	81 f7       	brne	.-32     	; 0x347a <sqrt+0x52>
    349a:	b9 01       	movw	r22, r18
    349c:	84 2f       	mov	r24, r20
    349e:	91 58       	subi	r25, 0x81	; 129
    34a0:	88 0f       	add	r24, r24
    34a2:	96 95       	lsr	r25
    34a4:	87 95       	ror	r24
    34a6:	08 95       	ret

000034a8 <__fp_mpack>:
    34a8:	9f 3f       	cpi	r25, 0xFF	; 255
    34aa:	31 f0       	breq	.+12     	; 0x34b8 <__fp_mpack_finite+0xc>

000034ac <__fp_mpack_finite>:
    34ac:	91 50       	subi	r25, 0x01	; 1
    34ae:	20 f4       	brcc	.+8      	; 0x34b8 <__fp_mpack_finite+0xc>
    34b0:	87 95       	ror	r24
    34b2:	77 95       	ror	r23
    34b4:	67 95       	ror	r22
    34b6:	b7 95       	ror	r27
    34b8:	88 0f       	add	r24, r24
    34ba:	91 1d       	adc	r25, r1
    34bc:	96 95       	lsr	r25
    34be:	87 95       	ror	r24
    34c0:	97 f9       	bld	r25, 7
    34c2:	08 95       	ret

000034c4 <__fp_norm2>:
    34c4:	91 50       	subi	r25, 0x01	; 1
    34c6:	50 40       	sbci	r21, 0x00	; 0
    34c8:	66 0f       	add	r22, r22
    34ca:	77 1f       	adc	r23, r23
    34cc:	88 1f       	adc	r24, r24
    34ce:	d2 f7       	brpl	.-12     	; 0x34c4 <__fp_norm2>
    34d0:	08 95       	ret

000034d2 <__divmodhi4>:
    34d2:	97 fb       	bst	r25, 7
    34d4:	07 2e       	mov	r0, r23
    34d6:	16 f4       	brtc	.+4      	; 0x34dc <__divmodhi4+0xa>
    34d8:	00 94       	com	r0
    34da:	07 d0       	rcall	.+14     	; 0x34ea <__divmodhi4_neg1>
    34dc:	77 fd       	sbrc	r23, 7
    34de:	09 d0       	rcall	.+18     	; 0x34f2 <__divmodhi4_neg2>
    34e0:	0e 94 83 1a 	call	0x3506	; 0x3506 <__udivmodhi4>
    34e4:	07 fc       	sbrc	r0, 7
    34e6:	05 d0       	rcall	.+10     	; 0x34f2 <__divmodhi4_neg2>
    34e8:	3e f4       	brtc	.+14     	; 0x34f8 <__divmodhi4_exit>

000034ea <__divmodhi4_neg1>:
    34ea:	90 95       	com	r25
    34ec:	81 95       	neg	r24
    34ee:	9f 4f       	sbci	r25, 0xFF	; 255
    34f0:	08 95       	ret

000034f2 <__divmodhi4_neg2>:
    34f2:	70 95       	com	r23
    34f4:	61 95       	neg	r22
    34f6:	7f 4f       	sbci	r23, 0xFF	; 255

000034f8 <__divmodhi4_exit>:
    34f8:	08 95       	ret

000034fa <__tablejump2__>:
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	05 90       	lpm	r0, Z+
    3500:	f4 91       	lpm	r31, Z
    3502:	e0 2d       	mov	r30, r0
    3504:	09 94       	ijmp

00003506 <__udivmodhi4>:
    3506:	aa 1b       	sub	r26, r26
    3508:	bb 1b       	sub	r27, r27
    350a:	51 e1       	ldi	r21, 0x11	; 17
    350c:	07 c0       	rjmp	.+14     	; 0x351c <__udivmodhi4_ep>

0000350e <__udivmodhi4_loop>:
    350e:	aa 1f       	adc	r26, r26
    3510:	bb 1f       	adc	r27, r27
    3512:	a6 17       	cp	r26, r22
    3514:	b7 07       	cpc	r27, r23
    3516:	10 f0       	brcs	.+4      	; 0x351c <__udivmodhi4_ep>
    3518:	a6 1b       	sub	r26, r22
    351a:	b7 0b       	sbc	r27, r23

0000351c <__udivmodhi4_ep>:
    351c:	88 1f       	adc	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	5a 95       	dec	r21
    3522:	a9 f7       	brne	.-22     	; 0x350e <__udivmodhi4_loop>
    3524:	80 95       	com	r24
    3526:	90 95       	com	r25
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	08 95       	ret

0000352e <__itoa_ncheck>:
    352e:	bb 27       	eor	r27, r27
    3530:	4a 30       	cpi	r20, 0x0A	; 10
    3532:	31 f4       	brne	.+12     	; 0x3540 <__itoa_ncheck+0x12>
    3534:	99 23       	and	r25, r25
    3536:	22 f4       	brpl	.+8      	; 0x3540 <__itoa_ncheck+0x12>
    3538:	bd e2       	ldi	r27, 0x2D	; 45
    353a:	90 95       	com	r25
    353c:	81 95       	neg	r24
    353e:	9f 4f       	sbci	r25, 0xFF	; 255
    3540:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__utoa_common>

00003544 <__utoa_ncheck>:
    3544:	bb 27       	eor	r27, r27

00003546 <__utoa_common>:
    3546:	fb 01       	movw	r30, r22
    3548:	55 27       	eor	r21, r21
    354a:	aa 27       	eor	r26, r26
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	aa 1f       	adc	r26, r26
    3552:	a4 17       	cp	r26, r20
    3554:	10 f0       	brcs	.+4      	; 0x355a <__utoa_common+0x14>
    3556:	a4 1b       	sub	r26, r20
    3558:	83 95       	inc	r24
    355a:	50 51       	subi	r21, 0x10	; 16
    355c:	b9 f7       	brne	.-18     	; 0x354c <__utoa_common+0x6>
    355e:	a0 5d       	subi	r26, 0xD0	; 208
    3560:	aa 33       	cpi	r26, 0x3A	; 58
    3562:	08 f0       	brcs	.+2      	; 0x3566 <__utoa_common+0x20>
    3564:	a9 5d       	subi	r26, 0xD9	; 217
    3566:	a1 93       	st	Z+, r26
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	79 f7       	brne	.-34     	; 0x354a <__utoa_common+0x4>
    356c:	b1 11       	cpse	r27, r1
    356e:	b1 93       	st	Z+, r27
    3570:	11 92       	st	Z+, r1
    3572:	cb 01       	movw	r24, r22
    3574:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <strrev>

00003578 <strrev>:
    3578:	dc 01       	movw	r26, r24
    357a:	fc 01       	movw	r30, r24
    357c:	67 2f       	mov	r22, r23
    357e:	71 91       	ld	r23, Z+
    3580:	77 23       	and	r23, r23
    3582:	e1 f7       	brne	.-8      	; 0x357c <strrev+0x4>
    3584:	32 97       	sbiw	r30, 0x02	; 2
    3586:	04 c0       	rjmp	.+8      	; 0x3590 <strrev+0x18>
    3588:	7c 91       	ld	r23, X
    358a:	6d 93       	st	X+, r22
    358c:	70 83       	st	Z, r23
    358e:	62 91       	ld	r22, -Z
    3590:	ae 17       	cp	r26, r30
    3592:	bf 07       	cpc	r27, r31
    3594:	c8 f3       	brcs	.-14     	; 0x3588 <strrev+0x10>
    3596:	08 95       	ret

00003598 <_exit>:
    3598:	f8 94       	cli

0000359a <__stop_program>:
    359a:	ff cf       	rjmp	.-2      	; 0x359a <__stop_program>

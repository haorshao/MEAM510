
Blue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00003c10  00003ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080013c  0080013c  00003ce0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  00003d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000362f  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd8  00000000  00000000  000075bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011bd  00000000  00000000  00008197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009b0  00000000  00000000  00009354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000094e  00000000  00000000  00009d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000402d  00000000  00000000  0000a652  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0000e67f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 01 	jmp	0x37c	; 0x37c <__ctors_end>
       4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_3>
      10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      28:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__vector_10>
      2c:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__vector_11>
      30:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      68:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_29>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      94:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      98:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      9c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      ac:	01 02       	muls	r16, r17
      ae:	0c 02       	muls	r16, r28
      b0:	61 02       	muls	r22, r17
      b2:	80 02       	muls	r24, r16
      b4:	9f 02       	muls	r25, r31
      b6:	04 03       	mulsu	r16, r20
      b8:	b0 02       	muls	r27, r16
      ba:	f4 02       	muls	r31, r20
      bc:	d7 08       	sbc	r13, r7
      be:	e8 08       	sbc	r14, r8
      c0:	f9 08       	sbc	r15, r9
      c2:	0a 09       	sbc	r16, r10
      c4:	1b 09       	sbc	r17, r11
      c6:	2c 09       	sbc	r18, r12
      c8:	3d 09       	sbc	r19, r13
      ca:	07 2c       	mov	r0, r7
      cc:	7a a5       	ldd	r23, Y+42	; 0x2a
      ce:	ba 6c       	ori	r27, 0xCA	; 202
      d0:	c5 90       	lpm	r12, Z+
      d2:	da 3b       	cpi	r29, 0xBA	; 186
      d4:	93 65       	ori	r25, 0x53	; 83
      d6:	fc 8b       	std	Y+20, r31	; 0x14
      d8:	bc 53       	subi	r27, 0x3C	; 60
      da:	f8 10       	cpse	r15, r8
      dc:	fd 3c       	cpi	r31, 0xCD	; 205
      de:	56 92       	lac	Z, r5
      e0:	83 4d       	sbci	r24, 0xD3	; 211
      e2:	bd 87       	std	Y+13, r27	; 0x0d
      e4:	9d 3a       	cpi	r25, 0xAD	; 173
      e6:	b6 3d       	cpi	r27, 0xD6	; 214
      e8:	cb c9       	rjmp	.-3178   	; 0xfffff480 <__eeprom_end+0xff7ef480>
      ea:	bf 5b       	subi	r27, 0xBF	; 191
      ec:	be 73       	andi	r27, 0x3E	; 62
      ee:	da 0f       	add	r29, r26
      f0:	c9 3f       	cpi	r28, 0xF9	; 249

000000f2 <__trampolines_end>:
      f2:	47 61       	ori	r20, 0x17	; 23
      f4:	6d 65       	ori	r22, 0x5D	; 93
      f6:	20 6f       	ori	r18, 0xF0	; 240
      f8:	76 65       	ori	r23, 0x56	; 86
      fa:	72 0a       	sbc	r7, r18
	...

000000fd <__c.2091>:
      fd:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000107 <__c.2088>:
     107:	50 61 75 73 65 0a 00                                Pause..

0000010e <__c.2085>:
     10e:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000116 <__c.2082>:
     116:	47 6f 61 6c 20 41 0a 00                             Goal A..

0000011e <__c.2079>:
     11e:	50 6c 61 79 20 0a 00                                Play ..

00000125 <__c.2075>:
     125:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

00000131 <__c.2066>:
     131:	0a 00                                               ..

00000133 <__c.2064>:
     133:	2c 20 00                                            , .

00000136 <__c.2062>:
     136:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

0000013f <__c.2058>:
     13f:	0a 00                                               ..

00000141 <__c.2056>:
     141:	2c 20 00                                            , .

00000144 <__c.2054>:
     144:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     154:	3d 20 00                                            = .

00000157 <__c.2051>:
     157:	0a 00                                               ..

00000159 <__c.2049>:
     159:	2c 20 00                                            , .

0000015c <__c.2047>:
     15c:	67 6f 61 6c 20 3d 20 00                             goal = .

00000164 <__c.2040>:
     164:	0a 00                                               ..

00000166 <__c.2038>:
     166:	73 74 61 74 65 3a 20 00                             state: .

0000016e <__c.2099>:
     16e:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

0000017e <__c.2097>:
     17e:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

0000018d <__c.2066>:
     18d:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000199 <__c.2064>:
     199:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001a4 <__c.2060>:
     1a4:	50 49 44 0a 00                                      PID..

000001a9 <__c.2058>:
     1a9:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001b5 <__c.2056>:
     1b5:	50 49 44 0a 00                                      PID..

000001ba <__c.2054>:
     1ba:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001c5 <__c.2051>:
     1c5:	0a 00                                               ..

000001c7 <__c.2049>:
     1c7:	2c 20 00                                            , .

000001ca <__c.2047>:
     1ca:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     1da:	3a 20 00                                            : .

000001dd <__c.2043>:
     1dd:	0d 0a 00                                            ...

000001e0 <__c.2041>:
     1e0:	0d 0a 00                                            ...

000001e3 <__c.2039>:
     1e3:	50 68 6f 5b 36 5d 00                                Pho[6].

000001ea <__c.2037>:
     1ea:	0d 0a 00                                            ...

000001ed <__c.2035>:
     1ed:	50 68 6f 5b 35 5d 00                                Pho[5].

000001f4 <__c.2033>:
     1f4:	0d 0a 00                                            ...

000001f7 <__c.2031>:
     1f7:	50 68 6f 5b 34 5d 00                                Pho[4].

000001fe <__c.2029>:
     1fe:	0d 0a 00                                            ...

00000201 <__c.2027>:
     201:	50 68 6f 5b 33 5d 00                                Pho[3].

00000208 <__c.2025>:
     208:	0d 0a 00                                            ...

0000020b <__c.2023>:
     20b:	50 68 6f 5b 32 5d 00                                Pho[2].

00000212 <__c.2021>:
     212:	0d 0a 00                                            ...

00000215 <__c.2019>:
     215:	50 68 6f 5b 31 5d 00                                Pho[1].

0000021c <__c.2017>:
     21c:	0d 0a 00                                            ...

0000021f <__c.2015>:
     21f:	50 68 6f 5b 30 5d 00                                Pho[0].

00000226 <__c.2013>:
     226:	0d 0a 00                                            ...

00000229 <__c.2146>:
     229:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000234 <__c.2144>:
     234:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000240 <__c.2142>:
     240:	0a 00                                               ..

00000242 <__c.2140>:
     242:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

0000024c <__c.2138>:
     24c:	0a 00                                               ..

0000024e <__c.2136>:
     24e:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000259 <__c.2128>:
     259:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000264 <__c.2126>:
     264:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000270 <__c.2124>:
     270:	0a 00                                               ..

00000272 <__c.2122>:
     272:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

0000027c <__c.2120>:
     27c:	0a 00                                               ..

0000027e <__c.2118>:
     27e:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000289 <__c.2110>:
     289:	0a 00                                               ..

0000028b <__c.2108>:
     28b:	61 6c 70 68 61 3a 20 00                             alpha: .

00000293 <__c.2084>:
     293:	0a 00                                               ..

00000295 <__c.2082>:
     295:	09 76 79 3a 20 30 2e 00                             .vy: 0..

0000029d <__c.2080>:
     29d:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

000002ae <__c.2078>:
     2ae:	0a 00                                               ..

000002b0 <__c.2076>:
     2b0:	09 09 79 3a 00                                      ..y:.

000002b5 <__c.2074>:
     2b5:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

000002c1 <__c.2046>:
     2c1:	0a 00                                               ..

000002c3 <__c.2044>:
     2c3:	64 6d 61 78 3a 00                                   dmax:.

000002c9 <descriptor_list>:
     2c9:	00 01 00 00 60 03 12 00 02 00 00 1d 03 43 00 03     ....`........C..
     2d9:	00 00 19 03 04 01 03 09 04 05 03 12 02 03 09 04     ................
     2e9:	fd 02 06 03 03 09 04 f3 02 08                       ..........

000002f3 <string3>:
     2f3:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000002fd <string2>:
     2fd:	06 03 4d 00 32 00 00 00                             ..M.2...

00000305 <string1>:
     305:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     315:	65 00 00 00                                         e...

00000319 <string0>:
     319:	04 03 09 04                                         ....

0000031d <config1_descriptor>:
     31d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     32d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     33d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     34d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     35d:	40 00 00                                            @..

00000360 <device_descriptor>:
     360:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     370:	03 01                                               ..

00000372 <endpoint_config_table>:
     372:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	da e0       	ldi	r29, 0x0A	; 10
     384:	de bf       	out	0x3e, r29	; 62
     386:	cd bf       	out	0x3d, r28	; 61

00000388 <__do_copy_data>:
     388:	11 e0       	ldi	r17, 0x01	; 1
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b1 e0       	ldi	r27, 0x01	; 1
     38e:	e0 e1       	ldi	r30, 0x10	; 16
     390:	fc e3       	ldi	r31, 0x3C	; 60
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x10>
     394:	05 90       	lpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	ac 33       	cpi	r26, 0x3C	; 60
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0xc>

0000039e <__do_clear_bss>:
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	ac e3       	ldi	r26, 0x3C	; 60
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	a4 3b       	cpi	r26, 0xB4	; 180
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
     3b2:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <_exit>

000003b6 <__bad_interrupt>:
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <__vector_3>:
		m_wait(wait);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
     3dc:	6a e0       	ldi	r22, 0x0A	; 10
     3de:	80 e5       	ldi	r24, 0x50	; 80
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <m_rf_read>
	switch(buffer[0]){
     3e6:	80 91 50 01 	lds	r24, 0x0150
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	fc 01       	movw	r30, r24
     3ee:	e0 5a       	subi	r30, 0xA0	; 160
     3f0:	f1 09       	sbc	r31, r1
     3f2:	e8 30       	cpi	r30, 0x08	; 8
     3f4:	f1 05       	cpc	r31, r1
     3f6:	08 f0       	brcs	.+2      	; 0x3fa <__vector_3+0x40>
     3f8:	07 c1       	rjmp	.+526    	; 0x608 <__vector_3+0x24e>
     3fa:	ea 5a       	subi	r30, 0xAA	; 170
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__tablejump2__>
		case 0xA0:
		usb_tx_string("flash LED \n");
     402:	85 e2       	ldi	r24, 0x25	; 37
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		state = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 af 01 	sts	0x01AF, r25
     412:	80 93 ae 01 	sts	0x01AE, r24
		break;
     416:	f8 c0       	rjmp	.+496    	; 0x608 <__vector_3+0x24e>
		case 0xA1:
		m_usb_tx_string("Play \n");
     418:	8e e1       	ldi	r24, 0x1E	; 30
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		if(check(PINC, 7)){
     420:	37 9b       	sbis	0x06, 7	; 6
     422:	19 c0       	rjmp	.+50     	; 0x456 <__vector_3+0x9c>
			goal[0] = GateB;  // left gate
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	a8 ec       	ldi	r26, 0xC8	; 200
     42a:	b3 ec       	ldi	r27, 0xC3	; 195
     42c:	80 93 08 01 	sts	0x0108, r24
     430:	90 93 09 01 	sts	0x0109, r25
     434:	a0 93 0a 01 	sts	0x010A, r26
     438:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = -xline;  // left defense line
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a8 e4       	ldi	r26, 0x48	; 72
     442:	b3 ec       	ldi	r27, 0xC3	; 195
     444:	80 93 00 01 	sts	0x0100, r24
     448:	90 93 01 01 	sts	0x0101, r25
     44c:	a0 93 02 01 	sts	0x0102, r26
     450:	b0 93 03 01 	sts	0x0103, r27
     454:	18 c0       	rjmp	.+48     	; 0x486 <__vector_3+0xcc>
		}
		else{
			goal[0] = GateA;  // right gate
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a8 ec       	ldi	r26, 0xC8	; 200
     45c:	b3 e4       	ldi	r27, 0x43	; 67
     45e:	80 93 08 01 	sts	0x0108, r24
     462:	90 93 09 01 	sts	0x0109, r25
     466:	a0 93 0a 01 	sts	0x010A, r26
     46a:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = xline;	// right defense line
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a8 e4       	ldi	r26, 0x48	; 72
     474:	b3 e4       	ldi	r27, 0x43	; 67
     476:	80 93 00 01 	sts	0x0100, r24
     47a:	90 93 01 01 	sts	0x0101, r25
     47e:	a0 93 02 01 	sts	0x0102, r26
     482:	b0 93 03 01 	sts	0x0103, r27
		}
		if(check(PINC, 6)){
     486:	36 9b       	sbis	0x06, 6	; 6
     488:	03 c0       	rjmp	.+6      	; 0x490 <__vector_3+0xd6>
			set(PORTB, 2); // red light
     48a:	2a 9a       	sbi	0x05, 2	; 5
			clear(PORTB, 3);
     48c:	2b 98       	cbi	0x05, 3	; 5
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__vector_3+0xda>
		}
		else{
			set(PORTB, 3); // blue light
     490:	2b 9a       	sbi	0x05, 3	; 5
			clear(PORTB, 2);
     492:	2a 98       	cbi	0x05, 2	; 5
		}
		state = 2;
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	90 93 af 01 	sts	0x01AF, r25
     49c:	80 93 ae 01 	sts	0x01AE, r24
		findPuck(state);
     4a0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <findPuck>
		localization(&state, &goal[0], &c_wii[0], &dir[0]);
     4a4:	2c e3       	ldi	r18, 0x3C	; 60
     4a6:	31 e0       	ldi	r19, 0x01	; 1
     4a8:	44 e4       	ldi	r20, 0x44	; 68
     4aa:	51 e0       	ldi	r21, 0x01	; 1
     4ac:	68 e0       	ldi	r22, 0x08	; 8
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	8e ea       	ldi	r24, 0xAE	; 174
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <localization>
		deterState(&state);
     4b8:	8e ea       	ldi	r24, 0xAE	; 174
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <deterState>
		break;
     4c0:	a3 c0       	rjmp	.+326    	; 0x608 <__vector_3+0x24e>
		case 0xA2:
		m_usb_tx_string("Goal A\n");
     4c2:	86 e1       	ldi	r24, 0x16	; 22
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		scoreR = buffer[1];
     4ca:	80 91 51 01 	lds	r24, 0x0151
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	90 93 4f 01 	sts	0x014F, r25
     4d4:	80 93 4e 01 	sts	0x014E, r24
		scoreB = buffer[2];
     4d8:	80 91 52 01 	lds	r24, 0x0152
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 4d 01 	sts	0x014D, r25
     4e2:	80 93 4c 01 	sts	0x014C, r24
		OCR1B = 0;
     4e6:	10 92 8b 00 	sts	0x008B, r1
     4ea:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     4ee:	10 92 8d 00 	sts	0x008D, r1
     4f2:	10 92 8c 00 	sts	0x008C, r1
		state = 0;
     4f6:	10 92 af 01 	sts	0x01AF, r1
     4fa:	10 92 ae 01 	sts	0x01AE, r1
		break;
     4fe:	84 c0       	rjmp	.+264    	; 0x608 <__vector_3+0x24e>
		case 0xA3:
		m_usb_tx_string("Goal B\n");
     500:	8e e0       	ldi	r24, 0x0E	; 14
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		scoreR = buffer[1];
     508:	80 91 51 01 	lds	r24, 0x0151
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	90 93 4f 01 	sts	0x014F, r25
     512:	80 93 4e 01 	sts	0x014E, r24
		scoreB = buffer[2];
     516:	80 91 52 01 	lds	r24, 0x0152
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	90 93 4d 01 	sts	0x014D, r25
     520:	80 93 4c 01 	sts	0x014C, r24
		OCR1B = 0;
     524:	10 92 8b 00 	sts	0x008B, r1
     528:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     52c:	10 92 8d 00 	sts	0x008D, r1
     530:	10 92 8c 00 	sts	0x008C, r1
		state = 0;
     534:	10 92 af 01 	sts	0x01AF, r1
     538:	10 92 ae 01 	sts	0x01AE, r1
		break;
     53c:	65 c0       	rjmp	.+202    	; 0x608 <__vector_3+0x24e>
		case 0xA4:
		m_usb_tx_string("Pause\n");
     53e:	87 e0       	ldi	r24, 0x07	; 7
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		state = 0;
     546:	10 92 af 01 	sts	0x01AF, r1
     54a:	10 92 ae 01 	sts	0x01AE, r1
		OCR1B = 0;
     54e:	10 92 8b 00 	sts	0x008B, r1
     552:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     556:	10 92 8d 00 	sts	0x008D, r1
     55a:	10 92 8c 00 	sts	0x008C, r1
		break;
     55e:	54 c0       	rjmp	.+168    	; 0x608 <__vector_3+0x24e>
		case 0xA6:
		m_usb_tx_string("Halftime\n");
     560:	8d ef       	ldi	r24, 0xFD	; 253
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		if(check(PINC, 6)){
     568:	36 9b       	sbis	0x06, 6	; 6
     56a:	19 c0       	rjmp	.+50     	; 0x59e <__vector_3+0x1e4>
			goal[0] = GateB;  // left gate
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	a8 ec       	ldi	r26, 0xC8	; 200
     572:	b3 ec       	ldi	r27, 0xC3	; 195
     574:	80 93 08 01 	sts	0x0108, r24
     578:	90 93 09 01 	sts	0x0109, r25
     57c:	a0 93 0a 01 	sts	0x010A, r26
     580:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = -xline;  // left defense line
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a8 e4       	ldi	r26, 0x48	; 72
     58a:	b3 ec       	ldi	r27, 0xC3	; 195
     58c:	80 93 00 01 	sts	0x0100, r24
     590:	90 93 01 01 	sts	0x0101, r25
     594:	a0 93 02 01 	sts	0x0102, r26
     598:	b0 93 03 01 	sts	0x0103, r27
     59c:	18 c0       	rjmp	.+48     	; 0x5ce <__vector_3+0x214>
		}
		else{
			goal[0] = GateA;  // right gate
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a8 ec       	ldi	r26, 0xC8	; 200
     5a4:	b3 e4       	ldi	r27, 0x43	; 67
     5a6:	80 93 08 01 	sts	0x0108, r24
     5aa:	90 93 09 01 	sts	0x0109, r25
     5ae:	a0 93 0a 01 	sts	0x010A, r26
     5b2:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = xline;	// right defense line
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	a8 e4       	ldi	r26, 0x48	; 72
     5bc:	b3 e4       	ldi	r27, 0x43	; 67
     5be:	80 93 00 01 	sts	0x0100, r24
     5c2:	90 93 01 01 	sts	0x0101, r25
     5c6:	a0 93 02 01 	sts	0x0102, r26
     5ca:	b0 93 03 01 	sts	0x0103, r27
		}

		state = 0;
     5ce:	10 92 af 01 	sts	0x01AF, r1
     5d2:	10 92 ae 01 	sts	0x01AE, r1
		OCR1B = 0;
     5d6:	10 92 8b 00 	sts	0x008B, r1
     5da:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     5de:	10 92 8d 00 	sts	0x008D, r1
     5e2:	10 92 8c 00 	sts	0x008C, r1
		break;
     5e6:	10 c0       	rjmp	.+32     	; 0x608 <__vector_3+0x24e>
		case 0xA7:
		m_usb_tx_string("Game over\n");
     5e8:	82 ef       	ldi	r24, 0xF2	; 242
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		state = 0;
     5f0:	10 92 af 01 	sts	0x01AF, r1
     5f4:	10 92 ae 01 	sts	0x01AE, r1
		OCR1B = 0;
     5f8:	10 92 8b 00 	sts	0x008B, r1
     5fc:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     600:	10 92 8d 00 	sts	0x008D, r1
     604:	10 92 8c 00 	sts	0x008C, r1
		break;
		
		default:
		break;
	}
}
     608:	ff 91       	pop	r31
     60a:	ef 91       	pop	r30
     60c:	bf 91       	pop	r27
     60e:	af 91       	pop	r26
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	7f 91       	pop	r23
     616:	6f 91       	pop	r22
     618:	5f 91       	pop	r21
     61a:	4f 91       	pop	r20
     61c:	3f 91       	pop	r19
     61e:	2f 91       	pop	r18
     620:	0f 90       	pop	r0
     622:	0f be       	out	0x3f, r0	; 63
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	18 95       	reti

0000062a <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
     62a:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
     62c:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
     62e:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
     630:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
     632:	80 e2       	ldi	r24, 0x20	; 32
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	90 93 89 00 	sts	0x0089, r25
     63a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     63e:	10 92 8b 00 	sts	0x008B, r1
     642:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     646:	10 92 8d 00 	sts	0x008D, r1
     64a:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
     64e:	a1 e8       	ldi	r26, 0x81	; 129
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	8c 91       	ld	r24, X
     654:	80 61       	ori	r24, 0x10	; 16
     656:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
     658:	8c 91       	ld	r24, X
     65a:	88 60       	ori	r24, 0x08	; 8
     65c:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
     65e:	e0 e8       	ldi	r30, 0x80	; 128
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	82 60       	ori	r24, 0x02	; 2
     666:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     668:	80 81       	ld	r24, Z
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
     66e:	80 81       	ld	r24, Z
     670:	80 62       	ori	r24, 0x20	; 32
     672:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
     674:	80 81       	ld	r24, Z
     676:	8f 7e       	andi	r24, 0xEF	; 239
     678:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
     67a:	80 81       	ld	r24, Z
     67c:	88 60       	ori	r24, 0x08	; 8
     67e:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
     680:	80 81       	ld	r24, Z
     682:	8b 7f       	andi	r24, 0xFB	; 251
     684:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
     686:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
     688:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
     68a:	8c 91       	ld	r24, X
     68c:	8b 7f       	andi	r24, 0xFB	; 251
     68e:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
     690:	8c 91       	ld	r24, X
     692:	8d 7f       	andi	r24, 0xFD	; 253
     694:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
     696:	8c 91       	ld	r24, X
     698:	81 60       	ori	r24, 0x01	; 1
     69a:	8c 93       	st	X, r24
     69c:	08 95       	ret

0000069e <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
     69e:	e1 e6       	ldi	r30, 0x61	; 97
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	80 83       	st	Z, r24
     6a6:	10 82       	st	Z, r1
	
	state = 2;
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	90 93 af 01 	sts	0x01AF, r25
     6b0:	80 93 ae 01 	sts	0x01AE, r24
	
	m_usb_init();
     6b4:	0e 94 67 16 	call	0x2cce	; 0x2cce <m_usb_init>
	
	m_wii_open();
     6b8:	0e 94 23 19 	call	0x3246	; 0x3246 <m_wii_open>
	/*m_red(ON);
	while(!m_wii_open());
	m_red(OFF);*/
	
	m_red(ON);
     6bc:	6e 9a       	sbi	0x0d, 6	; 13
     6be:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
     6c0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
     6c4:	4a e0       	ldi	r20, 0x0A	; 10
     6c6:	6d e0       	ldi	r22, 0x0D	; 13
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <m_rf_open>
	m_red(OFF);
     6ce:	6e 9a       	sbi	0x0d, 6	; 13
     6d0:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
     6d2:	0e 94 15 03 	call	0x62a	; 0x62a <init_timer>
	init_ADC();
     6d6:	0e 94 cc 04 	call	0x998	; 0x998 <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
     6da:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
     6dc:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
     6de:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
     6e0:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
     6e2:	23 9a       	sbi	0x04, 3	; 4

	if(check(PINC, 7)){
     6e4:	37 9b       	sbis	0x06, 7	; 6
     6e6:	19 c0       	rjmp	.+50     	; 0x71a <main+0x7c>
		goal[0] = GateB;  // left gate
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	a8 ec       	ldi	r26, 0xC8	; 200
     6ee:	b3 ec       	ldi	r27, 0xC3	; 195
     6f0:	80 93 08 01 	sts	0x0108, r24
     6f4:	90 93 09 01 	sts	0x0109, r25
     6f8:	a0 93 0a 01 	sts	0x010A, r26
     6fc:	b0 93 0b 01 	sts	0x010B, r27
		desPos[0] = xline;  // right defense line
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a8 e4       	ldi	r26, 0x48	; 72
     706:	b3 e4       	ldi	r27, 0x43	; 67
     708:	80 93 00 01 	sts	0x0100, r24
     70c:	90 93 01 01 	sts	0x0101, r25
     710:	a0 93 02 01 	sts	0x0102, r26
     714:	b0 93 03 01 	sts	0x0103, r27
     718:	18 c0       	rjmp	.+48     	; 0x74a <main+0xac>
	}
	else{
		goal[0] = GateA;  // right gate
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a8 ec       	ldi	r26, 0xC8	; 200
     720:	b3 e4       	ldi	r27, 0x43	; 67
     722:	80 93 08 01 	sts	0x0108, r24
     726:	90 93 09 01 	sts	0x0109, r25
     72a:	a0 93 0a 01 	sts	0x010A, r26
     72e:	b0 93 0b 01 	sts	0x010B, r27
		desPos[0] = -xline;	// left defense line
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	a8 e4       	ldi	r26, 0x48	; 72
     738:	b3 ec       	ldi	r27, 0xC3	; 195
     73a:	80 93 00 01 	sts	0x0100, r24
     73e:	90 93 01 01 	sts	0x0101, r25
     742:	a0 93 02 01 	sts	0x0102, r26
     746:	b0 93 03 01 	sts	0x0103, r27
	}
	if(check(PINC, 6)){
     74a:	36 9b       	sbis	0x06, 6	; 6
     74c:	1c c0       	rjmp	.+56     	; 0x786 <main+0xe8>
		set(PORTB, 2); // red light
     74e:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
     750:	2b 98       	cbi	0x05, 3	; 5
			m_red(TOGGLE);
			m_wait(1000);	// wait
			break;
			
			case 2:		// play mode, find puck
			m_red(TOGGLE);
     752:	68 94       	set
     754:	bb 24       	eor	r11, r11
     756:	b6 f8       	bld	r11, 6
			m_usb_tx_int(goal[1]);
			m_usb_tx_string("\n");
			break;
			
			case 4:		// teammate got the puck, back to defense
			m_green(TOGGLE);
     758:	68 94       	set
     75a:	aa 24       	eor	r10, r10
     75c:	a2 f8       	bld	r10, 2
			m_red(TOGGLE);
			localization(&state, &desPos[0], &c_wii[0], &dir[0]);
			m_usb_tx_string("Desire Position = ");
			m_usb_tx_int(desPos[0]);
			m_usb_tx_string(", ");
			m_usb_tx_int(desPos[1]);
     75e:	0f 2e       	mov	r0, r31
     760:	f4 e0       	ldi	r31, 0x04	; 4
     762:	cf 2e       	mov	r12, r31
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	df 2e       	mov	r13, r31
     768:	f0 2d       	mov	r31, r0
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
			deterState(&state);
			m_usb_tx_string("goal = ");
			m_usb_tx_int(goal[0]);
			m_usb_tx_string(", ");
			m_usb_tx_int(goal[1]);
     76a:	0f 2e       	mov	r0, r31
     76c:	fc e0       	ldi	r31, 0x0C	; 12
     76e:	ef 2e       	mov	r14, r31
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	ff 2e       	mov	r15, r31
     774:	f0 2d       	mov	r31, r0
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
			// stop
			OCR1B = 0;
     776:	0a e8       	ldi	r16, 0x8A	; 138
     778:	10 e0       	ldi	r17, 0x00	; 0
			OCR1C = 0;
     77a:	cc e8       	ldi	r28, 0x8C	; 140
     77c:	d0 e0       	ldi	r29, 0x00	; 0
			if(check(PINC, 6)){
				toggle(PORTB, 2); // blue Red
				clear(PORTB, 3);
			}
			else{
				toggle(PORTB, 3); // red blue
     77e:	68 94       	set
     780:	99 24       	eor	r9, r9
     782:	93 f8       	bld	r9, 3
     784:	03 c0       	rjmp	.+6      	; 0x78c <main+0xee>
	if(check(PINC, 6)){
		set(PORTB, 2); // red light
		clear(PORTB, 3);
	}
	else{
		set(PORTB, 3); // blue light
     786:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
     788:	2a 98       	cbi	0x05, 2	; 5
     78a:	e3 cf       	rjmp	.-58     	; 0x752 <main+0xb4>
	}
	while(1)
	{
		m_usb_tx_string("state: ");
     78c:	86 e6       	ldi	r24, 0x66	; 102
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		m_usb_tx_int(state);
     794:	80 91 ae 01 	lds	r24, 0x01AE
     798:	90 91 af 01 	lds	r25, 0x01AF
     79c:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
		m_usb_tx_string("\n");
     7a0:	84 e6       	ldi	r24, 0x64	; 100
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		switch(state){
     7a8:	80 91 ae 01 	lds	r24, 0x01AE
     7ac:	90 91 af 01 	lds	r25, 0x01AF
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	91 05       	cpc	r25, r1
     7b4:	71 f1       	breq	.+92     	; 0x812 <main+0x174>
     7b6:	2c f4       	brge	.+10     	; 0x7c2 <main+0x124>
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	61 f0       	breq	.+24     	; 0x7d4 <main+0x136>
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	81 f0       	breq	.+32     	; 0x7e0 <main+0x142>
     7c0:	cf c0       	rjmp	.+414    	; 0x960 <main+0x2c2>
     7c2:	84 30       	cpi	r24, 0x04	; 4
     7c4:	91 05       	cpc	r25, r1
     7c6:	09 f4       	brne	.+2      	; 0x7ca <main+0x12c>
     7c8:	77 c0       	rjmp	.+238    	; 0x8b8 <main+0x21a>
     7ca:	f4 f1       	brlt	.+124    	; 0x848 <main+0x1aa>
     7cc:	05 97       	sbiw	r24, 0x05	; 5
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <main+0x134>
     7d0:	a9 c0       	rjmp	.+338    	; 0x924 <main+0x286>
     7d2:	c6 c0       	rjmp	.+396    	; 0x960 <main+0x2c2>
			case 0:
			// stop
			OCR1B = 0;
     7d4:	f8 01       	movw	r30, r16
     7d6:	11 82       	std	Z+1, r1	; 0x01
     7d8:	10 82       	st	Z, r1
			OCR1C = 0;
     7da:	19 82       	std	Y+1, r1	; 0x01
     7dc:	18 82       	st	Y, r1
			break;
     7de:	c0 c0       	rjmp	.+384    	; 0x960 <main+0x2c2>
			
			case 1:		// comm test, flash a LED
			if(check(PINC, 6)){
     7e0:	36 9b       	sbis	0x06, 6	; 6
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <main+0x150>
				toggle(PORTB, 2); // blue Red
     7e4:	85 b1       	in	r24, 0x05	; 5
     7e6:	8a 25       	eor	r24, r10
     7e8:	85 b9       	out	0x05, r24	; 5
				clear(PORTB, 3);
     7ea:	2b 98       	cbi	0x05, 3	; 5
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <main+0x158>
			}
			else{
				toggle(PORTB, 3); // red blue
     7ee:	85 b1       	in	r24, 0x05	; 5
     7f0:	89 25       	eor	r24, r9
     7f2:	85 b9       	out	0x05, r24	; 5
				clear(PORTB, 2);
     7f4:	2a 98       	cbi	0x05, 2	; 5
			}
			m_red(TOGGLE);
     7f6:	6e 9a       	sbi	0x0d, 6	; 13
     7f8:	8e b1       	in	r24, 0x0e	; 14
     7fa:	8b 25       	eor	r24, r11
     7fc:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fe:	ff e3       	ldi	r31, 0x3F	; 63
     800:	2d e0       	ldi	r18, 0x0D	; 13
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	f1 50       	subi	r31, 0x01	; 1
     806:	20 40       	sbci	r18, 0x00	; 0
     808:	80 40       	sbci	r24, 0x00	; 0
     80a:	e1 f7       	brne	.-8      	; 0x804 <main+0x166>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <main+0x170>
     80e:	00 00       	nop
     810:	a7 c0       	rjmp	.+334    	; 0x960 <main+0x2c2>
			m_wait(1000);	// wait
			break;
			
			case 2:		// play mode, find puck
			m_red(TOGGLE);
     812:	6e 9a       	sbi	0x0d, 6	; 13
     814:	8e b1       	in	r24, 0x0e	; 14
     816:	8b 25       	eor	r24, r11
     818:	8e b9       	out	0x0e, r24	; 14
			m_green(OFF);
     81a:	6a 9a       	sbi	0x0d, 2	; 13
     81c:	72 9a       	sbi	0x0e, 2	; 14
			findPuck(state);
     81e:	80 91 ae 01 	lds	r24, 0x01AE
     822:	90 91 af 01 	lds	r25, 0x01AF
     826:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <findPuck>
			deterState(&state);
     82a:	8e ea       	ldi	r24, 0xAE	; 174
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <deterState>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
     832:	2c e3       	ldi	r18, 0x3C	; 60
     834:	31 e0       	ldi	r19, 0x01	; 1
     836:	44 e4       	ldi	r20, 0x44	; 68
     838:	51 e0       	ldi	r21, 0x01	; 1
     83a:	68 e0       	ldi	r22, 0x08	; 8
     83c:	71 e0       	ldi	r23, 0x01	; 1
     83e:	8e ea       	ldi	r24, 0xAE	; 174
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <localization>
			break;
     846:	8c c0       	rjmp	.+280    	; 0x960 <main+0x2c2>
			
			case 3:		// got the puck, find goal
			m_green(TOGGLE);
     848:	6a 9a       	sbi	0x0d, 2	; 13
     84a:	8e b1       	in	r24, 0x0e	; 14
     84c:	8a 25       	eor	r24, r10
     84e:	8e b9       	out	0x0e, r24	; 14
			m_red(OFF);
     850:	6e 9a       	sbi	0x0d, 6	; 13
     852:	76 9a       	sbi	0x0e, 6	; 14
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
     854:	2c e3       	ldi	r18, 0x3C	; 60
     856:	31 e0       	ldi	r19, 0x01	; 1
     858:	44 e4       	ldi	r20, 0x44	; 68
     85a:	51 e0       	ldi	r21, 0x01	; 1
     85c:	68 e0       	ldi	r22, 0x08	; 8
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	8e ea       	ldi	r24, 0xAE	; 174
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <localization>
			deterState(&state);
     868:	8e ea       	ldi	r24, 0xAE	; 174
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <deterState>
			m_usb_tx_string("goal = ");
     870:	8c e5       	ldi	r24, 0x5C	; 92
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
			m_usb_tx_int(goal[0]);
     878:	60 91 08 01 	lds	r22, 0x0108
     87c:	70 91 09 01 	lds	r23, 0x0109
     880:	80 91 0a 01 	lds	r24, 0x010A
     884:	90 91 0b 01 	lds	r25, 0x010B
     888:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
     88c:	cb 01       	movw	r24, r22
     88e:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
			m_usb_tx_string(", ");
     892:	89 e5       	ldi	r24, 0x59	; 89
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
			m_usb_tx_int(goal[1]);
     89a:	f7 01       	movw	r30, r14
     89c:	60 81       	ld	r22, Z
     89e:	71 81       	ldd	r23, Z+1	; 0x01
     8a0:	82 81       	ldd	r24, Z+2	; 0x02
     8a2:	93 81       	ldd	r25, Z+3	; 0x03
     8a4:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
     8a8:	cb 01       	movw	r24, r22
     8aa:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
			m_usb_tx_string("\n");
     8ae:	87 e5       	ldi	r24, 0x57	; 87
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
			break;
     8b6:	54 c0       	rjmp	.+168    	; 0x960 <main+0x2c2>
			
			case 4:		// teammate got the puck, back to defense
			m_green(TOGGLE);
     8b8:	6a 9a       	sbi	0x0d, 2	; 13
     8ba:	8e b1       	in	r24, 0x0e	; 14
     8bc:	8a 25       	eor	r24, r10
     8be:	8e b9       	out	0x0e, r24	; 14
			m_red(TOGGLE);
     8c0:	6e 9a       	sbi	0x0d, 6	; 13
     8c2:	8e b1       	in	r24, 0x0e	; 14
     8c4:	8b 25       	eor	r24, r11
     8c6:	8e b9       	out	0x0e, r24	; 14
			localization(&state, &desPos[0], &c_wii[0], &dir[0]);
     8c8:	2c e3       	ldi	r18, 0x3C	; 60
     8ca:	31 e0       	ldi	r19, 0x01	; 1
     8cc:	44 e4       	ldi	r20, 0x44	; 68
     8ce:	51 e0       	ldi	r21, 0x01	; 1
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	71 e0       	ldi	r23, 0x01	; 1
     8d4:	8e ea       	ldi	r24, 0xAE	; 174
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <localization>
			m_usb_tx_string("Desire Position = ");
     8dc:	84 e4       	ldi	r24, 0x44	; 68
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
			m_usb_tx_int(desPos[0]);
     8e4:	60 91 00 01 	lds	r22, 0x0100
     8e8:	70 91 01 01 	lds	r23, 0x0101
     8ec:	80 91 02 01 	lds	r24, 0x0102
     8f0:	90 91 03 01 	lds	r25, 0x0103
     8f4:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
     8f8:	cb 01       	movw	r24, r22
     8fa:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
			m_usb_tx_string(", ");
     8fe:	81 e4       	ldi	r24, 0x41	; 65
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
			m_usb_tx_int(desPos[1]);
     906:	f6 01       	movw	r30, r12
     908:	60 81       	ld	r22, Z
     90a:	71 81       	ldd	r23, Z+1	; 0x01
     90c:	82 81       	ldd	r24, Z+2	; 0x02
     90e:	93 81       	ldd	r25, Z+3	; 0x03
     910:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
     914:	cb 01       	movw	r24, r22
     916:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
			m_usb_tx_string("\n");
     91a:	8f e3       	ldi	r24, 0x3F	; 63
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
			break;
     922:	1e c0       	rjmp	.+60     	; 0x960 <main+0x2c2>
			
			case 5:		// defense mode
			m_red(TOGGLE);
     924:	6e 9a       	sbi	0x0d, 6	; 13
     926:	8e b1       	in	r24, 0x0e	; 14
     928:	8b 25       	eor	r24, r11
     92a:	8e b9       	out	0x0e, r24	; 14
			m_green(TOGGLE);
     92c:	6a 9a       	sbi	0x0d, 2	; 13
     92e:	8e b1       	in	r24, 0x0e	; 14
     930:	8a 25       	eor	r24, r10
     932:	8e b9       	out	0x0e, r24	; 14
			findPuck(state);
     934:	80 91 ae 01 	lds	r24, 0x01AE
     938:	90 91 af 01 	lds	r25, 0x01AF
     93c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <findPuck>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
     940:	2c e3       	ldi	r18, 0x3C	; 60
     942:	31 e0       	ldi	r19, 0x01	; 1
     944:	44 e4       	ldi	r20, 0x44	; 68
     946:	51 e0       	ldi	r21, 0x01	; 1
     948:	68 e0       	ldi	r22, 0x08	; 8
     94a:	71 e0       	ldi	r23, 0x01	; 1
     94c:	8e ea       	ldi	r24, 0xAE	; 174
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <localization>
			ifGotoPuck(&state, &dir[0]);
     954:	6c e3       	ldi	r22, 0x3C	; 60
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	8e ea       	ldi	r24, 0xAE	; 174
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 97 09 	call	0x132e	; 0x132e <ifGotoPuck>
			
			default:
			break;
		}
		
		m_usb_tx_string("1B, 1C: ");
     960:	86 e3       	ldi	r24, 0x36	; 54
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		m_usb_tx_int(OCR1B);
     968:	f8 01       	movw	r30, r16
     96a:	80 81       	ld	r24, Z
     96c:	91 81       	ldd	r25, Z+1	; 0x01
     96e:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
		m_usb_tx_string(", ");
     972:	83 e3       	ldi	r24, 0x33	; 51
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		m_usb_tx_int(OCR1C);
     97a:	88 81       	ld	r24, Y
     97c:	99 81       	ldd	r25, Y+1	; 0x01
     97e:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
		m_usb_tx_string("\n");
     982:	81 e3       	ldi	r24, 0x31	; 49
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
     98a:	85 ea       	ldi	r24, 0xA5	; 165
     98c:	9e e0       	ldi	r25, 0x0E	; 14
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <main+0x2f0>
     992:	00 c0       	rjmp	.+0      	; 0x994 <main+0x2f6>
     994:	00 00       	nop
     996:	fa ce       	rjmp	.-524    	; 0x78c <main+0xee>

00000998 <init_ADC>:
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     99c:	ac e7       	ldi	r26, 0x7C	; 124
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	8c 91       	ld	r24, X
     9a2:	8f 77       	andi	r24, 0x7F	; 127
     9a4:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     9a6:	8c 91       	ld	r24, X
     9a8:	80 64       	ori	r24, 0x40	; 64
     9aa:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     9ac:	ea e7       	ldi	r30, 0x7A	; 122
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	84 60       	ori	r24, 0x04	; 4
     9b4:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     9b6:	80 81       	ld	r24, Z
     9b8:	82 60       	ori	r24, 0x02	; 2
     9ba:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     9bc:	80 81       	ld	r24, Z
     9be:	81 60       	ori	r24, 0x01	; 1
     9c0:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     9c2:	ce e7       	ldi	r28, 0x7E	; 126
     9c4:	d0 e0       	ldi	r29, 0x00	; 0
     9c6:	88 81       	ld	r24, Y
     9c8:	81 60       	ori	r24, 0x01	; 1
     9ca:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     9cc:	88 81       	ld	r24, Y
     9ce:	82 60       	ori	r24, 0x02	; 2
     9d0:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     9d2:	cd e7       	ldi	r28, 0x7D	; 125
     9d4:	d0 e0       	ldi	r29, 0x00	; 0
     9d6:	88 81       	ld	r24, Y
     9d8:	82 60       	ori	r24, 0x02	; 2
     9da:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     9dc:	88 81       	ld	r24, Y
     9de:	84 60       	ori	r24, 0x04	; 4
     9e0:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     9e2:	88 81       	ld	r24, Y
     9e4:	88 60       	ori	r24, 0x08	; 8
     9e6:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     9e8:	88 81       	ld	r24, Y
     9ea:	80 61       	ori	r24, 0x10	; 16
     9ec:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     9ee:	88 81       	ld	r24, Y
     9f0:	81 60       	ori	r24, 0x01	; 1
     9f2:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     9f4:	cb e7       	ldi	r28, 0x7B	; 123
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
     9f8:	88 81       	ld	r24, Y
     9fa:	8f 7d       	andi	r24, 0xDF	; 223
     9fc:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     9fe:	8c 91       	ld	r24, X
     a00:	8b 7f       	andi	r24, 0xFB	; 251
     a02:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     a04:	8c 91       	ld	r24, X
     a06:	8d 7f       	andi	r24, 0xFD	; 253
     a08:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     a0a:	8c 91       	ld	r24, X
     a0c:	8e 7f       	andi	r24, 0xFE	; 254
     a0e:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     a10:	80 81       	ld	r24, Z
     a12:	80 62       	ori	r24, 0x20	; 32
     a14:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     a16:	80 81       	ld	r24, Z
     a18:	88 60       	ori	r24, 0x08	; 8
     a1a:	80 83       	st	Z, r24
	sei();
     a1c:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     a1e:	80 81       	ld	r24, Z
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     a24:	80 81       	ld	r24, Z
     a26:	80 64       	ori	r24, 0x40	; 64
     a28:	80 83       	st	Z, r24
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <PID_Pho>:
			break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	6b 01       	movw	r12, r22
     a4a:	7c 01       	movw	r14, r24
     a4c:	49 01       	movw	r8, r18
     a4e:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     a50:	c0 91 64 01 	lds	r28, 0x0164
     a54:	d0 91 65 01 	lds	r29, 0x0165
     a58:	80 91 68 01 	lds	r24, 0x0168
     a5c:	90 91 69 01 	lds	r25, 0x0169
     a60:	c8 0f       	add	r28, r24
     a62:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     a64:	20 91 66 01 	lds	r18, 0x0166
     a68:	30 91 67 01 	lds	r19, 0x0167
     a6c:	80 91 6a 01 	lds	r24, 0x016A
     a70:	90 91 6b 01 	lds	r25, 0x016B
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     a78:	c8 1b       	sub	r28, r24
     a7a:	d9 0b       	sbc	r29, r25
     a7c:	d0 93 b3 01 	sts	0x01B3, r29
     a80:	c0 93 b2 01 	sts	0x01B2, r28
	diff_Pho = input - input_last;
     a84:	80 91 60 01 	lds	r24, 0x0160
     a88:	90 91 61 01 	lds	r25, 0x0161
     a8c:	8e 01       	movw	r16, r28
     a8e:	08 1b       	sub	r16, r24
     a90:	19 0b       	sbc	r17, r25
     a92:	10 93 5d 01 	sts	0x015D, r17
     a96:	00 93 5c 01 	sts	0x015C, r16
	sum_Pho = sum_Pho + input;
     a9a:	80 91 5e 01 	lds	r24, 0x015E
     a9e:	90 91 5f 01 	lds	r25, 0x015F
     aa2:	8c 0f       	add	r24, r28
     aa4:	9d 1f       	adc	r25, r29
     aa6:	90 93 5f 01 	sts	0x015F, r25
     aaa:	80 93 5e 01 	sts	0x015E, r24
	output = Kp * input + Kd * diff_Pho;
     aae:	be 01       	movw	r22, r28
     ab0:	88 27       	eor	r24, r24
     ab2:	77 fd       	sbrc	r23, 7
     ab4:	80 95       	com	r24
     ab6:	98 2f       	mov	r25, r24
     ab8:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
     abc:	a7 01       	movw	r20, r14
     abe:	96 01       	movw	r18, r12
     ac0:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
     ac4:	6b 01       	movw	r12, r22
     ac6:	7c 01       	movw	r14, r24
     ac8:	b8 01       	movw	r22, r16
     aca:	88 27       	eor	r24, r24
     acc:	77 fd       	sbrc	r23, 7
     ace:	80 95       	com	r24
     ad0:	98 2f       	mov	r25, r24
     ad2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
     ad6:	a5 01       	movw	r20, r10
     ad8:	94 01       	movw	r18, r8
     ada:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
     ade:	9b 01       	movw	r18, r22
     ae0:	ac 01       	movw	r20, r24
     ae2:	c7 01       	movw	r24, r14
     ae4:	b6 01       	movw	r22, r12
     ae6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
     aea:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
     aee:	70 93 b1 01 	sts	0x01B1, r23
     af2:	60 93 b0 01 	sts	0x01B0, r22
	
	input_last = input;
     af6:	d0 93 61 01 	sts	0x0161, r29
     afa:	c0 93 60 01 	sts	0x0160, r28
	
	if(output>0){
     afe:	16 16       	cp	r1, r22
     b00:	17 06       	cpc	r1, r23
     b02:	74 f5       	brge	.+92     	; 0xb60 <__stack+0x61>
		OCR1C = full_speed - abs(output);
     b04:	9b 01       	movw	r18, r22
     b06:	77 23       	and	r23, r23
     b08:	24 f4       	brge	.+8      	; 0xb12 <__stack+0x13>
     b0a:	22 27       	eor	r18, r18
     b0c:	33 27       	eor	r19, r19
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	8a e8       	ldi	r24, 0x8A	; 138
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	82 1b       	sub	r24, r18
     b18:	93 0b       	sbc	r25, r19
     b1a:	90 93 8d 00 	sts	0x008D, r25
     b1e:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     b22:	20 91 10 01 	lds	r18, 0x0110
     b26:	30 91 11 01 	lds	r19, 0x0111
     b2a:	80 91 b0 01 	lds	r24, 0x01B0
     b2e:	90 91 b1 01 	lds	r25, 0x01B1
     b32:	99 23       	and	r25, r25
     b34:	1c f4       	brge	.+6      	; 0xb3c <__stack+0x3d>
     b36:	91 95       	neg	r25
     b38:	81 95       	neg	r24
     b3a:	91 09       	sbc	r25, r1
     b3c:	28 17       	cp	r18, r24
     b3e:	39 07       	cpc	r19, r25
     b40:	44 f4       	brge	.+16     	; 0xb52 <__stack+0x53>
			OCR1C = full_speed - speed_diff_Pho;
     b42:	8a e8       	ldi	r24, 0x8A	; 138
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	82 1b       	sub	r24, r18
     b48:	93 0b       	sbc	r25, r19
     b4a:	90 93 8d 00 	sts	0x008D, r25
     b4e:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     b52:	8a e8       	ldi	r24, 0x8A	; 138
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	90 93 8b 00 	sts	0x008B, r25
     b5a:	80 93 8a 00 	sts	0x008A, r24
     b5e:	2d c0       	rjmp	.+90     	; 0xbba <__stack+0xbb>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     b60:	9b 01       	movw	r18, r22
     b62:	77 23       	and	r23, r23
     b64:	24 f4       	brge	.+8      	; 0xb6e <__stack+0x6f>
     b66:	22 27       	eor	r18, r18
     b68:	33 27       	eor	r19, r19
     b6a:	26 1b       	sub	r18, r22
     b6c:	37 0b       	sbc	r19, r23
     b6e:	8a e8       	ldi	r24, 0x8A	; 138
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	82 1b       	sub	r24, r18
     b74:	93 0b       	sbc	r25, r19
     b76:	90 93 8b 00 	sts	0x008B, r25
     b7a:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     b7e:	20 91 10 01 	lds	r18, 0x0110
     b82:	30 91 11 01 	lds	r19, 0x0111
     b86:	80 91 b0 01 	lds	r24, 0x01B0
     b8a:	90 91 b1 01 	lds	r25, 0x01B1
     b8e:	99 23       	and	r25, r25
     b90:	1c f4       	brge	.+6      	; 0xb98 <__stack+0x99>
     b92:	91 95       	neg	r25
     b94:	81 95       	neg	r24
     b96:	91 09       	sbc	r25, r1
     b98:	28 17       	cp	r18, r24
     b9a:	39 07       	cpc	r19, r25
     b9c:	44 f4       	brge	.+16     	; 0xbae <__stack+0xaf>
			OCR1B = full_speed - speed_diff_Pho;
     b9e:	8a e8       	ldi	r24, 0x8A	; 138
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	82 1b       	sub	r24, r18
     ba4:	93 0b       	sbc	r25, r19
     ba6:	90 93 8b 00 	sts	0x008B, r25
     baa:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     bae:	8a e8       	ldi	r24, 0x8A	; 138
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	90 93 8d 00 	sts	0x008D, r25
     bb6:	80 93 8c 00 	sts	0x008C, r24
	}
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	bf 90       	pop	r11
     bcc:	af 90       	pop	r10
     bce:	9f 90       	pop	r9
     bd0:	8f 90       	pop	r8
     bd2:	08 95       	ret

00000bd4 <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	6b 01       	movw	r12, r22
     bee:	7c 01       	movw	r14, r24
     bf0:	49 01       	movw	r8, r18
     bf2:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     bf4:	c0 91 64 01 	lds	r28, 0x0164
     bf8:	d0 91 65 01 	lds	r29, 0x0165
     bfc:	80 91 68 01 	lds	r24, 0x0168
     c00:	90 91 69 01 	lds	r25, 0x0169
     c04:	c8 0f       	add	r28, r24
     c06:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     c08:	20 91 66 01 	lds	r18, 0x0166
     c0c:	30 91 67 01 	lds	r19, 0x0167
     c10:	80 91 6a 01 	lds	r24, 0x016A
     c14:	90 91 6b 01 	lds	r25, 0x016B
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     c1c:	c8 1b       	sub	r28, r24
     c1e:	d9 0b       	sbc	r29, r25
     c20:	d0 93 b3 01 	sts	0x01B3, r29
     c24:	c0 93 b2 01 	sts	0x01B2, r28
	diff_stalk = input - input_last;
     c28:	80 91 60 01 	lds	r24, 0x0160
     c2c:	90 91 61 01 	lds	r25, 0x0161
     c30:	8e 01       	movw	r16, r28
     c32:	08 1b       	sub	r16, r24
     c34:	19 0b       	sbc	r17, r25
     c36:	10 93 5b 01 	sts	0x015B, r17
     c3a:	00 93 5a 01 	sts	0x015A, r16
	output = Kp * input + Kd * diff_stalk;
     c3e:	be 01       	movw	r22, r28
     c40:	88 27       	eor	r24, r24
     c42:	77 fd       	sbrc	r23, 7
     c44:	80 95       	com	r24
     c46:	98 2f       	mov	r25, r24
     c48:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
     c4c:	a7 01       	movw	r20, r14
     c4e:	96 01       	movw	r18, r12
     c50:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
     c54:	6b 01       	movw	r12, r22
     c56:	7c 01       	movw	r14, r24
     c58:	b8 01       	movw	r22, r16
     c5a:	88 27       	eor	r24, r24
     c5c:	77 fd       	sbrc	r23, 7
     c5e:	80 95       	com	r24
     c60:	98 2f       	mov	r25, r24
     c62:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
     c66:	a5 01       	movw	r20, r10
     c68:	94 01       	movw	r18, r8
     c6a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
     c7a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
     c7e:	70 93 b1 01 	sts	0x01B1, r23
     c82:	60 93 b0 01 	sts	0x01B0, r22
	
	input_last = input;
     c86:	d0 93 61 01 	sts	0x0161, r29
     c8a:	c0 93 60 01 	sts	0x0160, r28
	
	if(abs(output) >= full_speed_stalk){
     c8e:	9b 01       	movw	r18, r22
     c90:	77 23       	and	r23, r23
     c92:	24 f4       	brge	.+8      	; 0xc9c <PID_stalk+0xc8>
     c94:	22 27       	eor	r18, r18
     c96:	33 27       	eor	r19, r19
     c98:	26 1b       	sub	r18, r22
     c9a:	37 0b       	sbc	r19, r23
     c9c:	2a 38       	cpi	r18, 0x8A	; 138
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	38 07       	cpc	r19, r24
     ca2:	5c f0       	brlt	.+22     	; 0xcba <PID_stalk+0xe6>
		OCR1C = full_speed_stalk;
     ca4:	8a e8       	ldi	r24, 0x8A	; 138
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	90 93 8d 00 	sts	0x008D, r25
     cac:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     cb0:	90 93 8b 00 	sts	0x008B, r25
     cb4:	80 93 8a 00 	sts	0x008A, r24
     cb8:	11 c0       	rjmp	.+34     	; 0xcdc <PID_stalk+0x108>
	}
	else{
		OCR1C = abs(output);
     cba:	30 93 8d 00 	sts	0x008D, r19
     cbe:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     cc2:	80 91 b0 01 	lds	r24, 0x01B0
     cc6:	90 91 b1 01 	lds	r25, 0x01B1
     cca:	99 23       	and	r25, r25
     ccc:	1c f4       	brge	.+6      	; 0xcd4 <PID_stalk+0x100>
     cce:	91 95       	neg	r25
     cd0:	81 95       	neg	r24
     cd2:	91 09       	sbc	r25, r1
     cd4:	90 93 8b 00 	sts	0x008B, r25
     cd8:	80 93 8a 00 	sts	0x008A, r24
	}
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	08 95       	ret

00000cf6 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     cf6:	6f 92       	push	r6
     cf8:	7f 92       	push	r7
     cfa:	8f 92       	push	r8
     cfc:	9f 92       	push	r9
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	5c 01       	movw	r10, r24
	m_usb_tx_string("\r\n");
     d14:	86 e2       	ldi	r24, 0x26	; 38
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("Pho[0]");
     d1c:	8f e1       	ldi	r24, 0x1F	; 31
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(Pho[0]);
     d24:	0f 2e       	mov	r0, r31
     d26:	f4 e6       	ldi	r31, 0x64	; 100
     d28:	8f 2e       	mov	r8, r31
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	9f 2e       	mov	r9, r31
     d2e:	f0 2d       	mov	r31, r0
     d30:	f4 01       	movw	r30, r8
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d3a:	8c e1       	ldi	r24, 0x1C	; 28
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("Pho[1]");
     d42:	85 e1       	ldi	r24, 0x15	; 21
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(Pho[1]);
     d4a:	06 e6       	ldi	r16, 0x66	; 102
     d4c:	11 e0       	ldi	r17, 0x01	; 1
     d4e:	f8 01       	movw	r30, r16
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d58:	82 e1       	ldi	r24, 0x12	; 18
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("Pho[2]");
     d60:	8b e0       	ldi	r24, 0x0B	; 11
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(Pho[2]);
     d68:	0f 2e       	mov	r0, r31
     d6a:	f8 e6       	ldi	r31, 0x68	; 104
     d6c:	cf 2e       	mov	r12, r31
     d6e:	f1 e0       	ldi	r31, 0x01	; 1
     d70:	df 2e       	mov	r13, r31
     d72:	f0 2d       	mov	r31, r0
     d74:	f6 01       	movw	r30, r12
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d7e:	88 e0       	ldi	r24, 0x08	; 8
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("Pho[3]");
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(Pho[3]);
     d8e:	ca e6       	ldi	r28, 0x6A	; 106
     d90:	d1 e0       	ldi	r29, 0x01	; 1
     d92:	88 81       	ld	r24, Y
     d94:	99 81       	ldd	r25, Y+1	; 0x01
     d96:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d9a:	8e ef       	ldi	r24, 0xFE	; 254
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("Pho[4]");
     da2:	87 ef       	ldi	r24, 0xF7	; 247
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(Pho[4]);
     daa:	0f 2e       	mov	r0, r31
     dac:	fc e6       	ldi	r31, 0x6C	; 108
     dae:	ef 2e       	mov	r14, r31
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	ff 2e       	mov	r15, r31
     db4:	f0 2d       	mov	r31, r0
     db6:	f7 01       	movw	r30, r14
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     dc0:	84 ef       	ldi	r24, 0xF4	; 244
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("Pho[5]");
     dc8:	8d ee       	ldi	r24, 0xED	; 237
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(Pho[5]);
     dd0:	0f 2e       	mov	r0, r31
     dd2:	fe e6       	ldi	r31, 0x6E	; 110
     dd4:	6f 2e       	mov	r6, r31
     dd6:	f1 e0       	ldi	r31, 0x01	; 1
     dd8:	7f 2e       	mov	r7, r31
     dda:	f0 2d       	mov	r31, r0
     ddc:	f3 01       	movw	r30, r6
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     de6:	8a ee       	ldi	r24, 0xEA	; 234
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("Pho[6]");
     dee:	83 ee       	ldi	r24, 0xE3	; 227
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(Pho[6]);
     df6:	80 91 70 01 	lds	r24, 0x0170
     dfa:	90 91 71 01 	lds	r25, 0x0171
     dfe:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     e02:	80 ee       	ldi	r24, 0xE0	; 224
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_string("\r\n");
     e0a:	8d ed       	ldi	r24, 0xDD	; 221
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     e12:	f4 01       	movw	r30, r8
     e14:	20 81       	ld	r18, Z
     e16:	31 81       	ldd	r19, Z+1	; 0x01
     e18:	f6 01       	movw	r30, r12
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	82 0f       	add	r24, r18
     e20:	93 1f       	adc	r25, r19
     e22:	f7 01       	movw	r30, r14
     e24:	20 81       	ld	r18, Z
     e26:	31 81       	ldd	r19, Z+1	; 0x01
     e28:	82 0f       	add	r24, r18
     e2a:	93 1f       	adc	r25, r19
     e2c:	23 e0       	ldi	r18, 0x03	; 3
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	b9 01       	movw	r22, r18
     e32:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
     e36:	7b 01       	movw	r14, r22
     e38:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     e3a:	f8 01       	movw	r30, r16
     e3c:	40 81       	ld	r20, Z
     e3e:	51 81       	ldd	r21, Z+1	; 0x01
     e40:	88 81       	ld	r24, Y
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	84 0f       	add	r24, r20
     e46:	95 1f       	adc	r25, r21
     e48:	f3 01       	movw	r30, r6
     e4a:	40 81       	ld	r20, Z
     e4c:	51 81       	ldd	r21, Z+1	; 0x01
     e4e:	84 0f       	add	r24, r20
     e50:	95 1f       	adc	r25, r21
     e52:	b9 01       	movw	r22, r18
     e54:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
     e58:	eb 01       	movw	r28, r22
     e5a:	8b 01       	movw	r16, r22
	
	m_usb_tx_string("mean024, mean135: ");
     e5c:	8a ec       	ldi	r24, 0xCA	; 202
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(mean024);
     e64:	c7 01       	movw	r24, r14
     e66:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string(", ");
     e6a:	87 ec       	ldi	r24, 0xC7	; 199
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(mean135);
     e72:	ce 01       	movw	r24, r28
     e74:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
     e78:	85 ec       	ldi	r24, 0xC5	; 197
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	switch(state){
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	af 16       	cp	r10, r31
     e84:	b1 04       	cpc	r11, r1
     e86:	31 f0       	breq	.+12     	; 0xe94 <findPuck+0x19e>
     e88:	45 e0       	ldi	r20, 0x05	; 5
     e8a:	a4 16       	cp	r10, r20
     e8c:	b1 04       	cpc	r11, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <findPuck+0x19c>
     e90:	bb c0       	rjmp	.+374    	; 0x1008 <findPuck+0x312>
     e92:	10 c1       	rjmp	.+544    	; 0x10b4 <findPuck+0x3be>
		case 2:
			if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     e94:	c7 01       	movw	r24, r14
     e96:	8c 1b       	sub	r24, r28
     e98:	9d 0b       	sbc	r25, r29
     e9a:	c3 97       	sbiw	r24, 0x33	; 51
     e9c:	84 f4       	brge	.+32     	; 0xebe <findPuck+0x1c8>
     e9e:	ce 15       	cp	r28, r14
     ea0:	df 05       	cpc	r29, r15
     ea2:	0c f0       	brlt	.+2      	; 0xea6 <findPuck+0x1b0>
     ea4:	50 c0       	rjmp	.+160    	; 0xf46 <findPuck+0x250>
     ea6:	20 91 6c 01 	lds	r18, 0x016C
     eaa:	30 91 6d 01 	lds	r19, 0x016D
     eae:	80 91 68 01 	lds	r24, 0x0168
     eb2:	90 91 69 01 	lds	r25, 0x0169
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	0c f0       	brlt	.+2      	; 0xebe <findPuck+0x1c8>
     ebc:	44 c0       	rjmp	.+136    	; 0xf46 <findPuck+0x250>
				m_usb_tx_string("turn left\n");
     ebe:	8a eb       	ldi	r24, 0xBA	; 186
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
				if(mean024 > revThres){
     ec6:	59 e9       	ldi	r21, 0x99	; 153
     ec8:	c5 16       	cp	r12, r21
     eca:	58 e0       	ldi	r21, 0x08	; 8
     ecc:	d5 06       	cpc	r13, r21
     ece:	6c f0       	brlt	.+26     	; 0xeea <findPuck+0x1f4>
					set(PORTB, 0);
     ed0:	28 9a       	sbi	0x05, 0	; 5
					clear(PORTB, 1);
     ed2:	29 98       	cbi	0x05, 1	; 5
					OCR1C = full_speed;
     ed4:	8a e8       	ldi	r24, 0x8A	; 138
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	90 93 8d 00 	sts	0x008D, r25
     edc:	80 93 8c 00 	sts	0x008C, r24
					OCR1B = full_speed;
     ee0:	90 93 8b 00 	sts	0x008B, r25
     ee4:	80 93 8a 00 	sts	0x008A, r24
     ee8:	e5 c0       	rjmp	.+458    	; 0x10b4 <findPuck+0x3be>
				}
				else{
					set(PORTB, 0);
     eea:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     eec:	29 9a       	sbi	0x05, 1	; 5
					OCR1C = full_speed - speed_diff_Pho;
     eee:	8a e8       	ldi	r24, 0x8A	; 138
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	20 91 10 01 	lds	r18, 0x0110
     ef6:	30 91 11 01 	lds	r19, 0x0111
     efa:	fc 01       	movw	r30, r24
     efc:	e2 1b       	sub	r30, r18
     efe:	f3 0b       	sbc	r31, r19
     f00:	f0 93 8d 00 	sts	0x008D, r31
     f04:	e0 93 8c 00 	sts	0x008C, r30
					OCR1B = full_speed;
     f08:	90 93 8b 00 	sts	0x008B, r25
     f0c:	80 93 8a 00 	sts	0x008A, r24
					if(Pho[2]>Pho[4]){
     f10:	20 91 68 01 	lds	r18, 0x0168
     f14:	30 91 69 01 	lds	r19, 0x0169
     f18:	80 91 6c 01 	lds	r24, 0x016C
     f1c:	90 91 6d 01 	lds	r25, 0x016D
     f20:	82 17       	cp	r24, r18
     f22:	93 07       	cpc	r25, r19
     f24:	0c f0       	brlt	.+2      	; 0xf28 <findPuck+0x232>
     f26:	c6 c0       	rjmp	.+396    	; 0x10b4 <findPuck+0x3be>
						m_usb_tx_string("PID\n");
     f28:	85 eb       	ldi	r24, 0xB5	; 181
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e7       	ldi	r20, 0x70	; 112
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	6a e9       	ldi	r22, 0x9A	; 154
     f3a:	79 e9       	ldi	r23, 0x99	; 153
     f3c:	89 e9       	ldi	r24, 0x99	; 153
     f3e:	9e e3       	ldi	r25, 0x3E	; 62
     f40:	0e 94 18 05 	call	0xa30	; 0xa30 <PID_Pho>
     f44:	b7 c0       	rjmp	.+366    	; 0x10b4 <findPuck+0x3be>
					}
				}
			}
		
			else {
				if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     f46:	ce 19       	sub	r28, r14
     f48:	df 09       	sbc	r29, r15
     f4a:	e3 97       	sbiw	r28, 0x33	; 51
     f4c:	84 f4       	brge	.+32     	; 0xf6e <findPuck+0x278>
     f4e:	c0 16       	cp	r12, r16
     f50:	d1 06       	cpc	r13, r17
     f52:	0c f0       	brlt	.+2      	; 0xf56 <findPuck+0x260>
     f54:	4e c0       	rjmp	.+156    	; 0xff2 <findPuck+0x2fc>
     f56:	20 91 6e 01 	lds	r18, 0x016E
     f5a:	30 91 6f 01 	lds	r19, 0x016F
     f5e:	80 91 6a 01 	lds	r24, 0x016A
     f62:	90 91 6b 01 	lds	r25, 0x016B
     f66:	82 17       	cp	r24, r18
     f68:	93 07       	cpc	r25, r19
     f6a:	0c f0       	brlt	.+2      	; 0xf6e <findPuck+0x278>
     f6c:	42 c0       	rjmp	.+132    	; 0xff2 <findPuck+0x2fc>
					m_usb_tx_string("turn right\n");
     f6e:	89 ea       	ldi	r24, 0xA9	; 169
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
					if(mean135 > revThres){
     f76:	09 39       	cpi	r16, 0x99	; 153
     f78:	18 40       	sbci	r17, 0x08	; 8
     f7a:	6c f0       	brlt	.+26     	; 0xf96 <findPuck+0x2a0>
						set(PORTB, 1);
     f7c:	29 9a       	sbi	0x05, 1	; 5
						clear(PORTB, 0);
     f7e:	28 98       	cbi	0x05, 0	; 5
						OCR1B = full_speed;
     f80:	8a e8       	ldi	r24, 0x8A	; 138
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	90 93 8b 00 	sts	0x008B, r25
     f88:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed;
     f8c:	90 93 8d 00 	sts	0x008D, r25
     f90:	80 93 8c 00 	sts	0x008C, r24
     f94:	8f c0       	rjmp	.+286    	; 0x10b4 <findPuck+0x3be>
					}
					else{
						set(PORTB, 0);
     f96:	28 9a       	sbi	0x05, 0	; 5
						set(PORTB, 1);
     f98:	29 9a       	sbi	0x05, 1	; 5
						OCR1B = full_speed - speed_diff_Pho;
     f9a:	8a e8       	ldi	r24, 0x8A	; 138
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	20 91 10 01 	lds	r18, 0x0110
     fa2:	30 91 11 01 	lds	r19, 0x0111
     fa6:	ac 01       	movw	r20, r24
     fa8:	42 1b       	sub	r20, r18
     faa:	53 0b       	sbc	r21, r19
     fac:	50 93 8b 00 	sts	0x008B, r21
     fb0:	40 93 8a 00 	sts	0x008A, r20
						OCR1C = full_speed;
     fb4:	90 93 8d 00 	sts	0x008D, r25
     fb8:	80 93 8c 00 	sts	0x008C, r24
						if(Pho[3]>Pho[5]){
     fbc:	20 91 6a 01 	lds	r18, 0x016A
     fc0:	30 91 6b 01 	lds	r19, 0x016B
     fc4:	80 91 6e 01 	lds	r24, 0x016E
     fc8:	90 91 6f 01 	lds	r25, 0x016F
     fcc:	82 17       	cp	r24, r18
     fce:	93 07       	cpc	r25, r19
     fd0:	0c f0       	brlt	.+2      	; 0xfd4 <findPuck+0x2de>
     fd2:	70 c0       	rjmp	.+224    	; 0x10b4 <findPuck+0x3be>
							m_usb_tx_string("PID\n");
     fd4:	84 ea       	ldi	r24, 0xA4	; 164
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
							PID_Pho(Kp_Pho, Kd_Pho);
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e7       	ldi	r20, 0x70	; 112
     fe2:	51 e4       	ldi	r21, 0x41	; 65
     fe4:	6a e9       	ldi	r22, 0x9A	; 154
     fe6:	79 e9       	ldi	r23, 0x99	; 153
     fe8:	89 e9       	ldi	r24, 0x99	; 153
     fea:	9e e3       	ldi	r25, 0x3E	; 62
     fec:	0e 94 18 05 	call	0xa30	; 0xa30 <PID_Pho>
     ff0:	61 c0       	rjmp	.+194    	; 0x10b4 <findPuck+0x3be>
						}
					}
				}
				else{
					PID_Pho(2*Kp_Pho, 1.5*Kd_Pho);
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	44 eb       	ldi	r20, 0xB4	; 180
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	6a e9       	ldi	r22, 0x9A	; 154
     ffc:	79 e9       	ldi	r23, 0x99	; 153
     ffe:	89 e1       	ldi	r24, 0x19	; 25
    1000:	9f e3       	ldi	r25, 0x3F	; 63
    1002:	0e 94 18 05 	call	0xa30	; 0xa30 <PID_Pho>
    1006:	56 c0       	rjmp	.+172    	; 0x10b4 <findPuck+0x3be>
				}
			}
			break;
		case 5:
			if(mean024 - mean135 > strThres){
    1008:	c7 01       	movw	r24, r14
    100a:	8c 1b       	sub	r24, r28
    100c:	9d 0b       	sbc	r25, r29
    100e:	c3 97       	sbiw	r24, 0x33	; 51
    1010:	3c f1       	brlt	.+78     	; 0x1060 <findPuck+0x36a>
				m_usb_tx_string("turn left\n");
    1012:	89 e9       	ldi	r24, 0x99	; 153
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
				set(PORTB, 0);
    101a:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
    101c:	29 98       	cbi	0x05, 1	; 5
				if (Pho[2] > Pho[4]){
    101e:	20 91 68 01 	lds	r18, 0x0168
    1022:	30 91 69 01 	lds	r19, 0x0169
    1026:	80 91 6c 01 	lds	r24, 0x016C
    102a:	90 91 6d 01 	lds	r25, 0x016D
    102e:	82 17       	cp	r24, r18
    1030:	93 07       	cpc	r25, r19
    1032:	5c f4       	brge	.+22     	; 0x104a <findPuck+0x354>
					PID_stalk(Kp_stalk, Kd_stalk); 
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e4       	ldi	r21, 0x40	; 64
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	80 e8       	ldi	r24, 0x80	; 128
    1042:	9f e3       	ldi	r25, 0x3F	; 63
    1044:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <PID_stalk>
    1048:	35 c0       	rjmp	.+106    	; 0x10b4 <findPuck+0x3be>
				}
				else{
					OCR1B = full_speed_stalk;
    104a:	8a e8       	ldi	r24, 0x8A	; 138
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	90 93 8b 00 	sts	0x008B, r25
    1052:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
    1056:	90 93 8d 00 	sts	0x008D, r25
    105a:	80 93 8c 00 	sts	0x008C, r24
    105e:	2a c0       	rjmp	.+84     	; 0x10b4 <findPuck+0x3be>
				}
			}
			else{
				if(mean135 - mean024 > strThres){
    1060:	ce 19       	sub	r28, r14
    1062:	df 09       	sbc	r29, r15
    1064:	e3 97       	sbiw	r28, 0x33	; 51
    1066:	34 f1       	brlt	.+76     	; 0x10b4 <findPuck+0x3be>
					m_usb_tx_string("turn right\n");
    1068:	8d e8       	ldi	r24, 0x8D	; 141
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
					clear(PORTB, 0);
    1070:	28 98       	cbi	0x05, 0	; 5
					set(PORTB, 1);
    1072:	29 9a       	sbi	0x05, 1	; 5
					if (Pho[3] > Pho[5]){
    1074:	20 91 6a 01 	lds	r18, 0x016A
    1078:	30 91 6b 01 	lds	r19, 0x016B
    107c:	80 91 6e 01 	lds	r24, 0x016E
    1080:	90 91 6f 01 	lds	r25, 0x016F
    1084:	82 17       	cp	r24, r18
    1086:	93 07       	cpc	r25, r19
    1088:	5c f4       	brge	.+22     	; 0x10a0 <findPuck+0x3aa>
						PID_stalk(Kp_stalk, Kd_stalk);
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e4       	ldi	r21, 0x40	; 64
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e8       	ldi	r24, 0x80	; 128
    1098:	9f e3       	ldi	r25, 0x3F	; 63
    109a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <PID_stalk>
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <findPuck+0x3be>
					}
					else{
						OCR1B = full_speed_stalk;
    10a0:	8a e8       	ldi	r24, 0x8A	; 138
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	90 93 8b 00 	sts	0x008B, r25
    10a8:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed_stalk;
    10ac:	90 93 8d 00 	sts	0x008D, r25
    10b0:	80 93 8c 00 	sts	0x008C, r24
			break;
		default:
			break;
	}
	
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	08 95       	ret

000010d2 <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
    1108:	c0 91 62 01 	lds	r28, 0x0162
    110c:	d0 91 63 01 	lds	r29, 0x0163
    1110:	a0 90 78 00 	lds	r10, 0x0078
    1114:	b0 90 79 00 	lds	r11, 0x0079
    1118:	8e 01       	movw	r16, r28
    111a:	00 0f       	add	r16, r16
    111c:	11 1f       	adc	r17, r17
    111e:	0c 59       	subi	r16, 0x9C	; 156
    1120:	1e 4f       	sbci	r17, 0xFE	; 254
    1122:	f8 01       	movw	r30, r16
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	88 27       	eor	r24, r24
    112a:	77 fd       	sbrc	r23, 7
    112c:	80 95       	com	r24
    112e:	98 2f       	mov	r25, r24
    1130:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
    1134:	2d ec       	ldi	r18, 0xCD	; 205
    1136:	3c ec       	ldi	r19, 0xCC	; 204
    1138:	4c e4       	ldi	r20, 0x4C	; 76
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1140:	6b 01       	movw	r12, r22
    1142:	7c 01       	movw	r14, r24
    1144:	b5 01       	movw	r22, r10
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    114e:	2c ec       	ldi	r18, 0xCC	; 204
    1150:	3c ec       	ldi	r19, 0xCC	; 204
    1152:	4c e4       	ldi	r20, 0x4C	; 76
    1154:	5e e3       	ldi	r21, 0x3E	; 62
    1156:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    115a:	9b 01       	movw	r18, r22
    115c:	ac 01       	movw	r20, r24
    115e:	c7 01       	movw	r24, r14
    1160:	b6 01       	movw	r22, r12
    1162:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    1166:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    116a:	f8 01       	movw	r30, r16
    116c:	71 83       	std	Z+1, r23	; 0x01
    116e:	60 83       	st	Z, r22
	
	i = i + 1;
    1170:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
    1172:	c8 30       	cpi	r28, 0x08	; 8
    1174:	d1 05       	cpc	r29, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
    1178:	d0 93 63 01 	sts	0x0163, r29
    117c:	c0 93 62 01 	sts	0x0162, r28
    1180:	04 c0       	rjmp	.+8      	; 0x118a <__vector_29+0xb8>
	if(i > 7){
		i = 0;
    1182:	10 92 63 01 	sts	0x0163, r1
    1186:	10 92 62 01 	sts	0x0162, r1
	}
	
	clear(ADCSRA, ADEN);
    118a:	ea e7       	ldi	r30, 0x7A	; 122
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	80 83       	st	Z, r24
	switch(i){
    1194:	80 91 62 01 	lds	r24, 0x0162
    1198:	90 91 63 01 	lds	r25, 0x0163
    119c:	87 30       	cpi	r24, 0x07	; 7
    119e:	91 05       	cpc	r25, r1
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <__vector_29+0xd2>
    11a2:	7b c0       	rjmp	.+246    	; 0x129a <__vector_29+0x1c8>
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 5a       	subi	r30, 0xA2	; 162
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
    11ae:	eb e7       	ldi	r30, 0x7B	; 123
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8f 7d       	andi	r24, 0xDF	; 223
    11b6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    11b8:	ec e7       	ldi	r30, 0x7C	; 124
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8b 7f       	andi	r24, 0xFB	; 251
    11c0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    11c2:	80 81       	ld	r24, Z
    11c4:	8d 7f       	andi	r24, 0xFD	; 253
    11c6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    11c8:	80 81       	ld	r24, Z
    11ca:	8e 7f       	andi	r24, 0xFE	; 254
    11cc:	80 83       	st	Z, r24
			break;
    11ce:	65 c0       	rjmp	.+202    	; 0x129a <__vector_29+0x1c8>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
    11d0:	eb e7       	ldi	r30, 0x7B	; 123
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 7d       	andi	r24, 0xDF	; 223
    11d8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    11da:	ec e7       	ldi	r30, 0x7C	; 124
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8b 7f       	andi	r24, 0xFB	; 251
    11e2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    11e4:	80 81       	ld	r24, Z
    11e6:	8d 7f       	andi	r24, 0xFD	; 253
    11e8:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    11ea:	80 81       	ld	r24, Z
    11ec:	81 60       	ori	r24, 0x01	; 1
    11ee:	80 83       	st	Z, r24
			break;
    11f0:	54 c0       	rjmp	.+168    	; 0x129a <__vector_29+0x1c8>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
    11f2:	eb e7       	ldi	r30, 0x7B	; 123
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 62       	ori	r24, 0x20	; 32
    11fa:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    11fc:	ec e7       	ldi	r30, 0x7C	; 124
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	8b 7f       	andi	r24, 0xFB	; 251
    1204:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    1206:	80 81       	ld	r24, Z
    1208:	8d 7f       	andi	r24, 0xFD	; 253
    120a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    120c:	80 81       	ld	r24, Z
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	80 83       	st	Z, r24
			break;
    1212:	43 c0       	rjmp	.+134    	; 0x129a <__vector_29+0x1c8>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
    1214:	eb e7       	ldi	r30, 0x7B	; 123
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 62       	ori	r24, 0x20	; 32
    121c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    121e:	ec e7       	ldi	r30, 0x7C	; 124
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    1228:	80 81       	ld	r24, Z
    122a:	82 60       	ori	r24, 0x02	; 2
    122c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    122e:	80 81       	ld	r24, Z
    1230:	8e 7f       	andi	r24, 0xFE	; 254
    1232:	80 83       	st	Z, r24
			break;
    1234:	32 c0       	rjmp	.+100    	; 0x129a <__vector_29+0x1c8>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
    1236:	eb e7       	ldi	r30, 0x7B	; 123
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 62       	ori	r24, 0x20	; 32
    123e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    1240:	ec e7       	ldi	r30, 0x7C	; 124
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8b 7f       	andi	r24, 0xFB	; 251
    1248:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    124a:	80 81       	ld	r24, Z
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	80 83       	st	Z, r24
			break;
    1256:	21 c0       	rjmp	.+66     	; 0x129a <__vector_29+0x1c8>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
    1258:	eb e7       	ldi	r30, 0x7B	; 123
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	80 62       	ori	r24, 0x20	; 32
    1260:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
    1262:	ec e7       	ldi	r30, 0x7C	; 124
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    126c:	80 81       	ld	r24, Z
    126e:	8d 7f       	andi	r24, 0xFD	; 253
    1270:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    1272:	80 81       	ld	r24, Z
    1274:	8e 7f       	andi	r24, 0xFE	; 254
    1276:	80 83       	st	Z, r24
			break;
    1278:	10 c0       	rjmp	.+32     	; 0x129a <__vector_29+0x1c8>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
    127a:	eb e7       	ldi	r30, 0x7B	; 123
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 62       	ori	r24, 0x20	; 32
    1282:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    1284:	ec e7       	ldi	r30, 0x7C	; 124
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8b 7f       	andi	r24, 0xFB	; 251
    128c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    128e:	80 81       	ld	r24, Z
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    1294:	80 81       	ld	r24, Z
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
    129a:	ea e7       	ldi	r30, 0x7A	; 122
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 68       	ori	r24, 0x80	; 128
    12a2:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
    12a4:	80 81       	ld	r24, Z
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	80 83       	st	Z, r24
	
}
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <deterState>:

void deterState(int *state){
	if (*state == 2 || *state == 3){
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 81       	ld	r18, Z
    12e4:	31 81       	ldd	r19, Z+1	; 0x01
    12e6:	22 50       	subi	r18, 0x02	; 2
    12e8:	31 09       	sbc	r19, r1
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	f0 f4       	brcc	.+60     	; 0x132c <deterState+0x4c>
		if (Pho[6] >gotThres){
    12f0:	20 91 70 01 	lds	r18, 0x0170
    12f4:	30 91 71 01 	lds	r19, 0x0171
    12f8:	26 3e       	cpi	r18, 0xE6	; 230
    12fa:	f3 e0       	ldi	r31, 0x03	; 3
    12fc:	3f 07       	cpc	r19, r31
    12fe:	54 f0       	brlt	.+20     	; 0x1314 <deterState+0x34>
			
			*state = 3;
    1300:	23 e0       	ldi	r18, 0x03	; 3
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	fc 01       	movw	r30, r24
    1306:	31 83       	std	Z+1, r19	; 0x01
    1308:	20 83       	st	Z, r18
			
			m_usb_tx_string("got the puck!\n");
    130a:	8e e7       	ldi	r24, 0x7E	; 126
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
    1312:	08 95       	ret
			
		}
		else{
			if(Pho[6] < loseThres){
    1314:	24 38       	cpi	r18, 0x84	; 132
    1316:	33 40       	sbci	r19, 0x03	; 3
    1318:	4c f4       	brge	.+18     	; 0x132c <deterState+0x4c>
				*state = 2;
    131a:	22 e0       	ldi	r18, 0x02	; 2
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	fc 01       	movw	r30, r24
    1320:	31 83       	std	Z+1, r19	; 0x01
    1322:	20 83       	st	Z, r18
				m_usb_tx_string("lost the puck!\n");
    1324:	8e e6       	ldi	r24, 0x6E	; 110
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
    132c:	08 95       	ret

0000132e <ifGotoPuck>:
		}
	}
}

void ifGotoPuck(int *state, float *dir){
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres){
    132e:	40 91 64 01 	lds	r20, 0x0164
    1332:	50 91 65 01 	lds	r21, 0x0165
    1336:	20 91 66 01 	lds	r18, 0x0166
    133a:	30 91 67 01 	lds	r19, 0x0167
    133e:	42 0f       	add	r20, r18
    1340:	53 1f       	adc	r21, r19
    1342:	20 91 68 01 	lds	r18, 0x0168
    1346:	30 91 69 01 	lds	r19, 0x0169
    134a:	42 0f       	add	r20, r18
    134c:	53 1f       	adc	r21, r19
    134e:	20 91 6a 01 	lds	r18, 0x016A
    1352:	30 91 6b 01 	lds	r19, 0x016B
    1356:	42 0f       	add	r20, r18
    1358:	53 1f       	adc	r21, r19
    135a:	20 91 12 01 	lds	r18, 0x0112
    135e:	30 91 13 01 	lds	r19, 0x0113
    1362:	24 17       	cp	r18, r20
    1364:	35 07       	cpc	r19, r21
    1366:	2c f4       	brge	.+10     	; 0x1372 <ifGotoPuck+0x44>
		*state = 2;
    1368:	22 e0       	ldi	r18, 0x02	; 2
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	fc 01       	movw	r30, r24
    136e:	31 83       	std	Z+1, r19	; 0x01
    1370:	20 83       	st	Z, r18
    1372:	08 95       	ret

00001374 <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
    1374:	4f 92       	push	r4
    1376:	5f 92       	push	r5
    1378:	6f 92       	push	r6
    137a:	7f 92       	push	r7
    137c:	8f 92       	push	r8
    137e:	9f 92       	push	r9
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	60 97       	sbiw	r28, 0x10	; 16
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	2b 01       	movw	r4, r22
    13a6:	3c 01       	movw	r6, r24
    13a8:	2d 83       	std	Y+5, r18	; 0x05
    13aa:	3e 83       	std	Y+6, r19	; 0x06
    13ac:	4f 83       	std	Y+7, r20	; 0x07
    13ae:	58 87       	std	Y+8, r21	; 0x08
    13b0:	58 01       	movw	r10, r16
    13b2:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
    13b4:	d5 01       	movw	r26, r10
    13b6:	cd 90       	ld	r12, X+
    13b8:	dd 90       	ld	r13, X+
    13ba:	ed 90       	ld	r14, X+
    13bc:	fc 90       	ld	r15, X
    13be:	9b 01       	movw	r18, r22
    13c0:	ac 01       	movw	r20, r24
    13c2:	c7 01       	movw	r24, r14
    13c4:	b6 01       	movw	r22, r12
    13c6:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    13ca:	f8 01       	movw	r30, r16
    13cc:	20 81       	ld	r18, Z
    13ce:	31 81       	ldd	r19, Z+1	; 0x01
    13d0:	42 81       	ldd	r20, Z+2	; 0x02
    13d2:	53 81       	ldd	r21, Z+3	; 0x03
    13d4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    13d8:	69 87       	std	Y+9, r22	; 0x09
    13da:	7a 87       	std	Y+10, r23	; 0x0a
    13dc:	8b 87       	std	Y+11, r24	; 0x0b
    13de:	9c 87       	std	Y+12, r25	; 0x0c
    13e0:	d5 01       	movw	r26, r10
    13e2:	14 96       	adiw	r26, 0x04	; 4
    13e4:	8d 91       	ld	r24, X+
    13e6:	9d 91       	ld	r25, X+
    13e8:	0d 90       	ld	r0, X+
    13ea:	bc 91       	ld	r27, X
    13ec:	a0 2d       	mov	r26, r0
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	ab 83       	std	Y+3, r26	; 0x03
    13f4:	bc 83       	std	Y+4, r27	; 0x04
    13f6:	2d 81       	ldd	r18, Y+5	; 0x05
    13f8:	3e 81       	ldd	r19, Y+6	; 0x06
    13fa:	4f 81       	ldd	r20, Y+7	; 0x07
    13fc:	58 85       	ldd	r21, Y+8	; 0x08
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1406:	6d 87       	std	Y+13, r22	; 0x0d
    1408:	7e 87       	std	Y+14, r23	; 0x0e
    140a:	8f 87       	std	Y+15, r24	; 0x0f
    140c:	98 8b       	std	Y+16, r25	; 0x10
    140e:	9b 01       	movw	r18, r22
    1410:	ac 01       	movw	r20, r24
    1412:	69 85       	ldd	r22, Y+9	; 0x09
    1414:	7a 85       	ldd	r23, Y+10	; 0x0a
    1416:	8b 85       	ldd	r24, Y+11	; 0x0b
    1418:	9c 85       	ldd	r25, Y+12	; 0x0c
    141a:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    141e:	4b 01       	movw	r8, r22
    1420:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
    1422:	29 81       	ldd	r18, Y+1	; 0x01
    1424:	3a 81       	ldd	r19, Y+2	; 0x02
    1426:	4b 81       	ldd	r20, Y+3	; 0x03
    1428:	5c 81       	ldd	r21, Y+4	; 0x04
    142a:	c3 01       	movw	r24, r6
    142c:	b2 01       	movw	r22, r4
    142e:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1432:	f8 01       	movw	r30, r16
    1434:	24 81       	ldd	r18, Z+4	; 0x04
    1436:	35 81       	ldd	r19, Z+5	; 0x05
    1438:	46 81       	ldd	r20, Z+6	; 0x06
    143a:	57 81       	ldd	r21, Z+7	; 0x07
    143c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    1440:	2b 01       	movw	r4, r22
    1442:	3c 01       	movw	r6, r24
    1444:	2d 81       	ldd	r18, Y+5	; 0x05
    1446:	3e 81       	ldd	r19, Y+6	; 0x06
    1448:	4f 81       	ldd	r20, Y+7	; 0x07
    144a:	58 85       	ldd	r21, Y+8	; 0x08
    144c:	c7 01       	movw	r24, r14
    144e:	b6 01       	movw	r22, r12
    1450:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1454:	69 83       	std	Y+1, r22	; 0x01
    1456:	7a 83       	std	Y+2, r23	; 0x02
    1458:	8b 83       	std	Y+3, r24	; 0x03
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	c3 01       	movw	r24, r6
    1462:	b2 01       	movw	r22, r4
    1464:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    1468:	6b 01       	movw	r12, r22
    146a:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
    146c:	2d 85       	ldd	r18, Y+13	; 0x0d
    146e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1470:	4f 85       	ldd	r20, Y+15	; 0x0f
    1472:	58 89       	ldd	r21, Y+16	; 0x10
    1474:	69 85       	ldd	r22, Y+9	; 0x09
    1476:	7a 85       	ldd	r23, Y+10	; 0x0a
    1478:	8b 85       	ldd	r24, Y+11	; 0x0b
    147a:	9c 85       	ldd	r25, Y+12	; 0x0c
    147c:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    1480:	6d 83       	std	Y+5, r22	; 0x05
    1482:	7e 83       	std	Y+6, r23	; 0x06
    1484:	8f 83       	std	Y+7, r24	; 0x07
    1486:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
    1488:	29 81       	ldd	r18, Y+1	; 0x01
    148a:	3a 81       	ldd	r19, Y+2	; 0x02
    148c:	4b 81       	ldd	r20, Y+3	; 0x03
    148e:	5c 81       	ldd	r21, Y+4	; 0x04
    1490:	c3 01       	movw	r24, r6
    1492:	b2 01       	movw	r22, r4
    1494:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    1498:	2b 01       	movw	r4, r22
    149a:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
    149c:	a5 01       	movw	r20, r10
    149e:	94 01       	movw	r18, r8
    14a0:	c5 01       	movw	r24, r10
    14a2:	b4 01       	movw	r22, r8
    14a4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    14a8:	4b 01       	movw	r8, r22
    14aa:	5c 01       	movw	r10, r24
    14ac:	a7 01       	movw	r20, r14
    14ae:	96 01       	movw	r18, r12
    14b0:	c7 01       	movw	r24, r14
    14b2:	b6 01       	movw	r22, r12
    14b4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	c5 01       	movw	r24, r10
    14be:	b4 01       	movw	r22, r8
    14c0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    14c4:	6b 01       	movw	r12, r22
    14c6:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
    14c8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ca:	3e 81       	ldd	r19, Y+6	; 0x06
    14cc:	4f 81       	ldd	r20, Y+7	; 0x07
    14ce:	58 85       	ldd	r21, Y+8	; 0x08
    14d0:	ca 01       	movw	r24, r20
    14d2:	b9 01       	movw	r22, r18
    14d4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    14d8:	4b 01       	movw	r8, r22
    14da:	5c 01       	movw	r10, r24
    14dc:	a3 01       	movw	r20, r6
    14de:	92 01       	movw	r18, r4
    14e0:	c3 01       	movw	r24, r6
    14e2:	b2 01       	movw	r22, r4
    14e4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    14e8:	9b 01       	movw	r18, r22
    14ea:	ac 01       	movw	r20, r24
    14ec:	c5 01       	movw	r24, r10
    14ee:	b4 01       	movw	r22, r8
    14f0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
    14f8:	01 e0       	ldi	r16, 0x01	; 1
    14fa:	10 e0       	ldi	r17, 0x00	; 0
    14fc:	c7 01       	movw	r24, r14
    14fe:	b6 01       	movw	r22, r12
    1500:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1504:	88 23       	and	r24, r24
    1506:	14 f0       	brlt	.+4      	; 0x150c <find_sign+0x198>
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
    150c:	c8 01       	movw	r24, r16
    150e:	60 96       	adiw	r28, 0x10	; 16
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	9f 90       	pop	r9
    1530:	8f 90       	pop	r8
    1532:	7f 90       	pop	r7
    1534:	6f 90       	pop	r6
    1536:	5f 90       	pop	r5
    1538:	4f 90       	pop	r4
    153a:	08 95       	ret

0000153c <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
    153c:	2f 92       	push	r2
    153e:	3f 92       	push	r3
    1540:	4f 92       	push	r4
    1542:	5f 92       	push	r5
    1544:	6f 92       	push	r6
    1546:	7f 92       	push	r7
    1548:	8f 92       	push	r8
    154a:	9f 92       	push	r9
    154c:	af 92       	push	r10
    154e:	bf 92       	push	r11
    1550:	cf 92       	push	r12
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	28 97       	sbiw	r28, 0x08	; 8
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	1c 01       	movw	r2, r24
    1572:	49 83       	std	Y+1, r20	; 0x01
    1574:	5a 83       	std	Y+2, r21	; 0x02
    1576:	6b 83       	std	Y+3, r22	; 0x03
    1578:	7c 83       	std	Y+4, r23	; 0x04
    157a:	0d 83       	std	Y+5, r16	; 0x05
    157c:	1e 83       	std	Y+6, r17	; 0x06
    157e:	2f 83       	std	Y+7, r18	; 0x07
    1580:	38 87       	std	Y+8, r19	; 0x08
    1582:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
    1584:	f6 01       	movw	r30, r12
    1586:	20 81       	ld	r18, Z
    1588:	31 81       	ldd	r19, Z+1	; 0x01
    158a:	42 81       	ldd	r20, Z+2	; 0x02
    158c:	53 81       	ldd	r21, Z+3	; 0x03
    158e:	f7 01       	movw	r30, r14
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    159c:	4b 01       	movw	r8, r22
    159e:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
    15a0:	f6 01       	movw	r30, r12
    15a2:	24 81       	ldd	r18, Z+4	; 0x04
    15a4:	35 81       	ldd	r19, Z+5	; 0x05
    15a6:	46 81       	ldd	r20, Z+6	; 0x06
    15a8:	57 81       	ldd	r21, Z+7	; 0x07
    15aa:	f7 01       	movw	r30, r14
    15ac:	64 81       	ldd	r22, Z+4	; 0x04
    15ae:	75 81       	ldd	r23, Z+5	; 0x05
    15b0:	86 81       	ldd	r24, Z+6	; 0x06
    15b2:	97 81       	ldd	r25, Z+7	; 0x07
    15b4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    15b8:	6b 01       	movw	r12, r22
    15ba:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
    15bc:	a5 01       	movw	r20, r10
    15be:	94 01       	movw	r18, r8
    15c0:	c5 01       	movw	r24, r10
    15c2:	b4 01       	movw	r22, r8
    15c4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    15c8:	2b 01       	movw	r4, r22
    15ca:	3c 01       	movw	r6, r24
    15cc:	a7 01       	movw	r20, r14
    15ce:	96 01       	movw	r18, r12
    15d0:	c7 01       	movw	r24, r14
    15d2:	b6 01       	movw	r22, r12
    15d4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	c3 01       	movw	r24, r6
    15de:	b2 01       	movw	r22, r4
    15e0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
    15e4:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <sqrt>
    15e8:	2b 01       	movw	r4, r22
    15ea:	3c 01       	movw	r6, r24
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
    15f0:	c5 01       	movw	r24, r10
    15f2:	b4 01       	movw	r22, r8
    15f4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__divsf3>
    15f8:	4b 01       	movw	r8, r22
    15fa:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
    15fc:	a3 01       	movw	r20, r6
    15fe:	92 01       	movw	r18, r4
    1600:	c7 01       	movw	r24, r14
    1602:	b6 01       	movw	r22, r12
    1604:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__divsf3>
    1608:	6b 01       	movw	r12, r22
    160a:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
    160c:	f8 01       	movw	r30, r16
    160e:	20 81       	ld	r18, Z
    1610:	31 81       	ldd	r19, Z+1	; 0x01
    1612:	42 81       	ldd	r20, Z+2	; 0x02
    1614:	53 81       	ldd	r21, Z+3	; 0x03
    1616:	c5 01       	movw	r24, r10
    1618:	b4 01       	movw	r22, r8
    161a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    161e:	2b 01       	movw	r4, r22
    1620:	3c 01       	movw	r6, r24
    1622:	f8 01       	movw	r30, r16
    1624:	24 81       	ldd	r18, Z+4	; 0x04
    1626:	35 81       	ldd	r19, Z+5	; 0x05
    1628:	46 81       	ldd	r20, Z+6	; 0x06
    162a:	57 81       	ldd	r21, Z+7	; 0x07
    162c:	c7 01       	movw	r24, r14
    162e:	b6 01       	movw	r22, r12
    1630:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1634:	9b 01       	movw	r18, r22
    1636:	ac 01       	movw	r20, r24
    1638:	c3 01       	movw	r24, r6
    163a:	b2 01       	movw	r22, r4
    163c:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
	alpha = acos(cos_alpha);
    1640:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <acos>
    1644:	2b 01       	movw	r4, r22
    1646:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
    1648:	2a 94       	dec	r2
    164a:	23 28       	or	r2, r3
    164c:	d1 f4       	brne	.+52     	; 0x1682 <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
    164e:	2d 81       	ldd	r18, Y+5	; 0x05
    1650:	3e 81       	ldd	r19, Y+6	; 0x06
    1652:	4f 81       	ldd	r20, Y+7	; 0x07
    1654:	58 85       	ldd	r21, Y+8	; 0x08
    1656:	50 58       	subi	r21, 0x80	; 128
    1658:	c7 01       	movw	r24, r14
    165a:	b6 01       	movw	r22, r12
    165c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1660:	6b 01       	movw	r12, r22
    1662:	7c 01       	movw	r14, r24
    1664:	29 81       	ldd	r18, Y+1	; 0x01
    1666:	3a 81       	ldd	r19, Y+2	; 0x02
    1668:	4b 81       	ldd	r20, Y+3	; 0x03
    166a:	5c 81       	ldd	r21, Y+4	; 0x04
    166c:	c5 01       	movw	r24, r10
    166e:	b4 01       	movw	r22, r8
    1670:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1674:	9b 01       	movw	r18, r22
    1676:	ac 01       	movw	r20, r24
    1678:	c7 01       	movw	r24, r14
    167a:	b6 01       	movw	r22, r12
    167c:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    1680:	19 c0       	rjmp	.+50     	; 0x16b4 <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    1682:	2d 81       	ldd	r18, Y+5	; 0x05
    1684:	3e 81       	ldd	r19, Y+6	; 0x06
    1686:	4f 81       	ldd	r20, Y+7	; 0x07
    1688:	58 85       	ldd	r21, Y+8	; 0x08
    168a:	50 58       	subi	r21, 0x80	; 128
    168c:	c7 01       	movw	r24, r14
    168e:	b6 01       	movw	r22, r12
    1690:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1694:	6b 01       	movw	r12, r22
    1696:	7c 01       	movw	r14, r24
    1698:	29 81       	ldd	r18, Y+1	; 0x01
    169a:	3a 81       	ldd	r19, Y+2	; 0x02
    169c:	4b 81       	ldd	r20, Y+3	; 0x03
    169e:	5c 81       	ldd	r21, Y+4	; 0x04
    16a0:	c5 01       	movw	r24, r10
    16a2:	b4 01       	movw	r22, r8
    16a4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    16a8:	9b 01       	movw	r18, r22
    16aa:	ac 01       	movw	r20, r24
    16ac:	c7 01       	movw	r24, r14
    16ae:	b6 01       	movw	r22, r12
    16b0:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
	}
	if (c2g_wx < 0){
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    16be:	88 23       	and	r24, r24
    16c0:	4c f0       	brlt	.+18     	; 0x16d4 <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    16c2:	40 92 7e 01 	sts	0x017E, r4
    16c6:	50 92 7f 01 	sts	0x017F, r5
    16ca:	60 92 80 01 	sts	0x0180, r6
    16ce:	70 92 81 01 	sts	0x0181, r7
    16d2:	0c c0       	rjmp	.+24     	; 0x16ec <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    16d4:	77 fa       	bst	r7, 7
    16d6:	70 94       	com	r7
    16d8:	77 f8       	bld	r7, 7
    16da:	70 94       	com	r7
    16dc:	40 92 7e 01 	sts	0x017E, r4
    16e0:	50 92 7f 01 	sts	0x017F, r5
    16e4:	60 92 80 01 	sts	0x0180, r6
    16e8:	70 92 81 01 	sts	0x0181, r7
	};   

	m_usb_tx_string("alpha: ");
    16ec:	8b e8       	ldi	r24, 0x8B	; 139
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(alpha*10);
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	60 91 7e 01 	lds	r22, 0x017E
    1700:	70 91 7f 01 	lds	r23, 0x017F
    1704:	80 91 80 01 	lds	r24, 0x0180
    1708:	90 91 81 01 	lds	r25, 0x0181
    170c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1710:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1714:	cb 01       	movw	r24, r22
    1716:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    171a:	89 e8       	ldi	r24, 0x89	; 137
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
}
    1722:	28 96       	adiw	r28, 0x08	; 8
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	9f 90       	pop	r9
    1744:	8f 90       	pop	r8
    1746:	7f 90       	pop	r7
    1748:	6f 90       	pop	r6
    174a:	5f 90       	pop	r5
    174c:	4f 90       	pop	r4
    174e:	3f 90       	pop	r3
    1750:	2f 90       	pop	r2
    1752:	08 95       	ret

00001754 <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    1754:	4f 92       	push	r4
    1756:	5f 92       	push	r5
    1758:	6f 92       	push	r6
    175a:	7f 92       	push	r7
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	00 d0       	rcall	.+0      	; 0x1772 <PID_alpha+0x1e>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <PID_alpha+0x20>
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	4b 01       	movw	r8, r22
    177a:	5c 01       	movw	r10, r24
    177c:	29 83       	std	Y+1, r18	; 0x01
    177e:	3a 83       	std	Y+2, r19	; 0x02
    1780:	4b 83       	std	Y+3, r20	; 0x03
    1782:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1784:	40 90 7e 01 	lds	r4, 0x017E
    1788:	50 90 7f 01 	lds	r5, 0x017F
    178c:	60 90 80 01 	lds	r6, 0x0180
    1790:	70 90 81 01 	lds	r7, 0x0181
    1794:	20 91 7a 01 	lds	r18, 0x017A
    1798:	30 91 7b 01 	lds	r19, 0x017B
    179c:	40 91 7c 01 	lds	r20, 0x017C
    17a0:	50 91 7d 01 	lds	r21, 0x017D
    17a4:	c3 01       	movw	r24, r6
    17a6:	b2 01       	movw	r22, r4
    17a8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
    17b0:	60 93 76 01 	sts	0x0176, r22
    17b4:	70 93 77 01 	sts	0x0177, r23
    17b8:	80 93 78 01 	sts	0x0178, r24
    17bc:	90 93 79 01 	sts	0x0179, r25
	float P =0, D = 0;
	P = Kp * alpha;
    17c0:	a5 01       	movw	r20, r10
    17c2:	94 01       	movw	r18, r8
    17c4:	c3 01       	movw	r24, r6
    17c6:	b2 01       	movw	r22, r4
    17c8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    17cc:	4b 01       	movw	r8, r22
    17ce:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;	gain_loc = P+D;
    17d0:	29 81       	ldd	r18, Y+1	; 0x01
    17d2:	3a 81       	ldd	r19, Y+2	; 0x02
    17d4:	4b 81       	ldd	r20, Y+3	; 0x03
    17d6:	5c 81       	ldd	r21, Y+4	; 0x04
    17d8:	c7 01       	movw	r24, r14
    17da:	b6 01       	movw	r22, r12
    17dc:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    17e0:	9b 01       	movw	r18, r22
    17e2:	ac 01       	movw	r20, r24
    17e4:	c5 01       	movw	r24, r10
    17e6:	b4 01       	movw	r22, r8
    17e8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    17ec:	60 93 72 01 	sts	0x0172, r22
    17f0:	70 93 73 01 	sts	0x0173, r23
    17f4:	80 93 74 01 	sts	0x0174, r24
    17f8:	90 93 75 01 	sts	0x0175, r25
	
	alpha_last = alpha;
    17fc:	40 92 7a 01 	sts	0x017A, r4
    1800:	50 92 7b 01 	sts	0x017B, r5
    1804:	60 92 7c 01 	sts	0x017C, r6
    1808:	70 92 7d 01 	sts	0x017D, r7
	
	m_usb_tx_string("alpha*10: ");
    180c:	8e e7       	ldi	r24, 0x7E	; 126
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	51 e4       	ldi	r21, 0x41	; 65
    181c:	60 91 7e 01 	lds	r22, 0x017E
    1820:	70 91 7f 01 	lds	r23, 0x017F
    1824:	80 91 80 01 	lds	r24, 0x0180
    1828:	90 91 81 01 	lds	r25, 0x0181
    182c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1830:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1834:	cb 01       	movw	r24, r22
    1836:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    183a:	8c e7       	ldi	r24, 0x7C	; 124
    183c:	92 e0       	ldi	r25, 0x02	; 2
    183e:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	m_usb_tx_string("gain*10: ");
    1842:	82 e7       	ldi	r24, 0x72	; 114
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	60 91 72 01 	lds	r22, 0x0172
    1856:	70 91 73 01 	lds	r23, 0x0173
    185a:	80 91 74 01 	lds	r24, 0x0174
    185e:	90 91 75 01 	lds	r25, 0x0175
    1862:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1866:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    186a:	cb 01       	movw	r24, r22
    186c:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1870:	80 e7       	ldi	r24, 0x70	; 112
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	if(gain_loc<0){  // turn right
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	a9 01       	movw	r20, r18
    187e:	60 91 72 01 	lds	r22, 0x0172
    1882:	70 91 73 01 	lds	r23, 0x0173
    1886:	80 91 74 01 	lds	r24, 0x0174
    188a:	90 91 75 01 	lds	r25, 0x0175
    188e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1892:	88 23       	and	r24, r24
    1894:	0c f0       	brlt	.+2      	; 0x1898 <PID_alpha+0x144>
    1896:	44 c0       	rjmp	.+136    	; 0x1920 <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    1898:	84 e6       	ldi	r24, 0x64	; 100
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		OCR1B = full_speed-abs(gain_loc);
    18a0:	60 91 72 01 	lds	r22, 0x0172
    18a4:	70 91 73 01 	lds	r23, 0x0173
    18a8:	80 91 74 01 	lds	r24, 0x0174
    18ac:	90 91 75 01 	lds	r25, 0x0175
    18b0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    18b4:	9b 01       	movw	r18, r22
    18b6:	77 23       	and	r23, r23
    18b8:	24 f4       	brge	.+8      	; 0x18c2 <PID_alpha+0x16e>
    18ba:	22 27       	eor	r18, r18
    18bc:	33 27       	eor	r19, r19
    18be:	26 1b       	sub	r18, r22
    18c0:	37 0b       	sbc	r19, r23
    18c2:	8a e8       	ldi	r24, 0x8A	; 138
    18c4:	92 e0       	ldi	r25, 0x02	; 2
    18c6:	82 1b       	sub	r24, r18
    18c8:	93 0b       	sbc	r25, r19
    18ca:	90 93 8b 00 	sts	0x008B, r25
    18ce:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    18d2:	e0 90 2a 01 	lds	r14, 0x012A
    18d6:	f0 90 2b 01 	lds	r15, 0x012B
    18da:	60 91 72 01 	lds	r22, 0x0172
    18de:	70 91 73 01 	lds	r23, 0x0173
    18e2:	80 91 74 01 	lds	r24, 0x0174
    18e6:	90 91 75 01 	lds	r25, 0x0175
    18ea:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    18ee:	9b 01       	movw	r18, r22
    18f0:	77 23       	and	r23, r23
    18f2:	24 f4       	brge	.+8      	; 0x18fc <PID_alpha+0x1a8>
    18f4:	22 27       	eor	r18, r18
    18f6:	33 27       	eor	r19, r19
    18f8:	26 1b       	sub	r18, r22
    18fa:	37 0b       	sbc	r19, r23
    18fc:	e2 16       	cp	r14, r18
    18fe:	f3 06       	cpc	r15, r19
    1900:	44 f4       	brge	.+16     	; 0x1912 <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    1902:	8a e8       	ldi	r24, 0x8A	; 138
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	8e 19       	sub	r24, r14
    1908:	9f 09       	sbc	r25, r15
    190a:	90 93 8b 00 	sts	0x008B, r25
    190e:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1912:	8a e8       	ldi	r24, 0x8A	; 138
    1914:	92 e0       	ldi	r25, 0x02	; 2
    1916:	90 93 8d 00 	sts	0x008D, r25
    191a:	80 93 8c 00 	sts	0x008C, r24
    191e:	43 c0       	rjmp	.+134    	; 0x19a6 <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1920:	89 e5       	ldi	r24, 0x59	; 89
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1928:	60 91 72 01 	lds	r22, 0x0172
    192c:	70 91 73 01 	lds	r23, 0x0173
    1930:	80 91 74 01 	lds	r24, 0x0174
    1934:	90 91 75 01 	lds	r25, 0x0175
    1938:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    193c:	9b 01       	movw	r18, r22
    193e:	77 23       	and	r23, r23
    1940:	24 f4       	brge	.+8      	; 0x194a <PID_alpha+0x1f6>
    1942:	22 27       	eor	r18, r18
    1944:	33 27       	eor	r19, r19
    1946:	26 1b       	sub	r18, r22
    1948:	37 0b       	sbc	r19, r23
    194a:	8a e8       	ldi	r24, 0x8A	; 138
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	82 1b       	sub	r24, r18
    1950:	93 0b       	sbc	r25, r19
    1952:	90 93 8d 00 	sts	0x008D, r25
    1956:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    195a:	e0 90 2a 01 	lds	r14, 0x012A
    195e:	f0 90 2b 01 	lds	r15, 0x012B
    1962:	60 91 72 01 	lds	r22, 0x0172
    1966:	70 91 73 01 	lds	r23, 0x0173
    196a:	80 91 74 01 	lds	r24, 0x0174
    196e:	90 91 75 01 	lds	r25, 0x0175
    1972:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1976:	9b 01       	movw	r18, r22
    1978:	77 23       	and	r23, r23
    197a:	24 f4       	brge	.+8      	; 0x1984 <PID_alpha+0x230>
    197c:	22 27       	eor	r18, r18
    197e:	33 27       	eor	r19, r19
    1980:	26 1b       	sub	r18, r22
    1982:	37 0b       	sbc	r19, r23
    1984:	e2 16       	cp	r14, r18
    1986:	f3 06       	cpc	r15, r19
    1988:	44 f4       	brge	.+16     	; 0x199a <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    198a:	8a e8       	ldi	r24, 0x8A	; 138
    198c:	92 e0       	ldi	r25, 0x02	; 2
    198e:	8e 19       	sub	r24, r14
    1990:	9f 09       	sbc	r25, r15
    1992:	90 93 8d 00 	sts	0x008D, r25
    1996:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    199a:	8a e8       	ldi	r24, 0x8A	; 138
    199c:	92 e0       	ldi	r25, 0x02	; 2
    199e:	90 93 8b 00 	sts	0x008B, r25
    19a2:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	bf 90       	pop	r11
    19bc:	af 90       	pop	r10
    19be:	9f 90       	pop	r9
    19c0:	8f 90       	pop	r8
    19c2:	7f 90       	pop	r7
    19c4:	6f 90       	pop	r6
    19c6:	5f 90       	pop	r5
    19c8:	4f 90       	pop	r4
    19ca:	08 95       	ret

000019cc <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    19cc:	4f 92       	push	r4
    19ce:	5f 92       	push	r5
    19d0:	6f 92       	push	r6
    19d2:	7f 92       	push	r7
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <PID_p2p+0x1e>
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <PID_p2p+0x20>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	4b 01       	movw	r8, r22
    19f2:	5c 01       	movw	r10, r24
    19f4:	29 83       	std	Y+1, r18	; 0x01
    19f6:	3a 83       	std	Y+2, r19	; 0x02
    19f8:	4b 83       	std	Y+3, r20	; 0x03
    19fa:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    19fc:	40 90 7e 01 	lds	r4, 0x017E
    1a00:	50 90 7f 01 	lds	r5, 0x017F
    1a04:	60 90 80 01 	lds	r6, 0x0180
    1a08:	70 90 81 01 	lds	r7, 0x0181
    1a0c:	20 91 7a 01 	lds	r18, 0x017A
    1a10:	30 91 7b 01 	lds	r19, 0x017B
    1a14:	40 91 7c 01 	lds	r20, 0x017C
    1a18:	50 91 7d 01 	lds	r21, 0x017D
    1a1c:	c3 01       	movw	r24, r6
    1a1e:	b2 01       	movw	r22, r4
    1a20:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    1a24:	6b 01       	movw	r12, r22
    1a26:	7c 01       	movw	r14, r24
    1a28:	60 93 76 01 	sts	0x0176, r22
    1a2c:	70 93 77 01 	sts	0x0177, r23
    1a30:	80 93 78 01 	sts	0x0178, r24
    1a34:	90 93 79 01 	sts	0x0179, r25
	float P =0, D = 0;
	P = Kp * alpha;
    1a38:	a5 01       	movw	r20, r10
    1a3a:	94 01       	movw	r18, r8
    1a3c:	c3 01       	movw	r24, r6
    1a3e:	b2 01       	movw	r22, r4
    1a40:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1a44:	4b 01       	movw	r8, r22
    1a46:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    1a48:	29 81       	ldd	r18, Y+1	; 0x01
    1a4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a4c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a4e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a50:	c7 01       	movw	r24, r14
    1a52:	b6 01       	movw	r22, r12
    1a54:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    1a5c:	c5 01       	movw	r24, r10
    1a5e:	b4 01       	movw	r22, r8
    1a60:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    1a64:	60 93 72 01 	sts	0x0172, r22
    1a68:	70 93 73 01 	sts	0x0173, r23
    1a6c:	80 93 74 01 	sts	0x0174, r24
    1a70:	90 93 75 01 	sts	0x0175, r25
	
	alpha_last = alpha;
    1a74:	40 92 7a 01 	sts	0x017A, r4
    1a78:	50 92 7b 01 	sts	0x017B, r5
    1a7c:	60 92 7c 01 	sts	0x017C, r6
    1a80:	70 92 7d 01 	sts	0x017D, r7
	
	m_usb_tx_string("alpha*10: ");
    1a84:	8e e4       	ldi	r24, 0x4E	; 78
    1a86:	92 e0       	ldi	r25, 0x02	; 2
    1a88:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	60 91 7e 01 	lds	r22, 0x017E
    1a98:	70 91 7f 01 	lds	r23, 0x017F
    1a9c:	80 91 80 01 	lds	r24, 0x0180
    1aa0:	90 91 81 01 	lds	r25, 0x0181
    1aa4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1aa8:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1aac:	cb 01       	movw	r24, r22
    1aae:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1ab2:	8c e4       	ldi	r24, 0x4C	; 76
    1ab4:	92 e0       	ldi	r25, 0x02	; 2
    1ab6:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	m_usb_tx_string("gain*10: ");
    1aba:	82 e4       	ldi	r24, 0x42	; 66
    1abc:	92 e0       	ldi	r25, 0x02	; 2
    1abe:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	60 91 72 01 	lds	r22, 0x0172
    1ace:	70 91 73 01 	lds	r23, 0x0173
    1ad2:	80 91 74 01 	lds	r24, 0x0174
    1ad6:	90 91 75 01 	lds	r25, 0x0175
    1ada:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1ade:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1ae8:	80 e4       	ldi	r24, 0x40	; 64
    1aea:	92 e0       	ldi	r25, 0x02	; 2
    1aec:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	if(gain_loc<0){  // turn right
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	a9 01       	movw	r20, r18
    1af6:	60 91 72 01 	lds	r22, 0x0172
    1afa:	70 91 73 01 	lds	r23, 0x0173
    1afe:	80 91 74 01 	lds	r24, 0x0174
    1b02:	90 91 75 01 	lds	r25, 0x0175
    1b06:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <PID_p2p+0x144>
    1b0e:	44 c0       	rjmp	.+136    	; 0x1b98 <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    1b10:	84 e3       	ldi	r24, 0x34	; 52
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1b18:	60 91 72 01 	lds	r22, 0x0172
    1b1c:	70 91 73 01 	lds	r23, 0x0173
    1b20:	80 91 74 01 	lds	r24, 0x0174
    1b24:	90 91 75 01 	lds	r25, 0x0175
    1b28:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1b2c:	9b 01       	movw	r18, r22
    1b2e:	77 23       	and	r23, r23
    1b30:	24 f4       	brge	.+8      	; 0x1b3a <PID_p2p+0x16e>
    1b32:	22 27       	eor	r18, r18
    1b34:	33 27       	eor	r19, r19
    1b36:	26 1b       	sub	r18, r22
    1b38:	37 0b       	sbc	r19, r23
    1b3a:	8a e8       	ldi	r24, 0x8A	; 138
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	82 1b       	sub	r24, r18
    1b40:	93 0b       	sbc	r25, r19
    1b42:	90 93 8b 00 	sts	0x008B, r25
    1b46:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    1b4a:	e0 90 28 01 	lds	r14, 0x0128
    1b4e:	f0 90 29 01 	lds	r15, 0x0129
    1b52:	60 91 72 01 	lds	r22, 0x0172
    1b56:	70 91 73 01 	lds	r23, 0x0173
    1b5a:	80 91 74 01 	lds	r24, 0x0174
    1b5e:	90 91 75 01 	lds	r25, 0x0175
    1b62:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1b66:	9b 01       	movw	r18, r22
    1b68:	77 23       	and	r23, r23
    1b6a:	24 f4       	brge	.+8      	; 0x1b74 <PID_p2p+0x1a8>
    1b6c:	22 27       	eor	r18, r18
    1b6e:	33 27       	eor	r19, r19
    1b70:	26 1b       	sub	r18, r22
    1b72:	37 0b       	sbc	r19, r23
    1b74:	e2 16       	cp	r14, r18
    1b76:	f3 06       	cpc	r15, r19
    1b78:	44 f4       	brge	.+16     	; 0x1b8a <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    1b7a:	8a e8       	ldi	r24, 0x8A	; 138
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	8e 19       	sub	r24, r14
    1b80:	9f 09       	sbc	r25, r15
    1b82:	90 93 8b 00 	sts	0x008B, r25
    1b86:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1b8a:	8a e8       	ldi	r24, 0x8A	; 138
    1b8c:	92 e0       	ldi	r25, 0x02	; 2
    1b8e:	90 93 8d 00 	sts	0x008D, r25
    1b92:	80 93 8c 00 	sts	0x008C, r24
    1b96:	43 c0       	rjmp	.+134    	; 0x1c1e <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1b98:	89 e2       	ldi	r24, 0x29	; 41
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1ba0:	60 91 72 01 	lds	r22, 0x0172
    1ba4:	70 91 73 01 	lds	r23, 0x0173
    1ba8:	80 91 74 01 	lds	r24, 0x0174
    1bac:	90 91 75 01 	lds	r25, 0x0175
    1bb0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	77 23       	and	r23, r23
    1bb8:	24 f4       	brge	.+8      	; 0x1bc2 <PID_p2p+0x1f6>
    1bba:	22 27       	eor	r18, r18
    1bbc:	33 27       	eor	r19, r19
    1bbe:	26 1b       	sub	r18, r22
    1bc0:	37 0b       	sbc	r19, r23
    1bc2:	8a e8       	ldi	r24, 0x8A	; 138
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	82 1b       	sub	r24, r18
    1bc8:	93 0b       	sbc	r25, r19
    1bca:	90 93 8d 00 	sts	0x008D, r25
    1bce:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    1bd2:	e0 90 28 01 	lds	r14, 0x0128
    1bd6:	f0 90 29 01 	lds	r15, 0x0129
    1bda:	60 91 72 01 	lds	r22, 0x0172
    1bde:	70 91 73 01 	lds	r23, 0x0173
    1be2:	80 91 74 01 	lds	r24, 0x0174
    1be6:	90 91 75 01 	lds	r25, 0x0175
    1bea:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    1bee:	9b 01       	movw	r18, r22
    1bf0:	77 23       	and	r23, r23
    1bf2:	24 f4       	brge	.+8      	; 0x1bfc <PID_p2p+0x230>
    1bf4:	22 27       	eor	r18, r18
    1bf6:	33 27       	eor	r19, r19
    1bf8:	26 1b       	sub	r18, r22
    1bfa:	37 0b       	sbc	r19, r23
    1bfc:	e2 16       	cp	r14, r18
    1bfe:	f3 06       	cpc	r15, r19
    1c00:	44 f4       	brge	.+16     	; 0x1c12 <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    1c02:	8a e8       	ldi	r24, 0x8A	; 138
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	8e 19       	sub	r24, r14
    1c08:	9f 09       	sbc	r25, r15
    1c0a:	90 93 8d 00 	sts	0x008D, r25
    1c0e:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1c12:	8a e8       	ldi	r24, 0x8A	; 138
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	90 93 8b 00 	sts	0x008B, r25
    1c1a:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	6f 90       	pop	r6
    1c3e:	5f 90       	pop	r5
    1c40:	4f 90       	pop	r4
    1c42:	08 95       	ret

00001c44 <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	6b 01       	movw	r12, r22
    1c52:	7c 01       	movw	r14, r24
	//unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	a9 01       	movw	r20, r18
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	7c f4       	brge	.+30     	; 0x1c8a <find_if_reach+0x46>
		if(x<0){
    1c6c:	01 e0       	ldi	r16, 0x01	; 1
    1c6e:	10 e0       	ldi	r17, 0x00	; 0
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	a9 01       	movw	r20, r18
    1c76:	c7 01       	movw	r24, r14
    1c78:	b6 01       	movw	r22, r12
    1c7a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	0c f0       	brlt	.+2      	; 0x1c84 <find_if_reach+0x40>
    1c82:	00 e0       	ldi	r16, 0x00	; 0
			return 1;
    1c84:	80 2f       	mov	r24, r16
    1c86:	91 2f       	mov	r25, r17
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <find_if_reach+0x62>
			return 0;
		}
		
	}
	else{
		if(x>0){
    1c8a:	01 e0       	ldi	r16, 0x01	; 1
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	a9 01       	movw	r20, r18
    1c94:	c7 01       	movw	r24, r14
    1c96:	b6 01       	movw	r22, r12
    1c98:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__gesf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	0c f0       	brlt	.+2      	; 0x1ca2 <find_if_reach+0x5e>
    1ca0:	00 e0       	ldi	r16, 0x00	; 0
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
		if(x<0){
			return 1;
    1ca2:	80 2f       	mov	r24, r16
    1ca4:	91 2f       	mov	r25, r17
		}else{
			return 0;
		}
		
	}
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	08 95       	ret

00001cb4 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int *state, float *goal, float *c_wii, float *dir){
    1cb4:	2f 92       	push	r2
    1cb6:	3f 92       	push	r3
    1cb8:	4f 92       	push	r4
    1cba:	5f 92       	push	r5
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	c6 58       	subi	r28, 0x86	; 134
    1cde:	d1 09       	sbc	r29, r1
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cd 57       	subi	r28, 0x7D	; 125
    1cec:	df 4f       	sbci	r29, 0xFF	; 255
    1cee:	99 83       	std	Y+1, r25	; 0x01
    1cf0:	88 83       	st	Y, r24
    1cf2:	c3 58       	subi	r28, 0x83	; 131
    1cf4:	d0 40       	sbci	r29, 0x00	; 0
    1cf6:	cb 57       	subi	r28, 0x7B	; 123
    1cf8:	df 4f       	sbci	r29, 0xFF	; 255
    1cfa:	79 83       	std	Y+1, r23	; 0x01
    1cfc:	68 83       	st	Y, r22
    1cfe:	c5 58       	subi	r28, 0x85	; 133
    1d00:	d0 40       	sbci	r29, 0x00	; 0
    1d02:	ed 96       	adiw	r28, 0x3d	; 61
    1d04:	5f af       	std	Y+63, r21	; 0x3f
    1d06:	4e af       	std	Y+62, r20	; 0x3e
    1d08:	ed 97       	sbiw	r28, 0x3d	; 61
    1d0a:	ef 96       	adiw	r28, 0x3f	; 63
    1d0c:	3f af       	std	Y+63, r19	; 0x3f
    1d0e:	2e af       	std	Y+62, r18	; 0x3e
    1d10:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    1d12:	82 e9       	ldi	r24, 0x92	; 146
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	0e 94 44 1a 	call	0x3488	; 0x3488 <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    1d1a:	60 91 92 01 	lds	r22, 0x0192
    1d1e:	70 91 93 01 	lds	r23, 0x0193
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1d2a:	69 83       	std	Y+1, r22	; 0x01
    1d2c:	7a 83       	std	Y+2, r23	; 0x02
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	60 91 98 01 	lds	r22, 0x0198
    1d36:	70 91 99 01 	lds	r23, 0x0199
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1d42:	6d 83       	std	Y+5, r22	; 0x05
    1d44:	7e 83       	std	Y+6, r23	; 0x06
    1d46:	8f 83       	std	Y+7, r24	; 0x07
    1d48:	98 87       	std	Y+8, r25	; 0x08
    1d4a:	60 91 9e 01 	lds	r22, 0x019E
    1d4e:	70 91 9f 01 	lds	r23, 0x019F
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1d5a:	69 87       	std	Y+9, r22	; 0x09
    1d5c:	7a 87       	std	Y+10, r23	; 0x0a
    1d5e:	8b 87       	std	Y+11, r24	; 0x0b
    1d60:	9c 87       	std	Y+12, r25	; 0x0c
    1d62:	60 91 a4 01 	lds	r22, 0x01A4
    1d66:	70 91 a5 01 	lds	r23, 0x01A5
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1d72:	6d 87       	std	Y+13, r22	; 0x0d
    1d74:	7e 87       	std	Y+14, r23	; 0x0e
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
    1d78:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    1d7a:	60 91 94 01 	lds	r22, 0x0194
    1d7e:	70 91 95 01 	lds	r23, 0x0195
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1d8a:	69 8b       	std	Y+17, r22	; 0x11
    1d8c:	7a 8b       	std	Y+18, r23	; 0x12
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	60 91 9a 01 	lds	r22, 0x019A
    1d96:	70 91 9b 01 	lds	r23, 0x019B
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1da2:	6d 8b       	std	Y+21, r22	; 0x15
    1da4:	7e 8b       	std	Y+22, r23	; 0x16
    1da6:	8f 8b       	std	Y+23, r24	; 0x17
    1da8:	98 8f       	std	Y+24, r25	; 0x18
    1daa:	60 91 a0 01 	lds	r22, 0x01A0
    1dae:	70 91 a1 01 	lds	r23, 0x01A1
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1dba:	69 8f       	std	Y+25, r22	; 0x19
    1dbc:	7a 8f       	std	Y+26, r23	; 0x1a
    1dbe:	8b 8f       	std	Y+27, r24	; 0x1b
    1dc0:	9c 8f       	std	Y+28, r25	; 0x1c
    1dc2:	60 91 a6 01 	lds	r22, 0x01A6
    1dc6:	70 91 a7 01 	lds	r23, 0x01A7
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatunsisf>
    1dd2:	6d 8f       	std	Y+29, r22	; 0x1d
    1dd4:	7e 8f       	std	Y+30, r23	; 0x1e
    1dd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd8:	98 a3       	std	Y+32, r25	; 0x20
    1dda:	9e 01       	movw	r18, r28
    1ddc:	2f 5f       	subi	r18, 0xFF	; 255
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	eb 96       	adiw	r28, 0x3b	; 59
    1de2:	3f af       	std	Y+63, r19	; 0x3f
    1de4:	2e af       	std	Y+62, r18	; 0x3e
    1de6:	eb 97       	sbiw	r28, 0x3b	; 59
    1de8:	ce 01       	movw	r24, r28
    1dea:	41 96       	adiw	r24, 0x11	; 17
    1dec:	e3 96       	adiw	r28, 0x33	; 51
    1dee:	9f af       	std	Y+63, r25	; 0x3f
    1df0:	8e af       	std	Y+62, r24	; 0x3e
    1df2:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1df4:	ab 96       	adiw	r28, 0x2b	; 43
    1df6:	1f ae       	std	Y+63, r1	; 0x3f
    1df8:	1e ae       	std	Y+62, r1	; 0x3e
    1dfa:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    1dfc:	e9 96       	adiw	r28, 0x39	; 57
    1dfe:	1f ae       	std	Y+63, r1	; 0x3f
    1e00:	1e ae       	std	Y+62, r1	; 0x3e
    1e02:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1e04:	ab 96       	adiw	r28, 0x2b	; 43
    1e06:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e08:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e0a:	ab 97       	sbiw	r28, 0x2b	; 43
    1e0c:	11 96       	adiw	r26, 0x01	; 1
    1e0e:	e7 96       	adiw	r28, 0x37	; 55
    1e10:	bf af       	std	Y+63, r27	; 0x3f
    1e12:	ae af       	std	Y+62, r26	; 0x3e
    1e14:	e7 97       	sbiw	r28, 0x37	; 55
    1e16:	14 97       	sbiw	r26, 0x04	; 4
    1e18:	0c f0       	brlt	.+2      	; 0x1e1c <localization+0x168>
    1e1a:	5c c6       	rjmp	.+3256   	; 0x2ad4 <localization+0xe20>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1e1c:	eb 96       	adiw	r28, 0x3b	; 59
    1e1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e20:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e22:	eb 97       	sbiw	r28, 0x3b	; 59
    1e24:	81 90       	ld	r8, Z+
    1e26:	91 90       	ld	r9, Z+
    1e28:	a1 90       	ld	r10, Z+
    1e2a:	b1 90       	ld	r11, Z+
    1e2c:	e9 96       	adiw	r28, 0x39	; 57
    1e2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e32:	e9 97       	sbiw	r28, 0x39	; 57
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	29 e3       	ldi	r18, 0x39	; 57
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	2c 0f       	add	r18, r28
    1e3e:	3d 1f       	adc	r19, r29
    1e40:	28 0f       	add	r18, r24
    1e42:	39 1f       	adc	r19, r25
    1e44:	a3 96       	adiw	r28, 0x23	; 35
    1e46:	3f af       	std	Y+63, r19	; 0x3f
    1e48:	2e af       	std	Y+62, r18	; 0x3e
    1e4a:	a3 97       	sbiw	r28, 0x23	; 35
    1e4c:	a5 e4       	ldi	r26, 0x45	; 69
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	ac 0f       	add	r26, r28
    1e52:	bd 1f       	adc	r27, r29
    1e54:	a8 0f       	add	r26, r24
    1e56:	b9 1f       	adc	r27, r25
    1e58:	a7 96       	adiw	r28, 0x27	; 39
    1e5a:	bf af       	std	Y+63, r27	; 0x3f
    1e5c:	ae af       	std	Y+62, r26	; 0x3e
    1e5e:	a7 97       	sbiw	r28, 0x27	; 39
    1e60:	e9 96       	adiw	r28, 0x39	; 57
    1e62:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e66:	e9 97       	sbiw	r28, 0x39	; 57
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0f 2e       	mov	r0, r31
    1e72:	f1 e2       	ldi	r31, 0x21	; 33
    1e74:	6f 2e       	mov	r6, r31
    1e76:	71 2c       	mov	r7, r1
    1e78:	f0 2d       	mov	r31, r0
    1e7a:	6c 0e       	add	r6, r28
    1e7c:	7d 1e       	adc	r7, r29
    1e7e:	68 0e       	add	r6, r24
    1e80:	79 1e       	adc	r7, r25
    1e82:	e3 96       	adiw	r28, 0x33	; 51
    1e84:	2e ad       	ldd	r18, Y+62	; 0x3e
    1e86:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e88:	e3 97       	sbiw	r28, 0x33	; 51
    1e8a:	2c 5f       	subi	r18, 0xFC	; 252
    1e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8e:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1e90:	e7 96       	adiw	r28, 0x37	; 55
    1e92:	0e ad       	ldd	r16, Y+62	; 0x3e
    1e94:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e96:	e7 97       	sbiw	r28, 0x37	; 55
    1e98:	e1 96       	adiw	r28, 0x31	; 49
    1e9a:	8c ae       	std	Y+60, r8	; 0x3c
    1e9c:	9d ae       	std	Y+61, r9	; 0x3d
    1e9e:	ae ae       	std	Y+62, r10	; 0x3e
    1ea0:	bf ae       	std	Y+63, r11	; 0x3f
    1ea2:	e1 97       	sbiw	r28, 0x31	; 49
    1ea4:	59 01       	movw	r10, r18
    1ea6:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 ec       	ldi	r19, 0xC0	; 192
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	54 e4       	ldi	r21, 0x44	; 68
    1eb0:	e1 96       	adiw	r28, 0x31	; 49
    1eb2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eb4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eba:	e1 97       	sbiw	r28, 0x31	; 49
    1ebc:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <localization+0x212>
    1ec4:	70 c0       	rjmp	.+224    	; 0x1fa6 <localization+0x2f2>
    1ec6:	e3 96       	adiw	r28, 0x33	; 51
    1ec8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1eca:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ecc:	e3 97       	sbiw	r28, 0x33	; 51
    1ece:	cd 90       	ld	r12, X+
    1ed0:	dd 90       	ld	r13, X+
    1ed2:	ed 90       	ld	r14, X+
    1ed4:	fc 90       	ld	r15, X
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 ec       	ldi	r19, 0xC0	; 192
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	c7 01       	movw	r24, r14
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <localization+0x238>
    1eea:	5d c0       	rjmp	.+186    	; 0x1fa6 <localization+0x2f2>
    1eec:	f1 01       	movw	r30, r2
    1eee:	40 80       	ld	r4, Z
    1ef0:	51 80       	ldd	r5, Z+1	; 0x01
    1ef2:	62 80       	ldd	r6, Z+2	; 0x02
    1ef4:	73 80       	ldd	r7, Z+3	; 0x03
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 ec       	ldi	r19, 0xC0	; 192
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	54 e4       	ldi	r21, 0x44	; 68
    1efe:	c3 01       	movw	r24, r6
    1f00:	b2 01       	movw	r22, r4
    1f02:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <localization+0x258>
    1f0a:	4d c0       	rjmp	.+154    	; 0x1fa6 <localization+0x2f2>
    1f0c:	d5 01       	movw	r26, r10
    1f0e:	8d 91       	ld	r24, X+
    1f10:	9d 91       	ld	r25, X+
    1f12:	0d 90       	ld	r0, X+
    1f14:	bc 91       	ld	r27, X
    1f16:	a0 2d       	mov	r26, r0
    1f18:	c1 58       	subi	r28, 0x81	; 129
    1f1a:	df 4f       	sbci	r29, 0xFF	; 255
    1f1c:	88 83       	st	Y, r24
    1f1e:	99 83       	std	Y+1, r25	; 0x01
    1f20:	aa 83       	std	Y+2, r26	; 0x02
    1f22:	bb 83       	std	Y+3, r27	; 0x03
    1f24:	cf 57       	subi	r28, 0x7F	; 127
    1f26:	d0 40       	sbci	r29, 0x00	; 0
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 ec       	ldi	r19, 0xC0	; 192
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	a9 f1       	breq	.+106    	; 0x1fa6 <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    1f3c:	a3 01       	movw	r20, r6
    1f3e:	92 01       	movw	r18, r4
    1f40:	e1 96       	adiw	r28, 0x31	; 49
    1f42:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f44:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f46:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f48:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f4a:	e1 97       	sbiw	r28, 0x31	; 49
    1f4c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    1f50:	2b 01       	movw	r4, r22
    1f52:	3c 01       	movw	r6, r24
    1f54:	c1 58       	subi	r28, 0x81	; 129
    1f56:	df 4f       	sbci	r29, 0xFF	; 255
    1f58:	28 81       	ld	r18, Y
    1f5a:	39 81       	ldd	r19, Y+1	; 0x01
    1f5c:	4a 81       	ldd	r20, Y+2	; 0x02
    1f5e:	5b 81       	ldd	r21, Y+3	; 0x03
    1f60:	cf 57       	subi	r28, 0x7F	; 127
    1f62:	d0 40       	sbci	r29, 0x00	; 0
    1f64:	c7 01       	movw	r24, r14
    1f66:	b6 01       	movw	r22, r12
    1f68:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    1f6c:	6b 01       	movw	r12, r22
    1f6e:	7c 01       	movw	r14, r24
    1f70:	a3 01       	movw	r20, r6
    1f72:	92 01       	movw	r18, r4
    1f74:	c3 01       	movw	r24, r6
    1f76:	b2 01       	movw	r22, r4
    1f78:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1f7c:	2b 01       	movw	r4, r22
    1f7e:	3c 01       	movw	r6, r24
    1f80:	a7 01       	movw	r20, r14
    1f82:	96 01       	movw	r18, r12
    1f84:	c7 01       	movw	r24, r14
    1f86:	b6 01       	movw	r22, r12
    1f88:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    1f8c:	9b 01       	movw	r18, r22
    1f8e:	ac 01       	movw	r20, r24
    1f90:	c3 01       	movw	r24, r6
    1f92:	b2 01       	movw	r22, r4
    1f94:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    1f98:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <sqrt>
    1f9c:	f4 01       	movw	r30, r8
    1f9e:	60 83       	st	Z, r22
    1fa0:	71 83       	std	Z+1, r23	; 0x01
    1fa2:	82 83       	std	Z+2, r24	; 0x02
    1fa4:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1fa6:	a3 96       	adiw	r28, 0x23	; 35
    1fa8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1faa:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fac:	a3 97       	sbiw	r28, 0x23	; 35
    1fae:	ab 96       	adiw	r28, 0x2b	; 43
    1fb0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fb2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fb4:	ab 97       	sbiw	r28, 0x2b	; 43
    1fb6:	ed 93       	st	X+, r30
    1fb8:	fd 93       	st	X+, r31
    1fba:	a3 96       	adiw	r28, 0x23	; 35
    1fbc:	bf af       	std	Y+63, r27	; 0x3f
    1fbe:	ae af       	std	Y+62, r26	; 0x3e
    1fc0:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1fc2:	a7 96       	adiw	r28, 0x27	; 39
    1fc4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fc6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fc8:	a7 97       	sbiw	r28, 0x27	; 39
    1fca:	0d 93       	st	X+, r16
    1fcc:	1d 93       	st	X+, r17
    1fce:	a7 96       	adiw	r28, 0x27	; 39
    1fd0:	bf af       	std	Y+63, r27	; 0x3f
    1fd2:	ae af       	std	Y+62, r26	; 0x3e
    1fd4:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1fd6:	0f 5f       	subi	r16, 0xFF	; 255
    1fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fda:	b4 e0       	ldi	r27, 0x04	; 4
    1fdc:	2b 0e       	add	r2, r27
    1fde:	31 1c       	adc	r3, r1
    1fe0:	e4 e0       	ldi	r30, 0x04	; 4
    1fe2:	ae 0e       	add	r10, r30
    1fe4:	b1 1c       	adc	r11, r1
    1fe6:	f4 e0       	ldi	r31, 0x04	; 4
    1fe8:	8f 0e       	add	r8, r31
    1fea:	91 1c       	adc	r9, r1
    1fec:	04 30       	cpi	r16, 0x04	; 4
    1fee:	11 05       	cpc	r17, r1
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <localization+0x340>
    1ff2:	5a cf       	rjmp	.-332    	; 0x1ea8 <localization+0x1f4>
    1ff4:	e9 96       	adiw	r28, 0x39	; 57
    1ff6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ff8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ffa:	e9 97       	sbiw	r28, 0x39	; 57
    1ffc:	e7 96       	adiw	r28, 0x37	; 55
    1ffe:	2e ad       	ldd	r18, Y+62	; 0x3e
    2000:	3f ad       	ldd	r19, Y+63	; 0x3f
    2002:	e7 97       	sbiw	r28, 0x37	; 55
    2004:	82 1b       	sub	r24, r18
    2006:	93 0b       	sbc	r25, r19
    2008:	dc 01       	movw	r26, r24
    200a:	14 96       	adiw	r26, 0x04	; 4
    200c:	e9 96       	adiw	r28, 0x39	; 57
    200e:	bf af       	std	Y+63, r27	; 0x3f
    2010:	ae af       	std	Y+62, r26	; 0x3e
    2012:	e9 97       	sbiw	r28, 0x39	; 57
    2014:	eb 96       	adiw	r28, 0x3b	; 59
    2016:	ee ad       	ldd	r30, Y+62	; 0x3e
    2018:	ff ad       	ldd	r31, Y+63	; 0x3f
    201a:	eb 97       	sbiw	r28, 0x3b	; 59
    201c:	34 96       	adiw	r30, 0x04	; 4
    201e:	eb 96       	adiw	r28, 0x3b	; 59
    2020:	ff af       	std	Y+63, r31	; 0x3f
    2022:	ee af       	std	Y+62, r30	; 0x3e
    2024:	eb 97       	sbiw	r28, 0x3b	; 59
    2026:	e3 96       	adiw	r28, 0x33	; 51
    2028:	2e ad       	ldd	r18, Y+62	; 0x3e
    202a:	3f ad       	ldd	r19, Y+63	; 0x3f
    202c:	e3 97       	sbiw	r28, 0x33	; 51
    202e:	2c 5f       	subi	r18, 0xFC	; 252
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	e3 96       	adiw	r28, 0x33	; 51
    2034:	3f af       	std	Y+63, r19	; 0x3f
    2036:	2e af       	std	Y+62, r18	; 0x3e
    2038:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    203a:	e7 96       	adiw	r28, 0x37	; 55
    203c:	8e ad       	ldd	r24, Y+62	; 0x3e
    203e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2040:	e7 97       	sbiw	r28, 0x37	; 55
    2042:	03 97       	sbiw	r24, 0x03	; 3
    2044:	49 f0       	breq	.+18     	; 0x2058 <localization+0x3a4>
    2046:	e7 96       	adiw	r28, 0x37	; 55
    2048:	ae ad       	ldd	r26, Y+62	; 0x3e
    204a:	bf ad       	ldd	r27, Y+63	; 0x3f
    204c:	e7 97       	sbiw	r28, 0x37	; 55
    204e:	ab 96       	adiw	r28, 0x2b	; 43
    2050:	bf af       	std	Y+63, r27	; 0x3f
    2052:	ae af       	std	Y+62, r26	; 0x3e
    2054:	ab 97       	sbiw	r28, 0x2b	; 43
    2056:	d6 ce       	rjmp	.-596    	; 0x1e04 <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    2058:	e9 96       	adiw	r28, 0x39	; 57
    205a:	ee ad       	ldd	r30, Y+62	; 0x3e
    205c:	ff ad       	ldd	r31, Y+63	; 0x3f
    205e:	e9 97       	sbiw	r28, 0x39	; 57
    2060:	1e 16       	cp	r1, r30
    2062:	1f 06       	cpc	r1, r31
    2064:	84 f5       	brge	.+96     	; 0x20c6 <localization+0x412>
    2066:	6e 01       	movw	r12, r28
    2068:	f1 e2       	ldi	r31, 0x21	; 33
    206a:	cf 0e       	add	r12, r31
    206c:	d1 1c       	adc	r13, r1
    206e:	21 2c       	mov	r2, r1
    2070:	31 2c       	mov	r3, r1
    2072:	00 e0       	ldi	r16, 0x00	; 0
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	e1 2c       	mov	r14, r1
    2078:	f1 2c       	mov	r15, r1
    207a:	e9 96       	adiw	r28, 0x39	; 57
    207c:	ae ac       	ldd	r10, Y+62	; 0x3e
    207e:	bf ac       	ldd	r11, Y+63	; 0x3f
    2080:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    2082:	d6 01       	movw	r26, r12
    2084:	4d 90       	ld	r4, X+
    2086:	5d 90       	ld	r5, X+
    2088:	6d 90       	ld	r6, X+
    208a:	7d 90       	ld	r7, X+
    208c:	6d 01       	movw	r12, r26
    208e:	b8 01       	movw	r22, r16
    2090:	88 27       	eor	r24, r24
    2092:	77 fd       	sbrc	r23, 7
    2094:	80 95       	com	r24
    2096:	98 2f       	mov	r25, r24
    2098:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
    209c:	9b 01       	movw	r18, r22
    209e:	ac 01       	movw	r20, r24
    20a0:	c3 01       	movw	r24, r6
    20a2:	b2 01       	movw	r22, r4
    20a4:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__gesf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	34 f4       	brge	.+12     	; 0x20b8 <localization+0x404>
			indmax = i;
			dmax = d[i];
    20ac:	c3 01       	movw	r24, r6
    20ae:	b2 01       	movw	r22, r4
    20b0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    20b4:	8b 01       	movw	r16, r22
    20b6:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    20b8:	bf ef       	ldi	r27, 0xFF	; 255
    20ba:	eb 1a       	sub	r14, r27
    20bc:	fb 0a       	sbc	r15, r27
    20be:	ea 14       	cp	r14, r10
    20c0:	fb 04       	cpc	r15, r11
    20c2:	f9 f6       	brne	.-66     	; 0x2082 <localization+0x3ce>
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <localization+0x41a>
    20c6:	21 2c       	mov	r2, r1
    20c8:	31 2c       	mov	r3, r1
    20ca:	00 e0       	ldi	r16, 0x00	; 0
    20cc:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    20ce:	83 ec       	ldi	r24, 0xC3	; 195
    20d0:	92 e0       	ldi	r25, 0x02	; 2
    20d2:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(dmax);
    20d6:	c8 01       	movw	r24, r16
    20d8:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    20dc:	81 ec       	ldi	r24, 0xC1	; 193
    20de:	92 e0       	ldi	r25, 0x02	; 2
    20e0:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    20e4:	e9 96       	adiw	r28, 0x39	; 57
    20e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    20e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    20ea:	e9 97       	sbiw	r28, 0x39	; 57
    20ec:	1e 16       	cp	r1, r30
    20ee:	1f 06       	cpc	r1, r31
    20f0:	dc f5       	brge	.+118    	; 0x2168 <localization+0x4b4>
    20f2:	6e 01       	movw	r12, r28
    20f4:	f1 e2       	ldi	r31, 0x21	; 33
    20f6:	cf 0e       	add	r12, r31
    20f8:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    20fa:	a3 96       	adiw	r28, 0x23	; 35
    20fc:	1f ae       	std	Y+63, r1	; 0x3f
    20fe:	1e ae       	std	Y+62, r1	; 0x3e
    2100:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    2102:	0f 2e       	mov	r0, r31
    2104:	f0 e1       	ldi	r31, 0x10	; 16
    2106:	af 2e       	mov	r10, r31
    2108:	f7 e2       	ldi	r31, 0x27	; 39
    210a:	bf 2e       	mov	r11, r31
    210c:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    210e:	e1 2c       	mov	r14, r1
    2110:	f1 2c       	mov	r15, r1
    2112:	48 01       	movw	r8, r16
    2114:	e9 96       	adiw	r28, 0x39	; 57
    2116:	0e ad       	ldd	r16, Y+62	; 0x3e
    2118:	1f ad       	ldd	r17, Y+63	; 0x3f
    211a:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    211c:	d6 01       	movw	r26, r12
    211e:	4d 90       	ld	r4, X+
    2120:	5d 90       	ld	r5, X+
    2122:	6d 90       	ld	r6, X+
    2124:	7d 90       	ld	r7, X+
    2126:	6d 01       	movw	r12, r26
    2128:	b5 01       	movw	r22, r10
    212a:	88 27       	eor	r24, r24
    212c:	77 fd       	sbrc	r23, 7
    212e:	80 95       	com	r24
    2130:	98 2f       	mov	r25, r24
    2132:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
    2136:	9b 01       	movw	r18, r22
    2138:	ac 01       	movw	r20, r24
    213a:	c3 01       	movw	r24, r6
    213c:	b2 01       	movw	r22, r4
    213e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    2142:	88 23       	and	r24, r24
    2144:	4c f4       	brge	.+18     	; 0x2158 <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    2146:	c3 01       	movw	r24, r6
    2148:	b2 01       	movw	r22, r4
    214a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    214e:	5b 01       	movw	r10, r22
    2150:	a3 96       	adiw	r28, 0x23	; 35
    2152:	ff ae       	std	Y+63, r15	; 0x3f
    2154:	ee ae       	std	Y+62, r14	; 0x3e
    2156:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    2158:	bf ef       	ldi	r27, 0xFF	; 255
    215a:	eb 1a       	sub	r14, r27
    215c:	fb 0a       	sbc	r15, r27
    215e:	e0 16       	cp	r14, r16
    2160:	f1 06       	cpc	r15, r17
    2162:	e1 f6       	brne	.-72     	; 0x211c <localization+0x468>
    2164:	84 01       	movw	r16, r8
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    2168:	a3 96       	adiw	r28, 0x23	; 35
    216a:	1f ae       	std	Y+63, r1	; 0x3f
    216c:	1e ae       	std	Y+62, r1	; 0x3e
    216e:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    2170:	80 90 20 01 	lds	r8, 0x0120
    2174:	90 90 21 01 	lds	r9, 0x0121
    2178:	a0 90 22 01 	lds	r10, 0x0122
    217c:	b0 90 23 01 	lds	r11, 0x0123
    2180:	b8 01       	movw	r22, r16
    2182:	88 27       	eor	r24, r24
    2184:	77 fd       	sbrc	r23, 7
    2186:	80 95       	com	r24
    2188:	98 2f       	mov	r25, r24
    218a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
    218e:	a5 01       	movw	r20, r10
    2190:	94 01       	movw	r18, r8
    2192:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2196:	2b 01       	movw	r4, r22
    2198:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    219a:	c0 90 24 01 	lds	r12, 0x0124
    219e:	d0 90 25 01 	lds	r13, 0x0125
    21a2:	e0 90 26 01 	lds	r14, 0x0126
    21a6:	f0 90 27 01 	lds	r15, 0x0127
    21aa:	e4 e1       	ldi	r30, 0x14	; 20
    21ac:	f1 e0       	ldi	r31, 0x01	; 1
    21ae:	ab 96       	adiw	r28, 0x2b	; 43
    21b0:	ff af       	std	Y+63, r31	; 0x3f
    21b2:	ee af       	std	Y+62, r30	; 0x3e
    21b4:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    21b6:	a7 96       	adiw	r28, 0x27	; 39
    21b8:	1f ae       	std	Y+63, r1	; 0x3f
    21ba:	1e ae       	std	Y+62, r1	; 0x3e
    21bc:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    21be:	01 e0       	ldi	r16, 0x01	; 1
    21c0:	10 e0       	ldi	r17, 0x00	; 0
    21c2:	af 96       	adiw	r28, 0x2f	; 47
    21c4:	3f ae       	std	Y+63, r3	; 0x3f
    21c6:	2e ae       	std	Y+62, r2	; 0x3e
    21c8:	af 97       	sbiw	r28, 0x2f	; 47
    21ca:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    21cc:	d1 01       	movw	r26, r2
    21ce:	2d 91       	ld	r18, X+
    21d0:	3d 91       	ld	r19, X+
    21d2:	4d 91       	ld	r20, X+
    21d4:	5d 91       	ld	r21, X+
    21d6:	1d 01       	movw	r2, r26
    21d8:	c3 01       	movw	r24, r6
    21da:	b2 01       	movw	r22, r4
    21dc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    21e0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    21e4:	9b 01       	movw	r18, r22
    21e6:	77 23       	and	r23, r23
    21e8:	24 f4       	brge	.+8      	; 0x21f2 <localization+0x53e>
    21ea:	22 27       	eor	r18, r18
    21ec:	33 27       	eor	r19, r19
    21ee:	26 1b       	sub	r18, r22
    21f0:	37 0b       	sbc	r19, r23
    21f2:	b9 01       	movw	r22, r18
    21f4:	88 27       	eor	r24, r24
    21f6:	77 fd       	sbrc	r23, 7
    21f8:	80 95       	com	r24
    21fa:	98 2f       	mov	r25, r24
    21fc:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__floatsisf>
    2200:	a7 01       	movw	r20, r14
    2202:	96 01       	movw	r18, r12
    2204:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__cmpsf2>
    2208:	88 23       	and	r24, r24
    220a:	24 f4       	brge	.+8      	; 0x2214 <localization+0x560>
    220c:	a7 96       	adiw	r28, 0x27	; 39
    220e:	1f af       	std	Y+63, r17	; 0x3f
    2210:	0e af       	std	Y+62, r16	; 0x3e
    2212:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    2214:	0f 5f       	subi	r16, 0xFF	; 255
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	04 30       	cpi	r16, 0x04	; 4
    221a:	11 05       	cpc	r17, r1
    221c:	b9 f6       	brne	.-82     	; 0x21cc <localization+0x518>
    221e:	af 96       	adiw	r28, 0x2f	; 47
    2220:	2e ac       	ldd	r2, Y+62	; 0x3e
    2222:	3f ac       	ldd	r3, Y+63	; 0x3f
    2224:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    2226:	65 96       	adiw	r28, 0x15	; 21
    2228:	1c ae       	std	Y+60, r1	; 0x3c
    222a:	1d ae       	std	Y+61, r1	; 0x3d
    222c:	1e ae       	std	Y+62, r1	; 0x3e
    222e:	1f ae       	std	Y+63, r1	; 0x3f
    2230:	65 97       	sbiw	r28, 0x15	; 21
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	a0 e8       	ldi	r26, 0x80	; 128
    2238:	bf e3       	ldi	r27, 0x3F	; 63
    223a:	69 96       	adiw	r28, 0x19	; 25
    223c:	8c af       	std	Y+60, r24	; 0x3c
    223e:	9d af       	std	Y+61, r25	; 0x3d
    2240:	ae af       	std	Y+62, r26	; 0x3e
    2242:	bf af       	std	Y+63, r27	; 0x3f
    2244:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    2246:	a7 96       	adiw	r28, 0x27	; 39
    2248:	ee ad       	ldd	r30, Y+62	; 0x3e
    224a:	ff ad       	ldd	r31, Y+63	; 0x3f
    224c:	a7 97       	sbiw	r28, 0x27	; 39
    224e:	e2 30       	cpi	r30, 0x02	; 2
    2250:	f1 05       	cpc	r31, r1
    2252:	19 f0       	breq	.+6      	; 0x225a <localization+0x5a6>
    2254:	33 97       	sbiw	r30, 0x03	; 3
    2256:	51 f1       	breq	.+84     	; 0x22ac <localization+0x5f8>
    2258:	5a c0       	rjmp	.+180    	; 0x230e <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    225a:	a5 01       	movw	r20, r10
    225c:	94 01       	movw	r18, r8
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	88 e6       	ldi	r24, 0x68	; 104
    2264:	91 e4       	ldi	r25, 0x41	; 65
    2266:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__divsf3>
    226a:	e1 96       	adiw	r28, 0x31	; 49
    226c:	6c af       	std	Y+60, r22	; 0x3c
    226e:	7d af       	std	Y+61, r23	; 0x3d
    2270:	8e af       	std	Y+62, r24	; 0x3e
    2272:	9f af       	std	Y+63, r25	; 0x3f
    2274:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    2276:	84 e9       	ldi	r24, 0x94	; 148
    2278:	97 e8       	ldi	r25, 0x87	; 135
    227a:	a5 ee       	ldi	r26, 0xE5	; 229
    227c:	be e3       	ldi	r27, 0x3E	; 62
    227e:	65 96       	adiw	r28, 0x15	; 21
    2280:	8c af       	std	Y+60, r24	; 0x3c
    2282:	9d af       	std	Y+61, r25	; 0x3d
    2284:	ae af       	std	Y+62, r26	; 0x3e
    2286:	bf af       	std	Y+63, r27	; 0x3f
    2288:	65 97       	sbiw	r28, 0x15	; 21
    228a:	81 ea       	ldi	r24, 0xA1	; 161
    228c:	96 ed       	ldi	r25, 0xD6	; 214
    228e:	a4 e6       	ldi	r26, 0x64	; 100
    2290:	bf eb       	ldi	r27, 0xBF	; 191
    2292:	69 96       	adiw	r28, 0x19	; 25
    2294:	8c af       	std	Y+60, r24	; 0x3c
    2296:	9d af       	std	Y+61, r25	; 0x3d
    2298:	ae af       	std	Y+62, r26	; 0x3e
    229a:	bf af       	std	Y+63, r27	; 0x3f
    229c:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    229e:	e5 96       	adiw	r28, 0x35	; 53
    22a0:	1c ae       	std	Y+60, r1	; 0x3c
    22a2:	1d ae       	std	Y+61, r1	; 0x3d
    22a4:	1e ae       	std	Y+62, r1	; 0x3e
    22a6:	1f ae       	std	Y+63, r1	; 0x3f
    22a8:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    22aa:	45 c0       	rjmp	.+138    	; 0x2336 <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    22ac:	a5 01       	movw	r20, r10
    22ae:	94 01       	movw	r18, r8
    22b0:	61 ee       	ldi	r22, 0xE1	; 225
    22b2:	7a e7       	ldi	r23, 0x7A	; 122
    22b4:	8a e3       	ldi	r24, 0x3A	; 58
    22b6:	91 e4       	ldi	r25, 0x41	; 65
    22b8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__divsf3>
    22bc:	e5 96       	adiw	r28, 0x35	; 53
    22be:	6c af       	std	Y+60, r22	; 0x3c
    22c0:	7d af       	std	Y+61, r23	; 0x3d
    22c2:	8e af       	std	Y+62, r24	; 0x3e
    22c4:	9f af       	std	Y+63, r25	; 0x3f
    22c6:	e5 97       	sbiw	r28, 0x35	; 53
    22c8:	a5 01       	movw	r20, r10
    22ca:	94 01       	movw	r18, r8
    22cc:	63 e2       	ldi	r22, 0x23	; 35
    22ce:	7b ed       	ldi	r23, 0xDB	; 219
    22d0:	8b e0       	ldi	r24, 0x0B	; 11
    22d2:	91 ec       	ldi	r25, 0xC1	; 193
    22d4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__divsf3>
    22d8:	e1 96       	adiw	r28, 0x31	; 49
    22da:	6c af       	std	Y+60, r22	; 0x3c
    22dc:	7d af       	std	Y+61, r23	; 0x3d
    22de:	8e af       	std	Y+62, r24	; 0x3e
    22e0:	9f af       	std	Y+63, r25	; 0x3f
    22e2:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    22e4:	86 e6       	ldi	r24, 0x66	; 102
    22e6:	96 e6       	ldi	r25, 0x66	; 102
    22e8:	a6 e7       	ldi	r26, 0x76	; 118
    22ea:	bf eb       	ldi	r27, 0xBF	; 191
    22ec:	65 96       	adiw	r28, 0x15	; 21
    22ee:	8c af       	std	Y+60, r24	; 0x3c
    22f0:	9d af       	std	Y+61, r25	; 0x3d
    22f2:	ae af       	std	Y+62, r26	; 0x3e
    22f4:	bf af       	std	Y+63, r27	; 0x3f
    22f6:	65 97       	sbiw	r28, 0x15	; 21
    22f8:	8f e9       	ldi	r24, 0x9F	; 159
    22fa:	9d ec       	ldi	r25, 0xCD	; 205
    22fc:	aa e8       	ldi	r26, 0x8A	; 138
    22fe:	be e3       	ldi	r27, 0x3E	; 62
    2300:	69 96       	adiw	r28, 0x19	; 25
    2302:	8c af       	std	Y+60, r24	; 0x3c
    2304:	9d af       	std	Y+61, r25	; 0x3d
    2306:	ae af       	std	Y+62, r26	; 0x3e
    2308:	bf af       	std	Y+63, r27	; 0x3f
    230a:	69 97       	sbiw	r28, 0x19	; 25
			break;
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    230e:	a7 96       	adiw	r28, 0x27	; 39
    2310:	2e ad       	ldd	r18, Y+62	; 0x3e
    2312:	3f ad       	ldd	r19, Y+63	; 0x3f
    2314:	a7 97       	sbiw	r28, 0x27	; 39
    2316:	12 16       	cp	r1, r18
    2318:	13 06       	cpc	r1, r19
    231a:	0c f0       	brlt	.+2      	; 0x231e <localization+0x66a>
    231c:	4a c3       	rjmp	.+1684   	; 0x29b2 <localization+0xcfe>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    231e:	e5 96       	adiw	r28, 0x35	; 53
    2320:	1c ae       	std	Y+60, r1	; 0x3c
    2322:	1d ae       	std	Y+61, r1	; 0x3d
    2324:	1e ae       	std	Y+62, r1	; 0x3e
    2326:	1f ae       	std	Y+63, r1	; 0x3f
    2328:	e5 97       	sbiw	r28, 0x35	; 53
    232a:	e1 96       	adiw	r28, 0x31	; 49
    232c:	1c ae       	std	Y+60, r1	; 0x3c
    232e:	1d ae       	std	Y+61, r1	; 0x3d
    2330:	1e ae       	std	Y+62, r1	; 0x3e
    2332:	1f ae       	std	Y+63, r1	; 0x3f
    2334:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    2336:	f1 01       	movw	r30, r2
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	8c 0f       	add	r24, r28
    2342:	9d 1f       	adc	r25, r29
    2344:	e8 0f       	add	r30, r24
    2346:	f9 1f       	adc	r31, r25
    2348:	00 ad       	ldd	r16, Z+56	; 0x38
    234a:	11 ad       	ldd	r17, Z+57	; 0x39
    234c:	a3 96       	adiw	r28, 0x23	; 35
    234e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2350:	ff ad       	ldd	r31, Y+63	; 0x3f
    2352:	a3 97       	sbiw	r28, 0x23	; 35
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	e8 0f       	add	r30, r24
    235a:	f9 1f       	adc	r31, r25
    235c:	80 ad       	ldd	r24, Z+56	; 0x38
    235e:	91 ad       	ldd	r25, Z+57	; 0x39
    2360:	80 17       	cp	r24, r16
    2362:	91 07       	cpc	r25, r17
    2364:	89 f0       	breq	.+34     	; 0x2388 <localization+0x6d4>
    2366:	a3 96       	adiw	r28, 0x23	; 35
    2368:	ee ad       	ldd	r30, Y+62	; 0x3e
    236a:	ff ad       	ldd	r31, Y+63	; 0x3f
    236c:	a3 97       	sbiw	r28, 0x23	; 35
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	a5 e4       	ldi	r26, 0x45	; 69
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ac 0f       	add	r26, r28
    2378:	bd 1f       	adc	r27, r29
    237a:	ea 0f       	add	r30, r26
    237c:	fb 1f       	adc	r31, r27
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	08 17       	cp	r16, r24
    2384:	19 07       	cpc	r17, r25
    2386:	69 f4       	brne	.+26     	; 0x23a2 <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    2388:	d1 01       	movw	r26, r2
    238a:	aa 0f       	add	r26, r26
    238c:	bb 1f       	adc	r27, r27
    238e:	e5 e4       	ldi	r30, 0x45	; 69
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	ec 0f       	add	r30, r28
    2394:	fd 1f       	adc	r31, r29
    2396:	ae 0f       	add	r26, r30
    2398:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    239a:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    239c:	0d 91       	ld	r16, X+
    239e:	1c 91       	ld	r17, X
    23a0:	0c c0       	rjmp	.+24     	; 0x23ba <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    23a2:	f1 01       	movw	r30, r2
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	25 e4       	ldi	r18, 0x45	; 69
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	2c 0f       	add	r18, r28
    23ae:	3d 1f       	adc	r19, r29
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	01 90       	ld	r0, Z+
    23b6:	f0 81       	ld	r31, Z
    23b8:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    23ba:	a7 96       	adiw	r28, 0x27	; 39
    23bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    23be:	9f ad       	ldd	r25, Y+63	; 0x3f
    23c0:	a7 97       	sbiw	r28, 0x27	; 39
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <localization+0x714>
    23c6:	45 c0       	rjmp	.+138    	; 0x2452 <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    23c8:	6f 01       	movw	r12, r30
    23ca:	cc 0c       	add	r12, r12
    23cc:	dd 1c       	adc	r13, r13
    23ce:	cc 0c       	add	r12, r12
    23d0:	dd 1c       	adc	r13, r13
    23d2:	a1 e0       	ldi	r26, 0x01	; 1
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	ac 0f       	add	r26, r28
    23d8:	bd 1f       	adc	r27, r29
    23da:	ca 0e       	add	r12, r26
    23dc:	db 1e       	adc	r13, r27
    23de:	78 01       	movw	r14, r16
    23e0:	ee 0c       	add	r14, r14
    23e2:	ff 1c       	adc	r15, r15
    23e4:	ee 0c       	add	r14, r14
    23e6:	ff 1c       	adc	r15, r15
    23e8:	ea 0e       	add	r14, r26
    23ea:	fb 1e       	adc	r15, r27
    23ec:	f7 01       	movw	r30, r14
    23ee:	20 81       	ld	r18, Z
    23f0:	31 81       	ldd	r19, Z+1	; 0x01
    23f2:	42 81       	ldd	r20, Z+2	; 0x02
    23f4:	53 81       	ldd	r21, Z+3	; 0x03
    23f6:	d6 01       	movw	r26, r12
    23f8:	6d 91       	ld	r22, X+
    23fa:	7d 91       	ld	r23, X+
    23fc:	8d 91       	ld	r24, X+
    23fe:	9c 91       	ld	r25, X
    2400:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2410:	ad 96       	adiw	r28, 0x2d	; 45
    2412:	6c af       	std	Y+60, r22	; 0x3c
    2414:	7d af       	std	Y+61, r23	; 0x3d
    2416:	8e af       	std	Y+62, r24	; 0x3e
    2418:	9f af       	std	Y+63, r25	; 0x3f
    241a:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    241c:	f7 01       	movw	r30, r14
    241e:	20 89       	ldd	r18, Z+16	; 0x10
    2420:	31 89       	ldd	r19, Z+17	; 0x11
    2422:	42 89       	ldd	r20, Z+18	; 0x12
    2424:	53 89       	ldd	r21, Z+19	; 0x13
    2426:	d6 01       	movw	r26, r12
    2428:	50 96       	adiw	r26, 0x10	; 16
    242a:	6d 91       	ld	r22, X+
    242c:	7d 91       	ld	r23, X+
    242e:	8d 91       	ld	r24, X+
    2430:	9c 91       	ld	r25, X
    2432:	53 97       	sbiw	r26, 0x13	; 19
    2434:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2444:	a9 96       	adiw	r28, 0x29	; 41
    2446:	6c af       	std	Y+60, r22	; 0x3c
    2448:	7d af       	std	Y+61, r23	; 0x3d
    244a:	8e af       	std	Y+62, r24	; 0x3e
    244c:	9f af       	std	Y+63, r25	; 0x3f
    244e:	a9 97       	sbiw	r28, 0x29	; 41
    2450:	1e c0       	rjmp	.+60     	; 0x248e <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	2c 0f       	add	r18, r28
    2460:	3d 1f       	adc	r19, r29
    2462:	e2 0f       	add	r30, r18
    2464:	f3 1f       	adc	r31, r19
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	a2 81       	ldd	r26, Z+2	; 0x02
    246c:	b3 81       	ldd	r27, Z+3	; 0x03
    246e:	ad 96       	adiw	r28, 0x2d	; 45
    2470:	8c af       	std	Y+60, r24	; 0x3c
    2472:	9d af       	std	Y+61, r25	; 0x3d
    2474:	ae af       	std	Y+62, r26	; 0x3e
    2476:	bf af       	std	Y+63, r27	; 0x3f
    2478:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    247a:	80 89       	ldd	r24, Z+16	; 0x10
    247c:	91 89       	ldd	r25, Z+17	; 0x11
    247e:	a2 89       	ldd	r26, Z+18	; 0x12
    2480:	b3 89       	ldd	r27, Z+19	; 0x13
    2482:	a9 96       	adiw	r28, 0x29	; 41
    2484:	8c af       	std	Y+60, r24	; 0x3c
    2486:	9d af       	std	Y+61, r25	; 0x3d
    2488:	ae af       	std	Y+62, r26	; 0x3e
    248a:	bf af       	std	Y+63, r27	; 0x3f
    248c:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    248e:	00 0f       	add	r16, r16
    2490:	11 1f       	adc	r17, r17
    2492:	00 0f       	add	r16, r16
    2494:	11 1f       	adc	r17, r17
    2496:	a1 e0       	ldi	r26, 0x01	; 1
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	ac 0f       	add	r26, r28
    249c:	bd 1f       	adc	r27, r29
    249e:	0a 0f       	add	r16, r26
    24a0:	1b 1f       	adc	r17, r27
    24a2:	ad 96       	adiw	r28, 0x2d	; 45
    24a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    24a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    24a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    24aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    24ac:	ad 97       	sbiw	r28, 0x2d	; 45
    24ae:	f8 01       	movw	r30, r16
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    24bc:	4b 01       	movw	r8, r22
    24be:	5c 01       	movw	r10, r24
    24c0:	a9 96       	adiw	r28, 0x29	; 41
    24c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    24c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    24c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    24c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    24ca:	a9 97       	sbiw	r28, 0x29	; 41
    24cc:	d8 01       	movw	r26, r16
    24ce:	50 96       	adiw	r26, 0x10	; 16
    24d0:	6d 91       	ld	r22, X+
    24d2:	7d 91       	ld	r23, X+
    24d4:	8d 91       	ld	r24, X+
    24d6:	9c 91       	ld	r25, X
    24d8:	53 97       	sbiw	r26, 0x13	; 19
    24da:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    24de:	6b 01       	movw	r12, r22
    24e0:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    24e2:	a5 01       	movw	r20, r10
    24e4:	94 01       	movw	r18, r8
    24e6:	c5 01       	movw	r24, r10
    24e8:	b4 01       	movw	r22, r8
    24ea:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    24ee:	2b 01       	movw	r4, r22
    24f0:	3c 01       	movw	r6, r24
    24f2:	a7 01       	movw	r20, r14
    24f4:	96 01       	movw	r18, r12
    24f6:	c7 01       	movw	r24, r14
    24f8:	b6 01       	movw	r22, r12
    24fa:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    24fe:	9b 01       	movw	r18, r22
    2500:	ac 01       	movw	r20, r24
    2502:	c3 01       	movw	r24, r6
    2504:	b2 01       	movw	r22, r4
    2506:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    250a:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <sqrt>
    250e:	2b 01       	movw	r4, r22
    2510:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    2512:	9b 01       	movw	r18, r22
    2514:	ac 01       	movw	r20, r24
    2516:	c5 01       	movw	r24, r10
    2518:	b4 01       	movw	r22, r8
    251a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__divsf3>
    251e:	4b 01       	movw	r8, r22
    2520:	5c 01       	movw	r10, r24
    2522:	6d 96       	adiw	r28, 0x1d	; 29
    2524:	6c af       	std	Y+60, r22	; 0x3c
    2526:	7d af       	std	Y+61, r23	; 0x3d
    2528:	8e af       	std	Y+62, r24	; 0x3e
    252a:	9f af       	std	Y+63, r25	; 0x3f
    252c:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    252e:	a3 01       	movw	r20, r6
    2530:	92 01       	movw	r18, r4
    2532:	c7 01       	movw	r24, r14
    2534:	b6 01       	movw	r22, r12
    2536:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__divsf3>
    253a:	6b 01       	movw	r12, r22
    253c:	7c 01       	movw	r14, r24
    253e:	a1 96       	adiw	r28, 0x21	; 33
    2540:	6c af       	std	Y+60, r22	; 0x3c
    2542:	7d af       	std	Y+61, r23	; 0x3d
    2544:	8e af       	std	Y+62, r24	; 0x3e
    2546:	9f af       	std	Y+63, r25	; 0x3f
    2548:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    254a:	65 96       	adiw	r28, 0x15	; 21
    254c:	2c ad       	ldd	r18, Y+60	; 0x3c
    254e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2550:	4e ad       	ldd	r20, Y+62	; 0x3e
    2552:	5f ad       	ldd	r21, Y+63	; 0x3f
    2554:	65 97       	sbiw	r28, 0x15	; 21
    2556:	c5 01       	movw	r24, r10
    2558:	b4 01       	movw	r22, r8
    255a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    255e:	4b 01       	movw	r8, r22
    2560:	5c 01       	movw	r10, r24
    2562:	69 96       	adiw	r28, 0x19	; 25
    2564:	2c ad       	ldd	r18, Y+60	; 0x3c
    2566:	3d ad       	ldd	r19, Y+61	; 0x3d
    2568:	4e ad       	ldd	r20, Y+62	; 0x3e
    256a:	5f ad       	ldd	r21, Y+63	; 0x3f
    256c:	69 97       	sbiw	r28, 0x19	; 25
    256e:	c7 01       	movw	r24, r14
    2570:	b6 01       	movw	r22, r12
    2572:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2576:	9b 01       	movw	r18, r22
    2578:	ac 01       	movw	r20, r24
    257a:	c5 01       	movw	r24, r10
    257c:	b4 01       	movw	r22, r8
    257e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    2582:	2b 01       	movw	r4, r22
    2584:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    2586:	9b 01       	movw	r18, r22
    2588:	ac 01       	movw	r20, r24
    258a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    258e:	9b 01       	movw	r18, r22
    2590:	ac 01       	movw	r20, r24
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	80 e8       	ldi	r24, 0x80	; 128
    2598:	9f e3       	ldi	r25, 0x3F	; 63
    259a:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    259e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <sqrt>
    25a2:	a5 96       	adiw	r28, 0x25	; 37
    25a4:	6c af       	std	Y+60, r22	; 0x3c
    25a6:	7d af       	std	Y+61, r23	; 0x3d
    25a8:	8e af       	std	Y+62, r24	; 0x3e
    25aa:	9f af       	std	Y+63, r25	; 0x3f
    25ac:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    25ae:	fe 01       	movw	r30, r28
    25b0:	ef 5a       	subi	r30, 0xAF	; 175
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	7f 01       	movw	r14, r30
    25b6:	8e 01       	movw	r16, r28
    25b8:	07 5a       	subi	r16, 0xA7	; 167
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	9b 01       	movw	r18, r22
    25be:	ac 01       	movw	r20, r24
    25c0:	c3 01       	movw	r24, r6
    25c2:	b2 01       	movw	r22, r4
    25c4:	0e 94 ba 09 	call	0x1374	; 0x1374 <find_sign>
    25c8:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	91 05       	cpc	r25, r1
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <localization+0x91e>
    25d0:	a1 c0       	rjmp	.+322    	; 0x2714 <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    25d2:	0f 2e       	mov	r0, r31
    25d4:	fc e2       	ldi	r31, 0x2C	; 44
    25d6:	af 2e       	mov	r10, r31
    25d8:	f1 e0       	ldi	r31, 0x01	; 1
    25da:	bf 2e       	mov	r11, r31
    25dc:	f0 2d       	mov	r31, r0
    25de:	d5 01       	movw	r26, r10
    25e0:	2d 91       	ld	r18, X+
    25e2:	3d 91       	ld	r19, X+
    25e4:	4d 91       	ld	r20, X+
    25e6:	5c 91       	ld	r21, X
    25e8:	ad 96       	adiw	r28, 0x2d	; 45
    25ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    25ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    25ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    25f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    25f2:	ad 97       	sbiw	r28, 0x2d	; 45
    25f4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    25f8:	a3 01       	movw	r20, r6
    25fa:	92 01       	movw	r18, r4
    25fc:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2600:	9b 01       	movw	r18, r22
    2602:	ac 01       	movw	r20, r24
    2604:	e5 96       	adiw	r28, 0x35	; 53
    2606:	6c ad       	ldd	r22, Y+60	; 0x3c
    2608:	7d ad       	ldd	r23, Y+61	; 0x3d
    260a:	8e ad       	ldd	r24, Y+62	; 0x3e
    260c:	9f ad       	ldd	r25, Y+63	; 0x3f
    260e:	e5 97       	sbiw	r28, 0x35	; 53
    2610:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    2614:	6b 01       	movw	r12, r22
    2616:	7c 01       	movw	r14, r24
    2618:	00 e3       	ldi	r16, 0x30	; 48
    261a:	11 e0       	ldi	r17, 0x01	; 1
    261c:	f8 01       	movw	r30, r16
    261e:	20 81       	ld	r18, Z
    2620:	31 81       	ldd	r19, Z+1	; 0x01
    2622:	42 81       	ldd	r20, Z+2	; 0x02
    2624:	53 81       	ldd	r21, Z+3	; 0x03
    2626:	a9 96       	adiw	r28, 0x29	; 41
    2628:	6c ad       	ldd	r22, Y+60	; 0x3c
    262a:	7d ad       	ldd	r23, Y+61	; 0x3d
    262c:	8e ad       	ldd	r24, Y+62	; 0x3e
    262e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2630:	a9 97       	sbiw	r28, 0x29	; 41
    2632:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    2636:	a5 96       	adiw	r28, 0x25	; 37
    2638:	2c ad       	ldd	r18, Y+60	; 0x3c
    263a:	3d ad       	ldd	r19, Y+61	; 0x3d
    263c:	4e ad       	ldd	r20, Y+62	; 0x3e
    263e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2640:	a5 97       	sbiw	r28, 0x25	; 37
    2642:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2646:	9b 01       	movw	r18, r22
    2648:	ac 01       	movw	r20, r24
    264a:	c7 01       	movw	r24, r14
    264c:	b6 01       	movw	r22, r12
    264e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    2652:	ed 96       	adiw	r28, 0x3d	; 61
    2654:	ae ad       	ldd	r26, Y+62	; 0x3e
    2656:	bf ad       	ldd	r27, Y+63	; 0x3f
    2658:	ed 97       	sbiw	r28, 0x3d	; 61
    265a:	6d 93       	st	X+, r22
    265c:	7d 93       	st	X+, r23
    265e:	8d 93       	st	X+, r24
    2660:	9c 93       	st	X, r25
    2662:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    2664:	f8 01       	movw	r30, r16
    2666:	20 81       	ld	r18, Z
    2668:	31 81       	ldd	r19, Z+1	; 0x01
    266a:	42 81       	ldd	r20, Z+2	; 0x02
    266c:	53 81       	ldd	r21, Z+3	; 0x03
    266e:	a9 96       	adiw	r28, 0x29	; 41
    2670:	6c ad       	ldd	r22, Y+60	; 0x3c
    2672:	7d ad       	ldd	r23, Y+61	; 0x3d
    2674:	8e ad       	ldd	r24, Y+62	; 0x3e
    2676:	9f ad       	ldd	r25, Y+63	; 0x3f
    2678:	a9 97       	sbiw	r28, 0x29	; 41
    267a:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    267e:	a3 01       	movw	r20, r6
    2680:	92 01       	movw	r18, r4
    2682:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2686:	9b 01       	movw	r18, r22
    2688:	ac 01       	movw	r20, r24
    268a:	e1 96       	adiw	r28, 0x31	; 49
    268c:	6c ad       	ldd	r22, Y+60	; 0x3c
    268e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2690:	8e ad       	ldd	r24, Y+62	; 0x3e
    2692:	9f ad       	ldd	r25, Y+63	; 0x3f
    2694:	e1 97       	sbiw	r28, 0x31	; 49
    2696:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    269a:	6b 01       	movw	r12, r22
    269c:	7c 01       	movw	r14, r24
    269e:	d5 01       	movw	r26, r10
    26a0:	2d 91       	ld	r18, X+
    26a2:	3d 91       	ld	r19, X+
    26a4:	4d 91       	ld	r20, X+
    26a6:	5c 91       	ld	r21, X
    26a8:	ad 96       	adiw	r28, 0x2d	; 45
    26aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    26ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    26ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    26b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    26b2:	ad 97       	sbiw	r28, 0x2d	; 45
    26b4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    26b8:	a5 96       	adiw	r28, 0x25	; 37
    26ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    26bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    26be:	4e ad       	ldd	r20, Y+62	; 0x3e
    26c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    26c2:	a5 97       	sbiw	r28, 0x25	; 37
    26c4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	c7 01       	movw	r24, r14
    26ce:	b6 01       	movw	r22, r12
    26d0:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    26d4:	ed 96       	adiw	r28, 0x3d	; 61
    26d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    26d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    26da:	ed 97       	sbiw	r28, 0x3d	; 61
    26dc:	64 83       	std	Z+4, r22	; 0x04
    26de:	75 83       	std	Z+5, r23	; 0x05
    26e0:	86 83       	std	Z+6, r24	; 0x06
    26e2:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    26e4:	ef 96       	adiw	r28, 0x3f	; 63
    26e6:	ae ad       	ldd	r26, Y+62	; 0x3e
    26e8:	bf ad       	ldd	r27, Y+63	; 0x3f
    26ea:	ef 97       	sbiw	r28, 0x3f	; 63
    26ec:	4d 92       	st	X+, r4
    26ee:	5d 92       	st	X+, r5
    26f0:	6d 92       	st	X+, r6
    26f2:	7c 92       	st	X, r7
    26f4:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    26f6:	a5 96       	adiw	r28, 0x25	; 37
    26f8:	8c ad       	ldd	r24, Y+60	; 0x3c
    26fa:	9d ad       	ldd	r25, Y+61	; 0x3d
    26fc:	ae ad       	ldd	r26, Y+62	; 0x3e
    26fe:	bf ad       	ldd	r27, Y+63	; 0x3f
    2700:	a5 97       	sbiw	r28, 0x25	; 37
    2702:	ef 96       	adiw	r28, 0x3f	; 63
    2704:	ee ad       	ldd	r30, Y+62	; 0x3e
    2706:	ff ad       	ldd	r31, Y+63	; 0x3f
    2708:	ef 97       	sbiw	r28, 0x3f	; 63
    270a:	84 83       	std	Z+4, r24	; 0x04
    270c:	95 83       	std	Z+5, r25	; 0x05
    270e:	a6 83       	std	Z+6, r26	; 0x06
    2710:	b7 83       	std	Z+7, r27	; 0x07
    2712:	a1 c0       	rjmp	.+322    	; 0x2856 <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    2714:	0f 2e       	mov	r0, r31
    2716:	fc e2       	ldi	r31, 0x2C	; 44
    2718:	af 2e       	mov	r10, r31
    271a:	f1 e0       	ldi	r31, 0x01	; 1
    271c:	bf 2e       	mov	r11, r31
    271e:	f0 2d       	mov	r31, r0
    2720:	d5 01       	movw	r26, r10
    2722:	2d 91       	ld	r18, X+
    2724:	3d 91       	ld	r19, X+
    2726:	4d 91       	ld	r20, X+
    2728:	5c 91       	ld	r21, X
    272a:	ad 96       	adiw	r28, 0x2d	; 45
    272c:	6c ad       	ldd	r22, Y+60	; 0x3c
    272e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2730:	8e ad       	ldd	r24, Y+62	; 0x3e
    2732:	9f ad       	ldd	r25, Y+63	; 0x3f
    2734:	ad 97       	sbiw	r28, 0x2d	; 45
    2736:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    273a:	a3 01       	movw	r20, r6
    273c:	92 01       	movw	r18, r4
    273e:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2742:	9b 01       	movw	r18, r22
    2744:	ac 01       	movw	r20, r24
    2746:	e5 96       	adiw	r28, 0x35	; 53
    2748:	6c ad       	ldd	r22, Y+60	; 0x3c
    274a:	7d ad       	ldd	r23, Y+61	; 0x3d
    274c:	8e ad       	ldd	r24, Y+62	; 0x3e
    274e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2750:	e5 97       	sbiw	r28, 0x35	; 53
    2752:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    2756:	6b 01       	movw	r12, r22
    2758:	7c 01       	movw	r14, r24
    275a:	00 e3       	ldi	r16, 0x30	; 48
    275c:	11 e0       	ldi	r17, 0x01	; 1
    275e:	f8 01       	movw	r30, r16
    2760:	20 81       	ld	r18, Z
    2762:	31 81       	ldd	r19, Z+1	; 0x01
    2764:	42 81       	ldd	r20, Z+2	; 0x02
    2766:	53 81       	ldd	r21, Z+3	; 0x03
    2768:	a9 96       	adiw	r28, 0x29	; 41
    276a:	6c ad       	ldd	r22, Y+60	; 0x3c
    276c:	7d ad       	ldd	r23, Y+61	; 0x3d
    276e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2770:	9f ad       	ldd	r25, Y+63	; 0x3f
    2772:	a9 97       	sbiw	r28, 0x29	; 41
    2774:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    2778:	a5 96       	adiw	r28, 0x25	; 37
    277a:	2c ad       	ldd	r18, Y+60	; 0x3c
    277c:	3d ad       	ldd	r19, Y+61	; 0x3d
    277e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2780:	5f ad       	ldd	r21, Y+63	; 0x3f
    2782:	a5 97       	sbiw	r28, 0x25	; 37
    2784:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2788:	9b 01       	movw	r18, r22
    278a:	ac 01       	movw	r20, r24
    278c:	c7 01       	movw	r24, r14
    278e:	b6 01       	movw	r22, r12
    2790:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    2794:	ed 96       	adiw	r28, 0x3d	; 61
    2796:	ae ad       	ldd	r26, Y+62	; 0x3e
    2798:	bf ad       	ldd	r27, Y+63	; 0x3f
    279a:	ed 97       	sbiw	r28, 0x3d	; 61
    279c:	6d 93       	st	X+, r22
    279e:	7d 93       	st	X+, r23
    27a0:	8d 93       	st	X+, r24
    27a2:	9c 93       	st	X, r25
    27a4:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    27a6:	f8 01       	movw	r30, r16
    27a8:	20 81       	ld	r18, Z
    27aa:	31 81       	ldd	r19, Z+1	; 0x01
    27ac:	42 81       	ldd	r20, Z+2	; 0x02
    27ae:	53 81       	ldd	r21, Z+3	; 0x03
    27b0:	a9 96       	adiw	r28, 0x29	; 41
    27b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    27b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    27b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    27b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    27ba:	a9 97       	sbiw	r28, 0x29	; 41
    27bc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    27c0:	a3 01       	movw	r20, r6
    27c2:	92 01       	movw	r18, r4
    27c4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    27c8:	9b 01       	movw	r18, r22
    27ca:	ac 01       	movw	r20, r24
    27cc:	e1 96       	adiw	r28, 0x31	; 49
    27ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    27d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    27d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    27d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    27d6:	e1 97       	sbiw	r28, 0x31	; 49
    27d8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    27dc:	6b 01       	movw	r12, r22
    27de:	7c 01       	movw	r14, r24
    27e0:	d5 01       	movw	r26, r10
    27e2:	2d 91       	ld	r18, X+
    27e4:	3d 91       	ld	r19, X+
    27e6:	4d 91       	ld	r20, X+
    27e8:	5c 91       	ld	r21, X
    27ea:	ad 96       	adiw	r28, 0x2d	; 45
    27ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    27ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    27f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    27f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    27f4:	ad 97       	sbiw	r28, 0x2d	; 45
    27f6:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__subsf3>
    27fa:	a5 96       	adiw	r28, 0x25	; 37
    27fc:	2c ad       	ldd	r18, Y+60	; 0x3c
    27fe:	3d ad       	ldd	r19, Y+61	; 0x3d
    2800:	4e ad       	ldd	r20, Y+62	; 0x3e
    2802:	5f ad       	ldd	r21, Y+63	; 0x3f
    2804:	a5 97       	sbiw	r28, 0x25	; 37
    2806:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    280a:	9b 01       	movw	r18, r22
    280c:	ac 01       	movw	r20, r24
    280e:	c7 01       	movw	r24, r14
    2810:	b6 01       	movw	r22, r12
    2812:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__addsf3>
    2816:	ed 96       	adiw	r28, 0x3d	; 61
    2818:	ee ad       	ldd	r30, Y+62	; 0x3e
    281a:	ff ad       	ldd	r31, Y+63	; 0x3f
    281c:	ed 97       	sbiw	r28, 0x3d	; 61
    281e:	64 83       	std	Z+4, r22	; 0x04
    2820:	75 83       	std	Z+5, r23	; 0x05
    2822:	86 83       	std	Z+6, r24	; 0x06
    2824:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    2826:	ef 96       	adiw	r28, 0x3f	; 63
    2828:	ae ad       	ldd	r26, Y+62	; 0x3e
    282a:	bf ad       	ldd	r27, Y+63	; 0x3f
    282c:	ef 97       	sbiw	r28, 0x3f	; 63
    282e:	4d 92       	st	X+, r4
    2830:	5d 92       	st	X+, r5
    2832:	6d 92       	st	X+, r6
    2834:	7c 92       	st	X, r7
    2836:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    2838:	a5 96       	adiw	r28, 0x25	; 37
    283a:	8c ad       	ldd	r24, Y+60	; 0x3c
    283c:	9d ad       	ldd	r25, Y+61	; 0x3d
    283e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2840:	bf ad       	ldd	r27, Y+63	; 0x3f
    2842:	a5 97       	sbiw	r28, 0x25	; 37
    2844:	b0 58       	subi	r27, 0x80	; 128
    2846:	ef 96       	adiw	r28, 0x3f	; 63
    2848:	ee ad       	ldd	r30, Y+62	; 0x3e
    284a:	ff ad       	ldd	r31, Y+63	; 0x3f
    284c:	ef 97       	sbiw	r28, 0x3f	; 63
    284e:	84 83       	std	Z+4, r24	; 0x04
    2850:	95 83       	std	Z+5, r25	; 0x05
    2852:	a6 83       	std	Z+6, r26	; 0x06
    2854:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    2856:	ed 96       	adiw	r28, 0x3d	; 61
    2858:	ee ad       	ldd	r30, Y+62	; 0x3e
    285a:	ff ad       	ldd	r31, Y+63	; 0x3f
    285c:	ed 97       	sbiw	r28, 0x3d	; 61
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	a2 81       	ldd	r26, Z+2	; 0x02
    2864:	b3 81       	ldd	r27, Z+3	; 0x03
    2866:	80 93 8a 01 	sts	0x018A, r24
    286a:	90 93 8b 01 	sts	0x018B, r25
    286e:	a0 93 8c 01 	sts	0x018C, r26
    2872:	b0 93 8d 01 	sts	0x018D, r27
		c_wii_last[1] = c_wii[1];
    2876:	84 81       	ldd	r24, Z+4	; 0x04
    2878:	95 81       	ldd	r25, Z+5	; 0x05
    287a:	a6 81       	ldd	r26, Z+6	; 0x06
    287c:	b7 81       	ldd	r27, Z+7	; 0x07
    287e:	80 93 8e 01 	sts	0x018E, r24
    2882:	90 93 8f 01 	sts	0x018F, r25
    2886:	a0 93 90 01 	sts	0x0190, r26
    288a:	b0 93 91 01 	sts	0x0191, r27
		dir_last[0] = dir[0];
    288e:	ef 96       	adiw	r28, 0x3f	; 63
    2890:	ee ad       	ldd	r30, Y+62	; 0x3e
    2892:	ff ad       	ldd	r31, Y+63	; 0x3f
    2894:	ef 97       	sbiw	r28, 0x3f	; 63
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	a2 81       	ldd	r26, Z+2	; 0x02
    289c:	b3 81       	ldd	r27, Z+3	; 0x03
    289e:	80 93 82 01 	sts	0x0182, r24
    28a2:	90 93 83 01 	sts	0x0183, r25
    28a6:	a0 93 84 01 	sts	0x0184, r26
    28aa:	b0 93 85 01 	sts	0x0185, r27
		dir_last[1] = dir[1];
    28ae:	84 81       	ldd	r24, Z+4	; 0x04
    28b0:	95 81       	ldd	r25, Z+5	; 0x05
    28b2:	a6 81       	ldd	r26, Z+6	; 0x06
    28b4:	b7 81       	ldd	r27, Z+7	; 0x07
    28b6:	80 93 86 01 	sts	0x0186, r24
    28ba:	90 93 87 01 	sts	0x0187, r25
    28be:	a0 93 88 01 	sts	0x0188, r26
    28c2:	b0 93 89 01 	sts	0x0189, r27
		
		if (*state == 4){
    28c6:	cd 57       	subi	r28, 0x7D	; 125
    28c8:	df 4f       	sbci	r29, 0xFF	; 255
    28ca:	a8 81       	ld	r26, Y
    28cc:	b9 81       	ldd	r27, Y+1	; 0x01
    28ce:	c3 58       	subi	r28, 0x83	; 131
    28d0:	d0 40       	sbci	r29, 0x00	; 0
    28d2:	8d 91       	ld	r24, X+
    28d4:	9c 91       	ld	r25, X
    28d6:	04 97       	sbiw	r24, 0x04	; 4
    28d8:	e9 f5       	brne	.+122    	; 0x2954 <localization+0xca0>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    28da:	ed 96       	adiw	r28, 0x3d	; 61
    28dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    28de:	ff ad       	ldd	r31, Y+63	; 0x3f
    28e0:	ed 97       	sbiw	r28, 0x3d	; 61
    28e2:	24 81       	ldd	r18, Z+4	; 0x04
    28e4:	35 81       	ldd	r19, Z+5	; 0x05
    28e6:	46 81       	ldd	r20, Z+6	; 0x06
    28e8:	57 81       	ldd	r21, Z+7	; 0x07
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	cb 57       	subi	r28, 0x7B	; 123
    28f4:	df 4f       	sbci	r29, 0xFF	; 255
    28f6:	08 81       	ld	r16, Y
    28f8:	19 81       	ldd	r17, Y+1	; 0x01
    28fa:	c5 58       	subi	r28, 0x85	; 133
    28fc:	d0 40       	sbci	r29, 0x00	; 0
    28fe:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <find_if_reach>
			if (!if_reach){
    2902:	89 2b       	or	r24, r25
    2904:	f9 f4       	brne	.+62     	; 0x2944 <localization+0xc90>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    2906:	ef 96       	adiw	r28, 0x3f	; 63
    2908:	ae ac       	ldd	r10, Y+62	; 0x3e
    290a:	bf ac       	ldd	r11, Y+63	; 0x3f
    290c:	ef 97       	sbiw	r28, 0x3f	; 63
    290e:	ed 96       	adiw	r28, 0x3d	; 61
    2910:	ce ac       	ldd	r12, Y+62	; 0x3e
    2912:	df ac       	ldd	r13, Y+63	; 0x3f
    2914:	ed 97       	sbiw	r28, 0x3d	; 61
    2916:	78 01       	movw	r14, r16
    2918:	93 01       	movw	r18, r6
    291a:	82 01       	movw	r16, r4
    291c:	a5 96       	adiw	r28, 0x25	; 37
    291e:	4c ad       	ldd	r20, Y+60	; 0x3c
    2920:	5d ad       	ldd	r21, Y+61	; 0x3d
    2922:	6e ad       	ldd	r22, Y+62	; 0x3e
    2924:	7f ad       	ldd	r23, Y+63	; 0x3f
    2926:	a5 97       	sbiw	r28, 0x25	; 37
    2928:	c4 01       	movw	r24, r8
    292a:	0e 94 9e 0a 	call	0x153c	; 0x153c <cal_angle>
				PID_p2p(Kp_p2p, Kd_p2p);
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	48 ec       	ldi	r20, 0xC8	; 200
    2934:	53 e4       	ldi	r21, 0x43	; 67
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	88 ec       	ldi	r24, 0xC8	; 200
    293c:	92 e4       	ldi	r25, 0x42	; 66
    293e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <PID_p2p>
    2942:	08 c0       	rjmp	.+16     	; 0x2954 <localization+0xca0>
			}
			else{ // reach goal, stop
				OCR1B = 0;
    2944:	10 92 8b 00 	sts	0x008B, r1
    2948:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    294c:	10 92 8d 00 	sts	0x008D, r1
    2950:	10 92 8c 00 	sts	0x008C, r1
				//if (*state == 4){
					//*state = 5;
				//}
			}
		}
		if (*state == 3){
    2954:	cd 57       	subi	r28, 0x7D	; 125
    2956:	df 4f       	sbci	r29, 0xFF	; 255
    2958:	a8 81       	ld	r26, Y
    295a:	b9 81       	ldd	r27, Y+1	; 0x01
    295c:	c3 58       	subi	r28, 0x83	; 131
    295e:	d0 40       	sbci	r29, 0x00	; 0
    2960:	8d 91       	ld	r24, X+
    2962:	9c 91       	ld	r25, X
    2964:	03 97       	sbiw	r24, 0x03	; 3
    2966:	09 f0       	breq	.+2      	; 0x296a <localization+0xcb6>
    2968:	5c c0       	rjmp	.+184    	; 0x2a22 <localization+0xd6e>
			cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    296a:	ef 96       	adiw	r28, 0x3f	; 63
    296c:	ae ac       	ldd	r10, Y+62	; 0x3e
    296e:	bf ac       	ldd	r11, Y+63	; 0x3f
    2970:	ef 97       	sbiw	r28, 0x3f	; 63
    2972:	ed 96       	adiw	r28, 0x3d	; 61
    2974:	ce ac       	ldd	r12, Y+62	; 0x3e
    2976:	df ac       	ldd	r13, Y+63	; 0x3f
    2978:	ed 97       	sbiw	r28, 0x3d	; 61
    297a:	cb 57       	subi	r28, 0x7B	; 123
    297c:	df 4f       	sbci	r29, 0xFF	; 255
    297e:	e8 80       	ld	r14, Y
    2980:	f9 80       	ldd	r15, Y+1	; 0x01
    2982:	c5 58       	subi	r28, 0x85	; 133
    2984:	d0 40       	sbci	r29, 0x00	; 0
    2986:	93 01       	movw	r18, r6
    2988:	82 01       	movw	r16, r4
    298a:	a5 96       	adiw	r28, 0x25	; 37
    298c:	4c ad       	ldd	r20, Y+60	; 0x3c
    298e:	5d ad       	ldd	r21, Y+61	; 0x3d
    2990:	6e ad       	ldd	r22, Y+62	; 0x3e
    2992:	7f ad       	ldd	r23, Y+63	; 0x3f
    2994:	a5 97       	sbiw	r28, 0x25	; 37
    2996:	c4 01       	movw	r24, r8
    2998:	0e 94 9e 0a 	call	0x153c	; 0x153c <cal_angle>
			PID_alpha(Kp_loc, Kd_loc);
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	48 ec       	ldi	r20, 0xC8	; 200
    29a2:	53 e4       	ldi	r21, 0x43	; 67
    29a4:	60 e0       	ldi	r22, 0x00	; 0
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	80 ef       	ldi	r24, 0xF0	; 240
    29aa:	91 e4       	ldi	r25, 0x41	; 65
    29ac:	0e 94 aa 0b 	call	0x1754	; 0x1754 <PID_alpha>
    29b0:	38 c0       	rjmp	.+112    	; 0x2a22 <localization+0xd6e>
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    29b2:	80 91 8a 01 	lds	r24, 0x018A
    29b6:	90 91 8b 01 	lds	r25, 0x018B
    29ba:	a0 91 8c 01 	lds	r26, 0x018C
    29be:	b0 91 8d 01 	lds	r27, 0x018D
    29c2:	ed 96       	adiw	r28, 0x3d	; 61
    29c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    29c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    29c8:	ed 97       	sbiw	r28, 0x3d	; 61
    29ca:	80 83       	st	Z, r24
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	a2 83       	std	Z+2, r26	; 0x02
    29d0:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    29d2:	80 91 8e 01 	lds	r24, 0x018E
    29d6:	90 91 8f 01 	lds	r25, 0x018F
    29da:	a0 91 90 01 	lds	r26, 0x0190
    29de:	b0 91 91 01 	lds	r27, 0x0191
    29e2:	84 83       	std	Z+4, r24	; 0x04
    29e4:	95 83       	std	Z+5, r25	; 0x05
    29e6:	a6 83       	std	Z+6, r26	; 0x06
    29e8:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    29ea:	80 91 82 01 	lds	r24, 0x0182
    29ee:	90 91 83 01 	lds	r25, 0x0183
    29f2:	a0 91 84 01 	lds	r26, 0x0184
    29f6:	b0 91 85 01 	lds	r27, 0x0185
    29fa:	ef 96       	adiw	r28, 0x3f	; 63
    29fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    29fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a00:	ef 97       	sbiw	r28, 0x3f	; 63
    2a02:	80 83       	st	Z, r24
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	a2 83       	std	Z+2, r26	; 0x02
    2a08:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    2a0a:	80 91 86 01 	lds	r24, 0x0186
    2a0e:	90 91 87 01 	lds	r25, 0x0187
    2a12:	a0 91 88 01 	lds	r26, 0x0188
    2a16:	b0 91 89 01 	lds	r27, 0x0189
    2a1a:	84 83       	std	Z+4, r24	; 0x04
    2a1c:	95 83       	std	Z+5, r25	; 0x05
    2a1e:	a6 83       	std	Z+6, r26	; 0x06
    2a20:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    2a22:	85 eb       	ldi	r24, 0xB5	; 181
    2a24:	92 e0       	ldi	r25, 0x02	; 2
    2a26:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(c_wii[0]);
    2a2a:	ed 96       	adiw	r28, 0x3d	; 61
    2a2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a30:	ed 97       	sbiw	r28, 0x3d	; 61
    2a32:	6d 91       	ld	r22, X+
    2a34:	7d 91       	ld	r23, X+
    2a36:	8d 91       	ld	r24, X+
    2a38:	9c 91       	ld	r25, X
    2a3a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    2a3e:	cb 01       	movw	r24, r22
    2a40:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    2a44:	80 eb       	ldi	r24, 0xB0	; 176
    2a46:	92 e0       	ldi	r25, 0x02	; 2
    2a48:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(c_wii[1]);
    2a4c:	ed 96       	adiw	r28, 0x3d	; 61
    2a4e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a50:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a52:	ed 97       	sbiw	r28, 0x3d	; 61
    2a54:	64 81       	ldd	r22, Z+4	; 0x04
    2a56:	75 81       	ldd	r23, Z+5	; 0x05
    2a58:	86 81       	ldd	r24, Z+6	; 0x06
    2a5a:	97 81       	ldd	r25, Z+7	; 0x07
    2a5c:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    2a60:	cb 01       	movw	r24, r22
    2a62:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2a66:	8e ea       	ldi	r24, 0xAE	; 174
    2a68:	92 e0       	ldi	r25, 0x02	; 2
    2a6a:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    2a6e:	8d e9       	ldi	r24, 0x9D	; 157
    2a70:	92 e0       	ldi	r25, 0x02	; 2
    2a72:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(dir[0]*1000);
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a e7       	ldi	r20, 0x7A	; 122
    2a7c:	54 e4       	ldi	r21, 0x44	; 68
    2a7e:	ef 96       	adiw	r28, 0x3f	; 63
    2a80:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a82:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a84:	ef 97       	sbiw	r28, 0x3f	; 63
    2a86:	6d 91       	ld	r22, X+
    2a88:	7d 91       	ld	r23, X+
    2a8a:	8d 91       	ld	r24, X+
    2a8c:	9c 91       	ld	r25, X
    2a8e:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2a92:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    2a96:	cb 01       	movw	r24, r22
    2a98:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2a9c:	85 e9       	ldi	r24, 0x95	; 149
    2a9e:	92 e0       	ldi	r25, 0x02	; 2
    2aa0:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
	m_usb_tx_int(dir[1]*1000);
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	ef 96       	adiw	r28, 0x3f	; 63
    2aae:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ab0:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ab2:	ef 97       	sbiw	r28, 0x3f	; 63
    2ab4:	64 81       	ldd	r22, Z+4	; 0x04
    2ab6:	75 81       	ldd	r23, Z+5	; 0x05
    2ab8:	86 81       	ldd	r24, Z+6	; 0x06
    2aba:	97 81       	ldd	r25, Z+7	; 0x07
    2abc:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__mulsf3>
    2ac0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__fixsfsi>
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2aca:	83 e9       	ldi	r24, 0x93	; 147
    2acc:	92 e0       	ldi	r25, 0x02	; 2
    2ace:	0e 94 9e 18 	call	0x313c	; 0x313c <print_P>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <localization+0xe48>
    2ad4:	eb 96       	adiw	r28, 0x3b	; 59
    2ad6:	2e ad       	ldd	r18, Y+62	; 0x3e
    2ad8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2ada:	eb 97       	sbiw	r28, 0x3b	; 59
    2adc:	2c 5f       	subi	r18, 0xFC	; 252
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	eb 96       	adiw	r28, 0x3b	; 59
    2ae2:	3f af       	std	Y+63, r19	; 0x3f
    2ae4:	2e af       	std	Y+62, r18	; 0x3e
    2ae6:	eb 97       	sbiw	r28, 0x3b	; 59
    2ae8:	e3 96       	adiw	r28, 0x33	; 51
    2aea:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aec:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aee:	e3 97       	sbiw	r28, 0x33	; 51
    2af0:	04 96       	adiw	r24, 0x04	; 4
    2af2:	e3 96       	adiw	r28, 0x33	; 51
    2af4:	9f af       	std	Y+63, r25	; 0x3f
    2af6:	8e af       	std	Y+62, r24	; 0x3e
    2af8:	e3 97       	sbiw	r28, 0x33	; 51
    2afa:	a5 ca       	rjmp	.-2742   	; 0x2046 <localization+0x392>
}
    2afc:	ca 57       	subi	r28, 0x7A	; 122
    2afe:	df 4f       	sbci	r29, 0xFF	; 255
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	bf 90       	pop	r11
    2b1c:	af 90       	pop	r10
    2b1e:	9f 90       	pop	r9
    2b20:	8f 90       	pop	r8
    2b22:	7f 90       	pop	r7
    2b24:	6f 90       	pop	r6
    2b26:	5f 90       	pop	r5
    2b28:	4f 90       	pop	r4
    2b2a:	3f 90       	pop	r3
    2b2c:	2f 90       	pop	r2
    2b2e:	08 95       	ret

00002b30 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2b30:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2b32:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2b34:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2b36:	8c e0       	ldi	r24, 0x0C	; 12
    2b38:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2b3c:	e9 e6       	ldi	r30, 0x69	; 105
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	80 62       	ori	r24, 0x20	; 32
    2b44:	80 83       	st	Z, r24
    2b46:	80 81       	ld	r24, Z
    2b48:	8f 7e       	andi	r24, 0xEF	; 239
    2b4a:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2b4c:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2b4e:	78 94       	sei
    2b50:	08 95       	ret

00002b52 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2b52:	1f 93       	push	r17
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	18 2f       	mov	r17, r24
    2b5a:	d6 2f       	mov	r29, r22
    2b5c:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2b5e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2b62:	94 ea       	ldi	r25, 0xA4	; 164
    2b64:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b68:	ec eb       	ldi	r30, 0xBC	; 188
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	90 81       	ld	r25, Z
    2b6e:	99 23       	and	r25, r25
    2b70:	ec f7       	brge	.-6      	; 0x2b6c <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2b72:	90 e5       	ldi	r25, 0x50	; 80
    2b74:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b78:	94 e8       	ldi	r25, 0x84	; 132
    2b7a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b7e:	ec eb       	ldi	r30, 0xBC	; 188
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	90 81       	ld	r25, Z
    2b84:	99 23       	and	r25, r25
    2b86:	ec f7       	brge	.-6      	; 0x2b82 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2b88:	90 91 b9 00 	lds	r25, 0x00B9
    2b8c:	98 7f       	andi	r25, 0xF8	; 248
    2b8e:	90 32       	cpi	r25, 0x20	; 32
    2b90:	29 f4       	brne	.+10     	; 0x2b9c <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2b92:	84 e9       	ldi	r24, 0x94	; 148
    2b94:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	2d c0       	rjmp	.+90     	; 0x2bf6 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ba2:	84 e8       	ldi	r24, 0x84	; 132
    2ba4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2ba8:	ec eb       	ldi	r30, 0xBC	; 188
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	90 81       	ld	r25, Z
    2bae:	99 23       	and	r25, r25
    2bb0:	ec f7       	brge	.-6      	; 0x2bac <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2bb2:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bb6:	84 e8       	ldi	r24, 0x84	; 132
    2bb8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2bbc:	ec eb       	ldi	r30, 0xBC	; 188
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	88 23       	and	r24, r24
    2bc4:	ec f7       	brge	.-6      	; 0x2bc0 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2bc6:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bca:	84 e8       	ldi	r24, 0x84	; 132
    2bcc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2bd0:	ec eb       	ldi	r30, 0xBC	; 188
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	88 23       	and	r24, r24
    2bd8:	ec f7       	brge	.-6      	; 0x2bd4 <m_rf_open+0x82>
	
	TWDR = packet_length;
    2bda:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bde:	84 e8       	ldi	r24, 0x84	; 132
    2be0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2be4:	ec eb       	ldi	r30, 0xBC	; 188
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	ec f7       	brge	.-6      	; 0x2be8 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2bee:	84 e9       	ldi	r24, 0x94	; 148
    2bf0:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
}
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	08 95       	ret

00002bfe <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2bfe:	1f 93       	push	r17
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2c04:	24 ea       	ldi	r18, 0xA4	; 164
    2c06:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    2c0a:	ec eb       	ldi	r30, 0xBC	; 188
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	20 81       	ld	r18, Z
    2c10:	22 23       	and	r18, r18
    2c12:	ec f7       	brge	.-6      	; 0x2c0e <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2c14:	21 e5       	ldi	r18, 0x51	; 81
    2c16:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c1a:	24 e8       	ldi	r18, 0x84	; 132
    2c1c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2c20:	ec eb       	ldi	r30, 0xBC	; 188
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	20 81       	ld	r18, Z
    2c26:	22 23       	and	r18, r18
    2c28:	ec f7       	brge	.-6      	; 0x2c24 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2c2a:	20 91 b9 00 	lds	r18, 0x00B9
    2c2e:	28 7f       	andi	r18, 0xF8	; 248
    2c30:	28 34       	cpi	r18, 0x48	; 72
    2c32:	29 f4       	brne	.+10     	; 0x2c3e <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2c34:	84 e9       	ldi	r24, 0x94	; 148
    2c36:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	44 c0       	rjmp	.+136    	; 0x2cc6 <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2c3e:	24 ec       	ldi	r18, 0xC4	; 196
    2c40:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2c44:	ec eb       	ldi	r30, 0xBC	; 188
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	20 81       	ld	r18, Z
    2c4a:	22 23       	and	r18, r18
    2c4c:	ec f7       	brge	.-6      	; 0x2c48 <m_rf_read+0x4a>
	bytes = TWDR;
    2c4e:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
    2c52:	16 13       	cpse	r17, r22
    2c54:	0a c0       	rjmp	.+20     	; 0x2c6a <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2c56:	41 2f       	mov	r20, r17
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	41 50       	subi	r20, 0x01	; 1
    2c5c:	51 09       	sbc	r21, r1
    2c5e:	14 16       	cp	r1, r20
    2c60:	15 06       	cpc	r1, r21
    2c62:	44 f0       	brlt	.+16     	; 0x2c74 <m_rf_read+0x76>
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	1c c0       	rjmp	.+56     	; 0x2ca2 <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2c6a:	84 e9       	ldi	r24, 0x94	; 148
    2c6c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	29 c0       	rjmp	.+82     	; 0x2cc6 <m_rf_read+0xc8>
    2c74:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2c7a:	ec eb       	ldi	r30, 0xBC	; 188
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2c80:	cb eb       	ldi	r28, 0xBB	; 187
    2c82:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2c84:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2c86:	60 81       	ld	r22, Z
    2c88:	66 23       	and	r22, r22
    2c8a:	ec f7       	brge	.-6      	; 0x2c86 <m_rf_read+0x88>
		buffer[i] = TWDR;
    2c8c:	68 81       	ld	r22, Y
    2c8e:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2c90:	2f 5f       	subi	r18, 0xFF	; 255
    2c92:	3f 4f       	sbci	r19, 0xFF	; 255
    2c94:	24 17       	cp	r18, r20
    2c96:	35 07       	cpc	r19, r21
    2c98:	ac f3       	brlt	.-22     	; 0x2c84 <m_rf_read+0x86>
    2c9a:	21 2f       	mov	r18, r17
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	21 50       	subi	r18, 0x01	; 1
    2ca0:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2ca2:	44 e8       	ldi	r20, 0x84	; 132
    2ca4:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2ca8:	ec eb       	ldi	r30, 0xBC	; 188
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	40 81       	ld	r20, Z
    2cae:	44 23       	and	r20, r20
    2cb0:	ec f7       	brge	.-6      	; 0x2cac <m_rf_read+0xae>
	buffer[i++] = TWDR;
    2cb2:	40 91 bb 00 	lds	r20, 0x00BB
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	e2 0f       	add	r30, r18
    2cba:	f3 1f       	adc	r31, r19
    2cbc:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2cbe:	84 e9       	ldi	r24, 0x94	; 148
    2cc0:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
}
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	08 95       	ret

00002cce <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    2cd4:	80 ea       	ldi	r24, 0xA0	; 160
    2cd6:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2cda:	82 e1       	ldi	r24, 0x12	; 18
    2cdc:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2cde:	09 b4       	in	r0, 0x29	; 41
    2ce0:	00 fe       	sbrs	r0, 0
    2ce2:	fd cf       	rjmp	.-6      	; 0x2cde <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    2ce4:	80 e9       	ldi	r24, 0x90	; 144
    2ce6:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2cea:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2cee:	10 92 ad 01 	sts	0x01AD, r1
	cdc_line_rtsdtr = 0;
    2cf2:	10 92 aa 01 	sts	0x01AA, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    2cf6:	8c e0       	ldi	r24, 0x0C	; 12
    2cf8:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2cfc:	78 94       	sei
    2cfe:	08 95       	ret

00002d00 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2d04:	90 91 ad 01 	lds	r25, 0x01AD
    2d08:	99 23       	and	r25, r25
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <m_usb_tx_char+0xe>
    2d0c:	4c c0       	rjmp	.+152    	; 0x2da6 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2d0e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2d10:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2d12:	24 e0       	ldi	r18, 0x04	; 4
    2d14:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2d18:	20 91 ab 01 	lds	r18, 0x01AB
    2d1c:	22 23       	and	r18, r18
    2d1e:	49 f0       	breq	.+18     	; 0x2d32 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    2d20:	20 91 e8 00 	lds	r18, 0x00E8
    2d24:	25 fd       	sbrc	r18, 5
    2d26:	03 c0       	rjmp	.+6      	; 0x2d2e <m_usb_tx_char+0x2e>
			SREG = intr_state;
    2d28:	9f bf       	out	0x3f, r25	; 63
			return -1;
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	41 c0       	rjmp	.+130    	; 0x2db0 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    2d2e:	10 92 ab 01 	sts	0x01AB, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2d32:	30 91 e4 00 	lds	r19, 0x00E4
    2d36:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2d38:	20 91 e8 00 	lds	r18, 0x00E8
    2d3c:	25 fd       	sbrc	r18, 5
    2d3e:	24 c0       	rjmp	.+72     	; 0x2d88 <m_usb_tx_char+0x88>
		SREG = intr_state;
    2d40:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2d42:	90 91 e4 00 	lds	r25, 0x00E4
    2d46:	93 17       	cp	r25, r19
    2d48:	81 f0       	breq	.+32     	; 0x2d6a <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2d4a:	90 91 ad 01 	lds	r25, 0x01AD
    2d4e:	99 23       	and	r25, r25
    2d50:	61 f1       	breq	.+88     	; 0x2daa <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    2d52:	a9 ee       	ldi	r26, 0xE9	; 233
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2d58:	e8 ee       	ldi	r30, 0xE8	; 232
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2d5c:	c4 ee       	ldi	r28, 0xE4	; 228
    2d5e:	d0 e0       	ldi	r29, 0x00	; 0
    2d60:	0d c0       	rjmp	.+26     	; 0x2d7c <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2d62:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2d64:	98 81       	ld	r25, Y
    2d66:	93 13       	cpse	r25, r19
    2d68:	05 c0       	rjmp	.+10     	; 0x2d74 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	80 93 ab 01 	sts	0x01AB, r24
			return -1;
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	1e c0       	rjmp	.+60     	; 0x2db0 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2d74:	90 91 ad 01 	lds	r25, 0x01AD
    2d78:	99 23       	and	r25, r25
    2d7a:	c9 f0       	breq	.+50     	; 0x2dae <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    2d7c:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2d7e:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2d80:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2d82:	20 81       	ld	r18, Z
    2d84:	25 ff       	sbrs	r18, 5
    2d86:	ed cf       	rjmp	.-38     	; 0x2d62 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2d88:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2d8c:	80 91 e8 00 	lds	r24, 0x00E8
    2d90:	85 fd       	sbrc	r24, 5
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <m_usb_tx_char+0x9a>
    2d94:	8a e3       	ldi	r24, 0x3A	; 58
    2d96:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2d9a:	85 e0       	ldi	r24, 0x05	; 5
    2d9c:	80 93 ac 01 	sts	0x01AC, r24
	SREG = intr_state;
    2da0:	9f bf       	out	0x3f, r25	; 63
	return 0;
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	05 c0       	rjmp	.+10     	; 0x2db0 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2da6:	8f ef       	ldi	r24, 0xFF	; 255
    2da8:	03 c0       	rjmp	.+6      	; 0x2db0 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2daa:	8f ef       	ldi	r24, 0xFF	; 255
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <m_usb_tx_char+0xb0>
    2dae:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	08 95       	ret

00002db6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2db6:	1f 92       	push	r1
    2db8:	0f 92       	push	r0
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	0f 92       	push	r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	8f 93       	push	r24
    2dc2:	9f 93       	push	r25
    2dc4:	ef 93       	push	r30
    2dc6:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2dc8:	e1 ee       	ldi	r30, 0xE1	; 225
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
        UDINT = 0;
    2dce:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2dd0:	83 ff       	sbrs	r24, 3
    2dd2:	11 c0       	rjmp	.+34     	; 0x2df6 <__vector_10+0x40>
		UENUM = 0;
    2dd4:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2dd8:	91 e0       	ldi	r25, 0x01	; 1
    2dda:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2dde:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2de2:	92 e1       	ldi	r25, 0x12	; 18
    2de4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2de8:	98 e0       	ldi	r25, 0x08	; 8
    2dea:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2dee:	10 92 ad 01 	sts	0x01AD, r1
		cdc_line_rtsdtr = 0;
    2df2:	10 92 aa 01 	sts	0x01AA, r1
        }
	if (intbits & (1<<SOFI)) {
    2df6:	82 ff       	sbrs	r24, 2
    2df8:	13 c0       	rjmp	.+38     	; 0x2e20 <__vector_10+0x6a>
		if (usb_configuration) {
    2dfa:	80 91 ad 01 	lds	r24, 0x01AD
    2dfe:	88 23       	and	r24, r24
    2e00:	79 f0       	breq	.+30     	; 0x2e20 <__vector_10+0x6a>
			t = transmit_flush_timer;
    2e02:	80 91 ac 01 	lds	r24, 0x01AC
			if (t) {
    2e06:	88 23       	and	r24, r24
    2e08:	59 f0       	breq	.+22     	; 0x2e20 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2e0a:	81 50       	subi	r24, 0x01	; 1
    2e0c:	80 93 ac 01 	sts	0x01AC, r24
				if (!t) {
    2e10:	81 11       	cpse	r24, r1
    2e12:	06 c0       	rjmp	.+12     	; 0x2e20 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2e14:	84 e0       	ldi	r24, 0x04	; 4
    2e16:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2e1a:	8a e3       	ldi	r24, 0x3A	; 58
    2e1c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2e20:	ff 91       	pop	r31
    2e22:	ef 91       	pop	r30
    2e24:	9f 91       	pop	r25
    2e26:	8f 91       	pop	r24
    2e28:	0f 90       	pop	r0
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	0f 90       	pop	r0
    2e2e:	1f 90       	pop	r1
    2e30:	18 95       	reti

00002e32 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2e32:	1f 92       	push	r1
    2e34:	0f 92       	push	r0
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	0f 92       	push	r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	2f 93       	push	r18
    2e42:	3f 93       	push	r19
    2e44:	4f 93       	push	r20
    2e46:	5f 93       	push	r21
    2e48:	6f 93       	push	r22
    2e4a:	7f 93       	push	r23
    2e4c:	8f 93       	push	r24
    2e4e:	9f 93       	push	r25
    2e50:	af 93       	push	r26
    2e52:	bf 93       	push	r27
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	ef 93       	push	r30
    2e5a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2e5c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2e60:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2e64:	83 ff       	sbrs	r24, 3
    2e66:	4e c1       	rjmp	.+668    	; 0x3104 <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    2e68:	e1 ef       	ldi	r30, 0xF1	; 241
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    2e6e:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2e70:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2e72:	80 81       	ld	r24, Z
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    2e78:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    2e7a:	50 81       	ld	r21, Z
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	bc 01       	movw	r22, r24
    2e80:	75 2b       	or	r23, r21
                wLength = UEDATX;
    2e82:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    2e84:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2e86:	82 ef       	ldi	r24, 0xF2	; 242
    2e88:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    2e8c:	46 30       	cpi	r20, 0x06	; 6
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <__vector_11+0x60>
    2e90:	58 c0       	rjmp	.+176    	; 0x2f42 <__vector_11+0x110>
    2e92:	04 c0       	rjmp	.+8      	; 0x2e9c <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2e94:	81 e2       	ldi	r24, 0x21	; 33
    2e96:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2e9a:	3b c1       	rjmp	.+630    	; 0x3112 <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2e9c:	c6 e0       	ldi	r28, 0x06	; 6
    2e9e:	89 ec       	ldi	r24, 0xC9	; 201
    2ea0:	92 e0       	ldi	r25, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	45 91       	lpm	r20, Z+
    2ea6:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    2ea8:	24 17       	cp	r18, r20
    2eaa:	35 07       	cpc	r19, r21
    2eac:	11 f0       	breq	.+4      	; 0x2eb2 <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    2eae:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2eb0:	23 c0       	rjmp	.+70     	; 0x2ef8 <__vector_11+0xc6>
				}
				list += 2;
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2eb6:	45 91       	lpm	r20, Z+
    2eb8:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    2eba:	64 17       	cp	r22, r20
    2ebc:	75 07       	cpc	r23, r21
    2ebe:	11 f0       	breq	.+4      	; 0x2ec4 <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    2ec0:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2ec2:	1a c0       	rjmp	.+52     	; 0x2ef8 <__vector_11+0xc6>
				}
				list += 2;
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2ec8:	25 91       	lpm	r18, Z+
    2eca:	34 91       	lpm	r19, Z
				list += 2;
    2ecc:	fc 01       	movw	r30, r24
    2ece:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2ed0:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2ed2:	8b 2f       	mov	r24, r27
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    2eda:	91 05       	cpc	r25, r1
    2edc:	19 f0       	breq	.+6      	; 0x2ee4 <__vector_11+0xb2>
    2ede:	10 f0       	brcs	.+4      	; 0x2ee4 <__vector_11+0xb2>
    2ee0:	8f ef       	ldi	r24, 0xFF	; 255
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	85 17       	cp	r24, r21
    2ee6:	08 f4       	brcc	.+2      	; 0x2eea <__vector_11+0xb8>
    2ee8:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2eea:	a8 ee       	ldi	r26, 0xE8	; 232
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2eee:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2ef0:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2ef2:	c1 ef       	ldi	r28, 0xF1	; 241
    2ef4:	d0 e0       	ldi	r29, 0x00	; 0
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <__vector_11+0xcc>
    2ef8:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2efa:	99 f6       	brne	.-90     	; 0x2ea2 <__vector_11+0x70>
    2efc:	cb cf       	rjmp	.-106    	; 0x2e94 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2efe:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2f00:	98 2f       	mov	r25, r24
    2f02:	95 70       	andi	r25, 0x05	; 5
    2f04:	e1 f3       	breq	.-8      	; 0x2efe <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    2f06:	82 fd       	sbrc	r24, 2
    2f08:	04 c1       	rjmp	.+520    	; 0x3112 <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2f0a:	45 2f       	mov	r20, r21
    2f0c:	51 31       	cpi	r21, 0x11	; 17
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <__vector_11+0xe0>
    2f10:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    2f12:	44 23       	and	r20, r20
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <__vector_11+0xe6>
    2f16:	fa c0       	rjmp	.+500    	; 0x310c <__vector_11+0x2da>
    2f18:	f9 01       	movw	r30, r18
    2f1a:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    2f1c:	94 91       	lpm	r25, Z
    2f1e:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2f20:	81 50       	subi	r24, 0x01	; 1
    2f22:	31 96       	adiw	r30, 0x01	; 1
    2f24:	81 11       	cpse	r24, r1
    2f26:	fa cf       	rjmp	.-12     	; 0x2f1c <__vector_11+0xea>
    2f28:	8f ef       	ldi	r24, 0xFF	; 255
    2f2a:	84 0f       	add	r24, r20
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	28 0f       	add	r18, r24
    2f32:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2f34:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f36:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2f38:	51 11       	cpse	r21, r1
    2f3a:	e1 cf       	rjmp	.-62     	; 0x2efe <__vector_11+0xcc>
    2f3c:	40 31       	cpi	r20, 0x10	; 16
    2f3e:	f9 f2       	breq	.-66     	; 0x2efe <__vector_11+0xcc>
    2f40:	e8 c0       	rjmp	.+464    	; 0x3112 <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2f42:	45 30       	cpi	r20, 0x05	; 5
    2f44:	61 f4       	brne	.+24     	; 0x2f5e <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f46:	8e ef       	ldi	r24, 0xFE	; 254
    2f48:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2f4c:	e8 ee       	ldi	r30, 0xE8	; 232
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	80 ff       	sbrs	r24, 0
    2f54:	fd cf       	rjmp	.-6      	; 0x2f50 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2f56:	20 68       	ori	r18, 0x80	; 128
    2f58:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2f5c:	da c0       	rjmp	.+436    	; 0x3112 <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2f5e:	49 30       	cpi	r20, 0x09	; 9
    2f60:	09 f0       	breq	.+2      	; 0x2f64 <__vector_11+0x132>
    2f62:	36 c0       	rjmp	.+108    	; 0x2fd0 <__vector_11+0x19e>
    2f64:	c1 11       	cpse	r28, r1
    2f66:	5f c0       	rjmp	.+190    	; 0x3026 <__vector_11+0x1f4>
			usb_configuration = wValue;
    2f68:	20 93 ad 01 	sts	0x01AD, r18
			cdc_line_rtsdtr = 0;
    2f6c:	10 92 aa 01 	sts	0x01AA, r1
			transmit_flush_timer = 0;
    2f70:	10 92 ac 01 	sts	0x01AC, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f74:	8e ef       	ldi	r24, 0xFE	; 254
    2f76:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2f7a:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2f7c:	82 e7       	ldi	r24, 0x72	; 114
    2f7e:	93 e0       	ldi	r25, 0x03	; 3
			for (i=1; i<5; i++) {
				UENUM = i;
    2f80:	c9 ee       	ldi	r28, 0xE9	; 233
    2f82:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2f84:	ab ee       	ldi	r26, 0xEB	; 235
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2f88:	6c ee       	ldi	r22, 0xEC	; 236
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2f8c:	4d ee       	ldi	r20, 0xED	; 237
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2f90:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2f92:	9c 01       	movw	r18, r24
    2f94:	2f 5f       	subi	r18, 0xFF	; 255
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	fc 01       	movw	r30, r24
    2f9a:	04 91       	lpm	r16, Z
				UECONX = en;
    2f9c:	0c 93       	st	X, r16
				if (en) {
    2f9e:	00 23       	and	r16, r16
    2fa0:	61 f0       	breq	.+24     	; 0x2fba <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    2fa2:	f9 01       	movw	r30, r18
    2fa4:	24 91       	lpm	r18, Z
    2fa6:	fb 01       	movw	r30, r22
    2fa8:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    2faa:	9c 01       	movw	r18, r24
    2fac:	2d 5f       	subi	r18, 0xFD	; 253
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	32 96       	adiw	r30, 0x02	; 2
    2fb4:	84 91       	lpm	r24, Z
    2fb6:	fa 01       	movw	r30, r20
    2fb8:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2fba:	1f 5f       	subi	r17, 0xFF	; 255
    2fbc:	15 30       	cpi	r17, 0x05	; 5
    2fbe:	11 f0       	breq	.+4      	; 0x2fc4 <__vector_11+0x192>
    2fc0:	c9 01       	movw	r24, r18
    2fc2:	e6 cf       	rjmp	.-52     	; 0x2f90 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2fc4:	ea ee       	ldi	r30, 0xEA	; 234
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	8e e1       	ldi	r24, 0x1E	; 30
    2fca:	80 83       	st	Z, r24
        		UERST = 0;
    2fcc:	10 82       	st	Z, r1
			return;
    2fce:	a1 c0       	rjmp	.+322    	; 0x3112 <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2fd0:	48 30       	cpi	r20, 0x08	; 8
    2fd2:	81 f4       	brne	.+32     	; 0x2ff4 <__vector_11+0x1c2>
    2fd4:	c0 38       	cpi	r28, 0x80	; 128
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <__vector_11+0x1a8>
    2fd8:	42 c0       	rjmp	.+132    	; 0x305e <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2fda:	e8 ee       	ldi	r30, 0xE8	; 232
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	80 ff       	sbrs	r24, 0
    2fe2:	fd cf       	rjmp	.-6      	; 0x2fde <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2fe4:	80 91 ad 01 	lds	r24, 0x01AD
    2fe8:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2fec:	8e ef       	ldi	r24, 0xFE	; 254
    2fee:	80 93 e8 00 	sts	0x00E8, r24
    2ff2:	8f c0       	rjmp	.+286    	; 0x3112 <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2ff4:	41 32       	cpi	r20, 0x21	; 33
    2ff6:	b9 f4       	brne	.+46     	; 0x3026 <__vector_11+0x1f4>
    2ff8:	c1 3a       	cpi	r28, 0xA1	; 161
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <__vector_11+0x1cc>
    2ffc:	40 c0       	rjmp	.+128    	; 0x307e <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2ffe:	e8 ee       	ldi	r30, 0xE8	; 232
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	80 ff       	sbrs	r24, 0
    3006:	fd cf       	rjmp	.-6      	; 0x3002 <__vector_11+0x1d0>
    3008:	e4 e3       	ldi	r30, 0x34	; 52
    300a:	f1 e0       	ldi	r31, 0x01	; 1
    300c:	8b e3       	ldi	r24, 0x3B	; 59
    300e:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    3010:	a1 ef       	ldi	r26, 0xF1	; 241
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	21 91       	ld	r18, Z+
    3016:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    3018:	e8 17       	cp	r30, r24
    301a:	f9 07       	cpc	r31, r25
    301c:	d9 f7       	brne	.-10     	; 0x3014 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    301e:	8e ef       	ldi	r24, 0xFE	; 254
    3020:	80 93 e8 00 	sts	0x00E8, r24
    3024:	76 c0       	rjmp	.+236    	; 0x3112 <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    3026:	40 32       	cpi	r20, 0x20	; 32
    3028:	d1 f4       	brne	.+52     	; 0x305e <__vector_11+0x22c>
    302a:	c1 32       	cpi	r28, 0x21	; 33
    302c:	09 f0       	breq	.+2      	; 0x3030 <__vector_11+0x1fe>
    302e:	43 c0       	rjmp	.+134    	; 0x30b6 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    3030:	e8 ee       	ldi	r30, 0xE8	; 232
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	82 ff       	sbrs	r24, 2
    3038:	fd cf       	rjmp	.-6      	; 0x3034 <__vector_11+0x202>
    303a:	e4 e3       	ldi	r30, 0x34	; 52
    303c:	f1 e0       	ldi	r31, 0x01	; 1
    303e:	8b e3       	ldi	r24, 0x3B	; 59
    3040:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    3042:	a1 ef       	ldi	r26, 0xF1	; 241
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	2c 91       	ld	r18, X
    3048:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    304a:	e8 17       	cp	r30, r24
    304c:	f9 07       	cpc	r31, r25
    304e:	d9 f7       	brne	.-10     	; 0x3046 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    3050:	e8 ee       	ldi	r30, 0xE8	; 232
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	8b ef       	ldi	r24, 0xFB	; 251
    3056:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3058:	8e ef       	ldi	r24, 0xFE	; 254
    305a:	80 83       	st	Z, r24
    305c:	5a c0       	rjmp	.+180    	; 0x3112 <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    305e:	42 32       	cpi	r20, 0x22	; 34
    3060:	71 f4       	brne	.+28     	; 0x307e <__vector_11+0x24c>
    3062:	c1 32       	cpi	r28, 0x21	; 33
    3064:	09 f0       	breq	.+2      	; 0x3068 <__vector_11+0x236>
    3066:	4e c0       	rjmp	.+156    	; 0x3104 <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    3068:	20 93 aa 01 	sts	0x01AA, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    306c:	e8 ee       	ldi	r30, 0xE8	; 232
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	80 ff       	sbrs	r24, 0
    3074:	fd cf       	rjmp	.-6      	; 0x3070 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3076:	8e ef       	ldi	r24, 0xFE	; 254
    3078:	80 93 e8 00 	sts	0x00E8, r24
    307c:	4a c0       	rjmp	.+148    	; 0x3112 <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    307e:	41 11       	cpse	r20, r1
    3080:	1a c0       	rjmp	.+52     	; 0x30b6 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3082:	e8 ee       	ldi	r30, 0xE8	; 232
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	80 ff       	sbrs	r24, 0
    308a:	fd cf       	rjmp	.-6      	; 0x3086 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    308c:	c2 38       	cpi	r28, 0x82	; 130
    308e:	51 f4       	brne	.+20     	; 0x30a4 <__vector_11+0x272>
				UENUM = wIndex;
    3090:	e9 ee       	ldi	r30, 0xE9	; 233
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    3096:	80 91 eb 00 	lds	r24, 0x00EB
    309a:	85 fb       	bst	r24, 5
    309c:	88 27       	eor	r24, r24
    309e:	80 f9       	bld	r24, 0
				UENUM = 0;
    30a0:	10 82       	st	Z, r1
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    30a4:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    30a6:	e1 ef       	ldi	r30, 0xF1	; 241
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 83       	st	Z, r24
			UEDATX = 0;
    30ac:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    30ae:	8e ef       	ldi	r24, 0xFE	; 254
    30b0:	80 93 e8 00 	sts	0x00E8, r24
    30b4:	2e c0       	rjmp	.+92     	; 0x3112 <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    30b6:	84 2f       	mov	r24, r20
    30b8:	8d 7f       	andi	r24, 0xFD	; 253
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	19 f5       	brne	.+70     	; 0x3104 <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    30be:	c2 30       	cpi	r28, 0x02	; 2
    30c0:	09 f5       	brne	.+66     	; 0x3104 <__vector_11+0x2d2>
    30c2:	23 2b       	or	r18, r19
    30c4:	f9 f4       	brne	.+62     	; 0x3104 <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    30c6:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    30c8:	8f ef       	ldi	r24, 0xFF	; 255
    30ca:	86 0f       	add	r24, r22
    30cc:	84 30       	cpi	r24, 0x04	; 4
    30ce:	d0 f4       	brcc	.+52     	; 0x3104 <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    30d0:	8e ef       	ldi	r24, 0xFE	; 254
    30d2:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    30d6:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    30da:	43 30       	cpi	r20, 0x03	; 3
    30dc:	21 f4       	brne	.+8      	; 0x30e6 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    30de:	81 e2       	ldi	r24, 0x21	; 33
    30e0:	80 93 eb 00 	sts	0x00EB, r24
    30e4:	16 c0       	rjmp	.+44     	; 0x3112 <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    30e6:	89 e1       	ldi	r24, 0x19	; 25
    30e8:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <__vector_11+0x2c4>
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	6a 95       	dec	r22
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <__vector_11+0x2c0>
    30fa:	ea ee       	ldi	r30, 0xEA	; 234
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 83       	st	Z, r24
					UERST = 0;
    3100:	10 82       	st	Z, r1
    3102:	07 c0       	rjmp	.+14     	; 0x3112 <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    3104:	81 e2       	ldi	r24, 0x21	; 33
    3106:	80 93 eb 00 	sts	0x00EB, r24
    310a:	03 c0       	rjmp	.+6      	; 0x3112 <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    310c:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    310e:	51 11       	cpse	r21, r1
    3110:	f6 ce       	rjmp	.-532    	; 0x2efe <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    3112:	ff 91       	pop	r31
    3114:	ef 91       	pop	r30
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	bf 91       	pop	r27
    311c:	af 91       	pop	r26
    311e:	9f 91       	pop	r25
    3120:	8f 91       	pop	r24
    3122:	7f 91       	pop	r23
    3124:	6f 91       	pop	r22
    3126:	5f 91       	pop	r21
    3128:	4f 91       	pop	r20
    312a:	3f 91       	pop	r19
    312c:	2f 91       	pop	r18
    312e:	1f 91       	pop	r17
    3130:	0f 91       	pop	r16
    3132:	0f 90       	pop	r0
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	0f 90       	pop	r0
    3138:	1f 90       	pop	r1
    313a:	18 95       	reti

0000313c <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    3142:	ec 01       	movw	r28, r24
    3144:	21 96       	adiw	r28, 0x01	; 1
    3146:	fc 01       	movw	r30, r24
    3148:	14 91       	lpm	r17, Z
		if (!c) break;
    314a:	11 23       	and	r17, r17
    314c:	69 f0       	breq	.+26     	; 0x3168 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    314e:	1a 30       	cpi	r17, 0x0A	; 10
    3150:	19 f4       	brne	.+6      	; 0x3158 <print_P+0x1c>
    3152:	8d e0       	ldi	r24, 0x0D	; 13
    3154:	0e 94 80 16 	call	0x2d00	; 0x2d00 <m_usb_tx_char>
		usb_tx_char(c);
    3158:	81 2f       	mov	r24, r17
    315a:	0e 94 80 16 	call	0x2d00	; 0x2d00 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    315e:	fe 01       	movw	r30, r28
    3160:	14 91       	lpm	r17, Z
    3162:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    3164:	11 11       	cpse	r17, r1
    3166:	f3 cf       	rjmp	.-26     	; 0x314e <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	08 95       	ret

00003170 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    3170:	ef 92       	push	r14
    3172:	ff 92       	push	r15
    3174:	0f 93       	push	r16
    3176:	1f 93       	push	r17
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	27 97       	sbiw	r28, 0x07	; 7
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    318c:	8e 01       	movw	r16, r28
    318e:	0f 5f       	subi	r16, 0xFF	; 255
    3190:	1f 4f       	sbci	r17, 0xFF	; 255
    3192:	27 e0       	ldi	r18, 0x07	; 7
    3194:	f8 01       	movw	r30, r16
    3196:	11 92       	st	Z+, r1
    3198:	2a 95       	dec	r18
    319a:	e9 f7       	brne	.-6      	; 0x3196 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    319c:	4a e0       	ldi	r20, 0x0A	; 10
    319e:	b8 01       	movw	r22, r16
    31a0:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__itoa_ncheck>
    31a4:	7e 01       	movw	r14, r28
    31a6:	f8 e0       	ldi	r31, 0x08	; 8
    31a8:	ef 0e       	add	r14, r31
    31aa:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    31ac:	f8 01       	movw	r30, r16
    31ae:	81 91       	ld	r24, Z+
    31b0:	8f 01       	movw	r16, r30
    31b2:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    31b4:	0e 94 80 16 	call	0x2d00	; 0x2d00 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    31b8:	0e 15       	cp	r16, r14
    31ba:	1f 05       	cpc	r17, r15
    31bc:	b9 f7       	brne	.-18     	; 0x31ac <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    31be:	27 96       	adiw	r28, 0x07	; 7
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	1f 91       	pop	r17
    31d0:	0f 91       	pop	r16
    31d2:	ff 90       	pop	r15
    31d4:	ef 90       	pop	r14
    31d6:	08 95       	ret

000031d8 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    31dc:	ec eb       	ldi	r30, 0xBC	; 188
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	88 23       	and	r24, r24
    31e4:	34 f0       	brlt	.+12     	; 0x31f2 <twi_wait+0x1a>
    31e6:	2f 5f       	subi	r18, 0xFF	; 255
    31e8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ea:	29 3e       	cpi	r18, 0xE9	; 233
    31ec:	83 e0       	ldi	r24, 0x03	; 3
    31ee:	38 07       	cpc	r19, r24
    31f0:	b9 f7       	brne	.-18     	; 0x31e0 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	28 3e       	cpi	r18, 0xE8	; 232
    31f6:	33 40       	sbci	r19, 0x03	; 3
    31f8:	09 f4       	brne	.+2      	; 0x31fc <twi_wait+0x24>
    31fa:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    31fc:	08 95       	ret

000031fe <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    31fe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    3202:	84 e8       	ldi	r24, 0x84	; 132
    3204:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    3208:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <twi_wait>
    320c:	88 23       	and	r24, r24
    320e:	19 f0       	breq	.+6      	; 0x3216 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    3210:	80 91 b9 00 	lds	r24, 0x00B9
    3214:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    3216:	08 95       	ret

00003218 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    3218:	cf 93       	push	r28
    321a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    321c:	94 ea       	ldi	r25, 0xA4	; 164
    321e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    3222:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <twi_wait>
    3226:	88 23       	and	r24, r24
    3228:	61 f0       	breq	.+24     	; 0x3242 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    322a:	8c 2f       	mov	r24, r28
    322c:	88 0f       	add	r24, r24
    322e:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    3232:	80 32       	cpi	r24, 0x20	; 32
    3234:	29 f4       	brne	.+10     	; 0x3240 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    3236:	84 e9       	ldi	r24, 0x94	; 148
    3238:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <start_write+0x2a>
	}	
	return 1;	// success
    3240:	81 e0       	ldi	r24, 0x01	; 1
}	
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    3246:	0e 94 98 15 	call	0x2b30	; 0x2b30 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    324a:	88 e5       	ldi	r24, 0x58	; 88
    324c:	0e 94 0c 19 	call	0x3218	; 0x3218 <start_write>
    3250:	88 23       	and	r24, r24
    3252:	09 f4       	brne	.+2      	; 0x3256 <m_wii_open+0x10>
    3254:	cd c0       	rjmp	.+410    	; 0x33f0 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    3256:	80 e3       	ldi	r24, 0x30	; 48
    3258:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    325c:	88 23       	and	r24, r24
    325e:	09 f4       	brne	.+2      	; 0x3262 <m_wii_open+0x1c>
    3260:	c9 c0       	rjmp	.+402    	; 0x33f4 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    3268:	88 23       	and	r24, r24
    326a:	09 f4       	brne	.+2      	; 0x326e <m_wii_open+0x28>
    326c:	c5 c0       	rjmp	.+394    	; 0x33f8 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    326e:	84 e9       	ldi	r24, 0x94	; 148
    3270:	80 93 bc 00 	sts	0x00BC, r24
    3274:	83 ec       	ldi	r24, 0xC3	; 195
    3276:	99 e0       	ldi	r25, 0x09	; 9
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <m_wii_open+0x32>
    327c:	00 c0       	rjmp	.+0      	; 0x327e <m_wii_open+0x38>
    327e:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    3280:	88 e5       	ldi	r24, 0x58	; 88
    3282:	0e 94 0c 19 	call	0x3218	; 0x3218 <start_write>
    3286:	88 23       	and	r24, r24
    3288:	09 f4       	brne	.+2      	; 0x328c <m_wii_open+0x46>
    328a:	b8 c0       	rjmp	.+368    	; 0x33fc <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    3292:	88 23       	and	r24, r24
    3294:	09 f4       	brne	.+2      	; 0x3298 <m_wii_open+0x52>
    3296:	b4 c0       	rjmp	.+360    	; 0x3400 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    329e:	88 23       	and	r24, r24
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <m_wii_open+0x5e>
    32a2:	b0 c0       	rjmp	.+352    	; 0x3404 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    32aa:	88 23       	and	r24, r24
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <m_wii_open+0x6a>
    32ae:	ac c0       	rjmp	.+344    	; 0x3408 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    32b6:	88 23       	and	r24, r24
    32b8:	09 f4       	brne	.+2      	; 0x32bc <m_wii_open+0x76>
    32ba:	a8 c0       	rjmp	.+336    	; 0x340c <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    32c2:	88 23       	and	r24, r24
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <m_wii_open+0x82>
    32c6:	a4 c0       	rjmp	.+328    	; 0x3410 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    32ce:	88 23       	and	r24, r24
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <m_wii_open+0x8e>
    32d2:	a0 c0       	rjmp	.+320    	; 0x3414 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    32da:	88 23       	and	r24, r24
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <m_wii_open+0x9a>
    32de:	9c c0       	rjmp	.+312    	; 0x3418 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    32e0:	80 e9       	ldi	r24, 0x90	; 144
    32e2:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    32e6:	88 23       	and	r24, r24
    32e8:	09 f4       	brne	.+2      	; 0x32ec <m_wii_open+0xa6>
    32ea:	98 c0       	rjmp	.+304    	; 0x341c <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    32ec:	84 e9       	ldi	r24, 0x94	; 148
    32ee:	80 93 bc 00 	sts	0x00BC, r24
    32f2:	83 ec       	ldi	r24, 0xC3	; 195
    32f4:	99 e0       	ldi	r25, 0x09	; 9
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <m_wii_open+0xb0>
    32fa:	00 c0       	rjmp	.+0      	; 0x32fc <m_wii_open+0xb6>
    32fc:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    32fe:	88 e5       	ldi	r24, 0x58	; 88
    3300:	0e 94 0c 19 	call	0x3218	; 0x3218 <start_write>
    3304:	88 23       	and	r24, r24
    3306:	09 f4       	brne	.+2      	; 0x330a <m_wii_open+0xc4>
    3308:	8b c0       	rjmp	.+278    	; 0x3420 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    330a:	87 e0       	ldi	r24, 0x07	; 7
    330c:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    3310:	88 23       	and	r24, r24
    3312:	09 f4       	brne	.+2      	; 0x3316 <m_wii_open+0xd0>
    3314:	87 c0       	rjmp	.+270    	; 0x3424 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    331c:	88 23       	and	r24, r24
    331e:	09 f4       	brne	.+2      	; 0x3322 <m_wii_open+0xdc>
    3320:	83 c0       	rjmp	.+262    	; 0x3428 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    3322:	81 e4       	ldi	r24, 0x41	; 65
    3324:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    3328:	88 23       	and	r24, r24
    332a:	09 f4       	brne	.+2      	; 0x332e <m_wii_open+0xe8>
    332c:	7f c0       	rjmp	.+254    	; 0x342c <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    332e:	84 e9       	ldi	r24, 0x94	; 148
    3330:	80 93 bc 00 	sts	0x00BC, r24
    3334:	83 ec       	ldi	r24, 0xC3	; 195
    3336:	99 e0       	ldi	r25, 0x09	; 9
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <m_wii_open+0xf2>
    333c:	00 c0       	rjmp	.+0      	; 0x333e <m_wii_open+0xf8>
    333e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    3340:	88 e5       	ldi	r24, 0x58	; 88
    3342:	0e 94 0c 19 	call	0x3218	; 0x3218 <start_write>
    3346:	88 23       	and	r24, r24
    3348:	09 f4       	brne	.+2      	; 0x334c <m_wii_open+0x106>
    334a:	72 c0       	rjmp	.+228    	; 0x3430 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    334c:	8a e1       	ldi	r24, 0x1A	; 26
    334e:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    3352:	88 23       	and	r24, r24
    3354:	09 f4       	brne	.+2      	; 0x3358 <m_wii_open+0x112>
    3356:	6e c0       	rjmp	.+220    	; 0x3434 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    3358:	80 e4       	ldi	r24, 0x40	; 64
    335a:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    335e:	88 23       	and	r24, r24
    3360:	09 f4       	brne	.+2      	; 0x3364 <m_wii_open+0x11e>
    3362:	6a c0       	rjmp	.+212    	; 0x3438 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    336a:	88 23       	and	r24, r24
    336c:	09 f4       	brne	.+2      	; 0x3370 <m_wii_open+0x12a>
    336e:	66 c0       	rjmp	.+204    	; 0x343c <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3370:	84 e9       	ldi	r24, 0x94	; 148
    3372:	80 93 bc 00 	sts	0x00BC, r24
    3376:	83 ec       	ldi	r24, 0xC3	; 195
    3378:	99 e0       	ldi	r25, 0x09	; 9
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <m_wii_open+0x134>
    337e:	00 c0       	rjmp	.+0      	; 0x3380 <m_wii_open+0x13a>
    3380:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    3382:	88 e5       	ldi	r24, 0x58	; 88
    3384:	0e 94 0c 19 	call	0x3218	; 0x3218 <start_write>
    3388:	88 23       	and	r24, r24
    338a:	09 f4       	brne	.+2      	; 0x338e <m_wii_open+0x148>
    338c:	59 c0       	rjmp	.+178    	; 0x3440 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    338e:	83 e3       	ldi	r24, 0x33	; 51
    3390:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    3394:	88 23       	and	r24, r24
    3396:	09 f4       	brne	.+2      	; 0x339a <m_wii_open+0x154>
    3398:	55 c0       	rjmp	.+170    	; 0x3444 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    33a0:	88 23       	and	r24, r24
    33a2:	09 f4       	brne	.+2      	; 0x33a6 <m_wii_open+0x160>
    33a4:	51 c0       	rjmp	.+162    	; 0x3448 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    33a6:	84 e9       	ldi	r24, 0x94	; 148
    33a8:	80 93 bc 00 	sts	0x00BC, r24
    33ac:	83 ec       	ldi	r24, 0xC3	; 195
    33ae:	99 e0       	ldi	r25, 0x09	; 9
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <m_wii_open+0x16a>
    33b4:	00 c0       	rjmp	.+0      	; 0x33b6 <m_wii_open+0x170>
    33b6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    33b8:	88 e5       	ldi	r24, 0x58	; 88
    33ba:	0e 94 0c 19 	call	0x3218	; 0x3218 <start_write>
    33be:	88 23       	and	r24, r24
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <m_wii_open+0x17e>
    33c2:	44 c0       	rjmp	.+136    	; 0x344c <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    33c4:	80 e3       	ldi	r24, 0x30	; 48
    33c6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    33ca:	88 23       	and	r24, r24
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <m_wii_open+0x18a>
    33ce:	40 c0       	rjmp	.+128    	; 0x3450 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    33d0:	88 e0       	ldi	r24, 0x08	; 8
    33d2:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    33d6:	88 23       	and	r24, r24
    33d8:	e9 f1       	breq	.+122    	; 0x3454 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    33da:	84 e9       	ldi	r24, 0x94	; 148
    33dc:	80 93 bc 00 	sts	0x00BC, r24
    33e0:	83 ec       	ldi	r24, 0xC3	; 195
    33e2:	99 e0       	ldi	r25, 0x09	; 9
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <m_wii_open+0x19e>
    33e8:	00 c0       	rjmp	.+0      	; 0x33ea <m_wii_open+0x1a4>
    33ea:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    3454:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    3456:	08 95       	ret

00003458 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    3458:	cf 93       	push	r28
    345a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    345c:	94 ea       	ldi	r25, 0xA4	; 164
    345e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    3462:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <twi_wait>
    3466:	88 23       	and	r24, r24
    3468:	69 f0       	breq	.+26     	; 0x3484 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    346a:	8c 2f       	mov	r24, r28
    346c:	88 0f       	add	r24, r24
    346e:	8f 5f       	subi	r24, 0xFF	; 255
    3470:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    3474:	88 34       	cpi	r24, 0x48	; 72
    3476:	29 f4       	brne	.+10     	; 0x3482 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    3478:	84 e9       	ldi	r24, 0x94	; 148
    347a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <start_read+0x2c>
	}	
	return 1;	// success
    3482:	81 e0       	ldi	r24, 0x01	; 1
}	
    3484:	cf 91       	pop	r28
    3486:	08 95       	ret

00003488 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    3488:	ef 92       	push	r14
    348a:	ff 92       	push	r15
    348c:	0f 93       	push	r16
    348e:	1f 93       	push	r17
    3490:	cf 93       	push	r28
    3492:	df 93       	push	r29
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	60 97       	sbiw	r28, 0x10	; 16
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	08 2f       	mov	r16, r24
    34a6:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    34a8:	fe 01       	movw	r30, r28
    34aa:	31 96       	adiw	r30, 0x01	; 1
    34ac:	80 e1       	ldi	r24, 0x10	; 16
    34ae:	df 01       	movw	r26, r30
    34b0:	1d 92       	st	X+, r1
    34b2:	8a 95       	dec	r24
    34b4:	e9 f7       	brne	.-6      	; 0x34b0 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    34b6:	88 e5       	ldi	r24, 0x58	; 88
    34b8:	0e 94 0c 19 	call	0x3218	; 0x3218 <start_write>
    34bc:	88 23       	and	r24, r24
    34be:	09 f4       	brne	.+2      	; 0x34c2 <m_wii_read+0x3a>
    34c0:	6e c0       	rjmp	.+220    	; 0x359e <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    34c2:	86 e3       	ldi	r24, 0x36	; 54
    34c4:	0e 94 ff 18 	call	0x31fe	; 0x31fe <send_byte>
    34c8:	88 23       	and	r24, r24
    34ca:	09 f4       	brne	.+2      	; 0x34ce <m_wii_read+0x46>
    34cc:	6a c0       	rjmp	.+212    	; 0x35a2 <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    34ce:	84 e9       	ldi	r24, 0x94	; 148
    34d0:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34d4:	b8 e0       	ldi	r27, 0x08	; 8
    34d6:	ba 95       	dec	r27
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <m_wii_read+0x4e>
    34da:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    34dc:	88 e5       	ldi	r24, 0x58	; 88
    34de:	0e 94 2c 1a 	call	0x3458	; 0x3458 <start_read>
    34e2:	88 23       	and	r24, r24
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <m_wii_read+0x60>
    34e6:	5f c0       	rjmp	.+190    	; 0x35a6 <m_wii_read+0x11e>
    34e8:	be 01       	movw	r22, r28
    34ea:	6f 5f       	subi	r22, 0xFF	; 255
    34ec:	7f 4f       	sbci	r23, 0xFF	; 255
    34ee:	9e 01       	movw	r18, r28
    34f0:	20 5f       	subi	r18, 0xF0	; 240
    34f2:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    34f4:	ec eb       	ldi	r30, 0xBC	; 188
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    34fa:	4b eb       	ldi	r20, 0xBB	; 187
    34fc:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    34fe:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    3500:	80 81       	ld	r24, Z
    3502:	88 23       	and	r24, r24
    3504:	ec f7       	brge	.-6      	; 0x3500 <m_wii_read+0x78>
		temp[i] = TWDR;
    3506:	da 01       	movw	r26, r20
    3508:	8c 91       	ld	r24, X
    350a:	db 01       	movw	r26, r22
    350c:	8d 93       	st	X+, r24
    350e:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    3510:	a2 17       	cp	r26, r18
    3512:	b3 07       	cpc	r27, r19
    3514:	a1 f7       	brne	.-24     	; 0x34fe <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    3516:	84 e8       	ldi	r24, 0x84	; 132
    3518:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    351c:	ec eb       	ldi	r30, 0xBC	; 188
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	88 23       	and	r24, r24
    3524:	ec f7       	brge	.-6      	; 0x3520 <m_wii_read+0x98>
	temp[15] = TWDR;
    3526:	80 91 bb 00 	lds	r24, 0x00BB
    352a:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    352c:	84 e9       	ldi	r24, 0x94	; 148
    352e:	80 93 bc 00 	sts	0x00BC, r24
    3532:	fe 01       	movw	r30, r28
    3534:	34 96       	adiw	r30, 0x04	; 4
    3536:	e0 2e       	mov	r14, r16
    3538:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    353a:	80 81       	ld	r24, Z
    353c:	98 2f       	mov	r25, r24
    353e:	90 73       	andi	r25, 0x30	; 48
    3540:	af 01       	movw	r20, r30
    3542:	42 50       	subi	r20, 0x02	; 2
    3544:	51 09       	sbc	r21, r1
    3546:	da 01       	movw	r26, r20
    3548:	4c 91       	ld	r20, X
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	b0 e1       	ldi	r27, 0x10	; 16
    354e:	9b 9f       	mul	r25, r27
    3550:	40 0d       	add	r20, r0
    3552:	51 1d       	adc	r21, r1
    3554:	11 24       	eor	r1, r1
    3556:	d7 01       	movw	r26, r14
    3558:	4d 93       	st	X+, r20
    355a:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    355c:	48 2f       	mov	r20, r24
    355e:	40 7c       	andi	r20, 0xC0	; 192
    3560:	50 e0       	ldi	r21, 0x00	; 0
    3562:	44 0f       	add	r20, r20
    3564:	55 1f       	adc	r21, r21
    3566:	44 0f       	add	r20, r20
    3568:	55 1f       	adc	r21, r21
    356a:	bf 01       	movw	r22, r30
    356c:	61 50       	subi	r22, 0x01	; 1
    356e:	71 09       	sbc	r23, r1
    3570:	db 01       	movw	r26, r22
    3572:	9c 91       	ld	r25, X
    3574:	49 0f       	add	r20, r25
    3576:	51 1d       	adc	r21, r1
    3578:	d7 01       	movw	r26, r14
    357a:	13 96       	adiw	r26, 0x03	; 3
    357c:	5c 93       	st	X, r21
    357e:	4e 93       	st	-X, r20
    3580:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    3582:	8f 70       	andi	r24, 0x0F	; 15
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	15 96       	adiw	r26, 0x05	; 5
    3588:	9c 93       	st	X, r25
    358a:	8e 93       	st	-X, r24
    358c:	14 97       	sbiw	r26, 0x04	; 4
    358e:	33 96       	adiw	r30, 0x03	; 3
    3590:	b6 e0       	ldi	r27, 0x06	; 6
    3592:	eb 0e       	add	r14, r27
    3594:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    3596:	2e 17       	cp	r18, r30
    3598:	3f 07       	cpc	r19, r31
    359a:	79 f6       	brne	.-98     	; 0x353a <m_wii_read+0xb2>
    359c:	06 c0       	rjmp	.+12     	; 0x35aa <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	05 c0       	rjmp	.+10     	; 0x35ac <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	03 c0       	rjmp	.+6      	; 0x35ac <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	01 c0       	rjmp	.+2      	; 0x35ac <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
}
    35ac:	60 96       	adiw	r28, 0x10	; 16
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	1f 91       	pop	r17
    35be:	0f 91       	pop	r16
    35c0:	ff 90       	pop	r15
    35c2:	ef 90       	pop	r14
    35c4:	08 95       	ret

000035c6 <acos>:
    35c6:	9f 93       	push	r25
    35c8:	9f 77       	andi	r25, 0x7F	; 127
    35ca:	4a d1       	rcall	.+660    	; 0x3860 <__fp_arccos>
    35cc:	0f 90       	pop	r0
    35ce:	00 20       	and	r0, r0
    35d0:	3a f4       	brpl	.+14     	; 0x35e0 <acos+0x1a>
    35d2:	90 58       	subi	r25, 0x80	; 128
    35d4:	a2 ea       	ldi	r26, 0xA2	; 162
    35d6:	2a ed       	ldi	r18, 0xDA	; 218
    35d8:	3f e0       	ldi	r19, 0x0F	; 15
    35da:	49 e4       	ldi	r20, 0x49	; 73
    35dc:	50 e4       	ldi	r21, 0x40	; 64
    35de:	13 d0       	rcall	.+38     	; 0x3606 <__addsf3x>
    35e0:	ba c1       	rjmp	.+884    	; 0x3956 <__fp_round>

000035e2 <__subsf3>:
    35e2:	50 58       	subi	r21, 0x80	; 128

000035e4 <__addsf3>:
    35e4:	bb 27       	eor	r27, r27
    35e6:	aa 27       	eor	r26, r26
    35e8:	0e d0       	rcall	.+28     	; 0x3606 <__addsf3x>
    35ea:	b5 c1       	rjmp	.+874    	; 0x3956 <__fp_round>
    35ec:	a6 d1       	rcall	.+844    	; 0x393a <__fp_pscA>
    35ee:	30 f0       	brcs	.+12     	; 0x35fc <__addsf3+0x18>
    35f0:	ab d1       	rcall	.+854    	; 0x3948 <__fp_pscB>
    35f2:	20 f0       	brcs	.+8      	; 0x35fc <__addsf3+0x18>
    35f4:	31 f4       	brne	.+12     	; 0x3602 <__addsf3+0x1e>
    35f6:	9f 3f       	cpi	r25, 0xFF	; 255
    35f8:	11 f4       	brne	.+4      	; 0x35fe <__addsf3+0x1a>
    35fa:	1e f4       	brtc	.+6      	; 0x3602 <__addsf3+0x1e>
    35fc:	76 c1       	rjmp	.+748    	; 0x38ea <__fp_nan>
    35fe:	0e f4       	brtc	.+2      	; 0x3602 <__addsf3+0x1e>
    3600:	e0 95       	com	r30
    3602:	e7 fb       	bst	r30, 7
    3604:	6c c1       	rjmp	.+728    	; 0x38de <__fp_inf>

00003606 <__addsf3x>:
    3606:	e9 2f       	mov	r30, r25
    3608:	b7 d1       	rcall	.+878    	; 0x3978 <__fp_split3>
    360a:	80 f3       	brcs	.-32     	; 0x35ec <__addsf3+0x8>
    360c:	ba 17       	cp	r27, r26
    360e:	62 07       	cpc	r22, r18
    3610:	73 07       	cpc	r23, r19
    3612:	84 07       	cpc	r24, r20
    3614:	95 07       	cpc	r25, r21
    3616:	18 f0       	brcs	.+6      	; 0x361e <__addsf3x+0x18>
    3618:	71 f4       	brne	.+28     	; 0x3636 <__addsf3x+0x30>
    361a:	9e f5       	brtc	.+102    	; 0x3682 <__addsf3x+0x7c>
    361c:	cf c1       	rjmp	.+926    	; 0x39bc <__fp_zero>
    361e:	0e f4       	brtc	.+2      	; 0x3622 <__addsf3x+0x1c>
    3620:	e0 95       	com	r30
    3622:	0b 2e       	mov	r0, r27
    3624:	ba 2f       	mov	r27, r26
    3626:	a0 2d       	mov	r26, r0
    3628:	0b 01       	movw	r0, r22
    362a:	b9 01       	movw	r22, r18
    362c:	90 01       	movw	r18, r0
    362e:	0c 01       	movw	r0, r24
    3630:	ca 01       	movw	r24, r20
    3632:	a0 01       	movw	r20, r0
    3634:	11 24       	eor	r1, r1
    3636:	ff 27       	eor	r31, r31
    3638:	59 1b       	sub	r21, r25
    363a:	99 f0       	breq	.+38     	; 0x3662 <__addsf3x+0x5c>
    363c:	59 3f       	cpi	r21, 0xF9	; 249
    363e:	50 f4       	brcc	.+20     	; 0x3654 <__addsf3x+0x4e>
    3640:	50 3e       	cpi	r21, 0xE0	; 224
    3642:	68 f1       	brcs	.+90     	; 0x369e <__addsf3x+0x98>
    3644:	1a 16       	cp	r1, r26
    3646:	f0 40       	sbci	r31, 0x00	; 0
    3648:	a2 2f       	mov	r26, r18
    364a:	23 2f       	mov	r18, r19
    364c:	34 2f       	mov	r19, r20
    364e:	44 27       	eor	r20, r20
    3650:	58 5f       	subi	r21, 0xF8	; 248
    3652:	f3 cf       	rjmp	.-26     	; 0x363a <__addsf3x+0x34>
    3654:	46 95       	lsr	r20
    3656:	37 95       	ror	r19
    3658:	27 95       	ror	r18
    365a:	a7 95       	ror	r26
    365c:	f0 40       	sbci	r31, 0x00	; 0
    365e:	53 95       	inc	r21
    3660:	c9 f7       	brne	.-14     	; 0x3654 <__addsf3x+0x4e>
    3662:	7e f4       	brtc	.+30     	; 0x3682 <__addsf3x+0x7c>
    3664:	1f 16       	cp	r1, r31
    3666:	ba 0b       	sbc	r27, r26
    3668:	62 0b       	sbc	r22, r18
    366a:	73 0b       	sbc	r23, r19
    366c:	84 0b       	sbc	r24, r20
    366e:	ba f0       	brmi	.+46     	; 0x369e <__addsf3x+0x98>
    3670:	91 50       	subi	r25, 0x01	; 1
    3672:	a1 f0       	breq	.+40     	; 0x369c <__addsf3x+0x96>
    3674:	ff 0f       	add	r31, r31
    3676:	bb 1f       	adc	r27, r27
    3678:	66 1f       	adc	r22, r22
    367a:	77 1f       	adc	r23, r23
    367c:	88 1f       	adc	r24, r24
    367e:	c2 f7       	brpl	.-16     	; 0x3670 <__addsf3x+0x6a>
    3680:	0e c0       	rjmp	.+28     	; 0x369e <__addsf3x+0x98>
    3682:	ba 0f       	add	r27, r26
    3684:	62 1f       	adc	r22, r18
    3686:	73 1f       	adc	r23, r19
    3688:	84 1f       	adc	r24, r20
    368a:	48 f4       	brcc	.+18     	; 0x369e <__addsf3x+0x98>
    368c:	87 95       	ror	r24
    368e:	77 95       	ror	r23
    3690:	67 95       	ror	r22
    3692:	b7 95       	ror	r27
    3694:	f7 95       	ror	r31
    3696:	9e 3f       	cpi	r25, 0xFE	; 254
    3698:	08 f0       	brcs	.+2      	; 0x369c <__addsf3x+0x96>
    369a:	b3 cf       	rjmp	.-154    	; 0x3602 <__addsf3+0x1e>
    369c:	93 95       	inc	r25
    369e:	88 0f       	add	r24, r24
    36a0:	08 f0       	brcs	.+2      	; 0x36a4 <__addsf3x+0x9e>
    36a2:	99 27       	eor	r25, r25
    36a4:	ee 0f       	add	r30, r30
    36a6:	97 95       	ror	r25
    36a8:	87 95       	ror	r24
    36aa:	08 95       	ret

000036ac <__cmpsf2>:
    36ac:	f4 d0       	rcall	.+488    	; 0x3896 <__fp_cmp>
    36ae:	08 f4       	brcc	.+2      	; 0x36b2 <__cmpsf2+0x6>
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	08 95       	ret

000036b4 <__divsf3>:
    36b4:	0c d0       	rcall	.+24     	; 0x36ce <__divsf3x>
    36b6:	4f c1       	rjmp	.+670    	; 0x3956 <__fp_round>
    36b8:	47 d1       	rcall	.+654    	; 0x3948 <__fp_pscB>
    36ba:	40 f0       	brcs	.+16     	; 0x36cc <__divsf3+0x18>
    36bc:	3e d1       	rcall	.+636    	; 0x393a <__fp_pscA>
    36be:	30 f0       	brcs	.+12     	; 0x36cc <__divsf3+0x18>
    36c0:	21 f4       	brne	.+8      	; 0x36ca <__divsf3+0x16>
    36c2:	5f 3f       	cpi	r21, 0xFF	; 255
    36c4:	19 f0       	breq	.+6      	; 0x36cc <__divsf3+0x18>
    36c6:	0b c1       	rjmp	.+534    	; 0x38de <__fp_inf>
    36c8:	51 11       	cpse	r21, r1
    36ca:	79 c1       	rjmp	.+754    	; 0x39be <__fp_szero>
    36cc:	0e c1       	rjmp	.+540    	; 0x38ea <__fp_nan>

000036ce <__divsf3x>:
    36ce:	54 d1       	rcall	.+680    	; 0x3978 <__fp_split3>
    36d0:	98 f3       	brcs	.-26     	; 0x36b8 <__divsf3+0x4>

000036d2 <__divsf3_pse>:
    36d2:	99 23       	and	r25, r25
    36d4:	c9 f3       	breq	.-14     	; 0x36c8 <__divsf3+0x14>
    36d6:	55 23       	and	r21, r21
    36d8:	b1 f3       	breq	.-20     	; 0x36c6 <__divsf3+0x12>
    36da:	95 1b       	sub	r25, r21
    36dc:	55 0b       	sbc	r21, r21
    36de:	bb 27       	eor	r27, r27
    36e0:	aa 27       	eor	r26, r26
    36e2:	62 17       	cp	r22, r18
    36e4:	73 07       	cpc	r23, r19
    36e6:	84 07       	cpc	r24, r20
    36e8:	38 f0       	brcs	.+14     	; 0x36f8 <__divsf3_pse+0x26>
    36ea:	9f 5f       	subi	r25, 0xFF	; 255
    36ec:	5f 4f       	sbci	r21, 0xFF	; 255
    36ee:	22 0f       	add	r18, r18
    36f0:	33 1f       	adc	r19, r19
    36f2:	44 1f       	adc	r20, r20
    36f4:	aa 1f       	adc	r26, r26
    36f6:	a9 f3       	breq	.-22     	; 0x36e2 <__divsf3_pse+0x10>
    36f8:	33 d0       	rcall	.+102    	; 0x3760 <__divsf3_pse+0x8e>
    36fa:	0e 2e       	mov	r0, r30
    36fc:	3a f0       	brmi	.+14     	; 0x370c <__divsf3_pse+0x3a>
    36fe:	e0 e8       	ldi	r30, 0x80	; 128
    3700:	30 d0       	rcall	.+96     	; 0x3762 <__divsf3_pse+0x90>
    3702:	91 50       	subi	r25, 0x01	; 1
    3704:	50 40       	sbci	r21, 0x00	; 0
    3706:	e6 95       	lsr	r30
    3708:	00 1c       	adc	r0, r0
    370a:	ca f7       	brpl	.-14     	; 0x36fe <__divsf3_pse+0x2c>
    370c:	29 d0       	rcall	.+82     	; 0x3760 <__divsf3_pse+0x8e>
    370e:	fe 2f       	mov	r31, r30
    3710:	27 d0       	rcall	.+78     	; 0x3760 <__divsf3_pse+0x8e>
    3712:	66 0f       	add	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	88 1f       	adc	r24, r24
    3718:	bb 1f       	adc	r27, r27
    371a:	26 17       	cp	r18, r22
    371c:	37 07       	cpc	r19, r23
    371e:	48 07       	cpc	r20, r24
    3720:	ab 07       	cpc	r26, r27
    3722:	b0 e8       	ldi	r27, 0x80	; 128
    3724:	09 f0       	breq	.+2      	; 0x3728 <__divsf3_pse+0x56>
    3726:	bb 0b       	sbc	r27, r27
    3728:	80 2d       	mov	r24, r0
    372a:	bf 01       	movw	r22, r30
    372c:	ff 27       	eor	r31, r31
    372e:	93 58       	subi	r25, 0x83	; 131
    3730:	5f 4f       	sbci	r21, 0xFF	; 255
    3732:	2a f0       	brmi	.+10     	; 0x373e <__divsf3_pse+0x6c>
    3734:	9e 3f       	cpi	r25, 0xFE	; 254
    3736:	51 05       	cpc	r21, r1
    3738:	68 f0       	brcs	.+26     	; 0x3754 <__divsf3_pse+0x82>
    373a:	d1 c0       	rjmp	.+418    	; 0x38de <__fp_inf>
    373c:	40 c1       	rjmp	.+640    	; 0x39be <__fp_szero>
    373e:	5f 3f       	cpi	r21, 0xFF	; 255
    3740:	ec f3       	brlt	.-6      	; 0x373c <__divsf3_pse+0x6a>
    3742:	98 3e       	cpi	r25, 0xE8	; 232
    3744:	dc f3       	brlt	.-10     	; 0x373c <__divsf3_pse+0x6a>
    3746:	86 95       	lsr	r24
    3748:	77 95       	ror	r23
    374a:	67 95       	ror	r22
    374c:	b7 95       	ror	r27
    374e:	f7 95       	ror	r31
    3750:	9f 5f       	subi	r25, 0xFF	; 255
    3752:	c9 f7       	brne	.-14     	; 0x3746 <__divsf3_pse+0x74>
    3754:	88 0f       	add	r24, r24
    3756:	91 1d       	adc	r25, r1
    3758:	96 95       	lsr	r25
    375a:	87 95       	ror	r24
    375c:	97 f9       	bld	r25, 7
    375e:	08 95       	ret
    3760:	e1 e0       	ldi	r30, 0x01	; 1
    3762:	66 0f       	add	r22, r22
    3764:	77 1f       	adc	r23, r23
    3766:	88 1f       	adc	r24, r24
    3768:	bb 1f       	adc	r27, r27
    376a:	62 17       	cp	r22, r18
    376c:	73 07       	cpc	r23, r19
    376e:	84 07       	cpc	r24, r20
    3770:	ba 07       	cpc	r27, r26
    3772:	20 f0       	brcs	.+8      	; 0x377c <__divsf3_pse+0xaa>
    3774:	62 1b       	sub	r22, r18
    3776:	73 0b       	sbc	r23, r19
    3778:	84 0b       	sbc	r24, r20
    377a:	ba 0b       	sbc	r27, r26
    377c:	ee 1f       	adc	r30, r30
    377e:	88 f7       	brcc	.-30     	; 0x3762 <__divsf3_pse+0x90>
    3780:	e0 95       	com	r30
    3782:	08 95       	ret

00003784 <__fixsfsi>:
    3784:	04 d0       	rcall	.+8      	; 0x378e <__fixunssfsi>
    3786:	68 94       	set
    3788:	b1 11       	cpse	r27, r1
    378a:	19 c1       	rjmp	.+562    	; 0x39be <__fp_szero>
    378c:	08 95       	ret

0000378e <__fixunssfsi>:
    378e:	fc d0       	rcall	.+504    	; 0x3988 <__fp_splitA>
    3790:	88 f0       	brcs	.+34     	; 0x37b4 <__fixunssfsi+0x26>
    3792:	9f 57       	subi	r25, 0x7F	; 127
    3794:	90 f0       	brcs	.+36     	; 0x37ba <__fixunssfsi+0x2c>
    3796:	b9 2f       	mov	r27, r25
    3798:	99 27       	eor	r25, r25
    379a:	b7 51       	subi	r27, 0x17	; 23
    379c:	a0 f0       	brcs	.+40     	; 0x37c6 <__fixunssfsi+0x38>
    379e:	d1 f0       	breq	.+52     	; 0x37d4 <__fixunssfsi+0x46>
    37a0:	66 0f       	add	r22, r22
    37a2:	77 1f       	adc	r23, r23
    37a4:	88 1f       	adc	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	1a f0       	brmi	.+6      	; 0x37b0 <__fixunssfsi+0x22>
    37aa:	ba 95       	dec	r27
    37ac:	c9 f7       	brne	.-14     	; 0x37a0 <__fixunssfsi+0x12>
    37ae:	12 c0       	rjmp	.+36     	; 0x37d4 <__fixunssfsi+0x46>
    37b0:	b1 30       	cpi	r27, 0x01	; 1
    37b2:	81 f0       	breq	.+32     	; 0x37d4 <__fixunssfsi+0x46>
    37b4:	03 d1       	rcall	.+518    	; 0x39bc <__fp_zero>
    37b6:	b1 e0       	ldi	r27, 0x01	; 1
    37b8:	08 95       	ret
    37ba:	00 c1       	rjmp	.+512    	; 0x39bc <__fp_zero>
    37bc:	67 2f       	mov	r22, r23
    37be:	78 2f       	mov	r23, r24
    37c0:	88 27       	eor	r24, r24
    37c2:	b8 5f       	subi	r27, 0xF8	; 248
    37c4:	39 f0       	breq	.+14     	; 0x37d4 <__fixunssfsi+0x46>
    37c6:	b9 3f       	cpi	r27, 0xF9	; 249
    37c8:	cc f3       	brlt	.-14     	; 0x37bc <__fixunssfsi+0x2e>
    37ca:	86 95       	lsr	r24
    37cc:	77 95       	ror	r23
    37ce:	67 95       	ror	r22
    37d0:	b3 95       	inc	r27
    37d2:	d9 f7       	brne	.-10     	; 0x37ca <__fixunssfsi+0x3c>
    37d4:	3e f4       	brtc	.+14     	; 0x37e4 <__fixunssfsi+0x56>
    37d6:	90 95       	com	r25
    37d8:	80 95       	com	r24
    37da:	70 95       	com	r23
    37dc:	61 95       	neg	r22
    37de:	7f 4f       	sbci	r23, 0xFF	; 255
    37e0:	8f 4f       	sbci	r24, 0xFF	; 255
    37e2:	9f 4f       	sbci	r25, 0xFF	; 255
    37e4:	08 95       	ret

000037e6 <__floatunsisf>:
    37e6:	e8 94       	clt
    37e8:	09 c0       	rjmp	.+18     	; 0x37fc <__floatsisf+0x12>

000037ea <__floatsisf>:
    37ea:	97 fb       	bst	r25, 7
    37ec:	3e f4       	brtc	.+14     	; 0x37fc <__floatsisf+0x12>
    37ee:	90 95       	com	r25
    37f0:	80 95       	com	r24
    37f2:	70 95       	com	r23
    37f4:	61 95       	neg	r22
    37f6:	7f 4f       	sbci	r23, 0xFF	; 255
    37f8:	8f 4f       	sbci	r24, 0xFF	; 255
    37fa:	9f 4f       	sbci	r25, 0xFF	; 255
    37fc:	99 23       	and	r25, r25
    37fe:	a9 f0       	breq	.+42     	; 0x382a <__floatsisf+0x40>
    3800:	f9 2f       	mov	r31, r25
    3802:	96 e9       	ldi	r25, 0x96	; 150
    3804:	bb 27       	eor	r27, r27
    3806:	93 95       	inc	r25
    3808:	f6 95       	lsr	r31
    380a:	87 95       	ror	r24
    380c:	77 95       	ror	r23
    380e:	67 95       	ror	r22
    3810:	b7 95       	ror	r27
    3812:	f1 11       	cpse	r31, r1
    3814:	f8 cf       	rjmp	.-16     	; 0x3806 <__floatsisf+0x1c>
    3816:	fa f4       	brpl	.+62     	; 0x3856 <__floatsisf+0x6c>
    3818:	bb 0f       	add	r27, r27
    381a:	11 f4       	brne	.+4      	; 0x3820 <__floatsisf+0x36>
    381c:	60 ff       	sbrs	r22, 0
    381e:	1b c0       	rjmp	.+54     	; 0x3856 <__floatsisf+0x6c>
    3820:	6f 5f       	subi	r22, 0xFF	; 255
    3822:	7f 4f       	sbci	r23, 0xFF	; 255
    3824:	8f 4f       	sbci	r24, 0xFF	; 255
    3826:	9f 4f       	sbci	r25, 0xFF	; 255
    3828:	16 c0       	rjmp	.+44     	; 0x3856 <__floatsisf+0x6c>
    382a:	88 23       	and	r24, r24
    382c:	11 f0       	breq	.+4      	; 0x3832 <__floatsisf+0x48>
    382e:	96 e9       	ldi	r25, 0x96	; 150
    3830:	11 c0       	rjmp	.+34     	; 0x3854 <__floatsisf+0x6a>
    3832:	77 23       	and	r23, r23
    3834:	21 f0       	breq	.+8      	; 0x383e <__floatsisf+0x54>
    3836:	9e e8       	ldi	r25, 0x8E	; 142
    3838:	87 2f       	mov	r24, r23
    383a:	76 2f       	mov	r23, r22
    383c:	05 c0       	rjmp	.+10     	; 0x3848 <__floatsisf+0x5e>
    383e:	66 23       	and	r22, r22
    3840:	71 f0       	breq	.+28     	; 0x385e <__floatsisf+0x74>
    3842:	96 e8       	ldi	r25, 0x86	; 134
    3844:	86 2f       	mov	r24, r22
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	60 e0       	ldi	r22, 0x00	; 0
    384a:	2a f0       	brmi	.+10     	; 0x3856 <__floatsisf+0x6c>
    384c:	9a 95       	dec	r25
    384e:	66 0f       	add	r22, r22
    3850:	77 1f       	adc	r23, r23
    3852:	88 1f       	adc	r24, r24
    3854:	da f7       	brpl	.-10     	; 0x384c <__floatsisf+0x62>
    3856:	88 0f       	add	r24, r24
    3858:	96 95       	lsr	r25
    385a:	87 95       	ror	r24
    385c:	97 f9       	bld	r25, 7
    385e:	08 95       	ret

00003860 <__fp_arccos>:
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	1f 93       	push	r17
    3866:	0f 93       	push	r16
    3868:	8b 01       	movw	r16, r22
    386a:	ec 01       	movw	r28, r24
    386c:	ea ec       	ldi	r30, 0xCA	; 202
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	3f d0       	rcall	.+126    	; 0x38f0 <__fp_powser>
    3872:	71 d0       	rcall	.+226    	; 0x3956 <__fp_round>
    3874:	98 01       	movw	r18, r16
    3876:	ae 01       	movw	r20, r28
    3878:	8b 01       	movw	r16, r22
    387a:	ec 01       	movw	r28, r24
    387c:	60 e0       	ldi	r22, 0x00	; 0
    387e:	70 e0       	ldi	r23, 0x00	; 0
    3880:	80 e8       	ldi	r24, 0x80	; 128
    3882:	9f e3       	ldi	r25, 0x3F	; 63
    3884:	ae de       	rcall	.-676    	; 0x35e2 <__subsf3>
    3886:	0c d1       	rcall	.+536    	; 0x3aa0 <sqrt>
    3888:	98 01       	movw	r18, r16
    388a:	ae 01       	movw	r20, r28
    388c:	0f 91       	pop	r16
    388e:	1f 91       	pop	r17
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	aa c0       	rjmp	.+340    	; 0x39ea <__mulsf3x>

00003896 <__fp_cmp>:
    3896:	99 0f       	add	r25, r25
    3898:	00 08       	sbc	r0, r0
    389a:	55 0f       	add	r21, r21
    389c:	aa 0b       	sbc	r26, r26
    389e:	e0 e8       	ldi	r30, 0x80	; 128
    38a0:	fe ef       	ldi	r31, 0xFE	; 254
    38a2:	16 16       	cp	r1, r22
    38a4:	17 06       	cpc	r1, r23
    38a6:	e8 07       	cpc	r30, r24
    38a8:	f9 07       	cpc	r31, r25
    38aa:	c0 f0       	brcs	.+48     	; 0x38dc <__fp_cmp+0x46>
    38ac:	12 16       	cp	r1, r18
    38ae:	13 06       	cpc	r1, r19
    38b0:	e4 07       	cpc	r30, r20
    38b2:	f5 07       	cpc	r31, r21
    38b4:	98 f0       	brcs	.+38     	; 0x38dc <__fp_cmp+0x46>
    38b6:	62 1b       	sub	r22, r18
    38b8:	73 0b       	sbc	r23, r19
    38ba:	84 0b       	sbc	r24, r20
    38bc:	95 0b       	sbc	r25, r21
    38be:	39 f4       	brne	.+14     	; 0x38ce <__fp_cmp+0x38>
    38c0:	0a 26       	eor	r0, r26
    38c2:	61 f0       	breq	.+24     	; 0x38dc <__fp_cmp+0x46>
    38c4:	23 2b       	or	r18, r19
    38c6:	24 2b       	or	r18, r20
    38c8:	25 2b       	or	r18, r21
    38ca:	21 f4       	brne	.+8      	; 0x38d4 <__fp_cmp+0x3e>
    38cc:	08 95       	ret
    38ce:	0a 26       	eor	r0, r26
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <__fp_cmp+0x3e>
    38d2:	a1 40       	sbci	r26, 0x01	; 1
    38d4:	a6 95       	lsr	r26
    38d6:	8f ef       	ldi	r24, 0xFF	; 255
    38d8:	81 1d       	adc	r24, r1
    38da:	81 1d       	adc	r24, r1
    38dc:	08 95       	ret

000038de <__fp_inf>:
    38de:	97 f9       	bld	r25, 7
    38e0:	9f 67       	ori	r25, 0x7F	; 127
    38e2:	80 e8       	ldi	r24, 0x80	; 128
    38e4:	70 e0       	ldi	r23, 0x00	; 0
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	08 95       	ret

000038ea <__fp_nan>:
    38ea:	9f ef       	ldi	r25, 0xFF	; 255
    38ec:	80 ec       	ldi	r24, 0xC0	; 192
    38ee:	08 95       	ret

000038f0 <__fp_powser>:
    38f0:	df 93       	push	r29
    38f2:	cf 93       	push	r28
    38f4:	1f 93       	push	r17
    38f6:	0f 93       	push	r16
    38f8:	ff 92       	push	r15
    38fa:	ef 92       	push	r14
    38fc:	df 92       	push	r13
    38fe:	7b 01       	movw	r14, r22
    3900:	8c 01       	movw	r16, r24
    3902:	68 94       	set
    3904:	05 c0       	rjmp	.+10     	; 0x3910 <__fp_powser+0x20>
    3906:	da 2e       	mov	r13, r26
    3908:	ef 01       	movw	r28, r30
    390a:	6f d0       	rcall	.+222    	; 0x39ea <__mulsf3x>
    390c:	fe 01       	movw	r30, r28
    390e:	e8 94       	clt
    3910:	a5 91       	lpm	r26, Z+
    3912:	25 91       	lpm	r18, Z+
    3914:	35 91       	lpm	r19, Z+
    3916:	45 91       	lpm	r20, Z+
    3918:	55 91       	lpm	r21, Z+
    391a:	ae f3       	brts	.-22     	; 0x3906 <__fp_powser+0x16>
    391c:	ef 01       	movw	r28, r30
    391e:	73 de       	rcall	.-794    	; 0x3606 <__addsf3x>
    3920:	fe 01       	movw	r30, r28
    3922:	97 01       	movw	r18, r14
    3924:	a8 01       	movw	r20, r16
    3926:	da 94       	dec	r13
    3928:	79 f7       	brne	.-34     	; 0x3908 <__fp_powser+0x18>
    392a:	df 90       	pop	r13
    392c:	ef 90       	pop	r14
    392e:	ff 90       	pop	r15
    3930:	0f 91       	pop	r16
    3932:	1f 91       	pop	r17
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	08 95       	ret

0000393a <__fp_pscA>:
    393a:	00 24       	eor	r0, r0
    393c:	0a 94       	dec	r0
    393e:	16 16       	cp	r1, r22
    3940:	17 06       	cpc	r1, r23
    3942:	18 06       	cpc	r1, r24
    3944:	09 06       	cpc	r0, r25
    3946:	08 95       	ret

00003948 <__fp_pscB>:
    3948:	00 24       	eor	r0, r0
    394a:	0a 94       	dec	r0
    394c:	12 16       	cp	r1, r18
    394e:	13 06       	cpc	r1, r19
    3950:	14 06       	cpc	r1, r20
    3952:	05 06       	cpc	r0, r21
    3954:	08 95       	ret

00003956 <__fp_round>:
    3956:	09 2e       	mov	r0, r25
    3958:	03 94       	inc	r0
    395a:	00 0c       	add	r0, r0
    395c:	11 f4       	brne	.+4      	; 0x3962 <__fp_round+0xc>
    395e:	88 23       	and	r24, r24
    3960:	52 f0       	brmi	.+20     	; 0x3976 <__fp_round+0x20>
    3962:	bb 0f       	add	r27, r27
    3964:	40 f4       	brcc	.+16     	; 0x3976 <__fp_round+0x20>
    3966:	bf 2b       	or	r27, r31
    3968:	11 f4       	brne	.+4      	; 0x396e <__fp_round+0x18>
    396a:	60 ff       	sbrs	r22, 0
    396c:	04 c0       	rjmp	.+8      	; 0x3976 <__fp_round+0x20>
    396e:	6f 5f       	subi	r22, 0xFF	; 255
    3970:	7f 4f       	sbci	r23, 0xFF	; 255
    3972:	8f 4f       	sbci	r24, 0xFF	; 255
    3974:	9f 4f       	sbci	r25, 0xFF	; 255
    3976:	08 95       	ret

00003978 <__fp_split3>:
    3978:	57 fd       	sbrc	r21, 7
    397a:	90 58       	subi	r25, 0x80	; 128
    397c:	44 0f       	add	r20, r20
    397e:	55 1f       	adc	r21, r21
    3980:	59 f0       	breq	.+22     	; 0x3998 <__fp_splitA+0x10>
    3982:	5f 3f       	cpi	r21, 0xFF	; 255
    3984:	71 f0       	breq	.+28     	; 0x39a2 <__fp_splitA+0x1a>
    3986:	47 95       	ror	r20

00003988 <__fp_splitA>:
    3988:	88 0f       	add	r24, r24
    398a:	97 fb       	bst	r25, 7
    398c:	99 1f       	adc	r25, r25
    398e:	61 f0       	breq	.+24     	; 0x39a8 <__fp_splitA+0x20>
    3990:	9f 3f       	cpi	r25, 0xFF	; 255
    3992:	79 f0       	breq	.+30     	; 0x39b2 <__fp_splitA+0x2a>
    3994:	87 95       	ror	r24
    3996:	08 95       	ret
    3998:	12 16       	cp	r1, r18
    399a:	13 06       	cpc	r1, r19
    399c:	14 06       	cpc	r1, r20
    399e:	55 1f       	adc	r21, r21
    39a0:	f2 cf       	rjmp	.-28     	; 0x3986 <__fp_split3+0xe>
    39a2:	46 95       	lsr	r20
    39a4:	f1 df       	rcall	.-30     	; 0x3988 <__fp_splitA>
    39a6:	08 c0       	rjmp	.+16     	; 0x39b8 <__fp_splitA+0x30>
    39a8:	16 16       	cp	r1, r22
    39aa:	17 06       	cpc	r1, r23
    39ac:	18 06       	cpc	r1, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	f1 cf       	rjmp	.-30     	; 0x3994 <__fp_splitA+0xc>
    39b2:	86 95       	lsr	r24
    39b4:	71 05       	cpc	r23, r1
    39b6:	61 05       	cpc	r22, r1
    39b8:	08 94       	sec
    39ba:	08 95       	ret

000039bc <__fp_zero>:
    39bc:	e8 94       	clt

000039be <__fp_szero>:
    39be:	bb 27       	eor	r27, r27
    39c0:	66 27       	eor	r22, r22
    39c2:	77 27       	eor	r23, r23
    39c4:	cb 01       	movw	r24, r22
    39c6:	97 f9       	bld	r25, 7
    39c8:	08 95       	ret

000039ca <__gesf2>:
    39ca:	65 df       	rcall	.-310    	; 0x3896 <__fp_cmp>
    39cc:	08 f4       	brcc	.+2      	; 0x39d0 <__gesf2+0x6>
    39ce:	8f ef       	ldi	r24, 0xFF	; 255
    39d0:	08 95       	ret

000039d2 <__mulsf3>:
    39d2:	0b d0       	rcall	.+22     	; 0x39ea <__mulsf3x>
    39d4:	c0 cf       	rjmp	.-128    	; 0x3956 <__fp_round>
    39d6:	b1 df       	rcall	.-158    	; 0x393a <__fp_pscA>
    39d8:	28 f0       	brcs	.+10     	; 0x39e4 <__mulsf3+0x12>
    39da:	b6 df       	rcall	.-148    	; 0x3948 <__fp_pscB>
    39dc:	18 f0       	brcs	.+6      	; 0x39e4 <__mulsf3+0x12>
    39de:	95 23       	and	r25, r21
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <__mulsf3+0x12>
    39e2:	7d cf       	rjmp	.-262    	; 0x38de <__fp_inf>
    39e4:	82 cf       	rjmp	.-252    	; 0x38ea <__fp_nan>
    39e6:	11 24       	eor	r1, r1
    39e8:	ea cf       	rjmp	.-44     	; 0x39be <__fp_szero>

000039ea <__mulsf3x>:
    39ea:	c6 df       	rcall	.-116    	; 0x3978 <__fp_split3>
    39ec:	a0 f3       	brcs	.-24     	; 0x39d6 <__mulsf3+0x4>

000039ee <__mulsf3_pse>:
    39ee:	95 9f       	mul	r25, r21
    39f0:	d1 f3       	breq	.-12     	; 0x39e6 <__mulsf3+0x14>
    39f2:	95 0f       	add	r25, r21
    39f4:	50 e0       	ldi	r21, 0x00	; 0
    39f6:	55 1f       	adc	r21, r21
    39f8:	62 9f       	mul	r22, r18
    39fa:	f0 01       	movw	r30, r0
    39fc:	72 9f       	mul	r23, r18
    39fe:	bb 27       	eor	r27, r27
    3a00:	f0 0d       	add	r31, r0
    3a02:	b1 1d       	adc	r27, r1
    3a04:	63 9f       	mul	r22, r19
    3a06:	aa 27       	eor	r26, r26
    3a08:	f0 0d       	add	r31, r0
    3a0a:	b1 1d       	adc	r27, r1
    3a0c:	aa 1f       	adc	r26, r26
    3a0e:	64 9f       	mul	r22, r20
    3a10:	66 27       	eor	r22, r22
    3a12:	b0 0d       	add	r27, r0
    3a14:	a1 1d       	adc	r26, r1
    3a16:	66 1f       	adc	r22, r22
    3a18:	82 9f       	mul	r24, r18
    3a1a:	22 27       	eor	r18, r18
    3a1c:	b0 0d       	add	r27, r0
    3a1e:	a1 1d       	adc	r26, r1
    3a20:	62 1f       	adc	r22, r18
    3a22:	73 9f       	mul	r23, r19
    3a24:	b0 0d       	add	r27, r0
    3a26:	a1 1d       	adc	r26, r1
    3a28:	62 1f       	adc	r22, r18
    3a2a:	83 9f       	mul	r24, r19
    3a2c:	a0 0d       	add	r26, r0
    3a2e:	61 1d       	adc	r22, r1
    3a30:	22 1f       	adc	r18, r18
    3a32:	74 9f       	mul	r23, r20
    3a34:	33 27       	eor	r19, r19
    3a36:	a0 0d       	add	r26, r0
    3a38:	61 1d       	adc	r22, r1
    3a3a:	23 1f       	adc	r18, r19
    3a3c:	84 9f       	mul	r24, r20
    3a3e:	60 0d       	add	r22, r0
    3a40:	21 1d       	adc	r18, r1
    3a42:	82 2f       	mov	r24, r18
    3a44:	76 2f       	mov	r23, r22
    3a46:	6a 2f       	mov	r22, r26
    3a48:	11 24       	eor	r1, r1
    3a4a:	9f 57       	subi	r25, 0x7F	; 127
    3a4c:	50 40       	sbci	r21, 0x00	; 0
    3a4e:	8a f0       	brmi	.+34     	; 0x3a72 <__mulsf3_pse+0x84>
    3a50:	e1 f0       	breq	.+56     	; 0x3a8a <__mulsf3_pse+0x9c>
    3a52:	88 23       	and	r24, r24
    3a54:	4a f0       	brmi	.+18     	; 0x3a68 <__mulsf3_pse+0x7a>
    3a56:	ee 0f       	add	r30, r30
    3a58:	ff 1f       	adc	r31, r31
    3a5a:	bb 1f       	adc	r27, r27
    3a5c:	66 1f       	adc	r22, r22
    3a5e:	77 1f       	adc	r23, r23
    3a60:	88 1f       	adc	r24, r24
    3a62:	91 50       	subi	r25, 0x01	; 1
    3a64:	50 40       	sbci	r21, 0x00	; 0
    3a66:	a9 f7       	brne	.-22     	; 0x3a52 <__mulsf3_pse+0x64>
    3a68:	9e 3f       	cpi	r25, 0xFE	; 254
    3a6a:	51 05       	cpc	r21, r1
    3a6c:	70 f0       	brcs	.+28     	; 0x3a8a <__mulsf3_pse+0x9c>
    3a6e:	37 cf       	rjmp	.-402    	; 0x38de <__fp_inf>
    3a70:	a6 cf       	rjmp	.-180    	; 0x39be <__fp_szero>
    3a72:	5f 3f       	cpi	r21, 0xFF	; 255
    3a74:	ec f3       	brlt	.-6      	; 0x3a70 <__mulsf3_pse+0x82>
    3a76:	98 3e       	cpi	r25, 0xE8	; 232
    3a78:	dc f3       	brlt	.-10     	; 0x3a70 <__mulsf3_pse+0x82>
    3a7a:	86 95       	lsr	r24
    3a7c:	77 95       	ror	r23
    3a7e:	67 95       	ror	r22
    3a80:	b7 95       	ror	r27
    3a82:	f7 95       	ror	r31
    3a84:	e7 95       	ror	r30
    3a86:	9f 5f       	subi	r25, 0xFF	; 255
    3a88:	c1 f7       	brne	.-16     	; 0x3a7a <__mulsf3_pse+0x8c>
    3a8a:	fe 2b       	or	r31, r30
    3a8c:	88 0f       	add	r24, r24
    3a8e:	91 1d       	adc	r25, r1
    3a90:	96 95       	lsr	r25
    3a92:	87 95       	ror	r24
    3a94:	97 f9       	bld	r25, 7
    3a96:	08 95       	ret
    3a98:	11 f4       	brne	.+4      	; 0x3a9e <__mulsf3_pse+0xb0>
    3a9a:	0e f4       	brtc	.+2      	; 0x3a9e <__mulsf3_pse+0xb0>
    3a9c:	26 cf       	rjmp	.-436    	; 0x38ea <__fp_nan>
    3a9e:	3e c0       	rjmp	.+124    	; 0x3b1c <__fp_mpack>

00003aa0 <sqrt>:
    3aa0:	73 df       	rcall	.-282    	; 0x3988 <__fp_splitA>
    3aa2:	d0 f3       	brcs	.-12     	; 0x3a98 <__mulsf3_pse+0xaa>
    3aa4:	99 23       	and	r25, r25
    3aa6:	d9 f3       	breq	.-10     	; 0x3a9e <__mulsf3_pse+0xb0>
    3aa8:	ce f3       	brts	.-14     	; 0x3a9c <__mulsf3_pse+0xae>
    3aaa:	9f 57       	subi	r25, 0x7F	; 127
    3aac:	55 0b       	sbc	r21, r21
    3aae:	87 ff       	sbrs	r24, 7
    3ab0:	43 d0       	rcall	.+134    	; 0x3b38 <__fp_norm2>
    3ab2:	00 24       	eor	r0, r0
    3ab4:	a0 e6       	ldi	r26, 0x60	; 96
    3ab6:	40 ea       	ldi	r20, 0xA0	; 160
    3ab8:	90 01       	movw	r18, r0
    3aba:	80 58       	subi	r24, 0x80	; 128
    3abc:	56 95       	lsr	r21
    3abe:	97 95       	ror	r25
    3ac0:	28 f4       	brcc	.+10     	; 0x3acc <sqrt+0x2c>
    3ac2:	80 5c       	subi	r24, 0xC0	; 192
    3ac4:	66 0f       	add	r22, r22
    3ac6:	77 1f       	adc	r23, r23
    3ac8:	88 1f       	adc	r24, r24
    3aca:	20 f0       	brcs	.+8      	; 0x3ad4 <sqrt+0x34>
    3acc:	26 17       	cp	r18, r22
    3ace:	37 07       	cpc	r19, r23
    3ad0:	48 07       	cpc	r20, r24
    3ad2:	30 f4       	brcc	.+12     	; 0x3ae0 <sqrt+0x40>
    3ad4:	62 1b       	sub	r22, r18
    3ad6:	73 0b       	sbc	r23, r19
    3ad8:	84 0b       	sbc	r24, r20
    3ada:	20 29       	or	r18, r0
    3adc:	31 29       	or	r19, r1
    3ade:	4a 2b       	or	r20, r26
    3ae0:	a6 95       	lsr	r26
    3ae2:	17 94       	ror	r1
    3ae4:	07 94       	ror	r0
    3ae6:	20 25       	eor	r18, r0
    3ae8:	31 25       	eor	r19, r1
    3aea:	4a 27       	eor	r20, r26
    3aec:	58 f7       	brcc	.-42     	; 0x3ac4 <sqrt+0x24>
    3aee:	66 0f       	add	r22, r22
    3af0:	77 1f       	adc	r23, r23
    3af2:	88 1f       	adc	r24, r24
    3af4:	20 f0       	brcs	.+8      	; 0x3afe <sqrt+0x5e>
    3af6:	26 17       	cp	r18, r22
    3af8:	37 07       	cpc	r19, r23
    3afa:	48 07       	cpc	r20, r24
    3afc:	30 f4       	brcc	.+12     	; 0x3b0a <sqrt+0x6a>
    3afe:	62 0b       	sbc	r22, r18
    3b00:	73 0b       	sbc	r23, r19
    3b02:	84 0b       	sbc	r24, r20
    3b04:	20 0d       	add	r18, r0
    3b06:	31 1d       	adc	r19, r1
    3b08:	41 1d       	adc	r20, r1
    3b0a:	a0 95       	com	r26
    3b0c:	81 f7       	brne	.-32     	; 0x3aee <sqrt+0x4e>
    3b0e:	b9 01       	movw	r22, r18
    3b10:	84 2f       	mov	r24, r20
    3b12:	91 58       	subi	r25, 0x81	; 129
    3b14:	88 0f       	add	r24, r24
    3b16:	96 95       	lsr	r25
    3b18:	87 95       	ror	r24
    3b1a:	08 95       	ret

00003b1c <__fp_mpack>:
    3b1c:	9f 3f       	cpi	r25, 0xFF	; 255
    3b1e:	31 f0       	breq	.+12     	; 0x3b2c <__fp_mpack_finite+0xc>

00003b20 <__fp_mpack_finite>:
    3b20:	91 50       	subi	r25, 0x01	; 1
    3b22:	20 f4       	brcc	.+8      	; 0x3b2c <__fp_mpack_finite+0xc>
    3b24:	87 95       	ror	r24
    3b26:	77 95       	ror	r23
    3b28:	67 95       	ror	r22
    3b2a:	b7 95       	ror	r27
    3b2c:	88 0f       	add	r24, r24
    3b2e:	91 1d       	adc	r25, r1
    3b30:	96 95       	lsr	r25
    3b32:	87 95       	ror	r24
    3b34:	97 f9       	bld	r25, 7
    3b36:	08 95       	ret

00003b38 <__fp_norm2>:
    3b38:	91 50       	subi	r25, 0x01	; 1
    3b3a:	50 40       	sbci	r21, 0x00	; 0
    3b3c:	66 0f       	add	r22, r22
    3b3e:	77 1f       	adc	r23, r23
    3b40:	88 1f       	adc	r24, r24
    3b42:	d2 f7       	brpl	.-12     	; 0x3b38 <__fp_norm2>
    3b44:	08 95       	ret

00003b46 <__divmodhi4>:
    3b46:	97 fb       	bst	r25, 7
    3b48:	07 2e       	mov	r0, r23
    3b4a:	16 f4       	brtc	.+4      	; 0x3b50 <__divmodhi4+0xa>
    3b4c:	00 94       	com	r0
    3b4e:	07 d0       	rcall	.+14     	; 0x3b5e <__divmodhi4_neg1>
    3b50:	77 fd       	sbrc	r23, 7
    3b52:	09 d0       	rcall	.+18     	; 0x3b66 <__divmodhi4_neg2>
    3b54:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__udivmodhi4>
    3b58:	07 fc       	sbrc	r0, 7
    3b5a:	05 d0       	rcall	.+10     	; 0x3b66 <__divmodhi4_neg2>
    3b5c:	3e f4       	brtc	.+14     	; 0x3b6c <__divmodhi4_exit>

00003b5e <__divmodhi4_neg1>:
    3b5e:	90 95       	com	r25
    3b60:	81 95       	neg	r24
    3b62:	9f 4f       	sbci	r25, 0xFF	; 255
    3b64:	08 95       	ret

00003b66 <__divmodhi4_neg2>:
    3b66:	70 95       	com	r23
    3b68:	61 95       	neg	r22
    3b6a:	7f 4f       	sbci	r23, 0xFF	; 255

00003b6c <__divmodhi4_exit>:
    3b6c:	08 95       	ret

00003b6e <__tablejump2__>:
    3b6e:	ee 0f       	add	r30, r30
    3b70:	ff 1f       	adc	r31, r31

00003b72 <__tablejump__>:
    3b72:	05 90       	lpm	r0, Z+
    3b74:	f4 91       	lpm	r31, Z
    3b76:	e0 2d       	mov	r30, r0
    3b78:	09 94       	ijmp

00003b7a <__udivmodhi4>:
    3b7a:	aa 1b       	sub	r26, r26
    3b7c:	bb 1b       	sub	r27, r27
    3b7e:	51 e1       	ldi	r21, 0x11	; 17
    3b80:	07 c0       	rjmp	.+14     	; 0x3b90 <__udivmodhi4_ep>

00003b82 <__udivmodhi4_loop>:
    3b82:	aa 1f       	adc	r26, r26
    3b84:	bb 1f       	adc	r27, r27
    3b86:	a6 17       	cp	r26, r22
    3b88:	b7 07       	cpc	r27, r23
    3b8a:	10 f0       	brcs	.+4      	; 0x3b90 <__udivmodhi4_ep>
    3b8c:	a6 1b       	sub	r26, r22
    3b8e:	b7 0b       	sbc	r27, r23

00003b90 <__udivmodhi4_ep>:
    3b90:	88 1f       	adc	r24, r24
    3b92:	99 1f       	adc	r25, r25
    3b94:	5a 95       	dec	r21
    3b96:	a9 f7       	brne	.-22     	; 0x3b82 <__udivmodhi4_loop>
    3b98:	80 95       	com	r24
    3b9a:	90 95       	com	r25
    3b9c:	bc 01       	movw	r22, r24
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	08 95       	ret

00003ba2 <__itoa_ncheck>:
    3ba2:	bb 27       	eor	r27, r27
    3ba4:	4a 30       	cpi	r20, 0x0A	; 10
    3ba6:	31 f4       	brne	.+12     	; 0x3bb4 <__itoa_ncheck+0x12>
    3ba8:	99 23       	and	r25, r25
    3baa:	22 f4       	brpl	.+8      	; 0x3bb4 <__itoa_ncheck+0x12>
    3bac:	bd e2       	ldi	r27, 0x2D	; 45
    3bae:	90 95       	com	r25
    3bb0:	81 95       	neg	r24
    3bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb4:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__utoa_common>

00003bb8 <__utoa_ncheck>:
    3bb8:	bb 27       	eor	r27, r27

00003bba <__utoa_common>:
    3bba:	fb 01       	movw	r30, r22
    3bbc:	55 27       	eor	r21, r21
    3bbe:	aa 27       	eor	r26, r26
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	aa 1f       	adc	r26, r26
    3bc6:	a4 17       	cp	r26, r20
    3bc8:	10 f0       	brcs	.+4      	; 0x3bce <__utoa_common+0x14>
    3bca:	a4 1b       	sub	r26, r20
    3bcc:	83 95       	inc	r24
    3bce:	50 51       	subi	r21, 0x10	; 16
    3bd0:	b9 f7       	brne	.-18     	; 0x3bc0 <__utoa_common+0x6>
    3bd2:	a0 5d       	subi	r26, 0xD0	; 208
    3bd4:	aa 33       	cpi	r26, 0x3A	; 58
    3bd6:	08 f0       	brcs	.+2      	; 0x3bda <__utoa_common+0x20>
    3bd8:	a9 5d       	subi	r26, 0xD9	; 217
    3bda:	a1 93       	st	Z+, r26
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	79 f7       	brne	.-34     	; 0x3bbe <__utoa_common+0x4>
    3be0:	b1 11       	cpse	r27, r1
    3be2:	b1 93       	st	Z+, r27
    3be4:	11 92       	st	Z+, r1
    3be6:	cb 01       	movw	r24, r22
    3be8:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <strrev>

00003bec <strrev>:
    3bec:	dc 01       	movw	r26, r24
    3bee:	fc 01       	movw	r30, r24
    3bf0:	67 2f       	mov	r22, r23
    3bf2:	71 91       	ld	r23, Z+
    3bf4:	77 23       	and	r23, r23
    3bf6:	e1 f7       	brne	.-8      	; 0x3bf0 <strrev+0x4>
    3bf8:	32 97       	sbiw	r30, 0x02	; 2
    3bfa:	04 c0       	rjmp	.+8      	; 0x3c04 <strrev+0x18>
    3bfc:	7c 91       	ld	r23, X
    3bfe:	6d 93       	st	X+, r22
    3c00:	70 83       	st	Z, r23
    3c02:	62 91       	ld	r22, -Z
    3c04:	ae 17       	cp	r26, r30
    3c06:	bf 07       	cpc	r27, r31
    3c08:	c8 f3       	brcs	.-14     	; 0x3bfc <strrev+0x10>
    3c0a:	08 95       	ret

00003c0c <_exit>:
    3c0c:	f8 94       	cli

00003c0e <__stop_program>:
    3c0e:	ff cf       	rjmp	.-2      	; 0x3c0e <__stop_program>

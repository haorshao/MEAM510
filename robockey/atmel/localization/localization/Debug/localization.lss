
localization.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000023d0  00002464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800124  00800124  00002488  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026df  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cb  00000000  00000000  00004d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d07  00000000  00000000  00005522  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000614  00000000  00000000  0000622c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000780  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002ead  00000000  00000000  00006fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00009e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__ctors_end>
       4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
       8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
       c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      10:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      14:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      18:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      1c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      20:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      24:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      28:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__vector_10>
      2c:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_11>
      30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      38:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      3c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      44:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      4c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      50:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      58:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      5c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      60:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      64:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      68:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      6c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      70:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      74:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      78:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      7c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      80:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      84:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      88:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      8c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      90:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      94:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      98:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      9c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      a0:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      a4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      a8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	0a 00       	.word	0x000a	; ????

000000ae <__c.2160>:
      ae:	73 69 67 6e 3a 20 00                                sign: .

000000b5 <__c.2157>:
      b5:	0a 00                                               ..

000000b7 <__c.2155>:
      b7:	09 00                                               ..

000000b9 <__c.2153>:
      b9:	63 6f 73 2c 20 73 69 6e 3a 00                       cos, sin:.

000000c3 <__c.2149>:
      c3:	0a 00                                               ..

000000c5 <__c.2147>:
      c5:	09 00                                               ..

000000c7 <__c.2145>:
      c7:	72 65 66 5f 76 63 30 2c 20 72 65 66 5f 76 63 31     ref_vc0, ref_vc1
      d7:	20 28 6e 6f 72 6d 61 6c 69 7a 65 29 3a 20 00         (normalize): .

000000e6 <__c.2142>:
      e6:	0a 00                                               ..

000000e8 <__c.2140>:
      e8:	09 00                                               ..

000000ea <__c.2138>:
      ea:	72 65 66 5f 76 63 30 2c 20 72 65 66 5f 76 63 31     ref_vc0, ref_vc1
      fa:	20 28 75 6e 6e 6f 72 6d 61 6c 69 7a 65 29 3a 20      (unnormalize): 
	...

0000010b <__c.2135>:
     10b:	0a 00                                               ..

0000010d <__c.2133>:
     10d:	09 00                                               ..

0000010f <__c.2131>:
     10f:	72 65 66 5f 70 63 30 2c 20 72 65 66 5f 70 63 31     ref_pc0, ref_pc1
     11f:	3a 20 00                                            : .

00000122 <__c.2128>:
     122:	0a 00                                               ..

00000124 <__c.2126>:
     124:	09 00                                               ..

00000126 <__c.2124>:
     126:	63 6f 69 6e 5f 69 6e 64 2c 20 6f 74 68 65 72 5f     coin_ind, other_
     136:	69 6e 64 3a 00                                      ind:.

0000013b <__c.2120>:
     13b:	63 61 6e 6e 6f 74 20 63 61 6c 63 75 6c 61 74 65     cannot calculate
     14b:	0a 00                                               ..

0000014d <__c.2117>:
     14d:	6d 69 73 73 20 31 0a 00                             miss 1..

00000155 <__c.2114>:
     155:	6d 69 73 73 20 34 0a 00                             miss 4..

0000015d <__c.2110>:
     15d:	6e 6f 74 20 6d 69 73 73 0a 00                       not miss..

00000167 <__c.2107>:
     167:	0a 00                                               ..

00000169 <__c.2105>:
     169:	63 61 73 65 20 3a 00                                case :.

00000170 <__c.2097>:
     170:	0a 00                                               ..

00000172 <__c.2095>:
     172:	61 63 74 75 61 6c 20 6d 61 78 3a 00                 actual max:.

0000017e <__c.2092>:
     17e:	0a 00                                               ..

00000180 <__c.2090>:
     180:	64 6d 69 6e 3a 20 00                                dmin: .

00000187 <__c.2083>:
     187:	0a 00                                               ..

00000189 <__c.2081>:
     189:	64 6d 61 78 3a 20 00                                dmax: .

00000190 <__c.2022>:
     190:	0a 00                                               ..

00000192 <__c.2020>:
     192:	09 76 79 3a 20 30 2e 00                             .vy: 0..

0000019a <__c.2018>:
     19a:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

000001ab <__c.2016>:
     1ab:	0a 00                                               ..

000001ad <__c.2014>:
     1ad:	09 09 79 3a 00                                      ..y:.

000001b2 <__c.2012>:
     1b2:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

000001be <__c.2010>:
     1be:	0a 00                                               ..

000001c0 <__c.2008>:
     1c0:	2c 00                                               ,.

000001c2 <__c.2006>:
     1c2:	09 70 34 3a 00                                      .p4:.

000001c7 <__c.2004>:
     1c7:	2c 00                                               ,.

000001c9 <__c.2002>:
     1c9:	09 70 33 3a 00                                      .p3:.

000001ce <__c.2000>:
     1ce:	2c 00                                               ,.

000001d0 <__c.1998>:
     1d0:	09 70 32 3a 00                                      .p2:.

000001d5 <__c.1996>:
     1d5:	2c 00                                               ,.

000001d7 <__c.1994>:
     1d7:	70 31 3a 00                                         p1:.

000001db <descriptor_list>:
     1db:	00 01 00 00 72 02 12 00 02 00 00 2f 02 43 00 03     ....r....../.C..
     1eb:	00 00 2b 02 04 01 03 09 04 17 02 12 02 03 09 04     ..+.............
     1fb:	0f 02 06 03 03 09 04 05 02 08                       ..........

00000205 <string3>:
     205:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000020f <string2>:
     20f:	06 03 4d 00 32 00 00 00                             ..M.2...

00000217 <string1>:
     217:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     227:	65 00 00 00                                         e...

0000022b <string0>:
     22b:	04 03 09 04                                         ....

0000022f <config1_descriptor>:
     22f:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     23f:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     24f:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     25f:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     26f:	40 00 00                                            @..

00000272 <device_descriptor>:
     272:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     282:	03 01                                               ..

00000284 <endpoint_config_table>:
     284:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000028e <__ctors_end>:
     28e:	11 24       	eor	r1, r1
     290:	1f be       	out	0x3f, r1	; 63
     292:	cf ef       	ldi	r28, 0xFF	; 255
     294:	da e0       	ldi	r29, 0x0A	; 10
     296:	de bf       	out	0x3e, r29	; 62
     298:	cd bf       	out	0x3d, r28	; 61

0000029a <__do_copy_data>:
     29a:	11 e0       	ldi	r17, 0x01	; 1
     29c:	a0 e0       	ldi	r26, 0x00	; 0
     29e:	b1 e0       	ldi	r27, 0x01	; 1
     2a0:	e0 ed       	ldi	r30, 0xD0	; 208
     2a2:	f3 e2       	ldi	r31, 0x23	; 35
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x10>
     2a6:	05 90       	lpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	a4 32       	cpi	r26, 0x24	; 36
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0xc>

000002b0 <__do_clear_bss>:
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	a4 e2       	ldi	r26, 0x24	; 36
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <.do_clear_bss_start>

000002b8 <.do_clear_bss_loop>:
     2b8:	1d 92       	st	X+, r1

000002ba <.do_clear_bss_start>:
     2ba:	a0 36       	cpi	r26, 0x60	; 96
     2bc:	b2 07       	cpc	r27, r18
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <.do_clear_bss_loop>
     2c0:	0e 94 c0 09 	call	0x1380	; 0x1380 <main>
     2c4:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <_exit>

000002c8 <__bad_interrupt>:
     2c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002cc <find_sign>:
	pix2act = 29.0/(sum/100);
	m_usb_tx_string("Done, dmax mean:");
	m_usb_tx_int(sum/100);
	m_usb_tx_string("\n");
	m_green(OFF);
}
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
	}
	m_green(OFF);
}


int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	60 97       	sbiw	r28, 0x10	; 16
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	2b 01       	movw	r4, r22
     2fe:	3c 01       	movw	r6, r24
     300:	2d 83       	std	Y+5, r18	; 0x05
     302:	3e 83       	std	Y+6, r19	; 0x06
     304:	4f 83       	std	Y+7, r20	; 0x07
     306:	58 87       	std	Y+8, r21	; 0x08
     308:	58 01       	movw	r10, r16
     30a:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     30c:	d5 01       	movw	r26, r10
     30e:	cd 90       	ld	r12, X+
     310:	dd 90       	ld	r13, X+
     312:	ed 90       	ld	r14, X+
     314:	fc 90       	ld	r15, X
     316:	9b 01       	movw	r18, r22
     318:	ac 01       	movw	r20, r24
     31a:	c7 01       	movw	r24, r14
     31c:	b6 01       	movw	r22, r12
     31e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     322:	f8 01       	movw	r30, r16
     324:	20 81       	ld	r18, Z
     326:	31 81       	ldd	r19, Z+1	; 0x01
     328:	42 81       	ldd	r20, Z+2	; 0x02
     32a:	53 81       	ldd	r21, Z+3	; 0x03
     32c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     330:	69 87       	std	Y+9, r22	; 0x09
     332:	7a 87       	std	Y+10, r23	; 0x0a
     334:	8b 87       	std	Y+11, r24	; 0x0b
     336:	9c 87       	std	Y+12, r25	; 0x0c
     338:	d5 01       	movw	r26, r10
     33a:	14 96       	adiw	r26, 0x04	; 4
     33c:	8d 91       	ld	r24, X+
     33e:	9d 91       	ld	r25, X+
     340:	0d 90       	ld	r0, X+
     342:	bc 91       	ld	r27, X
     344:	a0 2d       	mov	r26, r0
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	ab 83       	std	Y+3, r26	; 0x03
     34c:	bc 83       	std	Y+4, r27	; 0x04
     34e:	2d 81       	ldd	r18, Y+5	; 0x05
     350:	3e 81       	ldd	r19, Y+6	; 0x06
     352:	4f 81       	ldd	r20, Y+7	; 0x07
     354:	58 85       	ldd	r21, Y+8	; 0x08
     356:	bc 01       	movw	r22, r24
     358:	cd 01       	movw	r24, r26
     35a:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     35e:	6d 87       	std	Y+13, r22	; 0x0d
     360:	7e 87       	std	Y+14, r23	; 0x0e
     362:	8f 87       	std	Y+15, r24	; 0x0f
     364:	98 8b       	std	Y+16, r25	; 0x10
     366:	9b 01       	movw	r18, r22
     368:	ac 01       	movw	r20, r24
     36a:	69 85       	ldd	r22, Y+9	; 0x09
     36c:	7a 85       	ldd	r23, Y+10	; 0x0a
     36e:	8b 85       	ldd	r24, Y+11	; 0x0b
     370:	9c 85       	ldd	r25, Y+12	; 0x0c
     372:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     376:	4b 01       	movw	r8, r22
     378:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     37a:	29 81       	ldd	r18, Y+1	; 0x01
     37c:	3a 81       	ldd	r19, Y+2	; 0x02
     37e:	4b 81       	ldd	r20, Y+3	; 0x03
     380:	5c 81       	ldd	r21, Y+4	; 0x04
     382:	c3 01       	movw	r24, r6
     384:	b2 01       	movw	r22, r4
     386:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     38a:	f8 01       	movw	r30, r16
     38c:	24 81       	ldd	r18, Z+4	; 0x04
     38e:	35 81       	ldd	r19, Z+5	; 0x05
     390:	46 81       	ldd	r20, Z+6	; 0x06
     392:	57 81       	ldd	r21, Z+7	; 0x07
     394:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     398:	2b 01       	movw	r4, r22
     39a:	3c 01       	movw	r6, r24
     39c:	2d 81       	ldd	r18, Y+5	; 0x05
     39e:	3e 81       	ldd	r19, Y+6	; 0x06
     3a0:	4f 81       	ldd	r20, Y+7	; 0x07
     3a2:	58 85       	ldd	r21, Y+8	; 0x08
     3a4:	c7 01       	movw	r24, r14
     3a6:	b6 01       	movw	r22, r12
     3a8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     3ac:	69 83       	std	Y+1, r22	; 0x01
     3ae:	7a 83       	std	Y+2, r23	; 0x02
     3b0:	8b 83       	std	Y+3, r24	; 0x03
     3b2:	9c 83       	std	Y+4, r25	; 0x04
     3b4:	9b 01       	movw	r18, r22
     3b6:	ac 01       	movw	r20, r24
     3b8:	c3 01       	movw	r24, r6
     3ba:	b2 01       	movw	r22, r4
     3bc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     3c0:	6b 01       	movw	r12, r22
     3c2:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     3c4:	2d 85       	ldd	r18, Y+13	; 0x0d
     3c6:	3e 85       	ldd	r19, Y+14	; 0x0e
     3c8:	4f 85       	ldd	r20, Y+15	; 0x0f
     3ca:	58 89       	ldd	r21, Y+16	; 0x10
     3cc:	69 85       	ldd	r22, Y+9	; 0x09
     3ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     3d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     3d4:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     3d8:	6d 83       	std	Y+5, r22	; 0x05
     3da:	7e 83       	std	Y+6, r23	; 0x06
     3dc:	8f 83       	std	Y+7, r24	; 0x07
     3de:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     3e0:	29 81       	ldd	r18, Y+1	; 0x01
     3e2:	3a 81       	ldd	r19, Y+2	; 0x02
     3e4:	4b 81       	ldd	r20, Y+3	; 0x03
     3e6:	5c 81       	ldd	r21, Y+4	; 0x04
     3e8:	c3 01       	movw	r24, r6
     3ea:	b2 01       	movw	r22, r4
     3ec:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     3f0:	2b 01       	movw	r4, r22
     3f2:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     3f4:	a5 01       	movw	r20, r10
     3f6:	94 01       	movw	r18, r8
     3f8:	c5 01       	movw	r24, r10
     3fa:	b4 01       	movw	r22, r8
     3fc:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     400:	4b 01       	movw	r8, r22
     402:	5c 01       	movw	r10, r24
     404:	a7 01       	movw	r20, r14
     406:	96 01       	movw	r18, r12
     408:	c7 01       	movw	r24, r14
     40a:	b6 01       	movw	r22, r12
     40c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     410:	9b 01       	movw	r18, r22
     412:	ac 01       	movw	r20, r24
     414:	c5 01       	movw	r24, r10
     416:	b4 01       	movw	r22, r8
     418:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     41c:	6b 01       	movw	r12, r22
     41e:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     420:	2d 81       	ldd	r18, Y+5	; 0x05
     422:	3e 81       	ldd	r19, Y+6	; 0x06
     424:	4f 81       	ldd	r20, Y+7	; 0x07
     426:	58 85       	ldd	r21, Y+8	; 0x08
     428:	ca 01       	movw	r24, r20
     42a:	b9 01       	movw	r22, r18
     42c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     430:	4b 01       	movw	r8, r22
     432:	5c 01       	movw	r10, r24
     434:	a3 01       	movw	r20, r6
     436:	92 01       	movw	r18, r4
     438:	c3 01       	movw	r24, r6
     43a:	b2 01       	movw	r22, r4
     43c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	c5 01       	movw	r24, r10
     446:	b4 01       	movw	r22, r8
     448:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     44c:	9b 01       	movw	r18, r22
     44e:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__cmpsf2>
     45c:	88 23       	and	r24, r24
     45e:	14 f0       	brlt	.+4      	; 0x464 <find_sign+0x198>
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
     464:	c8 01       	movw	r24, r16
     466:	60 96       	adiw	r28, 0x10	; 16
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	bf 90       	pop	r11
     484:	af 90       	pop	r10
     486:	9f 90       	pop	r9
     488:	8f 90       	pop	r8
     48a:	7f 90       	pop	r7
     48c:	6f 90       	pop	r6
     48e:	5f 90       	pop	r5
     490:	4f 90       	pop	r4
     492:	08 95       	ret

00000494 <localization>:
	m_usb_tx_int(sum/100);
	m_usb_tx_string("\n");
	m_green(OFF);
}

void localization(void){
     494:	2f 92       	push	r2
     496:	3f 92       	push	r3
     498:	4f 92       	push	r4
     49a:	5f 92       	push	r5
     49c:	6f 92       	push	r6
     49e:	7f 92       	push	r7
     4a0:	8f 92       	push	r8
     4a2:	9f 92       	push	r9
     4a4:	af 92       	push	r10
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	cc 57       	subi	r28, 0x7C	; 124
     4be:	d1 09       	sbc	r29, r1
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
	m_green(ON);
     4ca:	6a 9a       	sbi	0x0d, 2	; 13
     4cc:	72 98       	cbi	0x0e, 2	; 14
	//unsigned int data[8] = {740, 272, 777, 282, 715, 311, 755, 356};
	//float x[4] = {data[0], data[2], data[4], data[6]};
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
     4ce:	60 91 44 01 	lds	r22, 0x0144
     4d2:	70 91 45 01 	lds	r23, 0x0145
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     4de:	69 83       	std	Y+1, r22	; 0x01
     4e0:	7a 83       	std	Y+2, r23	; 0x02
     4e2:	8b 83       	std	Y+3, r24	; 0x03
     4e4:	9c 83       	std	Y+4, r25	; 0x04
     4e6:	60 91 4a 01 	lds	r22, 0x014A
     4ea:	70 91 4b 01 	lds	r23, 0x014B
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     4f6:	6d 83       	std	Y+5, r22	; 0x05
     4f8:	7e 83       	std	Y+6, r23	; 0x06
     4fa:	8f 83       	std	Y+7, r24	; 0x07
     4fc:	98 87       	std	Y+8, r25	; 0x08
     4fe:	60 91 50 01 	lds	r22, 0x0150
     502:	70 91 51 01 	lds	r23, 0x0151
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     50e:	69 87       	std	Y+9, r22	; 0x09
     510:	7a 87       	std	Y+10, r23	; 0x0a
     512:	8b 87       	std	Y+11, r24	; 0x0b
     514:	9c 87       	std	Y+12, r25	; 0x0c
     516:	60 91 56 01 	lds	r22, 0x0156
     51a:	70 91 57 01 	lds	r23, 0x0157
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     526:	6d 87       	std	Y+13, r22	; 0x0d
     528:	7e 87       	std	Y+14, r23	; 0x0e
     52a:	8f 87       	std	Y+15, r24	; 0x0f
     52c:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
     52e:	60 91 46 01 	lds	r22, 0x0146
     532:	70 91 47 01 	lds	r23, 0x0147
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     53e:	69 8b       	std	Y+17, r22	; 0x11
     540:	7a 8b       	std	Y+18, r23	; 0x12
     542:	8b 8b       	std	Y+19, r24	; 0x13
     544:	9c 8b       	std	Y+20, r25	; 0x14
     546:	60 91 4c 01 	lds	r22, 0x014C
     54a:	70 91 4d 01 	lds	r23, 0x014D
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     556:	6d 8b       	std	Y+21, r22	; 0x15
     558:	7e 8b       	std	Y+22, r23	; 0x16
     55a:	8f 8b       	std	Y+23, r24	; 0x17
     55c:	98 8f       	std	Y+24, r25	; 0x18
     55e:	60 91 52 01 	lds	r22, 0x0152
     562:	70 91 53 01 	lds	r23, 0x0153
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     56e:	69 8f       	std	Y+25, r22	; 0x19
     570:	7a 8f       	std	Y+26, r23	; 0x1a
     572:	8b 8f       	std	Y+27, r24	; 0x1b
     574:	9c 8f       	std	Y+28, r25	; 0x1c
     576:	60 91 58 01 	lds	r22, 0x0158
     57a:	70 91 59 01 	lds	r23, 0x0159
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 41 10 	call	0x2082	; 0x2082 <__floatunsisf>
     586:	6d 8f       	std	Y+29, r22	; 0x1d
     588:	7e 8f       	std	Y+30, r23	; 0x1e
     58a:	8f 8f       	std	Y+31, r24	; 0x1f
     58c:	98 a3       	std	Y+32, r25	; 0x20
     58e:	9e 01       	movw	r18, r28
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	3f 4f       	sbci	r19, 0xFF	; 255
     594:	e9 96       	adiw	r28, 0x39	; 57
     596:	3f af       	std	Y+63, r19	; 0x3f
     598:	2e af       	std	Y+62, r18	; 0x3e
     59a:	e9 97       	sbiw	r28, 0x39	; 57
     59c:	ce 01       	movw	r24, r28
     59e:	41 96       	adiw	r24, 0x11	; 17
     5a0:	e3 96       	adiw	r28, 0x33	; 51
     5a2:	9f af       	std	Y+63, r25	; 0x3f
     5a4:	8e af       	std	Y+62, r24	; 0x3e
     5a6:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
     5a8:	ab 96       	adiw	r28, 0x2b	; 43
     5aa:	1f ae       	std	Y+63, r1	; 0x3f
     5ac:	1e ae       	std	Y+62, r1	; 0x3e
     5ae:	ab 97       	sbiw	r28, 0x2b	; 43
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
     5b0:	e7 96       	adiw	r28, 0x37	; 55
     5b2:	1f ae       	std	Y+63, r1	; 0x3f
     5b4:	1e ae       	std	Y+62, r1	; 0x3e
     5b6:	e7 97       	sbiw	r28, 0x37	; 55
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     5b8:	ab 96       	adiw	r28, 0x2b	; 43
     5ba:	ae ad       	ldd	r26, Y+62	; 0x3e
     5bc:	bf ad       	ldd	r27, Y+63	; 0x3f
     5be:	ab 97       	sbiw	r28, 0x2b	; 43
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	e5 96       	adiw	r28, 0x35	; 53
     5c4:	bf af       	std	Y+63, r27	; 0x3f
     5c6:	ae af       	std	Y+62, r26	; 0x3e
     5c8:	e5 97       	sbiw	r28, 0x35	; 53
     5ca:	14 97       	sbiw	r26, 0x04	; 4
     5cc:	0c f0       	brlt	.+2      	; 0x5d0 <localization+0x13c>
     5ce:	aa c6       	rjmp	.+3412   	; 0x1324 <__stack+0x825>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)	
     5d0:	e9 96       	adiw	r28, 0x39	; 57
     5d2:	ee ad       	ldd	r30, Y+62	; 0x3e
     5d4:	ff ad       	ldd	r31, Y+63	; 0x3f
     5d6:	e9 97       	sbiw	r28, 0x39	; 57
     5d8:	81 90       	ld	r8, Z+
     5da:	91 90       	ld	r9, Z+
     5dc:	a1 90       	ld	r10, Z+
     5de:	b1 90       	ld	r11, Z+
     5e0:	e7 96       	adiw	r28, 0x37	; 55
     5e2:	8e ad       	ldd	r24, Y+62	; 0x3e
     5e4:	9f ad       	ldd	r25, Y+63	; 0x3f
     5e6:	e7 97       	sbiw	r28, 0x37	; 55
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	29 e3       	ldi	r18, 0x39	; 57
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	2c 0f       	add	r18, r28
     5f2:	3d 1f       	adc	r19, r29
     5f4:	28 0f       	add	r18, r24
     5f6:	39 1f       	adc	r19, r25
     5f8:	a3 96       	adiw	r28, 0x23	; 35
     5fa:	3f af       	std	Y+63, r19	; 0x3f
     5fc:	2e af       	std	Y+62, r18	; 0x3e
     5fe:	a3 97       	sbiw	r28, 0x23	; 35
     600:	a5 e4       	ldi	r26, 0x45	; 69
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	ac 0f       	add	r26, r28
     606:	bd 1f       	adc	r27, r29
     608:	a8 0f       	add	r26, r24
     60a:	b9 1f       	adc	r27, r25
     60c:	a7 96       	adiw	r28, 0x27	; 39
     60e:	bf af       	std	Y+63, r27	; 0x3f
     610:	ae af       	std	Y+62, r26	; 0x3e
     612:	a7 97       	sbiw	r28, 0x27	; 39
     614:	e7 96       	adiw	r28, 0x37	; 55
     616:	8e ad       	ldd	r24, Y+62	; 0x3e
     618:	9f ad       	ldd	r25, Y+63	; 0x3f
     61a:	e7 97       	sbiw	r28, 0x37	; 55
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	0f 2e       	mov	r0, r31
     626:	f1 e2       	ldi	r31, 0x21	; 33
     628:	6f 2e       	mov	r6, r31
     62a:	71 2c       	mov	r7, r1
     62c:	f0 2d       	mov	r31, r0
     62e:	6c 0e       	add	r6, r28
     630:	7d 1e       	adc	r7, r29
     632:	68 0e       	add	r6, r24
     634:	79 1e       	adc	r7, r25
     636:	e3 96       	adiw	r28, 0x33	; 51
     638:	2e ad       	ldd	r18, Y+62	; 0x3e
     63a:	3f ad       	ldd	r19, Y+63	; 0x3f
     63c:	e3 97       	sbiw	r28, 0x33	; 51
     63e:	2c 5f       	subi	r18, 0xFC	; 252
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     644:	e5 96       	adiw	r28, 0x35	; 53
     646:	0e ad       	ldd	r16, Y+62	; 0x3e
     648:	1f ad       	ldd	r17, Y+63	; 0x3f
     64a:	e5 97       	sbiw	r28, 0x35	; 53
     64c:	e1 96       	adiw	r28, 0x31	; 49
     64e:	8c ae       	std	Y+60, r8	; 0x3c
     650:	9d ae       	std	Y+61, r9	; 0x3d
     652:	ae ae       	std	Y+62, r10	; 0x3e
     654:	bf ae       	std	Y+63, r11	; 0x3f
     656:	e1 97       	sbiw	r28, 0x31	; 49
     658:	59 01       	movw	r10, r18
     65a:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)	
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 ec       	ldi	r19, 0xC0	; 192
     660:	4f e7       	ldi	r20, 0x7F	; 127
     662:	54 e4       	ldi	r21, 0x44	; 68
     664:	e1 96       	adiw	r28, 0x31	; 49
     666:	6c ad       	ldd	r22, Y+60	; 0x3c
     668:	7d ad       	ldd	r23, Y+61	; 0x3d
     66a:	8e ad       	ldd	r24, Y+62	; 0x3e
     66c:	9f ad       	ldd	r25, Y+63	; 0x3f
     66e:	e1 97       	sbiw	r28, 0x31	; 49
     670:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__cmpsf2>
     674:	88 23       	and	r24, r24
     676:	09 f4       	brne	.+2      	; 0x67a <localization+0x1e6>
     678:	6c c0       	rjmp	.+216    	; 0x752 <localization+0x2be>
     67a:	e3 96       	adiw	r28, 0x33	; 51
     67c:	ae ad       	ldd	r26, Y+62	; 0x3e
     67e:	bf ad       	ldd	r27, Y+63	; 0x3f
     680:	e3 97       	sbiw	r28, 0x33	; 51
     682:	cd 90       	ld	r12, X+
     684:	dd 90       	ld	r13, X+
     686:	ed 90       	ld	r14, X+
     688:	fc 90       	ld	r15, X
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 ec       	ldi	r19, 0xC0	; 192
     68e:	4f e7       	ldi	r20, 0x7F	; 127
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	c7 01       	movw	r24, r14
     694:	b6 01       	movw	r22, r12
     696:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	09 f4       	brne	.+2      	; 0x6a0 <localization+0x20c>
     69e:	59 c0       	rjmp	.+178    	; 0x752 <localization+0x2be>
     6a0:	f1 01       	movw	r30, r2
     6a2:	40 80       	ld	r4, Z
     6a4:	51 80       	ldd	r5, Z+1	; 0x01
     6a6:	62 80       	ldd	r6, Z+2	; 0x02
     6a8:	73 80       	ldd	r7, Z+3	; 0x03
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 ec       	ldi	r19, 0xC0	; 192
     6ae:	4f e7       	ldi	r20, 0x7F	; 127
     6b0:	54 e4       	ldi	r21, 0x44	; 68
     6b2:	c3 01       	movw	r24, r6
     6b4:	b2 01       	movw	r22, r4
     6b6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__cmpsf2>
     6ba:	88 23       	and	r24, r24
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <localization+0x22c>
     6be:	49 c0       	rjmp	.+146    	; 0x752 <localization+0x2be>
     6c0:	d5 01       	movw	r26, r10
     6c2:	8d 91       	ld	r24, X+
     6c4:	9d 91       	ld	r25, X+
     6c6:	0d 90       	ld	r0, X+
     6c8:	bc 91       	ld	r27, X
     6ca:	a0 2d       	mov	r26, r0
     6cc:	ed 96       	adiw	r28, 0x3d	; 61
     6ce:	8c af       	std	Y+60, r24	; 0x3c
     6d0:	9d af       	std	Y+61, r25	; 0x3d
     6d2:	ae af       	std	Y+62, r26	; 0x3e
     6d4:	bf af       	std	Y+63, r27	; 0x3f
     6d6:	ed 97       	sbiw	r28, 0x3d	; 61
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 ec       	ldi	r19, 0xC0	; 192
     6dc:	4f e7       	ldi	r20, 0x7F	; 127
     6de:	54 e4       	ldi	r21, 0x44	; 68
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__cmpsf2>
     6e8:	88 23       	and	r24, r24
     6ea:	99 f1       	breq	.+102    	; 0x752 <localization+0x2be>
				d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
     6ec:	a3 01       	movw	r20, r6
     6ee:	92 01       	movw	r18, r4
     6f0:	e1 96       	adiw	r28, 0x31	; 49
     6f2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6f4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6f6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6f8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6fa:	e1 97       	sbiw	r28, 0x31	; 49
     6fc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     700:	2b 01       	movw	r4, r22
     702:	3c 01       	movw	r6, r24
     704:	ed 96       	adiw	r28, 0x3d	; 61
     706:	2c ad       	ldd	r18, Y+60	; 0x3c
     708:	3d ad       	ldd	r19, Y+61	; 0x3d
     70a:	4e ad       	ldd	r20, Y+62	; 0x3e
     70c:	5f ad       	ldd	r21, Y+63	; 0x3f
     70e:	ed 97       	sbiw	r28, 0x3d	; 61
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     718:	6b 01       	movw	r12, r22
     71a:	7c 01       	movw	r14, r24
     71c:	a3 01       	movw	r20, r6
     71e:	92 01       	movw	r18, r4
     720:	c3 01       	movw	r24, r6
     722:	b2 01       	movw	r22, r4
     724:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     728:	2b 01       	movw	r4, r22
     72a:	3c 01       	movw	r6, r24
     72c:	a7 01       	movw	r20, r14
     72e:	96 01       	movw	r18, r12
     730:	c7 01       	movw	r24, r14
     732:	b6 01       	movw	r22, r12
     734:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	c3 01       	movw	r24, r6
     73e:	b2 01       	movw	r22, r4
     740:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     744:	0e 94 5e 11 	call	0x22bc	; 0x22bc <sqrt>
     748:	f4 01       	movw	r30, r8
     74a:	60 83       	st	Z, r22
     74c:	71 83       	std	Z+1, r23	; 0x01
     74e:	82 83       	std	Z+2, r24	; 0x02
     750:	93 83       	std	Z+3, r25	; 0x03
				from[ind] = i;
     752:	a3 96       	adiw	r28, 0x23	; 35
     754:	ae ad       	ldd	r26, Y+62	; 0x3e
     756:	bf ad       	ldd	r27, Y+63	; 0x3f
     758:	a3 97       	sbiw	r28, 0x23	; 35
     75a:	ab 96       	adiw	r28, 0x2b	; 43
     75c:	ee ad       	ldd	r30, Y+62	; 0x3e
     75e:	ff ad       	ldd	r31, Y+63	; 0x3f
     760:	ab 97       	sbiw	r28, 0x2b	; 43
     762:	ed 93       	st	X+, r30
     764:	fd 93       	st	X+, r31
     766:	a3 96       	adiw	r28, 0x23	; 35
     768:	bf af       	std	Y+63, r27	; 0x3f
     76a:	ae af       	std	Y+62, r26	; 0x3e
     76c:	a3 97       	sbiw	r28, 0x23	; 35
				to[ind] = j;
     76e:	a7 96       	adiw	r28, 0x27	; 39
     770:	ae ad       	ldd	r26, Y+62	; 0x3e
     772:	bf ad       	ldd	r27, Y+63	; 0x3f
     774:	a7 97       	sbiw	r28, 0x27	; 39
     776:	0d 93       	st	X+, r16
     778:	1d 93       	st	X+, r17
     77a:	a7 96       	adiw	r28, 0x27	; 39
     77c:	bf af       	std	Y+63, r27	; 0x3f
     77e:	ae af       	std	Y+62, r26	; 0x3e
     780:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     782:	0f 5f       	subi	r16, 0xFF	; 255
     784:	1f 4f       	sbci	r17, 0xFF	; 255
     786:	b4 e0       	ldi	r27, 0x04	; 4
     788:	2b 0e       	add	r2, r27
     78a:	31 1c       	adc	r3, r1
     78c:	e4 e0       	ldi	r30, 0x04	; 4
     78e:	ae 0e       	add	r10, r30
     790:	b1 1c       	adc	r11, r1
     792:	f4 e0       	ldi	r31, 0x04	; 4
     794:	8f 0e       	add	r8, r31
     796:	91 1c       	adc	r9, r1
     798:	04 30       	cpi	r16, 0x04	; 4
     79a:	11 05       	cpc	r17, r1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <localization+0x30c>
     79e:	5e cf       	rjmp	.-324    	; 0x65c <localization+0x1c8>
     7a0:	e7 96       	adiw	r28, 0x37	; 55
     7a2:	8e ad       	ldd	r24, Y+62	; 0x3e
     7a4:	9f ad       	ldd	r25, Y+63	; 0x3f
     7a6:	e7 97       	sbiw	r28, 0x37	; 55
     7a8:	e5 96       	adiw	r28, 0x35	; 53
     7aa:	2e ad       	ldd	r18, Y+62	; 0x3e
     7ac:	3f ad       	ldd	r19, Y+63	; 0x3f
     7ae:	e5 97       	sbiw	r28, 0x35	; 53
     7b0:	82 1b       	sub	r24, r18
     7b2:	93 0b       	sbc	r25, r19
     7b4:	dc 01       	movw	r26, r24
     7b6:	14 96       	adiw	r26, 0x04	; 4
     7b8:	e7 96       	adiw	r28, 0x37	; 55
     7ba:	bf af       	std	Y+63, r27	; 0x3f
     7bc:	ae af       	std	Y+62, r26	; 0x3e
     7be:	e7 97       	sbiw	r28, 0x37	; 55
     7c0:	e9 96       	adiw	r28, 0x39	; 57
     7c2:	ee ad       	ldd	r30, Y+62	; 0x3e
     7c4:	ff ad       	ldd	r31, Y+63	; 0x3f
     7c6:	e9 97       	sbiw	r28, 0x39	; 57
     7c8:	34 96       	adiw	r30, 0x04	; 4
     7ca:	e9 96       	adiw	r28, 0x39	; 57
     7cc:	ff af       	std	Y+63, r31	; 0x3f
     7ce:	ee af       	std	Y+62, r30	; 0x3e
     7d0:	e9 97       	sbiw	r28, 0x39	; 57
     7d2:	e3 96       	adiw	r28, 0x33	; 51
     7d4:	2e ad       	ldd	r18, Y+62	; 0x3e
     7d6:	3f ad       	ldd	r19, Y+63	; 0x3f
     7d8:	e3 97       	sbiw	r28, 0x33	; 51
     7da:	2c 5f       	subi	r18, 0xFC	; 252
     7dc:	3f 4f       	sbci	r19, 0xFF	; 255
     7de:	e3 96       	adiw	r28, 0x33	; 51
     7e0:	3f af       	std	Y+63, r19	; 0x3f
     7e2:	2e af       	std	Y+62, r18	; 0x3e
     7e4:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
     7e6:	e5 96       	adiw	r28, 0x35	; 53
     7e8:	8e ad       	ldd	r24, Y+62	; 0x3e
     7ea:	9f ad       	ldd	r25, Y+63	; 0x3f
     7ec:	e5 97       	sbiw	r28, 0x35	; 53
     7ee:	03 97       	sbiw	r24, 0x03	; 3
     7f0:	49 f0       	breq	.+18     	; 0x804 <localization+0x370>
     7f2:	e5 96       	adiw	r28, 0x35	; 53
     7f4:	ae ad       	ldd	r26, Y+62	; 0x3e
     7f6:	bf ad       	ldd	r27, Y+63	; 0x3f
     7f8:	e5 97       	sbiw	r28, 0x35	; 53
     7fa:	ab 96       	adiw	r28, 0x2b	; 43
     7fc:	bf af       	std	Y+63, r27	; 0x3f
     7fe:	ae af       	std	Y+62, r26	; 0x3e
     800:	ab 97       	sbiw	r28, 0x2b	; 43
     802:	da ce       	rjmp	.-588    	; 0x5b8 <localization+0x124>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
     804:	e7 96       	adiw	r28, 0x37	; 55
     806:	ee ad       	ldd	r30, Y+62	; 0x3e
     808:	ff ad       	ldd	r31, Y+63	; 0x3f
     80a:	e7 97       	sbiw	r28, 0x37	; 55
     80c:	1e 16       	cp	r1, r30
     80e:	1f 06       	cpc	r1, r31
     810:	7c f5       	brge	.+94     	; 0x870 <localization+0x3dc>
     812:	7e 01       	movw	r14, r28
     814:	f1 e2       	ldi	r31, 0x21	; 33
     816:	ef 0e       	add	r14, r31
     818:	f1 1c       	adc	r15, r1
     81a:	81 2c       	mov	r8, r1
     81c:	91 2c       	mov	r9, r1
     81e:	c1 2c       	mov	r12, r1
     820:	d1 2c       	mov	r13, r1
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	e7 96       	adiw	r28, 0x37	; 55
     828:	ae ac       	ldd	r10, Y+62	; 0x3e
     82a:	bf ac       	ldd	r11, Y+63	; 0x3f
     82c:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] > dmax){
     82e:	d7 01       	movw	r26, r14
     830:	4d 90       	ld	r4, X+
     832:	5d 90       	ld	r5, X+
     834:	6d 90       	ld	r6, X+
     836:	7d 90       	ld	r7, X+
     838:	7d 01       	movw	r14, r26
     83a:	b6 01       	movw	r22, r12
     83c:	88 27       	eor	r24, r24
     83e:	77 fd       	sbrc	r23, 7
     840:	80 95       	com	r24
     842:	98 2f       	mov	r25, r24
     844:	0e 94 43 10 	call	0x2086	; 0x2086 <__floatsisf>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	c3 01       	movw	r24, r6
     84e:	b2 01       	movw	r22, r4
     850:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__gesf2>
     854:	18 16       	cp	r1, r24
     856:	34 f4       	brge	.+12     	; 0x864 <localization+0x3d0>
			indmax = i;
			dmax = d[i];
     858:	c3 01       	movw	r24, r6
     85a:	b2 01       	movw	r22, r4
     85c:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     860:	6b 01       	movw	r12, r22
     862:	48 01       	movw	r8, r16
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
     864:	0f 5f       	subi	r16, 0xFF	; 255
     866:	1f 4f       	sbci	r17, 0xFF	; 255
     868:	0a 15       	cp	r16, r10
     86a:	1b 05       	cpc	r17, r11
     86c:	01 f7       	brne	.-64     	; 0x82e <localization+0x39a>
     86e:	04 c0       	rjmp	.+8      	; 0x878 <localization+0x3e4>
     870:	81 2c       	mov	r8, r1
     872:	91 2c       	mov	r9, r1
     874:	c1 2c       	mov	r12, r1
     876:	d1 2c       	mov	r13, r1
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax: ");
     878:	89 e8       	ldi	r24, 0x89	; 137
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	m_usb_tx_int(dmax);
     880:	c6 01       	movw	r24, r12
     882:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
	m_usb_tx_string("\n");
     886:	87 e8       	ldi	r24, 0x87	; 135
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
     88e:	e7 96       	adiw	r28, 0x37	; 55
     890:	ee ad       	ldd	r30, Y+62	; 0x3e
     892:	ff ad       	ldd	r31, Y+63	; 0x3f
     894:	e7 97       	sbiw	r28, 0x37	; 55
     896:	1e 16       	cp	r1, r30
     898:	1f 06       	cpc	r1, r31
     89a:	dc f5       	brge	.+118    	; 0x912 <localization+0x47e>
     89c:	7e 01       	movw	r14, r28
     89e:	f1 e2       	ldi	r31, 0x21	; 33
     8a0:	ef 0e       	add	r14, r31
     8a2:	f1 1c       	adc	r15, r1
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
	int indmin = 0;
     8a4:	21 2c       	mov	r2, r1
     8a6:	31 2c       	mov	r3, r1
	}
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f0 e1       	ldi	r31, 0x10	; 16
     8ac:	af 2e       	mov	r10, r31
     8ae:	f7 e2       	ldi	r31, 0x27	; 39
     8b0:	bf 2e       	mov	r11, r31
     8b2:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
     8b4:	00 e0       	ldi	r16, 0x00	; 0
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	a3 96       	adiw	r28, 0x23	; 35
     8ba:	df ae       	std	Y+63, r13	; 0x3f
     8bc:	ce ae       	std	Y+62, r12	; 0x3e
     8be:	a3 97       	sbiw	r28, 0x23	; 35
     8c0:	e7 96       	adiw	r28, 0x37	; 55
     8c2:	ce ac       	ldd	r12, Y+62	; 0x3e
     8c4:	df ac       	ldd	r13, Y+63	; 0x3f
     8c6:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] < dmin){
     8c8:	d7 01       	movw	r26, r14
     8ca:	4d 90       	ld	r4, X+
     8cc:	5d 90       	ld	r5, X+
     8ce:	6d 90       	ld	r6, X+
     8d0:	7d 90       	ld	r7, X+
     8d2:	7d 01       	movw	r14, r26
     8d4:	b5 01       	movw	r22, r10
     8d6:	88 27       	eor	r24, r24
     8d8:	77 fd       	sbrc	r23, 7
     8da:	80 95       	com	r24
     8dc:	98 2f       	mov	r25, r24
     8de:	0e 94 43 10 	call	0x2086	; 0x2086 <__floatsisf>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
     8e6:	c3 01       	movw	r24, r6
     8e8:	b2 01       	movw	r22, r4
     8ea:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__cmpsf2>
     8ee:	88 23       	and	r24, r24
     8f0:	34 f4       	brge	.+12     	; 0x8fe <localization+0x46a>
			indmin = i;
			dmin = d[i];
     8f2:	c3 01       	movw	r24, r6
     8f4:	b2 01       	movw	r22, r4
     8f6:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     8fa:	5b 01       	movw	r10, r22
     8fc:	18 01       	movw	r2, r16
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
     8fe:	0f 5f       	subi	r16, 0xFF	; 255
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	0c 15       	cp	r16, r12
     904:	1d 05       	cpc	r17, r13
     906:	01 f7       	brne	.-64     	; 0x8c8 <localization+0x434>
     908:	a3 96       	adiw	r28, 0x23	; 35
     90a:	ce ac       	ldd	r12, Y+62	; 0x3e
     90c:	df ac       	ldd	r13, Y+63	; 0x3f
     90e:	a3 97       	sbiw	r28, 0x23	; 35
     910:	08 c0       	rjmp	.+16     	; 0x922 <localization+0x48e>
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
	int indmin = 0;
     912:	21 2c       	mov	r2, r1
     914:	31 2c       	mov	r3, r1
	}
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
     916:	0f 2e       	mov	r0, r31
     918:	f0 e1       	ldi	r31, 0x10	; 16
     91a:	af 2e       	mov	r10, r31
     91c:	f7 e2       	ldi	r31, 0x27	; 39
     91e:	bf 2e       	mov	r11, r31
     920:	f0 2d       	mov	r31, r0
		if(d[i] < dmin){
			indmin = i;
			dmin = d[i];
		}
	}
	m_usb_tx_string("dmin: ");
     922:	80 e8       	ldi	r24, 0x80	; 128
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	m_usb_tx_int(dmin);
     92a:	c5 01       	movw	r24, r10
     92c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
	m_usb_tx_string("\n");
     930:	8e e7       	ldi	r24, 0x7E	; 126
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	
	// find miss which point
	double actdmax = dmax * pix2act;
     938:	b6 01       	movw	r22, r12
     93a:	88 27       	eor	r24, r24
     93c:	77 fd       	sbrc	r23, 7
     93e:	80 95       	com	r24
     940:	98 2f       	mov	r25, r24
     942:	0e 94 43 10 	call	0x2086	; 0x2086 <__floatsisf>
     946:	20 91 14 01 	lds	r18, 0x0114
     94a:	30 91 15 01 	lds	r19, 0x0115
     94e:	40 91 16 01 	lds	r20, 0x0116
     952:	50 91 17 01 	lds	r21, 0x0117
     956:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     95a:	6b 01       	movw	r12, r22
     95c:	7c 01       	movw	r14, r24
	m_usb_tx_string("actual max:");
     95e:	82 e7       	ldi	r24, 0x72	; 114
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	m_usb_tx_int(actdmax);
     966:	c7 01       	movw	r24, r14
     968:	b6 01       	movw	r22, r12
     96a:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     96e:	cb 01       	movw	r24, r22
     970:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
	m_usb_tx_string("\n");
     974:	80 e7       	ldi	r24, 0x70	; 112
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
     97c:	40 90 18 01 	lds	r4, 0x0118
     980:	50 90 19 01 	lds	r5, 0x0119
     984:	60 90 1a 01 	lds	r6, 0x011A
     988:	70 90 1b 01 	lds	r7, 0x011B
     98c:	e8 e0       	ldi	r30, 0x08	; 8
     98e:	f1 e0       	ldi	r31, 0x01	; 1
     990:	a3 96       	adiw	r28, 0x23	; 35
     992:	ff af       	std	Y+63, r31	; 0x3f
     994:	ee af       	std	Y+62, r30	; 0x3e
     996:	a3 97       	sbiw	r28, 0x23	; 35
	double actdmax = dmax * pix2act;
	m_usb_tx_string("actual max:");
	m_usb_tx_int(actdmax);
	m_usb_tx_string("\n");
	
	int ca = 0;
     998:	00 e0       	ldi	r16, 0x00	; 0
     99a:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 1; i<4; i++){
     99c:	aa 24       	eor	r10, r10
     99e:	a3 94       	inc	r10
     9a0:	b1 2c       	mov	r11, r1
     9a2:	a7 96       	adiw	r28, 0x27	; 39
     9a4:	9f ae       	std	Y+63, r9	; 0x3f
     9a6:	8e ae       	std	Y+62, r8	; 0x3e
     9a8:	a7 97       	sbiw	r28, 0x27	; 39
     9aa:	4f 01       	movw	r8, r30
		if(abs(actdmax - actmax[i-1])<threshold){
     9ac:	d4 01       	movw	r26, r8
     9ae:	2d 91       	ld	r18, X+
     9b0:	3d 91       	ld	r19, X+
     9b2:	4d 91       	ld	r20, X+
     9b4:	5d 91       	ld	r21, X+
     9b6:	4d 01       	movw	r8, r26
     9b8:	c7 01       	movw	r24, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     9c0:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     9c4:	9b 01       	movw	r18, r22
     9c6:	77 23       	and	r23, r23
     9c8:	24 f4       	brge	.+8      	; 0x9d2 <localization+0x53e>
     9ca:	22 27       	eor	r18, r18
     9cc:	33 27       	eor	r19, r19
     9ce:	26 1b       	sub	r18, r22
     9d0:	37 0b       	sbc	r19, r23
     9d2:	b9 01       	movw	r22, r18
     9d4:	88 27       	eor	r24, r24
     9d6:	77 fd       	sbrc	r23, 7
     9d8:	80 95       	com	r24
     9da:	98 2f       	mov	r25, r24
     9dc:	0e 94 43 10 	call	0x2086	; 0x2086 <__floatsisf>
     9e0:	a3 01       	movw	r20, r6
     9e2:	92 01       	movw	r18, r4
     9e4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__cmpsf2>
     9e8:	88 23       	and	r24, r24
     9ea:	0c f4       	brge	.+2      	; 0x9ee <localization+0x55a>
     9ec:	85 01       	movw	r16, r10
	m_usb_tx_string("actual max:");
	m_usb_tx_int(actdmax);
	m_usb_tx_string("\n");
	
	int ca = 0;
	for(i = 1; i<4; i++){
     9ee:	bf ef       	ldi	r27, 0xFF	; 255
     9f0:	ab 1a       	sub	r10, r27
     9f2:	bb 0a       	sbc	r11, r27
     9f4:	e4 e0       	ldi	r30, 0x04	; 4
     9f6:	ae 16       	cp	r10, r30
     9f8:	b1 04       	cpc	r11, r1
     9fa:	c1 f6       	brne	.-80     	; 0x9ac <localization+0x518>
     9fc:	a7 96       	adiw	r28, 0x27	; 39
     9fe:	8e ac       	ldd	r8, Y+62	; 0x3e
     a00:	9f ac       	ldd	r9, Y+63	; 0x3f
     a02:	a7 97       	sbiw	r28, 0x27	; 39
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
     a04:	65 96       	adiw	r28, 0x15	; 21
     a06:	1c ae       	std	Y+60, r1	; 0x3c
     a08:	1d ae       	std	Y+61, r1	; 0x3d
     a0a:	1e ae       	std	Y+62, r1	; 0x3e
     a0c:	1f ae       	std	Y+63, r1	; 0x3f
     a0e:	65 97       	sbiw	r28, 0x15	; 21
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e8       	ldi	r26, 0x80	; 128
     a16:	bf e3       	ldi	r27, 0x3F	; 63
     a18:	69 96       	adiw	r28, 0x19	; 25
     a1a:	8c af       	std	Y+60, r24	; 0x3c
     a1c:	9d af       	std	Y+61, r25	; 0x3d
     a1e:	ae af       	std	Y+62, r26	; 0x3e
     a20:	bf af       	std	Y+63, r27	; 0x3f
     a22:	69 97       	sbiw	r28, 0x19	; 25
	
	m_usb_tx_string("case :");
     a24:	89 e6       	ldi	r24, 0x69	; 105
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	m_usb_tx_int(ca);
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
	m_usb_tx_string("\n");
     a32:	87 e6       	ldi	r24, 0x67	; 103
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	
	switch(ca){
     a3a:	02 30       	cpi	r16, 0x02	; 2
     a3c:	11 05       	cpc	r17, r1
     a3e:	49 f1       	breq	.+82     	; 0xa92 <localization+0x5fe>
     a40:	03 30       	cpi	r16, 0x03	; 3
     a42:	11 05       	cpc	r17, r1
     a44:	09 f4       	brne	.+2      	; 0xa48 <localization+0x5b4>
     a46:	58 c0       	rjmp	.+176    	; 0xaf8 <localization+0x664>
     a48:	01 30       	cpi	r16, 0x01	; 1
     a4a:	11 05       	cpc	r17, r1
     a4c:	09 f0       	breq	.+2      	; 0xa50 <localization+0x5bc>
     a4e:	91 c0       	rjmp	.+290    	; 0xb72 <__stack+0x73>
		case 1: // not miss point 1 or point 4
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
     a50:	65 96       	adiw	r28, 0x15	; 21
     a52:	1c ae       	std	Y+60, r1	; 0x3c
     a54:	1d ae       	std	Y+61, r1	; 0x3d
     a56:	1e ae       	std	Y+62, r1	; 0x3e
     a58:	1f ae       	std	Y+63, r1	; 0x3f
     a5a:	65 97       	sbiw	r28, 0x15	; 21
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	a0 e8       	ldi	r26, 0x80	; 128
     a62:	bf e3       	ldi	r27, 0x3F	; 63
     a64:	69 96       	adiw	r28, 0x19	; 25
     a66:	8c af       	std	Y+60, r24	; 0x3c
     a68:	9d af       	std	Y+61, r25	; 0x3d
     a6a:	ae af       	std	Y+62, r26	; 0x3e
     a6c:	bf af       	std	Y+63, r27	; 0x3f
     a6e:	69 97       	sbiw	r28, 0x19	; 25
			
			usb_tx_string("not miss\n");
     a70:	8d e5       	ldi	r24, 0x5D	; 93
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	m_usb_tx_string("\n");
	
	switch(ca){
		case 1: // not miss point 1 or point 4
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
     a78:	ad 96       	adiw	r28, 0x2d	; 45
     a7a:	1c ae       	std	Y+60, r1	; 0x3c
     a7c:	1d ae       	std	Y+61, r1	; 0x3d
     a7e:	1e ae       	std	Y+62, r1	; 0x3e
     a80:	1f ae       	std	Y+63, r1	; 0x3f
     a82:	ad 97       	sbiw	r28, 0x2d	; 45
     a84:	e1 96       	adiw	r28, 0x31	; 49
     a86:	1c ae       	std	Y+60, r1	; 0x3c
     a88:	1d ae       	std	Y+61, r1	; 0x3d
     a8a:	1e ae       	std	Y+62, r1	; 0x3e
     a8c:	1f ae       	std	Y+63, r1	; 0x3f
     a8e:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0; ref_vw[1] = 1;
			
			usb_tx_string("not miss\n");
			break;
     a90:	84 c0       	rjmp	.+264    	; 0xb9a <__stack+0x9b>
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
     a92:	20 91 14 01 	lds	r18, 0x0114
     a96:	30 91 15 01 	lds	r19, 0x0115
     a9a:	40 91 16 01 	lds	r20, 0x0116
     a9e:	50 91 17 01 	lds	r21, 0x0117
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	88 e6       	ldi	r24, 0x68	; 104
     aa8:	91 e4       	ldi	r25, 0x41	; 65
     aaa:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divsf3>
     aae:	ad 96       	adiw	r28, 0x2d	; 45
     ab0:	6c af       	std	Y+60, r22	; 0x3c
     ab2:	7d af       	std	Y+61, r23	; 0x3d
     ab4:	8e af       	std	Y+62, r24	; 0x3e
     ab6:	9f af       	std	Y+63, r25	; 0x3f
     ab8:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
     aba:	84 e9       	ldi	r24, 0x94	; 148
     abc:	97 e8       	ldi	r25, 0x87	; 135
     abe:	a5 ee       	ldi	r26, 0xE5	; 229
     ac0:	be e3       	ldi	r27, 0x3E	; 62
     ac2:	65 96       	adiw	r28, 0x15	; 21
     ac4:	8c af       	std	Y+60, r24	; 0x3c
     ac6:	9d af       	std	Y+61, r25	; 0x3d
     ac8:	ae af       	std	Y+62, r26	; 0x3e
     aca:	bf af       	std	Y+63, r27	; 0x3f
     acc:	65 97       	sbiw	r28, 0x15	; 21
     ace:	81 ea       	ldi	r24, 0xA1	; 161
     ad0:	96 ed       	ldi	r25, 0xD6	; 214
     ad2:	a4 e6       	ldi	r26, 0x64	; 100
     ad4:	bf eb       	ldi	r27, 0xBF	; 191
     ad6:	69 96       	adiw	r28, 0x19	; 25
     ad8:	8c af       	std	Y+60, r24	; 0x3c
     ada:	9d af       	std	Y+61, r25	; 0x3d
     adc:	ae af       	std	Y+62, r26	; 0x3e
     ade:	bf af       	std	Y+63, r27	; 0x3f
     ae0:	69 97       	sbiw	r28, 0x19	; 25
			usb_tx_string("miss 4\n");
     ae2:	85 e5       	ldi	r24, 0x55	; 85
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
			ref_vw[0] = 0; ref_vw[1] = 1;
			
			usb_tx_string("not miss\n");
			break;
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
     aea:	e1 96       	adiw	r28, 0x31	; 49
     aec:	1c ae       	std	Y+60, r1	; 0x3c
     aee:	1d ae       	std	Y+61, r1	; 0x3d
     af0:	1e ae       	std	Y+62, r1	; 0x3e
     af2:	1f ae       	std	Y+63, r1	; 0x3f
     af4:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			usb_tx_string("miss 4\n");
			break;
     af6:	51 c0       	rjmp	.+162    	; 0xb9a <__stack+0x9b>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
     af8:	c0 90 14 01 	lds	r12, 0x0114
     afc:	d0 90 15 01 	lds	r13, 0x0115
     b00:	e0 90 16 01 	lds	r14, 0x0116
     b04:	f0 90 17 01 	lds	r15, 0x0117
     b08:	a7 01       	movw	r20, r14
     b0a:	96 01       	movw	r18, r12
     b0c:	61 ee       	ldi	r22, 0xE1	; 225
     b0e:	7a e7       	ldi	r23, 0x7A	; 122
     b10:	8a e3       	ldi	r24, 0x3A	; 58
     b12:	91 e4       	ldi	r25, 0x41	; 65
     b14:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divsf3>
     b18:	e1 96       	adiw	r28, 0x31	; 49
     b1a:	6c af       	std	Y+60, r22	; 0x3c
     b1c:	7d af       	std	Y+61, r23	; 0x3d
     b1e:	8e af       	std	Y+62, r24	; 0x3e
     b20:	9f af       	std	Y+63, r25	; 0x3f
     b22:	e1 97       	sbiw	r28, 0x31	; 49
     b24:	a7 01       	movw	r20, r14
     b26:	96 01       	movw	r18, r12
     b28:	63 e2       	ldi	r22, 0x23	; 35
     b2a:	7b ed       	ldi	r23, 0xDB	; 219
     b2c:	8b e0       	ldi	r24, 0x0B	; 11
     b2e:	91 ec       	ldi	r25, 0xC1	; 193
     b30:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divsf3>
     b34:	ad 96       	adiw	r28, 0x2d	; 45
     b36:	6c af       	std	Y+60, r22	; 0x3c
     b38:	7d af       	std	Y+61, r23	; 0x3d
     b3a:	8e af       	std	Y+62, r24	; 0x3e
     b3c:	9f af       	std	Y+63, r25	; 0x3f
     b3e:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
     b40:	86 e6       	ldi	r24, 0x66	; 102
     b42:	96 e6       	ldi	r25, 0x66	; 102
     b44:	a6 e7       	ldi	r26, 0x76	; 118
     b46:	bf eb       	ldi	r27, 0xBF	; 191
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	8c af       	std	Y+60, r24	; 0x3c
     b4c:	9d af       	std	Y+61, r25	; 0x3d
     b4e:	ae af       	std	Y+62, r26	; 0x3e
     b50:	bf af       	std	Y+63, r27	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	8f e9       	ldi	r24, 0x9F	; 159
     b56:	9d ec       	ldi	r25, 0xCD	; 205
     b58:	aa e8       	ldi	r26, 0x8A	; 138
     b5a:	be e3       	ldi	r27, 0x3E	; 62
     b5c:	69 96       	adiw	r28, 0x19	; 25
     b5e:	8c af       	std	Y+60, r24	; 0x3c
     b60:	9d af       	std	Y+61, r25	; 0x3d
     b62:	ae af       	std	Y+62, r26	; 0x3e
     b64:	bf af       	std	Y+63, r27	; 0x3f
     b66:	69 97       	sbiw	r28, 0x19	; 25
			usb_tx_string("miss 1\n");
     b68:	8d e4       	ldi	r24, 0x4D	; 77
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
			break;
     b70:	14 c0       	rjmp	.+40     	; 0xb9a <__stack+0x9b>
		default:
			m_usb_tx_string("cannot calculate\n");
     b72:	8b e3       	ldi	r24, 0x3B	; 59
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
			break;
	}
	
	if (ca > 0){
     b7a:	10 16       	cp	r1, r16
     b7c:	11 06       	cpc	r1, r17
     b7e:	0c f0       	brlt	.+2      	; 0xb82 <__stack+0x83>
     b80:	8e c3       	rjmp	.+1820   	; 0x129e <__stack+0x79f>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
     b82:	e1 96       	adiw	r28, 0x31	; 49
     b84:	1c ae       	std	Y+60, r1	; 0x3c
     b86:	1d ae       	std	Y+61, r1	; 0x3d
     b88:	1e ae       	std	Y+62, r1	; 0x3e
     b8a:	1f ae       	std	Y+63, r1	; 0x3f
     b8c:	e1 97       	sbiw	r28, 0x31	; 49
     b8e:	ad 96       	adiw	r28, 0x2d	; 45
     b90:	1c ae       	std	Y+60, r1	; 0x3c
     b92:	1d ae       	std	Y+61, r1	; 0x3d
     b94:	1e ae       	std	Y+62, r1	; 0x3e
     b96:	1f ae       	std	Y+63, r1	; 0x3f
     b98:	ad 97       	sbiw	r28, 0x2d	; 45
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
     b9a:	f4 01       	movw	r30, r8
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	21 e0       	ldi	r18, 0x01	; 1
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	2c 0f       	add	r18, r28
     ba6:	3d 1f       	adc	r19, r29
     ba8:	e2 0f       	add	r30, r18
     baa:	f3 1f       	adc	r31, r19
     bac:	e0 ac       	ldd	r14, Z+56	; 0x38
     bae:	f1 ac       	ldd	r15, Z+57	; 0x39
     bb0:	f1 01       	movw	r30, r2
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	e2 0f       	add	r30, r18
     bb8:	f3 1f       	adc	r31, r19
     bba:	80 ad       	ldd	r24, Z+56	; 0x38
     bbc:	91 ad       	ldd	r25, Z+57	; 0x39
     bbe:	8e 15       	cp	r24, r14
     bc0:	9f 05       	cpc	r25, r15
     bc2:	71 f0       	breq	.+28     	; 0xbe0 <__stack+0xe1>
     bc4:	f1 01       	movw	r30, r2
     bc6:	ee 0f       	add	r30, r30
     bc8:	ff 1f       	adc	r31, r31
     bca:	85 e4       	ldi	r24, 0x45	; 69
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	8c 0f       	add	r24, r28
     bd0:	9d 1f       	adc	r25, r29
     bd2:	e8 0f       	add	r30, r24
     bd4:	f9 1f       	adc	r31, r25
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	e8 16       	cp	r14, r24
     bdc:	f9 06       	cpc	r15, r25
     bde:	69 f4       	brne	.+26     	; 0xbfa <__stack+0xfb>
			coin_ind = from[indmax];
			other_ind = to[indmax];
     be0:	f4 01       	movw	r30, r8
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	a5 e4       	ldi	r26, 0x45	; 69
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ac 0f       	add	r26, r28
     bec:	bd 1f       	adc	r27, r29
     bee:	ea 0f       	add	r30, r26
     bf0:	fb 1f       	adc	r31, r27
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
     bf2:	67 01       	movw	r12, r14
			other_ind = to[indmax];
     bf4:	e0 80       	ld	r14, Z
     bf6:	f1 80       	ldd	r15, Z+1	; 0x01
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <__stack+0x111>
		}
		else{
			coin_ind = to[indmax];
     bfa:	f4 01       	movw	r30, r8
     bfc:	ee 0f       	add	r30, r30
     bfe:	ff 1f       	adc	r31, r31
     c00:	25 e4       	ldi	r18, 0x45	; 69
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	2c 0f       	add	r18, r28
     c06:	3d 1f       	adc	r19, r29
     c08:	e2 0f       	add	r30, r18
     c0a:	f3 1f       	adc	r31, r19
     c0c:	c0 80       	ld	r12, Z
     c0e:	d1 80       	ldd	r13, Z+1	; 0x01
			other_ind = from[indmax];
		}
		
		m_usb_tx_string("coin_ind, other_ind:");
     c10:	86 e2       	ldi	r24, 0x26	; 38
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(coin_ind);
     c18:	c6 01       	movw	r24, r12
     c1a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	");
     c1e:	84 e2       	ldi	r24, 0x24	; 36
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(other_ind);
     c26:	c7 01       	movw	r24, r14
     c28:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
     c2c:	82 e2       	ldi	r24, 0x22	; 34
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
     c34:	01 30       	cpi	r16, 0x01	; 1
     c36:	11 05       	cpc	r17, r1
     c38:	09 f0       	breq	.+2      	; 0xc3c <__stack+0x13d>
     c3a:	44 c0       	rjmp	.+136    	; 0xcc4 <__stack+0x1c5>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
     c3c:	cc 0c       	add	r12, r12
     c3e:	dd 1c       	adc	r13, r13
     c40:	cc 0c       	add	r12, r12
     c42:	dd 1c       	adc	r13, r13
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	8c 0f       	add	r24, r28
     c4a:	9d 1f       	adc	r25, r29
     c4c:	c8 0e       	add	r12, r24
     c4e:	d9 1e       	adc	r13, r25
     c50:	87 01       	movw	r16, r14
     c52:	00 0f       	add	r16, r16
     c54:	11 1f       	adc	r17, r17
     c56:	00 0f       	add	r16, r16
     c58:	11 1f       	adc	r17, r17
     c5a:	08 0f       	add	r16, r24
     c5c:	19 1f       	adc	r17, r25
     c5e:	d8 01       	movw	r26, r16
     c60:	2d 91       	ld	r18, X+
     c62:	3d 91       	ld	r19, X+
     c64:	4d 91       	ld	r20, X+
     c66:	5c 91       	ld	r21, X
     c68:	f6 01       	movw	r30, r12
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     c82:	a9 96       	adiw	r28, 0x29	; 41
     c84:	6c af       	std	Y+60, r22	; 0x3c
     c86:	7d af       	std	Y+61, r23	; 0x3d
     c88:	8e af       	std	Y+62, r24	; 0x3e
     c8a:	9f af       	std	Y+63, r25	; 0x3f
     c8c:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
     c8e:	d8 01       	movw	r26, r16
     c90:	50 96       	adiw	r26, 0x10	; 16
     c92:	2d 91       	ld	r18, X+
     c94:	3d 91       	ld	r19, X+
     c96:	4d 91       	ld	r20, X+
     c98:	5c 91       	ld	r21, X
     c9a:	53 97       	sbiw	r26, 0x13	; 19
     c9c:	f6 01       	movw	r30, r12
     c9e:	60 89       	ldd	r22, Z+16	; 0x10
     ca0:	71 89       	ldd	r23, Z+17	; 0x11
     ca2:	82 89       	ldd	r24, Z+18	; 0x12
     ca4:	93 89       	ldd	r25, Z+19	; 0x13
     ca6:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	5f e3       	ldi	r21, 0x3F	; 63
     cb2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     cb6:	a5 96       	adiw	r28, 0x25	; 37
     cb8:	6c af       	std	Y+60, r22	; 0x3c
     cba:	7d af       	std	Y+61, r23	; 0x3d
     cbc:	8e af       	std	Y+62, r24	; 0x3e
     cbe:	9f af       	std	Y+63, r25	; 0x3f
     cc0:	a5 97       	sbiw	r28, 0x25	; 37
     cc2:	1f c0       	rjmp	.+62     	; 0xd02 <__stack+0x203>
		}
		else{
			ref_pc[0] = x[coin_ind];
     cc4:	f6 01       	movw	r30, r12
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	2c 0f       	add	r18, r28
     cd4:	3d 1f       	adc	r19, r29
     cd6:	e2 0f       	add	r30, r18
     cd8:	f3 1f       	adc	r31, r19
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	a2 81       	ldd	r26, Z+2	; 0x02
     ce0:	b3 81       	ldd	r27, Z+3	; 0x03
     ce2:	a9 96       	adiw	r28, 0x29	; 41
     ce4:	8c af       	std	Y+60, r24	; 0x3c
     ce6:	9d af       	std	Y+61, r25	; 0x3d
     ce8:	ae af       	std	Y+62, r26	; 0x3e
     cea:	bf af       	std	Y+63, r27	; 0x3f
     cec:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = y[coin_ind];
     cee:	80 89       	ldd	r24, Z+16	; 0x10
     cf0:	91 89       	ldd	r25, Z+17	; 0x11
     cf2:	a2 89       	ldd	r26, Z+18	; 0x12
     cf4:	b3 89       	ldd	r27, Z+19	; 0x13
     cf6:	a5 96       	adiw	r28, 0x25	; 37
     cf8:	8c af       	std	Y+60, r24	; 0x3c
     cfa:	9d af       	std	Y+61, r25	; 0x3d
     cfc:	ae af       	std	Y+62, r26	; 0x3e
     cfe:	bf af       	std	Y+63, r27	; 0x3f
     d00:	a5 97       	sbiw	r28, 0x25	; 37
		}
		m_usb_tx_string("ref_pc0, ref_pc1: ");
     d02:	8f e0       	ldi	r24, 0x0F	; 15
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ref_pc[0]);
     d0a:	a9 96       	adiw	r28, 0x29	; 41
     d0c:	6c ad       	ldd	r22, Y+60	; 0x3c
     d0e:	7d ad       	ldd	r23, Y+61	; 0x3d
     d10:	8e ad       	ldd	r24, Y+62	; 0x3e
     d12:	9f ad       	ldd	r25, Y+63	; 0x3f
     d14:	a9 97       	sbiw	r28, 0x29	; 41
     d16:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     d1a:	cb 01       	movw	r24, r22
     d1c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	");
     d20:	8d e0       	ldi	r24, 0x0D	; 13
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ref_pc[1]);
     d28:	a5 96       	adiw	r28, 0x25	; 37
     d2a:	6c ad       	ldd	r22, Y+60	; 0x3c
     d2c:	7d ad       	ldd	r23, Y+61	; 0x3d
     d2e:	8e ad       	ldd	r24, Y+62	; 0x3e
     d30:	9f ad       	ldd	r25, Y+63	; 0x3f
     d32:	a5 97       	sbiw	r28, 0x25	; 37
     d34:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     d38:	cb 01       	movw	r24, r22
     d3a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
     d3e:	8b e0       	ldi	r24, 0x0B	; 11
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
     d46:	ee 0c       	add	r14, r14
     d48:	ff 1c       	adc	r15, r15
     d4a:	ee 0c       	add	r14, r14
     d4c:	ff 1c       	adc	r15, r15
     d4e:	a1 e0       	ldi	r26, 0x01	; 1
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ac 0f       	add	r26, r28
     d54:	bd 1f       	adc	r27, r29
     d56:	ea 0e       	add	r14, r26
     d58:	fb 1e       	adc	r15, r27
     d5a:	a9 96       	adiw	r28, 0x29	; 41
     d5c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d5e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d60:	4e ad       	ldd	r20, Y+62	; 0x3e
     d62:	5f ad       	ldd	r21, Y+63	; 0x3f
     d64:	a9 97       	sbiw	r28, 0x29	; 41
     d66:	f7 01       	movw	r30, r14
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     d74:	6d 96       	adiw	r28, 0x1d	; 29
     d76:	6c af       	std	Y+60, r22	; 0x3c
     d78:	7d af       	std	Y+61, r23	; 0x3d
     d7a:	8e af       	std	Y+62, r24	; 0x3e
     d7c:	9f af       	std	Y+63, r25	; 0x3f
     d7e:	6d 97       	sbiw	r28, 0x1d	; 29
     d80:	a5 96       	adiw	r28, 0x25	; 37
     d82:	2c ad       	ldd	r18, Y+60	; 0x3c
     d84:	3d ad       	ldd	r19, Y+61	; 0x3d
     d86:	4e ad       	ldd	r20, Y+62	; 0x3e
     d88:	5f ad       	ldd	r21, Y+63	; 0x3f
     d8a:	a5 97       	sbiw	r28, 0x25	; 37
     d8c:	d7 01       	movw	r26, r14
     d8e:	50 96       	adiw	r26, 0x10	; 16
     d90:	6d 91       	ld	r22, X+
     d92:	7d 91       	ld	r23, X+
     d94:	8d 91       	ld	r24, X+
     d96:	9c 91       	ld	r25, X
     d98:	53 97       	sbiw	r26, 0x13	; 19
     d9a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     d9e:	a1 96       	adiw	r28, 0x21	; 33
     da0:	6c af       	std	Y+60, r22	; 0x3c
     da2:	7d af       	std	Y+61, r23	; 0x3d
     da4:	8e af       	std	Y+62, r24	; 0x3e
     da6:	9f af       	std	Y+63, r25	; 0x3f
     da8:	a1 97       	sbiw	r28, 0x21	; 33
			
		m_usb_tx_string("ref_vc0, ref_vc1 (unnormalize): ");
     daa:	8a ee       	ldi	r24, 0xEA	; 234
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ref_vc[0]);
     db2:	6d 96       	adiw	r28, 0x1d	; 29
     db4:	6c ad       	ldd	r22, Y+60	; 0x3c
     db6:	7d ad       	ldd	r23, Y+61	; 0x3d
     db8:	8e ad       	ldd	r24, Y+62	; 0x3e
     dba:	9f ad       	ldd	r25, Y+63	; 0x3f
     dbc:	6d 97       	sbiw	r28, 0x1d	; 29
     dbe:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     dc2:	cb 01       	movw	r24, r22
     dc4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	");
     dc8:	88 ee       	ldi	r24, 0xE8	; 232
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ref_vc[1]);
     dd0:	a1 96       	adiw	r28, 0x21	; 33
     dd2:	6c ad       	ldd	r22, Y+60	; 0x3c
     dd4:	7d ad       	ldd	r23, Y+61	; 0x3d
     dd6:	8e ad       	ldd	r24, Y+62	; 0x3e
     dd8:	9f ad       	ldd	r25, Y+63	; 0x3f
     dda:	a1 97       	sbiw	r28, 0x21	; 33
     ddc:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     de0:	cb 01       	movw	r24, r22
     de2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
     de6:	86 ee       	ldi	r24, 0xE6	; 230
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
     dee:	6d 96       	adiw	r28, 0x1d	; 29
     df0:	8c ac       	ldd	r8, Y+60	; 0x3c
     df2:	9d ac       	ldd	r9, Y+61	; 0x3d
     df4:	ae ac       	ldd	r10, Y+62	; 0x3e
     df6:	bf ac       	ldd	r11, Y+63	; 0x3f
     df8:	6d 97       	sbiw	r28, 0x1d	; 29
     dfa:	a1 96       	adiw	r28, 0x21	; 33
     dfc:	cc ac       	ldd	r12, Y+60	; 0x3c
     dfe:	dd ac       	ldd	r13, Y+61	; 0x3d
     e00:	ee ac       	ldd	r14, Y+62	; 0x3e
     e02:	ff ac       	ldd	r15, Y+63	; 0x3f
     e04:	a1 97       	sbiw	r28, 0x21	; 33
     e06:	a5 01       	movw	r20, r10
     e08:	94 01       	movw	r18, r8
     e0a:	c5 01       	movw	r24, r10
     e0c:	b4 01       	movw	r22, r8
     e0e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     e12:	2b 01       	movw	r4, r22
     e14:	3c 01       	movw	r6, r24
     e16:	a7 01       	movw	r20, r14
     e18:	96 01       	movw	r18, r12
     e1a:	c7 01       	movw	r24, r14
     e1c:	b6 01       	movw	r22, r12
     e1e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     e22:	9b 01       	movw	r18, r22
     e24:	ac 01       	movw	r20, r24
     e26:	c3 01       	movw	r24, r6
     e28:	b2 01       	movw	r22, r4
     e2a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     e2e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <sqrt>
     e32:	2b 01       	movw	r4, r22
     e34:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	c5 01       	movw	r24, r10
     e3c:	b4 01       	movw	r22, r8
     e3e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divsf3>
     e42:	6d 96       	adiw	r28, 0x1d	; 29
     e44:	6c af       	std	Y+60, r22	; 0x3c
     e46:	7d af       	std	Y+61, r23	; 0x3d
     e48:	8e af       	std	Y+62, r24	; 0x3e
     e4a:	9f af       	std	Y+63, r25	; 0x3f
     e4c:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
     e4e:	a3 01       	movw	r20, r6
     e50:	92 01       	movw	r18, r4
     e52:	c7 01       	movw	r24, r14
     e54:	b6 01       	movw	r22, r12
     e56:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divsf3>
     e5a:	a1 96       	adiw	r28, 0x21	; 33
     e5c:	6c af       	std	Y+60, r22	; 0x3c
     e5e:	7d af       	std	Y+61, r23	; 0x3d
     e60:	8e af       	std	Y+62, r24	; 0x3e
     e62:	9f af       	std	Y+63, r25	; 0x3f
     e64:	a1 97       	sbiw	r28, 0x21	; 33
		
		m_usb_tx_string("ref_vc0, ref_vc1 (normalize): ");
     e66:	87 ec       	ldi	r24, 0xC7	; 199
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ref_vc[0]*1000);
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4a e7       	ldi	r20, 0x7A	; 122
     e74:	54 e4       	ldi	r21, 0x44	; 68
     e76:	6d 96       	adiw	r28, 0x1d	; 29
     e78:	6c ad       	ldd	r22, Y+60	; 0x3c
     e7a:	7d ad       	ldd	r23, Y+61	; 0x3d
     e7c:	8e ad       	ldd	r24, Y+62	; 0x3e
     e7e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e80:	6d 97       	sbiw	r28, 0x1d	; 29
     e82:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     e86:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     e8a:	cb 01       	movw	r24, r22
     e8c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	");
     e90:	85 ec       	ldi	r24, 0xC5	; 197
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ref_vc[1]*1000);
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a e7       	ldi	r20, 0x7A	; 122
     e9e:	54 e4       	ldi	r21, 0x44	; 68
     ea0:	a1 96       	adiw	r28, 0x21	; 33
     ea2:	6c ad       	ldd	r22, Y+60	; 0x3c
     ea4:	7d ad       	ldd	r23, Y+61	; 0x3d
     ea6:	8e ad       	ldd	r24, Y+62	; 0x3e
     ea8:	9f ad       	ldd	r25, Y+63	; 0x3f
     eaa:	a1 97       	sbiw	r28, 0x21	; 33
     eac:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     eb0:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     eb4:	cb 01       	movw	r24, r22
     eb6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
     eba:	83 ec       	ldi	r24, 0xC3	; 195
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
     ec2:	65 96       	adiw	r28, 0x15	; 21
     ec4:	2c ad       	ldd	r18, Y+60	; 0x3c
     ec6:	3d ad       	ldd	r19, Y+61	; 0x3d
     ec8:	4e ad       	ldd	r20, Y+62	; 0x3e
     eca:	5f ad       	ldd	r21, Y+63	; 0x3f
     ecc:	65 97       	sbiw	r28, 0x15	; 21
     ece:	6d 96       	adiw	r28, 0x1d	; 29
     ed0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ed2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ed4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ed6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ed8:	6d 97       	sbiw	r28, 0x1d	; 29
     eda:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     ede:	6b 01       	movw	r12, r22
     ee0:	7c 01       	movw	r14, r24
     ee2:	69 96       	adiw	r28, 0x19	; 25
     ee4:	2c ad       	ldd	r18, Y+60	; 0x3c
     ee6:	3d ad       	ldd	r19, Y+61	; 0x3d
     ee8:	4e ad       	ldd	r20, Y+62	; 0x3e
     eea:	5f ad       	ldd	r21, Y+63	; 0x3f
     eec:	69 97       	sbiw	r28, 0x19	; 25
     eee:	a1 96       	adiw	r28, 0x21	; 33
     ef0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ef2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef8:	a1 97       	sbiw	r28, 0x21	; 33
     efa:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     efe:	9b 01       	movw	r18, r22
     f00:	ac 01       	movw	r20, r24
     f02:	c7 01       	movw	r24, r14
     f04:	b6 01       	movw	r22, r12
     f06:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
     f0a:	2b 01       	movw	r4, r22
     f0c:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
     f0e:	9b 01       	movw	r18, r22
     f10:	ac 01       	movw	r20, r24
     f12:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     f16:	9b 01       	movw	r18, r22
     f18:	ac 01       	movw	r20, r24
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	9f e3       	ldi	r25, 0x3F	; 63
     f22:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     f26:	0e 94 5e 11 	call	0x22bc	; 0x22bc <sqrt>
     f2a:	4b 01       	movw	r8, r22
     f2c:	5c 01       	movw	r10, r24
		
		m_usb_tx_string("cos, sin:");
     f2e:	89 eb       	ldi	r24, 0xB9	; 185
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(costheta*1000);
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	4a e7       	ldi	r20, 0x7A	; 122
     f3c:	54 e4       	ldi	r21, 0x44	; 68
     f3e:	c3 01       	movw	r24, r6
     f40:	b2 01       	movw	r22, r4
     f42:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     f46:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     f4a:	cb 01       	movw	r24, r22
     f4c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	");
     f50:	87 eb       	ldi	r24, 0xB7	; 183
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(sintheta*1000);
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	4a e7       	ldi	r20, 0x7A	; 122
     f5e:	54 e4       	ldi	r21, 0x44	; 68
     f60:	c5 01       	movw	r24, r10
     f62:	b4 01       	movw	r22, r8
     f64:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     f68:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
     f6c:	cb 01       	movw	r24, r22
     f6e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
     f72:	85 eb       	ldi	r24, 0xB5	; 181
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
     f7a:	fe 01       	movw	r30, r28
     f7c:	ef 5a       	subi	r30, 0xAF	; 175
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	7f 01       	movw	r14, r30
     f82:	8e 01       	movw	r16, r28
     f84:	07 5a       	subi	r16, 0xA7	; 167
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	a5 01       	movw	r20, r10
     f8a:	94 01       	movw	r18, r8
     f8c:	c3 01       	movw	r24, r6
     f8e:	b2 01       	movw	r22, r4
     f90:	0e 94 66 01 	call	0x2cc	; 0x2cc <find_sign>
     f94:	8c 01       	movw	r16, r24
		m_usb_tx_string("sign: ");
     f96:	8e ea       	ldi	r24, 0xAE	; 174
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(if_pos_sin);
     f9e:	c8 01       	movw	r24, r16
     fa0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
     fa4:	8c ea       	ldi	r24, 0xAC	; 172
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		
		if(if_pos_sin == 1){
     fac:	01 30       	cpi	r16, 0x01	; 1
     fae:	11 05       	cpc	r17, r1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <__stack+0x4b5>
     fb2:	98 c0       	rjmp	.+304    	; 0x10e4 <__stack+0x5e5>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
     fb4:	20 91 00 01 	lds	r18, 0x0100
     fb8:	30 91 01 01 	lds	r19, 0x0101
     fbc:	40 91 02 01 	lds	r20, 0x0102
     fc0:	50 91 03 01 	lds	r21, 0x0103
     fc4:	a9 96       	adiw	r28, 0x29	; 41
     fc6:	6c ad       	ldd	r22, Y+60	; 0x3c
     fc8:	7d ad       	ldd	r23, Y+61	; 0x3d
     fca:	8e ad       	ldd	r24, Y+62	; 0x3e
     fcc:	9f ad       	ldd	r25, Y+63	; 0x3f
     fce:	a9 97       	sbiw	r28, 0x29	; 41
     fd0:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
     fd4:	a9 96       	adiw	r28, 0x29	; 41
     fd6:	6c af       	std	Y+60, r22	; 0x3c
     fd8:	7d af       	std	Y+61, r23	; 0x3d
     fda:	8e af       	std	Y+62, r24	; 0x3e
     fdc:	9f af       	std	Y+63, r25	; 0x3f
     fde:	a9 97       	sbiw	r28, 0x29	; 41
     fe0:	20 91 04 01 	lds	r18, 0x0104
     fe4:	30 91 05 01 	lds	r19, 0x0105
     fe8:	40 91 06 01 	lds	r20, 0x0106
     fec:	50 91 07 01 	lds	r21, 0x0107
     ff0:	a5 96       	adiw	r28, 0x25	; 37
     ff2:	6c ad       	ldd	r22, Y+60	; 0x3c
     ff4:	7d ad       	ldd	r23, Y+61	; 0x3d
     ff6:	8e ad       	ldd	r24, Y+62	; 0x3e
     ff8:	9f ad       	ldd	r25, Y+63	; 0x3f
     ffa:	a5 97       	sbiw	r28, 0x25	; 37
     ffc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    1000:	6b 01       	movw	r12, r22
    1002:	7c 01       	movw	r14, r24
    1004:	a3 01       	movw	r20, r6
    1006:	92 01       	movw	r18, r4
    1008:	a9 96       	adiw	r28, 0x29	; 41
    100a:	6c ad       	ldd	r22, Y+60	; 0x3c
    100c:	7d ad       	ldd	r23, Y+61	; 0x3d
    100e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1010:	9f ad       	ldd	r25, Y+63	; 0x3f
    1012:	a9 97       	sbiw	r28, 0x29	; 41
    1014:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	e1 96       	adiw	r28, 0x31	; 49
    101e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1020:	7d ad       	ldd	r23, Y+61	; 0x3d
    1022:	8e ad       	ldd	r24, Y+62	; 0x3e
    1024:	9f ad       	ldd	r25, Y+63	; 0x3f
    1026:	e1 97       	sbiw	r28, 0x31	; 49
    1028:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    102c:	a5 96       	adiw	r28, 0x25	; 37
    102e:	6c af       	std	Y+60, r22	; 0x3c
    1030:	7d af       	std	Y+61, r23	; 0x3d
    1032:	8e af       	std	Y+62, r24	; 0x3e
    1034:	9f af       	std	Y+63, r25	; 0x3f
    1036:	a5 97       	sbiw	r28, 0x25	; 37
    1038:	a5 01       	movw	r20, r10
    103a:	94 01       	movw	r18, r8
    103c:	c7 01       	movw	r24, r14
    103e:	b6 01       	movw	r22, r12
    1040:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	a5 96       	adiw	r28, 0x25	; 37
    104a:	6c ad       	ldd	r22, Y+60	; 0x3c
    104c:	7d ad       	ldd	r23, Y+61	; 0x3d
    104e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1050:	9f ad       	ldd	r25, Y+63	; 0x3f
    1052:	a5 97       	sbiw	r28, 0x25	; 37
    1054:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
    1058:	60 93 3c 01 	sts	0x013C, r22
    105c:	70 93 3d 01 	sts	0x013D, r23
    1060:	80 93 3e 01 	sts	0x013E, r24
    1064:	90 93 3f 01 	sts	0x013F, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    1068:	a7 01       	movw	r20, r14
    106a:	96 01       	movw	r18, r12
    106c:	c3 01       	movw	r24, r6
    106e:	b2 01       	movw	r22, r4
    1070:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	ad 96       	adiw	r28, 0x2d	; 45
    107a:	6c ad       	ldd	r22, Y+60	; 0x3c
    107c:	7d ad       	ldd	r23, Y+61	; 0x3d
    107e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1080:	9f ad       	ldd	r25, Y+63	; 0x3f
    1082:	ad 97       	sbiw	r28, 0x2d	; 45
    1084:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	a9 96       	adiw	r28, 0x29	; 41
    108e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1090:	3d ad       	ldd	r19, Y+61	; 0x3d
    1092:	4e ad       	ldd	r20, Y+62	; 0x3e
    1094:	5f ad       	ldd	r21, Y+63	; 0x3f
    1096:	a9 97       	sbiw	r28, 0x29	; 41
    1098:	c5 01       	movw	r24, r10
    109a:	b4 01       	movw	r22, r8
    109c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    10a0:	9b 01       	movw	r18, r22
    10a2:	ac 01       	movw	r20, r24
    10a4:	c7 01       	movw	r24, r14
    10a6:	b6 01       	movw	r22, r12
    10a8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    10ac:	60 93 40 01 	sts	0x0140, r22
    10b0:	70 93 41 01 	sts	0x0141, r23
    10b4:	80 93 42 01 	sts	0x0142, r24
    10b8:	90 93 43 01 	sts	0x0143, r25
			ypdir[0] = -sintheta;
    10bc:	d5 01       	movw	r26, r10
    10be:	c4 01       	movw	r24, r8
    10c0:	b0 58       	subi	r27, 0x80	; 128
    10c2:	80 93 34 01 	sts	0x0134, r24
    10c6:	90 93 35 01 	sts	0x0135, r25
    10ca:	a0 93 36 01 	sts	0x0136, r26
    10ce:	b0 93 37 01 	sts	0x0137, r27
			ypdir[1] = costheta;
    10d2:	40 92 38 01 	sts	0x0138, r4
    10d6:	50 92 39 01 	sts	0x0139, r5
    10da:	60 92 3a 01 	sts	0x013A, r6
    10de:	70 92 3b 01 	sts	0x013B, r7
    10e2:	9c c0       	rjmp	.+312    	; 0x121c <__stack+0x71d>
		}	
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    10e4:	20 91 00 01 	lds	r18, 0x0100
    10e8:	30 91 01 01 	lds	r19, 0x0101
    10ec:	40 91 02 01 	lds	r20, 0x0102
    10f0:	50 91 03 01 	lds	r21, 0x0103
    10f4:	a9 96       	adiw	r28, 0x29	; 41
    10f6:	6c ad       	ldd	r22, Y+60	; 0x3c
    10f8:	7d ad       	ldd	r23, Y+61	; 0x3d
    10fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    10fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    10fe:	a9 97       	sbiw	r28, 0x29	; 41
    1100:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    1104:	6b 01       	movw	r12, r22
    1106:	7c 01       	movw	r14, r24
    1108:	20 91 04 01 	lds	r18, 0x0104
    110c:	30 91 05 01 	lds	r19, 0x0105
    1110:	40 91 06 01 	lds	r20, 0x0106
    1114:	50 91 07 01 	lds	r21, 0x0107
    1118:	a5 96       	adiw	r28, 0x25	; 37
    111a:	6c ad       	ldd	r22, Y+60	; 0x3c
    111c:	7d ad       	ldd	r23, Y+61	; 0x3d
    111e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1120:	9f ad       	ldd	r25, Y+63	; 0x3f
    1122:	a5 97       	sbiw	r28, 0x25	; 37
    1124:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    1128:	a5 96       	adiw	r28, 0x25	; 37
    112a:	6c af       	std	Y+60, r22	; 0x3c
    112c:	7d af       	std	Y+61, r23	; 0x3d
    112e:	8e af       	std	Y+62, r24	; 0x3e
    1130:	9f af       	std	Y+63, r25	; 0x3f
    1132:	a5 97       	sbiw	r28, 0x25	; 37
    1134:	a3 01       	movw	r20, r6
    1136:	92 01       	movw	r18, r4
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	e1 96       	adiw	r28, 0x31	; 49
    1146:	6c ad       	ldd	r22, Y+60	; 0x3c
    1148:	7d ad       	ldd	r23, Y+61	; 0x3d
    114a:	8e ad       	ldd	r24, Y+62	; 0x3e
    114c:	9f ad       	ldd	r25, Y+63	; 0x3f
    114e:	e1 97       	sbiw	r28, 0x31	; 49
    1150:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    1154:	a9 96       	adiw	r28, 0x29	; 41
    1156:	6c af       	std	Y+60, r22	; 0x3c
    1158:	7d af       	std	Y+61, r23	; 0x3d
    115a:	8e af       	std	Y+62, r24	; 0x3e
    115c:	9f af       	std	Y+63, r25	; 0x3f
    115e:	a9 97       	sbiw	r28, 0x29	; 41
    1160:	a5 01       	movw	r20, r10
    1162:	94 01       	movw	r18, r8
    1164:	a5 96       	adiw	r28, 0x25	; 37
    1166:	6c ad       	ldd	r22, Y+60	; 0x3c
    1168:	7d ad       	ldd	r23, Y+61	; 0x3d
    116a:	8e ad       	ldd	r24, Y+62	; 0x3e
    116c:	9f ad       	ldd	r25, Y+63	; 0x3f
    116e:	a5 97       	sbiw	r28, 0x25	; 37
    1170:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1174:	9b 01       	movw	r18, r22
    1176:	ac 01       	movw	r20, r24
    1178:	a9 96       	adiw	r28, 0x29	; 41
    117a:	6c ad       	ldd	r22, Y+60	; 0x3c
    117c:	7d ad       	ldd	r23, Y+61	; 0x3d
    117e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1180:	9f ad       	ldd	r25, Y+63	; 0x3f
    1182:	a9 97       	sbiw	r28, 0x29	; 41
    1184:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    1188:	60 93 3c 01 	sts	0x013C, r22
    118c:	70 93 3d 01 	sts	0x013D, r23
    1190:	80 93 3e 01 	sts	0x013E, r24
    1194:	90 93 3f 01 	sts	0x013F, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    1198:	a5 96       	adiw	r28, 0x25	; 37
    119a:	2c ad       	ldd	r18, Y+60	; 0x3c
    119c:	3d ad       	ldd	r19, Y+61	; 0x3d
    119e:	4e ad       	ldd	r20, Y+62	; 0x3e
    11a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    11a2:	a5 97       	sbiw	r28, 0x25	; 37
    11a4:	c3 01       	movw	r24, r6
    11a6:	b2 01       	movw	r22, r4
    11a8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	ad 96       	adiw	r28, 0x2d	; 45
    11b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    11b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    11b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    11b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    11ba:	ad 97       	sbiw	r28, 0x2d	; 45
    11bc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__subsf3>
    11c0:	a5 96       	adiw	r28, 0x25	; 37
    11c2:	6c af       	std	Y+60, r22	; 0x3c
    11c4:	7d af       	std	Y+61, r23	; 0x3d
    11c6:	8e af       	std	Y+62, r24	; 0x3e
    11c8:	9f af       	std	Y+63, r25	; 0x3f
    11ca:	a5 97       	sbiw	r28, 0x25	; 37
    11cc:	a7 01       	movw	r20, r14
    11ce:	96 01       	movw	r18, r12
    11d0:	c5 01       	movw	r24, r10
    11d2:	b4 01       	movw	r22, r8
    11d4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	a5 96       	adiw	r28, 0x25	; 37
    11de:	6c ad       	ldd	r22, Y+60	; 0x3c
    11e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    11e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    11e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11e6:	a5 97       	sbiw	r28, 0x25	; 37
    11e8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__addsf3>
    11ec:	60 93 40 01 	sts	0x0140, r22
    11f0:	70 93 41 01 	sts	0x0141, r23
    11f4:	80 93 42 01 	sts	0x0142, r24
    11f8:	90 93 43 01 	sts	0x0143, r25
			ypdir[0] = sintheta;
    11fc:	80 92 34 01 	sts	0x0134, r8
    1200:	90 92 35 01 	sts	0x0135, r9
    1204:	a0 92 36 01 	sts	0x0136, r10
    1208:	b0 92 37 01 	sts	0x0137, r11
			ypdir[1] = costheta;
    120c:	40 92 38 01 	sts	0x0138, r4
    1210:	50 92 39 01 	sts	0x0139, r5
    1214:	60 92 3a 01 	sts	0x013A, r6
    1218:	70 92 3b 01 	sts	0x013B, r7
		}
		c_wii_last[0] = c_wii[0];
    121c:	80 91 3c 01 	lds	r24, 0x013C
    1220:	90 91 3d 01 	lds	r25, 0x013D
    1224:	a0 91 3e 01 	lds	r26, 0x013E
    1228:	b0 91 3f 01 	lds	r27, 0x013F
    122c:	80 93 2c 01 	sts	0x012C, r24
    1230:	90 93 2d 01 	sts	0x012D, r25
    1234:	a0 93 2e 01 	sts	0x012E, r26
    1238:	b0 93 2f 01 	sts	0x012F, r27
		c_wii_last[1] = c_wii[1];
    123c:	80 91 40 01 	lds	r24, 0x0140
    1240:	90 91 41 01 	lds	r25, 0x0141
    1244:	a0 91 42 01 	lds	r26, 0x0142
    1248:	b0 91 43 01 	lds	r27, 0x0143
    124c:	80 93 30 01 	sts	0x0130, r24
    1250:	90 93 31 01 	sts	0x0131, r25
    1254:	a0 93 32 01 	sts	0x0132, r26
    1258:	b0 93 33 01 	sts	0x0133, r27
		ypdir_last[0] = ypdir[0];
    125c:	80 91 34 01 	lds	r24, 0x0134
    1260:	90 91 35 01 	lds	r25, 0x0135
    1264:	a0 91 36 01 	lds	r26, 0x0136
    1268:	b0 91 37 01 	lds	r27, 0x0137
    126c:	80 93 24 01 	sts	0x0124, r24
    1270:	90 93 25 01 	sts	0x0125, r25
    1274:	a0 93 26 01 	sts	0x0126, r26
    1278:	b0 93 27 01 	sts	0x0127, r27
		ypdir_last[1] = ypdir[1];
    127c:	80 91 38 01 	lds	r24, 0x0138
    1280:	90 91 39 01 	lds	r25, 0x0139
    1284:	a0 91 3a 01 	lds	r26, 0x013A
    1288:	b0 91 3b 01 	lds	r27, 0x013B
    128c:	80 93 28 01 	sts	0x0128, r24
    1290:	90 93 29 01 	sts	0x0129, r25
    1294:	a0 93 2a 01 	sts	0x012A, r26
    1298:	b0 93 2b 01 	sts	0x012B, r27
    129c:	40 c0       	rjmp	.+128    	; 0x131e <__stack+0x81f>
	}
	else{
		c_wii[0] = c_wii_last[0];
    129e:	80 91 2c 01 	lds	r24, 0x012C
    12a2:	90 91 2d 01 	lds	r25, 0x012D
    12a6:	a0 91 2e 01 	lds	r26, 0x012E
    12aa:	b0 91 2f 01 	lds	r27, 0x012F
    12ae:	80 93 3c 01 	sts	0x013C, r24
    12b2:	90 93 3d 01 	sts	0x013D, r25
    12b6:	a0 93 3e 01 	sts	0x013E, r26
    12ba:	b0 93 3f 01 	sts	0x013F, r27
		c_wii[1] = c_wii_last[1];
    12be:	80 91 30 01 	lds	r24, 0x0130
    12c2:	90 91 31 01 	lds	r25, 0x0131
    12c6:	a0 91 32 01 	lds	r26, 0x0132
    12ca:	b0 91 33 01 	lds	r27, 0x0133
    12ce:	80 93 40 01 	sts	0x0140, r24
    12d2:	90 93 41 01 	sts	0x0141, r25
    12d6:	a0 93 42 01 	sts	0x0142, r26
    12da:	b0 93 43 01 	sts	0x0143, r27
		ypdir[0] = ypdir_last[0];
    12de:	80 91 24 01 	lds	r24, 0x0124
    12e2:	90 91 25 01 	lds	r25, 0x0125
    12e6:	a0 91 26 01 	lds	r26, 0x0126
    12ea:	b0 91 27 01 	lds	r27, 0x0127
    12ee:	80 93 34 01 	sts	0x0134, r24
    12f2:	90 93 35 01 	sts	0x0135, r25
    12f6:	a0 93 36 01 	sts	0x0136, r26
    12fa:	b0 93 37 01 	sts	0x0137, r27
		ypdir[1] = ypdir_last[1];
    12fe:	80 91 28 01 	lds	r24, 0x0128
    1302:	90 91 29 01 	lds	r25, 0x0129
    1306:	a0 91 2a 01 	lds	r26, 0x012A
    130a:	b0 91 2b 01 	lds	r27, 0x012B
    130e:	80 93 38 01 	sts	0x0138, r24
    1312:	90 93 39 01 	sts	0x0139, r25
    1316:	a0 93 3a 01 	sts	0x013A, r26
    131a:	b0 93 3b 01 	sts	0x013B, r27
	}
	m_green(OFF);
    131e:	6a 9a       	sbi	0x0d, 2	; 13
    1320:	72 9a       	sbi	0x0e, 2	; 14
    1322:	14 c0       	rjmp	.+40     	; 0x134c <__stack+0x84d>
    1324:	e9 96       	adiw	r28, 0x39	; 57
    1326:	2e ad       	ldd	r18, Y+62	; 0x3e
    1328:	3f ad       	ldd	r19, Y+63	; 0x3f
    132a:	e9 97       	sbiw	r28, 0x39	; 57
    132c:	2c 5f       	subi	r18, 0xFC	; 252
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	e9 96       	adiw	r28, 0x39	; 57
    1332:	3f af       	std	Y+63, r19	; 0x3f
    1334:	2e af       	std	Y+62, r18	; 0x3e
    1336:	e9 97       	sbiw	r28, 0x39	; 57
    1338:	e3 96       	adiw	r28, 0x33	; 51
    133a:	8e ad       	ldd	r24, Y+62	; 0x3e
    133c:	9f ad       	ldd	r25, Y+63	; 0x3f
    133e:	e3 97       	sbiw	r28, 0x33	; 51
    1340:	04 96       	adiw	r24, 0x04	; 4
    1342:	e3 96       	adiw	r28, 0x33	; 51
    1344:	9f af       	std	Y+63, r25	; 0x3f
    1346:	8e af       	std	Y+62, r24	; 0x3e
    1348:	e3 97       	sbiw	r28, 0x33	; 51
    134a:	53 ca       	rjmp	.-2906   	; 0x7f2 <localization+0x35e>
}
    134c:	c4 58       	subi	r28, 0x84	; 132
    134e:	df 4f       	sbci	r29, 0xFF	; 255
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	df 90       	pop	r13
    1368:	cf 90       	pop	r12
    136a:	bf 90       	pop	r11
    136c:	af 90       	pop	r10
    136e:	9f 90       	pop	r9
    1370:	8f 90       	pop	r8
    1372:	7f 90       	pop	r7
    1374:	6f 90       	pop	r6
    1376:	5f 90       	pop	r5
    1378:	4f 90       	pop	r4
    137a:	3f 90       	pop	r3
    137c:	2f 90       	pop	r2
    137e:	08 95       	ret

00001380 <main>:
void localization(void);
void calibration(void);
int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw);

int main(void){
	m_clockdivide(0);
    1380:	e1 e6       	ldi	r30, 0x61	; 97
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 e8       	ldi	r24, 0x80	; 128
    1386:	80 83       	st	Z, r24
    1388:	10 82       	st	Z, r1
	
	m_red(ON);
    138a:	6e 9a       	sbi	0x0d, 6	; 13
    138c:	76 98       	cbi	0x0e, 6	; 14
	m_usb_init();
    138e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <m_usb_init>
	while(!m_usb_isconnected());
    1392:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <m_usb_isconnected>
    1396:	88 23       	and	r24, r24
    1398:	e1 f3       	breq	.-8      	; 0x1392 <main+0x12>
	m_red(OFF);
    139a:	6e 9a       	sbi	0x0d, 6	; 13
    139c:	76 9a       	sbi	0x0e, 6	; 14
	
	m_green(ON);
    139e:	6a 9a       	sbi	0x0d, 2	; 13
    13a0:	72 98       	cbi	0x0e, 2	; 14
	while(!m_wii_open());
    13a2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <m_wii_open>
    13a6:	88 23       	and	r24, r24
    13a8:	e1 f3       	breq	.-8      	; 0x13a2 <main+0x22>
	m_green(OFF);
    13aa:	6a 9a       	sbi	0x0d, 2	; 13
    13ac:	72 9a       	sbi	0x0e, 2	; 14
		m_usb_tx_string("\n");
		*/
		m_usb_tx_string("p1:");
		m_usb_tx_int(blobs[0]);
		m_usb_tx_string(",");
		m_usb_tx_int(blobs[1]);
    13ae:	0f 2e       	mov	r0, r31
    13b0:	f6 e4       	ldi	r31, 0x46	; 70
    13b2:	8f 2e       	mov	r8, r31
    13b4:	f1 e0       	ldi	r31, 0x01	; 1
    13b6:	9f 2e       	mov	r9, r31
    13b8:	f0 2d       	mov	r31, r0
		m_usb_tx_string("	p2:");
		m_usb_tx_int(blobs[3]);
    13ba:	0f 2e       	mov	r0, r31
    13bc:	fa e4       	ldi	r31, 0x4A	; 74
    13be:	af 2e       	mov	r10, r31
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	bf 2e       	mov	r11, r31
    13c4:	f0 2d       	mov	r31, r0
		m_usb_tx_string(",");
		m_usb_tx_int(blobs[4]);
    13c6:	0f 2e       	mov	r0, r31
    13c8:	fc e4       	ldi	r31, 0x4C	; 76
    13ca:	cf 2e       	mov	r12, r31
    13cc:	f1 e0       	ldi	r31, 0x01	; 1
    13ce:	df 2e       	mov	r13, r31
    13d0:	f0 2d       	mov	r31, r0
		m_usb_tx_string("	p3:");
		m_usb_tx_int(blobs[6]);
    13d2:	0f 2e       	mov	r0, r31
    13d4:	f0 e5       	ldi	r31, 0x50	; 80
    13d6:	ef 2e       	mov	r14, r31
    13d8:	f1 e0       	ldi	r31, 0x01	; 1
    13da:	ff 2e       	mov	r15, r31
    13dc:	f0 2d       	mov	r31, r0
		m_usb_tx_string(",");
		m_usb_tx_int(blobs[7]);
    13de:	02 e5       	ldi	r16, 0x52	; 82
    13e0:	11 e0       	ldi	r17, 0x01	; 1
		m_usb_tx_string("	p4:");
		m_usb_tx_int(blobs[9]);
    13e2:	c6 e5       	ldi	r28, 0x56	; 86
    13e4:	d1 e0       	ldi	r29, 0x01	; 1
		m_usb_tx_string(",");
		m_usb_tx_int(blobs[10]);
    13e6:	0f 2e       	mov	r0, r31
    13e8:	f8 e5       	ldi	r31, 0x58	; 88
    13ea:	6f 2e       	mov	r6, r31
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
    13ee:	7f 2e       	mov	r7, r31
    13f0:	f0 2d       	mov	r31, r0
		m_usb_tx_string("\n");
		
		localization();
		
		m_usb_tx_string("Position x:");
		m_usb_tx_int(c_wii[0]);
    13f2:	0f 2e       	mov	r0, r31
    13f4:	fc e3       	ldi	r31, 0x3C	; 60
    13f6:	4f 2e       	mov	r4, r31
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	5f 2e       	mov	r5, r31
    13fc:	f0 2d       	mov	r31, r0
		m_usb_tx_string("		y:");
		m_usb_tx_int(c_wii[1]);
    13fe:	0f 2e       	mov	r0, r31
    1400:	f0 e4       	ldi	r31, 0x40	; 64
    1402:	2f 2e       	mov	r2, r31
    1404:	f1 e0       	ldi	r31, 0x01	; 1
    1406:	3f 2e       	mov	r3, r31
    1408:	f0 2d       	mov	r31, r0
	//calibration();
	
	
	while(1){
		
		m_wii_read(&blobs[0]);
    140a:	84 e4       	ldi	r24, 0x44	; 68
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <m_wii_read>
		m_usb_tx_int(blobs[9]);
		m_usb_tx_string(" ");
		m_usb_tx_int(blobs[10]);
		m_usb_tx_string("\n");
		*/
		m_usb_tx_string("p1:");
    1412:	87 ed       	ldi	r24, 0xD7	; 215
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[0]);
    141a:	80 91 44 01 	lds	r24, 0x0144
    141e:	90 91 45 01 	lds	r25, 0x0145
    1422:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string(",");
    1426:	85 ed       	ldi	r24, 0xD5	; 213
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[1]);
    142e:	f4 01       	movw	r30, r8
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	p2:");
    1438:	80 ed       	ldi	r24, 0xD0	; 208
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[3]);
    1440:	f5 01       	movw	r30, r10
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string(",");
    144a:	8e ec       	ldi	r24, 0xCE	; 206
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[4]);
    1452:	f6 01       	movw	r30, r12
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	p3:");
    145c:	89 ec       	ldi	r24, 0xC9	; 201
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[6]);
    1464:	f7 01       	movw	r30, r14
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string(",");
    146e:	87 ec       	ldi	r24, 0xC7	; 199
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[7]);
    1476:	f8 01       	movw	r30, r16
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	p4:");
    1480:	82 ec       	ldi	r24, 0xC2	; 194
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[9]);
    1488:	88 81       	ld	r24, Y
    148a:	99 81       	ldd	r25, Y+1	; 0x01
    148c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string(",");
    1490:	80 ec       	ldi	r24, 0xC0	; 192
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(blobs[10]);
    1498:	f3 01       	movw	r30, r6
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
    14a2:	8e eb       	ldi	r24, 0xBE	; 190
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		localization();
    14aa:	0e 94 4a 02 	call	0x494	; 0x494 <localization>
		
		m_usb_tx_string("Position x:");
    14ae:	82 eb       	ldi	r24, 0xB2	; 178
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(c_wii[0]);
    14b6:	f2 01       	movw	r30, r4
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
    14c4:	cb 01       	movw	r24, r22
    14c6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("		y:");
    14ca:	8d ea       	ldi	r24, 0xAD	; 173
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(c_wii[1]);
    14d2:	f1 01       	movw	r30, r2
    14d4:	60 81       	ld	r22, Z
    14d6:	71 81       	ldd	r23, Z+1	; 0x01
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
    14e0:	cb 01       	movw	r24, r22
    14e2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
    14e6:	8b ea       	ldi	r24, 0xAB	; 171
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		
		m_usb_tx_string("Direction vx: 0.");
    14ee:	8a e9       	ldi	r24, 0x9A	; 154
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ypdir[0]*1000);
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	4a e7       	ldi	r20, 0x7A	; 122
    14fc:	54 e4       	ldi	r21, 0x44	; 68
    14fe:	e4 e3       	ldi	r30, 0x34	; 52
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    150e:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
    1512:	cb 01       	movw	r24, r22
    1514:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("	vy: 0.");
    1518:	82 e9       	ldi	r24, 0x92	; 146
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
		m_usb_tx_int(ypdir[1]*1000);
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	54 e4       	ldi	r21, 0x44	; 68
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1538:	0e 94 10 10 	call	0x2020	; 0x2020 <__fixsfsi>
    153c:	cb 01       	movw	r24, r22
    153e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <m_usb_tx_int>
		m_usb_tx_string("\n");
    1542:	80 e9       	ldi	r24, 0x90	; 144
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <print_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    154a:	ff e3       	ldi	r31, 0x3F	; 63
    154c:	2d e0       	ldi	r18, 0x0D	; 13
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	f1 50       	subi	r31, 0x01	; 1
    1552:	20 40       	sbci	r18, 0x00	; 0
    1554:	80 40       	sbci	r24, 0x00	; 0
    1556:	e1 f7       	brne	.-8      	; 0x1550 <main+0x1d0>
    1558:	00 c0       	rjmp	.+0      	; 0x155a <main+0x1da>
    155a:	00 00       	nop
    155c:	56 cf       	rjmp	.-340    	; 0x140a <main+0x8a>

0000155e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    155e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1560:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1562:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1564:	8c e0       	ldi	r24, 0x0C	; 12
    1566:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    156a:	e9 e6       	ldi	r30, 0x69	; 105
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 62       	ori	r24, 0x20	; 32
    1572:	80 83       	st	Z, r24
    1574:	80 81       	ld	r24, Z
    1576:	8f 7e       	andi	r24, 0xEF	; 239
    1578:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    157a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    157c:	78 94       	sei
    157e:	08 95       	ret

00001580 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1586:	80 ea       	ldi	r24, 0xA0	; 160
    1588:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    158c:	82 e1       	ldi	r24, 0x12	; 18
    158e:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1590:	09 b4       	in	r0, 0x29	; 41
    1592:	00 fe       	sbrs	r0, 0
    1594:	fd cf       	rjmp	.-6      	; 0x1590 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1596:	80 e9       	ldi	r24, 0x90	; 144
    1598:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    159c:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    15a0:	10 92 5f 01 	sts	0x015F, r1
	cdc_line_rtsdtr = 0;
    15a4:	10 92 5c 01 	sts	0x015C, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    15a8:	8c e0       	ldi	r24, 0x0C	; 12
    15aa:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    15ae:	78 94       	sei
    15b0:	08 95       	ret

000015b2 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    15b2:	80 91 5f 01 	lds	r24, 0x015F
}
    15b6:	08 95       	ret

000015b8 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    15bc:	90 91 5f 01 	lds	r25, 0x015F
    15c0:	99 23       	and	r25, r25
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <m_usb_tx_char+0xe>
    15c4:	4c c0       	rjmp	.+152    	; 0x165e <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    15c6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    15c8:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    15ca:	24 e0       	ldi	r18, 0x04	; 4
    15cc:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    15d0:	20 91 5d 01 	lds	r18, 0x015D
    15d4:	22 23       	and	r18, r18
    15d6:	49 f0       	breq	.+18     	; 0x15ea <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    15d8:	20 91 e8 00 	lds	r18, 0x00E8
    15dc:	25 fd       	sbrc	r18, 5
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    15e0:	9f bf       	out	0x3f, r25	; 63
			return -1;
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	41 c0       	rjmp	.+130    	; 0x1668 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    15e6:	10 92 5d 01 	sts	0x015D, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    15ea:	30 91 e4 00 	lds	r19, 0x00E4
    15ee:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    15f0:	20 91 e8 00 	lds	r18, 0x00E8
    15f4:	25 fd       	sbrc	r18, 5
    15f6:	24 c0       	rjmp	.+72     	; 0x1640 <m_usb_tx_char+0x88>
		SREG = intr_state;
    15f8:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    15fa:	90 91 e4 00 	lds	r25, 0x00E4
    15fe:	93 17       	cp	r25, r19
    1600:	81 f0       	breq	.+32     	; 0x1622 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1602:	90 91 5f 01 	lds	r25, 0x015F
    1606:	99 23       	and	r25, r25
    1608:	61 f1       	breq	.+88     	; 0x1662 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    160a:	a9 ee       	ldi	r26, 0xE9	; 233
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1610:	e8 ee       	ldi	r30, 0xE8	; 232
    1612:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1614:	c4 ee       	ldi	r28, 0xE4	; 228
    1616:	d0 e0       	ldi	r29, 0x00	; 0
    1618:	0d c0       	rjmp	.+26     	; 0x1634 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    161a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    161c:	98 81       	ld	r25, Y
    161e:	93 13       	cpse	r25, r19
    1620:	05 c0       	rjmp	.+10     	; 0x162c <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 93 5d 01 	sts	0x015D, r24
			return -1;
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	1e c0       	rjmp	.+60     	; 0x1668 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    162c:	90 91 5f 01 	lds	r25, 0x015F
    1630:	99 23       	and	r25, r25
    1632:	c9 f0       	breq	.+50     	; 0x1666 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    1634:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1636:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1638:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    163a:	20 81       	ld	r18, Z
    163c:	25 ff       	sbrs	r18, 5
    163e:	ed cf       	rjmp	.-38     	; 0x161a <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1640:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1644:	80 91 e8 00 	lds	r24, 0x00E8
    1648:	85 fd       	sbrc	r24, 5
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <m_usb_tx_char+0x9a>
    164c:	8a e3       	ldi	r24, 0x3A	; 58
    164e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1652:	85 e0       	ldi	r24, 0x05	; 5
    1654:	80 93 5e 01 	sts	0x015E, r24
	SREG = intr_state;
    1658:	9f bf       	out	0x3f, r25	; 63
	return 0;
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    165e:	8f ef       	ldi	r24, 0xFF	; 255
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <m_usb_tx_char+0xb0>
    1666:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    166e:	1f 92       	push	r1
    1670:	0f 92       	push	r0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1680:	e1 ee       	ldi	r30, 0xE1	; 225
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
        UDINT = 0;
    1686:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1688:	83 ff       	sbrs	r24, 3
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <__vector_10+0x40>
		UENUM = 0;
    168c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1696:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    169a:	92 e1       	ldi	r25, 0x12	; 18
    169c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    16a0:	98 e0       	ldi	r25, 0x08	; 8
    16a2:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    16a6:	10 92 5f 01 	sts	0x015F, r1
		cdc_line_rtsdtr = 0;
    16aa:	10 92 5c 01 	sts	0x015C, r1
        }
	if (intbits & (1<<SOFI)) {
    16ae:	82 ff       	sbrs	r24, 2
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <__vector_10+0x6a>
		if (usb_configuration) {
    16b2:	80 91 5f 01 	lds	r24, 0x015F
    16b6:	88 23       	and	r24, r24
    16b8:	79 f0       	breq	.+30     	; 0x16d8 <__vector_10+0x6a>
			t = transmit_flush_timer;
    16ba:	80 91 5e 01 	lds	r24, 0x015E
			if (t) {
    16be:	88 23       	and	r24, r24
    16c0:	59 f0       	breq	.+22     	; 0x16d8 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	80 93 5e 01 	sts	0x015E, r24
				if (!t) {
    16c8:	81 11       	cpse	r24, r1
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    16cc:	84 e0       	ldi	r24, 0x04	; 4
    16ce:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    16d2:	8a e3       	ldi	r24, 0x3A	; 58
    16d4:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1714:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1718:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    171c:	83 ff       	sbrs	r24, 3
    171e:	4e c1       	rjmp	.+668    	; 0x19bc <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    1720:	e1 ef       	ldi	r30, 0xF1	; 241
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    1726:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1728:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    172a:	80 81       	ld	r24, Z
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    1730:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    1732:	50 81       	ld	r21, Z
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	bc 01       	movw	r22, r24
    1738:	75 2b       	or	r23, r21
                wLength = UEDATX;
    173a:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    173c:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    173e:	82 ef       	ldi	r24, 0xF2	; 242
    1740:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1744:	46 30       	cpi	r20, 0x06	; 6
    1746:	09 f0       	breq	.+2      	; 0x174a <__vector_11+0x60>
    1748:	58 c0       	rjmp	.+176    	; 0x17fa <__vector_11+0x110>
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1752:	3b c1       	rjmp	.+630    	; 0x19ca <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1754:	c6 e0       	ldi	r28, 0x06	; 6
    1756:	8b ed       	ldi	r24, 0xDB	; 219
    1758:	91 e0       	ldi	r25, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    175a:	fc 01       	movw	r30, r24
    175c:	45 91       	lpm	r20, Z+
    175e:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    1760:	24 17       	cp	r18, r20
    1762:	35 07       	cpc	r19, r21
    1764:	11 f0       	breq	.+4      	; 0x176a <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    1766:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1768:	23 c0       	rjmp	.+70     	; 0x17b0 <__vector_11+0xc6>
				}
				list += 2;
    176a:	fc 01       	movw	r30, r24
    176c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    176e:	45 91       	lpm	r20, Z+
    1770:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    1772:	64 17       	cp	r22, r20
    1774:	75 07       	cpc	r23, r21
    1776:	11 f0       	breq	.+4      	; 0x177c <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    1778:	07 96       	adiw	r24, 0x07	; 7
					continue;
    177a:	1a c0       	rjmp	.+52     	; 0x17b0 <__vector_11+0xc6>
				}
				list += 2;
    177c:	fc 01       	movw	r30, r24
    177e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1780:	25 91       	lpm	r18, Z+
    1782:	34 91       	lpm	r19, Z
				list += 2;
    1784:	fc 01       	movw	r30, r24
    1786:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1788:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    178a:	8b 2f       	mov	r24, r27
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1790:	8f 3f       	cpi	r24, 0xFF	; 255
    1792:	91 05       	cpc	r25, r1
    1794:	19 f0       	breq	.+6      	; 0x179c <__vector_11+0xb2>
    1796:	10 f0       	brcs	.+4      	; 0x179c <__vector_11+0xb2>
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	85 17       	cp	r24, r21
    179e:	08 f4       	brcc	.+2      	; 0x17a2 <__vector_11+0xb8>
    17a0:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17a2:	a8 ee       	ldi	r26, 0xE8	; 232
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    17a6:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17a8:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    17aa:	c1 ef       	ldi	r28, 0xF1	; 241
    17ac:	d0 e0       	ldi	r29, 0x00	; 0
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <__vector_11+0xcc>
    17b0:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    17b2:	99 f6       	brne	.-90     	; 0x175a <__vector_11+0x70>
    17b4:	cb cf       	rjmp	.-106    	; 0x174c <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17b6:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    17b8:	98 2f       	mov	r25, r24
    17ba:	95 70       	andi	r25, 0x05	; 5
    17bc:	e1 f3       	breq	.-8      	; 0x17b6 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    17be:	82 fd       	sbrc	r24, 2
    17c0:	04 c1       	rjmp	.+520    	; 0x19ca <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    17c2:	45 2f       	mov	r20, r21
    17c4:	51 31       	cpi	r21, 0x11	; 17
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <__vector_11+0xe0>
    17c8:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    17ca:	44 23       	and	r20, r20
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <__vector_11+0xe6>
    17ce:	fa c0       	rjmp	.+500    	; 0x19c4 <__vector_11+0x2da>
    17d0:	f9 01       	movw	r30, r18
    17d2:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    17d4:	94 91       	lpm	r25, Z
    17d6:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    17d8:	81 50       	subi	r24, 0x01	; 1
    17da:	31 96       	adiw	r30, 0x01	; 1
    17dc:	81 11       	cpse	r24, r1
    17de:	fa cf       	rjmp	.-12     	; 0x17d4 <__vector_11+0xea>
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	84 0f       	add	r24, r20
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	28 0f       	add	r18, r24
    17ea:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    17ec:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17ee:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    17f0:	51 11       	cpse	r21, r1
    17f2:	e1 cf       	rjmp	.-62     	; 0x17b6 <__vector_11+0xcc>
    17f4:	40 31       	cpi	r20, 0x10	; 16
    17f6:	f9 f2       	breq	.-66     	; 0x17b6 <__vector_11+0xcc>
    17f8:	e8 c0       	rjmp	.+464    	; 0x19ca <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    17fa:	45 30       	cpi	r20, 0x05	; 5
    17fc:	61 f4       	brne	.+24     	; 0x1816 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17fe:	8e ef       	ldi	r24, 0xFE	; 254
    1800:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1804:	e8 ee       	ldi	r30, 0xE8	; 232
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 ff       	sbrs	r24, 0
    180c:	fd cf       	rjmp	.-6      	; 0x1808 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    180e:	20 68       	ori	r18, 0x80	; 128
    1810:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1814:	da c0       	rjmp	.+436    	; 0x19ca <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1816:	49 30       	cpi	r20, 0x09	; 9
    1818:	09 f0       	breq	.+2      	; 0x181c <__vector_11+0x132>
    181a:	36 c0       	rjmp	.+108    	; 0x1888 <__vector_11+0x19e>
    181c:	c1 11       	cpse	r28, r1
    181e:	5f c0       	rjmp	.+190    	; 0x18de <__vector_11+0x1f4>
			usb_configuration = wValue;
    1820:	20 93 5f 01 	sts	0x015F, r18
			cdc_line_rtsdtr = 0;
    1824:	10 92 5c 01 	sts	0x015C, r1
			transmit_flush_timer = 0;
    1828:	10 92 5e 01 	sts	0x015E, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    182c:	8e ef       	ldi	r24, 0xFE	; 254
    182e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1832:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1834:	84 e8       	ldi	r24, 0x84	; 132
    1836:	92 e0       	ldi	r25, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    1838:	c9 ee       	ldi	r28, 0xE9	; 233
    183a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    183c:	ab ee       	ldi	r26, 0xEB	; 235
    183e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1840:	6c ee       	ldi	r22, 0xEC	; 236
    1842:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1844:	4d ee       	ldi	r20, 0xED	; 237
    1846:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1848:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    184a:	9c 01       	movw	r18, r24
    184c:	2f 5f       	subi	r18, 0xFF	; 255
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
    1850:	fc 01       	movw	r30, r24
    1852:	04 91       	lpm	r16, Z
				UECONX = en;
    1854:	0c 93       	st	X, r16
				if (en) {
    1856:	00 23       	and	r16, r16
    1858:	61 f0       	breq	.+24     	; 0x1872 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    185a:	f9 01       	movw	r30, r18
    185c:	24 91       	lpm	r18, Z
    185e:	fb 01       	movw	r30, r22
    1860:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    1862:	9c 01       	movw	r18, r24
    1864:	2d 5f       	subi	r18, 0xFD	; 253
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	fc 01       	movw	r30, r24
    186a:	32 96       	adiw	r30, 0x02	; 2
    186c:	84 91       	lpm	r24, Z
    186e:	fa 01       	movw	r30, r20
    1870:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1872:	1f 5f       	subi	r17, 0xFF	; 255
    1874:	15 30       	cpi	r17, 0x05	; 5
    1876:	11 f0       	breq	.+4      	; 0x187c <__vector_11+0x192>
    1878:	c9 01       	movw	r24, r18
    187a:	e6 cf       	rjmp	.-52     	; 0x1848 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    187c:	ea ee       	ldi	r30, 0xEA	; 234
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8e e1       	ldi	r24, 0x1E	; 30
    1882:	80 83       	st	Z, r24
        		UERST = 0;
    1884:	10 82       	st	Z, r1
			return;
    1886:	a1 c0       	rjmp	.+322    	; 0x19ca <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1888:	48 30       	cpi	r20, 0x08	; 8
    188a:	81 f4       	brne	.+32     	; 0x18ac <__vector_11+0x1c2>
    188c:	c0 38       	cpi	r28, 0x80	; 128
    188e:	09 f0       	breq	.+2      	; 0x1892 <__vector_11+0x1a8>
    1890:	42 c0       	rjmp	.+132    	; 0x1916 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1892:	e8 ee       	ldi	r30, 0xE8	; 232
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	80 ff       	sbrs	r24, 0
    189a:	fd cf       	rjmp	.-6      	; 0x1896 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    189c:	80 91 5f 01 	lds	r24, 0x015F
    18a0:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18a4:	8e ef       	ldi	r24, 0xFE	; 254
    18a6:	80 93 e8 00 	sts	0x00E8, r24
    18aa:	8f c0       	rjmp	.+286    	; 0x19ca <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    18ac:	41 32       	cpi	r20, 0x21	; 33
    18ae:	b9 f4       	brne	.+46     	; 0x18de <__vector_11+0x1f4>
    18b0:	c1 3a       	cpi	r28, 0xA1	; 161
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <__vector_11+0x1cc>
    18b4:	40 c0       	rjmp	.+128    	; 0x1936 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18b6:	e8 ee       	ldi	r30, 0xE8	; 232
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 ff       	sbrs	r24, 0
    18be:	fd cf       	rjmp	.-6      	; 0x18ba <__vector_11+0x1d0>
    18c0:	ec e1       	ldi	r30, 0x1C	; 28
    18c2:	f1 e0       	ldi	r31, 0x01	; 1
    18c4:	83 e2       	ldi	r24, 0x23	; 35
    18c6:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    18c8:	a1 ef       	ldi	r26, 0xF1	; 241
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	21 91       	ld	r18, Z+
    18ce:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    18d0:	e8 17       	cp	r30, r24
    18d2:	f9 07       	cpc	r31, r25
    18d4:	d9 f7       	brne	.-10     	; 0x18cc <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18d6:	8e ef       	ldi	r24, 0xFE	; 254
    18d8:	80 93 e8 00 	sts	0x00E8, r24
    18dc:	76 c0       	rjmp	.+236    	; 0x19ca <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    18de:	40 32       	cpi	r20, 0x20	; 32
    18e0:	d1 f4       	brne	.+52     	; 0x1916 <__vector_11+0x22c>
    18e2:	c1 32       	cpi	r28, 0x21	; 33
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <__vector_11+0x1fe>
    18e6:	43 c0       	rjmp	.+134    	; 0x196e <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    18e8:	e8 ee       	ldi	r30, 0xE8	; 232
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	82 ff       	sbrs	r24, 2
    18f0:	fd cf       	rjmp	.-6      	; 0x18ec <__vector_11+0x202>
    18f2:	ec e1       	ldi	r30, 0x1C	; 28
    18f4:	f1 e0       	ldi	r31, 0x01	; 1
    18f6:	83 e2       	ldi	r24, 0x23	; 35
    18f8:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    18fa:	a1 ef       	ldi	r26, 0xF1	; 241
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	2c 91       	ld	r18, X
    1900:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1902:	e8 17       	cp	r30, r24
    1904:	f9 07       	cpc	r31, r25
    1906:	d9 f7       	brne	.-10     	; 0x18fe <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1908:	e8 ee       	ldi	r30, 0xE8	; 232
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8b ef       	ldi	r24, 0xFB	; 251
    190e:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1910:	8e ef       	ldi	r24, 0xFE	; 254
    1912:	80 83       	st	Z, r24
    1914:	5a c0       	rjmp	.+180    	; 0x19ca <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1916:	42 32       	cpi	r20, 0x22	; 34
    1918:	71 f4       	brne	.+28     	; 0x1936 <__vector_11+0x24c>
    191a:	c1 32       	cpi	r28, 0x21	; 33
    191c:	09 f0       	breq	.+2      	; 0x1920 <__vector_11+0x236>
    191e:	4e c0       	rjmp	.+156    	; 0x19bc <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    1920:	20 93 5c 01 	sts	0x015C, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1924:	e8 ee       	ldi	r30, 0xE8	; 232
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	80 ff       	sbrs	r24, 0
    192c:	fd cf       	rjmp	.-6      	; 0x1928 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    192e:	8e ef       	ldi	r24, 0xFE	; 254
    1930:	80 93 e8 00 	sts	0x00E8, r24
    1934:	4a c0       	rjmp	.+148    	; 0x19ca <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1936:	41 11       	cpse	r20, r1
    1938:	1a c0       	rjmp	.+52     	; 0x196e <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    193a:	e8 ee       	ldi	r30, 0xE8	; 232
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	80 ff       	sbrs	r24, 0
    1942:	fd cf       	rjmp	.-6      	; 0x193e <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1944:	c2 38       	cpi	r28, 0x82	; 130
    1946:	51 f4       	brne	.+20     	; 0x195c <__vector_11+0x272>
				UENUM = wIndex;
    1948:	e9 ee       	ldi	r30, 0xE9	; 233
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    194e:	80 91 eb 00 	lds	r24, 0x00EB
    1952:	85 fb       	bst	r24, 5
    1954:	88 27       	eor	r24, r24
    1956:	80 f9       	bld	r24, 0
				UENUM = 0;
    1958:	10 82       	st	Z, r1
    195a:	01 c0       	rjmp	.+2      	; 0x195e <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    195c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    195e:	e1 ef       	ldi	r30, 0xF1	; 241
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 83       	st	Z, r24
			UEDATX = 0;
    1964:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1966:	8e ef       	ldi	r24, 0xFE	; 254
    1968:	80 93 e8 00 	sts	0x00E8, r24
    196c:	2e c0       	rjmp	.+92     	; 0x19ca <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    196e:	84 2f       	mov	r24, r20
    1970:	8d 7f       	andi	r24, 0xFD	; 253
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	19 f5       	brne	.+70     	; 0x19bc <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    1976:	c2 30       	cpi	r28, 0x02	; 2
    1978:	09 f5       	brne	.+66     	; 0x19bc <__vector_11+0x2d2>
    197a:	23 2b       	or	r18, r19
    197c:	f9 f4       	brne	.+62     	; 0x19bc <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    197e:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	86 0f       	add	r24, r22
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	d0 f4       	brcc	.+52     	; 0x19bc <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1988:	8e ef       	ldi	r24, 0xFE	; 254
    198a:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    198e:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    1992:	43 30       	cpi	r20, 0x03	; 3
    1994:	21 f4       	brne	.+8      	; 0x199e <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1996:	81 e2       	ldi	r24, 0x21	; 33
    1998:	80 93 eb 00 	sts	0x00EB, r24
    199c:	16 c0       	rjmp	.+44     	; 0x19ca <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    199e:	89 e1       	ldi	r24, 0x19	; 25
    19a0:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <__vector_11+0x2c4>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	6a 95       	dec	r22
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <__vector_11+0x2c0>
    19b2:	ea ee       	ldi	r30, 0xEA	; 234
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 83       	st	Z, r24
					UERST = 0;
    19b8:	10 82       	st	Z, r1
    19ba:	07 c0       	rjmp	.+14     	; 0x19ca <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    19bc:	81 e2       	ldi	r24, 0x21	; 33
    19be:	80 93 eb 00 	sts	0x00EB, r24
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19c4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    19c6:	51 11       	cpse	r21, r1
    19c8:	f6 ce       	rjmp	.-532    	; 0x17b6 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	0f 90       	pop	r0
    19f0:	1f 90       	pop	r1
    19f2:	18 95       	reti

000019f4 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    19fa:	ec 01       	movw	r28, r24
    19fc:	21 96       	adiw	r28, 0x01	; 1
    19fe:	fc 01       	movw	r30, r24
    1a00:	14 91       	lpm	r17, Z
		if (!c) break;
    1a02:	11 23       	and	r17, r17
    1a04:	69 f0       	breq	.+26     	; 0x1a20 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    1a06:	1a 30       	cpi	r17, 0x0A	; 10
    1a08:	19 f4       	brne	.+6      	; 0x1a10 <print_P+0x1c>
    1a0a:	8d e0       	ldi	r24, 0x0D	; 13
    1a0c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <m_usb_tx_char>
		usb_tx_char(c);
    1a10:	81 2f       	mov	r24, r17
    1a12:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1a16:	fe 01       	movw	r30, r28
    1a18:	14 91       	lpm	r17, Z
    1a1a:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    1a1c:	11 11       	cpse	r17, r1
    1a1e:	f3 cf       	rjmp	.-26     	; 0x1a06 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	08 95       	ret

00001a28 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	27 97       	sbiw	r28, 0x07	; 7
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1a44:	8e 01       	movw	r16, r28
    1a46:	0f 5f       	subi	r16, 0xFF	; 255
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	27 e0       	ldi	r18, 0x07	; 7
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	11 92       	st	Z+, r1
    1a50:	2a 95       	dec	r18
    1a52:	e9 f7       	brne	.-6      	; 0x1a4e <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1a54:	4a e0       	ldi	r20, 0x0A	; 10
    1a56:	b8 01       	movw	r22, r16
    1a58:	0e 94 b1 11 	call	0x2362	; 0x2362 <__itoa_ncheck>
    1a5c:	7e 01       	movw	r14, r28
    1a5e:	f8 e0       	ldi	r31, 0x08	; 8
    1a60:	ef 0e       	add	r14, r31
    1a62:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1a64:	f8 01       	movw	r30, r16
    1a66:	81 91       	ld	r24, Z+
    1a68:	8f 01       	movw	r16, r30
    1a6a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1a6c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1a70:	0e 15       	cp	r16, r14
    1a72:	1f 05       	cpc	r17, r15
    1a74:	b9 f7       	brne	.-18     	; 0x1a64 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1a76:	27 96       	adiw	r28, 0x07	; 7
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	08 95       	ret

00001a90 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1a94:	ec eb       	ldi	r30, 0xBC	; 188
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 23       	and	r24, r24
    1a9c:	34 f0       	brlt	.+12     	; 0x1aaa <twi_wait+0x1a>
    1a9e:	2f 5f       	subi	r18, 0xFF	; 255
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	29 3e       	cpi	r18, 0xE9	; 233
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	38 07       	cpc	r19, r24
    1aa8:	b9 f7       	brne	.-18     	; 0x1a98 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	28 3e       	cpi	r18, 0xE8	; 232
    1aae:	33 40       	sbci	r19, 0x03	; 3
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <twi_wait+0x24>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1ab4:	08 95       	ret

00001ab6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1ab6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1aba:	84 e8       	ldi	r24, 0x84	; 132
    1abc:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1ac0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <twi_wait>
    1ac4:	88 23       	and	r24, r24
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1ac8:	80 91 b9 00 	lds	r24, 0x00B9
    1acc:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1ace:	08 95       	ret

00001ad0 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1ad0:	cf 93       	push	r28
    1ad2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1ad4:	94 ea       	ldi	r25, 0xA4	; 164
    1ad6:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1ada:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <twi_wait>
    1ade:	88 23       	and	r24, r24
    1ae0:	61 f0       	breq	.+24     	; 0x1afa <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1ae2:	8c 2f       	mov	r24, r28
    1ae4:	88 0f       	add	r24, r24
    1ae6:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1aea:	80 32       	cpi	r24, 0x20	; 32
    1aec:	29 f4       	brne	.+10     	; 0x1af8 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1aee:	84 e9       	ldi	r24, 0x94	; 148
    1af0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <start_write+0x2a>
	}	
	return 1;	// success
    1af8:	81 e0       	ldi	r24, 0x01	; 1
}	
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1afe:	0e 94 af 0a 	call	0x155e	; 0x155e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1b02:	88 e5       	ldi	r24, 0x58	; 88
    1b04:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <start_write>
    1b08:	88 23       	and	r24, r24
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <m_wii_open+0x10>
    1b0c:	cd c0       	rjmp	.+410    	; 0x1ca8 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1b0e:	80 e3       	ldi	r24, 0x30	; 48
    1b10:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b14:	88 23       	and	r24, r24
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <m_wii_open+0x1c>
    1b18:	c9 c0       	rjmp	.+402    	; 0x1cac <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b20:	88 23       	and	r24, r24
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <m_wii_open+0x28>
    1b24:	c5 c0       	rjmp	.+394    	; 0x1cb0 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1b26:	84 e9       	ldi	r24, 0x94	; 148
    1b28:	80 93 bc 00 	sts	0x00BC, r24
    1b2c:	83 ec       	ldi	r24, 0xC3	; 195
    1b2e:	99 e0       	ldi	r25, 0x09	; 9
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <m_wii_open+0x32>
    1b34:	00 c0       	rjmp	.+0      	; 0x1b36 <m_wii_open+0x38>
    1b36:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1b38:	88 e5       	ldi	r24, 0x58	; 88
    1b3a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <start_write>
    1b3e:	88 23       	and	r24, r24
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <m_wii_open+0x46>
    1b42:	b8 c0       	rjmp	.+368    	; 0x1cb4 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b4a:	88 23       	and	r24, r24
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <m_wii_open+0x52>
    1b4e:	b4 c0       	rjmp	.+360    	; 0x1cb8 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b56:	88 23       	and	r24, r24
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <m_wii_open+0x5e>
    1b5a:	b0 c0       	rjmp	.+352    	; 0x1cbc <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b62:	88 23       	and	r24, r24
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <m_wii_open+0x6a>
    1b66:	ac c0       	rjmp	.+344    	; 0x1cc0 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b6e:	88 23       	and	r24, r24
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <m_wii_open+0x76>
    1b72:	a8 c0       	rjmp	.+336    	; 0x1cc4 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <m_wii_open+0x82>
    1b7e:	a4 c0       	rjmp	.+328    	; 0x1cc8 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b86:	88 23       	and	r24, r24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <m_wii_open+0x8e>
    1b8a:	a0 c0       	rjmp	.+320    	; 0x1ccc <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b92:	88 23       	and	r24, r24
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <m_wii_open+0x9a>
    1b96:	9c c0       	rjmp	.+312    	; 0x1cd0 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1b98:	80 e9       	ldi	r24, 0x90	; 144
    1b9a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1b9e:	88 23       	and	r24, r24
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <m_wii_open+0xa6>
    1ba2:	98 c0       	rjmp	.+304    	; 0x1cd4 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ba4:	84 e9       	ldi	r24, 0x94	; 148
    1ba6:	80 93 bc 00 	sts	0x00BC, r24
    1baa:	83 ec       	ldi	r24, 0xC3	; 195
    1bac:	99 e0       	ldi	r25, 0x09	; 9
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <m_wii_open+0xb0>
    1bb2:	00 c0       	rjmp	.+0      	; 0x1bb4 <m_wii_open+0xb6>
    1bb4:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1bb6:	88 e5       	ldi	r24, 0x58	; 88
    1bb8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <start_write>
    1bbc:	88 23       	and	r24, r24
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <m_wii_open+0xc4>
    1bc0:	8b c0       	rjmp	.+278    	; 0x1cd8 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1bc2:	87 e0       	ldi	r24, 0x07	; 7
    1bc4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1bc8:	88 23       	and	r24, r24
    1bca:	09 f4       	brne	.+2      	; 0x1bce <m_wii_open+0xd0>
    1bcc:	87 c0       	rjmp	.+270    	; 0x1cdc <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1bd4:	88 23       	and	r24, r24
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <m_wii_open+0xdc>
    1bd8:	83 c0       	rjmp	.+262    	; 0x1ce0 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1bda:	81 e4       	ldi	r24, 0x41	; 65
    1bdc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1be0:	88 23       	and	r24, r24
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <m_wii_open+0xe8>
    1be4:	7f c0       	rjmp	.+254    	; 0x1ce4 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1be6:	84 e9       	ldi	r24, 0x94	; 148
    1be8:	80 93 bc 00 	sts	0x00BC, r24
    1bec:	83 ec       	ldi	r24, 0xC3	; 195
    1bee:	99 e0       	ldi	r25, 0x09	; 9
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <m_wii_open+0xf2>
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <m_wii_open+0xf8>
    1bf6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1bf8:	88 e5       	ldi	r24, 0x58	; 88
    1bfa:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <start_write>
    1bfe:	88 23       	and	r24, r24
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <m_wii_open+0x106>
    1c02:	72 c0       	rjmp	.+228    	; 0x1ce8 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    1c04:	8a e1       	ldi	r24, 0x1A	; 26
    1c06:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <m_wii_open+0x112>
    1c0e:	6e c0       	rjmp	.+220    	; 0x1cec <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1c10:	80 e4       	ldi	r24, 0x40	; 64
    1c12:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1c16:	88 23       	and	r24, r24
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <m_wii_open+0x11e>
    1c1a:	6a c0       	rjmp	.+212    	; 0x1cf0 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1c22:	88 23       	and	r24, r24
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <m_wii_open+0x12a>
    1c26:	66 c0       	rjmp	.+204    	; 0x1cf4 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c28:	84 e9       	ldi	r24, 0x94	; 148
    1c2a:	80 93 bc 00 	sts	0x00BC, r24
    1c2e:	83 ec       	ldi	r24, 0xC3	; 195
    1c30:	99 e0       	ldi	r25, 0x09	; 9
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <m_wii_open+0x134>
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <m_wii_open+0x13a>
    1c38:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1c3a:	88 e5       	ldi	r24, 0x58	; 88
    1c3c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <start_write>
    1c40:	88 23       	and	r24, r24
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <m_wii_open+0x148>
    1c44:	59 c0       	rjmp	.+178    	; 0x1cf8 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    1c46:	83 e3       	ldi	r24, 0x33	; 51
    1c48:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1c4c:	88 23       	and	r24, r24
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <m_wii_open+0x154>
    1c50:	55 c0       	rjmp	.+170    	; 0x1cfc <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1c58:	88 23       	and	r24, r24
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <m_wii_open+0x160>
    1c5c:	51 c0       	rjmp	.+162    	; 0x1d00 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c5e:	84 e9       	ldi	r24, 0x94	; 148
    1c60:	80 93 bc 00 	sts	0x00BC, r24
    1c64:	83 ec       	ldi	r24, 0xC3	; 195
    1c66:	99 e0       	ldi	r25, 0x09	; 9
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <m_wii_open+0x16a>
    1c6c:	00 c0       	rjmp	.+0      	; 0x1c6e <m_wii_open+0x170>
    1c6e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1c70:	88 e5       	ldi	r24, 0x58	; 88
    1c72:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <start_write>
    1c76:	88 23       	and	r24, r24
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <m_wii_open+0x17e>
    1c7a:	44 c0       	rjmp	.+136    	; 0x1d04 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    1c7c:	80 e3       	ldi	r24, 0x30	; 48
    1c7e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1c82:	88 23       	and	r24, r24
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <m_wii_open+0x18a>
    1c86:	40 c0       	rjmp	.+128    	; 0x1d08 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1c88:	88 e0       	ldi	r24, 0x08	; 8
    1c8a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1c8e:	88 23       	and	r24, r24
    1c90:	e9 f1       	breq	.+122    	; 0x1d0c <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c92:	84 e9       	ldi	r24, 0x94	; 148
    1c94:	80 93 bc 00 	sts	0x00BC, r24
    1c98:	83 ec       	ldi	r24, 0xC3	; 195
    1c9a:	99 e0       	ldi	r25, 0x09	; 9
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <m_wii_open+0x19e>
    1ca0:	00 c0       	rjmp	.+0      	; 0x1ca2 <m_wii_open+0x1a4>
    1ca2:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1d0e:	08 95       	ret

00001d10 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1d10:	cf 93       	push	r28
    1d12:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d14:	94 ea       	ldi	r25, 0xA4	; 164
    1d16:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1d1a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <twi_wait>
    1d1e:	88 23       	and	r24, r24
    1d20:	69 f0       	breq	.+26     	; 0x1d3c <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1d22:	8c 2f       	mov	r24, r28
    1d24:	88 0f       	add	r24, r24
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1d2c:	88 34       	cpi	r24, 0x48	; 72
    1d2e:	29 f4       	brne	.+10     	; 0x1d3a <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d30:	84 e9       	ldi	r24, 0x94	; 148
    1d32:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <start_read+0x2c>
	}	
	return 1;	// success
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
}	
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	60 97       	sbiw	r28, 0x10	; 16
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	08 2f       	mov	r16, r24
    1d5e:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1d60:	fe 01       	movw	r30, r28
    1d62:	31 96       	adiw	r30, 0x01	; 1
    1d64:	80 e1       	ldi	r24, 0x10	; 16
    1d66:	df 01       	movw	r26, r30
    1d68:	1d 92       	st	X+, r1
    1d6a:	8a 95       	dec	r24
    1d6c:	e9 f7       	brne	.-6      	; 0x1d68 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1d6e:	88 e5       	ldi	r24, 0x58	; 88
    1d70:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <start_write>
    1d74:	88 23       	and	r24, r24
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <m_wii_read+0x3a>
    1d78:	6e c0       	rjmp	.+220    	; 0x1e56 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    1d7a:	86 e3       	ldi	r24, 0x36	; 54
    1d7c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <send_byte>
    1d80:	88 23       	and	r24, r24
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <m_wii_read+0x46>
    1d84:	6a c0       	rjmp	.+212    	; 0x1e5a <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d86:	84 e9       	ldi	r24, 0x94	; 148
    1d88:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d8c:	b8 e0       	ldi	r27, 0x08	; 8
    1d8e:	ba 95       	dec	r27
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <m_wii_read+0x4e>
    1d92:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1d94:	88 e5       	ldi	r24, 0x58	; 88
    1d96:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <start_read>
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <m_wii_read+0x60>
    1d9e:	5f c0       	rjmp	.+190    	; 0x1e5e <m_wii_read+0x11e>
    1da0:	be 01       	movw	r22, r28
    1da2:	6f 5f       	subi	r22, 0xFF	; 255
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	9e 01       	movw	r18, r28
    1da8:	20 5f       	subi	r18, 0xF0	; 240
    1daa:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1dac:	ec eb       	ldi	r30, 0xBC	; 188
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1db2:	4b eb       	ldi	r20, 0xBB	; 187
    1db4:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1db6:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1db8:	80 81       	ld	r24, Z
    1dba:	88 23       	and	r24, r24
    1dbc:	ec f7       	brge	.-6      	; 0x1db8 <m_wii_read+0x78>
		temp[i] = TWDR;
    1dbe:	da 01       	movw	r26, r20
    1dc0:	8c 91       	ld	r24, X
    1dc2:	db 01       	movw	r26, r22
    1dc4:	8d 93       	st	X+, r24
    1dc6:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1dc8:	a2 17       	cp	r26, r18
    1dca:	b3 07       	cpc	r27, r19
    1dcc:	a1 f7       	brne	.-24     	; 0x1db6 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1dce:	84 e8       	ldi	r24, 0x84	; 132
    1dd0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1dd4:	ec eb       	ldi	r30, 0xBC	; 188
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 23       	and	r24, r24
    1ddc:	ec f7       	brge	.-6      	; 0x1dd8 <m_wii_read+0x98>
	temp[15] = TWDR;
    1dde:	80 91 bb 00 	lds	r24, 0x00BB
    1de2:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1de4:	84 e9       	ldi	r24, 0x94	; 148
    1de6:	80 93 bc 00 	sts	0x00BC, r24
    1dea:	fe 01       	movw	r30, r28
    1dec:	34 96       	adiw	r30, 0x04	; 4
    1dee:	e0 2e       	mov	r14, r16
    1df0:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1df2:	80 81       	ld	r24, Z
    1df4:	98 2f       	mov	r25, r24
    1df6:	90 73       	andi	r25, 0x30	; 48
    1df8:	af 01       	movw	r20, r30
    1dfa:	42 50       	subi	r20, 0x02	; 2
    1dfc:	51 09       	sbc	r21, r1
    1dfe:	da 01       	movw	r26, r20
    1e00:	4c 91       	ld	r20, X
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	b0 e1       	ldi	r27, 0x10	; 16
    1e06:	9b 9f       	mul	r25, r27
    1e08:	40 0d       	add	r20, r0
    1e0a:	51 1d       	adc	r21, r1
    1e0c:	11 24       	eor	r1, r1
    1e0e:	d7 01       	movw	r26, r14
    1e10:	4d 93       	st	X+, r20
    1e12:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1e14:	48 2f       	mov	r20, r24
    1e16:	40 7c       	andi	r20, 0xC0	; 192
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	44 0f       	add	r20, r20
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	44 0f       	add	r20, r20
    1e20:	55 1f       	adc	r21, r21
    1e22:	bf 01       	movw	r22, r30
    1e24:	61 50       	subi	r22, 0x01	; 1
    1e26:	71 09       	sbc	r23, r1
    1e28:	db 01       	movw	r26, r22
    1e2a:	9c 91       	ld	r25, X
    1e2c:	49 0f       	add	r20, r25
    1e2e:	51 1d       	adc	r21, r1
    1e30:	d7 01       	movw	r26, r14
    1e32:	13 96       	adiw	r26, 0x03	; 3
    1e34:	5c 93       	st	X, r21
    1e36:	4e 93       	st	-X, r20
    1e38:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1e3a:	8f 70       	andi	r24, 0x0F	; 15
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	15 96       	adiw	r26, 0x05	; 5
    1e40:	9c 93       	st	X, r25
    1e42:	8e 93       	st	-X, r24
    1e44:	14 97       	sbiw	r26, 0x04	; 4
    1e46:	33 96       	adiw	r30, 0x03	; 3
    1e48:	b6 e0       	ldi	r27, 0x06	; 6
    1e4a:	eb 0e       	add	r14, r27
    1e4c:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1e4e:	2e 17       	cp	r18, r30
    1e50:	3f 07       	cpc	r19, r31
    1e52:	79 f6       	brne	.-98     	; 0x1df2 <m_wii_read+0xb2>
    1e54:	06 c0       	rjmp	.+12     	; 0x1e62 <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	05 c0       	rjmp	.+10     	; 0x1e64 <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
}
    1e64:	60 96       	adiw	r28, 0x10	; 16
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	08 95       	ret

00001e7e <__subsf3>:
    1e7e:	50 58       	subi	r21, 0x80	; 128

00001e80 <__addsf3>:
    1e80:	bb 27       	eor	r27, r27
    1e82:	aa 27       	eor	r26, r26
    1e84:	0e d0       	rcall	.+28     	; 0x1ea2 <__addsf3x>
    1e86:	75 c1       	rjmp	.+746    	; 0x2172 <__fp_round>
    1e88:	66 d1       	rcall	.+716    	; 0x2156 <__fp_pscA>
    1e8a:	30 f0       	brcs	.+12     	; 0x1e98 <__addsf3+0x18>
    1e8c:	6b d1       	rcall	.+726    	; 0x2164 <__fp_pscB>
    1e8e:	20 f0       	brcs	.+8      	; 0x1e98 <__addsf3+0x18>
    1e90:	31 f4       	brne	.+12     	; 0x1e9e <__addsf3+0x1e>
    1e92:	9f 3f       	cpi	r25, 0xFF	; 255
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <__addsf3+0x1a>
    1e96:	1e f4       	brtc	.+6      	; 0x1e9e <__addsf3+0x1e>
    1e98:	5b c1       	rjmp	.+694    	; 0x2150 <__fp_nan>
    1e9a:	0e f4       	brtc	.+2      	; 0x1e9e <__addsf3+0x1e>
    1e9c:	e0 95       	com	r30
    1e9e:	e7 fb       	bst	r30, 7
    1ea0:	51 c1       	rjmp	.+674    	; 0x2144 <__fp_inf>

00001ea2 <__addsf3x>:
    1ea2:	e9 2f       	mov	r30, r25
    1ea4:	77 d1       	rcall	.+750    	; 0x2194 <__fp_split3>
    1ea6:	80 f3       	brcs	.-32     	; 0x1e88 <__addsf3+0x8>
    1ea8:	ba 17       	cp	r27, r26
    1eaa:	62 07       	cpc	r22, r18
    1eac:	73 07       	cpc	r23, r19
    1eae:	84 07       	cpc	r24, r20
    1eb0:	95 07       	cpc	r25, r21
    1eb2:	18 f0       	brcs	.+6      	; 0x1eba <__addsf3x+0x18>
    1eb4:	71 f4       	brne	.+28     	; 0x1ed2 <__addsf3x+0x30>
    1eb6:	9e f5       	brtc	.+102    	; 0x1f1e <__addsf3x+0x7c>
    1eb8:	8f c1       	rjmp	.+798    	; 0x21d8 <__fp_zero>
    1eba:	0e f4       	brtc	.+2      	; 0x1ebe <__addsf3x+0x1c>
    1ebc:	e0 95       	com	r30
    1ebe:	0b 2e       	mov	r0, r27
    1ec0:	ba 2f       	mov	r27, r26
    1ec2:	a0 2d       	mov	r26, r0
    1ec4:	0b 01       	movw	r0, r22
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	90 01       	movw	r18, r0
    1eca:	0c 01       	movw	r0, r24
    1ecc:	ca 01       	movw	r24, r20
    1ece:	a0 01       	movw	r20, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	ff 27       	eor	r31, r31
    1ed4:	59 1b       	sub	r21, r25
    1ed6:	99 f0       	breq	.+38     	; 0x1efe <__addsf3x+0x5c>
    1ed8:	59 3f       	cpi	r21, 0xF9	; 249
    1eda:	50 f4       	brcc	.+20     	; 0x1ef0 <__addsf3x+0x4e>
    1edc:	50 3e       	cpi	r21, 0xE0	; 224
    1ede:	68 f1       	brcs	.+90     	; 0x1f3a <__addsf3x+0x98>
    1ee0:	1a 16       	cp	r1, r26
    1ee2:	f0 40       	sbci	r31, 0x00	; 0
    1ee4:	a2 2f       	mov	r26, r18
    1ee6:	23 2f       	mov	r18, r19
    1ee8:	34 2f       	mov	r19, r20
    1eea:	44 27       	eor	r20, r20
    1eec:	58 5f       	subi	r21, 0xF8	; 248
    1eee:	f3 cf       	rjmp	.-26     	; 0x1ed6 <__addsf3x+0x34>
    1ef0:	46 95       	lsr	r20
    1ef2:	37 95       	ror	r19
    1ef4:	27 95       	ror	r18
    1ef6:	a7 95       	ror	r26
    1ef8:	f0 40       	sbci	r31, 0x00	; 0
    1efa:	53 95       	inc	r21
    1efc:	c9 f7       	brne	.-14     	; 0x1ef0 <__addsf3x+0x4e>
    1efe:	7e f4       	brtc	.+30     	; 0x1f1e <__addsf3x+0x7c>
    1f00:	1f 16       	cp	r1, r31
    1f02:	ba 0b       	sbc	r27, r26
    1f04:	62 0b       	sbc	r22, r18
    1f06:	73 0b       	sbc	r23, r19
    1f08:	84 0b       	sbc	r24, r20
    1f0a:	ba f0       	brmi	.+46     	; 0x1f3a <__addsf3x+0x98>
    1f0c:	91 50       	subi	r25, 0x01	; 1
    1f0e:	a1 f0       	breq	.+40     	; 0x1f38 <__addsf3x+0x96>
    1f10:	ff 0f       	add	r31, r31
    1f12:	bb 1f       	adc	r27, r27
    1f14:	66 1f       	adc	r22, r22
    1f16:	77 1f       	adc	r23, r23
    1f18:	88 1f       	adc	r24, r24
    1f1a:	c2 f7       	brpl	.-16     	; 0x1f0c <__addsf3x+0x6a>
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <__addsf3x+0x98>
    1f1e:	ba 0f       	add	r27, r26
    1f20:	62 1f       	adc	r22, r18
    1f22:	73 1f       	adc	r23, r19
    1f24:	84 1f       	adc	r24, r20
    1f26:	48 f4       	brcc	.+18     	; 0x1f3a <__addsf3x+0x98>
    1f28:	87 95       	ror	r24
    1f2a:	77 95       	ror	r23
    1f2c:	67 95       	ror	r22
    1f2e:	b7 95       	ror	r27
    1f30:	f7 95       	ror	r31
    1f32:	9e 3f       	cpi	r25, 0xFE	; 254
    1f34:	08 f0       	brcs	.+2      	; 0x1f38 <__addsf3x+0x96>
    1f36:	b3 cf       	rjmp	.-154    	; 0x1e9e <__addsf3+0x1e>
    1f38:	93 95       	inc	r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	08 f0       	brcs	.+2      	; 0x1f40 <__addsf3x+0x9e>
    1f3e:	99 27       	eor	r25, r25
    1f40:	ee 0f       	add	r30, r30
    1f42:	97 95       	ror	r25
    1f44:	87 95       	ror	r24
    1f46:	08 95       	ret

00001f48 <__cmpsf2>:
    1f48:	d9 d0       	rcall	.+434    	; 0x20fc <__fp_cmp>
    1f4a:	08 f4       	brcc	.+2      	; 0x1f4e <__cmpsf2+0x6>
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	08 95       	ret

00001f50 <__divsf3>:
    1f50:	0c d0       	rcall	.+24     	; 0x1f6a <__divsf3x>
    1f52:	0f c1       	rjmp	.+542    	; 0x2172 <__fp_round>
    1f54:	07 d1       	rcall	.+526    	; 0x2164 <__fp_pscB>
    1f56:	40 f0       	brcs	.+16     	; 0x1f68 <__divsf3+0x18>
    1f58:	fe d0       	rcall	.+508    	; 0x2156 <__fp_pscA>
    1f5a:	30 f0       	brcs	.+12     	; 0x1f68 <__divsf3+0x18>
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <__divsf3+0x16>
    1f5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f60:	19 f0       	breq	.+6      	; 0x1f68 <__divsf3+0x18>
    1f62:	f0 c0       	rjmp	.+480    	; 0x2144 <__fp_inf>
    1f64:	51 11       	cpse	r21, r1
    1f66:	39 c1       	rjmp	.+626    	; 0x21da <__fp_szero>
    1f68:	f3 c0       	rjmp	.+486    	; 0x2150 <__fp_nan>

00001f6a <__divsf3x>:
    1f6a:	14 d1       	rcall	.+552    	; 0x2194 <__fp_split3>
    1f6c:	98 f3       	brcs	.-26     	; 0x1f54 <__divsf3+0x4>

00001f6e <__divsf3_pse>:
    1f6e:	99 23       	and	r25, r25
    1f70:	c9 f3       	breq	.-14     	; 0x1f64 <__divsf3+0x14>
    1f72:	55 23       	and	r21, r21
    1f74:	b1 f3       	breq	.-20     	; 0x1f62 <__divsf3+0x12>
    1f76:	95 1b       	sub	r25, r21
    1f78:	55 0b       	sbc	r21, r21
    1f7a:	bb 27       	eor	r27, r27
    1f7c:	aa 27       	eor	r26, r26
    1f7e:	62 17       	cp	r22, r18
    1f80:	73 07       	cpc	r23, r19
    1f82:	84 07       	cpc	r24, r20
    1f84:	38 f0       	brcs	.+14     	; 0x1f94 <__divsf3_pse+0x26>
    1f86:	9f 5f       	subi	r25, 0xFF	; 255
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8a:	22 0f       	add	r18, r18
    1f8c:	33 1f       	adc	r19, r19
    1f8e:	44 1f       	adc	r20, r20
    1f90:	aa 1f       	adc	r26, r26
    1f92:	a9 f3       	breq	.-22     	; 0x1f7e <__divsf3_pse+0x10>
    1f94:	33 d0       	rcall	.+102    	; 0x1ffc <__divsf3_pse+0x8e>
    1f96:	0e 2e       	mov	r0, r30
    1f98:	3a f0       	brmi	.+14     	; 0x1fa8 <__divsf3_pse+0x3a>
    1f9a:	e0 e8       	ldi	r30, 0x80	; 128
    1f9c:	30 d0       	rcall	.+96     	; 0x1ffe <__divsf3_pse+0x90>
    1f9e:	91 50       	subi	r25, 0x01	; 1
    1fa0:	50 40       	sbci	r21, 0x00	; 0
    1fa2:	e6 95       	lsr	r30
    1fa4:	00 1c       	adc	r0, r0
    1fa6:	ca f7       	brpl	.-14     	; 0x1f9a <__divsf3_pse+0x2c>
    1fa8:	29 d0       	rcall	.+82     	; 0x1ffc <__divsf3_pse+0x8e>
    1faa:	fe 2f       	mov	r31, r30
    1fac:	27 d0       	rcall	.+78     	; 0x1ffc <__divsf3_pse+0x8e>
    1fae:	66 0f       	add	r22, r22
    1fb0:	77 1f       	adc	r23, r23
    1fb2:	88 1f       	adc	r24, r24
    1fb4:	bb 1f       	adc	r27, r27
    1fb6:	26 17       	cp	r18, r22
    1fb8:	37 07       	cpc	r19, r23
    1fba:	48 07       	cpc	r20, r24
    1fbc:	ab 07       	cpc	r26, r27
    1fbe:	b0 e8       	ldi	r27, 0x80	; 128
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <__divsf3_pse+0x56>
    1fc2:	bb 0b       	sbc	r27, r27
    1fc4:	80 2d       	mov	r24, r0
    1fc6:	bf 01       	movw	r22, r30
    1fc8:	ff 27       	eor	r31, r31
    1fca:	93 58       	subi	r25, 0x83	; 131
    1fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fce:	2a f0       	brmi	.+10     	; 0x1fda <__divsf3_pse+0x6c>
    1fd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1fd2:	51 05       	cpc	r21, r1
    1fd4:	68 f0       	brcs	.+26     	; 0x1ff0 <__divsf3_pse+0x82>
    1fd6:	b6 c0       	rjmp	.+364    	; 0x2144 <__fp_inf>
    1fd8:	00 c1       	rjmp	.+512    	; 0x21da <__fp_szero>
    1fda:	5f 3f       	cpi	r21, 0xFF	; 255
    1fdc:	ec f3       	brlt	.-6      	; 0x1fd8 <__divsf3_pse+0x6a>
    1fde:	98 3e       	cpi	r25, 0xE8	; 232
    1fe0:	dc f3       	brlt	.-10     	; 0x1fd8 <__divsf3_pse+0x6a>
    1fe2:	86 95       	lsr	r24
    1fe4:	77 95       	ror	r23
    1fe6:	67 95       	ror	r22
    1fe8:	b7 95       	ror	r27
    1fea:	f7 95       	ror	r31
    1fec:	9f 5f       	subi	r25, 0xFF	; 255
    1fee:	c9 f7       	brne	.-14     	; 0x1fe2 <__divsf3_pse+0x74>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	96 95       	lsr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	97 f9       	bld	r25, 7
    1ffa:	08 95       	ret
    1ffc:	e1 e0       	ldi	r30, 0x01	; 1
    1ffe:	66 0f       	add	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	bb 1f       	adc	r27, r27
    2006:	62 17       	cp	r22, r18
    2008:	73 07       	cpc	r23, r19
    200a:	84 07       	cpc	r24, r20
    200c:	ba 07       	cpc	r27, r26
    200e:	20 f0       	brcs	.+8      	; 0x2018 <__divsf3_pse+0xaa>
    2010:	62 1b       	sub	r22, r18
    2012:	73 0b       	sbc	r23, r19
    2014:	84 0b       	sbc	r24, r20
    2016:	ba 0b       	sbc	r27, r26
    2018:	ee 1f       	adc	r30, r30
    201a:	88 f7       	brcc	.-30     	; 0x1ffe <__divsf3_pse+0x90>
    201c:	e0 95       	com	r30
    201e:	08 95       	ret

00002020 <__fixsfsi>:
    2020:	04 d0       	rcall	.+8      	; 0x202a <__fixunssfsi>
    2022:	68 94       	set
    2024:	b1 11       	cpse	r27, r1
    2026:	d9 c0       	rjmp	.+434    	; 0x21da <__fp_szero>
    2028:	08 95       	ret

0000202a <__fixunssfsi>:
    202a:	bc d0       	rcall	.+376    	; 0x21a4 <__fp_splitA>
    202c:	88 f0       	brcs	.+34     	; 0x2050 <__fixunssfsi+0x26>
    202e:	9f 57       	subi	r25, 0x7F	; 127
    2030:	90 f0       	brcs	.+36     	; 0x2056 <__fixunssfsi+0x2c>
    2032:	b9 2f       	mov	r27, r25
    2034:	99 27       	eor	r25, r25
    2036:	b7 51       	subi	r27, 0x17	; 23
    2038:	a0 f0       	brcs	.+40     	; 0x2062 <__fixunssfsi+0x38>
    203a:	d1 f0       	breq	.+52     	; 0x2070 <__fixunssfsi+0x46>
    203c:	66 0f       	add	r22, r22
    203e:	77 1f       	adc	r23, r23
    2040:	88 1f       	adc	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	1a f0       	brmi	.+6      	; 0x204c <__fixunssfsi+0x22>
    2046:	ba 95       	dec	r27
    2048:	c9 f7       	brne	.-14     	; 0x203c <__fixunssfsi+0x12>
    204a:	12 c0       	rjmp	.+36     	; 0x2070 <__fixunssfsi+0x46>
    204c:	b1 30       	cpi	r27, 0x01	; 1
    204e:	81 f0       	breq	.+32     	; 0x2070 <__fixunssfsi+0x46>
    2050:	c3 d0       	rcall	.+390    	; 0x21d8 <__fp_zero>
    2052:	b1 e0       	ldi	r27, 0x01	; 1
    2054:	08 95       	ret
    2056:	c0 c0       	rjmp	.+384    	; 0x21d8 <__fp_zero>
    2058:	67 2f       	mov	r22, r23
    205a:	78 2f       	mov	r23, r24
    205c:	88 27       	eor	r24, r24
    205e:	b8 5f       	subi	r27, 0xF8	; 248
    2060:	39 f0       	breq	.+14     	; 0x2070 <__fixunssfsi+0x46>
    2062:	b9 3f       	cpi	r27, 0xF9	; 249
    2064:	cc f3       	brlt	.-14     	; 0x2058 <__fixunssfsi+0x2e>
    2066:	86 95       	lsr	r24
    2068:	77 95       	ror	r23
    206a:	67 95       	ror	r22
    206c:	b3 95       	inc	r27
    206e:	d9 f7       	brne	.-10     	; 0x2066 <__fixunssfsi+0x3c>
    2070:	3e f4       	brtc	.+14     	; 0x2080 <__fixunssfsi+0x56>
    2072:	90 95       	com	r25
    2074:	80 95       	com	r24
    2076:	70 95       	com	r23
    2078:	61 95       	neg	r22
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	8f 4f       	sbci	r24, 0xFF	; 255
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	08 95       	ret

00002082 <__floatunsisf>:
    2082:	e8 94       	clt
    2084:	09 c0       	rjmp	.+18     	; 0x2098 <__floatsisf+0x12>

00002086 <__floatsisf>:
    2086:	97 fb       	bst	r25, 7
    2088:	3e f4       	brtc	.+14     	; 0x2098 <__floatsisf+0x12>
    208a:	90 95       	com	r25
    208c:	80 95       	com	r24
    208e:	70 95       	com	r23
    2090:	61 95       	neg	r22
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	8f 4f       	sbci	r24, 0xFF	; 255
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	99 23       	and	r25, r25
    209a:	a9 f0       	breq	.+42     	; 0x20c6 <__floatsisf+0x40>
    209c:	f9 2f       	mov	r31, r25
    209e:	96 e9       	ldi	r25, 0x96	; 150
    20a0:	bb 27       	eor	r27, r27
    20a2:	93 95       	inc	r25
    20a4:	f6 95       	lsr	r31
    20a6:	87 95       	ror	r24
    20a8:	77 95       	ror	r23
    20aa:	67 95       	ror	r22
    20ac:	b7 95       	ror	r27
    20ae:	f1 11       	cpse	r31, r1
    20b0:	f8 cf       	rjmp	.-16     	; 0x20a2 <__floatsisf+0x1c>
    20b2:	fa f4       	brpl	.+62     	; 0x20f2 <__floatsisf+0x6c>
    20b4:	bb 0f       	add	r27, r27
    20b6:	11 f4       	brne	.+4      	; 0x20bc <__floatsisf+0x36>
    20b8:	60 ff       	sbrs	r22, 0
    20ba:	1b c0       	rjmp	.+54     	; 0x20f2 <__floatsisf+0x6c>
    20bc:	6f 5f       	subi	r22, 0xFF	; 255
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
    20c0:	8f 4f       	sbci	r24, 0xFF	; 255
    20c2:	9f 4f       	sbci	r25, 0xFF	; 255
    20c4:	16 c0       	rjmp	.+44     	; 0x20f2 <__floatsisf+0x6c>
    20c6:	88 23       	and	r24, r24
    20c8:	11 f0       	breq	.+4      	; 0x20ce <__floatsisf+0x48>
    20ca:	96 e9       	ldi	r25, 0x96	; 150
    20cc:	11 c0       	rjmp	.+34     	; 0x20f0 <__floatsisf+0x6a>
    20ce:	77 23       	and	r23, r23
    20d0:	21 f0       	breq	.+8      	; 0x20da <__floatsisf+0x54>
    20d2:	9e e8       	ldi	r25, 0x8E	; 142
    20d4:	87 2f       	mov	r24, r23
    20d6:	76 2f       	mov	r23, r22
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <__floatsisf+0x5e>
    20da:	66 23       	and	r22, r22
    20dc:	71 f0       	breq	.+28     	; 0x20fa <__floatsisf+0x74>
    20de:	96 e8       	ldi	r25, 0x86	; 134
    20e0:	86 2f       	mov	r24, r22
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	2a f0       	brmi	.+10     	; 0x20f2 <__floatsisf+0x6c>
    20e8:	9a 95       	dec	r25
    20ea:	66 0f       	add	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	88 1f       	adc	r24, r24
    20f0:	da f7       	brpl	.-10     	; 0x20e8 <__floatsisf+0x62>
    20f2:	88 0f       	add	r24, r24
    20f4:	96 95       	lsr	r25
    20f6:	87 95       	ror	r24
    20f8:	97 f9       	bld	r25, 7
    20fa:	08 95       	ret

000020fc <__fp_cmp>:
    20fc:	99 0f       	add	r25, r25
    20fe:	00 08       	sbc	r0, r0
    2100:	55 0f       	add	r21, r21
    2102:	aa 0b       	sbc	r26, r26
    2104:	e0 e8       	ldi	r30, 0x80	; 128
    2106:	fe ef       	ldi	r31, 0xFE	; 254
    2108:	16 16       	cp	r1, r22
    210a:	17 06       	cpc	r1, r23
    210c:	e8 07       	cpc	r30, r24
    210e:	f9 07       	cpc	r31, r25
    2110:	c0 f0       	brcs	.+48     	; 0x2142 <__fp_cmp+0x46>
    2112:	12 16       	cp	r1, r18
    2114:	13 06       	cpc	r1, r19
    2116:	e4 07       	cpc	r30, r20
    2118:	f5 07       	cpc	r31, r21
    211a:	98 f0       	brcs	.+38     	; 0x2142 <__fp_cmp+0x46>
    211c:	62 1b       	sub	r22, r18
    211e:	73 0b       	sbc	r23, r19
    2120:	84 0b       	sbc	r24, r20
    2122:	95 0b       	sbc	r25, r21
    2124:	39 f4       	brne	.+14     	; 0x2134 <__fp_cmp+0x38>
    2126:	0a 26       	eor	r0, r26
    2128:	61 f0       	breq	.+24     	; 0x2142 <__fp_cmp+0x46>
    212a:	23 2b       	or	r18, r19
    212c:	24 2b       	or	r18, r20
    212e:	25 2b       	or	r18, r21
    2130:	21 f4       	brne	.+8      	; 0x213a <__fp_cmp+0x3e>
    2132:	08 95       	ret
    2134:	0a 26       	eor	r0, r26
    2136:	09 f4       	brne	.+2      	; 0x213a <__fp_cmp+0x3e>
    2138:	a1 40       	sbci	r26, 0x01	; 1
    213a:	a6 95       	lsr	r26
    213c:	8f ef       	ldi	r24, 0xFF	; 255
    213e:	81 1d       	adc	r24, r1
    2140:	81 1d       	adc	r24, r1
    2142:	08 95       	ret

00002144 <__fp_inf>:
    2144:	97 f9       	bld	r25, 7
    2146:	9f 67       	ori	r25, 0x7F	; 127
    2148:	80 e8       	ldi	r24, 0x80	; 128
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	08 95       	ret

00002150 <__fp_nan>:
    2150:	9f ef       	ldi	r25, 0xFF	; 255
    2152:	80 ec       	ldi	r24, 0xC0	; 192
    2154:	08 95       	ret

00002156 <__fp_pscA>:
    2156:	00 24       	eor	r0, r0
    2158:	0a 94       	dec	r0
    215a:	16 16       	cp	r1, r22
    215c:	17 06       	cpc	r1, r23
    215e:	18 06       	cpc	r1, r24
    2160:	09 06       	cpc	r0, r25
    2162:	08 95       	ret

00002164 <__fp_pscB>:
    2164:	00 24       	eor	r0, r0
    2166:	0a 94       	dec	r0
    2168:	12 16       	cp	r1, r18
    216a:	13 06       	cpc	r1, r19
    216c:	14 06       	cpc	r1, r20
    216e:	05 06       	cpc	r0, r21
    2170:	08 95       	ret

00002172 <__fp_round>:
    2172:	09 2e       	mov	r0, r25
    2174:	03 94       	inc	r0
    2176:	00 0c       	add	r0, r0
    2178:	11 f4       	brne	.+4      	; 0x217e <__fp_round+0xc>
    217a:	88 23       	and	r24, r24
    217c:	52 f0       	brmi	.+20     	; 0x2192 <__fp_round+0x20>
    217e:	bb 0f       	add	r27, r27
    2180:	40 f4       	brcc	.+16     	; 0x2192 <__fp_round+0x20>
    2182:	bf 2b       	or	r27, r31
    2184:	11 f4       	brne	.+4      	; 0x218a <__fp_round+0x18>
    2186:	60 ff       	sbrs	r22, 0
    2188:	04 c0       	rjmp	.+8      	; 0x2192 <__fp_round+0x20>
    218a:	6f 5f       	subi	r22, 0xFF	; 255
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	8f 4f       	sbci	r24, 0xFF	; 255
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	08 95       	ret

00002194 <__fp_split3>:
    2194:	57 fd       	sbrc	r21, 7
    2196:	90 58       	subi	r25, 0x80	; 128
    2198:	44 0f       	add	r20, r20
    219a:	55 1f       	adc	r21, r21
    219c:	59 f0       	breq	.+22     	; 0x21b4 <__fp_splitA+0x10>
    219e:	5f 3f       	cpi	r21, 0xFF	; 255
    21a0:	71 f0       	breq	.+28     	; 0x21be <__fp_splitA+0x1a>
    21a2:	47 95       	ror	r20

000021a4 <__fp_splitA>:
    21a4:	88 0f       	add	r24, r24
    21a6:	97 fb       	bst	r25, 7
    21a8:	99 1f       	adc	r25, r25
    21aa:	61 f0       	breq	.+24     	; 0x21c4 <__fp_splitA+0x20>
    21ac:	9f 3f       	cpi	r25, 0xFF	; 255
    21ae:	79 f0       	breq	.+30     	; 0x21ce <__fp_splitA+0x2a>
    21b0:	87 95       	ror	r24
    21b2:	08 95       	ret
    21b4:	12 16       	cp	r1, r18
    21b6:	13 06       	cpc	r1, r19
    21b8:	14 06       	cpc	r1, r20
    21ba:	55 1f       	adc	r21, r21
    21bc:	f2 cf       	rjmp	.-28     	; 0x21a2 <__fp_split3+0xe>
    21be:	46 95       	lsr	r20
    21c0:	f1 df       	rcall	.-30     	; 0x21a4 <__fp_splitA>
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <__fp_splitA+0x30>
    21c4:	16 16       	cp	r1, r22
    21c6:	17 06       	cpc	r1, r23
    21c8:	18 06       	cpc	r1, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	f1 cf       	rjmp	.-30     	; 0x21b0 <__fp_splitA+0xc>
    21ce:	86 95       	lsr	r24
    21d0:	71 05       	cpc	r23, r1
    21d2:	61 05       	cpc	r22, r1
    21d4:	08 94       	sec
    21d6:	08 95       	ret

000021d8 <__fp_zero>:
    21d8:	e8 94       	clt

000021da <__fp_szero>:
    21da:	bb 27       	eor	r27, r27
    21dc:	66 27       	eor	r22, r22
    21de:	77 27       	eor	r23, r23
    21e0:	cb 01       	movw	r24, r22
    21e2:	97 f9       	bld	r25, 7
    21e4:	08 95       	ret

000021e6 <__gesf2>:
    21e6:	8a df       	rcall	.-236    	; 0x20fc <__fp_cmp>
    21e8:	08 f4       	brcc	.+2      	; 0x21ec <__gesf2+0x6>
    21ea:	8f ef       	ldi	r24, 0xFF	; 255
    21ec:	08 95       	ret

000021ee <__mulsf3>:
    21ee:	0b d0       	rcall	.+22     	; 0x2206 <__mulsf3x>
    21f0:	c0 cf       	rjmp	.-128    	; 0x2172 <__fp_round>
    21f2:	b1 df       	rcall	.-158    	; 0x2156 <__fp_pscA>
    21f4:	28 f0       	brcs	.+10     	; 0x2200 <__mulsf3+0x12>
    21f6:	b6 df       	rcall	.-148    	; 0x2164 <__fp_pscB>
    21f8:	18 f0       	brcs	.+6      	; 0x2200 <__mulsf3+0x12>
    21fa:	95 23       	and	r25, r21
    21fc:	09 f0       	breq	.+2      	; 0x2200 <__mulsf3+0x12>
    21fe:	a2 cf       	rjmp	.-188    	; 0x2144 <__fp_inf>
    2200:	a7 cf       	rjmp	.-178    	; 0x2150 <__fp_nan>
    2202:	11 24       	eor	r1, r1
    2204:	ea cf       	rjmp	.-44     	; 0x21da <__fp_szero>

00002206 <__mulsf3x>:
    2206:	c6 df       	rcall	.-116    	; 0x2194 <__fp_split3>
    2208:	a0 f3       	brcs	.-24     	; 0x21f2 <__mulsf3+0x4>

0000220a <__mulsf3_pse>:
    220a:	95 9f       	mul	r25, r21
    220c:	d1 f3       	breq	.-12     	; 0x2202 <__mulsf3+0x14>
    220e:	95 0f       	add	r25, r21
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	55 1f       	adc	r21, r21
    2214:	62 9f       	mul	r22, r18
    2216:	f0 01       	movw	r30, r0
    2218:	72 9f       	mul	r23, r18
    221a:	bb 27       	eor	r27, r27
    221c:	f0 0d       	add	r31, r0
    221e:	b1 1d       	adc	r27, r1
    2220:	63 9f       	mul	r22, r19
    2222:	aa 27       	eor	r26, r26
    2224:	f0 0d       	add	r31, r0
    2226:	b1 1d       	adc	r27, r1
    2228:	aa 1f       	adc	r26, r26
    222a:	64 9f       	mul	r22, r20
    222c:	66 27       	eor	r22, r22
    222e:	b0 0d       	add	r27, r0
    2230:	a1 1d       	adc	r26, r1
    2232:	66 1f       	adc	r22, r22
    2234:	82 9f       	mul	r24, r18
    2236:	22 27       	eor	r18, r18
    2238:	b0 0d       	add	r27, r0
    223a:	a1 1d       	adc	r26, r1
    223c:	62 1f       	adc	r22, r18
    223e:	73 9f       	mul	r23, r19
    2240:	b0 0d       	add	r27, r0
    2242:	a1 1d       	adc	r26, r1
    2244:	62 1f       	adc	r22, r18
    2246:	83 9f       	mul	r24, r19
    2248:	a0 0d       	add	r26, r0
    224a:	61 1d       	adc	r22, r1
    224c:	22 1f       	adc	r18, r18
    224e:	74 9f       	mul	r23, r20
    2250:	33 27       	eor	r19, r19
    2252:	a0 0d       	add	r26, r0
    2254:	61 1d       	adc	r22, r1
    2256:	23 1f       	adc	r18, r19
    2258:	84 9f       	mul	r24, r20
    225a:	60 0d       	add	r22, r0
    225c:	21 1d       	adc	r18, r1
    225e:	82 2f       	mov	r24, r18
    2260:	76 2f       	mov	r23, r22
    2262:	6a 2f       	mov	r22, r26
    2264:	11 24       	eor	r1, r1
    2266:	9f 57       	subi	r25, 0x7F	; 127
    2268:	50 40       	sbci	r21, 0x00	; 0
    226a:	8a f0       	brmi	.+34     	; 0x228e <__mulsf3_pse+0x84>
    226c:	e1 f0       	breq	.+56     	; 0x22a6 <__mulsf3_pse+0x9c>
    226e:	88 23       	and	r24, r24
    2270:	4a f0       	brmi	.+18     	; 0x2284 <__mulsf3_pse+0x7a>
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	bb 1f       	adc	r27, r27
    2278:	66 1f       	adc	r22, r22
    227a:	77 1f       	adc	r23, r23
    227c:	88 1f       	adc	r24, r24
    227e:	91 50       	subi	r25, 0x01	; 1
    2280:	50 40       	sbci	r21, 0x00	; 0
    2282:	a9 f7       	brne	.-22     	; 0x226e <__mulsf3_pse+0x64>
    2284:	9e 3f       	cpi	r25, 0xFE	; 254
    2286:	51 05       	cpc	r21, r1
    2288:	70 f0       	brcs	.+28     	; 0x22a6 <__mulsf3_pse+0x9c>
    228a:	5c cf       	rjmp	.-328    	; 0x2144 <__fp_inf>
    228c:	a6 cf       	rjmp	.-180    	; 0x21da <__fp_szero>
    228e:	5f 3f       	cpi	r21, 0xFF	; 255
    2290:	ec f3       	brlt	.-6      	; 0x228c <__mulsf3_pse+0x82>
    2292:	98 3e       	cpi	r25, 0xE8	; 232
    2294:	dc f3       	brlt	.-10     	; 0x228c <__mulsf3_pse+0x82>
    2296:	86 95       	lsr	r24
    2298:	77 95       	ror	r23
    229a:	67 95       	ror	r22
    229c:	b7 95       	ror	r27
    229e:	f7 95       	ror	r31
    22a0:	e7 95       	ror	r30
    22a2:	9f 5f       	subi	r25, 0xFF	; 255
    22a4:	c1 f7       	brne	.-16     	; 0x2296 <__mulsf3_pse+0x8c>
    22a6:	fe 2b       	or	r31, r30
    22a8:	88 0f       	add	r24, r24
    22aa:	91 1d       	adc	r25, r1
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	97 f9       	bld	r25, 7
    22b2:	08 95       	ret
    22b4:	11 f4       	brne	.+4      	; 0x22ba <__mulsf3_pse+0xb0>
    22b6:	0e f4       	brtc	.+2      	; 0x22ba <__mulsf3_pse+0xb0>
    22b8:	4b cf       	rjmp	.-362    	; 0x2150 <__fp_nan>
    22ba:	3e c0       	rjmp	.+124    	; 0x2338 <__fp_mpack>

000022bc <sqrt>:
    22bc:	73 df       	rcall	.-282    	; 0x21a4 <__fp_splitA>
    22be:	d0 f3       	brcs	.-12     	; 0x22b4 <__mulsf3_pse+0xaa>
    22c0:	99 23       	and	r25, r25
    22c2:	d9 f3       	breq	.-10     	; 0x22ba <__mulsf3_pse+0xb0>
    22c4:	ce f3       	brts	.-14     	; 0x22b8 <__mulsf3_pse+0xae>
    22c6:	9f 57       	subi	r25, 0x7F	; 127
    22c8:	55 0b       	sbc	r21, r21
    22ca:	87 ff       	sbrs	r24, 7
    22cc:	43 d0       	rcall	.+134    	; 0x2354 <__fp_norm2>
    22ce:	00 24       	eor	r0, r0
    22d0:	a0 e6       	ldi	r26, 0x60	; 96
    22d2:	40 ea       	ldi	r20, 0xA0	; 160
    22d4:	90 01       	movw	r18, r0
    22d6:	80 58       	subi	r24, 0x80	; 128
    22d8:	56 95       	lsr	r21
    22da:	97 95       	ror	r25
    22dc:	28 f4       	brcc	.+10     	; 0x22e8 <sqrt+0x2c>
    22de:	80 5c       	subi	r24, 0xC0	; 192
    22e0:	66 0f       	add	r22, r22
    22e2:	77 1f       	adc	r23, r23
    22e4:	88 1f       	adc	r24, r24
    22e6:	20 f0       	brcs	.+8      	; 0x22f0 <sqrt+0x34>
    22e8:	26 17       	cp	r18, r22
    22ea:	37 07       	cpc	r19, r23
    22ec:	48 07       	cpc	r20, r24
    22ee:	30 f4       	brcc	.+12     	; 0x22fc <sqrt+0x40>
    22f0:	62 1b       	sub	r22, r18
    22f2:	73 0b       	sbc	r23, r19
    22f4:	84 0b       	sbc	r24, r20
    22f6:	20 29       	or	r18, r0
    22f8:	31 29       	or	r19, r1
    22fa:	4a 2b       	or	r20, r26
    22fc:	a6 95       	lsr	r26
    22fe:	17 94       	ror	r1
    2300:	07 94       	ror	r0
    2302:	20 25       	eor	r18, r0
    2304:	31 25       	eor	r19, r1
    2306:	4a 27       	eor	r20, r26
    2308:	58 f7       	brcc	.-42     	; 0x22e0 <sqrt+0x24>
    230a:	66 0f       	add	r22, r22
    230c:	77 1f       	adc	r23, r23
    230e:	88 1f       	adc	r24, r24
    2310:	20 f0       	brcs	.+8      	; 0x231a <sqrt+0x5e>
    2312:	26 17       	cp	r18, r22
    2314:	37 07       	cpc	r19, r23
    2316:	48 07       	cpc	r20, r24
    2318:	30 f4       	brcc	.+12     	; 0x2326 <sqrt+0x6a>
    231a:	62 0b       	sbc	r22, r18
    231c:	73 0b       	sbc	r23, r19
    231e:	84 0b       	sbc	r24, r20
    2320:	20 0d       	add	r18, r0
    2322:	31 1d       	adc	r19, r1
    2324:	41 1d       	adc	r20, r1
    2326:	a0 95       	com	r26
    2328:	81 f7       	brne	.-32     	; 0x230a <sqrt+0x4e>
    232a:	b9 01       	movw	r22, r18
    232c:	84 2f       	mov	r24, r20
    232e:	91 58       	subi	r25, 0x81	; 129
    2330:	88 0f       	add	r24, r24
    2332:	96 95       	lsr	r25
    2334:	87 95       	ror	r24
    2336:	08 95       	ret

00002338 <__fp_mpack>:
    2338:	9f 3f       	cpi	r25, 0xFF	; 255
    233a:	31 f0       	breq	.+12     	; 0x2348 <__fp_mpack_finite+0xc>

0000233c <__fp_mpack_finite>:
    233c:	91 50       	subi	r25, 0x01	; 1
    233e:	20 f4       	brcc	.+8      	; 0x2348 <__fp_mpack_finite+0xc>
    2340:	87 95       	ror	r24
    2342:	77 95       	ror	r23
    2344:	67 95       	ror	r22
    2346:	b7 95       	ror	r27
    2348:	88 0f       	add	r24, r24
    234a:	91 1d       	adc	r25, r1
    234c:	96 95       	lsr	r25
    234e:	87 95       	ror	r24
    2350:	97 f9       	bld	r25, 7
    2352:	08 95       	ret

00002354 <__fp_norm2>:
    2354:	91 50       	subi	r25, 0x01	; 1
    2356:	50 40       	sbci	r21, 0x00	; 0
    2358:	66 0f       	add	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	d2 f7       	brpl	.-12     	; 0x2354 <__fp_norm2>
    2360:	08 95       	ret

00002362 <__itoa_ncheck>:
    2362:	bb 27       	eor	r27, r27
    2364:	4a 30       	cpi	r20, 0x0A	; 10
    2366:	31 f4       	brne	.+12     	; 0x2374 <__itoa_ncheck+0x12>
    2368:	99 23       	and	r25, r25
    236a:	22 f4       	brpl	.+8      	; 0x2374 <__itoa_ncheck+0x12>
    236c:	bd e2       	ldi	r27, 0x2D	; 45
    236e:	90 95       	com	r25
    2370:	81 95       	neg	r24
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__utoa_common>

00002378 <__utoa_ncheck>:
    2378:	bb 27       	eor	r27, r27

0000237a <__utoa_common>:
    237a:	fb 01       	movw	r30, r22
    237c:	55 27       	eor	r21, r21
    237e:	aa 27       	eor	r26, r26
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	aa 1f       	adc	r26, r26
    2386:	a4 17       	cp	r26, r20
    2388:	10 f0       	brcs	.+4      	; 0x238e <__utoa_common+0x14>
    238a:	a4 1b       	sub	r26, r20
    238c:	83 95       	inc	r24
    238e:	50 51       	subi	r21, 0x10	; 16
    2390:	b9 f7       	brne	.-18     	; 0x2380 <__utoa_common+0x6>
    2392:	a0 5d       	subi	r26, 0xD0	; 208
    2394:	aa 33       	cpi	r26, 0x3A	; 58
    2396:	08 f0       	brcs	.+2      	; 0x239a <__utoa_common+0x20>
    2398:	a9 5d       	subi	r26, 0xD9	; 217
    239a:	a1 93       	st	Z+, r26
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	79 f7       	brne	.-34     	; 0x237e <__utoa_common+0x4>
    23a0:	b1 11       	cpse	r27, r1
    23a2:	b1 93       	st	Z+, r27
    23a4:	11 92       	st	Z+, r1
    23a6:	cb 01       	movw	r24, r22
    23a8:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <strrev>

000023ac <strrev>:
    23ac:	dc 01       	movw	r26, r24
    23ae:	fc 01       	movw	r30, r24
    23b0:	67 2f       	mov	r22, r23
    23b2:	71 91       	ld	r23, Z+
    23b4:	77 23       	and	r23, r23
    23b6:	e1 f7       	brne	.-8      	; 0x23b0 <strrev+0x4>
    23b8:	32 97       	sbiw	r30, 0x02	; 2
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <strrev+0x18>
    23bc:	7c 91       	ld	r23, X
    23be:	6d 93       	st	X+, r22
    23c0:	70 83       	st	Z, r23
    23c2:	62 91       	ld	r22, -Z
    23c4:	ae 17       	cp	r26, r30
    23c6:	bf 07       	cpc	r27, r31
    23c8:	c8 f3       	brcs	.-14     	; 0x23bc <strrev+0x10>
    23ca:	08 95       	ret

000023cc <_exit>:
    23cc:	f8 94       	cli

000023ce <__stop_program>:
    23ce:	ff cf       	rjmp	.-2      	; 0x23ce <__stop_program>

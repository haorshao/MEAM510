
robockey_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00003874  00003908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800130  00800130  00003938  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003938  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000288  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000362c  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce7  00000000  00000000  0000721c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012a8  00000000  00000000  00007f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000950  00000000  00000000  000091ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000935  00000000  00000000  00009afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e49  00000000  00000000  0000a431  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  0000e27a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__ctors_end>
       4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       c:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__vector_3>
      10:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      14:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      1c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      28:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_10>
      2c:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_11>
      30:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      34:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      38:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      40:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      44:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      4c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      50:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      54:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      58:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      5c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      60:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      64:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      68:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      6c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      70:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      74:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_29>
      78:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      7c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      80:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      84:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      88:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      8c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      90:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      94:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      98:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      9c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      a0:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      a4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      a8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      ac:	71 05       	cpc	r23, r1
      ae:	82 05       	cpc	r24, r2
      b0:	93 05       	cpc	r25, r3
      b2:	a4 05       	cpc	r26, r4
      b4:	b5 05       	cpc	r27, r5
      b6:	c6 05       	cpc	r28, r6
      b8:	d7 05       	cpc	r29, r7
      ba:	ef 16       	cp	r14, r31
      bc:	fa 16       	cp	r15, r26
      be:	05 17       	cp	r16, r21
      c0:	18 17       	cp	r17, r24
      c2:	2b 17       	cp	r18, r27
      c4:	7f 17       	cp	r23, r31
      c6:	34 17       	cp	r19, r20
      c8:	3d 17       	cp	r19, r29
      ca:	7f 17       	cp	r23, r31
      cc:	46 17       	cp	r20, r22
      ce:	07 2c       	mov	r0, r7
      d0:	7a a5       	ldd	r23, Y+42	; 0x2a
      d2:	ba 6c       	ori	r27, 0xCA	; 202
      d4:	c5 90       	lpm	r12, Z+
      d6:	da 3b       	cpi	r29, 0xBA	; 186
      d8:	93 65       	ori	r25, 0x53	; 83
      da:	fc 8b       	std	Y+20, r31	; 0x14
      dc:	bc 53       	subi	r27, 0x3C	; 60
      de:	f8 10       	cpse	r15, r8
      e0:	fd 3c       	cpi	r31, 0xCD	; 205
      e2:	56 92       	lac	Z, r5
      e4:	83 4d       	sbci	r24, 0xD3	; 211
      e6:	bd 87       	std	Y+13, r27	; 0x0d
      e8:	9d 3a       	cpi	r25, 0xAD	; 173
      ea:	b6 3d       	cpi	r27, 0xD6	; 214
      ec:	cb c9       	rjmp	.-3178   	; 0xfffff484 <__eeprom_end+0xff7ef484>
      ee:	bf 5b       	subi	r27, 0xBF	; 191
      f0:	be 73       	andi	r27, 0x3E	; 62
      f2:	da 0f       	add	r29, r26
      f4:	c9 3f       	cpi	r28, 0xF9	; 249

000000f6 <__trampolines_end>:
      f6:	44 6f       	ori	r20, 0xF4	; 244
      f8:	6e 65       	ori	r22, 0x5E	; 94
      fa:	20 0a       	sbc	r2, r16
	...

000000fd <__c.2084>:
      fd:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

0000010d <__c.2082>:
     10d:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

0000011c <__c.2064>:
     11c:	0d 0a 00                                            ...

0000011f <__c.2062>:
     11f:	6f 75 74 70 75 74 3d 00                             output=.

00000127 <__c.2060>:
     127:	0d 0a 00                                            ...

0000012a <__c.2058>:
     12a:	73 75 6d 3d 00                                      sum=.

0000012f <__c.2056>:
     12f:	0d 0a 00                                            ...

00000132 <__c.2054>:
     132:	49 6e 70 75 74 3d 00                                Input=.

00000139 <__c.2045>:
     139:	50 49 44 0a 00                                      PID..

0000013e <__c.2043>:
     13e:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

0000014a <__c.2041>:
     14a:	50 49 44 0a 00                                      PID..

0000014f <__c.2039>:
     14f:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

0000015a <__c.2035>:
     15a:	0d 0a 00                                            ...

0000015d <__c.2033>:
     15d:	0d 0a 00                                            ...

00000160 <__c.2031>:
     160:	50 68 6f 5b 36 5d 00                                Pho[6].

00000167 <__c.2029>:
     167:	0d 0a 00                                            ...

0000016a <__c.2027>:
     16a:	50 68 6f 5b 35 5d 00                                Pho[5].

00000171 <__c.2025>:
     171:	0d 0a 00                                            ...

00000174 <__c.2023>:
     174:	50 68 6f 5b 34 5d 00                                Pho[4].

0000017b <__c.2021>:
     17b:	0d 0a 00                                            ...

0000017e <__c.2019>:
     17e:	50 68 6f 5b 33 5d 00                                Pho[3].

00000185 <__c.2017>:
     185:	0d 0a 00                                            ...

00000188 <__c.2015>:
     188:	50 68 6f 5b 32 5d 00                                Pho[2].

0000018f <__c.2013>:
     18f:	0d 0a 00                                            ...

00000192 <__c.2011>:
     192:	50 68 6f 5b 31 5d 00                                Pho[1].

00000199 <__c.2009>:
     199:	0d 0a 00                                            ...

0000019c <__c.2007>:
     19c:	50 68 6f 5b 30 5d 00                                Pho[0].

000001a3 <__c.2005>:
     1a3:	0d 0a 00                                            ...

000001a6 <__c.2152>:
     1a6:	0a 00                                               ..

000001a8 <__c.2150>:
     1a8:	64 69 73 74 3a 20 00                                dist: .

000001af <__c.2142>:
     1af:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001ba <__c.2140>:
     1ba:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001c6 <__c.2138>:
     1c6:	0a 00                                               ..

000001c8 <__c.2136>:
     1c8:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

000001d2 <__c.2134>:
     1d2:	0a 00                                               ..

000001d4 <__c.2132>:
     1d4:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

000001df <__c.2123>:
     1df:	0a 00                                               ..

000001e1 <__c.2121>:
     1e1:	61 6c 70 68 61 3a 20 00                             alpha: .

000001e9 <__c.2097>:
     1e9:	0a 00                                               ..

000001eb <__c.2095>:
     1eb:	09 76 79 3a 20 30 2e 00                             .vy: 0..

000001f3 <__c.2093>:
     1f3:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000204 <__c.2091>:
     204:	0a 00                                               ..

00000206 <__c.2089>:
     206:	09 09 79 3a 00                                      ..y:.

0000020b <__c.2087>:
     20b:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000217 <__c.2059>:
     217:	0a 00                                               ..

00000219 <__c.2057>:
     219:	64 6d 61 78 3a 00                                   dmax:.

0000021f <__c.2036>:
     21f:	0a 00                                               ..

00000221 <__c.2034>:
     221:	20 00                                                .

00000223 <__c.2032>:
     223:	20 00                                                .

00000225 <__c.2030>:
     225:	20 00                                                .

00000227 <__c.2028>:
     227:	20 00                                                .

00000229 <__c.2026>:
     229:	20 00                                                .

0000022b <__c.2024>:
     22b:	20 00                                                .

0000022d <__c.2022>:
     22d:	20 00                                                .

0000022f <descriptor_list>:
     22f:	00 01 00 00 c6 02 12 00 02 00 00 83 02 43 00 03     .............C..
     23f:	00 00 7f 02 04 01 03 09 04 6b 02 12 02 03 09 04     .........k......
     24f:	63 02 06 03 03 09 04 59 02 08                       c......Y..

00000259 <string3>:
     259:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000263 <string2>:
     263:	06 03 4d 00 32 00 00 00                             ..M.2...

0000026b <string1>:
     26b:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     27b:	65 00 00 00                                         e...

0000027f <string0>:
     27f:	04 03 09 04                                         ....

00000283 <config1_descriptor>:
     283:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     293:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2a3:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     2b3:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2c3:	40 00 00                                            @..

000002c6 <device_descriptor>:
     2c6:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2d6:	03 01                                               ..

000002d8 <endpoint_config_table>:
     2d8:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000002e2 <__c.2095>:
     2e2:	0a 00                                               ..

000002e4 <__c.2093>:
     2e4:	09 09 79 3a 00                                      ..y:.

000002e9 <__c.2091>:
     2e9:	49 74 73 20 6c 6f 63 61 74 69 6f 6e 20 69 73 3a     Its location is:
     2f9:	20 00                                                .

000002fb <__c.2089>:
     2fb:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

0000030a <__c.2087>:
     30a:	4e 6f 2e 20 00                                      No. .

0000030f <__c.2084>:
     30f:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

0000031a <__c.2081>:
     31a:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000324 <__c.2078>:
     324:	50 61 75 73 65 0a 00                                Pause..

0000032b <__c.2075>:
     32b:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000333 <__c.2072>:
     333:	47 6f 61 6c 20 41 0a 00                             Goal A..

0000033b <__c.2069>:
     33b:	50 6c 61 79 20 0a 00                                Play ..

00000342 <__c.2065>:
     342:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

0000034e <__c.2056>:
     34e:	0a 00                                               ..

00000350 <__c.2054>:
     350:	2c 20 00                                            , .

00000353 <__c.2052>:
     353:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

0000035c <__c.2049>:
     35c:	0a 00                                               ..

0000035e <__c.2047>:
     35e:	2c 20 00                                            , .

00000361 <__c.2045>:
     361:	67 6f 61 6c 20 3d 20 00                             goal = .

00000369 <__c.2043>:
     369:	73 65 6e 74 20 6d 65 73 73 73 61 67 65 2e 0a 00     sent messsage...

00000379 <__c.2036>:
     379:	0a 00                                               ..

0000037b <__c.2034>:
     37b:	73 74 61 74 65 3a 20 00 00                          state: ..

00000384 <__ctors_end>:
     384:	11 24       	eor	r1, r1
     386:	1f be       	out	0x3f, r1	; 63
     388:	cf ef       	ldi	r28, 0xFF	; 255
     38a:	da e0       	ldi	r29, 0x0A	; 10
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	cd bf       	out	0x3d, r28	; 61

00000390 <__do_copy_data>:
     390:	11 e0       	ldi	r17, 0x01	; 1
     392:	a0 e0       	ldi	r26, 0x00	; 0
     394:	b1 e0       	ldi	r27, 0x01	; 1
     396:	e4 e7       	ldi	r30, 0x74	; 116
     398:	f8 e3       	ldi	r31, 0x38	; 56
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <__do_copy_data+0x10>
     39c:	05 90       	lpm	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	a0 33       	cpi	r26, 0x30	; 48
     3a2:	b1 07       	cpc	r27, r17
     3a4:	d9 f7       	brne	.-10     	; 0x39c <__do_copy_data+0xc>

000003a6 <__do_clear_bss>:
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	a0 e3       	ldi	r26, 0x30	; 48
     3aa:	b1 e0       	ldi	r27, 0x01	; 1
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <.do_clear_bss_start>

000003ae <.do_clear_bss_loop>:
     3ae:	1d 92       	st	X+, r1

000003b0 <.do_clear_bss_start>:
     3b0:	ae 3a       	cpi	r26, 0xAE	; 174
     3b2:	b2 07       	cpc	r27, r18
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <.do_clear_bss_loop>
     3b6:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <main>
     3ba:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <_exit>

000003be <__bad_interrupt>:
     3be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c2 <send_message>:
 */ 

#include "communication.h"


void send_message(int state, int num, char *buffer, float *c_wii){
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	ea 01       	movw	r28, r20
     3cc:	89 01       	movw	r16, r18
	switch(state){ 
     3ce:	03 97       	sbiw	r24, 0x03	; 3
     3d0:	b9 f5       	brne	.+110    	; 0x440 <send_message+0x7e>
		case 3:  //buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
			buffer[0] = 0xA9;
     3d2:	89 ea       	ldi	r24, 0xA9	; 169
     3d4:	88 83       	st	Y, r24
			buffer[1] = num;
     3d6:	69 83       	std	Y+1, r22	; 0x01
			buffer[2] = (unsigned int) c_wii[0] % 256;
     3d8:	f9 01       	movw	r30, r18
     3da:	60 81       	ld	r22, Z
     3dc:	71 81       	ldd	r23, Z+1	; 0x01
     3de:	82 81       	ldd	r24, Z+2	; 0x02
     3e0:	93 81       	ldd	r25, Z+3	; 0x03
     3e2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fixunssfsi>
     3e6:	6a 83       	std	Y+2, r22	; 0x02
			buffer[3] = (unsigned int) c_wii[0] / 256;
     3e8:	f8 01       	movw	r30, r16
     3ea:	60 81       	ld	r22, Z
     3ec:	71 81       	ldd	r23, Z+1	; 0x01
     3ee:	82 81       	ldd	r24, Z+2	; 0x02
     3f0:	93 81       	ldd	r25, Z+3	; 0x03
     3f2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fixunssfsi>
     3f6:	7b 83       	std	Y+3, r23	; 0x03
			buffer[4] = (unsigned int) c_wii[1] % 256;
     3f8:	f8 01       	movw	r30, r16
     3fa:	64 81       	ldd	r22, Z+4	; 0x04
     3fc:	75 81       	ldd	r23, Z+5	; 0x05
     3fe:	86 81       	ldd	r24, Z+6	; 0x06
     400:	97 81       	ldd	r25, Z+7	; 0x07
     402:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fixunssfsi>
     406:	6c 83       	std	Y+4, r22	; 0x04
			buffer[5] = (unsigned int) c_wii[1] / 256;
     408:	f8 01       	movw	r30, r16
     40a:	64 81       	ldd	r22, Z+4	; 0x04
     40c:	75 81       	ldd	r23, Z+5	; 0x05
     40e:	86 81       	ldd	r24, Z+6	; 0x06
     410:	97 81       	ldd	r25, Z+7	; 0x07
     412:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fixunssfsi>
     416:	7d 83       	std	Y+5, r23	; 0x05
			m_rf_send(TXADDRESS1,buffer,PACKET_LENGTH);
     418:	4a e0       	ldi	r20, 0x0A	; 10
     41a:	be 01       	movw	r22, r28
     41c:	8d e0       	ldi	r24, 0x0D	; 13
     41e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <m_rf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     422:	83 ec       	ldi	r24, 0xC3	; 195
     424:	99 e0       	ldi	r25, 0x09	; 9
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <send_message+0x64>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <send_message+0x6a>
     42c:	00 00       	nop
			m_wait(10);
			m_rf_send(TXADDRESS2,buffer,PACKET_LENGTH);
     42e:	4a e0       	ldi	r20, 0x0A	; 10
     430:	be 01       	movw	r22, r28
     432:	8e e0       	ldi	r24, 0x0E	; 14
     434:	0e 94 f5 11 	call	0x23ea	; 0x23ea <m_rf_send>
			usb_tx_string("Done \n");
     438:	86 ef       	ldi	r24, 0xF6	; 246
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <init_ADC>:
int output;
int sum_Pho = 0;
int diff_Pho = 0;
int speed_diff_Pho = 500;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     44e:	ac e7       	ldi	r26, 0x7C	; 124
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	8c 91       	ld	r24, X
     454:	8f 77       	andi	r24, 0x7F	; 127
     456:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     458:	8c 91       	ld	r24, X
     45a:	80 64       	ori	r24, 0x40	; 64
     45c:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     45e:	ea e7       	ldi	r30, 0x7A	; 122
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	84 60       	ori	r24, 0x04	; 4
     466:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     468:	80 81       	ld	r24, Z
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     46e:	80 81       	ld	r24, Z
     470:	81 60       	ori	r24, 0x01	; 1
     472:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     474:	ce e7       	ldi	r28, 0x7E	; 126
     476:	d0 e0       	ldi	r29, 0x00	; 0
     478:	88 81       	ld	r24, Y
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     47e:	88 81       	ld	r24, Y
     480:	82 60       	ori	r24, 0x02	; 2
     482:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     484:	cd e7       	ldi	r28, 0x7D	; 125
     486:	d0 e0       	ldi	r29, 0x00	; 0
     488:	88 81       	ld	r24, Y
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     48e:	88 81       	ld	r24, Y
     490:	84 60       	ori	r24, 0x04	; 4
     492:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     494:	88 81       	ld	r24, Y
     496:	88 60       	ori	r24, 0x08	; 8
     498:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     49a:	88 81       	ld	r24, Y
     49c:	80 61       	ori	r24, 0x10	; 16
     49e:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     4a0:	88 81       	ld	r24, Y
     4a2:	81 60       	ori	r24, 0x01	; 1
     4a4:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     4a6:	cb e7       	ldi	r28, 0x7B	; 123
     4a8:	d0 e0       	ldi	r29, 0x00	; 0
     4aa:	88 81       	ld	r24, Y
     4ac:	8f 7d       	andi	r24, 0xDF	; 223
     4ae:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     4b0:	8c 91       	ld	r24, X
     4b2:	8b 7f       	andi	r24, 0xFB	; 251
     4b4:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     4b6:	8c 91       	ld	r24, X
     4b8:	8d 7f       	andi	r24, 0xFD	; 253
     4ba:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     4bc:	8c 91       	ld	r24, X
     4be:	8e 7f       	andi	r24, 0xFE	; 254
     4c0:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     4c2:	80 81       	ld	r24, Z
     4c4:	80 62       	ori	r24, 0x20	; 32
     4c6:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     4c8:	80 81       	ld	r24, Z
     4ca:	88 60       	ori	r24, 0x08	; 8
     4cc:	80 83       	st	Z, r24
	sei();
     4ce:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     4d0:	80 81       	ld	r24, Z
     4d2:	80 68       	ori	r24, 0x80	; 128
     4d4:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     4d6:	80 81       	ld	r24, Z
     4d8:	80 64       	ori	r24, 0x40	; 64
     4da:	80 83       	st	Z, r24
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <PID_Pho>:
			PID_Pho(2*Kp_Pho, Ki_Pho, Kd_Pho);
		}
	}
}

void PID_Pho(float Kp, float Ki, float Kd) {
     4e2:	4f 92       	push	r4
     4e4:	5f 92       	push	r5
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	2b 01       	movw	r4, r22
     500:	3c 01       	movw	r6, r24
     502:	49 01       	movw	r8, r18
     504:	5a 01       	movw	r10, r20
     506:	67 01       	movw	r12, r14
     508:	78 01       	movw	r14, r16
	int sum02 = Pho[0] + Pho[2];
     50a:	20 91 38 01 	lds	r18, 0x0138
     50e:	30 91 39 01 	lds	r19, 0x0139
     512:	80 91 3c 01 	lds	r24, 0x013C
     516:	90 91 3d 01 	lds	r25, 0x013D
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
	int sum13 = Pho[1] + Pho[3];
     51e:	40 91 3a 01 	lds	r20, 0x013A
     522:	50 91 3b 01 	lds	r21, 0x013B
     526:	20 91 3e 01 	lds	r18, 0x013E
     52a:	30 91 3f 01 	lds	r19, 0x013F
     52e:	24 0f       	add	r18, r20
     530:	35 1f       	adc	r19, r21
	input = sum02 - sum13;
     532:	82 1b       	sub	r24, r18
     534:	93 0b       	sbc	r25, r19
     536:	90 93 ab 01 	sts	0x01AB, r25
     53a:	80 93 aa 01 	sts	0x01AA, r24
	m_usb_tx_string("Input=");
     53e:	82 e3       	ldi	r24, 0x32	; 50
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(input);
     546:	80 91 aa 01 	lds	r24, 0x01AA
     54a:	90 91 ab 01 	lds	r25, 0x01AB
     54e:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     552:	8f e2       	ldi	r24, 0x2F	; 47
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	diff_Pho = input - input_last;
     55a:	80 91 aa 01 	lds	r24, 0x01AA
     55e:	90 91 ab 01 	lds	r25, 0x01AB
     562:	20 91 34 01 	lds	r18, 0x0134
     566:	30 91 35 01 	lds	r19, 0x0135
     56a:	ac 01       	movw	r20, r24
     56c:	42 1b       	sub	r20, r18
     56e:	53 0b       	sbc	r21, r19
     570:	50 93 31 01 	sts	0x0131, r21
     574:	40 93 30 01 	sts	0x0130, r20
	sum_Pho = sum_Pho + input;
     578:	20 91 32 01 	lds	r18, 0x0132
     57c:	30 91 33 01 	lds	r19, 0x0133
     580:	82 0f       	add	r24, r18
     582:	93 1f       	adc	r25, r19
     584:	90 93 33 01 	sts	0x0133, r25
     588:	80 93 32 01 	sts	0x0132, r24
	m_usb_tx_string("sum=");
     58c:	8a e2       	ldi	r24, 0x2A	; 42
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(sum_Pho);
     594:	80 91 32 01 	lds	r24, 0x0132
     598:	90 91 33 01 	lds	r25, 0x0133
     59c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     5a0:	87 e2       	ldi	r24, 0x27	; 39
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>

	output = Kp * input + Ki*sum_Pho + Kd * diff_Pho;
     5a8:	60 91 aa 01 	lds	r22, 0x01AA
     5ac:	70 91 ab 01 	lds	r23, 0x01AB
     5b0:	88 27       	eor	r24, r24
     5b2:	77 fd       	sbrc	r23, 7
     5b4:	80 95       	com	r24
     5b6:	98 2f       	mov	r25, r24
     5b8:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
     5bc:	a3 01       	movw	r20, r6
     5be:	92 01       	movw	r18, r4
     5c0:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     5c4:	2b 01       	movw	r4, r22
     5c6:	3c 01       	movw	r6, r24
     5c8:	60 91 32 01 	lds	r22, 0x0132
     5cc:	70 91 33 01 	lds	r23, 0x0133
     5d0:	88 27       	eor	r24, r24
     5d2:	77 fd       	sbrc	r23, 7
     5d4:	80 95       	com	r24
     5d6:	98 2f       	mov	r25, r24
     5d8:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
     5dc:	a5 01       	movw	r20, r10
     5de:	94 01       	movw	r18, r8
     5e0:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	c3 01       	movw	r24, r6
     5ea:	b2 01       	movw	r22, r4
     5ec:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     5f0:	4b 01       	movw	r8, r22
     5f2:	5c 01       	movw	r10, r24
     5f4:	60 91 30 01 	lds	r22, 0x0130
     5f8:	70 91 31 01 	lds	r23, 0x0131
     5fc:	88 27       	eor	r24, r24
     5fe:	77 fd       	sbrc	r23, 7
     600:	80 95       	com	r24
     602:	98 2f       	mov	r25, r24
     604:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
     608:	a7 01       	movw	r20, r14
     60a:	96 01       	movw	r18, r12
     60c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     610:	9b 01       	movw	r18, r22
     612:	ac 01       	movw	r20, r24
     614:	c5 01       	movw	r24, r10
     616:	b4 01       	movw	r22, r8
     618:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     61c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
     620:	70 93 a9 01 	sts	0x01A9, r23
     624:	60 93 a8 01 	sts	0x01A8, r22
	m_usb_tx_string("output=");
     628:	8f e1       	ldi	r24, 0x1F	; 31
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(output);
     630:	80 91 a8 01 	lds	r24, 0x01A8
     634:	90 91 a9 01 	lds	r25, 0x01A9
     638:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     63c:	8c e1       	ldi	r24, 0x1C	; 28
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	
	input_last = input;
     644:	80 91 aa 01 	lds	r24, 0x01AA
     648:	90 91 ab 01 	lds	r25, 0x01AB
     64c:	90 93 35 01 	sts	0x0135, r25
     650:	80 93 34 01 	sts	0x0134, r24
	
	if(output>0){
     654:	80 91 a8 01 	lds	r24, 0x01A8
     658:	90 91 a9 01 	lds	r25, 0x01A9
     65c:	18 16       	cp	r1, r24
     65e:	19 06       	cpc	r1, r25
     660:	74 f5       	brge	.+92     	; 0x6be <PID_Pho+0x1dc>
		OCR1C = full_speed - abs(output);
     662:	9c 01       	movw	r18, r24
     664:	99 23       	and	r25, r25
     666:	24 f4       	brge	.+8      	; 0x670 <PID_Pho+0x18e>
     668:	22 27       	eor	r18, r18
     66a:	33 27       	eor	r19, r19
     66c:	28 1b       	sub	r18, r24
     66e:	39 0b       	sbc	r19, r25
     670:	88 e5       	ldi	r24, 0x58	; 88
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	82 1b       	sub	r24, r18
     676:	93 0b       	sbc	r25, r19
     678:	90 93 8d 00 	sts	0x008D, r25
     67c:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     680:	20 91 00 01 	lds	r18, 0x0100
     684:	30 91 01 01 	lds	r19, 0x0101
     688:	80 91 a8 01 	lds	r24, 0x01A8
     68c:	90 91 a9 01 	lds	r25, 0x01A9
     690:	99 23       	and	r25, r25
     692:	1c f4       	brge	.+6      	; 0x69a <PID_Pho+0x1b8>
     694:	91 95       	neg	r25
     696:	81 95       	neg	r24
     698:	91 09       	sbc	r25, r1
     69a:	28 17       	cp	r18, r24
     69c:	39 07       	cpc	r19, r25
     69e:	44 f4       	brge	.+16     	; 0x6b0 <PID_Pho+0x1ce>
			OCR1C = full_speed - speed_diff_Pho;
     6a0:	88 e5       	ldi	r24, 0x58	; 88
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	82 1b       	sub	r24, r18
     6a6:	93 0b       	sbc	r25, r19
     6a8:	90 93 8d 00 	sts	0x008D, r25
     6ac:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     6b0:	88 e5       	ldi	r24, 0x58	; 88
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	90 93 8b 00 	sts	0x008B, r25
     6b8:	80 93 8a 00 	sts	0x008A, r24
     6bc:	2d c0       	rjmp	.+90     	; 0x718 <PID_Pho+0x236>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     6be:	9c 01       	movw	r18, r24
     6c0:	99 23       	and	r25, r25
     6c2:	24 f4       	brge	.+8      	; 0x6cc <PID_Pho+0x1ea>
     6c4:	22 27       	eor	r18, r18
     6c6:	33 27       	eor	r19, r19
     6c8:	28 1b       	sub	r18, r24
     6ca:	39 0b       	sbc	r19, r25
     6cc:	88 e5       	ldi	r24, 0x58	; 88
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	82 1b       	sub	r24, r18
     6d2:	93 0b       	sbc	r25, r19
     6d4:	90 93 8b 00 	sts	0x008B, r25
     6d8:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     6dc:	20 91 00 01 	lds	r18, 0x0100
     6e0:	30 91 01 01 	lds	r19, 0x0101
     6e4:	80 91 a8 01 	lds	r24, 0x01A8
     6e8:	90 91 a9 01 	lds	r25, 0x01A9
     6ec:	99 23       	and	r25, r25
     6ee:	1c f4       	brge	.+6      	; 0x6f6 <PID_Pho+0x214>
     6f0:	91 95       	neg	r25
     6f2:	81 95       	neg	r24
     6f4:	91 09       	sbc	r25, r1
     6f6:	28 17       	cp	r18, r24
     6f8:	39 07       	cpc	r19, r25
     6fa:	44 f4       	brge	.+16     	; 0x70c <PID_Pho+0x22a>
			OCR1B = full_speed - speed_diff_Pho;
     6fc:	88 e5       	ldi	r24, 0x58	; 88
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	82 1b       	sub	r24, r18
     702:	93 0b       	sbc	r25, r19
     704:	90 93 8b 00 	sts	0x008B, r25
     708:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     70c:	88 e5       	ldi	r24, 0x58	; 88
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	90 93 8d 00 	sts	0x008D, r25
     714:	80 93 8c 00 	sts	0x008C, r24
	}
}
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	9f 90       	pop	r9
     72a:	8f 90       	pop	r8
     72c:	7f 90       	pop	r7
     72e:	6f 90       	pop	r6
     730:	5f 90       	pop	r5
     732:	4f 90       	pop	r4
     734:	08 95       	ret

00000736 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     736:	8f 92       	push	r8
     738:	9f 92       	push	r9
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
	m_usb_tx_string("\r\n");
     74e:	83 ea       	ldi	r24, 0xA3	; 163
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("Pho[0]");
     756:	8c e9       	ldi	r24, 0x9C	; 156
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(Pho[0]);
     75e:	0f 2e       	mov	r0, r31
     760:	f8 e3       	ldi	r31, 0x38	; 56
     762:	cf 2e       	mov	r12, r31
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	df 2e       	mov	r13, r31
     768:	f0 2d       	mov	r31, r0
     76a:	d6 01       	movw	r26, r12
     76c:	8d 91       	ld	r24, X+
     76e:	9c 91       	ld	r25, X
     770:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     774:	89 e9       	ldi	r24, 0x99	; 153
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("Pho[1]");
     77c:	82 e9       	ldi	r24, 0x92	; 146
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(Pho[1]);
     784:	ca e3       	ldi	r28, 0x3A	; 58
     786:	d1 e0       	ldi	r29, 0x01	; 1
     788:	88 81       	ld	r24, Y
     78a:	99 81       	ldd	r25, Y+1	; 0x01
     78c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     790:	8f e8       	ldi	r24, 0x8F	; 143
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("Pho[2]");
     798:	88 e8       	ldi	r24, 0x88	; 136
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(Pho[2]);
     7a0:	0f 2e       	mov	r0, r31
     7a2:	fc e3       	ldi	r31, 0x3C	; 60
     7a4:	8f 2e       	mov	r8, r31
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	9f 2e       	mov	r9, r31
     7aa:	f0 2d       	mov	r31, r0
     7ac:	f4 01       	movw	r30, r8
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7b6:	85 e8       	ldi	r24, 0x85	; 133
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("Pho[3]");
     7be:	8e e7       	ldi	r24, 0x7E	; 126
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(Pho[3]);
     7c6:	0f 2e       	mov	r0, r31
     7c8:	fe e3       	ldi	r31, 0x3E	; 62
     7ca:	ef 2e       	mov	r14, r31
     7cc:	f1 e0       	ldi	r31, 0x01	; 1
     7ce:	ff 2e       	mov	r15, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	d7 01       	movw	r26, r14
     7d4:	8d 91       	ld	r24, X+
     7d6:	9c 91       	ld	r25, X
     7d8:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7dc:	8b e7       	ldi	r24, 0x7B	; 123
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("Pho[4]");
     7e4:	84 e7       	ldi	r24, 0x74	; 116
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(Pho[4]);
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f0 e4       	ldi	r31, 0x40	; 64
     7f0:	af 2e       	mov	r10, r31
     7f2:	f1 e0       	ldi	r31, 0x01	; 1
     7f4:	bf 2e       	mov	r11, r31
     7f6:	f0 2d       	mov	r31, r0
     7f8:	f5 01       	movw	r30, r10
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     802:	81 e7       	ldi	r24, 0x71	; 113
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("Pho[5]");
     80a:	8a e6       	ldi	r24, 0x6A	; 106
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(Pho[5]);
     812:	02 e4       	ldi	r16, 0x42	; 66
     814:	11 e0       	ldi	r17, 0x01	; 1
     816:	d8 01       	movw	r26, r16
     818:	8d 91       	ld	r24, X+
     81a:	9c 91       	ld	r25, X
     81c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     820:	87 e6       	ldi	r24, 0x67	; 103
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("Pho[6]");
     828:	80 e6       	ldi	r24, 0x60	; 96
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(Pho[6]);
     830:	80 91 44 01 	lds	r24, 0x0144
     834:	90 91 45 01 	lds	r25, 0x0145
     838:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     83c:	8d e5       	ldi	r24, 0x5D	; 93
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_string("\r\n");
     844:	8a e5       	ldi	r24, 0x5A	; 90
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     84c:	f4 01       	movw	r30, r8
     84e:	80 80       	ld	r8, Z
     850:	91 80       	ldd	r9, Z+1	; 0x01
     852:	d5 01       	movw	r26, r10
     854:	ad 90       	ld	r10, X+
     856:	bc 90       	ld	r11, X
     858:	f6 01       	movw	r30, r12
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	88 0d       	add	r24, r8
     860:	99 1d       	adc	r25, r9
     862:	8a 0d       	add	r24, r10
     864:	9b 1d       	adc	r25, r11
     866:	e3 e0       	ldi	r30, 0x03	; 3
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	bf 01       	movw	r22, r30
     86c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__divmodhi4>
     870:	9b 01       	movw	r18, r22
     872:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     874:	d7 01       	movw	r26, r14
     876:	ed 90       	ld	r14, X+
     878:	fc 90       	ld	r15, X
     87a:	d8 01       	movw	r26, r16
     87c:	0d 91       	ld	r16, X+
     87e:	1c 91       	ld	r17, X
     880:	88 81       	ld	r24, Y
     882:	99 81       	ldd	r25, Y+1	; 0x01
     884:	8e 0d       	add	r24, r14
     886:	9f 1d       	adc	r25, r15
     888:	80 0f       	add	r24, r16
     88a:	91 1f       	adc	r25, r17
     88c:	bf 01       	movw	r22, r30
     88e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__divmodhi4>
     892:	eb 01       	movw	r28, r22
	
	if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     894:	c9 01       	movw	r24, r18
     896:	86 1b       	sub	r24, r22
     898:	97 0b       	sbc	r25, r23
     89a:	c3 97       	sbiw	r24, 0x33	; 51
     89c:	44 f4       	brge	.+16     	; 0x8ae <findPuck+0x178>
     89e:	62 17       	cp	r22, r18
     8a0:	73 07       	cpc	r23, r19
     8a2:	0c f0       	brlt	.+2      	; 0x8a6 <findPuck+0x170>
     8a4:	49 c0       	rjmp	.+146    	; 0x938 <findPuck+0x202>
     8a6:	8a 14       	cp	r8, r10
     8a8:	9b 04       	cpc	r9, r11
     8aa:	0c f0       	brlt	.+2      	; 0x8ae <findPuck+0x178>
     8ac:	45 c0       	rjmp	.+138    	; 0x938 <findPuck+0x202>
		m_usb_tx_string("turn left\n");
     8ae:	8f e4       	ldi	r24, 0x4F	; 79
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
		if(mean024 > revThres){
     8b6:	b1 eb       	ldi	r27, 0xB1	; 177
     8b8:	cb 16       	cp	r12, r27
     8ba:	b4 e0       	ldi	r27, 0x04	; 4
     8bc:	db 06       	cpc	r13, r27
     8be:	6c f0       	brlt	.+26     	; 0x8da <findPuck+0x1a4>
			set(PORTB, 0);
     8c0:	28 9a       	sbi	0x05, 0	; 5
			clear(PORTB, 1);
     8c2:	29 98       	cbi	0x05, 1	; 5
			OCR1C = full_speed;
     8c4:	88 e5       	ldi	r24, 0x58	; 88
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	90 93 8d 00 	sts	0x008D, r25
     8cc:	80 93 8c 00 	sts	0x008C, r24
			OCR1B = full_speed;
     8d0:	90 93 8b 00 	sts	0x008B, r25
     8d4:	80 93 8a 00 	sts	0x008A, r24
     8d8:	89 c0       	rjmp	.+274    	; 0x9ec <findPuck+0x2b6>
		}
		else{
			set(PORTB, 0);
     8da:	28 9a       	sbi	0x05, 0	; 5
			set(PORTB, 1);
     8dc:	29 9a       	sbi	0x05, 1	; 5
			OCR1C = full_speed - speed_diff_Pho;
     8de:	88 e5       	ldi	r24, 0x58	; 88
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	20 91 00 01 	lds	r18, 0x0100
     8e6:	30 91 01 01 	lds	r19, 0x0101
     8ea:	fc 01       	movw	r30, r24
     8ec:	e2 1b       	sub	r30, r18
     8ee:	f3 0b       	sbc	r31, r19
     8f0:	f0 93 8d 00 	sts	0x008D, r31
     8f4:	e0 93 8c 00 	sts	0x008C, r30
			OCR1B = full_speed;
     8f8:	90 93 8b 00 	sts	0x008B, r25
     8fc:	80 93 8a 00 	sts	0x008A, r24
			if(Pho[2]>Pho[4]){
     900:	20 91 3c 01 	lds	r18, 0x013C
     904:	30 91 3d 01 	lds	r19, 0x013D
     908:	80 91 40 01 	lds	r24, 0x0140
     90c:	90 91 41 01 	lds	r25, 0x0141
     910:	82 17       	cp	r24, r18
     912:	93 07       	cpc	r25, r19
     914:	0c f0       	brlt	.+2      	; 0x918 <findPuck+0x1e2>
     916:	6a c0       	rjmp	.+212    	; 0x9ec <findPuck+0x2b6>
				m_usb_tx_string("PID\n");
     918:	8a e4       	ldi	r24, 0x4A	; 74
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
				PID_Pho(Kp_Pho, Ki_Pho, Kd_Pho);
     920:	e1 2c       	mov	r14, r1
     922:	f1 2c       	mov	r15, r1
     924:	87 01       	movw	r16, r14
     926:	a8 01       	movw	r20, r16
     928:	97 01       	movw	r18, r14
     92a:	6a e9       	ldi	r22, 0x9A	; 154
     92c:	79 e9       	ldi	r23, 0x99	; 153
     92e:	89 e9       	ldi	r24, 0x99	; 153
     930:	9e e3       	ldi	r25, 0x3E	; 62
     932:	0e 94 71 02 	call	0x4e2	; 0x4e2 <PID_Pho>
     936:	5a c0       	rjmp	.+180    	; 0x9ec <findPuck+0x2b6>
			}
		}
	}
	
	else {
		if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     938:	62 1b       	sub	r22, r18
     93a:	73 0b       	sbc	r23, r19
     93c:	63 33       	cpi	r22, 0x33	; 51
     93e:	71 05       	cpc	r23, r1
     940:	44 f4       	brge	.+16     	; 0x952 <findPuck+0x21c>
     942:	cc 16       	cp	r12, r28
     944:	dd 06       	cpc	r13, r29
     946:	0c f0       	brlt	.+2      	; 0x94a <findPuck+0x214>
     948:	46 c0       	rjmp	.+140    	; 0x9d6 <findPuck+0x2a0>
     94a:	e0 16       	cp	r14, r16
     94c:	f1 06       	cpc	r15, r17
     94e:	0c f0       	brlt	.+2      	; 0x952 <findPuck+0x21c>
     950:	42 c0       	rjmp	.+132    	; 0x9d6 <findPuck+0x2a0>
			m_usb_tx_string("turn right\n");
     952:	8e e3       	ldi	r24, 0x3E	; 62
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			if(mean135 > revThres){
     95a:	c1 3b       	cpi	r28, 0xB1	; 177
     95c:	d4 40       	sbci	r29, 0x04	; 4
     95e:	6c f0       	brlt	.+26     	; 0x97a <findPuck+0x244>
				set(PORTB, 1);
     960:	29 9a       	sbi	0x05, 1	; 5
				clear(PORTB, 0);
     962:	28 98       	cbi	0x05, 0	; 5
				OCR1B = full_speed;
     964:	88 e5       	ldi	r24, 0x58	; 88
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	90 93 8b 00 	sts	0x008B, r25
     96c:	80 93 8a 00 	sts	0x008A, r24
				OCR1C = full_speed;
     970:	90 93 8d 00 	sts	0x008D, r25
     974:	80 93 8c 00 	sts	0x008C, r24
     978:	39 c0       	rjmp	.+114    	; 0x9ec <findPuck+0x2b6>
			}
			else{
				set(PORTB, 0);
     97a:	28 9a       	sbi	0x05, 0	; 5
				set(PORTB, 1);
     97c:	29 9a       	sbi	0x05, 1	; 5
				OCR1B = full_speed - speed_diff_Pho;
     97e:	88 e5       	ldi	r24, 0x58	; 88
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	20 91 00 01 	lds	r18, 0x0100
     986:	30 91 01 01 	lds	r19, 0x0101
     98a:	ac 01       	movw	r20, r24
     98c:	42 1b       	sub	r20, r18
     98e:	53 0b       	sbc	r21, r19
     990:	50 93 8b 00 	sts	0x008B, r21
     994:	40 93 8a 00 	sts	0x008A, r20
				OCR1C = full_speed;
     998:	90 93 8d 00 	sts	0x008D, r25
     99c:	80 93 8c 00 	sts	0x008C, r24
				if(Pho[3]>Pho[5]){
     9a0:	20 91 3e 01 	lds	r18, 0x013E
     9a4:	30 91 3f 01 	lds	r19, 0x013F
     9a8:	80 91 42 01 	lds	r24, 0x0142
     9ac:	90 91 43 01 	lds	r25, 0x0143
     9b0:	82 17       	cp	r24, r18
     9b2:	93 07       	cpc	r25, r19
     9b4:	dc f4       	brge	.+54     	; 0x9ec <findPuck+0x2b6>
					m_usb_tx_string("PID\n");
     9b6:	89 e3       	ldi	r24, 0x39	; 57
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
					PID_Pho(Kp_Pho, Ki_Pho, Kd_Pho);
     9be:	e1 2c       	mov	r14, r1
     9c0:	f1 2c       	mov	r15, r1
     9c2:	87 01       	movw	r16, r14
     9c4:	a8 01       	movw	r20, r16
     9c6:	97 01       	movw	r18, r14
     9c8:	6a e9       	ldi	r22, 0x9A	; 154
     9ca:	79 e9       	ldi	r23, 0x99	; 153
     9cc:	89 e9       	ldi	r24, 0x99	; 153
     9ce:	9e e3       	ldi	r25, 0x3E	; 62
     9d0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <PID_Pho>
     9d4:	0b c0       	rjmp	.+22     	; 0x9ec <findPuck+0x2b6>
				}
			}
		}
		else{
			PID_Pho(2*Kp_Pho, Ki_Pho, Kd_Pho);
     9d6:	e1 2c       	mov	r14, r1
     9d8:	f1 2c       	mov	r15, r1
     9da:	87 01       	movw	r16, r14
     9dc:	a8 01       	movw	r20, r16
     9de:	97 01       	movw	r18, r14
     9e0:	6a e9       	ldi	r22, 0x9A	; 154
     9e2:	79 e9       	ldi	r23, 0x99	; 153
     9e4:	89 e1       	ldi	r24, 0x19	; 25
     9e6:	9f e3       	ldi	r25, 0x3F	; 63
     9e8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <PID_Pho>
		}
	}
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	9f 90       	pop	r9
     a02:	8f 90       	pop	r8
     a04:	08 95       	ret

00000a06 <__vector_29>:
		}
		OCR1C = full_speed;
	}
}

ISR(ADC_vect){
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	af 92       	push	r10
     a12:	bf 92       	push	r11
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	2f 93       	push	r18
     a22:	3f 93       	push	r19
     a24:	4f 93       	push	r20
     a26:	5f 93       	push	r21
     a28:	6f 93       	push	r22
     a2a:	7f 93       	push	r23
     a2c:	8f 93       	push	r24
     a2e:	9f 93       	push	r25
     a30:	af 93       	push	r26
     a32:	bf 93       	push	r27
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     a3c:	c0 91 36 01 	lds	r28, 0x0136
     a40:	d0 91 37 01 	lds	r29, 0x0137
     a44:	a0 90 78 00 	lds	r10, 0x0078
     a48:	b0 90 79 00 	lds	r11, 0x0079
     a4c:	8e 01       	movw	r16, r28
     a4e:	00 0f       	add	r16, r16
     a50:	11 1f       	adc	r17, r17
     a52:	08 5c       	subi	r16, 0xC8	; 200
     a54:	1e 4f       	sbci	r17, 0xFE	; 254
     a56:	f8 01       	movw	r30, r16
     a58:	60 81       	ld	r22, Z
     a5a:	71 81       	ldd	r23, Z+1	; 0x01
     a5c:	88 27       	eor	r24, r24
     a5e:	77 fd       	sbrc	r23, 7
     a60:	80 95       	com	r24
     a62:	98 2f       	mov	r25, r24
     a64:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
     a68:	2d ec       	ldi	r18, 0xCD	; 205
     a6a:	3c ec       	ldi	r19, 0xCC	; 204
     a6c:	4c e4       	ldi	r20, 0x4C	; 76
     a6e:	5f e3       	ldi	r21, 0x3F	; 63
     a70:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     a74:	6b 01       	movw	r12, r22
     a76:	7c 01       	movw	r14, r24
     a78:	b5 01       	movw	r22, r10
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
     a82:	2c ec       	ldi	r18, 0xCC	; 204
     a84:	3c ec       	ldi	r19, 0xCC	; 204
     a86:	4c e4       	ldi	r20, 0x4C	; 76
     a88:	5e e3       	ldi	r21, 0x3E	; 62
     a8a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c7 01       	movw	r24, r14
     a94:	b6 01       	movw	r22, r12
     a96:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     a9a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
     a9e:	f8 01       	movw	r30, r16
     aa0:	71 83       	std	Z+1, r23	; 0x01
     aa2:	60 83       	st	Z, r22
	
	i = i + 1;
     aa4:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     aa6:	c8 30       	cpi	r28, 0x08	; 8
     aa8:	d1 05       	cpc	r29, r1
     aaa:	2c f4       	brge	.+10     	; 0xab6 <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     aac:	d0 93 37 01 	sts	0x0137, r29
     ab0:	c0 93 36 01 	sts	0x0136, r28
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__vector_29+0xb8>
	if(i > 7){
		i = 0;
     ab6:	10 92 37 01 	sts	0x0137, r1
     aba:	10 92 36 01 	sts	0x0136, r1
	}
	
	clear(ADCSRA, ADEN);
     abe:	ea e7       	ldi	r30, 0x7A	; 122
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	80 83       	st	Z, r24
	switch(i){
     ac8:	80 91 36 01 	lds	r24, 0x0136
     acc:	90 91 37 01 	lds	r25, 0x0137
     ad0:	87 30       	cpi	r24, 0x07	; 7
     ad2:	91 05       	cpc	r25, r1
     ad4:	08 f0       	brcs	.+2      	; 0xad8 <__vector_29+0xd2>
     ad6:	7b c0       	rjmp	.+246    	; 0xbce <__stack+0xcf>
     ad8:	fc 01       	movw	r30, r24
     ada:	ea 5a       	subi	r30, 0xAA	; 170
     adc:	ff 4f       	sbci	r31, 0xFF	; 255
     ade:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     ae2:	eb e7       	ldi	r30, 0x7B	; 123
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	8f 7d       	andi	r24, 0xDF	; 223
     aea:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     aec:	ec e7       	ldi	r30, 0x7C	; 124
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8b 7f       	andi	r24, 0xFB	; 251
     af4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     af6:	80 81       	ld	r24, Z
     af8:	8d 7f       	andi	r24, 0xFD	; 253
     afa:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     afc:	80 81       	ld	r24, Z
     afe:	8e 7f       	andi	r24, 0xFE	; 254
     b00:	80 83       	st	Z, r24
			break;
     b02:	65 c0       	rjmp	.+202    	; 0xbce <__stack+0xcf>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     b04:	eb e7       	ldi	r30, 0x7B	; 123
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	8f 7d       	andi	r24, 0xDF	; 223
     b0c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b0e:	ec e7       	ldi	r30, 0x7C	; 124
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	8b 7f       	andi	r24, 0xFB	; 251
     b16:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b18:	80 81       	ld	r24, Z
     b1a:	8d 7f       	andi	r24, 0xFD	; 253
     b1c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     b1e:	80 81       	ld	r24, Z
     b20:	81 60       	ori	r24, 0x01	; 1
     b22:	80 83       	st	Z, r24
			break;
     b24:	54 c0       	rjmp	.+168    	; 0xbce <__stack+0xcf>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     b26:	eb e7       	ldi	r30, 0x7B	; 123
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	80 62       	ori	r24, 0x20	; 32
     b2e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b30:	ec e7       	ldi	r30, 0x7C	; 124
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8b 7f       	andi	r24, 0xFB	; 251
     b38:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     b3a:	80 81       	ld	r24, Z
     b3c:	8d 7f       	andi	r24, 0xFD	; 253
     b3e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     b40:	80 81       	ld	r24, Z
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 83       	st	Z, r24
			break;
     b46:	43 c0       	rjmp	.+134    	; 0xbce <__stack+0xcf>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     b48:	eb e7       	ldi	r30, 0x7B	; 123
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b52:	ec e7       	ldi	r30, 0x7C	; 124
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8b 7f       	andi	r24, 0xFB	; 251
     b5a:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     b5c:	80 81       	ld	r24, Z
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     b62:	80 81       	ld	r24, Z
     b64:	8e 7f       	andi	r24, 0xFE	; 254
     b66:	80 83       	st	Z, r24
			break;
     b68:	32 c0       	rjmp	.+100    	; 0xbce <__stack+0xcf>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     b6a:	eb e7       	ldi	r30, 0x7B	; 123
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 62       	ori	r24, 0x20	; 32
     b72:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     b74:	ec e7       	ldi	r30, 0x7C	; 124
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	8b 7f       	andi	r24, 0xFB	; 251
     b7c:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     b7e:	80 81       	ld	r24, Z
     b80:	82 60       	ori	r24, 0x02	; 2
     b82:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     b84:	80 81       	ld	r24, Z
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	80 83       	st	Z, r24
			break;
     b8a:	21 c0       	rjmp	.+66     	; 0xbce <__stack+0xcf>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     b8c:	eb e7       	ldi	r30, 0x7B	; 123
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 62       	ori	r24, 0x20	; 32
     b94:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     b96:	ec e7       	ldi	r30, 0x7C	; 124
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	84 60       	ori	r24, 0x04	; 4
     b9e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     ba0:	80 81       	ld	r24, Z
     ba2:	8d 7f       	andi	r24, 0xFD	; 253
     ba4:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     ba6:	80 81       	ld	r24, Z
     ba8:	8e 7f       	andi	r24, 0xFE	; 254
     baa:	80 83       	st	Z, r24
			break;
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__stack+0xcf>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
     bae:	eb e7       	ldi	r30, 0x7B	; 123
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 62       	ori	r24, 0x20	; 32
     bb6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     bb8:	ec e7       	ldi	r30, 0x7C	; 124
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8b 7f       	andi	r24, 0xFB	; 251
     bc0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     bc2:	80 81       	ld	r24, Z
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     bc8:	80 81       	ld	r24, Z
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     bce:	ea e7       	ldi	r30, 0x7A	; 122
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 68       	ori	r24, 0x80	; 128
     bd6:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     bd8:	80 81       	ld	r24, Z
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	80 83       	st	Z, r24
	
}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <deterState>:

void deterState(int *state){
	if (Pho[6] >gotThres){
     c14:	20 91 44 01 	lds	r18, 0x0144
     c18:	30 91 45 01 	lds	r19, 0x0145
     c1c:	2d 32       	cpi	r18, 0x2D	; 45
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	34 07       	cpc	r19, r20
     c22:	a4 f0       	brlt	.+40     	; 0xc4c <deterState+0x38>
		*state = 3;
     c24:	23 e0       	ldi	r18, 0x03	; 3
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	fc 01       	movw	r30, r24
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	20 83       	st	Z, r18
		OCR1B = full_speed;
     c2e:	88 e5       	ldi	r24, 0x58	; 88
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	90 93 8b 00 	sts	0x008B, r25
     c36:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = full_speed;
     c3a:	90 93 8d 00 	sts	0x008D, r25
     c3e:	80 93 8c 00 	sts	0x008C, r24
		m_usb_tx_string("got the puck!\n");
     c42:	8d e0       	ldi	r24, 0x0D	; 13
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
     c4a:	08 95       	ret
		
	}
	else{
		if(Pho[6] < loseThres){
     c4c:	24 36       	cpi	r18, 0x64	; 100
     c4e:	31 05       	cpc	r19, r1
     c50:	4c f4       	brge	.+18     	; 0xc64 <deterState+0x50>
			*state = 2;
     c52:	22 e0       	ldi	r18, 0x02	; 2
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	31 83       	std	Z+1, r19	; 0x01
     c5a:	20 83       	st	Z, r18
			m_usb_tx_string("lost the puck!\n");
     c5c:	8d ef       	ldi	r24, 0xFD	; 253
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
     c64:	08 95       	ret

00000c66 <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     c66:	4f 92       	push	r4
     c68:	5f 92       	push	r5
     c6a:	6f 92       	push	r6
     c6c:	7f 92       	push	r7
     c6e:	8f 92       	push	r8
     c70:	9f 92       	push	r9
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	60 97       	sbiw	r28, 0x10	; 16
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	2b 01       	movw	r4, r22
     c98:	3c 01       	movw	r6, r24
     c9a:	2d 83       	std	Y+5, r18	; 0x05
     c9c:	3e 83       	std	Y+6, r19	; 0x06
     c9e:	4f 83       	std	Y+7, r20	; 0x07
     ca0:	58 87       	std	Y+8, r21	; 0x08
     ca2:	58 01       	movw	r10, r16
     ca4:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     ca6:	d5 01       	movw	r26, r10
     ca8:	cd 90       	ld	r12, X+
     caa:	dd 90       	ld	r13, X+
     cac:	ed 90       	ld	r14, X+
     cae:	fc 90       	ld	r15, X
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     cbc:	f8 01       	movw	r30, r16
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	42 81       	ldd	r20, Z+2	; 0x02
     cc4:	53 81       	ldd	r21, Z+3	; 0x03
     cc6:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
     cca:	69 87       	std	Y+9, r22	; 0x09
     ccc:	7a 87       	std	Y+10, r23	; 0x0a
     cce:	8b 87       	std	Y+11, r24	; 0x0b
     cd0:	9c 87       	std	Y+12, r25	; 0x0c
     cd2:	d5 01       	movw	r26, r10
     cd4:	14 96       	adiw	r26, 0x04	; 4
     cd6:	8d 91       	ld	r24, X+
     cd8:	9d 91       	ld	r25, X+
     cda:	0d 90       	ld	r0, X+
     cdc:	bc 91       	ld	r27, X
     cde:	a0 2d       	mov	r26, r0
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	ab 83       	std	Y+3, r26	; 0x03
     ce6:	bc 83       	std	Y+4, r27	; 0x04
     ce8:	2d 81       	ldd	r18, Y+5	; 0x05
     cea:	3e 81       	ldd	r19, Y+6	; 0x06
     cec:	4f 81       	ldd	r20, Y+7	; 0x07
     cee:	58 85       	ldd	r21, Y+8	; 0x08
     cf0:	bc 01       	movw	r22, r24
     cf2:	cd 01       	movw	r24, r26
     cf4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     cf8:	6d 87       	std	Y+13, r22	; 0x0d
     cfa:	7e 87       	std	Y+14, r23	; 0x0e
     cfc:	8f 87       	std	Y+15, r24	; 0x0f
     cfe:	98 8b       	std	Y+16, r25	; 0x10
     d00:	9b 01       	movw	r18, r22
     d02:	ac 01       	movw	r20, r24
     d04:	69 85       	ldd	r22, Y+9	; 0x09
     d06:	7a 85       	ldd	r23, Y+10	; 0x0a
     d08:	8b 85       	ldd	r24, Y+11	; 0x0b
     d0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d0c:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
     d10:	4b 01       	movw	r8, r22
     d12:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     d14:	29 81       	ldd	r18, Y+1	; 0x01
     d16:	3a 81       	ldd	r19, Y+2	; 0x02
     d18:	4b 81       	ldd	r20, Y+3	; 0x03
     d1a:	5c 81       	ldd	r21, Y+4	; 0x04
     d1c:	c3 01       	movw	r24, r6
     d1e:	b2 01       	movw	r22, r4
     d20:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     d24:	f8 01       	movw	r30, r16
     d26:	24 81       	ldd	r18, Z+4	; 0x04
     d28:	35 81       	ldd	r19, Z+5	; 0x05
     d2a:	46 81       	ldd	r20, Z+6	; 0x06
     d2c:	57 81       	ldd	r21, Z+7	; 0x07
     d2e:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
     d32:	2b 01       	movw	r4, r22
     d34:	3c 01       	movw	r6, r24
     d36:	2d 81       	ldd	r18, Y+5	; 0x05
     d38:	3e 81       	ldd	r19, Y+6	; 0x06
     d3a:	4f 81       	ldd	r20, Y+7	; 0x07
     d3c:	58 85       	ldd	r21, Y+8	; 0x08
     d3e:	c7 01       	movw	r24, r14
     d40:	b6 01       	movw	r22, r12
     d42:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     d46:	69 83       	std	Y+1, r22	; 0x01
     d48:	7a 83       	std	Y+2, r23	; 0x02
     d4a:	8b 83       	std	Y+3, r24	; 0x03
     d4c:	9c 83       	std	Y+4, r25	; 0x04
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	c3 01       	movw	r24, r6
     d54:	b2 01       	movw	r22, r4
     d56:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     d5a:	6b 01       	movw	r12, r22
     d5c:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     d5e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d60:	3e 85       	ldd	r19, Y+14	; 0x0e
     d62:	4f 85       	ldd	r20, Y+15	; 0x0f
     d64:	58 89       	ldd	r21, Y+16	; 0x10
     d66:	69 85       	ldd	r22, Y+9	; 0x09
     d68:	7a 85       	ldd	r23, Y+10	; 0x0a
     d6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6e:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     d72:	6d 83       	std	Y+5, r22	; 0x05
     d74:	7e 83       	std	Y+6, r23	; 0x06
     d76:	8f 83       	std	Y+7, r24	; 0x07
     d78:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     d7a:	29 81       	ldd	r18, Y+1	; 0x01
     d7c:	3a 81       	ldd	r19, Y+2	; 0x02
     d7e:	4b 81       	ldd	r20, Y+3	; 0x03
     d80:	5c 81       	ldd	r21, Y+4	; 0x04
     d82:	c3 01       	movw	r24, r6
     d84:	b2 01       	movw	r22, r4
     d86:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
     d8a:	2b 01       	movw	r4, r22
     d8c:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     d8e:	a5 01       	movw	r20, r10
     d90:	94 01       	movw	r18, r8
     d92:	c5 01       	movw	r24, r10
     d94:	b4 01       	movw	r22, r8
     d96:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     d9a:	4b 01       	movw	r8, r22
     d9c:	5c 01       	movw	r10, r24
     d9e:	a7 01       	movw	r20, r14
     da0:	96 01       	movw	r18, r12
     da2:	c7 01       	movw	r24, r14
     da4:	b6 01       	movw	r22, r12
     da6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     daa:	9b 01       	movw	r18, r22
     dac:	ac 01       	movw	r20, r24
     dae:	c5 01       	movw	r24, r10
     db0:	b4 01       	movw	r22, r8
     db2:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     db6:	6b 01       	movw	r12, r22
     db8:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	4f 81       	ldd	r20, Y+7	; 0x07
     dc0:	58 85       	ldd	r21, Y+8	; 0x08
     dc2:	ca 01       	movw	r24, r20
     dc4:	b9 01       	movw	r22, r18
     dc6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     dca:	4b 01       	movw	r8, r22
     dcc:	5c 01       	movw	r10, r24
     dce:	a3 01       	movw	r20, r6
     dd0:	92 01       	movw	r18, r4
     dd2:	c3 01       	movw	r24, r6
     dd4:	b2 01       	movw	r22, r4
     dd6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     dda:	9b 01       	movw	r18, r22
     ddc:	ac 01       	movw	r20, r24
     dde:	c5 01       	movw	r24, r10
     de0:	b4 01       	movw	r22, r8
     de2:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     de6:	9b 01       	movw	r18, r22
     de8:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     dea:	01 e0       	ldi	r16, 0x01	; 1
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	c7 01       	movw	r24, r14
     df0:	b6 01       	movw	r22, r12
     df2:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
     df6:	88 23       	and	r24, r24
     df8:	14 f0       	brlt	.+4      	; 0xdfe <find_sign+0x198>
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     dfe:	c8 01       	movw	r24, r16
     e00:	60 96       	adiw	r28, 0x10	; 16
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	8f 90       	pop	r8
     e24:	7f 90       	pop	r7
     e26:	6f 90       	pop	r6
     e28:	5f 90       	pop	r5
     e2a:	4f 90       	pop	r4
     e2c:	08 95       	ret

00000e2e <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
     e2e:	2f 92       	push	r2
     e30:	3f 92       	push	r3
     e32:	4f 92       	push	r4
     e34:	5f 92       	push	r5
     e36:	6f 92       	push	r6
     e38:	7f 92       	push	r7
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	28 97       	sbiw	r28, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	1c 01       	movw	r2, r24
     e64:	49 83       	std	Y+1, r20	; 0x01
     e66:	5a 83       	std	Y+2, r21	; 0x02
     e68:	6b 83       	std	Y+3, r22	; 0x03
     e6a:	7c 83       	std	Y+4, r23	; 0x04
     e6c:	0d 83       	std	Y+5, r16	; 0x05
     e6e:	1e 83       	std	Y+6, r17	; 0x06
     e70:	2f 83       	std	Y+7, r18	; 0x07
     e72:	38 87       	std	Y+8, r19	; 0x08
     e74:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     e76:	f6 01       	movw	r30, r12
     e78:	20 81       	ld	r18, Z
     e7a:	31 81       	ldd	r19, Z+1	; 0x01
     e7c:	42 81       	ldd	r20, Z+2	; 0x02
     e7e:	53 81       	ldd	r21, Z+3	; 0x03
     e80:	f7 01       	movw	r30, r14
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
     e8e:	4b 01       	movw	r8, r22
     e90:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
     e92:	f6 01       	movw	r30, r12
     e94:	24 81       	ldd	r18, Z+4	; 0x04
     e96:	35 81       	ldd	r19, Z+5	; 0x05
     e98:	46 81       	ldd	r20, Z+6	; 0x06
     e9a:	57 81       	ldd	r21, Z+7	; 0x07
     e9c:	f7 01       	movw	r30, r14
     e9e:	64 81       	ldd	r22, Z+4	; 0x04
     ea0:	75 81       	ldd	r23, Z+5	; 0x05
     ea2:	86 81       	ldd	r24, Z+6	; 0x06
     ea4:	97 81       	ldd	r25, Z+7	; 0x07
     ea6:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
     eaa:	6b 01       	movw	r12, r22
     eac:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
     eae:	a5 01       	movw	r20, r10
     eb0:	94 01       	movw	r18, r8
     eb2:	c5 01       	movw	r24, r10
     eb4:	b4 01       	movw	r22, r8
     eb6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     eba:	2b 01       	movw	r4, r22
     ebc:	3c 01       	movw	r6, r24
     ebe:	a7 01       	movw	r20, r14
     ec0:	96 01       	movw	r18, r12
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	c3 01       	movw	r24, r6
     ed0:	b2 01       	movw	r22, r4
     ed2:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
     ed6:	0e 94 82 1b 	call	0x3704	; 0x3704 <sqrt>
     eda:	2b 01       	movw	r4, r22
     edc:	3c 01       	movw	r6, r24
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	c5 01       	movw	r24, r10
     ee4:	b4 01       	movw	r22, r8
     ee6:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divsf3>
     eea:	4b 01       	movw	r8, r22
     eec:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
     eee:	a3 01       	movw	r20, r6
     ef0:	92 01       	movw	r18, r4
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divsf3>
     efa:	6b 01       	movw	r12, r22
     efc:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
     efe:	f8 01       	movw	r30, r16
     f00:	20 81       	ld	r18, Z
     f02:	31 81       	ldd	r19, Z+1	; 0x01
     f04:	42 81       	ldd	r20, Z+2	; 0x02
     f06:	53 81       	ldd	r21, Z+3	; 0x03
     f08:	c5 01       	movw	r24, r10
     f0a:	b4 01       	movw	r22, r8
     f0c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     f10:	2b 01       	movw	r4, r22
     f12:	3c 01       	movw	r6, r24
     f14:	f8 01       	movw	r30, r16
     f16:	24 81       	ldd	r18, Z+4	; 0x04
     f18:	35 81       	ldd	r19, Z+5	; 0x05
     f1a:	46 81       	ldd	r20, Z+6	; 0x06
     f1c:	57 81       	ldd	r21, Z+7	; 0x07
     f1e:	c7 01       	movw	r24, r14
     f20:	b6 01       	movw	r22, r12
     f22:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	c3 01       	movw	r24, r6
     f2c:	b2 01       	movw	r22, r4
     f2e:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
	alpha = acos(cos_alpha);
     f32:	0e 94 15 19 	call	0x322a	; 0x322a <acos>
     f36:	2b 01       	movw	r4, r22
     f38:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
     f3a:	2a 94       	dec	r2
     f3c:	23 28       	or	r2, r3
     f3e:	d1 f4       	brne	.+52     	; 0xf74 <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
     f40:	2d 81       	ldd	r18, Y+5	; 0x05
     f42:	3e 81       	ldd	r19, Y+6	; 0x06
     f44:	4f 81       	ldd	r20, Y+7	; 0x07
     f46:	58 85       	ldd	r21, Y+8	; 0x08
     f48:	50 58       	subi	r21, 0x80	; 128
     f4a:	c7 01       	movw	r24, r14
     f4c:	b6 01       	movw	r22, r12
     f4e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     f52:	6b 01       	movw	r12, r22
     f54:	7c 01       	movw	r14, r24
     f56:	29 81       	ldd	r18, Y+1	; 0x01
     f58:	3a 81       	ldd	r19, Y+2	; 0x02
     f5a:	4b 81       	ldd	r20, Y+3	; 0x03
     f5c:	5c 81       	ldd	r21, Y+4	; 0x04
     f5e:	c5 01       	movw	r24, r10
     f60:	b4 01       	movw	r22, r8
     f62:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
     f6e:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
     f72:	19 c0       	rjmp	.+50     	; 0xfa6 <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
     f74:	2d 81       	ldd	r18, Y+5	; 0x05
     f76:	3e 81       	ldd	r19, Y+6	; 0x06
     f78:	4f 81       	ldd	r20, Y+7	; 0x07
     f7a:	58 85       	ldd	r21, Y+8	; 0x08
     f7c:	50 58       	subi	r21, 0x80	; 128
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     f86:	6b 01       	movw	r12, r22
     f88:	7c 01       	movw	r14, r24
     f8a:	29 81       	ldd	r18, Y+1	; 0x01
     f8c:	3a 81       	ldd	r19, Y+2	; 0x02
     f8e:	4b 81       	ldd	r20, Y+3	; 0x03
     f90:	5c 81       	ldd	r21, Y+4	; 0x04
     f92:	c5 01       	movw	r24, r10
     f94:	b4 01       	movw	r22, r8
     f96:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     f9a:	9b 01       	movw	r18, r22
     f9c:	ac 01       	movw	r20, r24
     f9e:	c7 01       	movw	r24, r14
     fa0:	b6 01       	movw	r22, r12
     fa2:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
	}
	if (c2g_wx < 0){
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	4c f0       	brlt	.+18     	; 0xfc6 <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
     fb4:	40 92 52 01 	sts	0x0152, r4
     fb8:	50 92 53 01 	sts	0x0153, r5
     fbc:	60 92 54 01 	sts	0x0154, r6
     fc0:	70 92 55 01 	sts	0x0155, r7
     fc4:	0c c0       	rjmp	.+24     	; 0xfde <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
     fc6:	77 fa       	bst	r7, 7
     fc8:	70 94       	com	r7
     fca:	77 f8       	bld	r7, 7
     fcc:	70 94       	com	r7
     fce:	40 92 52 01 	sts	0x0152, r4
     fd2:	50 92 53 01 	sts	0x0153, r5
     fd6:	60 92 54 01 	sts	0x0154, r6
     fda:	70 92 55 01 	sts	0x0155, r7
	}
	m_usb_tx_string("alpha: ");
     fde:	81 ee       	ldi	r24, 0xE1	; 225
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(alpha*10);
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e2       	ldi	r20, 0x20	; 32
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	60 91 52 01 	lds	r22, 0x0152
     ff2:	70 91 53 01 	lds	r23, 0x0153
     ff6:	80 91 54 01 	lds	r24, 0x0154
     ffa:	90 91 55 01 	lds	r25, 0x0155
     ffe:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1002:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    1006:	cb 01       	movw	r24, r22
    1008:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\n");
    100c:	8f ed       	ldi	r24, 0xDF	; 223
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	
}
    1014:	28 96       	adiw	r28, 0x08	; 8
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	9f 90       	pop	r9
    1036:	8f 90       	pop	r8
    1038:	7f 90       	pop	r7
    103a:	6f 90       	pop	r6
    103c:	5f 90       	pop	r5
    103e:	4f 90       	pop	r4
    1040:	3f 90       	pop	r3
    1042:	2f 90       	pop	r2
    1044:	08 95       	ret

00001046 <PID_alpha>:
void PID_alpha(float Kp, float Ki, float Kd){
    1046:	4f 92       	push	r4
    1048:	5f 92       	push	r5
    104a:	6f 92       	push	r6
    104c:	7f 92       	push	r7
    104e:	8f 92       	push	r8
    1050:	9f 92       	push	r9
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	00 d0       	rcall	.+0      	; 0x1068 <PID_alpha+0x22>
    1068:	00 d0       	rcall	.+0      	; 0x106a <PID_alpha+0x24>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	4b 01       	movw	r8, r22
    1070:	5c 01       	movw	r10, r24
    1072:	e9 82       	std	Y+1, r14	; 0x01
    1074:	fa 82       	std	Y+2, r15	; 0x02
    1076:	0b 83       	std	Y+3, r16	; 0x03
    1078:	1c 83       	std	Y+4, r17	; 0x04
	m_usb_tx_int(Ki);
	m_usb_tx_string(", "); 
	m_usb_tx_int(Kd); 
	m_usb_tx_string("\n");
	*/
	diff_loc = alpha - alpha_last;
    107a:	40 90 52 01 	lds	r4, 0x0152
    107e:	50 90 53 01 	lds	r5, 0x0153
    1082:	60 90 54 01 	lds	r6, 0x0154
    1086:	70 90 55 01 	lds	r7, 0x0155
    108a:	20 91 4e 01 	lds	r18, 0x014E
    108e:	30 91 4f 01 	lds	r19, 0x014F
    1092:	40 91 50 01 	lds	r20, 0x0150
    1096:	50 91 51 01 	lds	r21, 0x0151
    109a:	c3 01       	movw	r24, r6
    109c:	b2 01       	movw	r22, r4
    109e:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    10a2:	6b 01       	movw	r12, r22
    10a4:	7c 01       	movw	r14, r24
    10a6:	60 93 4a 01 	sts	0x014A, r22
    10aa:	70 93 4b 01 	sts	0x014B, r23
    10ae:	80 93 4c 01 	sts	0x014C, r24
    10b2:	90 93 4d 01 	sts	0x014D, r25
	m_usb_tx_string("diff: ");
	m_usb_tx_int(diff*10);
	m_usb_tx_string("\n");
	*/
	float P =0, D = 0;
	P = Kp * alpha;
    10b6:	a5 01       	movw	r20, r10
    10b8:	94 01       	movw	r18, r8
    10ba:	c3 01       	movw	r24, r6
    10bc:	b2 01       	movw	r22, r4
    10be:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    10c2:	4b 01       	movw	r8, r22
    10c4:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    10c6:	29 81       	ldd	r18, Y+1	; 0x01
    10c8:	3a 81       	ldd	r19, Y+2	; 0x02
    10ca:	4b 81       	ldd	r20, Y+3	; 0x03
    10cc:	5c 81       	ldd	r21, Y+4	; 0x04
    10ce:	c7 01       	movw	r24, r14
    10d0:	b6 01       	movw	r22, r12
    10d2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    10da:	c5 01       	movw	r24, r10
    10dc:	b4 01       	movw	r22, r8
    10de:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    10e2:	60 93 46 01 	sts	0x0146, r22
    10e6:	70 93 47 01 	sts	0x0147, r23
    10ea:	80 93 48 01 	sts	0x0148, r24
    10ee:	90 93 49 01 	sts	0x0149, r25
	
	alpha_last = alpha;
    10f2:	40 92 4e 01 	sts	0x014E, r4
    10f6:	50 92 4f 01 	sts	0x014F, r5
    10fa:	60 92 50 01 	sts	0x0150, r6
    10fe:	70 92 51 01 	sts	0x0151, r7
	
	m_usb_tx_string("alpha*10: ");
    1102:	84 ed       	ldi	r24, 0xD4	; 212
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	60 91 52 01 	lds	r22, 0x0152
    1116:	70 91 53 01 	lds	r23, 0x0153
    111a:	80 91 54 01 	lds	r24, 0x0154
    111e:	90 91 55 01 	lds	r25, 0x0155
    1122:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1126:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    112a:	cb 01       	movw	r24, r22
    112c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1130:	82 ed       	ldi	r24, 0xD2	; 210
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1138:	88 ec       	ldi	r24, 0xC8	; 200
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	60 91 46 01 	lds	r22, 0x0146
    114c:	70 91 47 01 	lds	r23, 0x0147
    1150:	80 91 48 01 	lds	r24, 0x0148
    1154:	90 91 49 01 	lds	r25, 0x0149
    1158:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    115c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    1160:	cb 01       	movw	r24, r22
    1162:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1166:	86 ec       	ldi	r24, 0xC6	; 198
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	
	if(gain_loc<0){  // turn right
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	60 91 46 01 	lds	r22, 0x0146
    1178:	70 91 47 01 	lds	r23, 0x0147
    117c:	80 91 48 01 	lds	r24, 0x0148
    1180:	90 91 49 01 	lds	r25, 0x0149
    1184:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    1188:	88 23       	and	r24, r24
    118a:	0c f0       	brlt	.+2      	; 0x118e <PID_alpha+0x148>
    118c:	44 c0       	rjmp	.+136    	; 0x1216 <PID_alpha+0x1d0>
		m_usb_tx_string("turn right\n");
    118e:	8a eb       	ldi	r24, 0xBA	; 186
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1196:	60 91 46 01 	lds	r22, 0x0146
    119a:	70 91 47 01 	lds	r23, 0x0147
    119e:	80 91 48 01 	lds	r24, 0x0148
    11a2:	90 91 49 01 	lds	r25, 0x0149
    11a6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    11aa:	9b 01       	movw	r18, r22
    11ac:	77 23       	and	r23, r23
    11ae:	24 f4       	brge	.+8      	; 0x11b8 <PID_alpha+0x172>
    11b0:	22 27       	eor	r18, r18
    11b2:	33 27       	eor	r19, r19
    11b4:	26 1b       	sub	r18, r22
    11b6:	37 0b       	sbc	r19, r23
    11b8:	88 e5       	ldi	r24, 0x58	; 88
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	82 1b       	sub	r24, r18
    11be:	93 0b       	sbc	r25, r19
    11c0:	90 93 8b 00 	sts	0x008B, r25
    11c4:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    11c8:	e0 90 16 01 	lds	r14, 0x0116
    11cc:	f0 90 17 01 	lds	r15, 0x0117
    11d0:	60 91 46 01 	lds	r22, 0x0146
    11d4:	70 91 47 01 	lds	r23, 0x0147
    11d8:	80 91 48 01 	lds	r24, 0x0148
    11dc:	90 91 49 01 	lds	r25, 0x0149
    11e0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    11e4:	9b 01       	movw	r18, r22
    11e6:	77 23       	and	r23, r23
    11e8:	24 f4       	brge	.+8      	; 0x11f2 <PID_alpha+0x1ac>
    11ea:	22 27       	eor	r18, r18
    11ec:	33 27       	eor	r19, r19
    11ee:	26 1b       	sub	r18, r22
    11f0:	37 0b       	sbc	r19, r23
    11f2:	e2 16       	cp	r14, r18
    11f4:	f3 06       	cpc	r15, r19
    11f6:	44 f4       	brge	.+16     	; 0x1208 <PID_alpha+0x1c2>
			OCR1B = full_speed - speed_diff_loc;
    11f8:	88 e5       	ldi	r24, 0x58	; 88
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	8e 19       	sub	r24, r14
    11fe:	9f 09       	sbc	r25, r15
    1200:	90 93 8b 00 	sts	0x008B, r25
    1204:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1208:	88 e5       	ldi	r24, 0x58	; 88
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	90 93 8d 00 	sts	0x008D, r25
    1210:	80 93 8c 00 	sts	0x008C, r24
    1214:	43 c0       	rjmp	.+134    	; 0x129c <PID_alpha+0x256>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1216:	8f ea       	ldi	r24, 0xAF	; 175
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    121e:	60 91 46 01 	lds	r22, 0x0146
    1222:	70 91 47 01 	lds	r23, 0x0147
    1226:	80 91 48 01 	lds	r24, 0x0148
    122a:	90 91 49 01 	lds	r25, 0x0149
    122e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    1232:	9b 01       	movw	r18, r22
    1234:	77 23       	and	r23, r23
    1236:	24 f4       	brge	.+8      	; 0x1240 <PID_alpha+0x1fa>
    1238:	22 27       	eor	r18, r18
    123a:	33 27       	eor	r19, r19
    123c:	26 1b       	sub	r18, r22
    123e:	37 0b       	sbc	r19, r23
    1240:	88 e5       	ldi	r24, 0x58	; 88
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	82 1b       	sub	r24, r18
    1246:	93 0b       	sbc	r25, r19
    1248:	90 93 8d 00 	sts	0x008D, r25
    124c:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    1250:	e0 90 16 01 	lds	r14, 0x0116
    1254:	f0 90 17 01 	lds	r15, 0x0117
    1258:	60 91 46 01 	lds	r22, 0x0146
    125c:	70 91 47 01 	lds	r23, 0x0147
    1260:	80 91 48 01 	lds	r24, 0x0148
    1264:	90 91 49 01 	lds	r25, 0x0149
    1268:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    126c:	9b 01       	movw	r18, r22
    126e:	77 23       	and	r23, r23
    1270:	24 f4       	brge	.+8      	; 0x127a <PID_alpha+0x234>
    1272:	22 27       	eor	r18, r18
    1274:	33 27       	eor	r19, r19
    1276:	26 1b       	sub	r18, r22
    1278:	37 0b       	sbc	r19, r23
    127a:	e2 16       	cp	r14, r18
    127c:	f3 06       	cpc	r15, r19
    127e:	44 f4       	brge	.+16     	; 0x1290 <PID_alpha+0x24a>
			OCR1C = full_speed - speed_diff_loc;
    1280:	88 e5       	ldi	r24, 0x58	; 88
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	8e 19       	sub	r24, r14
    1286:	9f 09       	sbc	r25, r15
    1288:	90 93 8d 00 	sts	0x008D, r25
    128c:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1290:	88 e5       	ldi	r24, 0x58	; 88
    1292:	92 e0       	ldi	r25, 0x02	; 2
    1294:	90 93 8b 00 	sts	0x008B, r25
    1298:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	9f 90       	pop	r9
    12ba:	8f 90       	pop	r8
    12bc:	7f 90       	pop	r7
    12be:	6f 90       	pop	r6
    12c0:	5f 90       	pop	r5
    12c2:	4f 90       	pop	r4
    12c4:	08 95       	ret

000012c6 <find_if_reach>:



int find_if_reach(float x, float y, float *goal){
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
	float dist = (x - goal[0]) * (x - goal[0]);
    12d2:	f8 01       	movw	r30, r16
    12d4:	20 81       	ld	r18, Z
    12d6:	31 81       	ldd	r19, Z+1	; 0x01
    12d8:	42 81       	ldd	r20, Z+2	; 0x02
    12da:	53 81       	ldd	r21, Z+3	; 0x03
    12dc:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
	m_usb_tx_string("dist: ");
    12ec:	88 ea       	ldi	r24, 0xA8	; 168
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(dist); 
    12f4:	c7 01       	movw	r24, r14
    12f6:	b6 01       	movw	r22, r12
    12f8:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    12fc:	6b 01       	movw	r12, r22
    12fe:	7c 01       	movw	r14, r24
    1300:	cb 01       	movw	r24, r22
    1302:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1306:	86 ea       	ldi	r24, 0xA6	; 166
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	if (abs(dist) < dist_threshold){
    130e:	96 01       	movw	r18, r12
    1310:	dd 20       	and	r13, r13
    1312:	24 f4       	brge	.+8      	; 0x131c <find_if_reach+0x56>
    1314:	22 27       	eor	r18, r18
    1316:	33 27       	eor	r19, r19
    1318:	2c 19       	sub	r18, r12
    131a:	3d 09       	sbc	r19, r13
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	40 91 7e 01 	lds	r20, 0x017E
    1324:	50 91 7f 01 	lds	r21, 0x017F
    1328:	24 17       	cp	r18, r20
    132a:	35 07       	cpc	r19, r21
    132c:	14 f0       	brlt	.+4      	; 0x1332 <find_if_reach+0x6c>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	08 95       	ret

00001340 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int state, float *goal, float *c_wii, float *dir){
    1340:	2f 92       	push	r2
    1342:	3f 92       	push	r3
    1344:	4f 92       	push	r4
    1346:	5f 92       	push	r5
    1348:	6f 92       	push	r6
    134a:	7f 92       	push	r7
    134c:	8f 92       	push	r8
    134e:	9f 92       	push	r9
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	c6 58       	subi	r28, 0x86	; 134
    136a:	d1 09       	sbc	r29, r1
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cd 57       	subi	r28, 0x7D	; 125
    1378:	df 4f       	sbci	r29, 0xFF	; 255
    137a:	99 83       	std	Y+1, r25	; 0x01
    137c:	88 83       	st	Y, r24
    137e:	c3 58       	subi	r28, 0x83	; 131
    1380:	d0 40       	sbci	r29, 0x00	; 0
    1382:	cb 57       	subi	r28, 0x7B	; 123
    1384:	df 4f       	sbci	r29, 0xFF	; 255
    1386:	79 83       	std	Y+1, r23	; 0x01
    1388:	68 83       	st	Y, r22
    138a:	c5 58       	subi	r28, 0x85	; 133
    138c:	d0 40       	sbci	r29, 0x00	; 0
    138e:	ed 96       	adiw	r28, 0x3d	; 61
    1390:	5f af       	std	Y+63, r21	; 0x3f
    1392:	4e af       	std	Y+62, r20	; 0x3e
    1394:	ed 97       	sbiw	r28, 0x3d	; 61
    1396:	ef 96       	adiw	r28, 0x3f	; 63
    1398:	3f af       	std	Y+63, r19	; 0x3f
    139a:	2e af       	std	Y+62, r18	; 0x3e
    139c:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    139e:	86 e6       	ldi	r24, 0x66	; 102
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <m_wii_read>
			m_usb_tx_int(blobs[0]);
    13a6:	0f 2e       	mov	r0, r31
    13a8:	f6 e6       	ldi	r31, 0x66	; 102
    13aa:	8f 2e       	mov	r8, r31
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
    13ae:	9f 2e       	mov	r9, r31
    13b0:	f0 2d       	mov	r31, r0
    13b2:	d4 01       	movw	r26, r8
    13b4:	8d 91       	ld	r24, X+
    13b6:	9c 91       	ld	r25, X
    13b8:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string(" ");
    13bc:	8d e2       	ldi	r24, 0x2D	; 45
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(blobs[1]);
    13c4:	08 e6       	ldi	r16, 0x68	; 104
    13c6:	11 e0       	ldi	r17, 0x01	; 1
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string(" ");
    13d2:	8b e2       	ldi	r24, 0x2B	; 43
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(blobs[3]);
    13da:	0f 2e       	mov	r0, r31
    13dc:	fc e6       	ldi	r31, 0x6C	; 108
    13de:	af 2e       	mov	r10, r31
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
    13e2:	bf 2e       	mov	r11, r31
    13e4:	f0 2d       	mov	r31, r0
    13e6:	d5 01       	movw	r26, r10
    13e8:	8d 91       	ld	r24, X+
    13ea:	9c 91       	ld	r25, X
    13ec:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string(" ");
    13f0:	89 e2       	ldi	r24, 0x29	; 41
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(blobs[4]);
    13f8:	0f 2e       	mov	r0, r31
    13fa:	fe e6       	ldi	r31, 0x6E	; 110
    13fc:	6f 2e       	mov	r6, r31
    13fe:	f1 e0       	ldi	r31, 0x01	; 1
    1400:	7f 2e       	mov	r7, r31
    1402:	f0 2d       	mov	r31, r0
    1404:	f3 01       	movw	r30, r6
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string(" ");
    140e:	87 e2       	ldi	r24, 0x27	; 39
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(blobs[6]);
    1416:	0f 2e       	mov	r0, r31
    1418:	f2 e7       	ldi	r31, 0x72	; 114
    141a:	cf 2e       	mov	r12, r31
    141c:	f1 e0       	ldi	r31, 0x01	; 1
    141e:	df 2e       	mov	r13, r31
    1420:	f0 2d       	mov	r31, r0
    1422:	d6 01       	movw	r26, r12
    1424:	8d 91       	ld	r24, X+
    1426:	9c 91       	ld	r25, X
    1428:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string(" ");
    142c:	85 e2       	ldi	r24, 0x25	; 37
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(blobs[7]);
    1434:	0f 2e       	mov	r0, r31
    1436:	f4 e7       	ldi	r31, 0x74	; 116
    1438:	4f 2e       	mov	r4, r31
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	5f 2e       	mov	r5, r31
    143e:	f0 2d       	mov	r31, r0
    1440:	f2 01       	movw	r30, r4
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string(" ");
    144a:	83 e2       	ldi	r24, 0x23	; 35
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(blobs[9]);
    1452:	0f 2e       	mov	r0, r31
    1454:	f8 e7       	ldi	r31, 0x78	; 120
    1456:	ef 2e       	mov	r14, r31
    1458:	f1 e0       	ldi	r31, 0x01	; 1
    145a:	ff 2e       	mov	r15, r31
    145c:	f0 2d       	mov	r31, r0
    145e:	d7 01       	movw	r26, r14
    1460:	8d 91       	ld	r24, X+
    1462:	9c 91       	ld	r25, X
    1464:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string(" ");
    1468:	81 e2       	ldi	r24, 0x21	; 33
    146a:	92 e0       	ldi	r25, 0x02	; 2
    146c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(blobs[10]);
    1470:	0f 2e       	mov	r0, r31
    1472:	fa e7       	ldi	r31, 0x7A	; 122
    1474:	2f 2e       	mov	r2, r31
    1476:	f1 e0       	ldi	r31, 0x01	; 1
    1478:	3f 2e       	mov	r3, r31
    147a:	f0 2d       	mov	r31, r0
    147c:	f1 01       	movw	r30, r2
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string("\n");
    1486:	8f e1       	ldi	r24, 0x1F	; 31
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			
	//unsigned int data[8] = {740, 272, 777, 282, 715, 311, 755, 356};
	//float x[4] = {data[0], data[2], data[4], data[6]};
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    148e:	d4 01       	movw	r26, r8
    1490:	6d 91       	ld	r22, X+
    1492:	7c 91       	ld	r23, X
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    149c:	69 83       	std	Y+1, r22	; 0x01
    149e:	7a 83       	std	Y+2, r23	; 0x02
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	f5 01       	movw	r30, r10
    14a6:	60 81       	ld	r22, Z
    14a8:	71 81       	ldd	r23, Z+1	; 0x01
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    14b2:	6d 83       	std	Y+5, r22	; 0x05
    14b4:	7e 83       	std	Y+6, r23	; 0x06
    14b6:	8f 83       	std	Y+7, r24	; 0x07
    14b8:	98 87       	std	Y+8, r25	; 0x08
    14ba:	d6 01       	movw	r26, r12
    14bc:	6d 91       	ld	r22, X+
    14be:	7c 91       	ld	r23, X
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    14c8:	69 87       	std	Y+9, r22	; 0x09
    14ca:	7a 87       	std	Y+10, r23	; 0x0a
    14cc:	8b 87       	std	Y+11, r24	; 0x0b
    14ce:	9c 87       	std	Y+12, r25	; 0x0c
    14d0:	f7 01       	movw	r30, r14
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    14de:	6d 87       	std	Y+13, r22	; 0x0d
    14e0:	7e 87       	std	Y+14, r23	; 0x0e
    14e2:	8f 87       	std	Y+15, r24	; 0x0f
    14e4:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    14e6:	d8 01       	movw	r26, r16
    14e8:	6d 91       	ld	r22, X+
    14ea:	7c 91       	ld	r23, X
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    14f4:	69 8b       	std	Y+17, r22	; 0x11
    14f6:	7a 8b       	std	Y+18, r23	; 0x12
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
    14fa:	9c 8b       	std	Y+20, r25	; 0x14
    14fc:	f3 01       	movw	r30, r6
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    150a:	6d 8b       	std	Y+21, r22	; 0x15
    150c:	7e 8b       	std	Y+22, r23	; 0x16
    150e:	8f 8b       	std	Y+23, r24	; 0x17
    1510:	98 8f       	std	Y+24, r25	; 0x18
    1512:	d2 01       	movw	r26, r4
    1514:	6d 91       	ld	r22, X+
    1516:	7c 91       	ld	r23, X
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    1520:	69 8f       	std	Y+25, r22	; 0x19
    1522:	7a 8f       	std	Y+26, r23	; 0x1a
    1524:	8b 8f       	std	Y+27, r24	; 0x1b
    1526:	9c 8f       	std	Y+28, r25	; 0x1c
    1528:	f1 01       	movw	r30, r2
    152a:	60 81       	ld	r22, Z
    152c:	71 81       	ldd	r23, Z+1	; 0x01
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatunsisf>
    1536:	6d 8f       	std	Y+29, r22	; 0x1d
    1538:	7e 8f       	std	Y+30, r23	; 0x1e
    153a:	8f 8f       	std	Y+31, r24	; 0x1f
    153c:	98 a3       	std	Y+32, r25	; 0x20
    153e:	9e 01       	movw	r18, r28
    1540:	2f 5f       	subi	r18, 0xFF	; 255
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	eb 96       	adiw	r28, 0x3b	; 59
    1546:	3f af       	std	Y+63, r19	; 0x3f
    1548:	2e af       	std	Y+62, r18	; 0x3e
    154a:	eb 97       	sbiw	r28, 0x3b	; 59
    154c:	ce 01       	movw	r24, r28
    154e:	41 96       	adiw	r24, 0x11	; 17
    1550:	e3 96       	adiw	r28, 0x33	; 51
    1552:	9f af       	std	Y+63, r25	; 0x3f
    1554:	8e af       	std	Y+62, r24	; 0x3e
    1556:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1558:	ab 96       	adiw	r28, 0x2b	; 43
    155a:	1f ae       	std	Y+63, r1	; 0x3f
    155c:	1e ae       	std	Y+62, r1	; 0x3e
    155e:	ab 97       	sbiw	r28, 0x2b	; 43
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    1560:	e9 96       	adiw	r28, 0x39	; 57
    1562:	1f ae       	std	Y+63, r1	; 0x3f
    1564:	1e ae       	std	Y+62, r1	; 0x3e
    1566:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1568:	ab 96       	adiw	r28, 0x2b	; 43
    156a:	ae ad       	ldd	r26, Y+62	; 0x3e
    156c:	bf ad       	ldd	r27, Y+63	; 0x3f
    156e:	ab 97       	sbiw	r28, 0x2b	; 43
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	e7 96       	adiw	r28, 0x37	; 55
    1574:	bf af       	std	Y+63, r27	; 0x3f
    1576:	ae af       	std	Y+62, r26	; 0x3e
    1578:	e7 97       	sbiw	r28, 0x37	; 55
    157a:	14 97       	sbiw	r26, 0x04	; 4
    157c:	0c f0       	brlt	.+2      	; 0x1580 <localization+0x240>
    157e:	38 c6       	rjmp	.+3184   	; 0x21f0 <localization+0xeb0>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1580:	eb 96       	adiw	r28, 0x3b	; 59
    1582:	ee ad       	ldd	r30, Y+62	; 0x3e
    1584:	ff ad       	ldd	r31, Y+63	; 0x3f
    1586:	eb 97       	sbiw	r28, 0x3b	; 59
    1588:	81 90       	ld	r8, Z+
    158a:	91 90       	ld	r9, Z+
    158c:	a1 90       	ld	r10, Z+
    158e:	b1 90       	ld	r11, Z+
    1590:	e9 96       	adiw	r28, 0x39	; 57
    1592:	8e ad       	ldd	r24, Y+62	; 0x3e
    1594:	9f ad       	ldd	r25, Y+63	; 0x3f
    1596:	e9 97       	sbiw	r28, 0x39	; 57
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	29 e3       	ldi	r18, 0x39	; 57
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	2c 0f       	add	r18, r28
    15a2:	3d 1f       	adc	r19, r29
    15a4:	28 0f       	add	r18, r24
    15a6:	39 1f       	adc	r19, r25
    15a8:	a3 96       	adiw	r28, 0x23	; 35
    15aa:	3f af       	std	Y+63, r19	; 0x3f
    15ac:	2e af       	std	Y+62, r18	; 0x3e
    15ae:	a3 97       	sbiw	r28, 0x23	; 35
    15b0:	a5 e4       	ldi	r26, 0x45	; 69
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ac 0f       	add	r26, r28
    15b6:	bd 1f       	adc	r27, r29
    15b8:	a8 0f       	add	r26, r24
    15ba:	b9 1f       	adc	r27, r25
    15bc:	a7 96       	adiw	r28, 0x27	; 39
    15be:	bf af       	std	Y+63, r27	; 0x3f
    15c0:	ae af       	std	Y+62, r26	; 0x3e
    15c2:	a7 97       	sbiw	r28, 0x27	; 39
    15c4:	e9 96       	adiw	r28, 0x39	; 57
    15c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    15c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    15ca:	e9 97       	sbiw	r28, 0x39	; 57
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0f 2e       	mov	r0, r31
    15d6:	f1 e2       	ldi	r31, 0x21	; 33
    15d8:	6f 2e       	mov	r6, r31
    15da:	71 2c       	mov	r7, r1
    15dc:	f0 2d       	mov	r31, r0
    15de:	6c 0e       	add	r6, r28
    15e0:	7d 1e       	adc	r7, r29
    15e2:	68 0e       	add	r6, r24
    15e4:	79 1e       	adc	r7, r25
    15e6:	e3 96       	adiw	r28, 0x33	; 51
    15e8:	2e ad       	ldd	r18, Y+62	; 0x3e
    15ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    15ec:	e3 97       	sbiw	r28, 0x33	; 51
    15ee:	2c 5f       	subi	r18, 0xFC	; 252
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    15f4:	e7 96       	adiw	r28, 0x37	; 55
    15f6:	0e ad       	ldd	r16, Y+62	; 0x3e
    15f8:	1f ad       	ldd	r17, Y+63	; 0x3f
    15fa:	e7 97       	sbiw	r28, 0x37	; 55
    15fc:	e1 96       	adiw	r28, 0x31	; 49
    15fe:	8c ae       	std	Y+60, r8	; 0x3c
    1600:	9d ae       	std	Y+61, r9	; 0x3d
    1602:	ae ae       	std	Y+62, r10	; 0x3e
    1604:	bf ae       	std	Y+63, r11	; 0x3f
    1606:	e1 97       	sbiw	r28, 0x31	; 49
    1608:	59 01       	movw	r10, r18
    160a:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 ec       	ldi	r19, 0xC0	; 192
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	54 e4       	ldi	r21, 0x44	; 68
    1614:	e1 96       	adiw	r28, 0x31	; 49
    1616:	6c ad       	ldd	r22, Y+60	; 0x3c
    1618:	7d ad       	ldd	r23, Y+61	; 0x3d
    161a:	8e ad       	ldd	r24, Y+62	; 0x3e
    161c:	9f ad       	ldd	r25, Y+63	; 0x3f
    161e:	e1 97       	sbiw	r28, 0x31	; 49
    1620:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    1624:	88 23       	and	r24, r24
    1626:	09 f4       	brne	.+2      	; 0x162a <localization+0x2ea>
    1628:	70 c0       	rjmp	.+224    	; 0x170a <localization+0x3ca>
    162a:	e3 96       	adiw	r28, 0x33	; 51
    162c:	ae ad       	ldd	r26, Y+62	; 0x3e
    162e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1630:	e3 97       	sbiw	r28, 0x33	; 51
    1632:	cd 90       	ld	r12, X+
    1634:	dd 90       	ld	r13, X+
    1636:	ed 90       	ld	r14, X+
    1638:	fc 90       	ld	r15, X
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 ec       	ldi	r19, 0xC0	; 192
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	54 e4       	ldi	r21, 0x44	; 68
    1642:	c7 01       	movw	r24, r14
    1644:	b6 01       	movw	r22, r12
    1646:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    164a:	88 23       	and	r24, r24
    164c:	09 f4       	brne	.+2      	; 0x1650 <localization+0x310>
    164e:	5d c0       	rjmp	.+186    	; 0x170a <localization+0x3ca>
    1650:	f1 01       	movw	r30, r2
    1652:	40 80       	ld	r4, Z
    1654:	51 80       	ldd	r5, Z+1	; 0x01
    1656:	62 80       	ldd	r6, Z+2	; 0x02
    1658:	73 80       	ldd	r7, Z+3	; 0x03
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 ec       	ldi	r19, 0xC0	; 192
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	54 e4       	ldi	r21, 0x44	; 68
    1662:	c3 01       	movw	r24, r6
    1664:	b2 01       	movw	r22, r4
    1666:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    166a:	88 23       	and	r24, r24
    166c:	09 f4       	brne	.+2      	; 0x1670 <localization+0x330>
    166e:	4d c0       	rjmp	.+154    	; 0x170a <localization+0x3ca>
    1670:	d5 01       	movw	r26, r10
    1672:	8d 91       	ld	r24, X+
    1674:	9d 91       	ld	r25, X+
    1676:	0d 90       	ld	r0, X+
    1678:	bc 91       	ld	r27, X
    167a:	a0 2d       	mov	r26, r0
    167c:	c1 58       	subi	r28, 0x81	; 129
    167e:	df 4f       	sbci	r29, 0xFF	; 255
    1680:	88 83       	st	Y, r24
    1682:	99 83       	std	Y+1, r25	; 0x01
    1684:	aa 83       	std	Y+2, r26	; 0x02
    1686:	bb 83       	std	Y+3, r27	; 0x03
    1688:	cf 57       	subi	r28, 0x7F	; 127
    168a:	d0 40       	sbci	r29, 0x00	; 0
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 ec       	ldi	r19, 0xC0	; 192
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    169c:	88 23       	and	r24, r24
    169e:	a9 f1       	breq	.+106    	; 0x170a <localization+0x3ca>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    16a0:	a3 01       	movw	r20, r6
    16a2:	92 01       	movw	r18, r4
    16a4:	e1 96       	adiw	r28, 0x31	; 49
    16a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    16a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    16aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ae:	e1 97       	sbiw	r28, 0x31	; 49
    16b0:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    16b4:	2b 01       	movw	r4, r22
    16b6:	3c 01       	movw	r6, r24
    16b8:	c1 58       	subi	r28, 0x81	; 129
    16ba:	df 4f       	sbci	r29, 0xFF	; 255
    16bc:	28 81       	ld	r18, Y
    16be:	39 81       	ldd	r19, Y+1	; 0x01
    16c0:	4a 81       	ldd	r20, Y+2	; 0x02
    16c2:	5b 81       	ldd	r21, Y+3	; 0x03
    16c4:	cf 57       	subi	r28, 0x7F	; 127
    16c6:	d0 40       	sbci	r29, 0x00	; 0
    16c8:	c7 01       	movw	r24, r14
    16ca:	b6 01       	movw	r22, r12
    16cc:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    16d0:	6b 01       	movw	r12, r22
    16d2:	7c 01       	movw	r14, r24
    16d4:	a3 01       	movw	r20, r6
    16d6:	92 01       	movw	r18, r4
    16d8:	c3 01       	movw	r24, r6
    16da:	b2 01       	movw	r22, r4
    16dc:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    16e0:	2b 01       	movw	r4, r22
    16e2:	3c 01       	movw	r6, r24
    16e4:	a7 01       	movw	r20, r14
    16e6:	96 01       	movw	r18, r12
    16e8:	c7 01       	movw	r24, r14
    16ea:	b6 01       	movw	r22, r12
    16ec:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	c3 01       	movw	r24, r6
    16f6:	b2 01       	movw	r22, r4
    16f8:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    16fc:	0e 94 82 1b 	call	0x3704	; 0x3704 <sqrt>
    1700:	f4 01       	movw	r30, r8
    1702:	60 83       	st	Z, r22
    1704:	71 83       	std	Z+1, r23	; 0x01
    1706:	82 83       	std	Z+2, r24	; 0x02
    1708:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    170a:	a3 96       	adiw	r28, 0x23	; 35
    170c:	ae ad       	ldd	r26, Y+62	; 0x3e
    170e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1710:	a3 97       	sbiw	r28, 0x23	; 35
    1712:	ab 96       	adiw	r28, 0x2b	; 43
    1714:	ee ad       	ldd	r30, Y+62	; 0x3e
    1716:	ff ad       	ldd	r31, Y+63	; 0x3f
    1718:	ab 97       	sbiw	r28, 0x2b	; 43
    171a:	ed 93       	st	X+, r30
    171c:	fd 93       	st	X+, r31
    171e:	a3 96       	adiw	r28, 0x23	; 35
    1720:	bf af       	std	Y+63, r27	; 0x3f
    1722:	ae af       	std	Y+62, r26	; 0x3e
    1724:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1726:	a7 96       	adiw	r28, 0x27	; 39
    1728:	ae ad       	ldd	r26, Y+62	; 0x3e
    172a:	bf ad       	ldd	r27, Y+63	; 0x3f
    172c:	a7 97       	sbiw	r28, 0x27	; 39
    172e:	0d 93       	st	X+, r16
    1730:	1d 93       	st	X+, r17
    1732:	a7 96       	adiw	r28, 0x27	; 39
    1734:	bf af       	std	Y+63, r27	; 0x3f
    1736:	ae af       	std	Y+62, r26	; 0x3e
    1738:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    173a:	0f 5f       	subi	r16, 0xFF	; 255
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	b4 e0       	ldi	r27, 0x04	; 4
    1740:	2b 0e       	add	r2, r27
    1742:	31 1c       	adc	r3, r1
    1744:	e4 e0       	ldi	r30, 0x04	; 4
    1746:	ae 0e       	add	r10, r30
    1748:	b1 1c       	adc	r11, r1
    174a:	f4 e0       	ldi	r31, 0x04	; 4
    174c:	8f 0e       	add	r8, r31
    174e:	91 1c       	adc	r9, r1
    1750:	04 30       	cpi	r16, 0x04	; 4
    1752:	11 05       	cpc	r17, r1
    1754:	09 f0       	breq	.+2      	; 0x1758 <localization+0x418>
    1756:	5a cf       	rjmp	.-332    	; 0x160c <localization+0x2cc>
    1758:	e9 96       	adiw	r28, 0x39	; 57
    175a:	8e ad       	ldd	r24, Y+62	; 0x3e
    175c:	9f ad       	ldd	r25, Y+63	; 0x3f
    175e:	e9 97       	sbiw	r28, 0x39	; 57
    1760:	e7 96       	adiw	r28, 0x37	; 55
    1762:	2e ad       	ldd	r18, Y+62	; 0x3e
    1764:	3f ad       	ldd	r19, Y+63	; 0x3f
    1766:	e7 97       	sbiw	r28, 0x37	; 55
    1768:	82 1b       	sub	r24, r18
    176a:	93 0b       	sbc	r25, r19
    176c:	dc 01       	movw	r26, r24
    176e:	14 96       	adiw	r26, 0x04	; 4
    1770:	e9 96       	adiw	r28, 0x39	; 57
    1772:	bf af       	std	Y+63, r27	; 0x3f
    1774:	ae af       	std	Y+62, r26	; 0x3e
    1776:	e9 97       	sbiw	r28, 0x39	; 57
    1778:	eb 96       	adiw	r28, 0x3b	; 59
    177a:	ee ad       	ldd	r30, Y+62	; 0x3e
    177c:	ff ad       	ldd	r31, Y+63	; 0x3f
    177e:	eb 97       	sbiw	r28, 0x3b	; 59
    1780:	34 96       	adiw	r30, 0x04	; 4
    1782:	eb 96       	adiw	r28, 0x3b	; 59
    1784:	ff af       	std	Y+63, r31	; 0x3f
    1786:	ee af       	std	Y+62, r30	; 0x3e
    1788:	eb 97       	sbiw	r28, 0x3b	; 59
    178a:	e3 96       	adiw	r28, 0x33	; 51
    178c:	2e ad       	ldd	r18, Y+62	; 0x3e
    178e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1790:	e3 97       	sbiw	r28, 0x33	; 51
    1792:	2c 5f       	subi	r18, 0xFC	; 252
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	e3 96       	adiw	r28, 0x33	; 51
    1798:	3f af       	std	Y+63, r19	; 0x3f
    179a:	2e af       	std	Y+62, r18	; 0x3e
    179c:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    179e:	e7 96       	adiw	r28, 0x37	; 55
    17a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    17a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    17a4:	e7 97       	sbiw	r28, 0x37	; 55
    17a6:	03 97       	sbiw	r24, 0x03	; 3
    17a8:	49 f0       	breq	.+18     	; 0x17bc <localization+0x47c>
    17aa:	e7 96       	adiw	r28, 0x37	; 55
    17ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    17ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    17b0:	e7 97       	sbiw	r28, 0x37	; 55
    17b2:	ab 96       	adiw	r28, 0x2b	; 43
    17b4:	bf af       	std	Y+63, r27	; 0x3f
    17b6:	ae af       	std	Y+62, r26	; 0x3e
    17b8:	ab 97       	sbiw	r28, 0x2b	; 43
    17ba:	d6 ce       	rjmp	.-596    	; 0x1568 <localization+0x228>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    17bc:	e9 96       	adiw	r28, 0x39	; 57
    17be:	ee ad       	ldd	r30, Y+62	; 0x3e
    17c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    17c2:	e9 97       	sbiw	r28, 0x39	; 57
    17c4:	1e 16       	cp	r1, r30
    17c6:	1f 06       	cpc	r1, r31
    17c8:	84 f5       	brge	.+96     	; 0x182a <localization+0x4ea>
    17ca:	6e 01       	movw	r12, r28
    17cc:	f1 e2       	ldi	r31, 0x21	; 33
    17ce:	cf 0e       	add	r12, r31
    17d0:	d1 1c       	adc	r13, r1
    17d2:	21 2c       	mov	r2, r1
    17d4:	31 2c       	mov	r3, r1
    17d6:	00 e0       	ldi	r16, 0x00	; 0
    17d8:	10 e0       	ldi	r17, 0x00	; 0
    17da:	e1 2c       	mov	r14, r1
    17dc:	f1 2c       	mov	r15, r1
    17de:	e9 96       	adiw	r28, 0x39	; 57
    17e0:	ae ac       	ldd	r10, Y+62	; 0x3e
    17e2:	bf ac       	ldd	r11, Y+63	; 0x3f
    17e4:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    17e6:	d6 01       	movw	r26, r12
    17e8:	4d 90       	ld	r4, X+
    17ea:	5d 90       	ld	r5, X+
    17ec:	6d 90       	ld	r6, X+
    17ee:	7d 90       	ld	r7, X+
    17f0:	6d 01       	movw	r12, r26
    17f2:	b8 01       	movw	r22, r16
    17f4:	88 27       	eor	r24, r24
    17f6:	77 fd       	sbrc	r23, 7
    17f8:	80 95       	com	r24
    17fa:	98 2f       	mov	r25, r24
    17fc:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
    1800:	9b 01       	movw	r18, r22
    1802:	ac 01       	movw	r20, r24
    1804:	c3 01       	movw	r24, r6
    1806:	b2 01       	movw	r22, r4
    1808:	0e 94 17 1b 	call	0x362e	; 0x362e <__gesf2>
    180c:	18 16       	cp	r1, r24
    180e:	34 f4       	brge	.+12     	; 0x181c <localization+0x4dc>
			indmax = i;
			dmax = d[i];
    1810:	c3 01       	movw	r24, r6
    1812:	b2 01       	movw	r22, r4
    1814:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    1818:	8b 01       	movw	r16, r22
    181a:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    181c:	bf ef       	ldi	r27, 0xFF	; 255
    181e:	eb 1a       	sub	r14, r27
    1820:	fb 0a       	sbc	r15, r27
    1822:	ea 14       	cp	r14, r10
    1824:	fb 04       	cpc	r15, r11
    1826:	f9 f6       	brne	.-66     	; 0x17e6 <localization+0x4a6>
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <localization+0x4f2>
    182a:	21 2c       	mov	r2, r1
    182c:	31 2c       	mov	r3, r1
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1832:	89 e1       	ldi	r24, 0x19	; 25
    1834:	92 e0       	ldi	r25, 0x02	; 2
    1836:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(dmax);
    183a:	c8 01       	movw	r24, r16
    183c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1840:	87 e1       	ldi	r24, 0x17	; 23
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1848:	e9 96       	adiw	r28, 0x39	; 57
    184a:	ee ad       	ldd	r30, Y+62	; 0x3e
    184c:	ff ad       	ldd	r31, Y+63	; 0x3f
    184e:	e9 97       	sbiw	r28, 0x39	; 57
    1850:	1e 16       	cp	r1, r30
    1852:	1f 06       	cpc	r1, r31
    1854:	dc f5       	brge	.+118    	; 0x18cc <localization+0x58c>
    1856:	6e 01       	movw	r12, r28
    1858:	f1 e2       	ldi	r31, 0x21	; 33
    185a:	cf 0e       	add	r12, r31
    185c:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    185e:	a3 96       	adiw	r28, 0x23	; 35
    1860:	1f ae       	std	Y+63, r1	; 0x3f
    1862:	1e ae       	std	Y+62, r1	; 0x3e
    1864:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    1866:	0f 2e       	mov	r0, r31
    1868:	f0 e1       	ldi	r31, 0x10	; 16
    186a:	af 2e       	mov	r10, r31
    186c:	f7 e2       	ldi	r31, 0x27	; 39
    186e:	bf 2e       	mov	r11, r31
    1870:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    1872:	e1 2c       	mov	r14, r1
    1874:	f1 2c       	mov	r15, r1
    1876:	48 01       	movw	r8, r16
    1878:	e9 96       	adiw	r28, 0x39	; 57
    187a:	0e ad       	ldd	r16, Y+62	; 0x3e
    187c:	1f ad       	ldd	r17, Y+63	; 0x3f
    187e:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    1880:	d6 01       	movw	r26, r12
    1882:	4d 90       	ld	r4, X+
    1884:	5d 90       	ld	r5, X+
    1886:	6d 90       	ld	r6, X+
    1888:	7d 90       	ld	r7, X+
    188a:	6d 01       	movw	r12, r26
    188c:	b5 01       	movw	r22, r10
    188e:	88 27       	eor	r24, r24
    1890:	77 fd       	sbrc	r23, 7
    1892:	80 95       	com	r24
    1894:	98 2f       	mov	r25, r24
    1896:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	c3 01       	movw	r24, r6
    18a0:	b2 01       	movw	r22, r4
    18a2:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    18a6:	88 23       	and	r24, r24
    18a8:	4c f4       	brge	.+18     	; 0x18bc <localization+0x57c>
			indmin = i;
			dmin = d[i];
    18aa:	c3 01       	movw	r24, r6
    18ac:	b2 01       	movw	r22, r4
    18ae:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    18b2:	5b 01       	movw	r10, r22
    18b4:	a3 96       	adiw	r28, 0x23	; 35
    18b6:	ff ae       	std	Y+63, r15	; 0x3f
    18b8:	ee ae       	std	Y+62, r14	; 0x3e
    18ba:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    18bc:	bf ef       	ldi	r27, 0xFF	; 255
    18be:	eb 1a       	sub	r14, r27
    18c0:	fb 0a       	sbc	r15, r27
    18c2:	e0 16       	cp	r14, r16
    18c4:	f1 06       	cpc	r15, r17
    18c6:	e1 f6       	brne	.-72     	; 0x1880 <localization+0x540>
    18c8:	84 01       	movw	r16, r8
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <localization+0x594>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    18cc:	a3 96       	adiw	r28, 0x23	; 35
    18ce:	1f ae       	std	Y+63, r1	; 0x3f
    18d0:	1e ae       	std	Y+62, r1	; 0x3e
    18d2:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    18d4:	80 90 0e 01 	lds	r8, 0x010E
    18d8:	90 90 0f 01 	lds	r9, 0x010F
    18dc:	a0 90 10 01 	lds	r10, 0x0110
    18e0:	b0 90 11 01 	lds	r11, 0x0111
    18e4:	b8 01       	movw	r22, r16
    18e6:	88 27       	eor	r24, r24
    18e8:	77 fd       	sbrc	r23, 7
    18ea:	80 95       	com	r24
    18ec:	98 2f       	mov	r25, r24
    18ee:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
    18f2:	a5 01       	movw	r20, r10
    18f4:	94 01       	movw	r18, r8
    18f6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    18fa:	2b 01       	movw	r4, r22
    18fc:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    18fe:	c0 90 12 01 	lds	r12, 0x0112
    1902:	d0 90 13 01 	lds	r13, 0x0113
    1906:	e0 90 14 01 	lds	r14, 0x0114
    190a:	f0 90 15 01 	lds	r15, 0x0115
    190e:	e2 e0       	ldi	r30, 0x02	; 2
    1910:	f1 e0       	ldi	r31, 0x01	; 1
    1912:	ab 96       	adiw	r28, 0x2b	; 43
    1914:	ff af       	std	Y+63, r31	; 0x3f
    1916:	ee af       	std	Y+62, r30	; 0x3e
    1918:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    191a:	a7 96       	adiw	r28, 0x27	; 39
    191c:	1f ae       	std	Y+63, r1	; 0x3f
    191e:	1e ae       	std	Y+62, r1	; 0x3e
    1920:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    1922:	01 e0       	ldi	r16, 0x01	; 1
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	af 96       	adiw	r28, 0x2f	; 47
    1928:	3f ae       	std	Y+63, r3	; 0x3f
    192a:	2e ae       	std	Y+62, r2	; 0x3e
    192c:	af 97       	sbiw	r28, 0x2f	; 47
    192e:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    1930:	d1 01       	movw	r26, r2
    1932:	2d 91       	ld	r18, X+
    1934:	3d 91       	ld	r19, X+
    1936:	4d 91       	ld	r20, X+
    1938:	5d 91       	ld	r21, X+
    193a:	1d 01       	movw	r2, r26
    193c:	c3 01       	movw	r24, r6
    193e:	b2 01       	movw	r22, r4
    1940:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1944:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    1948:	9b 01       	movw	r18, r22
    194a:	77 23       	and	r23, r23
    194c:	24 f4       	brge	.+8      	; 0x1956 <localization+0x616>
    194e:	22 27       	eor	r18, r18
    1950:	33 27       	eor	r19, r19
    1952:	26 1b       	sub	r18, r22
    1954:	37 0b       	sbc	r19, r23
    1956:	b9 01       	movw	r22, r18
    1958:	88 27       	eor	r24, r24
    195a:	77 fd       	sbrc	r23, 7
    195c:	80 95       	com	r24
    195e:	98 2f       	mov	r25, r24
    1960:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatsisf>
    1964:	a7 01       	movw	r20, r14
    1966:	96 01       	movw	r18, r12
    1968:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    196c:	88 23       	and	r24, r24
    196e:	24 f4       	brge	.+8      	; 0x1978 <localization+0x638>
    1970:	a7 96       	adiw	r28, 0x27	; 39
    1972:	1f af       	std	Y+63, r17	; 0x3f
    1974:	0e af       	std	Y+62, r16	; 0x3e
    1976:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1978:	0f 5f       	subi	r16, 0xFF	; 255
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	04 30       	cpi	r16, 0x04	; 4
    197e:	11 05       	cpc	r17, r1
    1980:	b9 f6       	brne	.-82     	; 0x1930 <localization+0x5f0>
    1982:	af 96       	adiw	r28, 0x2f	; 47
    1984:	2e ac       	ldd	r2, Y+62	; 0x3e
    1986:	3f ac       	ldd	r3, Y+63	; 0x3f
    1988:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    198a:	65 96       	adiw	r28, 0x15	; 21
    198c:	1c ae       	std	Y+60, r1	; 0x3c
    198e:	1d ae       	std	Y+61, r1	; 0x3d
    1990:	1e ae       	std	Y+62, r1	; 0x3e
    1992:	1f ae       	std	Y+63, r1	; 0x3f
    1994:	65 97       	sbiw	r28, 0x15	; 21
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e8       	ldi	r26, 0x80	; 128
    199c:	bf e3       	ldi	r27, 0x3F	; 63
    199e:	69 96       	adiw	r28, 0x19	; 25
    19a0:	8c af       	std	Y+60, r24	; 0x3c
    19a2:	9d af       	std	Y+61, r25	; 0x3d
    19a4:	ae af       	std	Y+62, r26	; 0x3e
    19a6:	bf af       	std	Y+63, r27	; 0x3f
    19a8:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    19aa:	a7 96       	adiw	r28, 0x27	; 39
    19ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    19ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b0:	a7 97       	sbiw	r28, 0x27	; 39
    19b2:	e2 30       	cpi	r30, 0x02	; 2
    19b4:	f1 05       	cpc	r31, r1
    19b6:	19 f0       	breq	.+6      	; 0x19be <localization+0x67e>
    19b8:	33 97       	sbiw	r30, 0x03	; 3
    19ba:	51 f1       	breq	.+84     	; 0x1a10 <localization+0x6d0>
    19bc:	5a c0       	rjmp	.+180    	; 0x1a72 <localization+0x732>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    19be:	a5 01       	movw	r20, r10
    19c0:	94 01       	movw	r18, r8
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	88 e6       	ldi	r24, 0x68	; 104
    19c8:	91 e4       	ldi	r25, 0x41	; 65
    19ca:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divsf3>
    19ce:	e1 96       	adiw	r28, 0x31	; 49
    19d0:	6c af       	std	Y+60, r22	; 0x3c
    19d2:	7d af       	std	Y+61, r23	; 0x3d
    19d4:	8e af       	std	Y+62, r24	; 0x3e
    19d6:	9f af       	std	Y+63, r25	; 0x3f
    19d8:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    19da:	84 e9       	ldi	r24, 0x94	; 148
    19dc:	97 e8       	ldi	r25, 0x87	; 135
    19de:	a5 ee       	ldi	r26, 0xE5	; 229
    19e0:	be e3       	ldi	r27, 0x3E	; 62
    19e2:	65 96       	adiw	r28, 0x15	; 21
    19e4:	8c af       	std	Y+60, r24	; 0x3c
    19e6:	9d af       	std	Y+61, r25	; 0x3d
    19e8:	ae af       	std	Y+62, r26	; 0x3e
    19ea:	bf af       	std	Y+63, r27	; 0x3f
    19ec:	65 97       	sbiw	r28, 0x15	; 21
    19ee:	81 ea       	ldi	r24, 0xA1	; 161
    19f0:	96 ed       	ldi	r25, 0xD6	; 214
    19f2:	a4 e6       	ldi	r26, 0x64	; 100
    19f4:	bf eb       	ldi	r27, 0xBF	; 191
    19f6:	69 96       	adiw	r28, 0x19	; 25
    19f8:	8c af       	std	Y+60, r24	; 0x3c
    19fa:	9d af       	std	Y+61, r25	; 0x3d
    19fc:	ae af       	std	Y+62, r26	; 0x3e
    19fe:	bf af       	std	Y+63, r27	; 0x3f
    1a00:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1a02:	e5 96       	adiw	r28, 0x35	; 53
    1a04:	1c ae       	std	Y+60, r1	; 0x3c
    1a06:	1d ae       	std	Y+61, r1	; 0x3d
    1a08:	1e ae       	std	Y+62, r1	; 0x3e
    1a0a:	1f ae       	std	Y+63, r1	; 0x3f
    1a0c:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1a0e:	45 c0       	rjmp	.+138    	; 0x1a9a <localization+0x75a>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1a10:	a5 01       	movw	r20, r10
    1a12:	94 01       	movw	r18, r8
    1a14:	61 ee       	ldi	r22, 0xE1	; 225
    1a16:	7a e7       	ldi	r23, 0x7A	; 122
    1a18:	8a e3       	ldi	r24, 0x3A	; 58
    1a1a:	91 e4       	ldi	r25, 0x41	; 65
    1a1c:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divsf3>
    1a20:	e5 96       	adiw	r28, 0x35	; 53
    1a22:	6c af       	std	Y+60, r22	; 0x3c
    1a24:	7d af       	std	Y+61, r23	; 0x3d
    1a26:	8e af       	std	Y+62, r24	; 0x3e
    1a28:	9f af       	std	Y+63, r25	; 0x3f
    1a2a:	e5 97       	sbiw	r28, 0x35	; 53
    1a2c:	a5 01       	movw	r20, r10
    1a2e:	94 01       	movw	r18, r8
    1a30:	63 e2       	ldi	r22, 0x23	; 35
    1a32:	7b ed       	ldi	r23, 0xDB	; 219
    1a34:	8b e0       	ldi	r24, 0x0B	; 11
    1a36:	91 ec       	ldi	r25, 0xC1	; 193
    1a38:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divsf3>
    1a3c:	e1 96       	adiw	r28, 0x31	; 49
    1a3e:	6c af       	std	Y+60, r22	; 0x3c
    1a40:	7d af       	std	Y+61, r23	; 0x3d
    1a42:	8e af       	std	Y+62, r24	; 0x3e
    1a44:	9f af       	std	Y+63, r25	; 0x3f
    1a46:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1a48:	86 e6       	ldi	r24, 0x66	; 102
    1a4a:	96 e6       	ldi	r25, 0x66	; 102
    1a4c:	a6 e7       	ldi	r26, 0x76	; 118
    1a4e:	bf eb       	ldi	r27, 0xBF	; 191
    1a50:	65 96       	adiw	r28, 0x15	; 21
    1a52:	8c af       	std	Y+60, r24	; 0x3c
    1a54:	9d af       	std	Y+61, r25	; 0x3d
    1a56:	ae af       	std	Y+62, r26	; 0x3e
    1a58:	bf af       	std	Y+63, r27	; 0x3f
    1a5a:	65 97       	sbiw	r28, 0x15	; 21
    1a5c:	8f e9       	ldi	r24, 0x9F	; 159
    1a5e:	9d ec       	ldi	r25, 0xCD	; 205
    1a60:	aa e8       	ldi	r26, 0x8A	; 138
    1a62:	be e3       	ldi	r27, 0x3E	; 62
    1a64:	69 96       	adiw	r28, 0x19	; 25
    1a66:	8c af       	std	Y+60, r24	; 0x3c
    1a68:	9d af       	std	Y+61, r25	; 0x3d
    1a6a:	ae af       	std	Y+62, r26	; 0x3e
    1a6c:	bf af       	std	Y+63, r27	; 0x3f
    1a6e:	69 97       	sbiw	r28, 0x19	; 25
			break;
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <localization+0x75a>
		default:
			break;
	}
	
	if (ca > 0){
    1a72:	a7 96       	adiw	r28, 0x27	; 39
    1a74:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a76:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a78:	a7 97       	sbiw	r28, 0x27	; 39
    1a7a:	12 16       	cp	r1, r18
    1a7c:	13 06       	cpc	r1, r19
    1a7e:	0c f0       	brlt	.+2      	; 0x1a82 <localization+0x742>
    1a80:	26 c3       	rjmp	.+1612   	; 0x20ce <localization+0xd8e>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1a82:	e5 96       	adiw	r28, 0x35	; 53
    1a84:	1c ae       	std	Y+60, r1	; 0x3c
    1a86:	1d ae       	std	Y+61, r1	; 0x3d
    1a88:	1e ae       	std	Y+62, r1	; 0x3e
    1a8a:	1f ae       	std	Y+63, r1	; 0x3f
    1a8c:	e5 97       	sbiw	r28, 0x35	; 53
    1a8e:	e1 96       	adiw	r28, 0x31	; 49
    1a90:	1c ae       	std	Y+60, r1	; 0x3c
    1a92:	1d ae       	std	Y+61, r1	; 0x3d
    1a94:	1e ae       	std	Y+62, r1	; 0x3e
    1a96:	1f ae       	std	Y+63, r1	; 0x3f
    1a98:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    1a9a:	f1 01       	movw	r30, r2
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	8c 0f       	add	r24, r28
    1aa6:	9d 1f       	adc	r25, r29
    1aa8:	e8 0f       	add	r30, r24
    1aaa:	f9 1f       	adc	r31, r25
    1aac:	00 ad       	ldd	r16, Z+56	; 0x38
    1aae:	11 ad       	ldd	r17, Z+57	; 0x39
    1ab0:	a3 96       	adiw	r28, 0x23	; 35
    1ab2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ab4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ab6:	a3 97       	sbiw	r28, 0x23	; 35
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	e8 0f       	add	r30, r24
    1abe:	f9 1f       	adc	r31, r25
    1ac0:	80 ad       	ldd	r24, Z+56	; 0x38
    1ac2:	91 ad       	ldd	r25, Z+57	; 0x39
    1ac4:	80 17       	cp	r24, r16
    1ac6:	91 07       	cpc	r25, r17
    1ac8:	89 f0       	breq	.+34     	; 0x1aec <localization+0x7ac>
    1aca:	a3 96       	adiw	r28, 0x23	; 35
    1acc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ace:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ad0:	a3 97       	sbiw	r28, 0x23	; 35
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	a5 e4       	ldi	r26, 0x45	; 69
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ac 0f       	add	r26, r28
    1adc:	bd 1f       	adc	r27, r29
    1ade:	ea 0f       	add	r30, r26
    1ae0:	fb 1f       	adc	r31, r27
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	08 17       	cp	r16, r24
    1ae8:	19 07       	cpc	r17, r25
    1aea:	69 f4       	brne	.+26     	; 0x1b06 <localization+0x7c6>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1aec:	d1 01       	movw	r26, r2
    1aee:	aa 0f       	add	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	e5 e4       	ldi	r30, 0x45	; 69
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	ec 0f       	add	r30, r28
    1af8:	fd 1f       	adc	r31, r29
    1afa:	ae 0f       	add	r26, r30
    1afc:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1afe:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    1b00:	0d 91       	ld	r16, X+
    1b02:	1c 91       	ld	r17, X
    1b04:	0c c0       	rjmp	.+24     	; 0x1b1e <localization+0x7de>
		}
		else{
			coin_ind = to[indmax];
    1b06:	f1 01       	movw	r30, r2
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	25 e4       	ldi	r18, 0x45	; 69
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	2c 0f       	add	r18, r28
    1b12:	3d 1f       	adc	r19, r29
    1b14:	e2 0f       	add	r30, r18
    1b16:	f3 1f       	adc	r31, r19
    1b18:	01 90       	ld	r0, Z+
    1b1a:	f0 81       	ld	r31, Z
    1b1c:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1b1e:	a7 96       	adiw	r28, 0x27	; 39
    1b20:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b22:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b24:	a7 97       	sbiw	r28, 0x27	; 39
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <localization+0x7ec>
    1b2a:	45 c0       	rjmp	.+138    	; 0x1bb6 <localization+0x876>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    1b2c:	6f 01       	movw	r12, r30
    1b2e:	cc 0c       	add	r12, r12
    1b30:	dd 1c       	adc	r13, r13
    1b32:	cc 0c       	add	r12, r12
    1b34:	dd 1c       	adc	r13, r13
    1b36:	a1 e0       	ldi	r26, 0x01	; 1
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ac 0f       	add	r26, r28
    1b3c:	bd 1f       	adc	r27, r29
    1b3e:	ca 0e       	add	r12, r26
    1b40:	db 1e       	adc	r13, r27
    1b42:	78 01       	movw	r14, r16
    1b44:	ee 0c       	add	r14, r14
    1b46:	ff 1c       	adc	r15, r15
    1b48:	ee 0c       	add	r14, r14
    1b4a:	ff 1c       	adc	r15, r15
    1b4c:	ea 0e       	add	r14, r26
    1b4e:	fb 1e       	adc	r15, r27
    1b50:	f7 01       	movw	r30, r14
    1b52:	20 81       	ld	r18, Z
    1b54:	31 81       	ldd	r19, Z+1	; 0x01
    1b56:	42 81       	ldd	r20, Z+2	; 0x02
    1b58:	53 81       	ldd	r21, Z+3	; 0x03
    1b5a:	d6 01       	movw	r26, r12
    1b5c:	6d 91       	ld	r22, X+
    1b5e:	7d 91       	ld	r23, X+
    1b60:	8d 91       	ld	r24, X+
    1b62:	9c 91       	ld	r25, X
    1b64:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1b74:	ad 96       	adiw	r28, 0x2d	; 45
    1b76:	6c af       	std	Y+60, r22	; 0x3c
    1b78:	7d af       	std	Y+61, r23	; 0x3d
    1b7a:	8e af       	std	Y+62, r24	; 0x3e
    1b7c:	9f af       	std	Y+63, r25	; 0x3f
    1b7e:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    1b80:	f7 01       	movw	r30, r14
    1b82:	20 89       	ldd	r18, Z+16	; 0x10
    1b84:	31 89       	ldd	r19, Z+17	; 0x11
    1b86:	42 89       	ldd	r20, Z+18	; 0x12
    1b88:	53 89       	ldd	r21, Z+19	; 0x13
    1b8a:	d6 01       	movw	r26, r12
    1b8c:	50 96       	adiw	r26, 0x10	; 16
    1b8e:	6d 91       	ld	r22, X+
    1b90:	7d 91       	ld	r23, X+
    1b92:	8d 91       	ld	r24, X+
    1b94:	9c 91       	ld	r25, X
    1b96:	53 97       	sbiw	r26, 0x13	; 19
    1b98:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1ba8:	a9 96       	adiw	r28, 0x29	; 41
    1baa:	6c af       	std	Y+60, r22	; 0x3c
    1bac:	7d af       	std	Y+61, r23	; 0x3d
    1bae:	8e af       	std	Y+62, r24	; 0x3e
    1bb0:	9f af       	std	Y+63, r25	; 0x3f
    1bb2:	a9 97       	sbiw	r28, 0x29	; 41
    1bb4:	1e c0       	rjmp	.+60     	; 0x1bf2 <localization+0x8b2>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	21 e0       	ldi	r18, 0x01	; 1
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	2c 0f       	add	r18, r28
    1bc4:	3d 1f       	adc	r19, r29
    1bc6:	e2 0f       	add	r30, r18
    1bc8:	f3 1f       	adc	r31, r19
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	a2 81       	ldd	r26, Z+2	; 0x02
    1bd0:	b3 81       	ldd	r27, Z+3	; 0x03
    1bd2:	ad 96       	adiw	r28, 0x2d	; 45
    1bd4:	8c af       	std	Y+60, r24	; 0x3c
    1bd6:	9d af       	std	Y+61, r25	; 0x3d
    1bd8:	ae af       	std	Y+62, r26	; 0x3e
    1bda:	bf af       	std	Y+63, r27	; 0x3f
    1bdc:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    1bde:	80 89       	ldd	r24, Z+16	; 0x10
    1be0:	91 89       	ldd	r25, Z+17	; 0x11
    1be2:	a2 89       	ldd	r26, Z+18	; 0x12
    1be4:	b3 89       	ldd	r27, Z+19	; 0x13
    1be6:	a9 96       	adiw	r28, 0x29	; 41
    1be8:	8c af       	std	Y+60, r24	; 0x3c
    1bea:	9d af       	std	Y+61, r25	; 0x3d
    1bec:	ae af       	std	Y+62, r26	; 0x3e
    1bee:	bf af       	std	Y+63, r27	; 0x3f
    1bf0:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    1bf2:	00 0f       	add	r16, r16
    1bf4:	11 1f       	adc	r17, r17
    1bf6:	00 0f       	add	r16, r16
    1bf8:	11 1f       	adc	r17, r17
    1bfa:	a1 e0       	ldi	r26, 0x01	; 1
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ac 0f       	add	r26, r28
    1c00:	bd 1f       	adc	r27, r29
    1c02:	0a 0f       	add	r16, r26
    1c04:	1b 1f       	adc	r17, r27
    1c06:	ad 96       	adiw	r28, 0x2d	; 45
    1c08:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c10:	ad 97       	sbiw	r28, 0x2d	; 45
    1c12:	f8 01       	movw	r30, r16
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1c20:	4b 01       	movw	r8, r22
    1c22:	5c 01       	movw	r10, r24
    1c24:	a9 96       	adiw	r28, 0x29	; 41
    1c26:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c28:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c2a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c2c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c2e:	a9 97       	sbiw	r28, 0x29	; 41
    1c30:	d8 01       	movw	r26, r16
    1c32:	50 96       	adiw	r26, 0x10	; 16
    1c34:	6d 91       	ld	r22, X+
    1c36:	7d 91       	ld	r23, X+
    1c38:	8d 91       	ld	r24, X+
    1c3a:	9c 91       	ld	r25, X
    1c3c:	53 97       	sbiw	r26, 0x13	; 19
    1c3e:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1c42:	6b 01       	movw	r12, r22
    1c44:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    1c46:	a5 01       	movw	r20, r10
    1c48:	94 01       	movw	r18, r8
    1c4a:	c5 01       	movw	r24, r10
    1c4c:	b4 01       	movw	r22, r8
    1c4e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1c52:	2b 01       	movw	r4, r22
    1c54:	3c 01       	movw	r6, r24
    1c56:	a7 01       	movw	r20, r14
    1c58:	96 01       	movw	r18, r12
    1c5a:	c7 01       	movw	r24, r14
    1c5c:	b6 01       	movw	r22, r12
    1c5e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1c62:	9b 01       	movw	r18, r22
    1c64:	ac 01       	movw	r20, r24
    1c66:	c3 01       	movw	r24, r6
    1c68:	b2 01       	movw	r22, r4
    1c6a:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    1c6e:	0e 94 82 1b 	call	0x3704	; 0x3704 <sqrt>
    1c72:	2b 01       	movw	r4, r22
    1c74:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    1c76:	9b 01       	movw	r18, r22
    1c78:	ac 01       	movw	r20, r24
    1c7a:	c5 01       	movw	r24, r10
    1c7c:	b4 01       	movw	r22, r8
    1c7e:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divsf3>
    1c82:	4b 01       	movw	r8, r22
    1c84:	5c 01       	movw	r10, r24
    1c86:	6d 96       	adiw	r28, 0x1d	; 29
    1c88:	6c af       	std	Y+60, r22	; 0x3c
    1c8a:	7d af       	std	Y+61, r23	; 0x3d
    1c8c:	8e af       	std	Y+62, r24	; 0x3e
    1c8e:	9f af       	std	Y+63, r25	; 0x3f
    1c90:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    1c92:	a3 01       	movw	r20, r6
    1c94:	92 01       	movw	r18, r4
    1c96:	c7 01       	movw	r24, r14
    1c98:	b6 01       	movw	r22, r12
    1c9a:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divsf3>
    1c9e:	6b 01       	movw	r12, r22
    1ca0:	7c 01       	movw	r14, r24
    1ca2:	a1 96       	adiw	r28, 0x21	; 33
    1ca4:	6c af       	std	Y+60, r22	; 0x3c
    1ca6:	7d af       	std	Y+61, r23	; 0x3d
    1ca8:	8e af       	std	Y+62, r24	; 0x3e
    1caa:	9f af       	std	Y+63, r25	; 0x3f
    1cac:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    1cae:	65 96       	adiw	r28, 0x15	; 21
    1cb0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cb2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cb4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb8:	65 97       	sbiw	r28, 0x15	; 21
    1cba:	c5 01       	movw	r24, r10
    1cbc:	b4 01       	movw	r22, r8
    1cbe:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1cc2:	4b 01       	movw	r8, r22
    1cc4:	5c 01       	movw	r10, r24
    1cc6:	69 96       	adiw	r28, 0x19	; 25
    1cc8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cca:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ccc:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cce:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cd0:	69 97       	sbiw	r28, 0x19	; 25
    1cd2:	c7 01       	movw	r24, r14
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
    1cde:	c5 01       	movw	r24, r10
    1ce0:	b4 01       	movw	r22, r8
    1ce2:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    1ce6:	2b 01       	movw	r4, r22
    1ce8:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1cf2:	9b 01       	movw	r18, r22
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	80 e8       	ldi	r24, 0x80	; 128
    1cfc:	9f e3       	ldi	r25, 0x3F	; 63
    1cfe:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1d02:	0e 94 82 1b 	call	0x3704	; 0x3704 <sqrt>
    1d06:	a5 96       	adiw	r28, 0x25	; 37
    1d08:	6c af       	std	Y+60, r22	; 0x3c
    1d0a:	7d af       	std	Y+61, r23	; 0x3d
    1d0c:	8e af       	std	Y+62, r24	; 0x3e
    1d0e:	9f af       	std	Y+63, r25	; 0x3f
    1d10:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    1d12:	fe 01       	movw	r30, r28
    1d14:	ef 5a       	subi	r30, 0xAF	; 175
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	7f 01       	movw	r14, r30
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	07 5a       	subi	r16, 0xA7	; 167
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	9b 01       	movw	r18, r22
    1d22:	ac 01       	movw	r20, r24
    1d24:	c3 01       	movw	r24, r6
    1d26:	b2 01       	movw	r22, r4
    1d28:	0e 94 33 06 	call	0xc66	; 0xc66 <find_sign>
    1d2c:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	91 05       	cpc	r25, r1
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <localization+0x9f6>
    1d34:	a1 c0       	rjmp	.+322    	; 0x1e78 <localization+0xb38>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    1d36:	0f 2e       	mov	r0, r31
    1d38:	f8 e1       	ldi	r31, 0x18	; 24
    1d3a:	af 2e       	mov	r10, r31
    1d3c:	f1 e0       	ldi	r31, 0x01	; 1
    1d3e:	bf 2e       	mov	r11, r31
    1d40:	f0 2d       	mov	r31, r0
    1d42:	d5 01       	movw	r26, r10
    1d44:	2d 91       	ld	r18, X+
    1d46:	3d 91       	ld	r19, X+
    1d48:	4d 91       	ld	r20, X+
    1d4a:	5c 91       	ld	r21, X
    1d4c:	ad 96       	adiw	r28, 0x2d	; 45
    1d4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d50:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d52:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d54:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d56:	ad 97       	sbiw	r28, 0x2d	; 45
    1d58:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1d5c:	a3 01       	movw	r20, r6
    1d5e:	92 01       	movw	r18, r4
    1d60:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1d64:	9b 01       	movw	r18, r22
    1d66:	ac 01       	movw	r20, r24
    1d68:	e5 96       	adiw	r28, 0x35	; 53
    1d6a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d6c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d70:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d72:	e5 97       	sbiw	r28, 0x35	; 53
    1d74:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1d78:	6b 01       	movw	r12, r22
    1d7a:	7c 01       	movw	r14, r24
    1d7c:	0c e1       	ldi	r16, 0x1C	; 28
    1d7e:	11 e0       	ldi	r17, 0x01	; 1
    1d80:	f8 01       	movw	r30, r16
    1d82:	20 81       	ld	r18, Z
    1d84:	31 81       	ldd	r19, Z+1	; 0x01
    1d86:	42 81       	ldd	r20, Z+2	; 0x02
    1d88:	53 81       	ldd	r21, Z+3	; 0x03
    1d8a:	a9 96       	adiw	r28, 0x29	; 41
    1d8c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d8e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d90:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d92:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d94:	a9 97       	sbiw	r28, 0x29	; 41
    1d96:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1d9a:	a5 96       	adiw	r28, 0x25	; 37
    1d9c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d9e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1da0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1da2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1da4:	a5 97       	sbiw	r28, 0x25	; 37
    1da6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	c7 01       	movw	r24, r14
    1db0:	b6 01       	movw	r22, r12
    1db2:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    1db6:	ed 96       	adiw	r28, 0x3d	; 61
    1db8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1dba:	bf ad       	ldd	r27, Y+63	; 0x3f
    1dbc:	ed 97       	sbiw	r28, 0x3d	; 61
    1dbe:	6d 93       	st	X+, r22
    1dc0:	7d 93       	st	X+, r23
    1dc2:	8d 93       	st	X+, r24
    1dc4:	9c 93       	st	X, r25
    1dc6:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    1dc8:	f8 01       	movw	r30, r16
    1dca:	20 81       	ld	r18, Z
    1dcc:	31 81       	ldd	r19, Z+1	; 0x01
    1dce:	42 81       	ldd	r20, Z+2	; 0x02
    1dd0:	53 81       	ldd	r21, Z+3	; 0x03
    1dd2:	a9 96       	adiw	r28, 0x29	; 41
    1dd4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dd6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dda:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ddc:	a9 97       	sbiw	r28, 0x29	; 41
    1dde:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1de2:	a3 01       	movw	r20, r6
    1de4:	92 01       	movw	r18, r4
    1de6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1dea:	9b 01       	movw	r18, r22
    1dec:	ac 01       	movw	r20, r24
    1dee:	e1 96       	adiw	r28, 0x31	; 49
    1df0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1df2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1df4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df8:	e1 97       	sbiw	r28, 0x31	; 49
    1dfa:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1dfe:	6b 01       	movw	r12, r22
    1e00:	7c 01       	movw	r14, r24
    1e02:	d5 01       	movw	r26, r10
    1e04:	2d 91       	ld	r18, X+
    1e06:	3d 91       	ld	r19, X+
    1e08:	4d 91       	ld	r20, X+
    1e0a:	5c 91       	ld	r21, X
    1e0c:	ad 96       	adiw	r28, 0x2d	; 45
    1e0e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e10:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e12:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e14:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e16:	ad 97       	sbiw	r28, 0x2d	; 45
    1e18:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1e1c:	a5 96       	adiw	r28, 0x25	; 37
    1e1e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e20:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e22:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e24:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e26:	a5 97       	sbiw	r28, 0x25	; 37
    1e28:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
    1e30:	c7 01       	movw	r24, r14
    1e32:	b6 01       	movw	r22, r12
    1e34:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1e38:	ed 96       	adiw	r28, 0x3d	; 61
    1e3a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e3e:	ed 97       	sbiw	r28, 0x3d	; 61
    1e40:	64 83       	std	Z+4, r22	; 0x04
    1e42:	75 83       	std	Z+5, r23	; 0x05
    1e44:	86 83       	std	Z+6, r24	; 0x06
    1e46:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    1e48:	ef 96       	adiw	r28, 0x3f	; 63
    1e4a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e4c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e4e:	ef 97       	sbiw	r28, 0x3f	; 63
    1e50:	4d 92       	st	X+, r4
    1e52:	5d 92       	st	X+, r5
    1e54:	6d 92       	st	X+, r6
    1e56:	7c 92       	st	X, r7
    1e58:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    1e5a:	a5 96       	adiw	r28, 0x25	; 37
    1e5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e64:	a5 97       	sbiw	r28, 0x25	; 37
    1e66:	ef 96       	adiw	r28, 0x3f	; 63
    1e68:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e6c:	ef 97       	sbiw	r28, 0x3f	; 63
    1e6e:	84 83       	std	Z+4, r24	; 0x04
    1e70:	95 83       	std	Z+5, r25	; 0x05
    1e72:	a6 83       	std	Z+6, r26	; 0x06
    1e74:	b7 83       	std	Z+7, r27	; 0x07
    1e76:	a1 c0       	rjmp	.+322    	; 0x1fba <localization+0xc7a>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    1e78:	0f 2e       	mov	r0, r31
    1e7a:	f8 e1       	ldi	r31, 0x18	; 24
    1e7c:	af 2e       	mov	r10, r31
    1e7e:	f1 e0       	ldi	r31, 0x01	; 1
    1e80:	bf 2e       	mov	r11, r31
    1e82:	f0 2d       	mov	r31, r0
    1e84:	d5 01       	movw	r26, r10
    1e86:	2d 91       	ld	r18, X+
    1e88:	3d 91       	ld	r19, X+
    1e8a:	4d 91       	ld	r20, X+
    1e8c:	5c 91       	ld	r21, X
    1e8e:	ad 96       	adiw	r28, 0x2d	; 45
    1e90:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e92:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e94:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e98:	ad 97       	sbiw	r28, 0x2d	; 45
    1e9a:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1e9e:	a3 01       	movw	r20, r6
    1ea0:	92 01       	movw	r18, r4
    1ea2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1ea6:	9b 01       	movw	r18, r22
    1ea8:	ac 01       	movw	r20, r24
    1eaa:	e5 96       	adiw	r28, 0x35	; 53
    1eac:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eae:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb4:	e5 97       	sbiw	r28, 0x35	; 53
    1eb6:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1eba:	6b 01       	movw	r12, r22
    1ebc:	7c 01       	movw	r14, r24
    1ebe:	0c e1       	ldi	r16, 0x1C	; 28
    1ec0:	11 e0       	ldi	r17, 0x01	; 1
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	20 81       	ld	r18, Z
    1ec6:	31 81       	ldd	r19, Z+1	; 0x01
    1ec8:	42 81       	ldd	r20, Z+2	; 0x02
    1eca:	53 81       	ldd	r21, Z+3	; 0x03
    1ecc:	a9 96       	adiw	r28, 0x29	; 41
    1ece:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ed0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ed2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ed4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ed6:	a9 97       	sbiw	r28, 0x29	; 41
    1ed8:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1edc:	a5 96       	adiw	r28, 0x25	; 37
    1ede:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ee2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ee4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ee6:	a5 97       	sbiw	r28, 0x25	; 37
    1ee8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1ef8:	ed 96       	adiw	r28, 0x3d	; 61
    1efa:	ae ad       	ldd	r26, Y+62	; 0x3e
    1efc:	bf ad       	ldd	r27, Y+63	; 0x3f
    1efe:	ed 97       	sbiw	r28, 0x3d	; 61
    1f00:	6d 93       	st	X+, r22
    1f02:	7d 93       	st	X+, r23
    1f04:	8d 93       	st	X+, r24
    1f06:	9c 93       	st	X, r25
    1f08:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	20 81       	ld	r18, Z
    1f0e:	31 81       	ldd	r19, Z+1	; 0x01
    1f10:	42 81       	ldd	r20, Z+2	; 0x02
    1f12:	53 81       	ldd	r21, Z+3	; 0x03
    1f14:	a9 96       	adiw	r28, 0x29	; 41
    1f16:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f18:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f1e:	a9 97       	sbiw	r28, 0x29	; 41
    1f20:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1f24:	a3 01       	movw	r20, r6
    1f26:	92 01       	movw	r18, r4
    1f28:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1f2c:	9b 01       	movw	r18, r22
    1f2e:	ac 01       	movw	r20, r24
    1f30:	e1 96       	adiw	r28, 0x31	; 49
    1f32:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f34:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f36:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f38:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f3a:	e1 97       	sbiw	r28, 0x31	; 49
    1f3c:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1f40:	6b 01       	movw	r12, r22
    1f42:	7c 01       	movw	r14, r24
    1f44:	d5 01       	movw	r26, r10
    1f46:	2d 91       	ld	r18, X+
    1f48:	3d 91       	ld	r19, X+
    1f4a:	4d 91       	ld	r20, X+
    1f4c:	5c 91       	ld	r21, X
    1f4e:	ad 96       	adiw	r28, 0x2d	; 45
    1f50:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f52:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f58:	ad 97       	sbiw	r28, 0x2d	; 45
    1f5a:	0e 94 23 19 	call	0x3246	; 0x3246 <__subsf3>
    1f5e:	a5 96       	adiw	r28, 0x25	; 37
    1f60:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f62:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f64:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f66:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f68:	a5 97       	sbiw	r28, 0x25	; 37
    1f6a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1f6e:	9b 01       	movw	r18, r22
    1f70:	ac 01       	movw	r20, r24
    1f72:	c7 01       	movw	r24, r14
    1f74:	b6 01       	movw	r22, r12
    1f76:	0e 94 24 19 	call	0x3248	; 0x3248 <__addsf3>
    1f7a:	ed 96       	adiw	r28, 0x3d	; 61
    1f7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f80:	ed 97       	sbiw	r28, 0x3d	; 61
    1f82:	64 83       	std	Z+4, r22	; 0x04
    1f84:	75 83       	std	Z+5, r23	; 0x05
    1f86:	86 83       	std	Z+6, r24	; 0x06
    1f88:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    1f8a:	ef 96       	adiw	r28, 0x3f	; 63
    1f8c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f8e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f90:	ef 97       	sbiw	r28, 0x3f	; 63
    1f92:	4d 92       	st	X+, r4
    1f94:	5d 92       	st	X+, r5
    1f96:	6d 92       	st	X+, r6
    1f98:	7c 92       	st	X, r7
    1f9a:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    1f9c:	a5 96       	adiw	r28, 0x25	; 37
    1f9e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fa0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1fa2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fa4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fa6:	a5 97       	sbiw	r28, 0x25	; 37
    1fa8:	b0 58       	subi	r27, 0x80	; 128
    1faa:	ef 96       	adiw	r28, 0x3f	; 63
    1fac:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fb0:	ef 97       	sbiw	r28, 0x3f	; 63
    1fb2:	84 83       	std	Z+4, r24	; 0x04
    1fb4:	95 83       	std	Z+5, r25	; 0x05
    1fb6:	a6 83       	std	Z+6, r26	; 0x06
    1fb8:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    1fba:	ed 96       	adiw	r28, 0x3d	; 61
    1fbc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fbe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fc0:	ed 97       	sbiw	r28, 0x3d	; 61
    1fc2:	80 81       	ld	r24, Z
    1fc4:	91 81       	ldd	r25, Z+1	; 0x01
    1fc6:	a2 81       	ldd	r26, Z+2	; 0x02
    1fc8:	b3 81       	ldd	r27, Z+3	; 0x03
    1fca:	80 93 5e 01 	sts	0x015E, r24
    1fce:	90 93 5f 01 	sts	0x015F, r25
    1fd2:	a0 93 60 01 	sts	0x0160, r26
    1fd6:	b0 93 61 01 	sts	0x0161, r27
		c_wii_last[1] = c_wii[1];
    1fda:	84 81       	ldd	r24, Z+4	; 0x04
    1fdc:	95 81       	ldd	r25, Z+5	; 0x05
    1fde:	a6 81       	ldd	r26, Z+6	; 0x06
    1fe0:	b7 81       	ldd	r27, Z+7	; 0x07
    1fe2:	80 93 62 01 	sts	0x0162, r24
    1fe6:	90 93 63 01 	sts	0x0163, r25
    1fea:	a0 93 64 01 	sts	0x0164, r26
    1fee:	b0 93 65 01 	sts	0x0165, r27
		dir_last[0] = dir[0];
    1ff2:	ef 96       	adiw	r28, 0x3f	; 63
    1ff4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ff6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ff8:	ef 97       	sbiw	r28, 0x3f	; 63
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	a2 81       	ldd	r26, Z+2	; 0x02
    2000:	b3 81       	ldd	r27, Z+3	; 0x03
    2002:	80 93 56 01 	sts	0x0156, r24
    2006:	90 93 57 01 	sts	0x0157, r25
    200a:	a0 93 58 01 	sts	0x0158, r26
    200e:	b0 93 59 01 	sts	0x0159, r27
		dir_last[1] = dir[1];
    2012:	84 81       	ldd	r24, Z+4	; 0x04
    2014:	95 81       	ldd	r25, Z+5	; 0x05
    2016:	a6 81       	ldd	r26, Z+6	; 0x06
    2018:	b7 81       	ldd	r27, Z+7	; 0x07
    201a:	80 93 5a 01 	sts	0x015A, r24
    201e:	90 93 5b 01 	sts	0x015B, r25
    2022:	a0 93 5c 01 	sts	0x015C, r26
    2026:	b0 93 5d 01 	sts	0x015D, r27
		
		if (state == 3){
    202a:	cd 57       	subi	r28, 0x7D	; 125
    202c:	df 4f       	sbci	r29, 0xFF	; 255
    202e:	28 81       	ld	r18, Y
    2030:	39 81       	ldd	r19, Y+1	; 0x01
    2032:	c3 58       	subi	r28, 0x83	; 131
    2034:	d0 40       	sbci	r29, 0x00	; 0
    2036:	23 30       	cpi	r18, 0x03	; 3
    2038:	31 05       	cpc	r19, r1
    203a:	09 f0       	breq	.+2      	; 0x203e <localization+0xcfe>
    203c:	80 c0       	rjmp	.+256    	; 0x213e <localization+0xdfe>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    203e:	ed 96       	adiw	r28, 0x3d	; 61
    2040:	ae ad       	ldd	r26, Y+62	; 0x3e
    2042:	bf ad       	ldd	r27, Y+63	; 0x3f
    2044:	ed 97       	sbiw	r28, 0x3d	; 61
    2046:	14 96       	adiw	r26, 0x04	; 4
    2048:	2d 91       	ld	r18, X+
    204a:	3d 91       	ld	r19, X+
    204c:	4d 91       	ld	r20, X+
    204e:	5c 91       	ld	r21, X
    2050:	17 97       	sbiw	r26, 0x07	; 7
    2052:	6d 91       	ld	r22, X+
    2054:	7d 91       	ld	r23, X+
    2056:	8d 91       	ld	r24, X+
    2058:	9c 91       	ld	r25, X
    205a:	cb 57       	subi	r28, 0x7B	; 123
    205c:	df 4f       	sbci	r29, 0xFF	; 255
    205e:	08 81       	ld	r16, Y
    2060:	19 81       	ldd	r17, Y+1	; 0x01
    2062:	c5 58       	subi	r28, 0x85	; 133
    2064:	d0 40       	sbci	r29, 0x00	; 0
    2066:	0e 94 63 09 	call	0x12c6	; 0x12c6 <find_if_reach>
			if (!if_reach){
    206a:	89 2b       	or	r24, r25
    206c:	39 f5       	brne	.+78     	; 0x20bc <localization+0xd7c>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    206e:	ef 96       	adiw	r28, 0x3f	; 63
    2070:	ae ac       	ldd	r10, Y+62	; 0x3e
    2072:	bf ac       	ldd	r11, Y+63	; 0x3f
    2074:	ef 97       	sbiw	r28, 0x3f	; 63
    2076:	ed 96       	adiw	r28, 0x3d	; 61
    2078:	ce ac       	ldd	r12, Y+62	; 0x3e
    207a:	df ac       	ldd	r13, Y+63	; 0x3f
    207c:	ed 97       	sbiw	r28, 0x3d	; 61
    207e:	cb 57       	subi	r28, 0x7B	; 123
    2080:	df 4f       	sbci	r29, 0xFF	; 255
    2082:	e8 80       	ld	r14, Y
    2084:	f9 80       	ldd	r15, Y+1	; 0x01
    2086:	c5 58       	subi	r28, 0x85	; 133
    2088:	d0 40       	sbci	r29, 0x00	; 0
    208a:	93 01       	movw	r18, r6
    208c:	82 01       	movw	r16, r4
    208e:	a5 96       	adiw	r28, 0x25	; 37
    2090:	4c ad       	ldd	r20, Y+60	; 0x3c
    2092:	5d ad       	ldd	r21, Y+61	; 0x3d
    2094:	6e ad       	ldd	r22, Y+62	; 0x3e
    2096:	7f ad       	ldd	r23, Y+63	; 0x3f
    2098:	a5 97       	sbiw	r28, 0x25	; 37
    209a:	c4 01       	movw	r24, r8
    209c:	0e 94 17 07 	call	0xe2e	; 0xe2e <cal_angle>
				PID_alpha(Kp_loc, Ki_loc, Kd_loc);
    20a0:	e1 2c       	mov	r14, r1
    20a2:	f1 2c       	mov	r15, r1
    20a4:	08 ec       	ldi	r16, 0xC8	; 200
    20a6:	12 e4       	ldi	r17, 0x42	; 66
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	a9 01       	movw	r20, r18
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	86 e9       	ldi	r24, 0x96	; 150
    20b4:	93 e4       	ldi	r25, 0x43	; 67
    20b6:	0e 94 23 08 	call	0x1046	; 0x1046 <PID_alpha>
    20ba:	41 c0       	rjmp	.+130    	; 0x213e <localization+0xdfe>
			}
			else{ // reach goal, stop
				OCR1B = 0;
    20bc:	10 92 8b 00 	sts	0x008B, r1
    20c0:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    20c4:	10 92 8d 00 	sts	0x008D, r1
    20c8:	10 92 8c 00 	sts	0x008C, r1
    20cc:	38 c0       	rjmp	.+112    	; 0x213e <localization+0xdfe>
			}
		}
	}
	else{
		c_wii[0] = c_wii_last[0];
    20ce:	80 91 5e 01 	lds	r24, 0x015E
    20d2:	90 91 5f 01 	lds	r25, 0x015F
    20d6:	a0 91 60 01 	lds	r26, 0x0160
    20da:	b0 91 61 01 	lds	r27, 0x0161
    20de:	ed 96       	adiw	r28, 0x3d	; 61
    20e0:	ee ad       	ldd	r30, Y+62	; 0x3e
    20e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    20e4:	ed 97       	sbiw	r28, 0x3d	; 61
    20e6:	80 83       	st	Z, r24
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	a2 83       	std	Z+2, r26	; 0x02
    20ec:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    20ee:	80 91 62 01 	lds	r24, 0x0162
    20f2:	90 91 63 01 	lds	r25, 0x0163
    20f6:	a0 91 64 01 	lds	r26, 0x0164
    20fa:	b0 91 65 01 	lds	r27, 0x0165
    20fe:	84 83       	std	Z+4, r24	; 0x04
    2100:	95 83       	std	Z+5, r25	; 0x05
    2102:	a6 83       	std	Z+6, r26	; 0x06
    2104:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    2106:	80 91 56 01 	lds	r24, 0x0156
    210a:	90 91 57 01 	lds	r25, 0x0157
    210e:	a0 91 58 01 	lds	r26, 0x0158
    2112:	b0 91 59 01 	lds	r27, 0x0159
    2116:	ef 96       	adiw	r28, 0x3f	; 63
    2118:	ee ad       	ldd	r30, Y+62	; 0x3e
    211a:	ff ad       	ldd	r31, Y+63	; 0x3f
    211c:	ef 97       	sbiw	r28, 0x3f	; 63
    211e:	80 83       	st	Z, r24
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	a2 83       	std	Z+2, r26	; 0x02
    2124:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    2126:	80 91 5a 01 	lds	r24, 0x015A
    212a:	90 91 5b 01 	lds	r25, 0x015B
    212e:	a0 91 5c 01 	lds	r26, 0x015C
    2132:	b0 91 5d 01 	lds	r27, 0x015D
    2136:	84 83       	std	Z+4, r24	; 0x04
    2138:	95 83       	std	Z+5, r25	; 0x05
    213a:	a6 83       	std	Z+6, r26	; 0x06
    213c:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    213e:	8b e0       	ldi	r24, 0x0B	; 11
    2140:	92 e0       	ldi	r25, 0x02	; 2
    2142:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(c_wii[0]);
    2146:	ed 96       	adiw	r28, 0x3d	; 61
    2148:	ae ad       	ldd	r26, Y+62	; 0x3e
    214a:	bf ad       	ldd	r27, Y+63	; 0x3f
    214c:	ed 97       	sbiw	r28, 0x3d	; 61
    214e:	6d 91       	ld	r22, X+
    2150:	7d 91       	ld	r23, X+
    2152:	8d 91       	ld	r24, X+
    2154:	9c 91       	ld	r25, X
    2156:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    215a:	cb 01       	movw	r24, r22
    215c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    2160:	86 e0       	ldi	r24, 0x06	; 6
    2162:	92 e0       	ldi	r25, 0x02	; 2
    2164:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(c_wii[1]);
    2168:	ed 96       	adiw	r28, 0x3d	; 61
    216a:	ee ad       	ldd	r30, Y+62	; 0x3e
    216c:	ff ad       	ldd	r31, Y+63	; 0x3f
    216e:	ed 97       	sbiw	r28, 0x3d	; 61
    2170:	64 81       	ldd	r22, Z+4	; 0x04
    2172:	75 81       	ldd	r23, Z+5	; 0x05
    2174:	86 81       	ldd	r24, Z+6	; 0x06
    2176:	97 81       	ldd	r25, Z+7	; 0x07
    2178:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    217c:	cb 01       	movw	r24, r22
    217e:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2182:	84 e0       	ldi	r24, 0x04	; 4
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    218a:	83 ef       	ldi	r24, 0xF3	; 243
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(dir[0]*1000);
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a e7       	ldi	r20, 0x7A	; 122
    2198:	54 e4       	ldi	r21, 0x44	; 68
    219a:	ef 96       	adiw	r28, 0x3f	; 63
    219c:	ae ad       	ldd	r26, Y+62	; 0x3e
    219e:	bf ad       	ldd	r27, Y+63	; 0x3f
    21a0:	ef 97       	sbiw	r28, 0x3f	; 63
    21a2:	6d 91       	ld	r22, X+
    21a4:	7d 91       	ld	r23, X+
    21a6:	8d 91       	ld	r24, X+
    21a8:	9c 91       	ld	r25, X
    21aa:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    21ae:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    21b2:	cb 01       	movw	r24, r22
    21b4:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    21b8:	8b ee       	ldi	r24, 0xEB	; 235
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
	m_usb_tx_int(dir[1]*1000);
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a e7       	ldi	r20, 0x7A	; 122
    21c6:	54 e4       	ldi	r21, 0x44	; 68
    21c8:	ef 96       	adiw	r28, 0x3f	; 63
    21ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    21cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ce:	ef 97       	sbiw	r28, 0x3f	; 63
    21d0:	64 81       	ldd	r22, Z+4	; 0x04
    21d2:	75 81       	ldd	r23, Z+5	; 0x05
    21d4:	86 81       	ldd	r24, Z+6	; 0x06
    21d6:	97 81       	ldd	r25, Z+7	; 0x07
    21d8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    21dc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    21e0:	cb 01       	movw	r24, r22
    21e2:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
	m_usb_tx_string("\n");
    21e6:	89 ee       	ldi	r24, 0xE9	; 233
    21e8:	91 e0       	ldi	r25, 0x01	; 1
    21ea:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <localization+0xed8>
    21f0:	eb 96       	adiw	r28, 0x3b	; 59
    21f2:	2e ad       	ldd	r18, Y+62	; 0x3e
    21f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    21f6:	eb 97       	sbiw	r28, 0x3b	; 59
    21f8:	2c 5f       	subi	r18, 0xFC	; 252
    21fa:	3f 4f       	sbci	r19, 0xFF	; 255
    21fc:	eb 96       	adiw	r28, 0x3b	; 59
    21fe:	3f af       	std	Y+63, r19	; 0x3f
    2200:	2e af       	std	Y+62, r18	; 0x3e
    2202:	eb 97       	sbiw	r28, 0x3b	; 59
    2204:	e3 96       	adiw	r28, 0x33	; 51
    2206:	8e ad       	ldd	r24, Y+62	; 0x3e
    2208:	9f ad       	ldd	r25, Y+63	; 0x3f
    220a:	e3 97       	sbiw	r28, 0x33	; 51
    220c:	04 96       	adiw	r24, 0x04	; 4
    220e:	e3 96       	adiw	r28, 0x33	; 51
    2210:	9f af       	std	Y+63, r25	; 0x3f
    2212:	8e af       	std	Y+62, r24	; 0x3e
    2214:	e3 97       	sbiw	r28, 0x33	; 51
    2216:	c9 ca       	rjmp	.-2670   	; 0x17aa <localization+0x46a>
}
    2218:	ca 57       	subi	r28, 0x7A	; 122
    221a:	df 4f       	sbci	r29, 0xFF	; 255
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	9f 90       	pop	r9
    223c:	8f 90       	pop	r8
    223e:	7f 90       	pop	r7
    2240:	6f 90       	pop	r6
    2242:	5f 90       	pop	r5
    2244:	4f 90       	pop	r4
    2246:	3f 90       	pop	r3
    2248:	2f 90       	pop	r2
    224a:	08 95       	ret

0000224c <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    224c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    224e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2250:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2252:	8c e0       	ldi	r24, 0x0C	; 12
    2254:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2258:	e9 e6       	ldi	r30, 0x69	; 105
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 62       	ori	r24, 0x20	; 32
    2260:	80 83       	st	Z, r24
    2262:	80 81       	ld	r24, Z
    2264:	8f 7e       	andi	r24, 0xEF	; 239
    2266:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2268:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    226a:	78 94       	sei
    226c:	08 95       	ret

0000226e <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	18 2f       	mov	r17, r24
    2276:	d6 2f       	mov	r29, r22
    2278:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    227a:	0e 94 26 11 	call	0x224c	; 0x224c <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    227e:	94 ea       	ldi	r25, 0xA4	; 164
    2280:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2284:	ec eb       	ldi	r30, 0xBC	; 188
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	90 81       	ld	r25, Z
    228a:	99 23       	and	r25, r25
    228c:	ec f7       	brge	.-6      	; 0x2288 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    228e:	90 e5       	ldi	r25, 0x50	; 80
    2290:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2294:	94 e8       	ldi	r25, 0x84	; 132
    2296:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    229a:	ec eb       	ldi	r30, 0xBC	; 188
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	90 81       	ld	r25, Z
    22a0:	99 23       	and	r25, r25
    22a2:	ec f7       	brge	.-6      	; 0x229e <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    22a4:	90 91 b9 00 	lds	r25, 0x00B9
    22a8:	98 7f       	andi	r25, 0xF8	; 248
    22aa:	90 32       	cpi	r25, 0x20	; 32
    22ac:	29 f4       	brne	.+10     	; 0x22b8 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    22ae:	84 e9       	ldi	r24, 0x94	; 148
    22b0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	2d c0       	rjmp	.+90     	; 0x2312 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    22be:	84 e8       	ldi	r24, 0x84	; 132
    22c0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    22c4:	ec eb       	ldi	r30, 0xBC	; 188
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	90 81       	ld	r25, Z
    22ca:	99 23       	and	r25, r25
    22cc:	ec f7       	brge	.-6      	; 0x22c8 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    22ce:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    22d2:	84 e8       	ldi	r24, 0x84	; 132
    22d4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    22d8:	ec eb       	ldi	r30, 0xBC	; 188
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	88 23       	and	r24, r24
    22e0:	ec f7       	brge	.-6      	; 0x22dc <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    22e2:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    22e6:	84 e8       	ldi	r24, 0x84	; 132
    22e8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    22ec:	ec eb       	ldi	r30, 0xBC	; 188
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	88 23       	and	r24, r24
    22f4:	ec f7       	brge	.-6      	; 0x22f0 <m_rf_open+0x82>
	
	TWDR = packet_length;
    22f6:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    22fa:	84 e8       	ldi	r24, 0x84	; 132
    22fc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2300:	ec eb       	ldi	r30, 0xBC	; 188
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	88 23       	and	r24, r24
    2308:	ec f7       	brge	.-6      	; 0x2304 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    230a:	84 e9       	ldi	r24, 0x94	; 148
    230c:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
}
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	08 95       	ret

0000231a <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2320:	24 ea       	ldi	r18, 0xA4	; 164
    2322:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    2326:	ec eb       	ldi	r30, 0xBC	; 188
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	20 81       	ld	r18, Z
    232c:	22 23       	and	r18, r18
    232e:	ec f7       	brge	.-6      	; 0x232a <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2330:	21 e5       	ldi	r18, 0x51	; 81
    2332:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2336:	24 e8       	ldi	r18, 0x84	; 132
    2338:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    233c:	ec eb       	ldi	r30, 0xBC	; 188
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	20 81       	ld	r18, Z
    2342:	22 23       	and	r18, r18
    2344:	ec f7       	brge	.-6      	; 0x2340 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2346:	20 91 b9 00 	lds	r18, 0x00B9
    234a:	28 7f       	andi	r18, 0xF8	; 248
    234c:	28 34       	cpi	r18, 0x48	; 72
    234e:	29 f4       	brne	.+10     	; 0x235a <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2350:	84 e9       	ldi	r24, 0x94	; 148
    2352:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	44 c0       	rjmp	.+136    	; 0x23e2 <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    235a:	24 ec       	ldi	r18, 0xC4	; 196
    235c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2360:	ec eb       	ldi	r30, 0xBC	; 188
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	20 81       	ld	r18, Z
    2366:	22 23       	and	r18, r18
    2368:	ec f7       	brge	.-6      	; 0x2364 <m_rf_read+0x4a>
	bytes = TWDR;
    236a:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
    236e:	16 13       	cpse	r17, r22
    2370:	0a c0       	rjmp	.+20     	; 0x2386 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2372:	41 2f       	mov	r20, r17
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	41 50       	subi	r20, 0x01	; 1
    2378:	51 09       	sbc	r21, r1
    237a:	14 16       	cp	r1, r20
    237c:	15 06       	cpc	r1, r21
    237e:	44 f0       	brlt	.+16     	; 0x2390 <m_rf_read+0x76>
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	1c c0       	rjmp	.+56     	; 0x23be <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2386:	84 e9       	ldi	r24, 0x94	; 148
    2388:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	29 c0       	rjmp	.+82     	; 0x23e2 <m_rf_read+0xc8>
    2390:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2396:	ec eb       	ldi	r30, 0xBC	; 188
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    239c:	cb eb       	ldi	r28, 0xBB	; 187
    239e:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23a0:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    23a2:	60 81       	ld	r22, Z
    23a4:	66 23       	and	r22, r22
    23a6:	ec f7       	brge	.-6      	; 0x23a2 <m_rf_read+0x88>
		buffer[i] = TWDR;
    23a8:	68 81       	ld	r22, Y
    23aa:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    23ac:	2f 5f       	subi	r18, 0xFF	; 255
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	24 17       	cp	r18, r20
    23b2:	35 07       	cpc	r19, r21
    23b4:	ac f3       	brlt	.-22     	; 0x23a0 <m_rf_read+0x86>
    23b6:	21 2f       	mov	r18, r17
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	21 50       	subi	r18, 0x01	; 1
    23bc:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    23be:	44 e8       	ldi	r20, 0x84	; 132
    23c0:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    23c4:	ec eb       	ldi	r30, 0xBC	; 188
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	40 81       	ld	r20, Z
    23ca:	44 23       	and	r20, r20
    23cc:	ec f7       	brge	.-6      	; 0x23c8 <m_rf_read+0xae>
	buffer[i++] = TWDR;
    23ce:	40 91 bb 00 	lds	r20, 0x00BB
    23d2:	fc 01       	movw	r30, r24
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    23da:	84 e9       	ldi	r24, 0x94	; 148
    23dc:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
}
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	08 95       	ret

000023ea <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    23ee:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    23f0:	94 ea       	ldi	r25, 0xA4	; 164
    23f2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    23f6:	ec eb       	ldi	r30, 0xBC	; 188
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	90 81       	ld	r25, Z
    23fc:	99 23       	and	r25, r25
    23fe:	ec f7       	brge	.-6      	; 0x23fa <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2400:	90 e5       	ldi	r25, 0x50	; 80
    2402:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2406:	94 e8       	ldi	r25, 0x84	; 132
    2408:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    240c:	ec eb       	ldi	r30, 0xBC	; 188
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	90 81       	ld	r25, Z
    2412:	99 23       	and	r25, r25
    2414:	ec f7       	brge	.-6      	; 0x2410 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2416:	90 91 b9 00 	lds	r25, 0x00B9
    241a:	98 7f       	andi	r25, 0xF8	; 248
    241c:	90 32       	cpi	r25, 0x20	; 32
    241e:	31 f4       	brne	.+12     	; 0x242c <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2420:	84 e9       	ldi	r24, 0x94	; 148
    2422:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    2426:	78 94       	sei
		return 0;
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	32 c0       	rjmp	.+100    	; 0x2490 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    242c:	93 e0       	ldi	r25, 0x03	; 3
    242e:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2432:	94 e8       	ldi	r25, 0x84	; 132
    2434:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2438:	ec eb       	ldi	r30, 0xBC	; 188
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	90 81       	ld	r25, Z
    243e:	99 23       	and	r25, r25
    2440:	ec f7       	brge	.-6      	; 0x243c <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    2442:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2446:	84 e8       	ldi	r24, 0x84	; 132
    2448:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    244c:	ec eb       	ldi	r30, 0xBC	; 188
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	88 23       	and	r24, r24
    2454:	ec f7       	brge	.-6      	; 0x2450 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2456:	24 2f       	mov	r18, r20
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	12 16       	cp	r1, r18
    245c:	13 06       	cpc	r1, r19
    245e:	9c f4       	brge	.+38     	; 0x2486 <m_rf_send+0x9c>
    2460:	a6 2f       	mov	r26, r22
    2462:	b7 2f       	mov	r27, r23
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    2468:	cb eb       	ldi	r28, 0xBB	; 187
    246a:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    246c:	ec eb       	ldi	r30, 0xBC	; 188
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    2472:	4d 91       	ld	r20, X+
    2474:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    2476:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    2478:	40 81       	ld	r20, Z
    247a:	44 23       	and	r20, r20
    247c:	ec f7       	brge	.-6      	; 0x2478 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	82 17       	cp	r24, r18
    2482:	93 07       	cpc	r25, r19
    2484:	b4 f3       	brlt	.-20     	; 0x2472 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2486:	84 e9       	ldi	r24, 0x94	; 148
    2488:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    248c:	78 94       	sei
	
	return 1;
    248e:	81 e0       	ldi	r24, 0x01	; 1
}
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    249c:	80 ea       	ldi	r24, 0xA0	; 160
    249e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    24a2:	82 e1       	ldi	r24, 0x12	; 18
    24a4:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    24a6:	09 b4       	in	r0, 0x29	; 41
    24a8:	00 fe       	sbrs	r0, 0
    24aa:	fd cf       	rjmp	.-6      	; 0x24a6 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    24ac:	80 e9       	ldi	r24, 0x90	; 144
    24ae:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    24b2:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    24b6:	10 92 83 01 	sts	0x0183, r1
	cdc_line_rtsdtr = 0;
    24ba:	10 92 80 01 	sts	0x0180, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    24be:	8c e0       	ldi	r24, 0x0C	; 12
    24c0:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    24c4:	78 94       	sei
    24c6:	08 95       	ret

000024c8 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    24cc:	90 91 83 01 	lds	r25, 0x0183
    24d0:	99 23       	and	r25, r25
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <m_usb_tx_char+0xe>
    24d4:	4c c0       	rjmp	.+152    	; 0x256e <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    24d6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24d8:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    24da:	24 e0       	ldi	r18, 0x04	; 4
    24dc:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    24e0:	20 91 81 01 	lds	r18, 0x0181
    24e4:	22 23       	and	r18, r18
    24e6:	49 f0       	breq	.+18     	; 0x24fa <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    24e8:	20 91 e8 00 	lds	r18, 0x00E8
    24ec:	25 fd       	sbrc	r18, 5
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    24f0:	9f bf       	out	0x3f, r25	; 63
			return -1;
    24f2:	8f ef       	ldi	r24, 0xFF	; 255
    24f4:	41 c0       	rjmp	.+130    	; 0x2578 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    24f6:	10 92 81 01 	sts	0x0181, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    24fa:	30 91 e4 00 	lds	r19, 0x00E4
    24fe:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2500:	20 91 e8 00 	lds	r18, 0x00E8
    2504:	25 fd       	sbrc	r18, 5
    2506:	24 c0       	rjmp	.+72     	; 0x2550 <m_usb_tx_char+0x88>
		SREG = intr_state;
    2508:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    250a:	90 91 e4 00 	lds	r25, 0x00E4
    250e:	93 17       	cp	r25, r19
    2510:	81 f0       	breq	.+32     	; 0x2532 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2512:	90 91 83 01 	lds	r25, 0x0183
    2516:	99 23       	and	r25, r25
    2518:	61 f1       	breq	.+88     	; 0x2572 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    251a:	a9 ee       	ldi	r26, 0xE9	; 233
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2520:	e8 ee       	ldi	r30, 0xE8	; 232
    2522:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2524:	c4 ee       	ldi	r28, 0xE4	; 228
    2526:	d0 e0       	ldi	r29, 0x00	; 0
    2528:	0d c0       	rjmp	.+26     	; 0x2544 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    252a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    252c:	98 81       	ld	r25, Y
    252e:	93 13       	cpse	r25, r19
    2530:	05 c0       	rjmp	.+10     	; 0x253c <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 93 81 01 	sts	0x0181, r24
			return -1;
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	1e c0       	rjmp	.+60     	; 0x2578 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    253c:	90 91 83 01 	lds	r25, 0x0183
    2540:	99 23       	and	r25, r25
    2542:	c9 f0       	breq	.+50     	; 0x2576 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    2544:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2546:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2548:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    254a:	20 81       	ld	r18, Z
    254c:	25 ff       	sbrs	r18, 5
    254e:	ed cf       	rjmp	.-38     	; 0x252a <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2550:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2554:	80 91 e8 00 	lds	r24, 0x00E8
    2558:	85 fd       	sbrc	r24, 5
    255a:	03 c0       	rjmp	.+6      	; 0x2562 <m_usb_tx_char+0x9a>
    255c:	8a e3       	ldi	r24, 0x3A	; 58
    255e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2562:	85 e0       	ldi	r24, 0x05	; 5
    2564:	80 93 82 01 	sts	0x0182, r24
	SREG = intr_state;
    2568:	9f bf       	out	0x3f, r25	; 63
	return 0;
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    256e:	8f ef       	ldi	r24, 0xFF	; 255
    2570:	03 c0       	rjmp	.+6      	; 0x2578 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2572:	8f ef       	ldi	r24, 0xFF	; 255
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <m_usb_tx_char+0xb0>
    2576:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	08 95       	ret

0000257e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	8f 93       	push	r24
    258a:	9f 93       	push	r25
    258c:	ef 93       	push	r30
    258e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2590:	e1 ee       	ldi	r30, 0xE1	; 225
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
        UDINT = 0;
    2596:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2598:	83 ff       	sbrs	r24, 3
    259a:	11 c0       	rjmp	.+34     	; 0x25be <__vector_10+0x40>
		UENUM = 0;
    259c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    25a6:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    25aa:	92 e1       	ldi	r25, 0x12	; 18
    25ac:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    25b0:	98 e0       	ldi	r25, 0x08	; 8
    25b2:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    25b6:	10 92 83 01 	sts	0x0183, r1
		cdc_line_rtsdtr = 0;
    25ba:	10 92 80 01 	sts	0x0180, r1
        }
	if (intbits & (1<<SOFI)) {
    25be:	82 ff       	sbrs	r24, 2
    25c0:	13 c0       	rjmp	.+38     	; 0x25e8 <__vector_10+0x6a>
		if (usb_configuration) {
    25c2:	80 91 83 01 	lds	r24, 0x0183
    25c6:	88 23       	and	r24, r24
    25c8:	79 f0       	breq	.+30     	; 0x25e8 <__vector_10+0x6a>
			t = transmit_flush_timer;
    25ca:	80 91 82 01 	lds	r24, 0x0182
			if (t) {
    25ce:	88 23       	and	r24, r24
    25d0:	59 f0       	breq	.+22     	; 0x25e8 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    25d2:	81 50       	subi	r24, 0x01	; 1
    25d4:	80 93 82 01 	sts	0x0182, r24
				if (!t) {
    25d8:	81 11       	cpse	r24, r1
    25da:	06 c0       	rjmp	.+12     	; 0x25e8 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    25dc:	84 e0       	ldi	r24, 0x04	; 4
    25de:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    25e2:	8a e3       	ldi	r24, 0x3A	; 58
    25e4:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    25e8:	ff 91       	pop	r31
    25ea:	ef 91       	pop	r30
    25ec:	9f 91       	pop	r25
    25ee:	8f 91       	pop	r24
    25f0:	0f 90       	pop	r0
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	0f 90       	pop	r0
    25f6:	1f 90       	pop	r1
    25f8:	18 95       	reti

000025fa <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	0f 92       	push	r0
    2602:	11 24       	eor	r1, r1
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	2f 93       	push	r18
    260a:	3f 93       	push	r19
    260c:	4f 93       	push	r20
    260e:	5f 93       	push	r21
    2610:	6f 93       	push	r22
    2612:	7f 93       	push	r23
    2614:	8f 93       	push	r24
    2616:	9f 93       	push	r25
    2618:	af 93       	push	r26
    261a:	bf 93       	push	r27
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	ef 93       	push	r30
    2622:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2624:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2628:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    262c:	83 ff       	sbrs	r24, 3
    262e:	4e c1       	rjmp	.+668    	; 0x28cc <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    2630:	e1 ef       	ldi	r30, 0xF1	; 241
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    2636:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2638:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    263a:	80 81       	ld	r24, Z
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    2640:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    2642:	50 81       	ld	r21, Z
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	bc 01       	movw	r22, r24
    2648:	75 2b       	or	r23, r21
                wLength = UEDATX;
    264a:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    264c:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    264e:	82 ef       	ldi	r24, 0xF2	; 242
    2650:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    2654:	46 30       	cpi	r20, 0x06	; 6
    2656:	09 f0       	breq	.+2      	; 0x265a <__vector_11+0x60>
    2658:	58 c0       	rjmp	.+176    	; 0x270a <__vector_11+0x110>
    265a:	04 c0       	rjmp	.+8      	; 0x2664 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    265c:	81 e2       	ldi	r24, 0x21	; 33
    265e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2662:	3b c1       	rjmp	.+630    	; 0x28da <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2664:	c6 e0       	ldi	r28, 0x06	; 6
    2666:	8f e2       	ldi	r24, 0x2F	; 47
    2668:	92 e0       	ldi	r25, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    266a:	fc 01       	movw	r30, r24
    266c:	45 91       	lpm	r20, Z+
    266e:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    2670:	24 17       	cp	r18, r20
    2672:	35 07       	cpc	r19, r21
    2674:	11 f0       	breq	.+4      	; 0x267a <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    2676:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2678:	23 c0       	rjmp	.+70     	; 0x26c0 <__vector_11+0xc6>
				}
				list += 2;
    267a:	fc 01       	movw	r30, r24
    267c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    267e:	45 91       	lpm	r20, Z+
    2680:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    2682:	64 17       	cp	r22, r20
    2684:	75 07       	cpc	r23, r21
    2686:	11 f0       	breq	.+4      	; 0x268c <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    2688:	07 96       	adiw	r24, 0x07	; 7
					continue;
    268a:	1a c0       	rjmp	.+52     	; 0x26c0 <__vector_11+0xc6>
				}
				list += 2;
    268c:	fc 01       	movw	r30, r24
    268e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2690:	25 91       	lpm	r18, Z+
    2692:	34 91       	lpm	r19, Z
				list += 2;
    2694:	fc 01       	movw	r30, r24
    2696:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2698:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    269a:	8b 2f       	mov	r24, r27
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    26a0:	8f 3f       	cpi	r24, 0xFF	; 255
    26a2:	91 05       	cpc	r25, r1
    26a4:	19 f0       	breq	.+6      	; 0x26ac <__vector_11+0xb2>
    26a6:	10 f0       	brcs	.+4      	; 0x26ac <__vector_11+0xb2>
    26a8:	8f ef       	ldi	r24, 0xFF	; 255
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	85 17       	cp	r24, r21
    26ae:	08 f4       	brcc	.+2      	; 0x26b2 <__vector_11+0xb8>
    26b0:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    26b2:	a8 ee       	ldi	r26, 0xE8	; 232
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    26b6:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    26b8:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    26ba:	c1 ef       	ldi	r28, 0xF1	; 241
    26bc:	d0 e0       	ldi	r29, 0x00	; 0
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <__vector_11+0xcc>
    26c0:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    26c2:	99 f6       	brne	.-90     	; 0x266a <__vector_11+0x70>
    26c4:	cb cf       	rjmp	.-106    	; 0x265c <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    26c6:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    26c8:	98 2f       	mov	r25, r24
    26ca:	95 70       	andi	r25, 0x05	; 5
    26cc:	e1 f3       	breq	.-8      	; 0x26c6 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    26ce:	82 fd       	sbrc	r24, 2
    26d0:	04 c1       	rjmp	.+520    	; 0x28da <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    26d2:	45 2f       	mov	r20, r21
    26d4:	51 31       	cpi	r21, 0x11	; 17
    26d6:	08 f0       	brcs	.+2      	; 0x26da <__vector_11+0xe0>
    26d8:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    26da:	44 23       	and	r20, r20
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <__vector_11+0xe6>
    26de:	fa c0       	rjmp	.+500    	; 0x28d4 <__vector_11+0x2da>
    26e0:	f9 01       	movw	r30, r18
    26e2:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    26e4:	94 91       	lpm	r25, Z
    26e6:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    26e8:	81 50       	subi	r24, 0x01	; 1
    26ea:	31 96       	adiw	r30, 0x01	; 1
    26ec:	81 11       	cpse	r24, r1
    26ee:	fa cf       	rjmp	.-12     	; 0x26e4 <__vector_11+0xea>
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	84 0f       	add	r24, r20
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	28 0f       	add	r18, r24
    26fa:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    26fc:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    26fe:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2700:	51 11       	cpse	r21, r1
    2702:	e1 cf       	rjmp	.-62     	; 0x26c6 <__vector_11+0xcc>
    2704:	40 31       	cpi	r20, 0x10	; 16
    2706:	f9 f2       	breq	.-66     	; 0x26c6 <__vector_11+0xcc>
    2708:	e8 c0       	rjmp	.+464    	; 0x28da <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    270a:	45 30       	cpi	r20, 0x05	; 5
    270c:	61 f4       	brne	.+24     	; 0x2726 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    270e:	8e ef       	ldi	r24, 0xFE	; 254
    2710:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2714:	e8 ee       	ldi	r30, 0xE8	; 232
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 ff       	sbrs	r24, 0
    271c:	fd cf       	rjmp	.-6      	; 0x2718 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    271e:	20 68       	ori	r18, 0x80	; 128
    2720:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2724:	da c0       	rjmp	.+436    	; 0x28da <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2726:	49 30       	cpi	r20, 0x09	; 9
    2728:	09 f0       	breq	.+2      	; 0x272c <__vector_11+0x132>
    272a:	36 c0       	rjmp	.+108    	; 0x2798 <__vector_11+0x19e>
    272c:	c1 11       	cpse	r28, r1
    272e:	5f c0       	rjmp	.+190    	; 0x27ee <__vector_11+0x1f4>
			usb_configuration = wValue;
    2730:	20 93 83 01 	sts	0x0183, r18
			cdc_line_rtsdtr = 0;
    2734:	10 92 80 01 	sts	0x0180, r1
			transmit_flush_timer = 0;
    2738:	10 92 82 01 	sts	0x0182, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    273c:	8e ef       	ldi	r24, 0xFE	; 254
    273e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2742:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2744:	88 ed       	ldi	r24, 0xD8	; 216
    2746:	92 e0       	ldi	r25, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    2748:	c9 ee       	ldi	r28, 0xE9	; 233
    274a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    274c:	ab ee       	ldi	r26, 0xEB	; 235
    274e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2750:	6c ee       	ldi	r22, 0xEC	; 236
    2752:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2754:	4d ee       	ldi	r20, 0xED	; 237
    2756:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2758:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    275a:	9c 01       	movw	r18, r24
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	fc 01       	movw	r30, r24
    2762:	04 91       	lpm	r16, Z
				UECONX = en;
    2764:	0c 93       	st	X, r16
				if (en) {
    2766:	00 23       	and	r16, r16
    2768:	61 f0       	breq	.+24     	; 0x2782 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    276a:	f9 01       	movw	r30, r18
    276c:	24 91       	lpm	r18, Z
    276e:	fb 01       	movw	r30, r22
    2770:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    2772:	9c 01       	movw	r18, r24
    2774:	2d 5f       	subi	r18, 0xFD	; 253
    2776:	3f 4f       	sbci	r19, 0xFF	; 255
    2778:	fc 01       	movw	r30, r24
    277a:	32 96       	adiw	r30, 0x02	; 2
    277c:	84 91       	lpm	r24, Z
    277e:	fa 01       	movw	r30, r20
    2780:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2782:	1f 5f       	subi	r17, 0xFF	; 255
    2784:	15 30       	cpi	r17, 0x05	; 5
    2786:	11 f0       	breq	.+4      	; 0x278c <__vector_11+0x192>
    2788:	c9 01       	movw	r24, r18
    278a:	e6 cf       	rjmp	.-52     	; 0x2758 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    278c:	ea ee       	ldi	r30, 0xEA	; 234
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	8e e1       	ldi	r24, 0x1E	; 30
    2792:	80 83       	st	Z, r24
        		UERST = 0;
    2794:	10 82       	st	Z, r1
			return;
    2796:	a1 c0       	rjmp	.+322    	; 0x28da <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2798:	48 30       	cpi	r20, 0x08	; 8
    279a:	81 f4       	brne	.+32     	; 0x27bc <__vector_11+0x1c2>
    279c:	c0 38       	cpi	r28, 0x80	; 128
    279e:	09 f0       	breq	.+2      	; 0x27a2 <__vector_11+0x1a8>
    27a0:	42 c0       	rjmp	.+132    	; 0x2826 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    27a2:	e8 ee       	ldi	r30, 0xE8	; 232
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	80 ff       	sbrs	r24, 0
    27aa:	fd cf       	rjmp	.-6      	; 0x27a6 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    27ac:	80 91 83 01 	lds	r24, 0x0183
    27b0:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27b4:	8e ef       	ldi	r24, 0xFE	; 254
    27b6:	80 93 e8 00 	sts	0x00E8, r24
    27ba:	8f c0       	rjmp	.+286    	; 0x28da <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    27bc:	41 32       	cpi	r20, 0x21	; 33
    27be:	b9 f4       	brne	.+46     	; 0x27ee <__vector_11+0x1f4>
    27c0:	c1 3a       	cpi	r28, 0xA1	; 161
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <__vector_11+0x1cc>
    27c4:	40 c0       	rjmp	.+128    	; 0x2846 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    27c6:	e8 ee       	ldi	r30, 0xE8	; 232
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	80 ff       	sbrs	r24, 0
    27ce:	fd cf       	rjmp	.-6      	; 0x27ca <__vector_11+0x1d0>
    27d0:	e0 e2       	ldi	r30, 0x20	; 32
    27d2:	f1 e0       	ldi	r31, 0x01	; 1
    27d4:	87 e2       	ldi	r24, 0x27	; 39
    27d6:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    27d8:	a1 ef       	ldi	r26, 0xF1	; 241
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	21 91       	ld	r18, Z+
    27de:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    27e0:	e8 17       	cp	r30, r24
    27e2:	f9 07       	cpc	r31, r25
    27e4:	d9 f7       	brne	.-10     	; 0x27dc <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27e6:	8e ef       	ldi	r24, 0xFE	; 254
    27e8:	80 93 e8 00 	sts	0x00E8, r24
    27ec:	76 c0       	rjmp	.+236    	; 0x28da <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    27ee:	40 32       	cpi	r20, 0x20	; 32
    27f0:	d1 f4       	brne	.+52     	; 0x2826 <__vector_11+0x22c>
    27f2:	c1 32       	cpi	r28, 0x21	; 33
    27f4:	09 f0       	breq	.+2      	; 0x27f8 <__vector_11+0x1fe>
    27f6:	43 c0       	rjmp	.+134    	; 0x287e <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    27f8:	e8 ee       	ldi	r30, 0xE8	; 232
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	82 ff       	sbrs	r24, 2
    2800:	fd cf       	rjmp	.-6      	; 0x27fc <__vector_11+0x202>
    2802:	e0 e2       	ldi	r30, 0x20	; 32
    2804:	f1 e0       	ldi	r31, 0x01	; 1
    2806:	87 e2       	ldi	r24, 0x27	; 39
    2808:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    280a:	a1 ef       	ldi	r26, 0xF1	; 241
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	2c 91       	ld	r18, X
    2810:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2812:	e8 17       	cp	r30, r24
    2814:	f9 07       	cpc	r31, r25
    2816:	d9 f7       	brne	.-10     	; 0x280e <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2818:	e8 ee       	ldi	r30, 0xE8	; 232
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	8b ef       	ldi	r24, 0xFB	; 251
    281e:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2820:	8e ef       	ldi	r24, 0xFE	; 254
    2822:	80 83       	st	Z, r24
    2824:	5a c0       	rjmp	.+180    	; 0x28da <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2826:	42 32       	cpi	r20, 0x22	; 34
    2828:	71 f4       	brne	.+28     	; 0x2846 <__vector_11+0x24c>
    282a:	c1 32       	cpi	r28, 0x21	; 33
    282c:	09 f0       	breq	.+2      	; 0x2830 <__vector_11+0x236>
    282e:	4e c0       	rjmp	.+156    	; 0x28cc <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    2830:	20 93 80 01 	sts	0x0180, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2834:	e8 ee       	ldi	r30, 0xE8	; 232
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 ff       	sbrs	r24, 0
    283c:	fd cf       	rjmp	.-6      	; 0x2838 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    283e:	8e ef       	ldi	r24, 0xFE	; 254
    2840:	80 93 e8 00 	sts	0x00E8, r24
    2844:	4a c0       	rjmp	.+148    	; 0x28da <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2846:	41 11       	cpse	r20, r1
    2848:	1a c0       	rjmp	.+52     	; 0x287e <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    284a:	e8 ee       	ldi	r30, 0xE8	; 232
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	80 ff       	sbrs	r24, 0
    2852:	fd cf       	rjmp	.-6      	; 0x284e <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2854:	c2 38       	cpi	r28, 0x82	; 130
    2856:	51 f4       	brne	.+20     	; 0x286c <__vector_11+0x272>
				UENUM = wIndex;
    2858:	e9 ee       	ldi	r30, 0xE9	; 233
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    285e:	80 91 eb 00 	lds	r24, 0x00EB
    2862:	85 fb       	bst	r24, 5
    2864:	88 27       	eor	r24, r24
    2866:	80 f9       	bld	r24, 0
				UENUM = 0;
    2868:	10 82       	st	Z, r1
    286a:	01 c0       	rjmp	.+2      	; 0x286e <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    286c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    286e:	e1 ef       	ldi	r30, 0xF1	; 241
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 83       	st	Z, r24
			UEDATX = 0;
    2874:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2876:	8e ef       	ldi	r24, 0xFE	; 254
    2878:	80 93 e8 00 	sts	0x00E8, r24
    287c:	2e c0       	rjmp	.+92     	; 0x28da <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    287e:	84 2f       	mov	r24, r20
    2880:	8d 7f       	andi	r24, 0xFD	; 253
    2882:	81 30       	cpi	r24, 0x01	; 1
    2884:	19 f5       	brne	.+70     	; 0x28cc <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    2886:	c2 30       	cpi	r28, 0x02	; 2
    2888:	09 f5       	brne	.+66     	; 0x28cc <__vector_11+0x2d2>
    288a:	23 2b       	or	r18, r19
    288c:	f9 f4       	brne	.+62     	; 0x28cc <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    288e:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2890:	8f ef       	ldi	r24, 0xFF	; 255
    2892:	86 0f       	add	r24, r22
    2894:	84 30       	cpi	r24, 0x04	; 4
    2896:	d0 f4       	brcc	.+52     	; 0x28cc <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2898:	8e ef       	ldi	r24, 0xFE	; 254
    289a:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    289e:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    28a2:	43 30       	cpi	r20, 0x03	; 3
    28a4:	21 f4       	brne	.+8      	; 0x28ae <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    28a6:	81 e2       	ldi	r24, 0x21	; 33
    28a8:	80 93 eb 00 	sts	0x00EB, r24
    28ac:	16 c0       	rjmp	.+44     	; 0x28da <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    28ae:	89 e1       	ldi	r24, 0x19	; 25
    28b0:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <__vector_11+0x2c4>
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	6a 95       	dec	r22
    28c0:	e2 f7       	brpl	.-8      	; 0x28ba <__vector_11+0x2c0>
    28c2:	ea ee       	ldi	r30, 0xEA	; 234
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 83       	st	Z, r24
					UERST = 0;
    28c8:	10 82       	st	Z, r1
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    28cc:	81 e2       	ldi	r24, 0x21	; 33
    28ce:	80 93 eb 00 	sts	0x00EB, r24
    28d2:	03 c0       	rjmp	.+6      	; 0x28da <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    28d4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    28d6:	51 11       	cpse	r21, r1
    28d8:	f6 ce       	rjmp	.-532    	; 0x26c6 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    28da:	ff 91       	pop	r31
    28dc:	ef 91       	pop	r30
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	7f 91       	pop	r23
    28ec:	6f 91       	pop	r22
    28ee:	5f 91       	pop	r21
    28f0:	4f 91       	pop	r20
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	0f 90       	pop	r0
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	0f 90       	pop	r0
    2900:	1f 90       	pop	r1
    2902:	18 95       	reti

00002904 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    290a:	ec 01       	movw	r28, r24
    290c:	21 96       	adiw	r28, 0x01	; 1
    290e:	fc 01       	movw	r30, r24
    2910:	14 91       	lpm	r17, Z
		if (!c) break;
    2912:	11 23       	and	r17, r17
    2914:	69 f0       	breq	.+26     	; 0x2930 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    2916:	1a 30       	cpi	r17, 0x0A	; 10
    2918:	19 f4       	brne	.+6      	; 0x2920 <print_P+0x1c>
    291a:	8d e0       	ldi	r24, 0x0D	; 13
    291c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <m_usb_tx_char>
		usb_tx_char(c);
    2920:	81 2f       	mov	r24, r17
    2922:	0e 94 64 12 	call	0x24c8	; 0x24c8 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2926:	fe 01       	movw	r30, r28
    2928:	14 91       	lpm	r17, Z
    292a:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    292c:	11 11       	cpse	r17, r1
    292e:	f3 cf       	rjmp	.-26     	; 0x2916 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	1f 91       	pop	r17
    2936:	08 95       	ret

00002938 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	27 97       	sbiw	r28, 0x07	; 7
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    2954:	8e 01       	movw	r16, r28
    2956:	0f 5f       	subi	r16, 0xFF	; 255
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	27 e0       	ldi	r18, 0x07	; 7
    295c:	f8 01       	movw	r30, r16
    295e:	11 92       	st	Z+, r1
    2960:	2a 95       	dec	r18
    2962:	e9 f7       	brne	.-6      	; 0x295e <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2964:	4a e0       	ldi	r20, 0x0A	; 10
    2966:	b8 01       	movw	r22, r16
    2968:	0e 94 03 1c 	call	0x3806	; 0x3806 <__itoa_ncheck>
    296c:	7e 01       	movw	r14, r28
    296e:	f8 e0       	ldi	r31, 0x08	; 8
    2970:	ef 0e       	add	r14, r31
    2972:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    2974:	f8 01       	movw	r30, r16
    2976:	81 91       	ld	r24, Z+
    2978:	8f 01       	movw	r16, r30
    297a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    297c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    2980:	0e 15       	cp	r16, r14
    2982:	1f 05       	cpc	r17, r15
    2984:	b9 f7       	brne	.-18     	; 0x2974 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2986:	27 96       	adiw	r28, 0x07	; 7
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	08 95       	ret

000029a0 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    29a4:	ec eb       	ldi	r30, 0xBC	; 188
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	88 23       	and	r24, r24
    29ac:	34 f0       	brlt	.+12     	; 0x29ba <twi_wait+0x1a>
    29ae:	2f 5f       	subi	r18, 0xFF	; 255
    29b0:	3f 4f       	sbci	r19, 0xFF	; 255
    29b2:	29 3e       	cpi	r18, 0xE9	; 233
    29b4:	83 e0       	ldi	r24, 0x03	; 3
    29b6:	38 07       	cpc	r19, r24
    29b8:	b9 f7       	brne	.-18     	; 0x29a8 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	28 3e       	cpi	r18, 0xE8	; 232
    29be:	33 40       	sbci	r19, 0x03	; 3
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <twi_wait+0x24>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    29c4:	08 95       	ret

000029c6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    29c6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    29ca:	84 e8       	ldi	r24, 0x84	; 132
    29cc:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    29d0:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <twi_wait>
    29d4:	88 23       	and	r24, r24
    29d6:	19 f0       	breq	.+6      	; 0x29de <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    29d8:	80 91 b9 00 	lds	r24, 0x00B9
    29dc:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    29de:	08 95       	ret

000029e0 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    29e0:	cf 93       	push	r28
    29e2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    29e4:	94 ea       	ldi	r25, 0xA4	; 164
    29e6:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    29ea:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <twi_wait>
    29ee:	88 23       	and	r24, r24
    29f0:	61 f0       	breq	.+24     	; 0x2a0a <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    29f2:	8c 2f       	mov	r24, r28
    29f4:	88 0f       	add	r24, r24
    29f6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    29fa:	80 32       	cpi	r24, 0x20	; 32
    29fc:	29 f4       	brne	.+10     	; 0x2a08 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    29fe:	84 e9       	ldi	r24, 0x94	; 148
    2a00:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <start_write+0x2a>
	}	
	return 1;	// success
    2a08:	81 e0       	ldi	r24, 0x01	; 1
}	
    2a0a:	cf 91       	pop	r28
    2a0c:	08 95       	ret

00002a0e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2a0e:	0e 94 26 11 	call	0x224c	; 0x224c <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2a12:	88 e5       	ldi	r24, 0x58	; 88
    2a14:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <start_write>
    2a18:	88 23       	and	r24, r24
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <m_wii_open+0x10>
    2a1c:	cd c0       	rjmp	.+410    	; 0x2bb8 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2a1e:	80 e3       	ldi	r24, 0x30	; 48
    2a20:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a24:	88 23       	and	r24, r24
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <m_wii_open+0x1c>
    2a28:	c9 c0       	rjmp	.+402    	; 0x2bbc <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a30:	88 23       	and	r24, r24
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <m_wii_open+0x28>
    2a34:	c5 c0       	rjmp	.+394    	; 0x2bc0 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2a36:	84 e9       	ldi	r24, 0x94	; 148
    2a38:	80 93 bc 00 	sts	0x00BC, r24
    2a3c:	83 ec       	ldi	r24, 0xC3	; 195
    2a3e:	99 e0       	ldi	r25, 0x09	; 9
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <m_wii_open+0x32>
    2a44:	00 c0       	rjmp	.+0      	; 0x2a46 <m_wii_open+0x38>
    2a46:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2a48:	88 e5       	ldi	r24, 0x58	; 88
    2a4a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <start_write>
    2a4e:	88 23       	and	r24, r24
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <m_wii_open+0x46>
    2a52:	b8 c0       	rjmp	.+368    	; 0x2bc4 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a5a:	88 23       	and	r24, r24
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <m_wii_open+0x52>
    2a5e:	b4 c0       	rjmp	.+360    	; 0x2bc8 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a66:	88 23       	and	r24, r24
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <m_wii_open+0x5e>
    2a6a:	b0 c0       	rjmp	.+352    	; 0x2bcc <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a72:	88 23       	and	r24, r24
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <m_wii_open+0x6a>
    2a76:	ac c0       	rjmp	.+344    	; 0x2bd0 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a7e:	88 23       	and	r24, r24
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <m_wii_open+0x76>
    2a82:	a8 c0       	rjmp	.+336    	; 0x2bd4 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a8a:	88 23       	and	r24, r24
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <m_wii_open+0x82>
    2a8e:	a4 c0       	rjmp	.+328    	; 0x2bd8 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2a96:	88 23       	and	r24, r24
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <m_wii_open+0x8e>
    2a9a:	a0 c0       	rjmp	.+320    	; 0x2bdc <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2aa2:	88 23       	and	r24, r24
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <m_wii_open+0x9a>
    2aa6:	9c c0       	rjmp	.+312    	; 0x2be0 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2aa8:	80 e9       	ldi	r24, 0x90	; 144
    2aaa:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2aae:	88 23       	and	r24, r24
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <m_wii_open+0xa6>
    2ab2:	98 c0       	rjmp	.+304    	; 0x2be4 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2ab4:	84 e9       	ldi	r24, 0x94	; 148
    2ab6:	80 93 bc 00 	sts	0x00BC, r24
    2aba:	83 ec       	ldi	r24, 0xC3	; 195
    2abc:	99 e0       	ldi	r25, 0x09	; 9
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <m_wii_open+0xb0>
    2ac2:	00 c0       	rjmp	.+0      	; 0x2ac4 <m_wii_open+0xb6>
    2ac4:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2ac6:	88 e5       	ldi	r24, 0x58	; 88
    2ac8:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <start_write>
    2acc:	88 23       	and	r24, r24
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <m_wii_open+0xc4>
    2ad0:	8b c0       	rjmp	.+278    	; 0x2be8 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2ad2:	87 e0       	ldi	r24, 0x07	; 7
    2ad4:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2ad8:	88 23       	and	r24, r24
    2ada:	09 f4       	brne	.+2      	; 0x2ade <m_wii_open+0xd0>
    2adc:	87 c0       	rjmp	.+270    	; 0x2bec <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2ae4:	88 23       	and	r24, r24
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <m_wii_open+0xdc>
    2ae8:	83 c0       	rjmp	.+262    	; 0x2bf0 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    2aea:	81 e4       	ldi	r24, 0x41	; 65
    2aec:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2af0:	88 23       	and	r24, r24
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <m_wii_open+0xe8>
    2af4:	7f c0       	rjmp	.+254    	; 0x2bf4 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2af6:	84 e9       	ldi	r24, 0x94	; 148
    2af8:	80 93 bc 00 	sts	0x00BC, r24
    2afc:	83 ec       	ldi	r24, 0xC3	; 195
    2afe:	99 e0       	ldi	r25, 0x09	; 9
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <m_wii_open+0xf2>
    2b04:	00 c0       	rjmp	.+0      	; 0x2b06 <m_wii_open+0xf8>
    2b06:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2b08:	88 e5       	ldi	r24, 0x58	; 88
    2b0a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <start_write>
    2b0e:	88 23       	and	r24, r24
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <m_wii_open+0x106>
    2b12:	72 c0       	rjmp	.+228    	; 0x2bf8 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2b14:	8a e1       	ldi	r24, 0x1A	; 26
    2b16:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <m_wii_open+0x112>
    2b1e:	6e c0       	rjmp	.+220    	; 0x2bfc <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2b20:	80 e4       	ldi	r24, 0x40	; 64
    2b22:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2b26:	88 23       	and	r24, r24
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <m_wii_open+0x11e>
    2b2a:	6a c0       	rjmp	.+212    	; 0x2c00 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2b32:	88 23       	and	r24, r24
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <m_wii_open+0x12a>
    2b36:	66 c0       	rjmp	.+204    	; 0x2c04 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2b38:	84 e9       	ldi	r24, 0x94	; 148
    2b3a:	80 93 bc 00 	sts	0x00BC, r24
    2b3e:	83 ec       	ldi	r24, 0xC3	; 195
    2b40:	99 e0       	ldi	r25, 0x09	; 9
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <m_wii_open+0x134>
    2b46:	00 c0       	rjmp	.+0      	; 0x2b48 <m_wii_open+0x13a>
    2b48:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2b4a:	88 e5       	ldi	r24, 0x58	; 88
    2b4c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <start_write>
    2b50:	88 23       	and	r24, r24
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <m_wii_open+0x148>
    2b54:	59 c0       	rjmp	.+178    	; 0x2c08 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2b56:	83 e3       	ldi	r24, 0x33	; 51
    2b58:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2b5c:	88 23       	and	r24, r24
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <m_wii_open+0x154>
    2b60:	55 c0       	rjmp	.+170    	; 0x2c0c <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2b62:	83 e0       	ldi	r24, 0x03	; 3
    2b64:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <m_wii_open+0x160>
    2b6c:	51 c0       	rjmp	.+162    	; 0x2c10 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2b6e:	84 e9       	ldi	r24, 0x94	; 148
    2b70:	80 93 bc 00 	sts	0x00BC, r24
    2b74:	83 ec       	ldi	r24, 0xC3	; 195
    2b76:	99 e0       	ldi	r25, 0x09	; 9
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <m_wii_open+0x16a>
    2b7c:	00 c0       	rjmp	.+0      	; 0x2b7e <m_wii_open+0x170>
    2b7e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2b80:	88 e5       	ldi	r24, 0x58	; 88
    2b82:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <start_write>
    2b86:	88 23       	and	r24, r24
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <m_wii_open+0x17e>
    2b8a:	44 c0       	rjmp	.+136    	; 0x2c14 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    2b8c:	80 e3       	ldi	r24, 0x30	; 48
    2b8e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2b92:	88 23       	and	r24, r24
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <m_wii_open+0x18a>
    2b96:	40 c0       	rjmp	.+128    	; 0x2c18 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    2b98:	88 e0       	ldi	r24, 0x08	; 8
    2b9a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2b9e:	88 23       	and	r24, r24
    2ba0:	e9 f1       	breq	.+122    	; 0x2c1c <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2ba2:	84 e9       	ldi	r24, 0x94	; 148
    2ba4:	80 93 bc 00 	sts	0x00BC, r24
    2ba8:	83 ec       	ldi	r24, 0xC3	; 195
    2baa:	99 e0       	ldi	r25, 0x09	; 9
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <m_wii_open+0x19e>
    2bb0:	00 c0       	rjmp	.+0      	; 0x2bb2 <m_wii_open+0x1a4>
    2bb2:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2c1e:	08 95       	ret

00002c20 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2c20:	cf 93       	push	r28
    2c22:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2c24:	94 ea       	ldi	r25, 0xA4	; 164
    2c26:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2c2a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <twi_wait>
    2c2e:	88 23       	and	r24, r24
    2c30:	69 f0       	breq	.+26     	; 0x2c4c <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2c32:	8c 2f       	mov	r24, r28
    2c34:	88 0f       	add	r24, r24
    2c36:	8f 5f       	subi	r24, 0xFF	; 255
    2c38:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2c3c:	88 34       	cpi	r24, 0x48	; 72
    2c3e:	29 f4       	brne	.+10     	; 0x2c4a <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2c40:	84 e9       	ldi	r24, 0x94	; 148
    2c42:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	01 c0       	rjmp	.+2      	; 0x2c4c <start_read+0x2c>
	}	
	return 1;	// success
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
}	
    2c4c:	cf 91       	pop	r28
    2c4e:	08 95       	ret

00002c50 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	60 97       	sbiw	r28, 0x10	; 16
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	08 2f       	mov	r16, r24
    2c6e:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2c70:	fe 01       	movw	r30, r28
    2c72:	31 96       	adiw	r30, 0x01	; 1
    2c74:	80 e1       	ldi	r24, 0x10	; 16
    2c76:	df 01       	movw	r26, r30
    2c78:	1d 92       	st	X+, r1
    2c7a:	8a 95       	dec	r24
    2c7c:	e9 f7       	brne	.-6      	; 0x2c78 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2c7e:	88 e5       	ldi	r24, 0x58	; 88
    2c80:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <start_write>
    2c84:	88 23       	and	r24, r24
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <m_wii_read+0x3a>
    2c88:	6e c0       	rjmp	.+220    	; 0x2d66 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    2c8a:	86 e3       	ldi	r24, 0x36	; 54
    2c8c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <send_byte>
    2c90:	88 23       	and	r24, r24
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <m_wii_read+0x46>
    2c94:	6a c0       	rjmp	.+212    	; 0x2d6a <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2c96:	84 e9       	ldi	r24, 0x94	; 148
    2c98:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c9c:	b8 e0       	ldi	r27, 0x08	; 8
    2c9e:	ba 95       	dec	r27
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <m_wii_read+0x4e>
    2ca2:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2ca4:	88 e5       	ldi	r24, 0x58	; 88
    2ca6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <start_read>
    2caa:	88 23       	and	r24, r24
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <m_wii_read+0x60>
    2cae:	5f c0       	rjmp	.+190    	; 0x2d6e <m_wii_read+0x11e>
    2cb0:	be 01       	movw	r22, r28
    2cb2:	6f 5f       	subi	r22, 0xFF	; 255
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb6:	9e 01       	movw	r18, r28
    2cb8:	20 5f       	subi	r18, 0xF0	; 240
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2cbc:	ec eb       	ldi	r30, 0xBC	; 188
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2cc2:	4b eb       	ldi	r20, 0xBB	; 187
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2cc6:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2cc8:	80 81       	ld	r24, Z
    2cca:	88 23       	and	r24, r24
    2ccc:	ec f7       	brge	.-6      	; 0x2cc8 <m_wii_read+0x78>
		temp[i] = TWDR;
    2cce:	da 01       	movw	r26, r20
    2cd0:	8c 91       	ld	r24, X
    2cd2:	db 01       	movw	r26, r22
    2cd4:	8d 93       	st	X+, r24
    2cd6:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2cd8:	a2 17       	cp	r26, r18
    2cda:	b3 07       	cpc	r27, r19
    2cdc:	a1 f7       	brne	.-24     	; 0x2cc6 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2cde:	84 e8       	ldi	r24, 0x84	; 132
    2ce0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2ce4:	ec eb       	ldi	r30, 0xBC	; 188
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	88 23       	and	r24, r24
    2cec:	ec f7       	brge	.-6      	; 0x2ce8 <m_wii_read+0x98>
	temp[15] = TWDR;
    2cee:	80 91 bb 00 	lds	r24, 0x00BB
    2cf2:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2cf4:	84 e9       	ldi	r24, 0x94	; 148
    2cf6:	80 93 bc 00 	sts	0x00BC, r24
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	34 96       	adiw	r30, 0x04	; 4
    2cfe:	e0 2e       	mov	r14, r16
    2d00:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2d02:	80 81       	ld	r24, Z
    2d04:	98 2f       	mov	r25, r24
    2d06:	90 73       	andi	r25, 0x30	; 48
    2d08:	af 01       	movw	r20, r30
    2d0a:	42 50       	subi	r20, 0x02	; 2
    2d0c:	51 09       	sbc	r21, r1
    2d0e:	da 01       	movw	r26, r20
    2d10:	4c 91       	ld	r20, X
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	b0 e1       	ldi	r27, 0x10	; 16
    2d16:	9b 9f       	mul	r25, r27
    2d18:	40 0d       	add	r20, r0
    2d1a:	51 1d       	adc	r21, r1
    2d1c:	11 24       	eor	r1, r1
    2d1e:	d7 01       	movw	r26, r14
    2d20:	4d 93       	st	X+, r20
    2d22:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2d24:	48 2f       	mov	r20, r24
    2d26:	40 7c       	andi	r20, 0xC0	; 192
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	44 0f       	add	r20, r20
    2d2c:	55 1f       	adc	r21, r21
    2d2e:	44 0f       	add	r20, r20
    2d30:	55 1f       	adc	r21, r21
    2d32:	bf 01       	movw	r22, r30
    2d34:	61 50       	subi	r22, 0x01	; 1
    2d36:	71 09       	sbc	r23, r1
    2d38:	db 01       	movw	r26, r22
    2d3a:	9c 91       	ld	r25, X
    2d3c:	49 0f       	add	r20, r25
    2d3e:	51 1d       	adc	r21, r1
    2d40:	d7 01       	movw	r26, r14
    2d42:	13 96       	adiw	r26, 0x03	; 3
    2d44:	5c 93       	st	X, r21
    2d46:	4e 93       	st	-X, r20
    2d48:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2d4a:	8f 70       	andi	r24, 0x0F	; 15
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	15 96       	adiw	r26, 0x05	; 5
    2d50:	9c 93       	st	X, r25
    2d52:	8e 93       	st	-X, r24
    2d54:	14 97       	sbiw	r26, 0x04	; 4
    2d56:	33 96       	adiw	r30, 0x03	; 3
    2d58:	b6 e0       	ldi	r27, 0x06	; 6
    2d5a:	eb 0e       	add	r14, r27
    2d5c:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2d5e:	2e 17       	cp	r18, r30
    2d60:	3f 07       	cpc	r19, r31
    2d62:	79 f6       	brne	.-98     	; 0x2d02 <m_wii_read+0xb2>
    2d64:	06 c0       	rjmp	.+12     	; 0x2d72 <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	05 c0       	rjmp	.+10     	; 0x2d74 <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	03 c0       	rjmp	.+6      	; 0x2d74 <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2d72:	81 e0       	ldi	r24, 0x01	; 1
}
    2d74:	60 96       	adiw	r28, 0x10	; 16
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	1f 91       	pop	r17
    2d86:	0f 91       	pop	r16
    2d88:	ff 90       	pop	r15
    2d8a:	ef 90       	pop	r14
    2d8c:	08 95       	ret

00002d8e <__vector_3>:
		m_wait(15);		// 500ms for read putty, 50ms for actual running
		
	}
}

ISR(INT2_vect){
    2d8e:	1f 92       	push	r1
    2d90:	0f 92       	push	r0
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	0f 92       	push	r0
    2d96:	11 24       	eor	r1, r1
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	2f 93       	push	r18
    2d9e:	3f 93       	push	r19
    2da0:	4f 93       	push	r20
    2da2:	5f 93       	push	r21
    2da4:	6f 93       	push	r22
    2da6:	7f 93       	push	r23
    2da8:	8f 93       	push	r24
    2daa:	9f 93       	push	r25
    2dac:	af 93       	push	r26
    2dae:	bf 93       	push	r27
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	ef 93       	push	r30
    2db6:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    2db8:	6a e0       	ldi	r22, 0x0A	; 10
    2dba:	8e e9       	ldi	r24, 0x9E	; 158
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	0e 94 8d 11 	call	0x231a	; 0x231a <m_rf_read>
	switch(buffer[0]){
    2dc2:	80 91 9e 01 	lds	r24, 0x019E
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e0 5a       	subi	r30, 0xA0	; 160
    2dcc:	f1 09       	sbc	r31, r1
    2dce:	ea 30       	cpi	r30, 0x0A	; 10
    2dd0:	f1 05       	cpc	r31, r1
    2dd2:	08 f0       	brcs	.+2      	; 0x2dd6 <__vector_3+0x48>
    2dd4:	94 c0       	rjmp	.+296    	; 0x2efe <__vector_3+0x170>
    2dd6:	e3 5a       	subi	r30, 0xA3	; 163
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    2dde:	82 e4       	ldi	r24, 0x42	; 66
    2de0:	93 e0       	ldi	r25, 0x03	; 3
    2de2:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			state = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	90 93 ad 01 	sts	0x01AD, r25
    2dee:	80 93 ac 01 	sts	0x01AC, r24
			break;
    2df2:	85 c0       	rjmp	.+266    	; 0x2efe <__vector_3+0x170>
		case 0xA1:
			m_usb_tx_string("Play \n");
    2df4:	8b e3       	ldi	r24, 0x3B	; 59
    2df6:	93 e0       	ldi	r25, 0x03	; 3
    2df8:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			state = 2; 
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	90 93 ad 01 	sts	0x01AD, r25
    2e04:	80 93 ac 01 	sts	0x01AC, r24
			break;
    2e08:	7a c0       	rjmp	.+244    	; 0x2efe <__vector_3+0x170>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    2e0a:	83 e3       	ldi	r24, 0x33	; 51
    2e0c:	93 e0       	ldi	r25, 0x03	; 3
    2e0e:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			scoreR = buffer[1];
    2e12:	80 91 9f 01 	lds	r24, 0x019F
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	90 93 9d 01 	sts	0x019D, r25
    2e1c:	80 93 9c 01 	sts	0x019C, r24
			scoreB = buffer[2];
    2e20:	80 91 a0 01 	lds	r24, 0x01A0
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	90 93 9b 01 	sts	0x019B, r25
    2e2a:	80 93 9a 01 	sts	0x019A, r24
			break;
    2e2e:	67 c0       	rjmp	.+206    	; 0x2efe <__vector_3+0x170>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    2e30:	8b e2       	ldi	r24, 0x2B	; 43
    2e32:	93 e0       	ldi	r25, 0x03	; 3
    2e34:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			scoreR = buffer[1];
    2e38:	80 91 9f 01 	lds	r24, 0x019F
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	90 93 9d 01 	sts	0x019D, r25
    2e42:	80 93 9c 01 	sts	0x019C, r24
			scoreB = buffer[2];
    2e46:	80 91 a0 01 	lds	r24, 0x01A0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	90 93 9b 01 	sts	0x019B, r25
    2e50:	80 93 9a 01 	sts	0x019A, r24
			break;
    2e54:	54 c0       	rjmp	.+168    	; 0x2efe <__vector_3+0x170>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    2e56:	84 e2       	ldi	r24, 0x24	; 36
    2e58:	93 e0       	ldi	r25, 0x03	; 3
    2e5a:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			state = 0;
    2e5e:	10 92 ad 01 	sts	0x01AD, r1
    2e62:	10 92 ac 01 	sts	0x01AC, r1
			break;
    2e66:	4b c0       	rjmp	.+150    	; 0x2efe <__vector_3+0x170>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    2e68:	8a e1       	ldi	r24, 0x1A	; 26
    2e6a:	93 e0       	ldi	r25, 0x03	; 3
    2e6c:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			state = 0;
    2e70:	10 92 ad 01 	sts	0x01AD, r1
    2e74:	10 92 ac 01 	sts	0x01AC, r1
			break;
    2e78:	42 c0       	rjmp	.+132    	; 0x2efe <__vector_3+0x170>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    2e7a:	8f e0       	ldi	r24, 0x0F	; 15
    2e7c:	93 e0       	ldi	r25, 0x03	; 3
    2e7e:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			state = 0;
    2e82:	10 92 ad 01 	sts	0x01AD, r1
    2e86:	10 92 ac 01 	sts	0x01AC, r1
			break;
    2e8a:	39 c0       	rjmp	.+114    	; 0x2efe <__vector_3+0x170>
		case 0xA9: // teammates got the puck, extract No. and location
			puck_holder = buffer[1]; // buffer = {A9, No, X_L, X_H, Y_L, Y_H, ...}
    2e8c:	80 91 9f 01 	lds	r24, 0x019F
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	90 93 89 01 	sts	0x0189, r25
    2e96:	80 93 88 01 	sts	0x0188, r24
			puck_loc[0] = *(int*)&buffer[2];
    2e9a:	04 e8       	ldi	r16, 0x84	; 132
    2e9c:	11 e0       	ldi	r17, 0x01	; 1
    2e9e:	ee e9       	ldi	r30, 0x9E	; 158
    2ea0:	f1 e0       	ldi	r31, 0x01	; 1
    2ea2:	82 81       	ldd	r24, Z+2	; 0x02
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	d8 01       	movw	r26, r16
    2ea8:	8d 93       	st	X+, r24
    2eaa:	9c 93       	st	X, r25
			puck_loc[1] = *(int*)&buffer[4];
    2eac:	c6 e8       	ldi	r28, 0x86	; 134
    2eae:	d1 e0       	ldi	r29, 0x01	; 1
    2eb0:	84 81       	ldd	r24, Z+4	; 0x04
    2eb2:	95 81       	ldd	r25, Z+5	; 0x05
    2eb4:	99 83       	std	Y+1, r25	; 0x01
    2eb6:	88 83       	st	Y, r24
			m_usb_tx_string("No. ");		
    2eb8:	8a e0       	ldi	r24, 0x0A	; 10
    2eba:	93 e0       	ldi	r25, 0x03	; 3
    2ebc:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(puck_holder);
    2ec0:	80 91 88 01 	lds	r24, 0x0188
    2ec4:	90 91 89 01 	lds	r25, 0x0189
    2ec8:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string("got the puck!\n");
    2ecc:	8b ef       	ldi	r24, 0xFB	; 251
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_string("Its location is: ");
    2ed4:	89 ee       	ldi	r24, 0xE9	; 233
    2ed6:	92 e0       	ldi	r25, 0x02	; 2
    2ed8:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(puck_loc[0]);
    2edc:	f8 01       	movw	r30, r16
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string("		y:");
    2ee6:	84 ee       	ldi	r24, 0xE4	; 228
    2ee8:	92 e0       	ldi	r25, 0x02	; 2
    2eea:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			m_usb_tx_int(puck_loc[1]);
    2eee:	88 81       	ld	r24, Y
    2ef0:	99 81       	ldd	r25, Y+1	; 0x01
    2ef2:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
			m_usb_tx_string("\n");
    2ef6:	82 ee       	ldi	r24, 0xE2	; 226
    2ef8:	92 e0       	ldi	r25, 0x02	; 2
    2efa:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			break;
		default:
			break;
	}
}
    2efe:	ff 91       	pop	r31
    2f00:	ef 91       	pop	r30
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	bf 91       	pop	r27
    2f08:	af 91       	pop	r26
    2f0a:	9f 91       	pop	r25
    2f0c:	8f 91       	pop	r24
    2f0e:	7f 91       	pop	r23
    2f10:	6f 91       	pop	r22
    2f12:	5f 91       	pop	r21
    2f14:	4f 91       	pop	r20
    2f16:	3f 91       	pop	r19
    2f18:	2f 91       	pop	r18
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	0f 90       	pop	r0
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	0f 90       	pop	r0
    2f24:	1f 90       	pop	r1
    2f26:	18 95       	reti

00002f28 <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    2f28:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    2f2a:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    2f2c:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    2f2e:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
    2f30:	80 e2       	ldi	r24, 0x20	; 32
    2f32:	93 e0       	ldi	r25, 0x03	; 3
    2f34:	90 93 89 00 	sts	0x0089, r25
    2f38:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    2f3c:	10 92 8b 00 	sts	0x008B, r1
    2f40:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
    2f44:	10 92 8d 00 	sts	0x008D, r1
    2f48:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    2f4c:	a1 e8       	ldi	r26, 0x81	; 129
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	8c 91       	ld	r24, X
    2f52:	80 61       	ori	r24, 0x10	; 16
    2f54:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    2f56:	8c 91       	ld	r24, X
    2f58:	88 60       	ori	r24, 0x08	; 8
    2f5a:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    2f5c:	e0 e8       	ldi	r30, 0x80	; 128
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	82 60       	ori	r24, 0x02	; 2
    2f64:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    2f66:	80 81       	ld	r24, Z
    2f68:	81 60       	ori	r24, 0x01	; 1
    2f6a:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    2f6c:	80 81       	ld	r24, Z
    2f6e:	80 62       	ori	r24, 0x20	; 32
    2f70:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    2f72:	80 81       	ld	r24, Z
    2f74:	8f 7e       	andi	r24, 0xEF	; 239
    2f76:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    2f78:	80 81       	ld	r24, Z
    2f7a:	88 60       	ori	r24, 0x08	; 8
    2f7c:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    2f7e:	80 81       	ld	r24, Z
    2f80:	8b 7f       	andi	r24, 0xFB	; 251
    2f82:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    2f84:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    2f86:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    2f88:	8c 91       	ld	r24, X
    2f8a:	8b 7f       	andi	r24, 0xFB	; 251
    2f8c:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    2f8e:	8c 91       	ld	r24, X
    2f90:	8d 7f       	andi	r24, 0xFD	; 253
    2f92:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    2f94:	8c 91       	ld	r24, X
    2f96:	81 60       	ori	r24, 0x01	; 1
    2f98:	8c 93       	st	X, r24
    2f9a:	08 95       	ret

00002f9c <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    2f9c:	e1 e6       	ldi	r30, 0x61	; 97
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 e8       	ldi	r24, 0x80	; 128
    2fa2:	80 83       	st	Z, r24
    2fa4:	10 82       	st	Z, r1
	
	m_usb_init();
    2fa6:	0e 94 4b 12 	call	0x2496	; 0x2496 <m_usb_init>
	
	//m_wii_open();
	m_red(ON);
    2faa:	6e 9a       	sbi	0x0d, 6	; 13
    2fac:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
    2fae:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <m_wii_open>
    2fb2:	88 23       	and	r24, r24
    2fb4:	e1 f3       	breq	.-8      	; 0x2fae <main+0x12>
	m_red(OFF);
    2fb6:	6e 9a       	sbi	0x0d, 6	; 13
    2fb8:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);
    2fba:	6e 9a       	sbi	0x0d, 6	; 13
    2fbc:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    2fbe:	0e 94 26 11 	call	0x224c	; 0x224c <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    2fc2:	4a e0       	ldi	r20, 0x0A	; 10
    2fc4:	6c e0       	ldi	r22, 0x0C	; 12
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	0e 94 37 11 	call	0x226e	; 0x226e <m_rf_open>
	m_red(OFF);
    2fcc:	6e 9a       	sbi	0x0d, 6	; 13
    2fce:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    2fd0:	0e 94 94 17 	call	0x2f28	; 0x2f28 <init_timer>
	init_ADC();
    2fd4:	0e 94 25 02 	call	0x44a	; 0x44a <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    2fd8:	3e 98       	cbi	0x07, 6	; 7
	set(DDRB, 2);
    2fda:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    2fdc:	23 9a       	sbi	0x04, 3	; 4
	state = 2;
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	90 93 ad 01 	sts	0x01AD, r25
    2fe6:	80 93 ac 01 	sts	0x01AC, r24
			goal[0] = GateB;  // left gate
		}
		else{
			set(PORTB, 3); // red blue
			clear(PORTB, 2);
			goal[0] = GateA;  // right gate
    2fea:	c7 e2       	ldi	r28, 0x27	; 39
    2fec:	d1 e0       	ldi	r29, 0x01	; 1
    2fee:	0f 2e       	mov	r0, r31
    2ff0:	c1 2c       	mov	r12, r1
    2ff2:	d1 2c       	mov	r13, r1
    2ff4:	ff ea       	ldi	r31, 0xAF	; 175
    2ff6:	ef 2e       	mov	r14, r31
    2ff8:	f3 e4       	ldi	r31, 0x43	; 67
    2ffa:	ff 2e       	mov	r15, r31
    2ffc:	f0 2d       	mov	r31, r0
	while(1)
	{	
		if(check(PINC, 6)){
			set(PORTB, 2); // blue Red
			clear(PORTB, 3);
			goal[0] = GateB;  // left gate
    2ffe:	0f 2e       	mov	r0, r31
    3000:	81 2c       	mov	r8, r1
    3002:	91 2c       	mov	r9, r1
    3004:	ff ea       	ldi	r31, 0xAF	; 175
    3006:	af 2e       	mov	r10, r31
    3008:	f3 ec       	ldi	r31, 0xC3	; 195
    300a:	bf 2e       	mov	r11, r31
    300c:	f0 2d       	mov	r31, r0
				m_usb_tx_string("sent messsage.\n");
				deterState(&state);
				m_usb_tx_string("goal = ");
				m_usb_tx_int(goal[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
    300e:	0f 2e       	mov	r0, r31
    3010:	fb e2       	ldi	r31, 0x2B	; 43
    3012:	2f 2e       	mov	r2, r31
    3014:	f1 e0       	ldi	r31, 0x01	; 1
    3016:	3f 2e       	mov	r3, r31
    3018:	f0 2d       	mov	r31, r0
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
				OCR1C = 0;
    301a:	0c e8       	ldi	r16, 0x8C	; 140
    301c:	10 e0       	ldi	r17, 0x00	; 0
	set(DDRB, 2);
	set(DDRB, 3);
	state = 2;
	while(1)
	{	
		if(check(PINC, 6)){
    301e:	36 9b       	sbis	0x06, 6	; 6
    3020:	07 c0       	rjmp	.+14     	; 0x3030 <main+0x94>
			set(PORTB, 2); // blue Red
    3022:	2a 9a       	sbi	0x05, 2	; 5
			clear(PORTB, 3);
    3024:	2b 98       	cbi	0x05, 3	; 5
			goal[0] = GateB;  // left gate
    3026:	88 82       	st	Y, r8
    3028:	99 82       	std	Y+1, r9	; 0x01
    302a:	aa 82       	std	Y+2, r10	; 0x02
    302c:	bb 82       	std	Y+3, r11	; 0x03
    302e:	06 c0       	rjmp	.+12     	; 0x303c <main+0xa0>
		}
		else{
			set(PORTB, 3); // red blue
    3030:	2b 9a       	sbi	0x05, 3	; 5
			clear(PORTB, 2);
    3032:	2a 98       	cbi	0x05, 2	; 5
			goal[0] = GateA;  // right gate
    3034:	c8 82       	st	Y, r12
    3036:	d9 82       	std	Y+1, r13	; 0x01
    3038:	ea 82       	std	Y+2, r14	; 0x02
    303a:	fb 82       	std	Y+3, r15	; 0x03
		}
		
		m_usb_tx_string("state: ");
    303c:	8b e7       	ldi	r24, 0x7B	; 123
    303e:	93 e0       	ldi	r25, 0x03	; 3
    3040:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
		m_usb_tx_int(state);
    3044:	80 91 ac 01 	lds	r24, 0x01AC
    3048:	90 91 ad 01 	lds	r25, 0x01AD
    304c:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
		m_usb_tx_string("\n");
    3050:	89 e7       	ldi	r24, 0x79	; 121
    3052:	93 e0       	ldi	r25, 0x03	; 3
    3054:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
		switch(state){
    3058:	80 91 ac 01 	lds	r24, 0x01AC
    305c:	90 91 ad 01 	lds	r25, 0x01AD
    3060:	81 30       	cpi	r24, 0x01	; 1
    3062:	91 05       	cpc	r25, r1
    3064:	99 f0       	breq	.+38     	; 0x308c <main+0xf0>
    3066:	1c f4       	brge	.+6      	; 0x306e <main+0xd2>
    3068:	89 2b       	or	r24, r25
    306a:	41 f0       	breq	.+16     	; 0x307c <main+0xe0>
    306c:	c0 c0       	rjmp	.+384    	; 0x31ee <main+0x252>
    306e:	82 30       	cpi	r24, 0x02	; 2
    3070:	91 05       	cpc	r25, r1
    3072:	41 f1       	breq	.+80     	; 0x30c4 <main+0x128>
    3074:	03 97       	sbiw	r24, 0x03	; 3
    3076:	09 f4       	brne	.+2      	; 0x307a <main+0xde>
    3078:	42 c0       	rjmp	.+132    	; 0x30fe <main+0x162>
    307a:	b9 c0       	rjmp	.+370    	; 0x31ee <main+0x252>
			case 0:
				// stop
				OCR1B = 0;
    307c:	ea e8       	ldi	r30, 0x8A	; 138
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	11 82       	std	Z+1, r1	; 0x01
    3082:	10 82       	st	Z, r1
				OCR1C = 0;
    3084:	f8 01       	movw	r30, r16
    3086:	11 82       	std	Z+1, r1	; 0x01
    3088:	10 82       	st	Z, r1
				break;
    308a:	b1 c0       	rjmp	.+354    	; 0x31ee <main+0x252>
			case 1:		// comm test, flash a LED
				if(check(PINC, 6)){
    308c:	36 9b       	sbis	0x06, 6	; 6
    308e:	06 c0       	rjmp	.+12     	; 0x309c <main+0x100>
					toggle(PORTB, 2); // blue Red
    3090:	85 b1       	in	r24, 0x05	; 5
    3092:	f4 e0       	ldi	r31, 0x04	; 4
    3094:	8f 27       	eor	r24, r31
    3096:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 3);
    3098:	2b 98       	cbi	0x05, 3	; 5
    309a:	05 c0       	rjmp	.+10     	; 0x30a6 <main+0x10a>
				}
				else{
					toggle(PORTB, 3); // red blue
    309c:	85 b1       	in	r24, 0x05	; 5
    309e:	28 e0       	ldi	r18, 0x08	; 8
    30a0:	82 27       	eor	r24, r18
    30a2:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 2);
    30a4:	2a 98       	cbi	0x05, 2	; 5
				}
				m_red(TOGGLE);
    30a6:	6e 9a       	sbi	0x0d, 6	; 13
    30a8:	8e b1       	in	r24, 0x0e	; 14
    30aa:	90 e4       	ldi	r25, 0x40	; 64
    30ac:	89 27       	eor	r24, r25
    30ae:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    30b0:	ef e3       	ldi	r30, 0x3F	; 63
    30b2:	fd e0       	ldi	r31, 0x0D	; 13
    30b4:	23 e0       	ldi	r18, 0x03	; 3
    30b6:	e1 50       	subi	r30, 0x01	; 1
    30b8:	f0 40       	sbci	r31, 0x00	; 0
    30ba:	20 40       	sbci	r18, 0x00	; 0
    30bc:	e1 f7       	brne	.-8      	; 0x30b6 <main+0x11a>
    30be:	00 c0       	rjmp	.+0      	; 0x30c0 <main+0x124>
    30c0:	00 00       	nop
    30c2:	95 c0       	rjmp	.+298    	; 0x31ee <main+0x252>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    30c4:	6e 9a       	sbi	0x0d, 6	; 13
    30c6:	8e b1       	in	r24, 0x0e	; 14
    30c8:	90 e4       	ldi	r25, 0x40	; 64
    30ca:	89 27       	eor	r24, r25
    30cc:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    30ce:	6a 9a       	sbi	0x0d, 2	; 13
    30d0:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    30d2:	80 91 ac 01 	lds	r24, 0x01AC
    30d6:	90 91 ad 01 	lds	r25, 0x01AD
    30da:	0e 94 9b 03 	call	0x736	; 0x736 <findPuck>
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    30de:	2a e8       	ldi	r18, 0x8A	; 138
    30e0:	31 e0       	ldi	r19, 0x01	; 1
    30e2:	42 e9       	ldi	r20, 0x92	; 146
    30e4:	51 e0       	ldi	r21, 0x01	; 1
    30e6:	be 01       	movw	r22, r28
    30e8:	80 91 ac 01 	lds	r24, 0x01AC
    30ec:	90 91 ad 01 	lds	r25, 0x01AD
    30f0:	0e 94 a0 09 	call	0x1340	; 0x1340 <localization>
				deterState(&state);
    30f4:	8c ea       	ldi	r24, 0xAC	; 172
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	0e 94 0a 06 	call	0xc14	; 0xc14 <deterState>
				break;
    30fc:	78 c0       	rjmp	.+240    	; 0x31ee <main+0x252>
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    30fe:	6a 9a       	sbi	0x0d, 2	; 13
    3100:	8e b1       	in	r24, 0x0e	; 14
    3102:	e4 e0       	ldi	r30, 0x04	; 4
    3104:	8e 27       	eor	r24, r30
    3106:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    3108:	6e 9a       	sbi	0x0d, 6	; 13
    310a:	76 9a       	sbi	0x0e, 6	; 14
				if(c_wii[1] < - yline){
    310c:	e6 e9       	ldi	r30, 0x96	; 150
    310e:	f1 e0       	ldi	r31, 0x01	; 1
    3110:	40 80       	ld	r4, Z
    3112:	51 80       	ldd	r5, Z+1	; 0x01
    3114:	62 80       	ldd	r6, Z+2	; 0x02
    3116:	73 80       	ldd	r7, Z+3	; 0x03
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	48 e4       	ldi	r20, 0x48	; 72
    311e:	52 ec       	ldi	r21, 0xC2	; 194
    3120:	c3 01       	movw	r24, r6
    3122:	b2 01       	movw	r22, r4
    3124:	0e 94 88 19 	call	0x3310	; 0x3310 <__cmpsf2>
    3128:	88 23       	and	r24, r24
    312a:	54 f4       	brge	.+20     	; 0x3140 <main+0x1a4>
					goal[1] = -yline;
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a8 e4       	ldi	r26, 0x48	; 72
    3132:	b2 ec       	ldi	r27, 0xC2	; 194
    3134:	f1 01       	movw	r30, r2
    3136:	80 83       	st	Z, r24
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	a2 83       	std	Z+2, r26	; 0x02
    313c:	b3 83       	std	Z+3, r27	; 0x03
    313e:	19 c0       	rjmp	.+50     	; 0x3172 <main+0x1d6>
				}
				else{
					if(c_wii[1] > yline){
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	48 e4       	ldi	r20, 0x48	; 72
    3146:	52 e4       	ldi	r21, 0x42	; 66
    3148:	c3 01       	movw	r24, r6
    314a:	b2 01       	movw	r22, r4
    314c:	0e 94 17 1b 	call	0x362e	; 0x362e <__gesf2>
    3150:	18 16       	cp	r1, r24
    3152:	54 f4       	brge	.+20     	; 0x3168 <main+0x1cc>
						goal[1] = yline;
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a8 e4       	ldi	r26, 0x48	; 72
    315a:	b2 e4       	ldi	r27, 0x42	; 66
    315c:	f1 01       	movw	r30, r2
    315e:	80 83       	st	Z, r24
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	a2 83       	std	Z+2, r26	; 0x02
    3164:	b3 83       	std	Z+3, r27	; 0x03
    3166:	05 c0       	rjmp	.+10     	; 0x3172 <main+0x1d6>
					}
					else{
						goal[1] = c_wii[1];
    3168:	f1 01       	movw	r30, r2
    316a:	40 82       	st	Z, r4
    316c:	51 82       	std	Z+1, r5	; 0x01
    316e:	62 82       	std	Z+2, r6	; 0x02
    3170:	73 82       	std	Z+3, r7	; 0x03
					}
				}
				localization(state, &goal[0], &c_wii[0], &dir[0]);
    3172:	2a e8       	ldi	r18, 0x8A	; 138
    3174:	31 e0       	ldi	r19, 0x01	; 1
    3176:	42 e9       	ldi	r20, 0x92	; 146
    3178:	51 e0       	ldi	r21, 0x01	; 1
    317a:	be 01       	movw	r22, r28
    317c:	80 91 ac 01 	lds	r24, 0x01AC
    3180:	90 91 ad 01 	lds	r25, 0x01AD
    3184:	0e 94 a0 09 	call	0x1340	; 0x1340 <localization>
				send_message(state, No, &buffer[0], &c_wii[0]);
    3188:	22 e9       	ldi	r18, 0x92	; 146
    318a:	31 e0       	ldi	r19, 0x01	; 1
    318c:	4e e9       	ldi	r20, 0x9E	; 158
    318e:	51 e0       	ldi	r21, 0x01	; 1
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	80 91 ac 01 	lds	r24, 0x01AC
    3198:	90 91 ad 01 	lds	r25, 0x01AD
    319c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_message>
				m_usb_tx_string("sent messsage.\n");
    31a0:	89 e6       	ldi	r24, 0x69	; 105
    31a2:	93 e0       	ldi	r25, 0x03	; 3
    31a4:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
				deterState(&state);
    31a8:	8c ea       	ldi	r24, 0xAC	; 172
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	0e 94 0a 06 	call	0xc14	; 0xc14 <deterState>
				m_usb_tx_string("goal = ");
    31b0:	81 e6       	ldi	r24, 0x61	; 97
    31b2:	93 e0       	ldi	r25, 0x03	; 3
    31b4:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
				m_usb_tx_int(goal[0]);
    31b8:	68 81       	ld	r22, Y
    31ba:	79 81       	ldd	r23, Y+1	; 0x01
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	9b 81       	ldd	r25, Y+3	; 0x03
    31c0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    31c4:	cb 01       	movw	r24, r22
    31c6:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
				m_usb_tx_string(", ");
    31ca:	8e e5       	ldi	r24, 0x5E	; 94
    31cc:	93 e0       	ldi	r25, 0x03	; 3
    31ce:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
				m_usb_tx_int(goal[1]);
    31d2:	f1 01       	movw	r30, r2
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__fixsfsi>
    31e0:	cb 01       	movw	r24, r22
    31e2:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
				m_usb_tx_string("\n");
    31e6:	8c e5       	ldi	r24, 0x5C	; 92
    31e8:	93 e0       	ldi	r25, 0x03	; 3
    31ea:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
			*/
 			default:
 				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    31ee:	83 e5       	ldi	r24, 0x53	; 83
    31f0:	93 e0       	ldi	r25, 0x03	; 3
    31f2:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
		m_usb_tx_int(OCR1B);
    31f6:	ea e8       	ldi	r30, 0x8A	; 138
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
		m_usb_tx_string(", ");
    3202:	80 e5       	ldi	r24, 0x50	; 80
    3204:	93 e0       	ldi	r25, 0x03	; 3
    3206:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
		m_usb_tx_int(OCR1C);
    320a:	f8 01       	movw	r30, r16
    320c:	80 81       	ld	r24, Z
    320e:	91 81       	ldd	r25, Z+1	; 0x01
    3210:	0e 94 9c 14 	call	0x2938	; 0x2938 <m_usb_tx_int>
		m_usb_tx_string("\n");
    3214:	8e e4       	ldi	r24, 0x4E	; 78
    3216:	93 e0       	ldi	r25, 0x03	; 3
    3218:	0e 94 82 14 	call	0x2904	; 0x2904 <print_P>
    321c:	85 ea       	ldi	r24, 0xA5	; 165
    321e:	9e e0       	ldi	r25, 0x0E	; 14
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <main+0x284>
    3224:	00 c0       	rjmp	.+0      	; 0x3226 <main+0x28a>
    3226:	00 00       	nop
    3228:	fa ce       	rjmp	.-524    	; 0x301e <main+0x82>

0000322a <acos>:
    322a:	9f 93       	push	r25
    322c:	9f 77       	andi	r25, 0x7F	; 127
    322e:	4a d1       	rcall	.+660    	; 0x34c4 <__fp_arccos>
    3230:	0f 90       	pop	r0
    3232:	00 20       	and	r0, r0
    3234:	3a f4       	brpl	.+14     	; 0x3244 <acos+0x1a>
    3236:	90 58       	subi	r25, 0x80	; 128
    3238:	a2 ea       	ldi	r26, 0xA2	; 162
    323a:	2a ed       	ldi	r18, 0xDA	; 218
    323c:	3f e0       	ldi	r19, 0x0F	; 15
    323e:	49 e4       	ldi	r20, 0x49	; 73
    3240:	50 e4       	ldi	r21, 0x40	; 64
    3242:	13 d0       	rcall	.+38     	; 0x326a <__addsf3x>
    3244:	ba c1       	rjmp	.+884    	; 0x35ba <__fp_round>

00003246 <__subsf3>:
    3246:	50 58       	subi	r21, 0x80	; 128

00003248 <__addsf3>:
    3248:	bb 27       	eor	r27, r27
    324a:	aa 27       	eor	r26, r26
    324c:	0e d0       	rcall	.+28     	; 0x326a <__addsf3x>
    324e:	b5 c1       	rjmp	.+874    	; 0x35ba <__fp_round>
    3250:	a6 d1       	rcall	.+844    	; 0x359e <__fp_pscA>
    3252:	30 f0       	brcs	.+12     	; 0x3260 <__addsf3+0x18>
    3254:	ab d1       	rcall	.+854    	; 0x35ac <__fp_pscB>
    3256:	20 f0       	brcs	.+8      	; 0x3260 <__addsf3+0x18>
    3258:	31 f4       	brne	.+12     	; 0x3266 <__addsf3+0x1e>
    325a:	9f 3f       	cpi	r25, 0xFF	; 255
    325c:	11 f4       	brne	.+4      	; 0x3262 <__addsf3+0x1a>
    325e:	1e f4       	brtc	.+6      	; 0x3266 <__addsf3+0x1e>
    3260:	76 c1       	rjmp	.+748    	; 0x354e <__fp_nan>
    3262:	0e f4       	brtc	.+2      	; 0x3266 <__addsf3+0x1e>
    3264:	e0 95       	com	r30
    3266:	e7 fb       	bst	r30, 7
    3268:	6c c1       	rjmp	.+728    	; 0x3542 <__fp_inf>

0000326a <__addsf3x>:
    326a:	e9 2f       	mov	r30, r25
    326c:	b7 d1       	rcall	.+878    	; 0x35dc <__fp_split3>
    326e:	80 f3       	brcs	.-32     	; 0x3250 <__addsf3+0x8>
    3270:	ba 17       	cp	r27, r26
    3272:	62 07       	cpc	r22, r18
    3274:	73 07       	cpc	r23, r19
    3276:	84 07       	cpc	r24, r20
    3278:	95 07       	cpc	r25, r21
    327a:	18 f0       	brcs	.+6      	; 0x3282 <__addsf3x+0x18>
    327c:	71 f4       	brne	.+28     	; 0x329a <__addsf3x+0x30>
    327e:	9e f5       	brtc	.+102    	; 0x32e6 <__addsf3x+0x7c>
    3280:	cf c1       	rjmp	.+926    	; 0x3620 <__fp_zero>
    3282:	0e f4       	brtc	.+2      	; 0x3286 <__addsf3x+0x1c>
    3284:	e0 95       	com	r30
    3286:	0b 2e       	mov	r0, r27
    3288:	ba 2f       	mov	r27, r26
    328a:	a0 2d       	mov	r26, r0
    328c:	0b 01       	movw	r0, r22
    328e:	b9 01       	movw	r22, r18
    3290:	90 01       	movw	r18, r0
    3292:	0c 01       	movw	r0, r24
    3294:	ca 01       	movw	r24, r20
    3296:	a0 01       	movw	r20, r0
    3298:	11 24       	eor	r1, r1
    329a:	ff 27       	eor	r31, r31
    329c:	59 1b       	sub	r21, r25
    329e:	99 f0       	breq	.+38     	; 0x32c6 <__addsf3x+0x5c>
    32a0:	59 3f       	cpi	r21, 0xF9	; 249
    32a2:	50 f4       	brcc	.+20     	; 0x32b8 <__addsf3x+0x4e>
    32a4:	50 3e       	cpi	r21, 0xE0	; 224
    32a6:	68 f1       	brcs	.+90     	; 0x3302 <__addsf3x+0x98>
    32a8:	1a 16       	cp	r1, r26
    32aa:	f0 40       	sbci	r31, 0x00	; 0
    32ac:	a2 2f       	mov	r26, r18
    32ae:	23 2f       	mov	r18, r19
    32b0:	34 2f       	mov	r19, r20
    32b2:	44 27       	eor	r20, r20
    32b4:	58 5f       	subi	r21, 0xF8	; 248
    32b6:	f3 cf       	rjmp	.-26     	; 0x329e <__addsf3x+0x34>
    32b8:	46 95       	lsr	r20
    32ba:	37 95       	ror	r19
    32bc:	27 95       	ror	r18
    32be:	a7 95       	ror	r26
    32c0:	f0 40       	sbci	r31, 0x00	; 0
    32c2:	53 95       	inc	r21
    32c4:	c9 f7       	brne	.-14     	; 0x32b8 <__addsf3x+0x4e>
    32c6:	7e f4       	brtc	.+30     	; 0x32e6 <__addsf3x+0x7c>
    32c8:	1f 16       	cp	r1, r31
    32ca:	ba 0b       	sbc	r27, r26
    32cc:	62 0b       	sbc	r22, r18
    32ce:	73 0b       	sbc	r23, r19
    32d0:	84 0b       	sbc	r24, r20
    32d2:	ba f0       	brmi	.+46     	; 0x3302 <__addsf3x+0x98>
    32d4:	91 50       	subi	r25, 0x01	; 1
    32d6:	a1 f0       	breq	.+40     	; 0x3300 <__addsf3x+0x96>
    32d8:	ff 0f       	add	r31, r31
    32da:	bb 1f       	adc	r27, r27
    32dc:	66 1f       	adc	r22, r22
    32de:	77 1f       	adc	r23, r23
    32e0:	88 1f       	adc	r24, r24
    32e2:	c2 f7       	brpl	.-16     	; 0x32d4 <__addsf3x+0x6a>
    32e4:	0e c0       	rjmp	.+28     	; 0x3302 <__addsf3x+0x98>
    32e6:	ba 0f       	add	r27, r26
    32e8:	62 1f       	adc	r22, r18
    32ea:	73 1f       	adc	r23, r19
    32ec:	84 1f       	adc	r24, r20
    32ee:	48 f4       	brcc	.+18     	; 0x3302 <__addsf3x+0x98>
    32f0:	87 95       	ror	r24
    32f2:	77 95       	ror	r23
    32f4:	67 95       	ror	r22
    32f6:	b7 95       	ror	r27
    32f8:	f7 95       	ror	r31
    32fa:	9e 3f       	cpi	r25, 0xFE	; 254
    32fc:	08 f0       	brcs	.+2      	; 0x3300 <__addsf3x+0x96>
    32fe:	b3 cf       	rjmp	.-154    	; 0x3266 <__addsf3+0x1e>
    3300:	93 95       	inc	r25
    3302:	88 0f       	add	r24, r24
    3304:	08 f0       	brcs	.+2      	; 0x3308 <__addsf3x+0x9e>
    3306:	99 27       	eor	r25, r25
    3308:	ee 0f       	add	r30, r30
    330a:	97 95       	ror	r25
    330c:	87 95       	ror	r24
    330e:	08 95       	ret

00003310 <__cmpsf2>:
    3310:	f4 d0       	rcall	.+488    	; 0x34fa <__fp_cmp>
    3312:	08 f4       	brcc	.+2      	; 0x3316 <__cmpsf2+0x6>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	08 95       	ret

00003318 <__divsf3>:
    3318:	0c d0       	rcall	.+24     	; 0x3332 <__divsf3x>
    331a:	4f c1       	rjmp	.+670    	; 0x35ba <__fp_round>
    331c:	47 d1       	rcall	.+654    	; 0x35ac <__fp_pscB>
    331e:	40 f0       	brcs	.+16     	; 0x3330 <__divsf3+0x18>
    3320:	3e d1       	rcall	.+636    	; 0x359e <__fp_pscA>
    3322:	30 f0       	brcs	.+12     	; 0x3330 <__divsf3+0x18>
    3324:	21 f4       	brne	.+8      	; 0x332e <__divsf3+0x16>
    3326:	5f 3f       	cpi	r21, 0xFF	; 255
    3328:	19 f0       	breq	.+6      	; 0x3330 <__divsf3+0x18>
    332a:	0b c1       	rjmp	.+534    	; 0x3542 <__fp_inf>
    332c:	51 11       	cpse	r21, r1
    332e:	79 c1       	rjmp	.+754    	; 0x3622 <__fp_szero>
    3330:	0e c1       	rjmp	.+540    	; 0x354e <__fp_nan>

00003332 <__divsf3x>:
    3332:	54 d1       	rcall	.+680    	; 0x35dc <__fp_split3>
    3334:	98 f3       	brcs	.-26     	; 0x331c <__divsf3+0x4>

00003336 <__divsf3_pse>:
    3336:	99 23       	and	r25, r25
    3338:	c9 f3       	breq	.-14     	; 0x332c <__divsf3+0x14>
    333a:	55 23       	and	r21, r21
    333c:	b1 f3       	breq	.-20     	; 0x332a <__divsf3+0x12>
    333e:	95 1b       	sub	r25, r21
    3340:	55 0b       	sbc	r21, r21
    3342:	bb 27       	eor	r27, r27
    3344:	aa 27       	eor	r26, r26
    3346:	62 17       	cp	r22, r18
    3348:	73 07       	cpc	r23, r19
    334a:	84 07       	cpc	r24, r20
    334c:	38 f0       	brcs	.+14     	; 0x335c <__divsf3_pse+0x26>
    334e:	9f 5f       	subi	r25, 0xFF	; 255
    3350:	5f 4f       	sbci	r21, 0xFF	; 255
    3352:	22 0f       	add	r18, r18
    3354:	33 1f       	adc	r19, r19
    3356:	44 1f       	adc	r20, r20
    3358:	aa 1f       	adc	r26, r26
    335a:	a9 f3       	breq	.-22     	; 0x3346 <__divsf3_pse+0x10>
    335c:	33 d0       	rcall	.+102    	; 0x33c4 <__divsf3_pse+0x8e>
    335e:	0e 2e       	mov	r0, r30
    3360:	3a f0       	brmi	.+14     	; 0x3370 <__divsf3_pse+0x3a>
    3362:	e0 e8       	ldi	r30, 0x80	; 128
    3364:	30 d0       	rcall	.+96     	; 0x33c6 <__divsf3_pse+0x90>
    3366:	91 50       	subi	r25, 0x01	; 1
    3368:	50 40       	sbci	r21, 0x00	; 0
    336a:	e6 95       	lsr	r30
    336c:	00 1c       	adc	r0, r0
    336e:	ca f7       	brpl	.-14     	; 0x3362 <__divsf3_pse+0x2c>
    3370:	29 d0       	rcall	.+82     	; 0x33c4 <__divsf3_pse+0x8e>
    3372:	fe 2f       	mov	r31, r30
    3374:	27 d0       	rcall	.+78     	; 0x33c4 <__divsf3_pse+0x8e>
    3376:	66 0f       	add	r22, r22
    3378:	77 1f       	adc	r23, r23
    337a:	88 1f       	adc	r24, r24
    337c:	bb 1f       	adc	r27, r27
    337e:	26 17       	cp	r18, r22
    3380:	37 07       	cpc	r19, r23
    3382:	48 07       	cpc	r20, r24
    3384:	ab 07       	cpc	r26, r27
    3386:	b0 e8       	ldi	r27, 0x80	; 128
    3388:	09 f0       	breq	.+2      	; 0x338c <__divsf3_pse+0x56>
    338a:	bb 0b       	sbc	r27, r27
    338c:	80 2d       	mov	r24, r0
    338e:	bf 01       	movw	r22, r30
    3390:	ff 27       	eor	r31, r31
    3392:	93 58       	subi	r25, 0x83	; 131
    3394:	5f 4f       	sbci	r21, 0xFF	; 255
    3396:	2a f0       	brmi	.+10     	; 0x33a2 <__divsf3_pse+0x6c>
    3398:	9e 3f       	cpi	r25, 0xFE	; 254
    339a:	51 05       	cpc	r21, r1
    339c:	68 f0       	brcs	.+26     	; 0x33b8 <__divsf3_pse+0x82>
    339e:	d1 c0       	rjmp	.+418    	; 0x3542 <__fp_inf>
    33a0:	40 c1       	rjmp	.+640    	; 0x3622 <__fp_szero>
    33a2:	5f 3f       	cpi	r21, 0xFF	; 255
    33a4:	ec f3       	brlt	.-6      	; 0x33a0 <__divsf3_pse+0x6a>
    33a6:	98 3e       	cpi	r25, 0xE8	; 232
    33a8:	dc f3       	brlt	.-10     	; 0x33a0 <__divsf3_pse+0x6a>
    33aa:	86 95       	lsr	r24
    33ac:	77 95       	ror	r23
    33ae:	67 95       	ror	r22
    33b0:	b7 95       	ror	r27
    33b2:	f7 95       	ror	r31
    33b4:	9f 5f       	subi	r25, 0xFF	; 255
    33b6:	c9 f7       	brne	.-14     	; 0x33aa <__divsf3_pse+0x74>
    33b8:	88 0f       	add	r24, r24
    33ba:	91 1d       	adc	r25, r1
    33bc:	96 95       	lsr	r25
    33be:	87 95       	ror	r24
    33c0:	97 f9       	bld	r25, 7
    33c2:	08 95       	ret
    33c4:	e1 e0       	ldi	r30, 0x01	; 1
    33c6:	66 0f       	add	r22, r22
    33c8:	77 1f       	adc	r23, r23
    33ca:	88 1f       	adc	r24, r24
    33cc:	bb 1f       	adc	r27, r27
    33ce:	62 17       	cp	r22, r18
    33d0:	73 07       	cpc	r23, r19
    33d2:	84 07       	cpc	r24, r20
    33d4:	ba 07       	cpc	r27, r26
    33d6:	20 f0       	brcs	.+8      	; 0x33e0 <__divsf3_pse+0xaa>
    33d8:	62 1b       	sub	r22, r18
    33da:	73 0b       	sbc	r23, r19
    33dc:	84 0b       	sbc	r24, r20
    33de:	ba 0b       	sbc	r27, r26
    33e0:	ee 1f       	adc	r30, r30
    33e2:	88 f7       	brcc	.-30     	; 0x33c6 <__divsf3_pse+0x90>
    33e4:	e0 95       	com	r30
    33e6:	08 95       	ret

000033e8 <__fixsfsi>:
    33e8:	04 d0       	rcall	.+8      	; 0x33f2 <__fixunssfsi>
    33ea:	68 94       	set
    33ec:	b1 11       	cpse	r27, r1
    33ee:	19 c1       	rjmp	.+562    	; 0x3622 <__fp_szero>
    33f0:	08 95       	ret

000033f2 <__fixunssfsi>:
    33f2:	fc d0       	rcall	.+504    	; 0x35ec <__fp_splitA>
    33f4:	88 f0       	brcs	.+34     	; 0x3418 <__fixunssfsi+0x26>
    33f6:	9f 57       	subi	r25, 0x7F	; 127
    33f8:	90 f0       	brcs	.+36     	; 0x341e <__fixunssfsi+0x2c>
    33fa:	b9 2f       	mov	r27, r25
    33fc:	99 27       	eor	r25, r25
    33fe:	b7 51       	subi	r27, 0x17	; 23
    3400:	a0 f0       	brcs	.+40     	; 0x342a <__fixunssfsi+0x38>
    3402:	d1 f0       	breq	.+52     	; 0x3438 <__fixunssfsi+0x46>
    3404:	66 0f       	add	r22, r22
    3406:	77 1f       	adc	r23, r23
    3408:	88 1f       	adc	r24, r24
    340a:	99 1f       	adc	r25, r25
    340c:	1a f0       	brmi	.+6      	; 0x3414 <__fixunssfsi+0x22>
    340e:	ba 95       	dec	r27
    3410:	c9 f7       	brne	.-14     	; 0x3404 <__fixunssfsi+0x12>
    3412:	12 c0       	rjmp	.+36     	; 0x3438 <__fixunssfsi+0x46>
    3414:	b1 30       	cpi	r27, 0x01	; 1
    3416:	81 f0       	breq	.+32     	; 0x3438 <__fixunssfsi+0x46>
    3418:	03 d1       	rcall	.+518    	; 0x3620 <__fp_zero>
    341a:	b1 e0       	ldi	r27, 0x01	; 1
    341c:	08 95       	ret
    341e:	00 c1       	rjmp	.+512    	; 0x3620 <__fp_zero>
    3420:	67 2f       	mov	r22, r23
    3422:	78 2f       	mov	r23, r24
    3424:	88 27       	eor	r24, r24
    3426:	b8 5f       	subi	r27, 0xF8	; 248
    3428:	39 f0       	breq	.+14     	; 0x3438 <__fixunssfsi+0x46>
    342a:	b9 3f       	cpi	r27, 0xF9	; 249
    342c:	cc f3       	brlt	.-14     	; 0x3420 <__fixunssfsi+0x2e>
    342e:	86 95       	lsr	r24
    3430:	77 95       	ror	r23
    3432:	67 95       	ror	r22
    3434:	b3 95       	inc	r27
    3436:	d9 f7       	brne	.-10     	; 0x342e <__fixunssfsi+0x3c>
    3438:	3e f4       	brtc	.+14     	; 0x3448 <__fixunssfsi+0x56>
    343a:	90 95       	com	r25
    343c:	80 95       	com	r24
    343e:	70 95       	com	r23
    3440:	61 95       	neg	r22
    3442:	7f 4f       	sbci	r23, 0xFF	; 255
    3444:	8f 4f       	sbci	r24, 0xFF	; 255
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	08 95       	ret

0000344a <__floatunsisf>:
    344a:	e8 94       	clt
    344c:	09 c0       	rjmp	.+18     	; 0x3460 <__floatsisf+0x12>

0000344e <__floatsisf>:
    344e:	97 fb       	bst	r25, 7
    3450:	3e f4       	brtc	.+14     	; 0x3460 <__floatsisf+0x12>
    3452:	90 95       	com	r25
    3454:	80 95       	com	r24
    3456:	70 95       	com	r23
    3458:	61 95       	neg	r22
    345a:	7f 4f       	sbci	r23, 0xFF	; 255
    345c:	8f 4f       	sbci	r24, 0xFF	; 255
    345e:	9f 4f       	sbci	r25, 0xFF	; 255
    3460:	99 23       	and	r25, r25
    3462:	a9 f0       	breq	.+42     	; 0x348e <__floatsisf+0x40>
    3464:	f9 2f       	mov	r31, r25
    3466:	96 e9       	ldi	r25, 0x96	; 150
    3468:	bb 27       	eor	r27, r27
    346a:	93 95       	inc	r25
    346c:	f6 95       	lsr	r31
    346e:	87 95       	ror	r24
    3470:	77 95       	ror	r23
    3472:	67 95       	ror	r22
    3474:	b7 95       	ror	r27
    3476:	f1 11       	cpse	r31, r1
    3478:	f8 cf       	rjmp	.-16     	; 0x346a <__floatsisf+0x1c>
    347a:	fa f4       	brpl	.+62     	; 0x34ba <__floatsisf+0x6c>
    347c:	bb 0f       	add	r27, r27
    347e:	11 f4       	brne	.+4      	; 0x3484 <__floatsisf+0x36>
    3480:	60 ff       	sbrs	r22, 0
    3482:	1b c0       	rjmp	.+54     	; 0x34ba <__floatsisf+0x6c>
    3484:	6f 5f       	subi	r22, 0xFF	; 255
    3486:	7f 4f       	sbci	r23, 0xFF	; 255
    3488:	8f 4f       	sbci	r24, 0xFF	; 255
    348a:	9f 4f       	sbci	r25, 0xFF	; 255
    348c:	16 c0       	rjmp	.+44     	; 0x34ba <__floatsisf+0x6c>
    348e:	88 23       	and	r24, r24
    3490:	11 f0       	breq	.+4      	; 0x3496 <__floatsisf+0x48>
    3492:	96 e9       	ldi	r25, 0x96	; 150
    3494:	11 c0       	rjmp	.+34     	; 0x34b8 <__floatsisf+0x6a>
    3496:	77 23       	and	r23, r23
    3498:	21 f0       	breq	.+8      	; 0x34a2 <__floatsisf+0x54>
    349a:	9e e8       	ldi	r25, 0x8E	; 142
    349c:	87 2f       	mov	r24, r23
    349e:	76 2f       	mov	r23, r22
    34a0:	05 c0       	rjmp	.+10     	; 0x34ac <__floatsisf+0x5e>
    34a2:	66 23       	and	r22, r22
    34a4:	71 f0       	breq	.+28     	; 0x34c2 <__floatsisf+0x74>
    34a6:	96 e8       	ldi	r25, 0x86	; 134
    34a8:	86 2f       	mov	r24, r22
    34aa:	70 e0       	ldi	r23, 0x00	; 0
    34ac:	60 e0       	ldi	r22, 0x00	; 0
    34ae:	2a f0       	brmi	.+10     	; 0x34ba <__floatsisf+0x6c>
    34b0:	9a 95       	dec	r25
    34b2:	66 0f       	add	r22, r22
    34b4:	77 1f       	adc	r23, r23
    34b6:	88 1f       	adc	r24, r24
    34b8:	da f7       	brpl	.-10     	; 0x34b0 <__floatsisf+0x62>
    34ba:	88 0f       	add	r24, r24
    34bc:	96 95       	lsr	r25
    34be:	87 95       	ror	r24
    34c0:	97 f9       	bld	r25, 7
    34c2:	08 95       	ret

000034c4 <__fp_arccos>:
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	1f 93       	push	r17
    34ca:	0f 93       	push	r16
    34cc:	8b 01       	movw	r16, r22
    34ce:	ec 01       	movw	r28, r24
    34d0:	ee ec       	ldi	r30, 0xCE	; 206
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	3f d0       	rcall	.+126    	; 0x3554 <__fp_powser>
    34d6:	71 d0       	rcall	.+226    	; 0x35ba <__fp_round>
    34d8:	98 01       	movw	r18, r16
    34da:	ae 01       	movw	r20, r28
    34dc:	8b 01       	movw	r16, r22
    34de:	ec 01       	movw	r28, r24
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	80 e8       	ldi	r24, 0x80	; 128
    34e6:	9f e3       	ldi	r25, 0x3F	; 63
    34e8:	ae de       	rcall	.-676    	; 0x3246 <__subsf3>
    34ea:	0c d1       	rcall	.+536    	; 0x3704 <sqrt>
    34ec:	98 01       	movw	r18, r16
    34ee:	ae 01       	movw	r20, r28
    34f0:	0f 91       	pop	r16
    34f2:	1f 91       	pop	r17
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	aa c0       	rjmp	.+340    	; 0x364e <__mulsf3x>

000034fa <__fp_cmp>:
    34fa:	99 0f       	add	r25, r25
    34fc:	00 08       	sbc	r0, r0
    34fe:	55 0f       	add	r21, r21
    3500:	aa 0b       	sbc	r26, r26
    3502:	e0 e8       	ldi	r30, 0x80	; 128
    3504:	fe ef       	ldi	r31, 0xFE	; 254
    3506:	16 16       	cp	r1, r22
    3508:	17 06       	cpc	r1, r23
    350a:	e8 07       	cpc	r30, r24
    350c:	f9 07       	cpc	r31, r25
    350e:	c0 f0       	brcs	.+48     	; 0x3540 <__fp_cmp+0x46>
    3510:	12 16       	cp	r1, r18
    3512:	13 06       	cpc	r1, r19
    3514:	e4 07       	cpc	r30, r20
    3516:	f5 07       	cpc	r31, r21
    3518:	98 f0       	brcs	.+38     	; 0x3540 <__fp_cmp+0x46>
    351a:	62 1b       	sub	r22, r18
    351c:	73 0b       	sbc	r23, r19
    351e:	84 0b       	sbc	r24, r20
    3520:	95 0b       	sbc	r25, r21
    3522:	39 f4       	brne	.+14     	; 0x3532 <__fp_cmp+0x38>
    3524:	0a 26       	eor	r0, r26
    3526:	61 f0       	breq	.+24     	; 0x3540 <__fp_cmp+0x46>
    3528:	23 2b       	or	r18, r19
    352a:	24 2b       	or	r18, r20
    352c:	25 2b       	or	r18, r21
    352e:	21 f4       	brne	.+8      	; 0x3538 <__fp_cmp+0x3e>
    3530:	08 95       	ret
    3532:	0a 26       	eor	r0, r26
    3534:	09 f4       	brne	.+2      	; 0x3538 <__fp_cmp+0x3e>
    3536:	a1 40       	sbci	r26, 0x01	; 1
    3538:	a6 95       	lsr	r26
    353a:	8f ef       	ldi	r24, 0xFF	; 255
    353c:	81 1d       	adc	r24, r1
    353e:	81 1d       	adc	r24, r1
    3540:	08 95       	ret

00003542 <__fp_inf>:
    3542:	97 f9       	bld	r25, 7
    3544:	9f 67       	ori	r25, 0x7F	; 127
    3546:	80 e8       	ldi	r24, 0x80	; 128
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	08 95       	ret

0000354e <__fp_nan>:
    354e:	9f ef       	ldi	r25, 0xFF	; 255
    3550:	80 ec       	ldi	r24, 0xC0	; 192
    3552:	08 95       	ret

00003554 <__fp_powser>:
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	1f 93       	push	r17
    355a:	0f 93       	push	r16
    355c:	ff 92       	push	r15
    355e:	ef 92       	push	r14
    3560:	df 92       	push	r13
    3562:	7b 01       	movw	r14, r22
    3564:	8c 01       	movw	r16, r24
    3566:	68 94       	set
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <__fp_powser+0x20>
    356a:	da 2e       	mov	r13, r26
    356c:	ef 01       	movw	r28, r30
    356e:	6f d0       	rcall	.+222    	; 0x364e <__mulsf3x>
    3570:	fe 01       	movw	r30, r28
    3572:	e8 94       	clt
    3574:	a5 91       	lpm	r26, Z+
    3576:	25 91       	lpm	r18, Z+
    3578:	35 91       	lpm	r19, Z+
    357a:	45 91       	lpm	r20, Z+
    357c:	55 91       	lpm	r21, Z+
    357e:	ae f3       	brts	.-22     	; 0x356a <__fp_powser+0x16>
    3580:	ef 01       	movw	r28, r30
    3582:	73 de       	rcall	.-794    	; 0x326a <__addsf3x>
    3584:	fe 01       	movw	r30, r28
    3586:	97 01       	movw	r18, r14
    3588:	a8 01       	movw	r20, r16
    358a:	da 94       	dec	r13
    358c:	79 f7       	brne	.-34     	; 0x356c <__fp_powser+0x18>
    358e:	df 90       	pop	r13
    3590:	ef 90       	pop	r14
    3592:	ff 90       	pop	r15
    3594:	0f 91       	pop	r16
    3596:	1f 91       	pop	r17
    3598:	cf 91       	pop	r28
    359a:	df 91       	pop	r29
    359c:	08 95       	ret

0000359e <__fp_pscA>:
    359e:	00 24       	eor	r0, r0
    35a0:	0a 94       	dec	r0
    35a2:	16 16       	cp	r1, r22
    35a4:	17 06       	cpc	r1, r23
    35a6:	18 06       	cpc	r1, r24
    35a8:	09 06       	cpc	r0, r25
    35aa:	08 95       	ret

000035ac <__fp_pscB>:
    35ac:	00 24       	eor	r0, r0
    35ae:	0a 94       	dec	r0
    35b0:	12 16       	cp	r1, r18
    35b2:	13 06       	cpc	r1, r19
    35b4:	14 06       	cpc	r1, r20
    35b6:	05 06       	cpc	r0, r21
    35b8:	08 95       	ret

000035ba <__fp_round>:
    35ba:	09 2e       	mov	r0, r25
    35bc:	03 94       	inc	r0
    35be:	00 0c       	add	r0, r0
    35c0:	11 f4       	brne	.+4      	; 0x35c6 <__fp_round+0xc>
    35c2:	88 23       	and	r24, r24
    35c4:	52 f0       	brmi	.+20     	; 0x35da <__fp_round+0x20>
    35c6:	bb 0f       	add	r27, r27
    35c8:	40 f4       	brcc	.+16     	; 0x35da <__fp_round+0x20>
    35ca:	bf 2b       	or	r27, r31
    35cc:	11 f4       	brne	.+4      	; 0x35d2 <__fp_round+0x18>
    35ce:	60 ff       	sbrs	r22, 0
    35d0:	04 c0       	rjmp	.+8      	; 0x35da <__fp_round+0x20>
    35d2:	6f 5f       	subi	r22, 0xFF	; 255
    35d4:	7f 4f       	sbci	r23, 0xFF	; 255
    35d6:	8f 4f       	sbci	r24, 0xFF	; 255
    35d8:	9f 4f       	sbci	r25, 0xFF	; 255
    35da:	08 95       	ret

000035dc <__fp_split3>:
    35dc:	57 fd       	sbrc	r21, 7
    35de:	90 58       	subi	r25, 0x80	; 128
    35e0:	44 0f       	add	r20, r20
    35e2:	55 1f       	adc	r21, r21
    35e4:	59 f0       	breq	.+22     	; 0x35fc <__fp_splitA+0x10>
    35e6:	5f 3f       	cpi	r21, 0xFF	; 255
    35e8:	71 f0       	breq	.+28     	; 0x3606 <__fp_splitA+0x1a>
    35ea:	47 95       	ror	r20

000035ec <__fp_splitA>:
    35ec:	88 0f       	add	r24, r24
    35ee:	97 fb       	bst	r25, 7
    35f0:	99 1f       	adc	r25, r25
    35f2:	61 f0       	breq	.+24     	; 0x360c <__fp_splitA+0x20>
    35f4:	9f 3f       	cpi	r25, 0xFF	; 255
    35f6:	79 f0       	breq	.+30     	; 0x3616 <__fp_splitA+0x2a>
    35f8:	87 95       	ror	r24
    35fa:	08 95       	ret
    35fc:	12 16       	cp	r1, r18
    35fe:	13 06       	cpc	r1, r19
    3600:	14 06       	cpc	r1, r20
    3602:	55 1f       	adc	r21, r21
    3604:	f2 cf       	rjmp	.-28     	; 0x35ea <__fp_split3+0xe>
    3606:	46 95       	lsr	r20
    3608:	f1 df       	rcall	.-30     	; 0x35ec <__fp_splitA>
    360a:	08 c0       	rjmp	.+16     	; 0x361c <__fp_splitA+0x30>
    360c:	16 16       	cp	r1, r22
    360e:	17 06       	cpc	r1, r23
    3610:	18 06       	cpc	r1, r24
    3612:	99 1f       	adc	r25, r25
    3614:	f1 cf       	rjmp	.-30     	; 0x35f8 <__fp_splitA+0xc>
    3616:	86 95       	lsr	r24
    3618:	71 05       	cpc	r23, r1
    361a:	61 05       	cpc	r22, r1
    361c:	08 94       	sec
    361e:	08 95       	ret

00003620 <__fp_zero>:
    3620:	e8 94       	clt

00003622 <__fp_szero>:
    3622:	bb 27       	eor	r27, r27
    3624:	66 27       	eor	r22, r22
    3626:	77 27       	eor	r23, r23
    3628:	cb 01       	movw	r24, r22
    362a:	97 f9       	bld	r25, 7
    362c:	08 95       	ret

0000362e <__gesf2>:
    362e:	65 df       	rcall	.-310    	; 0x34fa <__fp_cmp>
    3630:	08 f4       	brcc	.+2      	; 0x3634 <__gesf2+0x6>
    3632:	8f ef       	ldi	r24, 0xFF	; 255
    3634:	08 95       	ret

00003636 <__mulsf3>:
    3636:	0b d0       	rcall	.+22     	; 0x364e <__mulsf3x>
    3638:	c0 cf       	rjmp	.-128    	; 0x35ba <__fp_round>
    363a:	b1 df       	rcall	.-158    	; 0x359e <__fp_pscA>
    363c:	28 f0       	brcs	.+10     	; 0x3648 <__mulsf3+0x12>
    363e:	b6 df       	rcall	.-148    	; 0x35ac <__fp_pscB>
    3640:	18 f0       	brcs	.+6      	; 0x3648 <__mulsf3+0x12>
    3642:	95 23       	and	r25, r21
    3644:	09 f0       	breq	.+2      	; 0x3648 <__mulsf3+0x12>
    3646:	7d cf       	rjmp	.-262    	; 0x3542 <__fp_inf>
    3648:	82 cf       	rjmp	.-252    	; 0x354e <__fp_nan>
    364a:	11 24       	eor	r1, r1
    364c:	ea cf       	rjmp	.-44     	; 0x3622 <__fp_szero>

0000364e <__mulsf3x>:
    364e:	c6 df       	rcall	.-116    	; 0x35dc <__fp_split3>
    3650:	a0 f3       	brcs	.-24     	; 0x363a <__mulsf3+0x4>

00003652 <__mulsf3_pse>:
    3652:	95 9f       	mul	r25, r21
    3654:	d1 f3       	breq	.-12     	; 0x364a <__mulsf3+0x14>
    3656:	95 0f       	add	r25, r21
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	55 1f       	adc	r21, r21
    365c:	62 9f       	mul	r22, r18
    365e:	f0 01       	movw	r30, r0
    3660:	72 9f       	mul	r23, r18
    3662:	bb 27       	eor	r27, r27
    3664:	f0 0d       	add	r31, r0
    3666:	b1 1d       	adc	r27, r1
    3668:	63 9f       	mul	r22, r19
    366a:	aa 27       	eor	r26, r26
    366c:	f0 0d       	add	r31, r0
    366e:	b1 1d       	adc	r27, r1
    3670:	aa 1f       	adc	r26, r26
    3672:	64 9f       	mul	r22, r20
    3674:	66 27       	eor	r22, r22
    3676:	b0 0d       	add	r27, r0
    3678:	a1 1d       	adc	r26, r1
    367a:	66 1f       	adc	r22, r22
    367c:	82 9f       	mul	r24, r18
    367e:	22 27       	eor	r18, r18
    3680:	b0 0d       	add	r27, r0
    3682:	a1 1d       	adc	r26, r1
    3684:	62 1f       	adc	r22, r18
    3686:	73 9f       	mul	r23, r19
    3688:	b0 0d       	add	r27, r0
    368a:	a1 1d       	adc	r26, r1
    368c:	62 1f       	adc	r22, r18
    368e:	83 9f       	mul	r24, r19
    3690:	a0 0d       	add	r26, r0
    3692:	61 1d       	adc	r22, r1
    3694:	22 1f       	adc	r18, r18
    3696:	74 9f       	mul	r23, r20
    3698:	33 27       	eor	r19, r19
    369a:	a0 0d       	add	r26, r0
    369c:	61 1d       	adc	r22, r1
    369e:	23 1f       	adc	r18, r19
    36a0:	84 9f       	mul	r24, r20
    36a2:	60 0d       	add	r22, r0
    36a4:	21 1d       	adc	r18, r1
    36a6:	82 2f       	mov	r24, r18
    36a8:	76 2f       	mov	r23, r22
    36aa:	6a 2f       	mov	r22, r26
    36ac:	11 24       	eor	r1, r1
    36ae:	9f 57       	subi	r25, 0x7F	; 127
    36b0:	50 40       	sbci	r21, 0x00	; 0
    36b2:	8a f0       	brmi	.+34     	; 0x36d6 <__mulsf3_pse+0x84>
    36b4:	e1 f0       	breq	.+56     	; 0x36ee <__mulsf3_pse+0x9c>
    36b6:	88 23       	and	r24, r24
    36b8:	4a f0       	brmi	.+18     	; 0x36cc <__mulsf3_pse+0x7a>
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	bb 1f       	adc	r27, r27
    36c0:	66 1f       	adc	r22, r22
    36c2:	77 1f       	adc	r23, r23
    36c4:	88 1f       	adc	r24, r24
    36c6:	91 50       	subi	r25, 0x01	; 1
    36c8:	50 40       	sbci	r21, 0x00	; 0
    36ca:	a9 f7       	brne	.-22     	; 0x36b6 <__mulsf3_pse+0x64>
    36cc:	9e 3f       	cpi	r25, 0xFE	; 254
    36ce:	51 05       	cpc	r21, r1
    36d0:	70 f0       	brcs	.+28     	; 0x36ee <__mulsf3_pse+0x9c>
    36d2:	37 cf       	rjmp	.-402    	; 0x3542 <__fp_inf>
    36d4:	a6 cf       	rjmp	.-180    	; 0x3622 <__fp_szero>
    36d6:	5f 3f       	cpi	r21, 0xFF	; 255
    36d8:	ec f3       	brlt	.-6      	; 0x36d4 <__mulsf3_pse+0x82>
    36da:	98 3e       	cpi	r25, 0xE8	; 232
    36dc:	dc f3       	brlt	.-10     	; 0x36d4 <__mulsf3_pse+0x82>
    36de:	86 95       	lsr	r24
    36e0:	77 95       	ror	r23
    36e2:	67 95       	ror	r22
    36e4:	b7 95       	ror	r27
    36e6:	f7 95       	ror	r31
    36e8:	e7 95       	ror	r30
    36ea:	9f 5f       	subi	r25, 0xFF	; 255
    36ec:	c1 f7       	brne	.-16     	; 0x36de <__mulsf3_pse+0x8c>
    36ee:	fe 2b       	or	r31, r30
    36f0:	88 0f       	add	r24, r24
    36f2:	91 1d       	adc	r25, r1
    36f4:	96 95       	lsr	r25
    36f6:	87 95       	ror	r24
    36f8:	97 f9       	bld	r25, 7
    36fa:	08 95       	ret
    36fc:	11 f4       	brne	.+4      	; 0x3702 <__mulsf3_pse+0xb0>
    36fe:	0e f4       	brtc	.+2      	; 0x3702 <__mulsf3_pse+0xb0>
    3700:	26 cf       	rjmp	.-436    	; 0x354e <__fp_nan>
    3702:	3e c0       	rjmp	.+124    	; 0x3780 <__fp_mpack>

00003704 <sqrt>:
    3704:	73 df       	rcall	.-282    	; 0x35ec <__fp_splitA>
    3706:	d0 f3       	brcs	.-12     	; 0x36fc <__mulsf3_pse+0xaa>
    3708:	99 23       	and	r25, r25
    370a:	d9 f3       	breq	.-10     	; 0x3702 <__mulsf3_pse+0xb0>
    370c:	ce f3       	brts	.-14     	; 0x3700 <__mulsf3_pse+0xae>
    370e:	9f 57       	subi	r25, 0x7F	; 127
    3710:	55 0b       	sbc	r21, r21
    3712:	87 ff       	sbrs	r24, 7
    3714:	43 d0       	rcall	.+134    	; 0x379c <__fp_norm2>
    3716:	00 24       	eor	r0, r0
    3718:	a0 e6       	ldi	r26, 0x60	; 96
    371a:	40 ea       	ldi	r20, 0xA0	; 160
    371c:	90 01       	movw	r18, r0
    371e:	80 58       	subi	r24, 0x80	; 128
    3720:	56 95       	lsr	r21
    3722:	97 95       	ror	r25
    3724:	28 f4       	brcc	.+10     	; 0x3730 <sqrt+0x2c>
    3726:	80 5c       	subi	r24, 0xC0	; 192
    3728:	66 0f       	add	r22, r22
    372a:	77 1f       	adc	r23, r23
    372c:	88 1f       	adc	r24, r24
    372e:	20 f0       	brcs	.+8      	; 0x3738 <sqrt+0x34>
    3730:	26 17       	cp	r18, r22
    3732:	37 07       	cpc	r19, r23
    3734:	48 07       	cpc	r20, r24
    3736:	30 f4       	brcc	.+12     	; 0x3744 <sqrt+0x40>
    3738:	62 1b       	sub	r22, r18
    373a:	73 0b       	sbc	r23, r19
    373c:	84 0b       	sbc	r24, r20
    373e:	20 29       	or	r18, r0
    3740:	31 29       	or	r19, r1
    3742:	4a 2b       	or	r20, r26
    3744:	a6 95       	lsr	r26
    3746:	17 94       	ror	r1
    3748:	07 94       	ror	r0
    374a:	20 25       	eor	r18, r0
    374c:	31 25       	eor	r19, r1
    374e:	4a 27       	eor	r20, r26
    3750:	58 f7       	brcc	.-42     	; 0x3728 <sqrt+0x24>
    3752:	66 0f       	add	r22, r22
    3754:	77 1f       	adc	r23, r23
    3756:	88 1f       	adc	r24, r24
    3758:	20 f0       	brcs	.+8      	; 0x3762 <sqrt+0x5e>
    375a:	26 17       	cp	r18, r22
    375c:	37 07       	cpc	r19, r23
    375e:	48 07       	cpc	r20, r24
    3760:	30 f4       	brcc	.+12     	; 0x376e <sqrt+0x6a>
    3762:	62 0b       	sbc	r22, r18
    3764:	73 0b       	sbc	r23, r19
    3766:	84 0b       	sbc	r24, r20
    3768:	20 0d       	add	r18, r0
    376a:	31 1d       	adc	r19, r1
    376c:	41 1d       	adc	r20, r1
    376e:	a0 95       	com	r26
    3770:	81 f7       	brne	.-32     	; 0x3752 <sqrt+0x4e>
    3772:	b9 01       	movw	r22, r18
    3774:	84 2f       	mov	r24, r20
    3776:	91 58       	subi	r25, 0x81	; 129
    3778:	88 0f       	add	r24, r24
    377a:	96 95       	lsr	r25
    377c:	87 95       	ror	r24
    377e:	08 95       	ret

00003780 <__fp_mpack>:
    3780:	9f 3f       	cpi	r25, 0xFF	; 255
    3782:	31 f0       	breq	.+12     	; 0x3790 <__fp_mpack_finite+0xc>

00003784 <__fp_mpack_finite>:
    3784:	91 50       	subi	r25, 0x01	; 1
    3786:	20 f4       	brcc	.+8      	; 0x3790 <__fp_mpack_finite+0xc>
    3788:	87 95       	ror	r24
    378a:	77 95       	ror	r23
    378c:	67 95       	ror	r22
    378e:	b7 95       	ror	r27
    3790:	88 0f       	add	r24, r24
    3792:	91 1d       	adc	r25, r1
    3794:	96 95       	lsr	r25
    3796:	87 95       	ror	r24
    3798:	97 f9       	bld	r25, 7
    379a:	08 95       	ret

0000379c <__fp_norm2>:
    379c:	91 50       	subi	r25, 0x01	; 1
    379e:	50 40       	sbci	r21, 0x00	; 0
    37a0:	66 0f       	add	r22, r22
    37a2:	77 1f       	adc	r23, r23
    37a4:	88 1f       	adc	r24, r24
    37a6:	d2 f7       	brpl	.-12     	; 0x379c <__fp_norm2>
    37a8:	08 95       	ret

000037aa <__divmodhi4>:
    37aa:	97 fb       	bst	r25, 7
    37ac:	07 2e       	mov	r0, r23
    37ae:	16 f4       	brtc	.+4      	; 0x37b4 <__divmodhi4+0xa>
    37b0:	00 94       	com	r0
    37b2:	07 d0       	rcall	.+14     	; 0x37c2 <__divmodhi4_neg1>
    37b4:	77 fd       	sbrc	r23, 7
    37b6:	09 d0       	rcall	.+18     	; 0x37ca <__divmodhi4_neg2>
    37b8:	0e 94 ef 1b 	call	0x37de	; 0x37de <__udivmodhi4>
    37bc:	07 fc       	sbrc	r0, 7
    37be:	05 d0       	rcall	.+10     	; 0x37ca <__divmodhi4_neg2>
    37c0:	3e f4       	brtc	.+14     	; 0x37d0 <__divmodhi4_exit>

000037c2 <__divmodhi4_neg1>:
    37c2:	90 95       	com	r25
    37c4:	81 95       	neg	r24
    37c6:	9f 4f       	sbci	r25, 0xFF	; 255
    37c8:	08 95       	ret

000037ca <__divmodhi4_neg2>:
    37ca:	70 95       	com	r23
    37cc:	61 95       	neg	r22
    37ce:	7f 4f       	sbci	r23, 0xFF	; 255

000037d0 <__divmodhi4_exit>:
    37d0:	08 95       	ret

000037d2 <__tablejump2__>:
    37d2:	ee 0f       	add	r30, r30
    37d4:	ff 1f       	adc	r31, r31

000037d6 <__tablejump__>:
    37d6:	05 90       	lpm	r0, Z+
    37d8:	f4 91       	lpm	r31, Z
    37da:	e0 2d       	mov	r30, r0
    37dc:	09 94       	ijmp

000037de <__udivmodhi4>:
    37de:	aa 1b       	sub	r26, r26
    37e0:	bb 1b       	sub	r27, r27
    37e2:	51 e1       	ldi	r21, 0x11	; 17
    37e4:	07 c0       	rjmp	.+14     	; 0x37f4 <__udivmodhi4_ep>

000037e6 <__udivmodhi4_loop>:
    37e6:	aa 1f       	adc	r26, r26
    37e8:	bb 1f       	adc	r27, r27
    37ea:	a6 17       	cp	r26, r22
    37ec:	b7 07       	cpc	r27, r23
    37ee:	10 f0       	brcs	.+4      	; 0x37f4 <__udivmodhi4_ep>
    37f0:	a6 1b       	sub	r26, r22
    37f2:	b7 0b       	sbc	r27, r23

000037f4 <__udivmodhi4_ep>:
    37f4:	88 1f       	adc	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	5a 95       	dec	r21
    37fa:	a9 f7       	brne	.-22     	; 0x37e6 <__udivmodhi4_loop>
    37fc:	80 95       	com	r24
    37fe:	90 95       	com	r25
    3800:	bc 01       	movw	r22, r24
    3802:	cd 01       	movw	r24, r26
    3804:	08 95       	ret

00003806 <__itoa_ncheck>:
    3806:	bb 27       	eor	r27, r27
    3808:	4a 30       	cpi	r20, 0x0A	; 10
    380a:	31 f4       	brne	.+12     	; 0x3818 <__itoa_ncheck+0x12>
    380c:	99 23       	and	r25, r25
    380e:	22 f4       	brpl	.+8      	; 0x3818 <__itoa_ncheck+0x12>
    3810:	bd e2       	ldi	r27, 0x2D	; 45
    3812:	90 95       	com	r25
    3814:	81 95       	neg	r24
    3816:	9f 4f       	sbci	r25, 0xFF	; 255
    3818:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__utoa_common>

0000381c <__utoa_ncheck>:
    381c:	bb 27       	eor	r27, r27

0000381e <__utoa_common>:
    381e:	fb 01       	movw	r30, r22
    3820:	55 27       	eor	r21, r21
    3822:	aa 27       	eor	r26, r26
    3824:	88 0f       	add	r24, r24
    3826:	99 1f       	adc	r25, r25
    3828:	aa 1f       	adc	r26, r26
    382a:	a4 17       	cp	r26, r20
    382c:	10 f0       	brcs	.+4      	; 0x3832 <__utoa_common+0x14>
    382e:	a4 1b       	sub	r26, r20
    3830:	83 95       	inc	r24
    3832:	50 51       	subi	r21, 0x10	; 16
    3834:	b9 f7       	brne	.-18     	; 0x3824 <__utoa_common+0x6>
    3836:	a0 5d       	subi	r26, 0xD0	; 208
    3838:	aa 33       	cpi	r26, 0x3A	; 58
    383a:	08 f0       	brcs	.+2      	; 0x383e <__utoa_common+0x20>
    383c:	a9 5d       	subi	r26, 0xD9	; 217
    383e:	a1 93       	st	Z+, r26
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	79 f7       	brne	.-34     	; 0x3822 <__utoa_common+0x4>
    3844:	b1 11       	cpse	r27, r1
    3846:	b1 93       	st	Z+, r27
    3848:	11 92       	st	Z+, r1
    384a:	cb 01       	movw	r24, r22
    384c:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <strrev>

00003850 <strrev>:
    3850:	dc 01       	movw	r26, r24
    3852:	fc 01       	movw	r30, r24
    3854:	67 2f       	mov	r22, r23
    3856:	71 91       	ld	r23, Z+
    3858:	77 23       	and	r23, r23
    385a:	e1 f7       	brne	.-8      	; 0x3854 <strrev+0x4>
    385c:	32 97       	sbiw	r30, 0x02	; 2
    385e:	04 c0       	rjmp	.+8      	; 0x3868 <strrev+0x18>
    3860:	7c 91       	ld	r23, X
    3862:	6d 93       	st	X+, r22
    3864:	70 83       	st	Z, r23
    3866:	62 91       	ld	r22, -Z
    3868:	ae 17       	cp	r26, r30
    386a:	bf 07       	cpc	r27, r31
    386c:	c8 f3       	brcs	.-14     	; 0x3860 <strrev+0x10>
    386e:	08 95       	ret

00003870 <_exit>:
    3870:	f8 94       	cli

00003872 <__stop_program>:
    3872:	ff cf       	rjmp	.-2      	; 0x3872 <__stop_program>

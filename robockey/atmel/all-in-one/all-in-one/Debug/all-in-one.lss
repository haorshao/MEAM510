
all-in-one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00002d18  00002dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  0080012e  0080012e  00002dda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  00002e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cb3  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000921  00000000  00000000  00005ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f61  00000000  00000000  0000660e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000874  00000000  00000000  00007570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b3  00000000  00000000  00007de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000038ad  00000000  00000000  00008697  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  0000bf44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 01 	jmp	0x256	; 0x256 <__ctors_end>
       4:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
       8:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
       c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_3>
      10:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      14:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      18:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      1c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      20:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      24:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      28:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_10>
      2c:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_11>
      30:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      34:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      38:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      3c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      40:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      44:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      48:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      4c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      50:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      54:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      58:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      5c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      60:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      64:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      68:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      6c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      70:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      74:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_29>
      78:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      7c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      80:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      84:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      88:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      8c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      90:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      94:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      98:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      9c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      a0:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      a4:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      a8:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      ac:	6e 01       	movw	r12, r28
      ae:	79 01       	movw	r14, r18
      b0:	9b 01       	movw	r18, r22
      b2:	c2 01       	movw	r24, r4
      b4:	e1 01       	movw	r28, r2
      b6:	fb 01       	movw	r30, r22
      b8:	ea 01       	movw	r28, r20
      ba:	f3 01       	movw	r30, r6
      bc:	07 2c       	mov	r0, r7
      be:	7a a5       	ldd	r23, Y+42	; 0x2a
      c0:	ba 6c       	ori	r27, 0xCA	; 202
      c2:	c5 90       	lpm	r12, Z+
      c4:	da 3b       	cpi	r29, 0xBA	; 186
      c6:	93 65       	ori	r25, 0x53	; 83
      c8:	fc 8b       	std	Y+20, r31	; 0x14
      ca:	bc 53       	subi	r27, 0x3C	; 60
      cc:	f8 10       	cpse	r15, r8
      ce:	fd 3c       	cpi	r31, 0xCD	; 205
      d0:	56 92       	lac	Z, r5
      d2:	83 4d       	sbci	r24, 0xD3	; 211
      d4:	bd 87       	std	Y+13, r27	; 0x0d
      d6:	9d 3a       	cpi	r25, 0xAD	; 173
      d8:	b6 3d       	cpi	r27, 0xD6	; 214
      da:	cb c9       	rjmp	.-3178   	; 0xfffff472 <__eeprom_end+0xff7ef472>
      dc:	bf 5b       	subi	r27, 0xBF	; 191
      de:	be 73       	andi	r27, 0x3E	; 62
      e0:	da 0f       	add	r29, r26
      e2:	c9 3f       	cpi	r28, 0xF9	; 249

000000e4 <__trampolines_end>:
      e4:	0a 00       	.word	0x000a	; ????

000000e6 <__c.2254>:
      e6:	2c 20 00                                            , .

000000e9 <__c.2252>:
      e9:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

000000f2 <__c.2250>:
      f2:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000000fd <__c.2248>:
      fd:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000109 <__c.2246>:
     109:	0a 00                                               ..

0000010b <__c.2244>:
     10b:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000115 <__c.2242>:
     115:	0a 00                                               ..

00000117 <__c.2240>:
     117:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000122 <__c.2230>:
     122:	0a 00                                               ..

00000124 <__c.2228>:
     124:	61 6c 70 68 61 3a 20 00                             alpha: .

0000012c <__c.2085>:
     12c:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

00000137 <__c.2082>:
     137:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000141 <__c.2079>:
     141:	50 61 75 73 65 0a 00                                Pause..

00000148 <__c.2076>:
     148:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000150 <__c.2073>:
     150:	47 6f 61 6c 20 41 0a 00                             Goal A..

00000158 <__c.2070>:
     158:	50 6c 61 79 20 0a 00                                Play ..

0000015f <__c.2066>:
     15f:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

0000016b <__c.2057>:
     16b:	0a 00                                               ..

0000016d <__c.2055>:
     16d:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000175 <__c.2053>:
     175:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000186 <__c.2051>:
     186:	0a 00                                               ..

00000188 <__c.2049>:
     188:	09 09 79 3a 00                                      ..y:.

0000018d <__c.2047>:
     18d:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000199 <__c.2040>:
     199:	0a 00                                               ..

0000019b <__c.2038>:
     19b:	73 74 61 74 65 3a 20 00                             state: .

000001a3 <descriptor_list>:
     1a3:	00 01 00 00 3a 02 12 00 02 00 00 f7 01 43 00 03     ....:........C..
     1b3:	00 00 f3 01 04 01 03 09 04 df 01 12 02 03 09 04     ................
     1c3:	d7 01 06 03 03 09 04 cd 01 08                       ..........

000001cd <string3>:
     1cd:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001d7 <string2>:
     1d7:	06 03 4d 00 32 00 00 00                             ..M.2...

000001df <string1>:
     1df:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1ef:	65 00 00 00                                         e...

000001f3 <string0>:
     1f3:	04 03 09 04                                         ....

000001f7 <config1_descriptor>:
     1f7:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     207:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     217:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     227:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     237:	40 00 00                                            @..

0000023a <device_descriptor>:
     23a:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     24a:	03 01                                               ..

0000024c <endpoint_config_table>:
     24c:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000256 <__ctors_end>:
     256:	11 24       	eor	r1, r1
     258:	1f be       	out	0x3f, r1	; 63
     25a:	cf ef       	ldi	r28, 0xFF	; 255
     25c:	da e0       	ldi	r29, 0x0A	; 10
     25e:	de bf       	out	0x3e, r29	; 62
     260:	cd bf       	out	0x3d, r28	; 61

00000262 <__do_copy_data>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a0 e0       	ldi	r26, 0x00	; 0
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	e8 e1       	ldi	r30, 0x18	; 24
     26a:	fd e2       	ldi	r31, 0x2D	; 45
     26c:	02 c0       	rjmp	.+4      	; 0x272 <__do_copy_data+0x10>
     26e:	05 90       	lpm	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	ae 32       	cpi	r26, 0x2E	; 46
     274:	b1 07       	cpc	r27, r17
     276:	d9 f7       	brne	.-10     	; 0x26e <__do_copy_data+0xc>

00000278 <__do_clear_bss>:
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	ae e2       	ldi	r26, 0x2E	; 46
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	01 c0       	rjmp	.+2      	; 0x282 <.do_clear_bss_start>

00000280 <.do_clear_bss_loop>:
     280:	1d 92       	st	X+, r1

00000282 <.do_clear_bss_start>:
     282:	ac 39       	cpi	r26, 0x9C	; 156
     284:	b2 07       	cpc	r27, r18
     286:	e1 f7       	brne	.-8      	; 0x280 <.do_clear_bss_loop>
     288:	0e 94 65 0d 	call	0x1aca	; 0x1aca <main>
     28c:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_exit>

00000290 <__bad_interrupt>:
     290:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000294 <__vector_3>:
		

    }
}

ISR(INT2_vect){
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
     2b6:	6a e0       	ldi	r22, 0x0A	; 10
     2b8:	88 e8       	ldi	r24, 0x88	; 136
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <m_rf_read>
	switch(buffer[0]){
     2c0:	80 91 88 01 	lds	r24, 0x0188
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	fc 01       	movw	r30, r24
     2c8:	e0 5a       	subi	r30, 0xA0	; 160
     2ca:	f1 09       	sbc	r31, r1
     2cc:	e8 30       	cpi	r30, 0x08	; 8
     2ce:	f1 05       	cpc	r31, r1
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__vector_3+0x40>
     2d2:	91 c0       	rjmp	.+290    	; 0x3f6 <__vector_3+0x162>
     2d4:	ea 5a       	subi	r30, 0xAA	; 170
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
     2dc:	8f e5       	ldi	r24, 0x5F	; 95
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
			state = 1;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	90 93 9b 01 	sts	0x019B, r25
     2ec:	80 93 9a 01 	sts	0x019A, r24
			break;
     2f0:	82 c0       	rjmp	.+260    	; 0x3f6 <__vector_3+0x162>
		case 0xA1:
			usb_tx_string("Play \n");
     2f2:	88 e5       	ldi	r24, 0x58	; 88
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
			state = 3; // should be 2, but set to 3 for qualify
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 9b 01 	sts	0x019B, r25
     302:	80 93 9a 01 	sts	0x019A, r24
			// Turn on timer, set prescaler as /1
			clear(TCCR1B, CS12);\
     306:	e1 e8       	ldi	r30, 0x81	; 129
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	8b 7f       	andi	r24, 0xFB	; 251
     30e:	80 83       	st	Z, r24
			clear(TCCR1B, CS11);
     310:	80 81       	ld	r24, Z
     312:	8d 7f       	andi	r24, 0xFD	; 253
     314:	80 83       	st	Z, r24
			set(TCCR1B, CS10);
     316:	80 81       	ld	r24, Z
     318:	81 60       	ori	r24, 0x01	; 1
     31a:	80 83       	st	Z, r24
			m_wii_read(&blobs[0]);
     31c:	8e e5       	ldi	r24, 0x5E	; 94
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <m_wii_read>
			m_wii_read(&blobs[0]);
     324:	8e e5       	ldi	r24, 0x5E	; 94
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <m_wii_read>
			m_wii_read(&blobs[0]);
     32c:	8e e5       	ldi	r24, 0x5E	; 94
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <m_wii_read>
			break;
     334:	60 c0       	rjmp	.+192    	; 0x3f6 <__vector_3+0x162>
		case 0xA2:
			usb_tx_string("Goal A\n");
     336:	80 e5       	ldi	r24, 0x50	; 80
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
			scoreR = buffer[1];
     33e:	80 91 89 01 	lds	r24, 0x0189
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	90 93 87 01 	sts	0x0187, r25
     348:	80 93 86 01 	sts	0x0186, r24
			scoreB = buffer[2];
     34c:	80 91 8a 01 	lds	r24, 0x018A
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 85 01 	sts	0x0185, r25
     356:	80 93 84 01 	sts	0x0184, r24
			goal[0] = GateA;
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	af ea       	ldi	r26, 0xAF	; 175
     360:	b3 e4       	ldi	r27, 0x43	; 67
     362:	80 93 14 01 	sts	0x0114, r24
     366:	90 93 15 01 	sts	0x0115, r25
     36a:	a0 93 16 01 	sts	0x0116, r26
     36e:	b0 93 17 01 	sts	0x0117, r27
			goal[1] = 0;
     372:	10 92 18 01 	sts	0x0118, r1
     376:	10 92 19 01 	sts	0x0119, r1
     37a:	10 92 1a 01 	sts	0x011A, r1
     37e:	10 92 1b 01 	sts	0x011B, r1
			break;
     382:	39 c0       	rjmp	.+114    	; 0x3f6 <__vector_3+0x162>
		case 0xA3:
			usb_tx_string("Goal B\n");
     384:	88 e4       	ldi	r24, 0x48	; 72
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
			scoreR = buffer[1];
     38c:	80 91 89 01 	lds	r24, 0x0189
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	90 93 87 01 	sts	0x0187, r25
     396:	80 93 86 01 	sts	0x0186, r24
			scoreB = buffer[2];
     39a:	80 91 8a 01 	lds	r24, 0x018A
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 85 01 	sts	0x0185, r25
     3a4:	80 93 84 01 	sts	0x0184, r24
			goal[0] = GateB;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	af ea       	ldi	r26, 0xAF	; 175
     3ae:	b3 ec       	ldi	r27, 0xC3	; 195
     3b0:	80 93 14 01 	sts	0x0114, r24
     3b4:	90 93 15 01 	sts	0x0115, r25
     3b8:	a0 93 16 01 	sts	0x0116, r26
     3bc:	b0 93 17 01 	sts	0x0117, r27
			break;
     3c0:	1a c0       	rjmp	.+52     	; 0x3f6 <__vector_3+0x162>
		case 0xA4:
			usb_tx_string("Pause\n");
     3c2:	81 e4       	ldi	r24, 0x41	; 65
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
			state = 0;
     3ca:	10 92 9b 01 	sts	0x019B, r1
     3ce:	10 92 9a 01 	sts	0x019A, r1
			break;
     3d2:	11 c0       	rjmp	.+34     	; 0x3f6 <__vector_3+0x162>
		case 0xA6:
			usb_tx_string("Halftime\n");
     3d4:	87 e3       	ldi	r24, 0x37	; 55
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
			state = 0;
     3dc:	10 92 9b 01 	sts	0x019B, r1
     3e0:	10 92 9a 01 	sts	0x019A, r1
			break;
     3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <__vector_3+0x162>
		case 0xA7:
			usb_tx_string("Game over\n");
     3e6:	8c e2       	ldi	r24, 0x2C	; 44
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
			state = 0;
     3ee:	10 92 9b 01 	sts	0x019B, r1
     3f2:	10 92 9a 01 	sts	0x019A, r1
			break;
		default:
			break;
	}
}
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	bf 91       	pop	r27
     3fc:	af 91       	pop	r26
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	7f 91       	pop	r23
     404:	6f 91       	pop	r22
     406:	5f 91       	pop	r21
     408:	4f 91       	pop	r20
     40a:	3f 91       	pop	r19
     40c:	2f 91       	pop	r18
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
     418:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
     41a:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
     41c:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
     41e:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 250;
     420:	8a ef       	ldi	r24, 0xFA	; 250
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	90 93 89 00 	sts	0x0089, r25
     428:	80 93 88 00 	sts	0x0088, r24
	OCR1B = full_speed;
     42c:	86 e9       	ldi	r24, 0x96	; 150
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 8b 00 	sts	0x008B, r25
     434:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = full_speed;
     438:	90 93 8d 00 	sts	0x008D, r25
     43c:	80 93 8c 00 	sts	0x008C, r24
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
     440:	a1 e8       	ldi	r26, 0x81	; 129
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	8c 91       	ld	r24, X
     446:	80 61       	ori	r24, 0x10	; 16
     448:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
     44a:	8c 91       	ld	r24, X
     44c:	88 60       	ori	r24, 0x08	; 8
     44e:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
     450:	e0 e8       	ldi	r30, 0x80	; 128
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	82 60       	ori	r24, 0x02	; 2
     458:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     45a:	80 81       	ld	r24, Z
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
     460:	80 81       	ld	r24, Z
     462:	80 62       	ori	r24, 0x20	; 32
     464:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
     466:	80 81       	ld	r24, Z
     468:	8f 7e       	andi	r24, 0xEF	; 239
     46a:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
     46c:	80 81       	ld	r24, Z
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
     472:	80 81       	ld	r24, Z
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
     478:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
     47a:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
     47c:	8c 91       	ld	r24, X
     47e:	8b 7f       	andi	r24, 0xFB	; 251
     480:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
     482:	8c 91       	ld	r24, X
     484:	8d 7f       	andi	r24, 0xFD	; 253
     486:	8c 93       	st	X, r24
	clear(TCCR1B, CS10);
     488:	8c 91       	ld	r24, X
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	8c 93       	st	X, r24
     48e:	08 95       	ret

00000490 <init_ADC>:
}

void init_ADC(){
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     494:	ac e7       	ldi	r26, 0x7C	; 124
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	8c 91       	ld	r24, X
     49a:	8f 77       	andi	r24, 0x7F	; 127
     49c:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     49e:	8c 91       	ld	r24, X
     4a0:	80 64       	ori	r24, 0x40	; 64
     4a2:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     4a4:	ea e7       	ldi	r30, 0x7A	; 122
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	84 60       	ori	r24, 0x04	; 4
     4ac:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     4ae:	80 81       	ld	r24, Z
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     4b4:	80 81       	ld	r24, Z
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     4ba:	ce e7       	ldi	r28, 0x7E	; 126
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
     4be:	88 81       	ld	r24, Y
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     4c4:	88 81       	ld	r24, Y
     4c6:	82 60       	ori	r24, 0x02	; 2
     4c8:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     4ca:	cd e7       	ldi	r28, 0x7D	; 125
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
     4ce:	88 81       	ld	r24, Y
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     4d4:	88 81       	ld	r24, Y
     4d6:	84 60       	ori	r24, 0x04	; 4
     4d8:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     4da:	88 81       	ld	r24, Y
     4dc:	88 60       	ori	r24, 0x08	; 8
     4de:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     4e0:	88 81       	ld	r24, Y
     4e2:	80 61       	ori	r24, 0x10	; 16
     4e4:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     4e6:	cb e7       	ldi	r28, 0x7B	; 123
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
     4ea:	88 81       	ld	r24, Y
     4ec:	8f 7d       	andi	r24, 0xDF	; 223
     4ee:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     4f0:	8c 91       	ld	r24, X
     4f2:	8b 7f       	andi	r24, 0xFB	; 251
     4f4:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     4f6:	8c 91       	ld	r24, X
     4f8:	8d 7f       	andi	r24, 0xFD	; 253
     4fa:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     4fc:	8c 91       	ld	r24, X
     4fe:	8e 7f       	andi	r24, 0xFE	; 254
     500:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     502:	80 81       	ld	r24, Z
     504:	80 62       	ori	r24, 0x20	; 32
     506:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     508:	80 81       	ld	r24, Z
     50a:	88 60       	ori	r24, 0x08	; 8
     50c:	80 83       	st	Z, r24
	sei();
     50e:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     510:	80 81       	ld	r24, Z
     512:	80 68       	ori	r24, 0x80	; 128
     514:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     516:	80 81       	ld	r24, Z
     518:	80 64       	ori	r24, 0x40	; 64
     51a:	80 83       	st	Z, r24
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <__vector_29>:
		}
		OCR1C=full_speed;
	}
}

ISR(ADC_vect){	
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	ef 93       	push	r30
     536:	ff 93       	push	r31
	Pho[i]=ADC;
     538:	80 91 76 01 	lds	r24, 0x0176
     53c:	90 91 77 01 	lds	r25, 0x0177
     540:	20 91 78 00 	lds	r18, 0x0078
     544:	30 91 79 00 	lds	r19, 0x0079
     548:	fc 01       	movw	r30, r24
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	e8 58       	subi	r30, 0x88	; 136
     550:	fe 4f       	sbci	r31, 0xFE	; 254
     552:	31 83       	std	Z+1, r19	; 0x01
     554:	20 83       	st	Z, r18
	
	i=i+1;
     556:	01 96       	adiw	r24, 0x01	; 1
	if(i>6){
     558:	87 30       	cpi	r24, 0x07	; 7
     55a:	91 05       	cpc	r25, r1
     55c:	2c f4       	brge	.+10     	; 0x568 <__vector_29+0x46>
}

ISR(ADC_vect){	
	Pho[i]=ADC;
	
	i=i+1;
     55e:	90 93 77 01 	sts	0x0177, r25
     562:	80 93 76 01 	sts	0x0176, r24
     566:	04 c0       	rjmp	.+8      	; 0x570 <__vector_29+0x4e>
	if(i>6){
		i=0;
     568:	10 92 77 01 	sts	0x0177, r1
     56c:	10 92 76 01 	sts	0x0176, r1
	}
	
	clear(ADCSRA, ADEN);
     570:	ea e7       	ldi	r30, 0x7A	; 122
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	8f 77       	andi	r24, 0x7F	; 127
     578:	80 83       	st	Z, r24
	switch(i){
     57a:	80 91 76 01 	lds	r24, 0x0176
     57e:	90 91 77 01 	lds	r25, 0x0177
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	91 05       	cpc	r25, r1
     586:	89 f1       	breq	.+98     	; 0x5ea <__vector_29+0xc8>
     588:	2c f4       	brge	.+10     	; 0x594 <__vector_29+0x72>
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	61 f0       	breq	.+24     	; 0x5a6 <__vector_29+0x84>
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	d9 f0       	breq	.+54     	; 0x5c8 <__vector_29+0xa6>
     592:	6e c0       	rjmp	.+220    	; 0x670 <__vector_29+0x14e>
     594:	84 30       	cpi	r24, 0x04	; 4
     596:	91 05       	cpc	r25, r1
     598:	09 f4       	brne	.+2      	; 0x59c <__vector_29+0x7a>
     59a:	49 c0       	rjmp	.+146    	; 0x62e <__vector_29+0x10c>
     59c:	bc f1       	brlt	.+110    	; 0x60c <__vector_29+0xea>
     59e:	05 97       	sbiw	r24, 0x05	; 5
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <__vector_29+0x82>
     5a2:	56 c0       	rjmp	.+172    	; 0x650 <__vector_29+0x12e>
     5a4:	65 c0       	rjmp	.+202    	; 0x670 <__vector_29+0x14e>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
     5a6:	eb e7       	ldi	r30, 0x7B	; 123
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	8f 7d       	andi	r24, 0xDF	; 223
     5ae:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     5b0:	ec e7       	ldi	r30, 0x7C	; 124
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
     5b8:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     5ba:	80 81       	ld	r24, Z
     5bc:	8d 7f       	andi	r24, 0xFD	; 253
     5be:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     5c0:	80 81       	ld	r24, Z
     5c2:	8e 7f       	andi	r24, 0xFE	; 254
     5c4:	80 83       	st	Z, r24
			break;
     5c6:	54 c0       	rjmp	.+168    	; 0x670 <__vector_29+0x14e>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
     5c8:	eb e7       	ldi	r30, 0x7B	; 123
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8f 7d       	andi	r24, 0xDF	; 223
     5d0:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     5d2:	ec e7       	ldi	r30, 0x7C	; 124
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	8b 7f       	andi	r24, 0xFB	; 251
     5da:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     5dc:	80 81       	ld	r24, Z
     5de:	8d 7f       	andi	r24, 0xFD	; 253
     5e0:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     5e2:	80 81       	ld	r24, Z
     5e4:	81 60       	ori	r24, 0x01	; 1
     5e6:	80 83       	st	Z, r24
			break;
     5e8:	43 c0       	rjmp	.+134    	; 0x670 <__vector_29+0x14e>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
     5ea:	eb e7       	ldi	r30, 0x7B	; 123
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	80 62       	ori	r24, 0x20	; 32
     5f2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     5f4:	ec e7       	ldi	r30, 0x7C	; 124
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	8b 7f       	andi	r24, 0xFB	; 251
     5fc:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     5fe:	80 81       	ld	r24, Z
     600:	8d 7f       	andi	r24, 0xFD	; 253
     602:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     604:	80 81       	ld	r24, Z
     606:	81 60       	ori	r24, 0x01	; 1
     608:	80 83       	st	Z, r24
			break;
     60a:	32 c0       	rjmp	.+100    	; 0x670 <__vector_29+0x14e>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
     60c:	eb e7       	ldi	r30, 0x7B	; 123
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	80 62       	ori	r24, 0x20	; 32
     614:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     616:	ec e7       	ldi	r30, 0x7C	; 124
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	8b 7f       	andi	r24, 0xFB	; 251
     61e:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     620:	80 81       	ld	r24, Z
     622:	82 60       	ori	r24, 0x02	; 2
     624:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     626:	80 81       	ld	r24, Z
     628:	8e 7f       	andi	r24, 0xFE	; 254
     62a:	80 83       	st	Z, r24
			break;
     62c:	21 c0       	rjmp	.+66     	; 0x670 <__vector_29+0x14e>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
     62e:	eb e7       	ldi	r30, 0x7B	; 123
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	80 62       	ori	r24, 0x20	; 32
     636:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
     638:	ec e7       	ldi	r30, 0x7C	; 124
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	8b 7f       	andi	r24, 0xFB	; 251
     640:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
     642:	80 81       	ld	r24, Z
     644:	82 60       	ori	r24, 0x02	; 2
     646:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
     648:	80 81       	ld	r24, Z
     64a:	81 60       	ori	r24, 0x01	; 1
     64c:	80 83       	st	Z, r24
			break;
     64e:	10 c0       	rjmp	.+32     	; 0x670 <__vector_29+0x14e>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
     650:	eb e7       	ldi	r30, 0x7B	; 123
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	80 62       	ori	r24, 0x20	; 32
     658:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
     65a:	ec e7       	ldi	r30, 0x7C	; 124
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	84 60       	ori	r24, 0x04	; 4
     662:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
     664:	80 81       	ld	r24, Z
     666:	8d 7f       	andi	r24, 0xFD	; 253
     668:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
     66a:	80 81       	ld	r24, Z
     66c:	8e 7f       	andi	r24, 0xFE	; 254
     66e:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
     670:	ea e7       	ldi	r30, 0x7A	; 122
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	80 68       	ori	r24, 0x80	; 128
     678:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     67a:	80 81       	ld	r24, Z
     67c:	80 64       	ori	r24, 0x40	; 64
     67e:	80 83       	st	Z, r24
	
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	9f 91       	pop	r25
     686:	8f 91       	pop	r24
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <find_sign>:
		ypdir[0] = ypdir_last[0];
		ypdir[1] = ypdir_last[1];
	}
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	60 97       	sbiw	r28, 0x10	; 16
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	2b 01       	movw	r4, r22
     6c8:	3c 01       	movw	r6, r24
     6ca:	2d 83       	std	Y+5, r18	; 0x05
     6cc:	3e 83       	std	Y+6, r19	; 0x06
     6ce:	4f 83       	std	Y+7, r20	; 0x07
     6d0:	58 87       	std	Y+8, r21	; 0x08
     6d2:	58 01       	movw	r10, r16
     6d4:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     6d6:	d5 01       	movw	r26, r10
     6d8:	cd 90       	ld	r12, X+
     6da:	dd 90       	ld	r13, X+
     6dc:	ed 90       	ld	r14, X+
     6de:	fc 90       	ld	r15, X
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c7 01       	movw	r24, r14
     6e6:	b6 01       	movw	r22, r12
     6e8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     6ec:	f8 01       	movw	r30, r16
     6ee:	20 81       	ld	r18, Z
     6f0:	31 81       	ldd	r19, Z+1	; 0x01
     6f2:	42 81       	ldd	r20, Z+2	; 0x02
     6f4:	53 81       	ldd	r21, Z+3	; 0x03
     6f6:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     6fa:	69 87       	std	Y+9, r22	; 0x09
     6fc:	7a 87       	std	Y+10, r23	; 0x0a
     6fe:	8b 87       	std	Y+11, r24	; 0x0b
     700:	9c 87       	std	Y+12, r25	; 0x0c
     702:	d5 01       	movw	r26, r10
     704:	14 96       	adiw	r26, 0x04	; 4
     706:	8d 91       	ld	r24, X+
     708:	9d 91       	ld	r25, X+
     70a:	0d 90       	ld	r0, X+
     70c:	bc 91       	ld	r27, X
     70e:	a0 2d       	mov	r26, r0
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	9a 83       	std	Y+2, r25	; 0x02
     714:	ab 83       	std	Y+3, r26	; 0x03
     716:	bc 83       	std	Y+4, r27	; 0x04
     718:	2d 81       	ldd	r18, Y+5	; 0x05
     71a:	3e 81       	ldd	r19, Y+6	; 0x06
     71c:	4f 81       	ldd	r20, Y+7	; 0x07
     71e:	58 85       	ldd	r21, Y+8	; 0x08
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     728:	6d 87       	std	Y+13, r22	; 0x0d
     72a:	7e 87       	std	Y+14, r23	; 0x0e
     72c:	8f 87       	std	Y+15, r24	; 0x0f
     72e:	98 8b       	std	Y+16, r25	; 0x10
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	69 85       	ldd	r22, Y+9	; 0x09
     736:	7a 85       	ldd	r23, Y+10	; 0x0a
     738:	8b 85       	ldd	r24, Y+11	; 0x0b
     73a:	9c 85       	ldd	r25, Y+12	; 0x0c
     73c:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     740:	4b 01       	movw	r8, r22
     742:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     744:	29 81       	ldd	r18, Y+1	; 0x01
     746:	3a 81       	ldd	r19, Y+2	; 0x02
     748:	4b 81       	ldd	r20, Y+3	; 0x03
     74a:	5c 81       	ldd	r21, Y+4	; 0x04
     74c:	c3 01       	movw	r24, r6
     74e:	b2 01       	movw	r22, r4
     750:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     754:	f8 01       	movw	r30, r16
     756:	24 81       	ldd	r18, Z+4	; 0x04
     758:	35 81       	ldd	r19, Z+5	; 0x05
     75a:	46 81       	ldd	r20, Z+6	; 0x06
     75c:	57 81       	ldd	r21, Z+7	; 0x07
     75e:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     762:	2b 01       	movw	r4, r22
     764:	3c 01       	movw	r6, r24
     766:	2d 81       	ldd	r18, Y+5	; 0x05
     768:	3e 81       	ldd	r19, Y+6	; 0x06
     76a:	4f 81       	ldd	r20, Y+7	; 0x07
     76c:	58 85       	ldd	r21, Y+8	; 0x08
     76e:	c7 01       	movw	r24, r14
     770:	b6 01       	movw	r22, r12
     772:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     776:	69 83       	std	Y+1, r22	; 0x01
     778:	7a 83       	std	Y+2, r23	; 0x02
     77a:	8b 83       	std	Y+3, r24	; 0x03
     77c:	9c 83       	std	Y+4, r25	; 0x04
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	c3 01       	movw	r24, r6
     784:	b2 01       	movw	r22, r4
     786:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
     78a:	6b 01       	movw	r12, r22
     78c:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     78e:	2d 85       	ldd	r18, Y+13	; 0x0d
     790:	3e 85       	ldd	r19, Y+14	; 0x0e
     792:	4f 85       	ldd	r20, Y+15	; 0x0f
     794:	58 89       	ldd	r21, Y+16	; 0x10
     796:	69 85       	ldd	r22, Y+9	; 0x09
     798:	7a 85       	ldd	r23, Y+10	; 0x0a
     79a:	8b 85       	ldd	r24, Y+11	; 0x0b
     79c:	9c 85       	ldd	r25, Y+12	; 0x0c
     79e:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
     7a2:	6d 83       	std	Y+5, r22	; 0x05
     7a4:	7e 83       	std	Y+6, r23	; 0x06
     7a6:	8f 83       	std	Y+7, r24	; 0x07
     7a8:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     7aa:	29 81       	ldd	r18, Y+1	; 0x01
     7ac:	3a 81       	ldd	r19, Y+2	; 0x02
     7ae:	4b 81       	ldd	r20, Y+3	; 0x03
     7b0:	5c 81       	ldd	r21, Y+4	; 0x04
     7b2:	c3 01       	movw	r24, r6
     7b4:	b2 01       	movw	r22, r4
     7b6:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     7ba:	2b 01       	movw	r4, r22
     7bc:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     7be:	a5 01       	movw	r20, r10
     7c0:	94 01       	movw	r18, r8
     7c2:	c5 01       	movw	r24, r10
     7c4:	b4 01       	movw	r22, r8
     7c6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     7ca:	4b 01       	movw	r8, r22
     7cc:	5c 01       	movw	r10, r24
     7ce:	a7 01       	movw	r20, r14
     7d0:	96 01       	movw	r18, r12
     7d2:	c7 01       	movw	r24, r14
     7d4:	b6 01       	movw	r22, r12
     7d6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     7da:	9b 01       	movw	r18, r22
     7dc:	ac 01       	movw	r20, r24
     7de:	c5 01       	movw	r24, r10
     7e0:	b4 01       	movw	r22, r8
     7e2:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
     7e6:	6b 01       	movw	r12, r22
     7e8:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     7ea:	2d 81       	ldd	r18, Y+5	; 0x05
     7ec:	3e 81       	ldd	r19, Y+6	; 0x06
     7ee:	4f 81       	ldd	r20, Y+7	; 0x07
     7f0:	58 85       	ldd	r21, Y+8	; 0x08
     7f2:	ca 01       	movw	r24, r20
     7f4:	b9 01       	movw	r22, r18
     7f6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     7fa:	4b 01       	movw	r8, r22
     7fc:	5c 01       	movw	r10, r24
     7fe:	a3 01       	movw	r20, r6
     800:	92 01       	movw	r18, r4
     802:	c3 01       	movw	r24, r6
     804:	b2 01       	movw	r22, r4
     806:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     80a:	9b 01       	movw	r18, r22
     80c:	ac 01       	movw	r20, r24
     80e:	c5 01       	movw	r24, r10
     810:	b4 01       	movw	r22, r8
     812:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
     816:	9b 01       	movw	r18, r22
     818:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     81a:	01 e0       	ldi	r16, 0x01	; 1
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
     826:	88 23       	and	r24, r24
     828:	14 f0       	brlt	.+4      	; 0x82e <find_sign+0x198>
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     82e:	c8 01       	movw	r24, r16
     830:	60 96       	adiw	r28, 0x10	; 16
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	7f 90       	pop	r7
     856:	6f 90       	pop	r6
     858:	5f 90       	pop	r5
     85a:	4f 90       	pop	r4
     85c:	08 95       	ret

0000085e <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta){
     85e:	2f 92       	push	r2
     860:	3f 92       	push	r3
     862:	4f 92       	push	r4
     864:	5f 92       	push	r5
     866:	6f 92       	push	r6
     868:	7f 92       	push	r7
     86a:	8f 92       	push	r8
     86c:	9f 92       	push	r9
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	28 97       	sbiw	r28, 0x08	; 8
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	1c 01       	movw	r2, r24
     894:	49 83       	std	Y+1, r20	; 0x01
     896:	5a 83       	std	Y+2, r21	; 0x02
     898:	6b 83       	std	Y+3, r22	; 0x03
     89a:	7c 83       	std	Y+4, r23	; 0x04
     89c:	0d 83       	std	Y+5, r16	; 0x05
     89e:	1e 83       	std	Y+6, r17	; 0x06
     8a0:	2f 83       	std	Y+7, r18	; 0x07
     8a2:	38 87       	std	Y+8, r19	; 0x08
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     8a4:	20 91 56 01 	lds	r18, 0x0156
     8a8:	30 91 57 01 	lds	r19, 0x0157
     8ac:	40 91 58 01 	lds	r20, 0x0158
     8b0:	50 91 59 01 	lds	r21, 0x0159
     8b4:	60 91 14 01 	lds	r22, 0x0114
     8b8:	70 91 15 01 	lds	r23, 0x0115
     8bc:	80 91 16 01 	lds	r24, 0x0116
     8c0:	90 91 17 01 	lds	r25, 0x0117
     8c4:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     8c8:	4b 01       	movw	r8, r22
     8ca:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
     8cc:	20 91 5a 01 	lds	r18, 0x015A
     8d0:	30 91 5b 01 	lds	r19, 0x015B
     8d4:	40 91 5c 01 	lds	r20, 0x015C
     8d8:	50 91 5d 01 	lds	r21, 0x015D
     8dc:	60 91 18 01 	lds	r22, 0x0118
     8e0:	70 91 19 01 	lds	r23, 0x0119
     8e4:	80 91 1a 01 	lds	r24, 0x011A
     8e8:	90 91 1b 01 	lds	r25, 0x011B
     8ec:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     8f0:	6b 01       	movw	r12, r22
     8f2:	7c 01       	movw	r14, r24
	
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
     8f4:	a5 01       	movw	r20, r10
     8f6:	94 01       	movw	r18, r8
     8f8:	c5 01       	movw	r24, r10
     8fa:	b4 01       	movw	r22, r8
     8fc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     900:	2b 01       	movw	r4, r22
     902:	3c 01       	movw	r6, r24
     904:	a7 01       	movw	r20, r14
     906:	96 01       	movw	r18, r12
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	c3 01       	movw	r24, r6
     916:	b2 01       	movw	r22, r4
     918:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
     91c:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <sqrt>
     920:	2b 01       	movw	r4, r22
     922:	3c 01       	movw	r6, r24
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	c5 01       	movw	r24, r10
     92a:	b4 01       	movw	r22, r8
     92c:	0e 94 06 14 	call	0x280c	; 0x280c <__divsf3>
     930:	4b 01       	movw	r8, r22
     932:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
     934:	a3 01       	movw	r20, r6
     936:	92 01       	movw	r18, r4
     938:	c7 01       	movw	r24, r14
     93a:	b6 01       	movw	r22, r12
     93c:	0e 94 06 14 	call	0x280c	; 0x280c <__divsf3>
     940:	6b 01       	movw	r12, r22
     942:	7c 01       	movw	r14, r24
	
	float cos_alpha = c2g[0] * ypdir[0] + c2g[1] * ypdir[1];
     944:	20 91 4e 01 	lds	r18, 0x014E
     948:	30 91 4f 01 	lds	r19, 0x014F
     94c:	40 91 50 01 	lds	r20, 0x0150
     950:	50 91 51 01 	lds	r21, 0x0151
     954:	c5 01       	movw	r24, r10
     956:	b4 01       	movw	r22, r8
     958:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     95c:	2b 01       	movw	r4, r22
     95e:	3c 01       	movw	r6, r24
     960:	20 91 52 01 	lds	r18, 0x0152
     964:	30 91 53 01 	lds	r19, 0x0153
     968:	40 91 54 01 	lds	r20, 0x0154
     96c:	50 91 55 01 	lds	r21, 0x0155
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
     974:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	c3 01       	movw	r24, r6
     97e:	b2 01       	movw	r22, r4
     980:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
	alpha = acos(cos_alpha);
     984:	0e 94 8f 13 	call	0x271e	; 0x271e <acos>
     988:	2b 01       	movw	r4, r22
     98a:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
     98c:	2a 94       	dec	r2
     98e:	23 28       	or	r2, r3
     990:	c9 f4       	brne	.+50     	; 0x9c4 <cal_angle+0x166>
		c2g_wx = costheta*c2g[0] + sintheta*c2g[1];
     992:	2d 81       	ldd	r18, Y+5	; 0x05
     994:	3e 81       	ldd	r19, Y+6	; 0x06
     996:	4f 81       	ldd	r20, Y+7	; 0x07
     998:	58 85       	ldd	r21, Y+8	; 0x08
     99a:	c5 01       	movw	r24, r10
     99c:	b4 01       	movw	r22, r8
     99e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     9a2:	4b 01       	movw	r8, r22
     9a4:	5c 01       	movw	r10, r24
     9a6:	29 81       	ldd	r18, Y+1	; 0x01
     9a8:	3a 81       	ldd	r19, Y+2	; 0x02
     9aa:	4b 81       	ldd	r20, Y+3	; 0x03
     9ac:	5c 81       	ldd	r21, Y+4	; 0x04
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     9b6:	9b 01       	movw	r18, r22
     9b8:	ac 01       	movw	r20, r24
     9ba:	c5 01       	movw	r24, r10
     9bc:	b4 01       	movw	r22, r8
     9be:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
     9c2:	18 c0       	rjmp	.+48     	; 0x9f4 <cal_angle+0x196>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];		
     9c4:	2d 81       	ldd	r18, Y+5	; 0x05
     9c6:	3e 81       	ldd	r19, Y+6	; 0x06
     9c8:	4f 81       	ldd	r20, Y+7	; 0x07
     9ca:	58 85       	ldd	r21, Y+8	; 0x08
     9cc:	c5 01       	movw	r24, r10
     9ce:	b4 01       	movw	r22, r8
     9d0:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     9d4:	4b 01       	movw	r8, r22
     9d6:	5c 01       	movw	r10, r24
     9d8:	29 81       	ldd	r18, Y+1	; 0x01
     9da:	3a 81       	ldd	r19, Y+2	; 0x02
     9dc:	4b 81       	ldd	r20, Y+3	; 0x03
     9de:	5c 81       	ldd	r21, Y+4	; 0x04
     9e0:	c7 01       	movw	r24, r14
     9e2:	b6 01       	movw	r22, r12
     9e4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     9e8:	9b 01       	movw	r18, r22
     9ea:	ac 01       	movw	r20, r24
     9ec:	c5 01       	movw	r24, r10
     9ee:	b4 01       	movw	r22, r8
     9f0:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
	}
	if (c2g_wx < 0){
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	a9 01       	movw	r20, r18
     9fa:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
     9fe:	88 23       	and	r24, r24
     a00:	4c f0       	brlt	.+18     	; 0xa14 <cal_angle+0x1b6>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);
	
	float cos_alpha = c2g[0] * ypdir[0] + c2g[1] * ypdir[1];
	alpha = acos(cos_alpha);
     a02:	40 92 3a 01 	sts	0x013A, r4
     a06:	50 92 3b 01 	sts	0x013B, r5
     a0a:	60 92 3c 01 	sts	0x013C, r6
     a0e:	70 92 3d 01 	sts	0x013D, r7
     a12:	0c c0       	rjmp	.+24     	; 0xa2c <cal_angle+0x1ce>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];		
	}
	if (c2g_wx < 0){
		alpha = - alpha;
     a14:	77 fa       	bst	r7, 7
     a16:	70 94       	com	r7
     a18:	77 f8       	bld	r7, 7
     a1a:	70 94       	com	r7
     a1c:	40 92 3a 01 	sts	0x013A, r4
     a20:	50 92 3b 01 	sts	0x013B, r5
     a24:	60 92 3c 01 	sts	0x013C, r6
     a28:	70 92 3d 01 	sts	0x013D, r7
	}
	m_usb_tx_string("alpha: ");
     a2c:	84 e2       	ldi	r24, 0x24	; 36
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
	m_usb_tx_int(alpha*10);
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e2       	ldi	r20, 0x20	; 32
     a3a:	51 e4       	ldi	r21, 0x41	; 65
     a3c:	60 91 3a 01 	lds	r22, 0x013A
     a40:	70 91 3b 01 	lds	r23, 0x013B
     a44:	80 91 3c 01 	lds	r24, 0x013C
     a48:	90 91 3d 01 	lds	r25, 0x013D
     a4c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     a50:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
     a54:	cb 01       	movw	r24, r22
     a56:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
	m_usb_tx_string("\n");
     a5a:	82 e2       	ldi	r24, 0x22	; 34
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
	
}
     a62:	28 96       	adiw	r28, 0x08	; 8
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	9f 90       	pop	r9
     a84:	8f 90       	pop	r8
     a86:	7f 90       	pop	r7
     a88:	6f 90       	pop	r6
     a8a:	5f 90       	pop	r5
     a8c:	4f 90       	pop	r4
     a8e:	3f 90       	pop	r3
     a90:	2f 90       	pop	r2
     a92:	08 95       	ret

00000a94 <PID_alpha>:
void PID_alpha(float Kp, float Ki, float Kd){
     a94:	4f 92       	push	r4
     a96:	5f 92       	push	r5
     a98:	6f 92       	push	r6
     a9a:	7f 92       	push	r7
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <PID_alpha+0x22>
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <PID_alpha+0x24>
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
     ac0:	e9 82       	std	Y+1, r14	; 0x01
     ac2:	fa 82       	std	Y+2, r15	; 0x02
     ac4:	0b 83       	std	Y+3, r16	; 0x03
     ac6:	1c 83       	std	Y+4, r17	; 0x04
	m_usb_tx_int(Ki);
	m_usb_tx_string(", "); 
	m_usb_tx_int(Kd); 
	m_usb_tx_string("\n");
	*/
	diff_loc = alpha - alpha_last;
     ac8:	40 90 3a 01 	lds	r4, 0x013A
     acc:	50 90 3b 01 	lds	r5, 0x013B
     ad0:	60 90 3c 01 	lds	r6, 0x013C
     ad4:	70 90 3d 01 	lds	r7, 0x013D
     ad8:	20 91 36 01 	lds	r18, 0x0136
     adc:	30 91 37 01 	lds	r19, 0x0137
     ae0:	40 91 38 01 	lds	r20, 0x0138
     ae4:	50 91 39 01 	lds	r21, 0x0139
     ae8:	c3 01       	movw	r24, r6
     aea:	b2 01       	movw	r22, r4
     aec:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
     af4:	60 93 32 01 	sts	0x0132, r22
     af8:	70 93 33 01 	sts	0x0133, r23
     afc:	80 93 34 01 	sts	0x0134, r24
     b00:	90 93 35 01 	sts	0x0135, r25
	m_usb_tx_string("sumpid: ");
	m_usb_tx_int(sumpid*10);
	m_usb_tx_string("\n");
	*/
	float P =0, I = 0, D = 0;
	P = Kp * alpha;
     b04:	a5 01       	movw	r20, r10
     b06:	94 01       	movw	r18, r8
     b08:	c3 01       	movw	r24, r6
     b0a:	b2 01       	movw	r22, r4
     b0c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     b10:	4b 01       	movw	r8, r22
     b12:	5c 01       	movw	r10, r24
	I = Ki * sum_loc;
	D = Kd * diff_loc;   
     b14:	29 81       	ldd	r18, Y+1	; 0x01
     b16:	3a 81       	ldd	r19, Y+2	; 0x02
     b18:	4b 81       	ldd	r20, Y+3	; 0x03
     b1a:	5c 81       	ldd	r21, Y+4	; 0x04
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
	m_usb_tx_int(I);
	m_usb_tx_string(", ");
	m_usb_tx_int(D*10);
	m_usb_tx_string("\n");
	*/
	gain_loc = P+D;
     b28:	c5 01       	movw	r24, r10
     b2a:	b4 01       	movw	r22, r8
     b2c:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
     b30:	60 93 2e 01 	sts	0x012E, r22
     b34:	70 93 2f 01 	sts	0x012F, r23
     b38:	80 93 30 01 	sts	0x0130, r24
     b3c:	90 93 31 01 	sts	0x0131, r25
	
	alpha_last = alpha;
     b40:	40 92 36 01 	sts	0x0136, r4
     b44:	50 92 37 01 	sts	0x0137, r5
     b48:	60 92 38 01 	sts	0x0138, r6
     b4c:	70 92 39 01 	sts	0x0139, r7
	
	m_usb_tx_string("alpha*10: ");
     b50:	87 e1       	ldi	r24, 0x17	; 23
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e2       	ldi	r20, 0x20	; 32
     b5e:	51 e4       	ldi	r21, 0x41	; 65
     b60:	60 91 3a 01 	lds	r22, 0x013A
     b64:	70 91 3b 01 	lds	r23, 0x013B
     b68:	80 91 3c 01 	lds	r24, 0x013C
     b6c:	90 91 3d 01 	lds	r25, 0x013D
     b70:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     b74:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
     b78:	cb 01       	movw	r24, r22
     b7a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
	m_usb_tx_string("\n");
     b7e:	85 e1       	ldi	r24, 0x15	; 21
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
	
	m_usb_tx_string("gain*10: ");
     b86:	8b e0       	ldi	r24, 0x0B	; 11
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e2       	ldi	r20, 0x20	; 32
     b94:	51 e4       	ldi	r21, 0x41	; 65
     b96:	60 91 2e 01 	lds	r22, 0x012E
     b9a:	70 91 2f 01 	lds	r23, 0x012F
     b9e:	80 91 30 01 	lds	r24, 0x0130
     ba2:	90 91 31 01 	lds	r25, 0x0131
     ba6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     baa:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
     bae:	cb 01       	movw	r24, r22
     bb0:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
	m_usb_tx_string("\n");
     bb4:	89 e0       	ldi	r24, 0x09	; 9
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
	
	if(gain_loc<0){  // turn right
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	a9 01       	movw	r20, r18
     bc2:	60 91 2e 01 	lds	r22, 0x012E
     bc6:	70 91 2f 01 	lds	r23, 0x012F
     bca:	80 91 30 01 	lds	r24, 0x0130
     bce:	90 91 31 01 	lds	r25, 0x0131
     bd2:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	f4 f5       	brge	.+124    	; 0xc56 <__stack+0x157>
		m_usb_tx_string("turn right\n");
     bda:	8d ef       	ldi	r24, 0xFD	; 253
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		OCR1B = full_speed-abs(gain_loc);
     be2:	60 91 2e 01 	lds	r22, 0x012E
     be6:	70 91 2f 01 	lds	r23, 0x012F
     bea:	80 91 30 01 	lds	r24, 0x0130
     bee:	90 91 31 01 	lds	r25, 0x0131
     bf2:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
     bf6:	9b 01       	movw	r18, r22
     bf8:	77 23       	and	r23, r23
     bfa:	24 f4       	brge	.+8      	; 0xc04 <__stack+0x105>
     bfc:	22 27       	eor	r18, r18
     bfe:	33 27       	eor	r19, r19
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	86 e9       	ldi	r24, 0x96	; 150
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	82 1b       	sub	r24, r18
     c0a:	93 0b       	sbc	r25, r19
     c0c:	90 93 8b 00 	sts	0x008B, r25
     c10:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > 100){
     c14:	60 91 2e 01 	lds	r22, 0x012E
     c18:	70 91 2f 01 	lds	r23, 0x012F
     c1c:	80 91 30 01 	lds	r24, 0x0130
     c20:	90 91 31 01 	lds	r25, 0x0131
     c24:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
     c28:	9b 01       	movw	r18, r22
     c2a:	77 23       	and	r23, r23
     c2c:	24 f4       	brge	.+8      	; 0xc36 <__stack+0x137>
     c2e:	22 27       	eor	r18, r18
     c30:	33 27       	eor	r19, r19
     c32:	26 1b       	sub	r18, r22
     c34:	37 0b       	sbc	r19, r23
     c36:	25 36       	cpi	r18, 0x65	; 101
     c38:	31 05       	cpc	r19, r1
     c3a:	34 f0       	brlt	.+12     	; 0xc48 <__stack+0x149>
			OCR1B = 50;
     c3c:	82 e3       	ldi	r24, 0x32	; 50
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 8b 00 	sts	0x008B, r25
     c44:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     c48:	86 e9       	ldi	r24, 0x96	; 150
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	90 93 8d 00 	sts	0x008D, r25
     c50:	80 93 8c 00 	sts	0x008C, r24
     c54:	3d c0       	rjmp	.+122    	; 0xcd0 <__stack+0x1d1>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
     c56:	82 ef       	ldi	r24, 0xF2	; 242
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		OCR1C = full_speed-abs(gain_loc);
     c5e:	60 91 2e 01 	lds	r22, 0x012E
     c62:	70 91 2f 01 	lds	r23, 0x012F
     c66:	80 91 30 01 	lds	r24, 0x0130
     c6a:	90 91 31 01 	lds	r25, 0x0131
     c6e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
     c72:	9b 01       	movw	r18, r22
     c74:	77 23       	and	r23, r23
     c76:	24 f4       	brge	.+8      	; 0xc80 <__stack+0x181>
     c78:	22 27       	eor	r18, r18
     c7a:	33 27       	eor	r19, r19
     c7c:	26 1b       	sub	r18, r22
     c7e:	37 0b       	sbc	r19, r23
     c80:	86 e9       	ldi	r24, 0x96	; 150
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	82 1b       	sub	r24, r18
     c86:	93 0b       	sbc	r25, r19
     c88:	90 93 8d 00 	sts	0x008D, r25
     c8c:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > 100){
     c90:	60 91 2e 01 	lds	r22, 0x012E
     c94:	70 91 2f 01 	lds	r23, 0x012F
     c98:	80 91 30 01 	lds	r24, 0x0130
     c9c:	90 91 31 01 	lds	r25, 0x0131
     ca0:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
     ca4:	9b 01       	movw	r18, r22
     ca6:	77 23       	and	r23, r23
     ca8:	24 f4       	brge	.+8      	; 0xcb2 <__stack+0x1b3>
     caa:	22 27       	eor	r18, r18
     cac:	33 27       	eor	r19, r19
     cae:	26 1b       	sub	r18, r22
     cb0:	37 0b       	sbc	r19, r23
     cb2:	25 36       	cpi	r18, 0x65	; 101
     cb4:	31 05       	cpc	r19, r1
     cb6:	34 f0       	brlt	.+12     	; 0xcc4 <__stack+0x1c5>
			OCR1C = 50;
     cb8:	82 e3       	ldi	r24, 0x32	; 50
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	90 93 8d 00 	sts	0x008D, r25
     cc0:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     cc4:	86 e9       	ldi	r24, 0x96	; 150
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 8b 00 	sts	0x008B, r25
     ccc:	80 93 8a 00 	sts	0x008A, r24
	}
		m_usb_tx_string("1B, 1C: ");
     cd0:	89 ee       	ldi	r24, 0xE9	; 233
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		m_usb_tx_int(OCR1B);
     cd8:	80 91 8a 00 	lds	r24, 0x008A
     cdc:	90 91 8b 00 	lds	r25, 0x008B
     ce0:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
		m_usb_tx_string(", ");
     ce4:	86 ee       	ldi	r24, 0xE6	; 230
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		m_usb_tx_int(OCR1C);
     cec:	80 91 8c 00 	lds	r24, 0x008C
     cf0:	90 91 8d 00 	lds	r25, 0x008D
     cf4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
		m_usb_tx_string("\n");
     cf8:	84 ee       	ldi	r24, 0xE4	; 228
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
	
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	9f 90       	pop	r9
     d1e:	8f 90       	pop	r8
     d20:	7f 90       	pop	r7
     d22:	6f 90       	pop	r6
     d24:	5f 90       	pop	r5
     d26:	4f 90       	pop	r4
     d28:	08 95       	ret

00000d2a <find_if_reach>:



int find_if_reach(float x, float y){
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	69 01       	movw	r12, r18
     d40:	7a 01       	movw	r14, r20
	float dist = (x - goal[0]) * (x - goal[0]) + (y - goal[1]) * (y - goal[1]);
     d42:	20 91 14 01 	lds	r18, 0x0114
     d46:	30 91 15 01 	lds	r19, 0x0115
     d4a:	40 91 16 01 	lds	r20, 0x0116
     d4e:	50 91 17 01 	lds	r21, 0x0117
     d52:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     d56:	4b 01       	movw	r8, r22
     d58:	5c 01       	movw	r10, r24
     d5a:	20 91 18 01 	lds	r18, 0x0118
     d5e:	30 91 19 01 	lds	r19, 0x0119
     d62:	40 91 1a 01 	lds	r20, 0x011A
     d66:	50 91 1b 01 	lds	r21, 0x011B
     d6a:	c7 01       	movw	r24, r14
     d6c:	b6 01       	movw	r22, r12
     d6e:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
     d72:	6b 01       	movw	r12, r22
     d74:	7c 01       	movw	r14, r24
     d76:	a5 01       	movw	r20, r10
     d78:	94 01       	movw	r18, r8
     d7a:	c5 01       	movw	r24, r10
     d7c:	b4 01       	movw	r22, r8
     d7e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     d82:	4b 01       	movw	r8, r22
     d84:	5c 01       	movw	r10, r24
     d86:	a7 01       	movw	r20, r14
     d88:	96 01       	movw	r18, r12
     d8a:	c7 01       	movw	r24, r14
     d8c:	b6 01       	movw	r22, r12
     d8e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
     d92:	9b 01       	movw	r18, r22
     d94:	ac 01       	movw	r20, r24
     d96:	c5 01       	movw	r24, r10
     d98:	b4 01       	movw	r22, r8
     d9a:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
     d9e:	6b 01       	movw	r12, r22
     da0:	7c 01       	movw	r14, r24
	if (dist < dist_threshold){
     da2:	60 91 1c 01 	lds	r22, 0x011C
     da6:	70 91 1d 01 	lds	r23, 0x011D
     daa:	88 27       	eor	r24, r24
     dac:	77 fd       	sbrc	r23, 7
     dae:	80 95       	com	r24
     db0:	98 2f       	mov	r25, r24
     db2:	0e 94 a1 14 	call	0x2942	; 0x2942 <__floatsisf>
     db6:	9b 01       	movw	r18, r22
     db8:	ac 01       	movw	r20, r24
     dba:	c1 e0       	ldi	r28, 0x01	; 1
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
     dbe:	c7 01       	movw	r24, r14
     dc0:	b6 01       	movw	r22, r12
     dc2:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
     dc6:	88 23       	and	r24, r24
     dc8:	14 f0       	brlt	.+4      	; 0xdce <find_if_reach+0xa4>
     dca:	c0 e0       	ldi	r28, 0x00	; 0
     dcc:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
     dce:	ce 01       	movw	r24, r28
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	bf 90       	pop	r11
     dde:	af 90       	pop	r10
     de0:	9f 90       	pop	r9
     de2:	8f 90       	pop	r8
     de4:	08 95       	ret

00000de6 <localization>:
	set(ADCSRA, ADEN);
	set(ADCSRA,ADSC);
	
}

void localization(void){
     de6:	2f 92       	push	r2
     de8:	3f 92       	push	r3
     dea:	4f 92       	push	r4
     dec:	5f 92       	push	r5
     dee:	6f 92       	push	r6
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	cc 57       	subi	r28, 0x7C	; 124
     e10:	d1 09       	sbc	r29, r1
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
	//unsigned int data[8] = {740, 272, 777, 282, 715, 311, 755, 356};
	//float x[4] = {data[0], data[2], data[4], data[6]};
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
     e1c:	60 91 5e 01 	lds	r22, 0x015E
     e20:	70 91 5f 01 	lds	r23, 0x015F
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     e2c:	69 83       	std	Y+1, r22	; 0x01
     e2e:	7a 83       	std	Y+2, r23	; 0x02
     e30:	8b 83       	std	Y+3, r24	; 0x03
     e32:	9c 83       	std	Y+4, r25	; 0x04
     e34:	60 91 64 01 	lds	r22, 0x0164
     e38:	70 91 65 01 	lds	r23, 0x0165
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     e44:	6d 83       	std	Y+5, r22	; 0x05
     e46:	7e 83       	std	Y+6, r23	; 0x06
     e48:	8f 83       	std	Y+7, r24	; 0x07
     e4a:	98 87       	std	Y+8, r25	; 0x08
     e4c:	60 91 6a 01 	lds	r22, 0x016A
     e50:	70 91 6b 01 	lds	r23, 0x016B
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     e5c:	69 87       	std	Y+9, r22	; 0x09
     e5e:	7a 87       	std	Y+10, r23	; 0x0a
     e60:	8b 87       	std	Y+11, r24	; 0x0b
     e62:	9c 87       	std	Y+12, r25	; 0x0c
     e64:	60 91 70 01 	lds	r22, 0x0170
     e68:	70 91 71 01 	lds	r23, 0x0171
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     e74:	6d 87       	std	Y+13, r22	; 0x0d
     e76:	7e 87       	std	Y+14, r23	; 0x0e
     e78:	8f 87       	std	Y+15, r24	; 0x0f
     e7a:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
     e7c:	60 91 60 01 	lds	r22, 0x0160
     e80:	70 91 61 01 	lds	r23, 0x0161
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     e8c:	69 8b       	std	Y+17, r22	; 0x11
     e8e:	7a 8b       	std	Y+18, r23	; 0x12
     e90:	8b 8b       	std	Y+19, r24	; 0x13
     e92:	9c 8b       	std	Y+20, r25	; 0x14
     e94:	60 91 66 01 	lds	r22, 0x0166
     e98:	70 91 67 01 	lds	r23, 0x0167
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     ea4:	6d 8b       	std	Y+21, r22	; 0x15
     ea6:	7e 8b       	std	Y+22, r23	; 0x16
     ea8:	8f 8b       	std	Y+23, r24	; 0x17
     eaa:	98 8f       	std	Y+24, r25	; 0x18
     eac:	60 91 6c 01 	lds	r22, 0x016C
     eb0:	70 91 6d 01 	lds	r23, 0x016D
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     ebc:	69 8f       	std	Y+25, r22	; 0x19
     ebe:	7a 8f       	std	Y+26, r23	; 0x1a
     ec0:	8b 8f       	std	Y+27, r24	; 0x1b
     ec2:	9c 8f       	std	Y+28, r25	; 0x1c
     ec4:	60 91 72 01 	lds	r22, 0x0172
     ec8:	70 91 73 01 	lds	r23, 0x0173
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
     ed4:	6d 8f       	std	Y+29, r22	; 0x1d
     ed6:	7e 8f       	std	Y+30, r23	; 0x1e
     ed8:	8f 8f       	std	Y+31, r24	; 0x1f
     eda:	98 a3       	std	Y+32, r25	; 0x20
     edc:	9e 01       	movw	r18, r28
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	e9 96       	adiw	r28, 0x39	; 57
     ee4:	3f af       	std	Y+63, r19	; 0x3f
     ee6:	2e af       	std	Y+62, r18	; 0x3e
     ee8:	e9 97       	sbiw	r28, 0x39	; 57
     eea:	ce 01       	movw	r24, r28
     eec:	41 96       	adiw	r24, 0x11	; 17
     eee:	e1 96       	adiw	r28, 0x31	; 49
     ef0:	9f af       	std	Y+63, r25	; 0x3f
     ef2:	8e af       	std	Y+62, r24	; 0x3e
     ef4:	e1 97       	sbiw	r28, 0x31	; 49
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
     ef6:	ab 96       	adiw	r28, 0x2b	; 43
     ef8:	1f ae       	std	Y+63, r1	; 0x3f
     efa:	1e ae       	std	Y+62, r1	; 0x3e
     efc:	ab 97       	sbiw	r28, 0x2b	; 43
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
     efe:	e7 96       	adiw	r28, 0x37	; 55
     f00:	1f ae       	std	Y+63, r1	; 0x3f
     f02:	1e ae       	std	Y+62, r1	; 0x3e
     f04:	e7 97       	sbiw	r28, 0x37	; 55
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     f06:	ab 96       	adiw	r28, 0x2b	; 43
     f08:	ae ad       	ldd	r26, Y+62	; 0x3e
     f0a:	bf ad       	ldd	r27, Y+63	; 0x3f
     f0c:	ab 97       	sbiw	r28, 0x2b	; 43
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	e5 96       	adiw	r28, 0x35	; 53
     f12:	bf af       	std	Y+63, r27	; 0x3f
     f14:	ae af       	std	Y+62, r26	; 0x3e
     f16:	e5 97       	sbiw	r28, 0x35	; 53
     f18:	14 97       	sbiw	r26, 0x04	; 4
     f1a:	0c f0       	brlt	.+2      	; 0xf1e <localization+0x138>
     f1c:	a8 c5       	rjmp	.+2896   	; 0x1a6e <localization+0xc88>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
     f1e:	e9 96       	adiw	r28, 0x39	; 57
     f20:	ee ad       	ldd	r30, Y+62	; 0x3e
     f22:	ff ad       	ldd	r31, Y+63	; 0x3f
     f24:	e9 97       	sbiw	r28, 0x39	; 57
     f26:	81 90       	ld	r8, Z+
     f28:	91 90       	ld	r9, Z+
     f2a:	a1 90       	ld	r10, Z+
     f2c:	b1 90       	ld	r11, Z+
     f2e:	e7 96       	adiw	r28, 0x37	; 55
     f30:	8e ad       	ldd	r24, Y+62	; 0x3e
     f32:	9f ad       	ldd	r25, Y+63	; 0x3f
     f34:	e7 97       	sbiw	r28, 0x37	; 55
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	29 e3       	ldi	r18, 0x39	; 57
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	2c 0f       	add	r18, r28
     f40:	3d 1f       	adc	r19, r29
     f42:	28 0f       	add	r18, r24
     f44:	39 1f       	adc	r19, r25
     f46:	a7 96       	adiw	r28, 0x27	; 39
     f48:	3f af       	std	Y+63, r19	; 0x3f
     f4a:	2e af       	std	Y+62, r18	; 0x3e
     f4c:	a7 97       	sbiw	r28, 0x27	; 39
     f4e:	a5 e4       	ldi	r26, 0x45	; 69
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ac 0f       	add	r26, r28
     f54:	bd 1f       	adc	r27, r29
     f56:	a8 0f       	add	r26, r24
     f58:	b9 1f       	adc	r27, r25
     f5a:	a3 96       	adiw	r28, 0x23	; 35
     f5c:	bf af       	std	Y+63, r27	; 0x3f
     f5e:	ae af       	std	Y+62, r26	; 0x3e
     f60:	a3 97       	sbiw	r28, 0x23	; 35
     f62:	e7 96       	adiw	r28, 0x37	; 55
     f64:	8e ad       	ldd	r24, Y+62	; 0x3e
     f66:	9f ad       	ldd	r25, Y+63	; 0x3f
     f68:	e7 97       	sbiw	r28, 0x37	; 55
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0f 2e       	mov	r0, r31
     f74:	f1 e2       	ldi	r31, 0x21	; 33
     f76:	6f 2e       	mov	r6, r31
     f78:	71 2c       	mov	r7, r1
     f7a:	f0 2d       	mov	r31, r0
     f7c:	6c 0e       	add	r6, r28
     f7e:	7d 1e       	adc	r7, r29
     f80:	68 0e       	add	r6, r24
     f82:	79 1e       	adc	r7, r25
     f84:	e1 96       	adiw	r28, 0x31	; 49
     f86:	2e ad       	ldd	r18, Y+62	; 0x3e
     f88:	3f ad       	ldd	r19, Y+63	; 0x3f
     f8a:	e1 97       	sbiw	r28, 0x31	; 49
     f8c:	2c 5f       	subi	r18, 0xFC	; 252
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     f92:	e5 96       	adiw	r28, 0x35	; 53
     f94:	0e ad       	ldd	r16, Y+62	; 0x3e
     f96:	1f ad       	ldd	r17, Y+63	; 0x3f
     f98:	e5 97       	sbiw	r28, 0x35	; 53
     f9a:	af 96       	adiw	r28, 0x2f	; 47
     f9c:	8c ae       	std	Y+60, r8	; 0x3c
     f9e:	9d ae       	std	Y+61, r9	; 0x3d
     fa0:	ae ae       	std	Y+62, r10	; 0x3e
     fa2:	bf ae       	std	Y+63, r11	; 0x3f
     fa4:	af 97       	sbiw	r28, 0x2f	; 47
     fa6:	59 01       	movw	r10, r18
     fa8:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 ec       	ldi	r19, 0xC0	; 192
     fae:	4f e7       	ldi	r20, 0x7F	; 127
     fb0:	54 e4       	ldi	r21, 0x44	; 68
     fb2:	af 96       	adiw	r28, 0x2f	; 47
     fb4:	6c ad       	ldd	r22, Y+60	; 0x3c
     fb6:	7d ad       	ldd	r23, Y+61	; 0x3d
     fb8:	8e ad       	ldd	r24, Y+62	; 0x3e
     fba:	9f ad       	ldd	r25, Y+63	; 0x3f
     fbc:	af 97       	sbiw	r28, 0x2f	; 47
     fbe:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
     fc2:	88 23       	and	r24, r24
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <localization+0x1e2>
     fc6:	6c c0       	rjmp	.+216    	; 0x10a0 <localization+0x2ba>
     fc8:	e1 96       	adiw	r28, 0x31	; 49
     fca:	ae ad       	ldd	r26, Y+62	; 0x3e
     fcc:	bf ad       	ldd	r27, Y+63	; 0x3f
     fce:	e1 97       	sbiw	r28, 0x31	; 49
     fd0:	cd 90       	ld	r12, X+
     fd2:	dd 90       	ld	r13, X+
     fd4:	ed 90       	ld	r14, X+
     fd6:	fc 90       	ld	r15, X
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 ec       	ldi	r19, 0xC0	; 192
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	54 e4       	ldi	r21, 0x44	; 68
     fe0:	c7 01       	movw	r24, r14
     fe2:	b6 01       	movw	r22, r12
     fe4:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
     fe8:	88 23       	and	r24, r24
     fea:	09 f4       	brne	.+2      	; 0xfee <localization+0x208>
     fec:	59 c0       	rjmp	.+178    	; 0x10a0 <localization+0x2ba>
     fee:	f1 01       	movw	r30, r2
     ff0:	40 80       	ld	r4, Z
     ff2:	51 80       	ldd	r5, Z+1	; 0x01
     ff4:	62 80       	ldd	r6, Z+2	; 0x02
     ff6:	73 80       	ldd	r7, Z+3	; 0x03
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 ec       	ldi	r19, 0xC0	; 192
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	54 e4       	ldi	r21, 0x44	; 68
    1000:	c3 01       	movw	r24, r6
    1002:	b2 01       	movw	r22, r4
    1004:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <localization+0x228>
    100c:	49 c0       	rjmp	.+146    	; 0x10a0 <localization+0x2ba>
    100e:	d5 01       	movw	r26, r10
    1010:	8d 91       	ld	r24, X+
    1012:	9d 91       	ld	r25, X+
    1014:	0d 90       	ld	r0, X+
    1016:	bc 91       	ld	r27, X
    1018:	a0 2d       	mov	r26, r0
    101a:	ed 96       	adiw	r28, 0x3d	; 61
    101c:	8c af       	std	Y+60, r24	; 0x3c
    101e:	9d af       	std	Y+61, r25	; 0x3d
    1020:	ae af       	std	Y+62, r26	; 0x3e
    1022:	bf af       	std	Y+63, r27	; 0x3f
    1024:	ed 97       	sbiw	r28, 0x3d	; 61
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 ec       	ldi	r19, 0xC0	; 192
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	54 e4       	ldi	r21, 0x44	; 68
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
    1036:	88 23       	and	r24, r24
    1038:	99 f1       	breq	.+102    	; 0x10a0 <localization+0x2ba>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    103a:	a3 01       	movw	r20, r6
    103c:	92 01       	movw	r18, r4
    103e:	af 96       	adiw	r28, 0x2f	; 47
    1040:	6c ad       	ldd	r22, Y+60	; 0x3c
    1042:	7d ad       	ldd	r23, Y+61	; 0x3d
    1044:	8e ad       	ldd	r24, Y+62	; 0x3e
    1046:	9f ad       	ldd	r25, Y+63	; 0x3f
    1048:	af 97       	sbiw	r28, 0x2f	; 47
    104a:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    104e:	2b 01       	movw	r4, r22
    1050:	3c 01       	movw	r6, r24
    1052:	ed 96       	adiw	r28, 0x3d	; 61
    1054:	2c ad       	ldd	r18, Y+60	; 0x3c
    1056:	3d ad       	ldd	r19, Y+61	; 0x3d
    1058:	4e ad       	ldd	r20, Y+62	; 0x3e
    105a:	5f ad       	ldd	r21, Y+63	; 0x3f
    105c:	ed 97       	sbiw	r28, 0x3d	; 61
    105e:	c7 01       	movw	r24, r14
    1060:	b6 01       	movw	r22, r12
    1062:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    1066:	6b 01       	movw	r12, r22
    1068:	7c 01       	movw	r14, r24
    106a:	a3 01       	movw	r20, r6
    106c:	92 01       	movw	r18, r4
    106e:	c3 01       	movw	r24, r6
    1070:	b2 01       	movw	r22, r4
    1072:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1076:	2b 01       	movw	r4, r22
    1078:	3c 01       	movw	r6, r24
    107a:	a7 01       	movw	r20, r14
    107c:	96 01       	movw	r18, r12
    107e:	c7 01       	movw	r24, r14
    1080:	b6 01       	movw	r22, r12
    1082:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1086:	9b 01       	movw	r18, r22
    1088:	ac 01       	movw	r20, r24
    108a:	c3 01       	movw	r24, r6
    108c:	b2 01       	movw	r22, r4
    108e:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
    1092:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <sqrt>
    1096:	f4 01       	movw	r30, r8
    1098:	60 83       	st	Z, r22
    109a:	71 83       	std	Z+1, r23	; 0x01
    109c:	82 83       	std	Z+2, r24	; 0x02
    109e:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    10a0:	a7 96       	adiw	r28, 0x27	; 39
    10a2:	ae ad       	ldd	r26, Y+62	; 0x3e
    10a4:	bf ad       	ldd	r27, Y+63	; 0x3f
    10a6:	a7 97       	sbiw	r28, 0x27	; 39
    10a8:	ab 96       	adiw	r28, 0x2b	; 43
    10aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    10ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    10ae:	ab 97       	sbiw	r28, 0x2b	; 43
    10b0:	ed 93       	st	X+, r30
    10b2:	fd 93       	st	X+, r31
    10b4:	a7 96       	adiw	r28, 0x27	; 39
    10b6:	bf af       	std	Y+63, r27	; 0x3f
    10b8:	ae af       	std	Y+62, r26	; 0x3e
    10ba:	a7 97       	sbiw	r28, 0x27	; 39
			to[ind] = j;
    10bc:	a3 96       	adiw	r28, 0x23	; 35
    10be:	ae ad       	ldd	r26, Y+62	; 0x3e
    10c0:	bf ad       	ldd	r27, Y+63	; 0x3f
    10c2:	a3 97       	sbiw	r28, 0x23	; 35
    10c4:	0d 93       	st	X+, r16
    10c6:	1d 93       	st	X+, r17
    10c8:	a3 96       	adiw	r28, 0x23	; 35
    10ca:	bf af       	std	Y+63, r27	; 0x3f
    10cc:	ae af       	std	Y+62, r26	; 0x3e
    10ce:	a3 97       	sbiw	r28, 0x23	; 35
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    10d0:	0f 5f       	subi	r16, 0xFF	; 255
    10d2:	1f 4f       	sbci	r17, 0xFF	; 255
    10d4:	b4 e0       	ldi	r27, 0x04	; 4
    10d6:	2b 0e       	add	r2, r27
    10d8:	31 1c       	adc	r3, r1
    10da:	e4 e0       	ldi	r30, 0x04	; 4
    10dc:	ae 0e       	add	r10, r30
    10de:	b1 1c       	adc	r11, r1
    10e0:	f4 e0       	ldi	r31, 0x04	; 4
    10e2:	8f 0e       	add	r8, r31
    10e4:	91 1c       	adc	r9, r1
    10e6:	04 30       	cpi	r16, 0x04	; 4
    10e8:	11 05       	cpc	r17, r1
    10ea:	09 f0       	breq	.+2      	; 0x10ee <localization+0x308>
    10ec:	5e cf       	rjmp	.-324    	; 0xfaa <localization+0x1c4>
    10ee:	e7 96       	adiw	r28, 0x37	; 55
    10f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    10f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    10f4:	e7 97       	sbiw	r28, 0x37	; 55
    10f6:	e5 96       	adiw	r28, 0x35	; 53
    10f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    10fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    10fc:	e5 97       	sbiw	r28, 0x35	; 53
    10fe:	82 1b       	sub	r24, r18
    1100:	93 0b       	sbc	r25, r19
    1102:	dc 01       	movw	r26, r24
    1104:	14 96       	adiw	r26, 0x04	; 4
    1106:	e7 96       	adiw	r28, 0x37	; 55
    1108:	bf af       	std	Y+63, r27	; 0x3f
    110a:	ae af       	std	Y+62, r26	; 0x3e
    110c:	e7 97       	sbiw	r28, 0x37	; 55
    110e:	e9 96       	adiw	r28, 0x39	; 57
    1110:	ee ad       	ldd	r30, Y+62	; 0x3e
    1112:	ff ad       	ldd	r31, Y+63	; 0x3f
    1114:	e9 97       	sbiw	r28, 0x39	; 57
    1116:	34 96       	adiw	r30, 0x04	; 4
    1118:	e9 96       	adiw	r28, 0x39	; 57
    111a:	ff af       	std	Y+63, r31	; 0x3f
    111c:	ee af       	std	Y+62, r30	; 0x3e
    111e:	e9 97       	sbiw	r28, 0x39	; 57
    1120:	e1 96       	adiw	r28, 0x31	; 49
    1122:	2e ad       	ldd	r18, Y+62	; 0x3e
    1124:	3f ad       	ldd	r19, Y+63	; 0x3f
    1126:	e1 97       	sbiw	r28, 0x31	; 49
    1128:	2c 5f       	subi	r18, 0xFC	; 252
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	e1 96       	adiw	r28, 0x31	; 49
    112e:	3f af       	std	Y+63, r19	; 0x3f
    1130:	2e af       	std	Y+62, r18	; 0x3e
    1132:	e1 97       	sbiw	r28, 0x31	; 49
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1134:	e5 96       	adiw	r28, 0x35	; 53
    1136:	8e ad       	ldd	r24, Y+62	; 0x3e
    1138:	9f ad       	ldd	r25, Y+63	; 0x3f
    113a:	e5 97       	sbiw	r28, 0x35	; 53
    113c:	03 97       	sbiw	r24, 0x03	; 3
    113e:	49 f0       	breq	.+18     	; 0x1152 <localization+0x36c>
    1140:	e5 96       	adiw	r28, 0x35	; 53
    1142:	ae ad       	ldd	r26, Y+62	; 0x3e
    1144:	bf ad       	ldd	r27, Y+63	; 0x3f
    1146:	e5 97       	sbiw	r28, 0x35	; 53
    1148:	ab 96       	adiw	r28, 0x2b	; 43
    114a:	bf af       	std	Y+63, r27	; 0x3f
    114c:	ae af       	std	Y+62, r26	; 0x3e
    114e:	ab 97       	sbiw	r28, 0x2b	; 43
    1150:	da ce       	rjmp	.-588    	; 0xf06 <localization+0x120>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1152:	e7 96       	adiw	r28, 0x37	; 55
    1154:	ee ad       	ldd	r30, Y+62	; 0x3e
    1156:	ff ad       	ldd	r31, Y+63	; 0x3f
    1158:	e7 97       	sbiw	r28, 0x37	; 55
    115a:	1e 16       	cp	r1, r30
    115c:	1f 06       	cpc	r1, r31
    115e:	84 f5       	brge	.+96     	; 0x11c0 <localization+0x3da>
    1160:	6e 01       	movw	r12, r28
    1162:	f1 e2       	ldi	r31, 0x21	; 33
    1164:	cf 0e       	add	r12, r31
    1166:	d1 1c       	adc	r13, r1
    1168:	21 2c       	mov	r2, r1
    116a:	31 2c       	mov	r3, r1
    116c:	00 e0       	ldi	r16, 0x00	; 0
    116e:	10 e0       	ldi	r17, 0x00	; 0
    1170:	e1 2c       	mov	r14, r1
    1172:	f1 2c       	mov	r15, r1
    1174:	e7 96       	adiw	r28, 0x37	; 55
    1176:	ae ac       	ldd	r10, Y+62	; 0x3e
    1178:	bf ac       	ldd	r11, Y+63	; 0x3f
    117a:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] > dmax){
    117c:	d6 01       	movw	r26, r12
    117e:	4d 90       	ld	r4, X+
    1180:	5d 90       	ld	r5, X+
    1182:	6d 90       	ld	r6, X+
    1184:	7d 90       	ld	r7, X+
    1186:	6d 01       	movw	r12, r26
    1188:	b8 01       	movw	r22, r16
    118a:	88 27       	eor	r24, r24
    118c:	77 fd       	sbrc	r23, 7
    118e:	80 95       	com	r24
    1190:	98 2f       	mov	r25, r24
    1192:	0e 94 a1 14 	call	0x2942	; 0x2942 <__floatsisf>
    1196:	9b 01       	movw	r18, r22
    1198:	ac 01       	movw	r20, r24
    119a:	c3 01       	movw	r24, r6
    119c:	b2 01       	movw	r22, r4
    119e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__gesf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	34 f4       	brge	.+12     	; 0x11b2 <localization+0x3cc>
			indmax = i;
			dmax = d[i];
    11a6:	c3 01       	movw	r24, r6
    11a8:	b2 01       	movw	r22, r4
    11aa:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
    11ae:	8b 01       	movw	r16, r22
    11b0:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    11b2:	bf ef       	ldi	r27, 0xFF	; 255
    11b4:	eb 1a       	sub	r14, r27
    11b6:	fb 0a       	sbc	r15, r27
    11b8:	ea 14       	cp	r14, r10
    11ba:	fb 04       	cpc	r15, r11
    11bc:	f9 f6       	brne	.-66     	; 0x117c <localization+0x396>
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <localization+0x3e2>
    11c0:	21 2c       	mov	r2, r1
    11c2:	31 2c       	mov	r3, r1
    11c4:	00 e0       	ldi	r16, 0x00	; 0
    11c6:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    11c8:	e7 96       	adiw	r28, 0x37	; 55
    11ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    11cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    11ce:	e7 97       	sbiw	r28, 0x37	; 55
    11d0:	1e 16       	cp	r1, r30
    11d2:	1f 06       	cpc	r1, r31
    11d4:	dc f5       	brge	.+118    	; 0x124c <localization+0x466>
    11d6:	6e 01       	movw	r12, r28
    11d8:	f1 e2       	ldi	r31, 0x21	; 33
    11da:	cf 0e       	add	r12, r31
    11dc:	d1 1c       	adc	r13, r1
    11de:	a3 96       	adiw	r28, 0x23	; 35
    11e0:	1f ae       	std	Y+63, r1	; 0x3f
    11e2:	1e ae       	std	Y+62, r1	; 0x3e
    11e4:	a3 97       	sbiw	r28, 0x23	; 35
    11e6:	0f 2e       	mov	r0, r31
    11e8:	f0 e1       	ldi	r31, 0x10	; 16
    11ea:	af 2e       	mov	r10, r31
    11ec:	f7 e2       	ldi	r31, 0x27	; 39
    11ee:	bf 2e       	mov	r11, r31
    11f0:	f0 2d       	mov	r31, r0
    11f2:	e1 2c       	mov	r14, r1
    11f4:	f1 2c       	mov	r15, r1
    11f6:	48 01       	movw	r8, r16
    11f8:	e7 96       	adiw	r28, 0x37	; 55
    11fa:	0e ad       	ldd	r16, Y+62	; 0x3e
    11fc:	1f ad       	ldd	r17, Y+63	; 0x3f
    11fe:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] < dmin){
    1200:	d6 01       	movw	r26, r12
    1202:	4d 90       	ld	r4, X+
    1204:	5d 90       	ld	r5, X+
    1206:	6d 90       	ld	r6, X+
    1208:	7d 90       	ld	r7, X+
    120a:	6d 01       	movw	r12, r26
    120c:	b5 01       	movw	r22, r10
    120e:	88 27       	eor	r24, r24
    1210:	77 fd       	sbrc	r23, 7
    1212:	80 95       	com	r24
    1214:	98 2f       	mov	r25, r24
    1216:	0e 94 a1 14 	call	0x2942	; 0x2942 <__floatsisf>
    121a:	9b 01       	movw	r18, r22
    121c:	ac 01       	movw	r20, r24
    121e:	c3 01       	movw	r24, r6
    1220:	b2 01       	movw	r22, r4
    1222:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
    1226:	88 23       	and	r24, r24
    1228:	4c f4       	brge	.+18     	; 0x123c <localization+0x456>
			indmin = i;
			dmin = d[i];
    122a:	c3 01       	movw	r24, r6
    122c:	b2 01       	movw	r22, r4
    122e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
    1232:	5b 01       	movw	r10, r22
    1234:	a3 96       	adiw	r28, 0x23	; 35
    1236:	ff ae       	std	Y+63, r15	; 0x3f
    1238:	ee ae       	std	Y+62, r14	; 0x3e
    123a:	a3 97       	sbiw	r28, 0x23	; 35
	}
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    123c:	bf ef       	ldi	r27, 0xFF	; 255
    123e:	eb 1a       	sub	r14, r27
    1240:	fb 0a       	sbc	r15, r27
    1242:	e0 16       	cp	r14, r16
    1244:	f1 06       	cpc	r15, r17
    1246:	e1 f6       	brne	.-72     	; 0x1200 <localization+0x41a>
    1248:	84 01       	movw	r16, r8
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <localization+0x46e>
    124c:	a3 96       	adiw	r28, 0x23	; 35
    124e:	1f ae       	std	Y+63, r1	; 0x3f
    1250:	1e ae       	std	Y+62, r1	; 0x3e
    1252:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1254:	80 90 0c 01 	lds	r8, 0x010C
    1258:	90 90 0d 01 	lds	r9, 0x010D
    125c:	a0 90 0e 01 	lds	r10, 0x010E
    1260:	b0 90 0f 01 	lds	r11, 0x010F
    1264:	b8 01       	movw	r22, r16
    1266:	88 27       	eor	r24, r24
    1268:	77 fd       	sbrc	r23, 7
    126a:	80 95       	com	r24
    126c:	98 2f       	mov	r25, r24
    126e:	0e 94 a1 14 	call	0x2942	; 0x2942 <__floatsisf>
    1272:	a5 01       	movw	r20, r10
    1274:	94 01       	movw	r18, r8
    1276:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    127a:	2b 01       	movw	r4, r22
    127c:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    127e:	c0 90 10 01 	lds	r12, 0x0110
    1282:	d0 90 11 01 	lds	r13, 0x0111
    1286:	e0 90 12 01 	lds	r14, 0x0112
    128a:	f0 90 13 01 	lds	r15, 0x0113
    128e:	e0 e0       	ldi	r30, 0x00	; 0
    1290:	f1 e0       	ldi	r31, 0x01	; 1
    1292:	ab 96       	adiw	r28, 0x2b	; 43
    1294:	ff af       	std	Y+63, r31	; 0x3f
    1296:	ee af       	std	Y+62, r30	; 0x3e
    1298:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    129a:	a7 96       	adiw	r28, 0x27	; 39
    129c:	1f ae       	std	Y+63, r1	; 0x3f
    129e:	1e ae       	std	Y+62, r1	; 0x3e
    12a0:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    12a2:	01 e0       	ldi	r16, 0x01	; 1
    12a4:	10 e0       	ldi	r17, 0x00	; 0
    12a6:	ad 96       	adiw	r28, 0x2d	; 45
    12a8:	3f ae       	std	Y+63, r3	; 0x3f
    12aa:	2e ae       	std	Y+62, r2	; 0x3e
    12ac:	ad 97       	sbiw	r28, 0x2d	; 45
    12ae:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    12b0:	d1 01       	movw	r26, r2
    12b2:	2d 91       	ld	r18, X+
    12b4:	3d 91       	ld	r19, X+
    12b6:	4d 91       	ld	r20, X+
    12b8:	5d 91       	ld	r21, X+
    12ba:	1d 01       	movw	r2, r26
    12bc:	c3 01       	movw	r24, r6
    12be:	b2 01       	movw	r22, r4
    12c0:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    12c4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
    12c8:	9b 01       	movw	r18, r22
    12ca:	77 23       	and	r23, r23
    12cc:	24 f4       	brge	.+8      	; 0x12d6 <localization+0x4f0>
    12ce:	22 27       	eor	r18, r18
    12d0:	33 27       	eor	r19, r19
    12d2:	26 1b       	sub	r18, r22
    12d4:	37 0b       	sbc	r19, r23
    12d6:	b9 01       	movw	r22, r18
    12d8:	88 27       	eor	r24, r24
    12da:	77 fd       	sbrc	r23, 7
    12dc:	80 95       	com	r24
    12de:	98 2f       	mov	r25, r24
    12e0:	0e 94 a1 14 	call	0x2942	; 0x2942 <__floatsisf>
    12e4:	a7 01       	movw	r20, r14
    12e6:	96 01       	movw	r18, r12
    12e8:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpsf2>
    12ec:	88 23       	and	r24, r24
    12ee:	24 f4       	brge	.+8      	; 0x12f8 <localization+0x512>
    12f0:	a7 96       	adiw	r28, 0x27	; 39
    12f2:	1f af       	std	Y+63, r17	; 0x3f
    12f4:	0e af       	std	Y+62, r16	; 0x3e
    12f6:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    12f8:	0f 5f       	subi	r16, 0xFF	; 255
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	04 30       	cpi	r16, 0x04	; 4
    12fe:	11 05       	cpc	r17, r1
    1300:	b9 f6       	brne	.-82     	; 0x12b0 <localization+0x4ca>
    1302:	ad 96       	adiw	r28, 0x2d	; 45
    1304:	2e ac       	ldd	r2, Y+62	; 0x3e
    1306:	3f ac       	ldd	r3, Y+63	; 0x3f
    1308:	ad 97       	sbiw	r28, 0x2d	; 45
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    130a:	65 96       	adiw	r28, 0x15	; 21
    130c:	1c ae       	std	Y+60, r1	; 0x3c
    130e:	1d ae       	std	Y+61, r1	; 0x3d
    1310:	1e ae       	std	Y+62, r1	; 0x3e
    1312:	1f ae       	std	Y+63, r1	; 0x3f
    1314:	65 97       	sbiw	r28, 0x15	; 21
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a0 e8       	ldi	r26, 0x80	; 128
    131c:	bf e3       	ldi	r27, 0x3F	; 63
    131e:	69 96       	adiw	r28, 0x19	; 25
    1320:	8c af       	std	Y+60, r24	; 0x3c
    1322:	9d af       	std	Y+61, r25	; 0x3d
    1324:	ae af       	std	Y+62, r26	; 0x3e
    1326:	bf af       	std	Y+63, r27	; 0x3f
    1328:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    132a:	a7 96       	adiw	r28, 0x27	; 39
    132c:	ee ad       	ldd	r30, Y+62	; 0x3e
    132e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1330:	a7 97       	sbiw	r28, 0x27	; 39
    1332:	e2 30       	cpi	r30, 0x02	; 2
    1334:	f1 05       	cpc	r31, r1
    1336:	19 f0       	breq	.+6      	; 0x133e <localization+0x558>
    1338:	33 97       	sbiw	r30, 0x03	; 3
    133a:	51 f1       	breq	.+84     	; 0x1390 <localization+0x5aa>
    133c:	5a c0       	rjmp	.+180    	; 0x13f2 <localization+0x60c>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    133e:	a5 01       	movw	r20, r10
    1340:	94 01       	movw	r18, r8
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	88 e6       	ldi	r24, 0x68	; 104
    1348:	91 e4       	ldi	r25, 0x41	; 65
    134a:	0e 94 06 14 	call	0x280c	; 0x280c <__divsf3>
    134e:	af 96       	adiw	r28, 0x2f	; 47
    1350:	6c af       	std	Y+60, r22	; 0x3c
    1352:	7d af       	std	Y+61, r23	; 0x3d
    1354:	8e af       	std	Y+62, r24	; 0x3e
    1356:	9f af       	std	Y+63, r25	; 0x3f
    1358:	af 97       	sbiw	r28, 0x2f	; 47
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    135a:	84 e9       	ldi	r24, 0x94	; 148
    135c:	97 e8       	ldi	r25, 0x87	; 135
    135e:	a5 ee       	ldi	r26, 0xE5	; 229
    1360:	be e3       	ldi	r27, 0x3E	; 62
    1362:	65 96       	adiw	r28, 0x15	; 21
    1364:	8c af       	std	Y+60, r24	; 0x3c
    1366:	9d af       	std	Y+61, r25	; 0x3d
    1368:	ae af       	std	Y+62, r26	; 0x3e
    136a:	bf af       	std	Y+63, r27	; 0x3f
    136c:	65 97       	sbiw	r28, 0x15	; 21
    136e:	81 ea       	ldi	r24, 0xA1	; 161
    1370:	96 ed       	ldi	r25, 0xD6	; 214
    1372:	a4 e6       	ldi	r26, 0x64	; 100
    1374:	bf eb       	ldi	r27, 0xBF	; 191
    1376:	69 96       	adiw	r28, 0x19	; 25
    1378:	8c af       	std	Y+60, r24	; 0x3c
    137a:	9d af       	std	Y+61, r25	; 0x3d
    137c:	ae af       	std	Y+62, r26	; 0x3e
    137e:	bf af       	std	Y+63, r27	; 0x3f
    1380:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1382:	e3 96       	adiw	r28, 0x33	; 51
    1384:	1c ae       	std	Y+60, r1	; 0x3c
    1386:	1d ae       	std	Y+61, r1	; 0x3d
    1388:	1e ae       	std	Y+62, r1	; 0x3e
    138a:	1f ae       	std	Y+63, r1	; 0x3f
    138c:	e3 97       	sbiw	r28, 0x33	; 51
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    138e:	45 c0       	rjmp	.+138    	; 0x141a <localization+0x634>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1390:	a5 01       	movw	r20, r10
    1392:	94 01       	movw	r18, r8
    1394:	61 ee       	ldi	r22, 0xE1	; 225
    1396:	7a e7       	ldi	r23, 0x7A	; 122
    1398:	8a e3       	ldi	r24, 0x3A	; 58
    139a:	91 e4       	ldi	r25, 0x41	; 65
    139c:	0e 94 06 14 	call	0x280c	; 0x280c <__divsf3>
    13a0:	e3 96       	adiw	r28, 0x33	; 51
    13a2:	6c af       	std	Y+60, r22	; 0x3c
    13a4:	7d af       	std	Y+61, r23	; 0x3d
    13a6:	8e af       	std	Y+62, r24	; 0x3e
    13a8:	9f af       	std	Y+63, r25	; 0x3f
    13aa:	e3 97       	sbiw	r28, 0x33	; 51
    13ac:	a5 01       	movw	r20, r10
    13ae:	94 01       	movw	r18, r8
    13b0:	63 e2       	ldi	r22, 0x23	; 35
    13b2:	7b ed       	ldi	r23, 0xDB	; 219
    13b4:	8b e0       	ldi	r24, 0x0B	; 11
    13b6:	91 ec       	ldi	r25, 0xC1	; 193
    13b8:	0e 94 06 14 	call	0x280c	; 0x280c <__divsf3>
    13bc:	af 96       	adiw	r28, 0x2f	; 47
    13be:	6c af       	std	Y+60, r22	; 0x3c
    13c0:	7d af       	std	Y+61, r23	; 0x3d
    13c2:	8e af       	std	Y+62, r24	; 0x3e
    13c4:	9f af       	std	Y+63, r25	; 0x3f
    13c6:	af 97       	sbiw	r28, 0x2f	; 47
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    13c8:	86 e6       	ldi	r24, 0x66	; 102
    13ca:	96 e6       	ldi	r25, 0x66	; 102
    13cc:	a6 e7       	ldi	r26, 0x76	; 118
    13ce:	bf eb       	ldi	r27, 0xBF	; 191
    13d0:	65 96       	adiw	r28, 0x15	; 21
    13d2:	8c af       	std	Y+60, r24	; 0x3c
    13d4:	9d af       	std	Y+61, r25	; 0x3d
    13d6:	ae af       	std	Y+62, r26	; 0x3e
    13d8:	bf af       	std	Y+63, r27	; 0x3f
    13da:	65 97       	sbiw	r28, 0x15	; 21
    13dc:	8f e9       	ldi	r24, 0x9F	; 159
    13de:	9d ec       	ldi	r25, 0xCD	; 205
    13e0:	aa e8       	ldi	r26, 0x8A	; 138
    13e2:	be e3       	ldi	r27, 0x3E	; 62
    13e4:	69 96       	adiw	r28, 0x19	; 25
    13e6:	8c af       	std	Y+60, r24	; 0x3c
    13e8:	9d af       	std	Y+61, r25	; 0x3d
    13ea:	ae af       	std	Y+62, r26	; 0x3e
    13ec:	bf af       	std	Y+63, r27	; 0x3f
    13ee:	69 97       	sbiw	r28, 0x19	; 25
			break;
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <localization+0x634>
		default:
			break;
	}
	
	if (ca > 0){
    13f2:	a7 96       	adiw	r28, 0x27	; 39
    13f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    13f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    13f8:	a7 97       	sbiw	r28, 0x27	; 39
    13fa:	12 16       	cp	r1, r18
    13fc:	13 06       	cpc	r1, r19
    13fe:	0c f0       	brlt	.+2      	; 0x1402 <localization+0x61c>
    1400:	f5 c2       	rjmp	.+1514   	; 0x19ec <localization+0xc06>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1402:	e3 96       	adiw	r28, 0x33	; 51
    1404:	1c ae       	std	Y+60, r1	; 0x3c
    1406:	1d ae       	std	Y+61, r1	; 0x3d
    1408:	1e ae       	std	Y+62, r1	; 0x3e
    140a:	1f ae       	std	Y+63, r1	; 0x3f
    140c:	e3 97       	sbiw	r28, 0x33	; 51
    140e:	af 96       	adiw	r28, 0x2f	; 47
    1410:	1c ae       	std	Y+60, r1	; 0x3c
    1412:	1d ae       	std	Y+61, r1	; 0x3d
    1414:	1e ae       	std	Y+62, r1	; 0x3e
    1416:	1f ae       	std	Y+63, r1	; 0x3f
    1418:	af 97       	sbiw	r28, 0x2f	; 47
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    141a:	f1 01       	movw	r30, r2
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	8c 0f       	add	r24, r28
    1426:	9d 1f       	adc	r25, r29
    1428:	e8 0f       	add	r30, r24
    142a:	f9 1f       	adc	r31, r25
    142c:	e0 ac       	ldd	r14, Z+56	; 0x38
    142e:	f1 ac       	ldd	r15, Z+57	; 0x39
    1430:	a3 96       	adiw	r28, 0x23	; 35
    1432:	ee ad       	ldd	r30, Y+62	; 0x3e
    1434:	ff ad       	ldd	r31, Y+63	; 0x3f
    1436:	a3 97       	sbiw	r28, 0x23	; 35
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	e8 0f       	add	r30, r24
    143e:	f9 1f       	adc	r31, r25
    1440:	80 ad       	ldd	r24, Z+56	; 0x38
    1442:	91 ad       	ldd	r25, Z+57	; 0x39
    1444:	8e 15       	cp	r24, r14
    1446:	9f 05       	cpc	r25, r15
    1448:	89 f0       	breq	.+34     	; 0x146c <localization+0x686>
    144a:	a3 96       	adiw	r28, 0x23	; 35
    144c:	ee ad       	ldd	r30, Y+62	; 0x3e
    144e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1450:	a3 97       	sbiw	r28, 0x23	; 35
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	a5 e4       	ldi	r26, 0x45	; 69
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ac 0f       	add	r26, r28
    145c:	bd 1f       	adc	r27, r29
    145e:	ea 0f       	add	r30, r26
    1460:	fb 1f       	adc	r31, r27
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	e8 16       	cp	r14, r24
    1468:	f9 06       	cpc	r15, r25
    146a:	69 f4       	brne	.+26     	; 0x1486 <localization+0x6a0>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    146c:	d1 01       	movw	r26, r2
    146e:	aa 0f       	add	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	e5 e4       	ldi	r30, 0x45	; 69
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	ec 0f       	add	r30, r28
    1478:	fd 1f       	adc	r31, r29
    147a:	ae 0f       	add	r26, r30
    147c:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    147e:	f7 01       	movw	r30, r14
			other_ind = to[indmax];
    1480:	ed 90       	ld	r14, X+
    1482:	fc 90       	ld	r15, X
    1484:	0c c0       	rjmp	.+24     	; 0x149e <localization+0x6b8>
		}
		else{
			coin_ind = to[indmax];
    1486:	f1 01       	movw	r30, r2
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	25 e4       	ldi	r18, 0x45	; 69
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	2c 0f       	add	r18, r28
    1492:	3d 1f       	adc	r19, r29
    1494:	e2 0f       	add	r30, r18
    1496:	f3 1f       	adc	r31, r19
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    149e:	a7 96       	adiw	r28, 0x27	; 39
    14a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14a4:	a7 97       	sbiw	r28, 0x27	; 39
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <localization+0x6c6>
    14aa:	45 c0       	rjmp	.+138    	; 0x1536 <localization+0x750>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    14ac:	6f 01       	movw	r12, r30
    14ae:	cc 0c       	add	r12, r12
    14b0:	dd 1c       	adc	r13, r13
    14b2:	cc 0c       	add	r12, r12
    14b4:	dd 1c       	adc	r13, r13
    14b6:	a1 e0       	ldi	r26, 0x01	; 1
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ac 0f       	add	r26, r28
    14bc:	bd 1f       	adc	r27, r29
    14be:	ca 0e       	add	r12, r26
    14c0:	db 1e       	adc	r13, r27
    14c2:	87 01       	movw	r16, r14
    14c4:	00 0f       	add	r16, r16
    14c6:	11 1f       	adc	r17, r17
    14c8:	00 0f       	add	r16, r16
    14ca:	11 1f       	adc	r17, r17
    14cc:	0a 0f       	add	r16, r26
    14ce:	1b 1f       	adc	r17, r27
    14d0:	f8 01       	movw	r30, r16
    14d2:	20 81       	ld	r18, Z
    14d4:	31 81       	ldd	r19, Z+1	; 0x01
    14d6:	42 81       	ldd	r20, Z+2	; 0x02
    14d8:	53 81       	ldd	r21, Z+3	; 0x03
    14da:	d6 01       	movw	r26, r12
    14dc:	6d 91       	ld	r22, X+
    14de:	7d 91       	ld	r23, X+
    14e0:	8d 91       	ld	r24, X+
    14e2:	9c 91       	ld	r25, X
    14e4:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    14f4:	a9 96       	adiw	r28, 0x29	; 41
    14f6:	6c af       	std	Y+60, r22	; 0x3c
    14f8:	7d af       	std	Y+61, r23	; 0x3d
    14fa:	8e af       	std	Y+62, r24	; 0x3e
    14fc:	9f af       	std	Y+63, r25	; 0x3f
    14fe:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    1500:	f8 01       	movw	r30, r16
    1502:	20 89       	ldd	r18, Z+16	; 0x10
    1504:	31 89       	ldd	r19, Z+17	; 0x11
    1506:	42 89       	ldd	r20, Z+18	; 0x12
    1508:	53 89       	ldd	r21, Z+19	; 0x13
    150a:	d6 01       	movw	r26, r12
    150c:	50 96       	adiw	r26, 0x10	; 16
    150e:	6d 91       	ld	r22, X+
    1510:	7d 91       	ld	r23, X+
    1512:	8d 91       	ld	r24, X+
    1514:	9c 91       	ld	r25, X
    1516:	53 97       	sbiw	r26, 0x13	; 19
    1518:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	5f e3       	ldi	r21, 0x3F	; 63
    1524:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1528:	a5 96       	adiw	r28, 0x25	; 37
    152a:	6c af       	std	Y+60, r22	; 0x3c
    152c:	7d af       	std	Y+61, r23	; 0x3d
    152e:	8e af       	std	Y+62, r24	; 0x3e
    1530:	9f af       	std	Y+63, r25	; 0x3f
    1532:	a5 97       	sbiw	r28, 0x25	; 37
    1534:	1e c0       	rjmp	.+60     	; 0x1572 <localization+0x78c>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	2c 0f       	add	r18, r28
    1544:	3d 1f       	adc	r19, r29
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	a2 81       	ldd	r26, Z+2	; 0x02
    1550:	b3 81       	ldd	r27, Z+3	; 0x03
    1552:	a9 96       	adiw	r28, 0x29	; 41
    1554:	8c af       	std	Y+60, r24	; 0x3c
    1556:	9d af       	std	Y+61, r25	; 0x3d
    1558:	ae af       	std	Y+62, r26	; 0x3e
    155a:	bf af       	std	Y+63, r27	; 0x3f
    155c:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = y[coin_ind];
    155e:	80 89       	ldd	r24, Z+16	; 0x10
    1560:	91 89       	ldd	r25, Z+17	; 0x11
    1562:	a2 89       	ldd	r26, Z+18	; 0x12
    1564:	b3 89       	ldd	r27, Z+19	; 0x13
    1566:	a5 96       	adiw	r28, 0x25	; 37
    1568:	8c af       	std	Y+60, r24	; 0x3c
    156a:	9d af       	std	Y+61, r25	; 0x3d
    156c:	ae af       	std	Y+62, r26	; 0x3e
    156e:	bf af       	std	Y+63, r27	; 0x3f
    1570:	a5 97       	sbiw	r28, 0x25	; 37
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    1572:	ee 0c       	add	r14, r14
    1574:	ff 1c       	adc	r15, r15
    1576:	ee 0c       	add	r14, r14
    1578:	ff 1c       	adc	r15, r15
    157a:	a1 e0       	ldi	r26, 0x01	; 1
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ac 0f       	add	r26, r28
    1580:	bd 1f       	adc	r27, r29
    1582:	ea 0e       	add	r14, r26
    1584:	fb 1e       	adc	r15, r27
    1586:	a9 96       	adiw	r28, 0x29	; 41
    1588:	2c ad       	ldd	r18, Y+60	; 0x3c
    158a:	3d ad       	ldd	r19, Y+61	; 0x3d
    158c:	4e ad       	ldd	r20, Y+62	; 0x3e
    158e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1590:	a9 97       	sbiw	r28, 0x29	; 41
    1592:	f7 01       	movw	r30, r14
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    15a0:	4b 01       	movw	r8, r22
    15a2:	5c 01       	movw	r10, r24
    15a4:	a5 96       	adiw	r28, 0x25	; 37
    15a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    15a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    15aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    15ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    15ae:	a5 97       	sbiw	r28, 0x25	; 37
    15b0:	d7 01       	movw	r26, r14
    15b2:	50 96       	adiw	r26, 0x10	; 16
    15b4:	6d 91       	ld	r22, X+
    15b6:	7d 91       	ld	r23, X+
    15b8:	8d 91       	ld	r24, X+
    15ba:	9c 91       	ld	r25, X
    15bc:	53 97       	sbiw	r26, 0x13	; 19
    15be:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    15c2:	6b 01       	movw	r12, r22
    15c4:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    15c6:	a5 01       	movw	r20, r10
    15c8:	94 01       	movw	r18, r8
    15ca:	c5 01       	movw	r24, r10
    15cc:	b4 01       	movw	r22, r8
    15ce:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    15d2:	2b 01       	movw	r4, r22
    15d4:	3c 01       	movw	r6, r24
    15d6:	a7 01       	movw	r20, r14
    15d8:	96 01       	movw	r18, r12
    15da:	c7 01       	movw	r24, r14
    15dc:	b6 01       	movw	r22, r12
    15de:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    15e2:	9b 01       	movw	r18, r22
    15e4:	ac 01       	movw	r20, r24
    15e6:	c3 01       	movw	r24, r6
    15e8:	b2 01       	movw	r22, r4
    15ea:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
    15ee:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <sqrt>
    15f2:	2b 01       	movw	r4, r22
    15f4:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	c5 01       	movw	r24, r10
    15fc:	b4 01       	movw	r22, r8
    15fe:	0e 94 06 14 	call	0x280c	; 0x280c <__divsf3>
    1602:	4b 01       	movw	r8, r22
    1604:	5c 01       	movw	r10, r24
    1606:	6d 96       	adiw	r28, 0x1d	; 29
    1608:	6c af       	std	Y+60, r22	; 0x3c
    160a:	7d af       	std	Y+61, r23	; 0x3d
    160c:	8e af       	std	Y+62, r24	; 0x3e
    160e:	9f af       	std	Y+63, r25	; 0x3f
    1610:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    1612:	a3 01       	movw	r20, r6
    1614:	92 01       	movw	r18, r4
    1616:	c7 01       	movw	r24, r14
    1618:	b6 01       	movw	r22, r12
    161a:	0e 94 06 14 	call	0x280c	; 0x280c <__divsf3>
    161e:	6b 01       	movw	r12, r22
    1620:	7c 01       	movw	r14, r24
    1622:	a1 96       	adiw	r28, 0x21	; 33
    1624:	6c af       	std	Y+60, r22	; 0x3c
    1626:	7d af       	std	Y+61, r23	; 0x3d
    1628:	8e af       	std	Y+62, r24	; 0x3e
    162a:	9f af       	std	Y+63, r25	; 0x3f
    162c:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    162e:	65 96       	adiw	r28, 0x15	; 21
    1630:	2c ad       	ldd	r18, Y+60	; 0x3c
    1632:	3d ad       	ldd	r19, Y+61	; 0x3d
    1634:	4e ad       	ldd	r20, Y+62	; 0x3e
    1636:	5f ad       	ldd	r21, Y+63	; 0x3f
    1638:	65 97       	sbiw	r28, 0x15	; 21
    163a:	c5 01       	movw	r24, r10
    163c:	b4 01       	movw	r22, r8
    163e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1642:	4b 01       	movw	r8, r22
    1644:	5c 01       	movw	r10, r24
    1646:	69 96       	adiw	r28, 0x19	; 25
    1648:	2c ad       	ldd	r18, Y+60	; 0x3c
    164a:	3d ad       	ldd	r19, Y+61	; 0x3d
    164c:	4e ad       	ldd	r20, Y+62	; 0x3e
    164e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1650:	69 97       	sbiw	r28, 0x19	; 25
    1652:	c7 01       	movw	r24, r14
    1654:	b6 01       	movw	r22, r12
    1656:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	c5 01       	movw	r24, r10
    1660:	b4 01       	movw	r22, r8
    1662:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
    1666:	4b 01       	movw	r8, r22
    1668:	5c 01       	movw	r10, r24
		float sintheta = sqrt(1 - costheta*costheta);
    166a:	9b 01       	movw	r18, r22
    166c:	ac 01       	movw	r20, r24
    166e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	80 e8       	ldi	r24, 0x80	; 128
    167c:	9f e3       	ldi	r25, 0x3F	; 63
    167e:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    1682:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <sqrt>
    1686:	2b 01       	movw	r4, r22
    1688:	3c 01       	movw	r6, r24
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    168a:	fe 01       	movw	r30, r28
    168c:	ef 5a       	subi	r30, 0xAF	; 175
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	7f 01       	movw	r14, r30
    1692:	8e 01       	movw	r16, r28
    1694:	07 5a       	subi	r16, 0xA7	; 167
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	9b 01       	movw	r18, r22
    169a:	ac 01       	movw	r20, r24
    169c:	c5 01       	movw	r24, r10
    169e:	b4 01       	movw	r22, r8
    16a0:	0e 94 4b 03 	call	0x696	; 0x696 <find_sign>
    16a4:	1c 01       	movw	r2, r24
		
		
		if(if_pos_sin == 1){
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <localization+0x8c8>
    16ac:	98 c0       	rjmp	.+304    	; 0x17de <localization+0x9f8>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    16ae:	20 91 1e 01 	lds	r18, 0x011E
    16b2:	30 91 1f 01 	lds	r19, 0x011F
    16b6:	40 91 20 01 	lds	r20, 0x0120
    16ba:	50 91 21 01 	lds	r21, 0x0121
    16be:	a9 96       	adiw	r28, 0x29	; 41
    16c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    16c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    16c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    16c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    16c8:	a9 97       	sbiw	r28, 0x29	; 41
    16ca:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    16ce:	a9 96       	adiw	r28, 0x29	; 41
    16d0:	6c af       	std	Y+60, r22	; 0x3c
    16d2:	7d af       	std	Y+61, r23	; 0x3d
    16d4:	8e af       	std	Y+62, r24	; 0x3e
    16d6:	9f af       	std	Y+63, r25	; 0x3f
    16d8:	a9 97       	sbiw	r28, 0x29	; 41
    16da:	20 91 22 01 	lds	r18, 0x0122
    16de:	30 91 23 01 	lds	r19, 0x0123
    16e2:	40 91 24 01 	lds	r20, 0x0124
    16e6:	50 91 25 01 	lds	r21, 0x0125
    16ea:	a5 96       	adiw	r28, 0x25	; 37
    16ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    16ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    16f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    16f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    16f4:	a5 97       	sbiw	r28, 0x25	; 37
    16f6:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    16fa:	6b 01       	movw	r12, r22
    16fc:	7c 01       	movw	r14, r24
    16fe:	a5 01       	movw	r20, r10
    1700:	94 01       	movw	r18, r8
    1702:	a9 96       	adiw	r28, 0x29	; 41
    1704:	6c ad       	ldd	r22, Y+60	; 0x3c
    1706:	7d ad       	ldd	r23, Y+61	; 0x3d
    1708:	8e ad       	ldd	r24, Y+62	; 0x3e
    170a:	9f ad       	ldd	r25, Y+63	; 0x3f
    170c:	a9 97       	sbiw	r28, 0x29	; 41
    170e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1712:	9b 01       	movw	r18, r22
    1714:	ac 01       	movw	r20, r24
    1716:	e3 96       	adiw	r28, 0x33	; 51
    1718:	6c ad       	ldd	r22, Y+60	; 0x3c
    171a:	7d ad       	ldd	r23, Y+61	; 0x3d
    171c:	8e ad       	ldd	r24, Y+62	; 0x3e
    171e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1720:	e3 97       	sbiw	r28, 0x33	; 51
    1722:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    1726:	a5 96       	adiw	r28, 0x25	; 37
    1728:	6c af       	std	Y+60, r22	; 0x3c
    172a:	7d af       	std	Y+61, r23	; 0x3d
    172c:	8e af       	std	Y+62, r24	; 0x3e
    172e:	9f af       	std	Y+63, r25	; 0x3f
    1730:	a5 97       	sbiw	r28, 0x25	; 37
    1732:	a3 01       	movw	r20, r6
    1734:	92 01       	movw	r18, r4
    1736:	c7 01       	movw	r24, r14
    1738:	b6 01       	movw	r22, r12
    173a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	a5 96       	adiw	r28, 0x25	; 37
    1744:	6c ad       	ldd	r22, Y+60	; 0x3c
    1746:	7d ad       	ldd	r23, Y+61	; 0x3d
    1748:	8e ad       	ldd	r24, Y+62	; 0x3e
    174a:	9f ad       	ldd	r25, Y+63	; 0x3f
    174c:	a5 97       	sbiw	r28, 0x25	; 37
    174e:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
    1752:	60 93 56 01 	sts	0x0156, r22
    1756:	70 93 57 01 	sts	0x0157, r23
    175a:	80 93 58 01 	sts	0x0158, r24
    175e:	90 93 59 01 	sts	0x0159, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    1762:	a7 01       	movw	r20, r14
    1764:	96 01       	movw	r18, r12
    1766:	c5 01       	movw	r24, r10
    1768:	b4 01       	movw	r22, r8
    176a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	af 96       	adiw	r28, 0x2f	; 47
    1774:	6c ad       	ldd	r22, Y+60	; 0x3c
    1776:	7d ad       	ldd	r23, Y+61	; 0x3d
    1778:	8e ad       	ldd	r24, Y+62	; 0x3e
    177a:	9f ad       	ldd	r25, Y+63	; 0x3f
    177c:	af 97       	sbiw	r28, 0x2f	; 47
    177e:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    1782:	6b 01       	movw	r12, r22
    1784:	7c 01       	movw	r14, r24
    1786:	a9 96       	adiw	r28, 0x29	; 41
    1788:	2c ad       	ldd	r18, Y+60	; 0x3c
    178a:	3d ad       	ldd	r19, Y+61	; 0x3d
    178c:	4e ad       	ldd	r20, Y+62	; 0x3e
    178e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1790:	a9 97       	sbiw	r28, 0x29	; 41
    1792:	c3 01       	movw	r24, r6
    1794:	b2 01       	movw	r22, r4
    1796:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    179a:	9b 01       	movw	r18, r22
    179c:	ac 01       	movw	r20, r24
    179e:	c7 01       	movw	r24, r14
    17a0:	b6 01       	movw	r22, r12
    17a2:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    17a6:	60 93 5a 01 	sts	0x015A, r22
    17aa:	70 93 5b 01 	sts	0x015B, r23
    17ae:	80 93 5c 01 	sts	0x015C, r24
    17b2:	90 93 5d 01 	sts	0x015D, r25
			ypdir[0] = -sintheta;
    17b6:	d3 01       	movw	r26, r6
    17b8:	c2 01       	movw	r24, r4
    17ba:	b0 58       	subi	r27, 0x80	; 128
    17bc:	80 93 4e 01 	sts	0x014E, r24
    17c0:	90 93 4f 01 	sts	0x014F, r25
    17c4:	a0 93 50 01 	sts	0x0150, r26
    17c8:	b0 93 51 01 	sts	0x0151, r27
			ypdir[1] = costheta;
    17cc:	80 92 52 01 	sts	0x0152, r8
    17d0:	90 92 53 01 	sts	0x0153, r9
    17d4:	a0 92 54 01 	sts	0x0154, r10
    17d8:	b0 92 55 01 	sts	0x0155, r11
    17dc:	9c c0       	rjmp	.+312    	; 0x1916 <localization+0xb30>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    17de:	20 91 1e 01 	lds	r18, 0x011E
    17e2:	30 91 1f 01 	lds	r19, 0x011F
    17e6:	40 91 20 01 	lds	r20, 0x0120
    17ea:	50 91 21 01 	lds	r21, 0x0121
    17ee:	a9 96       	adiw	r28, 0x29	; 41
    17f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    17f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    17f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    17f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    17f8:	a9 97       	sbiw	r28, 0x29	; 41
    17fa:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    17fe:	6b 01       	movw	r12, r22
    1800:	7c 01       	movw	r14, r24
    1802:	20 91 22 01 	lds	r18, 0x0122
    1806:	30 91 23 01 	lds	r19, 0x0123
    180a:	40 91 24 01 	lds	r20, 0x0124
    180e:	50 91 25 01 	lds	r21, 0x0125
    1812:	a5 96       	adiw	r28, 0x25	; 37
    1814:	6c ad       	ldd	r22, Y+60	; 0x3c
    1816:	7d ad       	ldd	r23, Y+61	; 0x3d
    1818:	8e ad       	ldd	r24, Y+62	; 0x3e
    181a:	9f ad       	ldd	r25, Y+63	; 0x3f
    181c:	a5 97       	sbiw	r28, 0x25	; 37
    181e:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    1822:	a5 96       	adiw	r28, 0x25	; 37
    1824:	6c af       	std	Y+60, r22	; 0x3c
    1826:	7d af       	std	Y+61, r23	; 0x3d
    1828:	8e af       	std	Y+62, r24	; 0x3e
    182a:	9f af       	std	Y+63, r25	; 0x3f
    182c:	a5 97       	sbiw	r28, 0x25	; 37
    182e:	a5 01       	movw	r20, r10
    1830:	94 01       	movw	r18, r8
    1832:	c7 01       	movw	r24, r14
    1834:	b6 01       	movw	r22, r12
    1836:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    183a:	9b 01       	movw	r18, r22
    183c:	ac 01       	movw	r20, r24
    183e:	e3 96       	adiw	r28, 0x33	; 51
    1840:	6c ad       	ldd	r22, Y+60	; 0x3c
    1842:	7d ad       	ldd	r23, Y+61	; 0x3d
    1844:	8e ad       	ldd	r24, Y+62	; 0x3e
    1846:	9f ad       	ldd	r25, Y+63	; 0x3f
    1848:	e3 97       	sbiw	r28, 0x33	; 51
    184a:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    184e:	a9 96       	adiw	r28, 0x29	; 41
    1850:	6c af       	std	Y+60, r22	; 0x3c
    1852:	7d af       	std	Y+61, r23	; 0x3d
    1854:	8e af       	std	Y+62, r24	; 0x3e
    1856:	9f af       	std	Y+63, r25	; 0x3f
    1858:	a9 97       	sbiw	r28, 0x29	; 41
    185a:	a3 01       	movw	r20, r6
    185c:	92 01       	movw	r18, r4
    185e:	a5 96       	adiw	r28, 0x25	; 37
    1860:	6c ad       	ldd	r22, Y+60	; 0x3c
    1862:	7d ad       	ldd	r23, Y+61	; 0x3d
    1864:	8e ad       	ldd	r24, Y+62	; 0x3e
    1866:	9f ad       	ldd	r25, Y+63	; 0x3f
    1868:	a5 97       	sbiw	r28, 0x25	; 37
    186a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	a9 96       	adiw	r28, 0x29	; 41
    1874:	6c ad       	ldd	r22, Y+60	; 0x3c
    1876:	7d ad       	ldd	r23, Y+61	; 0x3d
    1878:	8e ad       	ldd	r24, Y+62	; 0x3e
    187a:	9f ad       	ldd	r25, Y+63	; 0x3f
    187c:	a9 97       	sbiw	r28, 0x29	; 41
    187e:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    1882:	60 93 56 01 	sts	0x0156, r22
    1886:	70 93 57 01 	sts	0x0157, r23
    188a:	80 93 58 01 	sts	0x0158, r24
    188e:	90 93 59 01 	sts	0x0159, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    1892:	a5 96       	adiw	r28, 0x25	; 37
    1894:	2c ad       	ldd	r18, Y+60	; 0x3c
    1896:	3d ad       	ldd	r19, Y+61	; 0x3d
    1898:	4e ad       	ldd	r20, Y+62	; 0x3e
    189a:	5f ad       	ldd	r21, Y+63	; 0x3f
    189c:	a5 97       	sbiw	r28, 0x25	; 37
    189e:	c5 01       	movw	r24, r10
    18a0:	b4 01       	movw	r22, r8
    18a2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    18a6:	9b 01       	movw	r18, r22
    18a8:	ac 01       	movw	r20, r24
    18aa:	af 96       	adiw	r28, 0x2f	; 47
    18ac:	6c ad       	ldd	r22, Y+60	; 0x3c
    18ae:	7d ad       	ldd	r23, Y+61	; 0x3d
    18b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    18b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    18b4:	af 97       	sbiw	r28, 0x2f	; 47
    18b6:	0e 94 9d 13 	call	0x273a	; 0x273a <__subsf3>
    18ba:	a5 96       	adiw	r28, 0x25	; 37
    18bc:	6c af       	std	Y+60, r22	; 0x3c
    18be:	7d af       	std	Y+61, r23	; 0x3d
    18c0:	8e af       	std	Y+62, r24	; 0x3e
    18c2:	9f af       	std	Y+63, r25	; 0x3f
    18c4:	a5 97       	sbiw	r28, 0x25	; 37
    18c6:	a7 01       	movw	r20, r14
    18c8:	96 01       	movw	r18, r12
    18ca:	c3 01       	movw	r24, r6
    18cc:	b2 01       	movw	r22, r4
    18ce:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    18d2:	9b 01       	movw	r18, r22
    18d4:	ac 01       	movw	r20, r24
    18d6:	a5 96       	adiw	r28, 0x25	; 37
    18d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    18da:	7d ad       	ldd	r23, Y+61	; 0x3d
    18dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    18de:	9f ad       	ldd	r25, Y+63	; 0x3f
    18e0:	a5 97       	sbiw	r28, 0x25	; 37
    18e2:	0e 94 9e 13 	call	0x273c	; 0x273c <__addsf3>
    18e6:	60 93 5a 01 	sts	0x015A, r22
    18ea:	70 93 5b 01 	sts	0x015B, r23
    18ee:	80 93 5c 01 	sts	0x015C, r24
    18f2:	90 93 5d 01 	sts	0x015D, r25
			ypdir[0] = sintheta;
    18f6:	40 92 4e 01 	sts	0x014E, r4
    18fa:	50 92 4f 01 	sts	0x014F, r5
    18fe:	60 92 50 01 	sts	0x0150, r6
    1902:	70 92 51 01 	sts	0x0151, r7
			ypdir[1] = costheta;
    1906:	80 92 52 01 	sts	0x0152, r8
    190a:	90 92 53 01 	sts	0x0153, r9
    190e:	a0 92 54 01 	sts	0x0154, r10
    1912:	b0 92 55 01 	sts	0x0155, r11
		}
		c_wii_last[0] = c_wii[0];
    1916:	60 91 56 01 	lds	r22, 0x0156
    191a:	70 91 57 01 	lds	r23, 0x0157
    191e:	80 91 58 01 	lds	r24, 0x0158
    1922:	90 91 59 01 	lds	r25, 0x0159
    1926:	60 93 46 01 	sts	0x0146, r22
    192a:	70 93 47 01 	sts	0x0147, r23
    192e:	80 93 48 01 	sts	0x0148, r24
    1932:	90 93 49 01 	sts	0x0149, r25
		c_wii_last[1] = c_wii[1];
    1936:	20 91 5a 01 	lds	r18, 0x015A
    193a:	30 91 5b 01 	lds	r19, 0x015B
    193e:	40 91 5c 01 	lds	r20, 0x015C
    1942:	50 91 5d 01 	lds	r21, 0x015D
    1946:	20 93 4a 01 	sts	0x014A, r18
    194a:	30 93 4b 01 	sts	0x014B, r19
    194e:	40 93 4c 01 	sts	0x014C, r20
    1952:	50 93 4d 01 	sts	0x014D, r21
		ypdir_last[0] = ypdir[0];
    1956:	c0 90 4e 01 	lds	r12, 0x014E
    195a:	d0 90 4f 01 	lds	r13, 0x014F
    195e:	e0 90 50 01 	lds	r14, 0x0150
    1962:	f0 90 51 01 	lds	r15, 0x0151
    1966:	c0 92 3e 01 	sts	0x013E, r12
    196a:	d0 92 3f 01 	sts	0x013F, r13
    196e:	e0 92 40 01 	sts	0x0140, r14
    1972:	f0 92 41 01 	sts	0x0141, r15
		ypdir_last[1] = ypdir[1];
    1976:	c0 90 52 01 	lds	r12, 0x0152
    197a:	d0 90 53 01 	lds	r13, 0x0153
    197e:	e0 90 54 01 	lds	r14, 0x0154
    1982:	f0 90 55 01 	lds	r15, 0x0155
    1986:	c0 92 42 01 	sts	0x0142, r12
    198a:	d0 92 43 01 	sts	0x0143, r13
    198e:	e0 92 44 01 	sts	0x0144, r14
    1992:	f0 92 45 01 	sts	0x0145, r15
		
		if (state == 3)
    1996:	e0 91 9a 01 	lds	r30, 0x019A
    199a:	f0 91 9b 01 	lds	r31, 0x019B
    199e:	33 97       	sbiw	r30, 0x03	; 3
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <localization+0xbbe>
    19a2:	79 c0       	rjmp	.+242    	; 0x1a96 <localization+0xcb0>
		{
			int if_reach = find_if_reach(c_wii[0], c_wii[1]);
    19a4:	0e 94 95 06 	call	0xd2a	; 0xd2a <find_if_reach>
			if (!if_reach){
    19a8:	89 2b       	or	r24, r25
    19aa:	a9 f4       	brne	.+42     	; 0x19d6 <localization+0xbf0>
				cal_angle(if_pos_sin, sintheta, costheta);
    19ac:	95 01       	movw	r18, r10
    19ae:	84 01       	movw	r16, r8
    19b0:	b3 01       	movw	r22, r6
    19b2:	a2 01       	movw	r20, r4
    19b4:	c1 01       	movw	r24, r2
    19b6:	0e 94 2f 04 	call	0x85e	; 0x85e <cal_angle>
				PID_alpha(Kp_loc, Ki_loc, Kd_loc);
    19ba:	e1 2c       	mov	r14, r1
    19bc:	f1 2c       	mov	r15, r1
    19be:	08 ec       	ldi	r16, 0xC8	; 200
    19c0:	12 e4       	ldi	r17, 0x42	; 66
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	86 e1       	ldi	r24, 0x16	; 22
    19ce:	93 e4       	ldi	r25, 0x43	; 67
    19d0:	0e 94 4a 05 	call	0xa94	; 0xa94 <PID_alpha>
    19d4:	60 c0       	rjmp	.+192    	; 0x1a96 <localization+0xcb0>
			}
			else{ // reach goal, stop
				OCR1B = 10;
    19d6:	8a e0       	ldi	r24, 0x0A	; 10
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	90 93 8b 00 	sts	0x008B, r25
    19de:	80 93 8a 00 	sts	0x008A, r24
				OCR1C = 10;
    19e2:	90 93 8d 00 	sts	0x008D, r25
    19e6:	80 93 8c 00 	sts	0x008C, r24
    19ea:	55 c0       	rjmp	.+170    	; 0x1a96 <localization+0xcb0>
			}
		}
	}
	else{
		c_wii[0] = c_wii_last[0];
    19ec:	80 91 46 01 	lds	r24, 0x0146
    19f0:	90 91 47 01 	lds	r25, 0x0147
    19f4:	a0 91 48 01 	lds	r26, 0x0148
    19f8:	b0 91 49 01 	lds	r27, 0x0149
    19fc:	80 93 56 01 	sts	0x0156, r24
    1a00:	90 93 57 01 	sts	0x0157, r25
    1a04:	a0 93 58 01 	sts	0x0158, r26
    1a08:	b0 93 59 01 	sts	0x0159, r27
		c_wii[1] = c_wii_last[1];
    1a0c:	80 91 4a 01 	lds	r24, 0x014A
    1a10:	90 91 4b 01 	lds	r25, 0x014B
    1a14:	a0 91 4c 01 	lds	r26, 0x014C
    1a18:	b0 91 4d 01 	lds	r27, 0x014D
    1a1c:	80 93 5a 01 	sts	0x015A, r24
    1a20:	90 93 5b 01 	sts	0x015B, r25
    1a24:	a0 93 5c 01 	sts	0x015C, r26
    1a28:	b0 93 5d 01 	sts	0x015D, r27
		ypdir[0] = ypdir_last[0];
    1a2c:	80 91 3e 01 	lds	r24, 0x013E
    1a30:	90 91 3f 01 	lds	r25, 0x013F
    1a34:	a0 91 40 01 	lds	r26, 0x0140
    1a38:	b0 91 41 01 	lds	r27, 0x0141
    1a3c:	80 93 4e 01 	sts	0x014E, r24
    1a40:	90 93 4f 01 	sts	0x014F, r25
    1a44:	a0 93 50 01 	sts	0x0150, r26
    1a48:	b0 93 51 01 	sts	0x0151, r27
		ypdir[1] = ypdir_last[1];
    1a4c:	80 91 42 01 	lds	r24, 0x0142
    1a50:	90 91 43 01 	lds	r25, 0x0143
    1a54:	a0 91 44 01 	lds	r26, 0x0144
    1a58:	b0 91 45 01 	lds	r27, 0x0145
    1a5c:	80 93 52 01 	sts	0x0152, r24
    1a60:	90 93 53 01 	sts	0x0153, r25
    1a64:	a0 93 54 01 	sts	0x0154, r26
    1a68:	b0 93 55 01 	sts	0x0155, r27
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <localization+0xcb0>
    1a6e:	e9 96       	adiw	r28, 0x39	; 57
    1a70:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a72:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a74:	e9 97       	sbiw	r28, 0x39	; 57
    1a76:	2c 5f       	subi	r18, 0xFC	; 252
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	e9 96       	adiw	r28, 0x39	; 57
    1a7c:	3f af       	std	Y+63, r19	; 0x3f
    1a7e:	2e af       	std	Y+62, r18	; 0x3e
    1a80:	e9 97       	sbiw	r28, 0x39	; 57
    1a82:	e1 96       	adiw	r28, 0x31	; 49
    1a84:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a86:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a88:	e1 97       	sbiw	r28, 0x31	; 49
    1a8a:	04 96       	adiw	r24, 0x04	; 4
    1a8c:	e1 96       	adiw	r28, 0x31	; 49
    1a8e:	9f af       	std	Y+63, r25	; 0x3f
    1a90:	8e af       	std	Y+62, r24	; 0x3e
    1a92:	e1 97       	sbiw	r28, 0x31	; 49
    1a94:	55 cb       	rjmp	.-2390   	; 0x1140 <localization+0x35a>
	}
}
    1a96:	c4 58       	subi	r28, 0x84	; 132
    1a98:	df 4f       	sbci	r29, 0xFF	; 255
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	bf 90       	pop	r11
    1ab6:	af 90       	pop	r10
    1ab8:	9f 90       	pop	r9
    1aba:	8f 90       	pop	r8
    1abc:	7f 90       	pop	r7
    1abe:	6f 90       	pop	r6
    1ac0:	5f 90       	pop	r5
    1ac2:	4f 90       	pop	r4
    1ac4:	3f 90       	pop	r3
    1ac6:	2f 90       	pop	r2
    1ac8:	08 95       	ret

00001aca <main>:
void PID_alpha(float Kp, float Ki, float Kd);
int find_if_reach(float x, float y);

int main(void)
{	
	m_clockdivide(0);
    1aca:	e1 e6       	ldi	r30, 0x61	; 97
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 e8       	ldi	r24, 0x80	; 128
    1ad0:	80 83       	st	Z, r24
    1ad2:	10 82       	st	Z, r1
	
	m_usb_init();
    1ad4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <m_usb_init>
	
	m_green(ON);
    1ad8:	6a 9a       	sbi	0x0d, 2	; 13
    1ada:	72 98       	cbi	0x0e, 2	; 14
	while(!m_wii_open());
    1adc:	0e 94 cf 11 	call	0x239e	; 0x239e <m_wii_open>
    1ae0:	88 23       	and	r24, r24
    1ae2:	e1 f3       	breq	.-8      	; 0x1adc <main+0x12>
	m_green(OFF);
    1ae4:	6a 9a       	sbi	0x0d, 2	; 13
    1ae6:	72 9a       	sbi	0x0e, 2	; 14

	m_bus_init(); // enable mBUS
    1ae8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    1aec:	4a e0       	ldi	r20, 0x0A	; 10
    1aee:	6c e0       	ldi	r22, 0x0C	; 12
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <m_rf_open>
	
	init_timer();
    1af6:	0e 94 0c 02 	call	0x418	; 0x418 <init_timer>
	init_ADC();
    1afa:	0e 94 48 02 	call	0x490	; 0x490 <init_ADC>
	
	// clear(DDRC, 6); // Read a switch value to decide which team
	// set(DDRF, 4);
	// ser(DDRF, 5);
	state = 0;
    1afe:	10 92 9b 01 	sts	0x019B, r1
    1b02:	10 92 9a 01 	sts	0x019A, r1
				clear(TCCR1B, CS10);
				break;
			case 1:		// comm test, flash a LED
				//toggle(PORTF, 4);	// Toggle F4
				//toggle(PORTF, 5);	// Toggle F5
				m_red(TOGGLE);	// Toggle red led for qualify
    1b06:	68 94       	set
    1b08:	77 24       	eor	r7, r7
    1b0a:	76 f8       	bld	r7, 6
				//findPuck(); //comment out for qualify test
				//localization();
				//if (Pho[4] + Pho[5] > 800){
				//	state = 3;
				//}
				state = 3;
    1b0c:	0f 2e       	mov	r0, r31
    1b0e:	f3 e0       	ldi	r31, 0x03	; 3
    1b10:	8f 2e       	mov	r8, r31
    1b12:	91 2c       	mov	r9, r1
    1b14:	f0 2d       	mov	r31, r0
				break;
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    1b16:	68 94       	set
    1b18:	66 24       	eor	r6, r6
    1b1a:	62 f8       	bld	r6, 2
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// Turn off timer
				clear(TCCR1B, CS12);
    1b1c:	c1 e8       	ldi	r28, 0x81	; 129
    1b1e:	d0 e0       	ldi	r29, 0x00	; 0
				*/
				break;
		}
		
		m_usb_tx_string("Position x:");
		m_usb_tx_int(c_wii[0]);
    1b20:	0f 2e       	mov	r0, r31
    1b22:	f6 e5       	ldi	r31, 0x56	; 86
    1b24:	af 2e       	mov	r10, r31
    1b26:	f1 e0       	ldi	r31, 0x01	; 1
    1b28:	bf 2e       	mov	r11, r31
    1b2a:	f0 2d       	mov	r31, r0
		m_usb_tx_string("		y:");
		m_usb_tx_int(c_wii[1]);
    1b2c:	0f 2e       	mov	r0, r31
    1b2e:	fa e5       	ldi	r31, 0x5A	; 90
    1b30:	cf 2e       	mov	r12, r31
    1b32:	f1 e0       	ldi	r31, 0x01	; 1
    1b34:	df 2e       	mov	r13, r31
    1b36:	f0 2d       	mov	r31, r0
		m_usb_tx_string("\n");
		
		m_usb_tx_string("Direction vx: 0.");
		m_usb_tx_int(ypdir[0]*1000);
    1b38:	0f 2e       	mov	r0, r31
    1b3a:	fe e4       	ldi	r31, 0x4E	; 78
    1b3c:	ef 2e       	mov	r14, r31
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	ff 2e       	mov	r15, r31
    1b42:	f0 2d       	mov	r31, r0
		m_usb_tx_string("	vy: 0.");
		m_usb_tx_int(ypdir[1]*1000);
    1b44:	02 e5       	ldi	r16, 0x52	; 82
    1b46:	11 e0       	ldi	r17, 0x01	; 1
			clear(DDRF, 5);		
			goal[1] = -300;  // left gate
			goal[0] = 0;
		}
		*/
		m_usb_tx_string("state: ");
    1b48:	8b e9       	ldi	r24, 0x9B	; 155
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		m_usb_tx_int(state);
    1b50:	80 91 9a 01 	lds	r24, 0x019A
    1b54:	90 91 9b 01 	lds	r25, 0x019B
    1b58:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    1b5c:	89 e9       	ldi	r24, 0x99	; 153
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		switch(state){
    1b64:	80 91 9a 01 	lds	r24, 0x019A
    1b68:	90 91 9b 01 	lds	r25, 0x019B
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	a1 f0       	breq	.+40     	; 0x1b9a <main+0xd0>
    1b72:	1c f4       	brge	.+6      	; 0x1b7a <main+0xb0>
    1b74:	89 2b       	or	r24, r25
    1b76:	39 f0       	breq	.+14     	; 0x1b86 <main+0xbc>
    1b78:	31 c0       	rjmp	.+98     	; 0x1bdc <main+0x112>
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	d9 f0       	breq	.+54     	; 0x1bb6 <main+0xec>
    1b80:	03 97       	sbiw	r24, 0x03	; 3
    1b82:	11 f1       	breq	.+68     	; 0x1bc8 <main+0xfe>
    1b84:	2b c0       	rjmp	.+86     	; 0x1bdc <main+0x112>
			case 0:
				// Turn off timer
				clear(TCCR1B, CS12);
    1b86:	88 81       	ld	r24, Y
    1b88:	8b 7f       	andi	r24, 0xFB	; 251
    1b8a:	88 83       	st	Y, r24
				clear(TCCR1B, CS11);
    1b8c:	88 81       	ld	r24, Y
    1b8e:	8d 7f       	andi	r24, 0xFD	; 253
    1b90:	88 83       	st	Y, r24
				clear(TCCR1B, CS10);
    1b92:	88 81       	ld	r24, Y
    1b94:	8e 7f       	andi	r24, 0xFE	; 254
    1b96:	88 83       	st	Y, r24
				break;
    1b98:	21 c0       	rjmp	.+66     	; 0x1bdc <main+0x112>
			case 1:		// comm test, flash a LED
				//toggle(PORTF, 4);	// Toggle F4
				//toggle(PORTF, 5);	// Toggle F5
				m_red(TOGGLE);	// Toggle red led for qualify
    1b9a:	6e 9a       	sbi	0x0d, 6	; 13
    1b9c:	8e b1       	in	r24, 0x0e	; 14
    1b9e:	87 25       	eor	r24, r7
    1ba0:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ba2:	2f e3       	ldi	r18, 0x3F	; 63
    1ba4:	8d e0       	ldi	r24, 0x0D	; 13
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	21 50       	subi	r18, 0x01	; 1
    1baa:	80 40       	sbci	r24, 0x00	; 0
    1bac:	90 40       	sbci	r25, 0x00	; 0
    1bae:	e1 f7       	brne	.-8      	; 0x1ba8 <main+0xde>
    1bb0:	00 c0       	rjmp	.+0      	; 0x1bb2 <main+0xe8>
    1bb2:	00 00       	nop
    1bb4:	13 c0       	rjmp	.+38     	; 0x1bdc <main+0x112>
				m_wait(1000);	// wait
				break;
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    1bb6:	6e 9a       	sbi	0x0d, 6	; 13
    1bb8:	8e b1       	in	r24, 0x0e	; 14
    1bba:	87 25       	eor	r24, r7
    1bbc:	8e b9       	out	0x0e, r24	; 14
				//findPuck(); //comment out for qualify test
				//localization();
				//if (Pho[4] + Pho[5] > 800){
				//	state = 3;
				//}
				state = 3;
    1bbe:	90 92 9b 01 	sts	0x019B, r9
    1bc2:	80 92 9a 01 	sts	0x019A, r8
				break;
    1bc6:	0a c0       	rjmp	.+20     	; 0x1bdc <main+0x112>
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    1bc8:	6a 9a       	sbi	0x0d, 2	; 13
    1bca:	8e b1       	in	r24, 0x0e	; 14
    1bcc:	86 25       	eor	r24, r6
    1bce:	8e b9       	out	0x0e, r24	; 14
				m_wii_read(&blobs[0]);
    1bd0:	8e e5       	ldi	r24, 0x5E	; 94
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <m_wii_read>
				localization();
    1bd8:	0e 94 f3 06 	call	0xde6	; 0xde6 <localization>
				}
				*/
				break;
		}
		
		m_usb_tx_string("Position x:");
    1bdc:	8d e8       	ldi	r24, 0x8D	; 141
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		m_usb_tx_int(c_wii[0]);
    1be4:	f5 01       	movw	r30, r10
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
		m_usb_tx_string("		y:");
    1bf8:	88 e8       	ldi	r24, 0x88	; 136
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		m_usb_tx_int(c_wii[1]);
    1c00:	f6 01       	movw	r30, r12
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
    1c0e:	cb 01       	movw	r24, r22
    1c10:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    1c14:	86 e8       	ldi	r24, 0x86	; 134
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		
		m_usb_tx_string("Direction vx: 0.");
    1c1c:	85 e7       	ldi	r24, 0x75	; 117
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		m_usb_tx_int(ypdir[0]*1000);
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a e7       	ldi	r20, 0x7A	; 122
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1c3a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
    1c3e:	cb 01       	movw	r24, r22
    1c40:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
		m_usb_tx_string("	vy: 0.");
    1c44:	8d e6       	ldi	r24, 0x6D	; 109
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
		m_usb_tx_int(ypdir[1]*1000);
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a e7       	ldi	r20, 0x7A	; 122
    1c52:	54 e4       	ldi	r21, 0x44	; 68
    1c54:	f8 01       	movw	r30, r16
    1c56:	60 81       	ld	r22, Z
    1c58:	71 81       	ldd	r23, Z+1	; 0x01
    1c5a:	82 81       	ldd	r24, Z+2	; 0x02
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsf3>
    1c62:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__fixsfsi>
    1c66:	cb 01       	movw	r24, r22
    1c68:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    1c6c:	8b e6       	ldi	r24, 0x6B	; 107
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	0e 94 4a 11 	call	0x2294	; 0x2294 <print_P>
    1c74:	ff e9       	ldi	r31, 0x9F	; 159
    1c76:	26 e8       	ldi	r18, 0x86	; 134
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	f1 50       	subi	r31, 0x01	; 1
    1c7c:	20 40       	sbci	r18, 0x00	; 0
    1c7e:	80 40       	sbci	r24, 0x00	; 0
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <main+0x1b0>
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <main+0x1ba>
    1c84:	00 00       	nop
    1c86:	60 cf       	rjmp	.-320    	; 0x1b48 <main+0x7e>

00001c88 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1c88:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1c8a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1c8c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1c8e:	8c e0       	ldi	r24, 0x0C	; 12
    1c90:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1c94:	e9 e6       	ldi	r30, 0x69	; 105
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 62       	ori	r24, 0x20	; 32
    1c9c:	80 83       	st	Z, r24
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8f 7e       	andi	r24, 0xEF	; 239
    1ca2:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1ca4:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1ca6:	78 94       	sei
    1ca8:	08 95       	ret

00001caa <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	18 2f       	mov	r17, r24
    1cb2:	d6 2f       	mov	r29, r22
    1cb4:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1cb6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1cba:	94 ea       	ldi	r25, 0xA4	; 164
    1cbc:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1cc0:	ec eb       	ldi	r30, 0xBC	; 188
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	90 81       	ld	r25, Z
    1cc6:	99 23       	and	r25, r25
    1cc8:	ec f7       	brge	.-6      	; 0x1cc4 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1cca:	90 e5       	ldi	r25, 0x50	; 80
    1ccc:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cd0:	94 e8       	ldi	r25, 0x84	; 132
    1cd2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1cd6:	ec eb       	ldi	r30, 0xBC	; 188
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	90 81       	ld	r25, Z
    1cdc:	99 23       	and	r25, r25
    1cde:	ec f7       	brge	.-6      	; 0x1cda <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1ce0:	90 91 b9 00 	lds	r25, 0x00B9
    1ce4:	98 7f       	andi	r25, 0xF8	; 248
    1ce6:	90 32       	cpi	r25, 0x20	; 32
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1cea:	84 e9       	ldi	r24, 0x94	; 148
    1cec:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	2d c0       	rjmp	.+90     	; 0x1d4e <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cfa:	84 e8       	ldi	r24, 0x84	; 132
    1cfc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1d00:	ec eb       	ldi	r30, 0xBC	; 188
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	90 81       	ld	r25, Z
    1d06:	99 23       	and	r25, r25
    1d08:	ec f7       	brge	.-6      	; 0x1d04 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1d0a:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d0e:	84 e8       	ldi	r24, 0x84	; 132
    1d10:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1d14:	ec eb       	ldi	r30, 0xBC	; 188
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	88 23       	and	r24, r24
    1d1c:	ec f7       	brge	.-6      	; 0x1d18 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1d1e:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d22:	84 e8       	ldi	r24, 0x84	; 132
    1d24:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1d28:	ec eb       	ldi	r30, 0xBC	; 188
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	88 23       	and	r24, r24
    1d30:	ec f7       	brge	.-6      	; 0x1d2c <m_rf_open+0x82>
	
	TWDR = packet_length;
    1d32:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d36:	84 e8       	ldi	r24, 0x84	; 132
    1d38:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1d3c:	ec eb       	ldi	r30, 0xBC	; 188
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 23       	and	r24, r24
    1d44:	ec f7       	brge	.-6      	; 0x1d40 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d46:	84 e9       	ldi	r24, 0x94	; 148
    1d48:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	08 95       	ret

00001d56 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d5c:	24 ea       	ldi	r18, 0xA4	; 164
    1d5e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1d62:	ec eb       	ldi	r30, 0xBC	; 188
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	20 81       	ld	r18, Z
    1d68:	22 23       	and	r18, r18
    1d6a:	ec f7       	brge	.-6      	; 0x1d66 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1d6c:	21 e5       	ldi	r18, 0x51	; 81
    1d6e:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d72:	24 e8       	ldi	r18, 0x84	; 132
    1d74:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1d78:	ec eb       	ldi	r30, 0xBC	; 188
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	20 81       	ld	r18, Z
    1d7e:	22 23       	and	r18, r18
    1d80:	ec f7       	brge	.-6      	; 0x1d7c <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1d82:	20 91 b9 00 	lds	r18, 0x00B9
    1d86:	28 7f       	andi	r18, 0xF8	; 248
    1d88:	28 34       	cpi	r18, 0x48	; 72
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d8c:	84 e9       	ldi	r24, 0x94	; 148
    1d8e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	44 c0       	rjmp	.+136    	; 0x1e1e <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d96:	24 ec       	ldi	r18, 0xC4	; 196
    1d98:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d9c:	ec eb       	ldi	r30, 0xBC	; 188
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	20 81       	ld	r18, Z
    1da2:	22 23       	and	r18, r18
    1da4:	ec f7       	brge	.-6      	; 0x1da0 <m_rf_read+0x4a>
	bytes = TWDR;
    1da6:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
    1daa:	16 13       	cpse	r17, r22
    1dac:	0a c0       	rjmp	.+20     	; 0x1dc2 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1dae:	41 2f       	mov	r20, r17
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	41 50       	subi	r20, 0x01	; 1
    1db4:	51 09       	sbc	r21, r1
    1db6:	14 16       	cp	r1, r20
    1db8:	15 06       	cpc	r1, r21
    1dba:	44 f0       	brlt	.+16     	; 0x1dcc <m_rf_read+0x76>
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	1c c0       	rjmp	.+56     	; 0x1dfa <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1dc2:	84 e9       	ldi	r24, 0x94	; 148
    1dc4:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	29 c0       	rjmp	.+82     	; 0x1e1e <m_rf_read+0xc8>
    1dcc:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1dd2:	ec eb       	ldi	r30, 0xBC	; 188
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1dd8:	cb eb       	ldi	r28, 0xBB	; 187
    1dda:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ddc:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1dde:	60 81       	ld	r22, Z
    1de0:	66 23       	and	r22, r22
    1de2:	ec f7       	brge	.-6      	; 0x1dde <m_rf_read+0x88>
		buffer[i] = TWDR;
    1de4:	68 81       	ld	r22, Y
    1de6:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1de8:	2f 5f       	subi	r18, 0xFF	; 255
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	24 17       	cp	r18, r20
    1dee:	35 07       	cpc	r19, r21
    1df0:	ac f3       	brlt	.-22     	; 0x1ddc <m_rf_read+0x86>
    1df2:	21 2f       	mov	r18, r17
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	21 50       	subi	r18, 0x01	; 1
    1df8:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1dfa:	44 e8       	ldi	r20, 0x84	; 132
    1dfc:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1e00:	ec eb       	ldi	r30, 0xBC	; 188
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	40 81       	ld	r20, Z
    1e06:	44 23       	and	r20, r20
    1e08:	ec f7       	brge	.-6      	; 0x1e04 <m_rf_read+0xae>
	buffer[i++] = TWDR;
    1e0a:	40 91 bb 00 	lds	r20, 0x00BB
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e16:	84 e9       	ldi	r24, 0x94	; 148
    1e18:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
}
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	1f 91       	pop	r17
    1e24:	08 95       	ret

00001e26 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1e2c:	80 ea       	ldi	r24, 0xA0	; 160
    1e2e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1e32:	82 e1       	ldi	r24, 0x12	; 18
    1e34:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1e36:	09 b4       	in	r0, 0x29	; 41
    1e38:	00 fe       	sbrs	r0, 0
    1e3a:	fd cf       	rjmp	.-6      	; 0x1e36 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1e3c:	80 e9       	ldi	r24, 0x90	; 144
    1e3e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1e42:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1e46:	10 92 95 01 	sts	0x0195, r1
	cdc_line_rtsdtr = 0;
    1e4a:	10 92 92 01 	sts	0x0192, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1e4e:	8c e0       	ldi	r24, 0x0C	; 12
    1e50:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1e54:	78 94       	sei
    1e56:	08 95       	ret

00001e58 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1e5c:	90 91 95 01 	lds	r25, 0x0195
    1e60:	99 23       	and	r25, r25
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <m_usb_tx_char+0xe>
    1e64:	4c c0       	rjmp	.+152    	; 0x1efe <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1e66:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e68:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1e6a:	24 e0       	ldi	r18, 0x04	; 4
    1e6c:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1e70:	20 91 93 01 	lds	r18, 0x0193
    1e74:	22 23       	and	r18, r18
    1e76:	49 f0       	breq	.+18     	; 0x1e8a <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1e78:	20 91 e8 00 	lds	r18, 0x00E8
    1e7c:	25 fd       	sbrc	r18, 5
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1e80:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	41 c0       	rjmp	.+130    	; 0x1f08 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    1e86:	10 92 93 01 	sts	0x0193, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1e8a:	30 91 e4 00 	lds	r19, 0x00E4
    1e8e:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1e90:	20 91 e8 00 	lds	r18, 0x00E8
    1e94:	25 fd       	sbrc	r18, 5
    1e96:	24 c0       	rjmp	.+72     	; 0x1ee0 <m_usb_tx_char+0x88>
		SREG = intr_state;
    1e98:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1e9a:	90 91 e4 00 	lds	r25, 0x00E4
    1e9e:	93 17       	cp	r25, r19
    1ea0:	81 f0       	breq	.+32     	; 0x1ec2 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1ea2:	90 91 95 01 	lds	r25, 0x0195
    1ea6:	99 23       	and	r25, r25
    1ea8:	61 f1       	breq	.+88     	; 0x1f02 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1eaa:	a9 ee       	ldi	r26, 0xE9	; 233
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1eb0:	e8 ee       	ldi	r30, 0xE8	; 232
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1eb4:	c4 ee       	ldi	r28, 0xE4	; 228
    1eb6:	d0 e0       	ldi	r29, 0x00	; 0
    1eb8:	0d c0       	rjmp	.+26     	; 0x1ed4 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1eba:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1ebc:	98 81       	ld	r25, Y
    1ebe:	93 13       	cpse	r25, r19
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	80 93 93 01 	sts	0x0193, r24
			return -1;
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	1e c0       	rjmp	.+60     	; 0x1f08 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1ecc:	90 91 95 01 	lds	r25, 0x0195
    1ed0:	99 23       	and	r25, r25
    1ed2:	c9 f0       	breq	.+50     	; 0x1f06 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    1ed4:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1ed6:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1ed8:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1eda:	20 81       	ld	r18, Z
    1edc:	25 ff       	sbrs	r18, 5
    1ede:	ed cf       	rjmp	.-38     	; 0x1eba <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1ee0:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1ee4:	80 91 e8 00 	lds	r24, 0x00E8
    1ee8:	85 fd       	sbrc	r24, 5
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <m_usb_tx_char+0x9a>
    1eec:	8a e3       	ldi	r24, 0x3A	; 58
    1eee:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1ef2:	85 e0       	ldi	r24, 0x05	; 5
    1ef4:	80 93 94 01 	sts	0x0194, r24
	SREG = intr_state;
    1ef8:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <m_usb_tx_char+0xb0>
    1f06:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	8f 93       	push	r24
    1f1a:	9f 93       	push	r25
    1f1c:	ef 93       	push	r30
    1f1e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1f20:	e1 ee       	ldi	r30, 0xE1	; 225
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
        UDINT = 0;
    1f26:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1f28:	83 ff       	sbrs	r24, 3
    1f2a:	11 c0       	rjmp	.+34     	; 0x1f4e <__vector_10+0x40>
		UENUM = 0;
    1f2c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1f30:	91 e0       	ldi	r25, 0x01	; 1
    1f32:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1f36:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1f3a:	92 e1       	ldi	r25, 0x12	; 18
    1f3c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1f40:	98 e0       	ldi	r25, 0x08	; 8
    1f42:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1f46:	10 92 95 01 	sts	0x0195, r1
		cdc_line_rtsdtr = 0;
    1f4a:	10 92 92 01 	sts	0x0192, r1
        }
	if (intbits & (1<<SOFI)) {
    1f4e:	82 ff       	sbrs	r24, 2
    1f50:	13 c0       	rjmp	.+38     	; 0x1f78 <__vector_10+0x6a>
		if (usb_configuration) {
    1f52:	80 91 95 01 	lds	r24, 0x0195
    1f56:	88 23       	and	r24, r24
    1f58:	79 f0       	breq	.+30     	; 0x1f78 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1f5a:	80 91 94 01 	lds	r24, 0x0194
			if (t) {
    1f5e:	88 23       	and	r24, r24
    1f60:	59 f0       	breq	.+22     	; 0x1f78 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1f62:	81 50       	subi	r24, 0x01	; 1
    1f64:	80 93 94 01 	sts	0x0194, r24
				if (!t) {
    1f68:	81 11       	cpse	r24, r1
    1f6a:	06 c0       	rjmp	.+12     	; 0x1f78 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1f6c:	84 e0       	ldi	r24, 0x04	; 4
    1f6e:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1f72:	8a e3       	ldi	r24, 0x3A	; 58
    1f74:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1f78:	ff 91       	pop	r31
    1f7a:	ef 91       	pop	r30
    1f7c:	9f 91       	pop	r25
    1f7e:	8f 91       	pop	r24
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	2f 93       	push	r18
    1f9a:	3f 93       	push	r19
    1f9c:	4f 93       	push	r20
    1f9e:	5f 93       	push	r21
    1fa0:	6f 93       	push	r22
    1fa2:	7f 93       	push	r23
    1fa4:	8f 93       	push	r24
    1fa6:	9f 93       	push	r25
    1fa8:	af 93       	push	r26
    1faa:	bf 93       	push	r27
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ef 93       	push	r30
    1fb2:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1fb4:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1fb8:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1fbc:	83 ff       	sbrs	r24, 3
    1fbe:	4e c1       	rjmp	.+668    	; 0x225c <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    1fc0:	e1 ef       	ldi	r30, 0xF1	; 241
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    1fc6:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1fc8:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1fca:	80 81       	ld	r24, Z
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    1fd0:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    1fd2:	50 81       	ld	r21, Z
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	75 2b       	or	r23, r21
                wLength = UEDATX;
    1fda:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    1fdc:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1fde:	82 ef       	ldi	r24, 0xF2	; 242
    1fe0:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1fe4:	46 30       	cpi	r20, 0x06	; 6
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <__vector_11+0x60>
    1fe8:	58 c0       	rjmp	.+176    	; 0x209a <__vector_11+0x110>
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1fec:	81 e2       	ldi	r24, 0x21	; 33
    1fee:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1ff2:	3b c1       	rjmp	.+630    	; 0x226a <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1ff4:	c6 e0       	ldi	r28, 0x06	; 6
    1ff6:	83 ea       	ldi	r24, 0xA3	; 163
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	45 91       	lpm	r20, Z+
    1ffe:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    2000:	24 17       	cp	r18, r20
    2002:	35 07       	cpc	r19, r21
    2004:	11 f0       	breq	.+4      	; 0x200a <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    2006:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2008:	23 c0       	rjmp	.+70     	; 0x2050 <__vector_11+0xc6>
				}
				list += 2;
    200a:	fc 01       	movw	r30, r24
    200c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    200e:	45 91       	lpm	r20, Z+
    2010:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    2012:	64 17       	cp	r22, r20
    2014:	75 07       	cpc	r23, r21
    2016:	11 f0       	breq	.+4      	; 0x201c <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    2018:	07 96       	adiw	r24, 0x07	; 7
					continue;
    201a:	1a c0       	rjmp	.+52     	; 0x2050 <__vector_11+0xc6>
				}
				list += 2;
    201c:	fc 01       	movw	r30, r24
    201e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2020:	25 91       	lpm	r18, Z+
    2022:	34 91       	lpm	r19, Z
				list += 2;
    2024:	fc 01       	movw	r30, r24
    2026:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2028:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    202a:	8b 2f       	mov	r24, r27
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2030:	8f 3f       	cpi	r24, 0xFF	; 255
    2032:	91 05       	cpc	r25, r1
    2034:	19 f0       	breq	.+6      	; 0x203c <__vector_11+0xb2>
    2036:	10 f0       	brcs	.+4      	; 0x203c <__vector_11+0xb2>
    2038:	8f ef       	ldi	r24, 0xFF	; 255
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	85 17       	cp	r24, r21
    203e:	08 f4       	brcc	.+2      	; 0x2042 <__vector_11+0xb8>
    2040:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2042:	a8 ee       	ldi	r26, 0xE8	; 232
    2044:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2046:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2048:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    204a:	c1 ef       	ldi	r28, 0xF1	; 241
    204c:	d0 e0       	ldi	r29, 0x00	; 0
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <__vector_11+0xcc>
    2050:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2052:	99 f6       	brne	.-90     	; 0x1ffa <__vector_11+0x70>
    2054:	cb cf       	rjmp	.-106    	; 0x1fec <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2056:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2058:	98 2f       	mov	r25, r24
    205a:	95 70       	andi	r25, 0x05	; 5
    205c:	e1 f3       	breq	.-8      	; 0x2056 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    205e:	82 fd       	sbrc	r24, 2
    2060:	04 c1       	rjmp	.+520    	; 0x226a <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2062:	45 2f       	mov	r20, r21
    2064:	51 31       	cpi	r21, 0x11	; 17
    2066:	08 f0       	brcs	.+2      	; 0x206a <__vector_11+0xe0>
    2068:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    206a:	44 23       	and	r20, r20
    206c:	09 f4       	brne	.+2      	; 0x2070 <__vector_11+0xe6>
    206e:	fa c0       	rjmp	.+500    	; 0x2264 <__vector_11+0x2da>
    2070:	f9 01       	movw	r30, r18
    2072:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    2074:	94 91       	lpm	r25, Z
    2076:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2078:	81 50       	subi	r24, 0x01	; 1
    207a:	31 96       	adiw	r30, 0x01	; 1
    207c:	81 11       	cpse	r24, r1
    207e:	fa cf       	rjmp	.-12     	; 0x2074 <__vector_11+0xea>
    2080:	8f ef       	ldi	r24, 0xFF	; 255
    2082:	84 0f       	add	r24, r20
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	28 0f       	add	r18, r24
    208a:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    208c:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    208e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2090:	51 11       	cpse	r21, r1
    2092:	e1 cf       	rjmp	.-62     	; 0x2056 <__vector_11+0xcc>
    2094:	40 31       	cpi	r20, 0x10	; 16
    2096:	f9 f2       	breq	.-66     	; 0x2056 <__vector_11+0xcc>
    2098:	e8 c0       	rjmp	.+464    	; 0x226a <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    209a:	45 30       	cpi	r20, 0x05	; 5
    209c:	61 f4       	brne	.+24     	; 0x20b6 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    209e:	8e ef       	ldi	r24, 0xFE	; 254
    20a0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    20a4:	e8 ee       	ldi	r30, 0xE8	; 232
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	80 ff       	sbrs	r24, 0
    20ac:	fd cf       	rjmp	.-6      	; 0x20a8 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    20ae:	20 68       	ori	r18, 0x80	; 128
    20b0:	20 93 e3 00 	sts	0x00E3, r18
			return;
    20b4:	da c0       	rjmp	.+436    	; 0x226a <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    20b6:	49 30       	cpi	r20, 0x09	; 9
    20b8:	09 f0       	breq	.+2      	; 0x20bc <__vector_11+0x132>
    20ba:	36 c0       	rjmp	.+108    	; 0x2128 <__vector_11+0x19e>
    20bc:	c1 11       	cpse	r28, r1
    20be:	5f c0       	rjmp	.+190    	; 0x217e <__vector_11+0x1f4>
			usb_configuration = wValue;
    20c0:	20 93 95 01 	sts	0x0195, r18
			cdc_line_rtsdtr = 0;
    20c4:	10 92 92 01 	sts	0x0192, r1
			transmit_flush_timer = 0;
    20c8:	10 92 94 01 	sts	0x0194, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    20cc:	8e ef       	ldi	r24, 0xFE	; 254
    20ce:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    20d2:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    20d4:	8c e4       	ldi	r24, 0x4C	; 76
    20d6:	92 e0       	ldi	r25, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    20d8:	c9 ee       	ldi	r28, 0xE9	; 233
    20da:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    20dc:	ab ee       	ldi	r26, 0xEB	; 235
    20de:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    20e0:	6c ee       	ldi	r22, 0xEC	; 236
    20e2:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    20e4:	4d ee       	ldi	r20, 0xED	; 237
    20e6:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    20e8:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    20ea:	9c 01       	movw	r18, r24
    20ec:	2f 5f       	subi	r18, 0xFF	; 255
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	fc 01       	movw	r30, r24
    20f2:	04 91       	lpm	r16, Z
				UECONX = en;
    20f4:	0c 93       	st	X, r16
				if (en) {
    20f6:	00 23       	and	r16, r16
    20f8:	61 f0       	breq	.+24     	; 0x2112 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    20fa:	f9 01       	movw	r30, r18
    20fc:	24 91       	lpm	r18, Z
    20fe:	fb 01       	movw	r30, r22
    2100:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    2102:	9c 01       	movw	r18, r24
    2104:	2d 5f       	subi	r18, 0xFD	; 253
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	fc 01       	movw	r30, r24
    210a:	32 96       	adiw	r30, 0x02	; 2
    210c:	84 91       	lpm	r24, Z
    210e:	fa 01       	movw	r30, r20
    2110:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2112:	1f 5f       	subi	r17, 0xFF	; 255
    2114:	15 30       	cpi	r17, 0x05	; 5
    2116:	11 f0       	breq	.+4      	; 0x211c <__vector_11+0x192>
    2118:	c9 01       	movw	r24, r18
    211a:	e6 cf       	rjmp	.-52     	; 0x20e8 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    211c:	ea ee       	ldi	r30, 0xEA	; 234
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	8e e1       	ldi	r24, 0x1E	; 30
    2122:	80 83       	st	Z, r24
        		UERST = 0;
    2124:	10 82       	st	Z, r1
			return;
    2126:	a1 c0       	rjmp	.+322    	; 0x226a <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2128:	48 30       	cpi	r20, 0x08	; 8
    212a:	81 f4       	brne	.+32     	; 0x214c <__vector_11+0x1c2>
    212c:	c0 38       	cpi	r28, 0x80	; 128
    212e:	09 f0       	breq	.+2      	; 0x2132 <__vector_11+0x1a8>
    2130:	42 c0       	rjmp	.+132    	; 0x21b6 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2132:	e8 ee       	ldi	r30, 0xE8	; 232
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	80 ff       	sbrs	r24, 0
    213a:	fd cf       	rjmp	.-6      	; 0x2136 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    213c:	80 91 95 01 	lds	r24, 0x0195
    2140:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2144:	8e ef       	ldi	r24, 0xFE	; 254
    2146:	80 93 e8 00 	sts	0x00E8, r24
    214a:	8f c0       	rjmp	.+286    	; 0x226a <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    214c:	41 32       	cpi	r20, 0x21	; 33
    214e:	b9 f4       	brne	.+46     	; 0x217e <__vector_11+0x1f4>
    2150:	c1 3a       	cpi	r28, 0xA1	; 161
    2152:	09 f0       	breq	.+2      	; 0x2156 <__vector_11+0x1cc>
    2154:	40 c0       	rjmp	.+128    	; 0x21d6 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2156:	e8 ee       	ldi	r30, 0xE8	; 232
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	80 ff       	sbrs	r24, 0
    215e:	fd cf       	rjmp	.-6      	; 0x215a <__vector_11+0x1d0>
    2160:	e6 e2       	ldi	r30, 0x26	; 38
    2162:	f1 e0       	ldi	r31, 0x01	; 1
    2164:	8d e2       	ldi	r24, 0x2D	; 45
    2166:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2168:	a1 ef       	ldi	r26, 0xF1	; 241
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	21 91       	ld	r18, Z+
    216e:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2170:	e8 17       	cp	r30, r24
    2172:	f9 07       	cpc	r31, r25
    2174:	d9 f7       	brne	.-10     	; 0x216c <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2176:	8e ef       	ldi	r24, 0xFE	; 254
    2178:	80 93 e8 00 	sts	0x00E8, r24
    217c:	76 c0       	rjmp	.+236    	; 0x226a <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    217e:	40 32       	cpi	r20, 0x20	; 32
    2180:	d1 f4       	brne	.+52     	; 0x21b6 <__vector_11+0x22c>
    2182:	c1 32       	cpi	r28, 0x21	; 33
    2184:	09 f0       	breq	.+2      	; 0x2188 <__vector_11+0x1fe>
    2186:	43 c0       	rjmp	.+134    	; 0x220e <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2188:	e8 ee       	ldi	r30, 0xE8	; 232
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	82 ff       	sbrs	r24, 2
    2190:	fd cf       	rjmp	.-6      	; 0x218c <__vector_11+0x202>
    2192:	e6 e2       	ldi	r30, 0x26	; 38
    2194:	f1 e0       	ldi	r31, 0x01	; 1
    2196:	8d e2       	ldi	r24, 0x2D	; 45
    2198:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    219a:	a1 ef       	ldi	r26, 0xF1	; 241
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	2c 91       	ld	r18, X
    21a0:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    21a2:	e8 17       	cp	r30, r24
    21a4:	f9 07       	cpc	r31, r25
    21a6:	d9 f7       	brne	.-10     	; 0x219e <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    21a8:	e8 ee       	ldi	r30, 0xE8	; 232
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	8b ef       	ldi	r24, 0xFB	; 251
    21ae:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21b0:	8e ef       	ldi	r24, 0xFE	; 254
    21b2:	80 83       	st	Z, r24
    21b4:	5a c0       	rjmp	.+180    	; 0x226a <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    21b6:	42 32       	cpi	r20, 0x22	; 34
    21b8:	71 f4       	brne	.+28     	; 0x21d6 <__vector_11+0x24c>
    21ba:	c1 32       	cpi	r28, 0x21	; 33
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <__vector_11+0x236>
    21be:	4e c0       	rjmp	.+156    	; 0x225c <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    21c0:	20 93 92 01 	sts	0x0192, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21c4:	e8 ee       	ldi	r30, 0xE8	; 232
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 ff       	sbrs	r24, 0
    21cc:	fd cf       	rjmp	.-6      	; 0x21c8 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21ce:	8e ef       	ldi	r24, 0xFE	; 254
    21d0:	80 93 e8 00 	sts	0x00E8, r24
    21d4:	4a c0       	rjmp	.+148    	; 0x226a <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    21d6:	41 11       	cpse	r20, r1
    21d8:	1a c0       	rjmp	.+52     	; 0x220e <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21da:	e8 ee       	ldi	r30, 0xE8	; 232
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 ff       	sbrs	r24, 0
    21e2:	fd cf       	rjmp	.-6      	; 0x21de <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    21e4:	c2 38       	cpi	r28, 0x82	; 130
    21e6:	51 f4       	brne	.+20     	; 0x21fc <__vector_11+0x272>
				UENUM = wIndex;
    21e8:	e9 ee       	ldi	r30, 0xE9	; 233
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    21ee:	80 91 eb 00 	lds	r24, 0x00EB
    21f2:	85 fb       	bst	r24, 5
    21f4:	88 27       	eor	r24, r24
    21f6:	80 f9       	bld	r24, 0
				UENUM = 0;
    21f8:	10 82       	st	Z, r1
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    21fc:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    21fe:	e1 ef       	ldi	r30, 0xF1	; 241
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 83       	st	Z, r24
			UEDATX = 0;
    2204:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2206:	8e ef       	ldi	r24, 0xFE	; 254
    2208:	80 93 e8 00 	sts	0x00E8, r24
    220c:	2e c0       	rjmp	.+92     	; 0x226a <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    220e:	84 2f       	mov	r24, r20
    2210:	8d 7f       	andi	r24, 0xFD	; 253
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	19 f5       	brne	.+70     	; 0x225c <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    2216:	c2 30       	cpi	r28, 0x02	; 2
    2218:	09 f5       	brne	.+66     	; 0x225c <__vector_11+0x2d2>
    221a:	23 2b       	or	r18, r19
    221c:	f9 f4       	brne	.+62     	; 0x225c <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    221e:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	86 0f       	add	r24, r22
    2224:	84 30       	cpi	r24, 0x04	; 4
    2226:	d0 f4       	brcc	.+52     	; 0x225c <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2228:	8e ef       	ldi	r24, 0xFE	; 254
    222a:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    222e:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    2232:	43 30       	cpi	r20, 0x03	; 3
    2234:	21 f4       	brne	.+8      	; 0x223e <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2236:	81 e2       	ldi	r24, 0x21	; 33
    2238:	80 93 eb 00 	sts	0x00EB, r24
    223c:	16 c0       	rjmp	.+44     	; 0x226a <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    223e:	89 e1       	ldi	r24, 0x19	; 25
    2240:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 c0       	rjmp	.+4      	; 0x224e <__vector_11+0x2c4>
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	6a 95       	dec	r22
    2250:	e2 f7       	brpl	.-8      	; 0x224a <__vector_11+0x2c0>
    2252:	ea ee       	ldi	r30, 0xEA	; 234
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 83       	st	Z, r24
					UERST = 0;
    2258:	10 82       	st	Z, r1
    225a:	07 c0       	rjmp	.+14     	; 0x226a <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    225c:	81 e2       	ldi	r24, 0x21	; 33
    225e:	80 93 eb 00 	sts	0x00EB, r24
    2262:	03 c0       	rjmp	.+6      	; 0x226a <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2264:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2266:	51 11       	cpse	r21, r1
    2268:	f6 ce       	rjmp	.-532    	; 0x2056 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    226a:	ff 91       	pop	r31
    226c:	ef 91       	pop	r30
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	bf 91       	pop	r27
    2274:	af 91       	pop	r26
    2276:	9f 91       	pop	r25
    2278:	8f 91       	pop	r24
    227a:	7f 91       	pop	r23
    227c:	6f 91       	pop	r22
    227e:	5f 91       	pop	r21
    2280:	4f 91       	pop	r20
    2282:	3f 91       	pop	r19
    2284:	2f 91       	pop	r18
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	0f 90       	pop	r0
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	0f 90       	pop	r0
    2290:	1f 90       	pop	r1
    2292:	18 95       	reti

00002294 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    229a:	ec 01       	movw	r28, r24
    229c:	21 96       	adiw	r28, 0x01	; 1
    229e:	fc 01       	movw	r30, r24
    22a0:	14 91       	lpm	r17, Z
		if (!c) break;
    22a2:	11 23       	and	r17, r17
    22a4:	69 f0       	breq	.+26     	; 0x22c0 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    22a6:	1a 30       	cpi	r17, 0x0A	; 10
    22a8:	19 f4       	brne	.+6      	; 0x22b0 <print_P+0x1c>
    22aa:	8d e0       	ldi	r24, 0x0D	; 13
    22ac:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <m_usb_tx_char>
		usb_tx_char(c);
    22b0:	81 2f       	mov	r24, r17
    22b2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    22b6:	fe 01       	movw	r30, r28
    22b8:	14 91       	lpm	r17, Z
    22ba:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    22bc:	11 11       	cpse	r17, r1
    22be:	f3 cf       	rjmp	.-26     	; 0x22a6 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	08 95       	ret

000022c8 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    22c8:	ef 92       	push	r14
    22ca:	ff 92       	push	r15
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	27 97       	sbiw	r28, 0x07	; 7
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    22e4:	8e 01       	movw	r16, r28
    22e6:	0f 5f       	subi	r16, 0xFF	; 255
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ea:	27 e0       	ldi	r18, 0x07	; 7
    22ec:	f8 01       	movw	r30, r16
    22ee:	11 92       	st	Z+, r1
    22f0:	2a 95       	dec	r18
    22f2:	e9 f7       	brne	.-6      	; 0x22ee <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    22f4:	4a e0       	ldi	r20, 0x0A	; 10
    22f6:	b8 01       	movw	r22, r16
    22f8:	0e 94 55 16 	call	0x2caa	; 0x2caa <__itoa_ncheck>
    22fc:	7e 01       	movw	r14, r28
    22fe:	f8 e0       	ldi	r31, 0x08	; 8
    2300:	ef 0e       	add	r14, r31
    2302:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    2304:	f8 01       	movw	r30, r16
    2306:	81 91       	ld	r24, Z+
    2308:	8f 01       	movw	r16, r30
    230a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    230c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    2310:	0e 15       	cp	r16, r14
    2312:	1f 05       	cpc	r17, r15
    2314:	b9 f7       	brne	.-18     	; 0x2304 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2316:	27 96       	adiw	r28, 0x07	; 7
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	08 95       	ret

00002330 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2334:	ec eb       	ldi	r30, 0xBC	; 188
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	88 23       	and	r24, r24
    233c:	34 f0       	brlt	.+12     	; 0x234a <twi_wait+0x1a>
    233e:	2f 5f       	subi	r18, 0xFF	; 255
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	29 3e       	cpi	r18, 0xE9	; 233
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	38 07       	cpc	r19, r24
    2348:	b9 f7       	brne	.-18     	; 0x2338 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	28 3e       	cpi	r18, 0xE8	; 232
    234e:	33 40       	sbci	r19, 0x03	; 3
    2350:	09 f4       	brne	.+2      	; 0x2354 <twi_wait+0x24>
    2352:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2354:	08 95       	ret

00002356 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2356:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    235a:	84 e8       	ldi	r24, 0x84	; 132
    235c:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2360:	0e 94 98 11 	call	0x2330	; 0x2330 <twi_wait>
    2364:	88 23       	and	r24, r24
    2366:	19 f0       	breq	.+6      	; 0x236e <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2368:	80 91 b9 00 	lds	r24, 0x00B9
    236c:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    236e:	08 95       	ret

00002370 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2370:	cf 93       	push	r28
    2372:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2374:	94 ea       	ldi	r25, 0xA4	; 164
    2376:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    237a:	0e 94 98 11 	call	0x2330	; 0x2330 <twi_wait>
    237e:	88 23       	and	r24, r24
    2380:	61 f0       	breq	.+24     	; 0x239a <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2382:	8c 2f       	mov	r24, r28
    2384:	88 0f       	add	r24, r24
    2386:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    238a:	80 32       	cpi	r24, 0x20	; 32
    238c:	29 f4       	brne	.+10     	; 0x2398 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    238e:	84 e9       	ldi	r24, 0x94	; 148
    2390:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	01 c0       	rjmp	.+2      	; 0x239a <start_write+0x2a>
	}	
	return 1;	// success
    2398:	81 e0       	ldi	r24, 0x01	; 1
}	
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    239e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    23a2:	88 e5       	ldi	r24, 0x58	; 88
    23a4:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_write>
    23a8:	88 23       	and	r24, r24
    23aa:	09 f4       	brne	.+2      	; 0x23ae <m_wii_open+0x10>
    23ac:	cd c0       	rjmp	.+410    	; 0x2548 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    23ae:	80 e3       	ldi	r24, 0x30	; 48
    23b0:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    23b4:	88 23       	and	r24, r24
    23b6:	09 f4       	brne	.+2      	; 0x23ba <m_wii_open+0x1c>
    23b8:	c9 c0       	rjmp	.+402    	; 0x254c <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    23c0:	88 23       	and	r24, r24
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <m_wii_open+0x28>
    23c4:	c5 c0       	rjmp	.+394    	; 0x2550 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    23c6:	84 e9       	ldi	r24, 0x94	; 148
    23c8:	80 93 bc 00 	sts	0x00BC, r24
    23cc:	83 ec       	ldi	r24, 0xC3	; 195
    23ce:	99 e0       	ldi	r25, 0x09	; 9
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <m_wii_open+0x32>
    23d4:	00 c0       	rjmp	.+0      	; 0x23d6 <m_wii_open+0x38>
    23d6:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    23d8:	88 e5       	ldi	r24, 0x58	; 88
    23da:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_write>
    23de:	88 23       	and	r24, r24
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <m_wii_open+0x46>
    23e2:	b8 c0       	rjmp	.+368    	; 0x2554 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    23ea:	88 23       	and	r24, r24
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <m_wii_open+0x52>
    23ee:	b4 c0       	rjmp	.+360    	; 0x2558 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    23f6:	88 23       	and	r24, r24
    23f8:	09 f4       	brne	.+2      	; 0x23fc <m_wii_open+0x5e>
    23fa:	b0 c0       	rjmp	.+352    	; 0x255c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2402:	88 23       	and	r24, r24
    2404:	09 f4       	brne	.+2      	; 0x2408 <m_wii_open+0x6a>
    2406:	ac c0       	rjmp	.+344    	; 0x2560 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    240e:	88 23       	and	r24, r24
    2410:	09 f4       	brne	.+2      	; 0x2414 <m_wii_open+0x76>
    2412:	a8 c0       	rjmp	.+336    	; 0x2564 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    241a:	88 23       	and	r24, r24
    241c:	09 f4       	brne	.+2      	; 0x2420 <m_wii_open+0x82>
    241e:	a4 c0       	rjmp	.+328    	; 0x2568 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2426:	88 23       	and	r24, r24
    2428:	09 f4       	brne	.+2      	; 0x242c <m_wii_open+0x8e>
    242a:	a0 c0       	rjmp	.+320    	; 0x256c <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2432:	88 23       	and	r24, r24
    2434:	09 f4       	brne	.+2      	; 0x2438 <m_wii_open+0x9a>
    2436:	9c c0       	rjmp	.+312    	; 0x2570 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2438:	80 e9       	ldi	r24, 0x90	; 144
    243a:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    243e:	88 23       	and	r24, r24
    2440:	09 f4       	brne	.+2      	; 0x2444 <m_wii_open+0xa6>
    2442:	98 c0       	rjmp	.+304    	; 0x2574 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2444:	84 e9       	ldi	r24, 0x94	; 148
    2446:	80 93 bc 00 	sts	0x00BC, r24
    244a:	83 ec       	ldi	r24, 0xC3	; 195
    244c:	99 e0       	ldi	r25, 0x09	; 9
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <m_wii_open+0xb0>
    2452:	00 c0       	rjmp	.+0      	; 0x2454 <m_wii_open+0xb6>
    2454:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2456:	88 e5       	ldi	r24, 0x58	; 88
    2458:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_write>
    245c:	88 23       	and	r24, r24
    245e:	09 f4       	brne	.+2      	; 0x2462 <m_wii_open+0xc4>
    2460:	8b c0       	rjmp	.+278    	; 0x2578 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2462:	87 e0       	ldi	r24, 0x07	; 7
    2464:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2468:	88 23       	and	r24, r24
    246a:	09 f4       	brne	.+2      	; 0x246e <m_wii_open+0xd0>
    246c:	87 c0       	rjmp	.+270    	; 0x257c <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2474:	88 23       	and	r24, r24
    2476:	09 f4       	brne	.+2      	; 0x247a <m_wii_open+0xdc>
    2478:	83 c0       	rjmp	.+262    	; 0x2580 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    247a:	81 e4       	ldi	r24, 0x41	; 65
    247c:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2480:	88 23       	and	r24, r24
    2482:	09 f4       	brne	.+2      	; 0x2486 <m_wii_open+0xe8>
    2484:	7f c0       	rjmp	.+254    	; 0x2584 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2486:	84 e9       	ldi	r24, 0x94	; 148
    2488:	80 93 bc 00 	sts	0x00BC, r24
    248c:	83 ec       	ldi	r24, 0xC3	; 195
    248e:	99 e0       	ldi	r25, 0x09	; 9
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <m_wii_open+0xf2>
    2494:	00 c0       	rjmp	.+0      	; 0x2496 <m_wii_open+0xf8>
    2496:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2498:	88 e5       	ldi	r24, 0x58	; 88
    249a:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_write>
    249e:	88 23       	and	r24, r24
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <m_wii_open+0x106>
    24a2:	72 c0       	rjmp	.+228    	; 0x2588 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    24a4:	8a e1       	ldi	r24, 0x1A	; 26
    24a6:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    24aa:	88 23       	and	r24, r24
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <m_wii_open+0x112>
    24ae:	6e c0       	rjmp	.+220    	; 0x258c <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    24b0:	80 e4       	ldi	r24, 0x40	; 64
    24b2:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    24b6:	88 23       	and	r24, r24
    24b8:	09 f4       	brne	.+2      	; 0x24bc <m_wii_open+0x11e>
    24ba:	6a c0       	rjmp	.+212    	; 0x2590 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    24c2:	88 23       	and	r24, r24
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <m_wii_open+0x12a>
    24c6:	66 c0       	rjmp	.+204    	; 0x2594 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    24c8:	84 e9       	ldi	r24, 0x94	; 148
    24ca:	80 93 bc 00 	sts	0x00BC, r24
    24ce:	83 ec       	ldi	r24, 0xC3	; 195
    24d0:	99 e0       	ldi	r25, 0x09	; 9
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <m_wii_open+0x134>
    24d6:	00 c0       	rjmp	.+0      	; 0x24d8 <m_wii_open+0x13a>
    24d8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    24da:	88 e5       	ldi	r24, 0x58	; 88
    24dc:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_write>
    24e0:	88 23       	and	r24, r24
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <m_wii_open+0x148>
    24e4:	59 c0       	rjmp	.+178    	; 0x2598 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    24e6:	83 e3       	ldi	r24, 0x33	; 51
    24e8:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    24ec:	88 23       	and	r24, r24
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <m_wii_open+0x154>
    24f0:	55 c0       	rjmp	.+170    	; 0x259c <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    24f8:	88 23       	and	r24, r24
    24fa:	09 f4       	brne	.+2      	; 0x24fe <m_wii_open+0x160>
    24fc:	51 c0       	rjmp	.+162    	; 0x25a0 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    24fe:	84 e9       	ldi	r24, 0x94	; 148
    2500:	80 93 bc 00 	sts	0x00BC, r24
    2504:	83 ec       	ldi	r24, 0xC3	; 195
    2506:	99 e0       	ldi	r25, 0x09	; 9
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <m_wii_open+0x16a>
    250c:	00 c0       	rjmp	.+0      	; 0x250e <m_wii_open+0x170>
    250e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2510:	88 e5       	ldi	r24, 0x58	; 88
    2512:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_write>
    2516:	88 23       	and	r24, r24
    2518:	09 f4       	brne	.+2      	; 0x251c <m_wii_open+0x17e>
    251a:	44 c0       	rjmp	.+136    	; 0x25a4 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    251c:	80 e3       	ldi	r24, 0x30	; 48
    251e:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2522:	88 23       	and	r24, r24
    2524:	09 f4       	brne	.+2      	; 0x2528 <m_wii_open+0x18a>
    2526:	40 c0       	rjmp	.+128    	; 0x25a8 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    2528:	88 e0       	ldi	r24, 0x08	; 8
    252a:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    252e:	88 23       	and	r24, r24
    2530:	e9 f1       	breq	.+122    	; 0x25ac <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2532:	84 e9       	ldi	r24, 0x94	; 148
    2534:	80 93 bc 00 	sts	0x00BC, r24
    2538:	83 ec       	ldi	r24, 0xC3	; 195
    253a:	99 e0       	ldi	r25, 0x09	; 9
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <m_wii_open+0x19e>
    2540:	00 c0       	rjmp	.+0      	; 0x2542 <m_wii_open+0x1a4>
    2542:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    25ac:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    25ae:	08 95       	ret

000025b0 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    25b0:	cf 93       	push	r28
    25b2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    25b4:	94 ea       	ldi	r25, 0xA4	; 164
    25b6:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    25ba:	0e 94 98 11 	call	0x2330	; 0x2330 <twi_wait>
    25be:	88 23       	and	r24, r24
    25c0:	69 f0       	breq	.+26     	; 0x25dc <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    25c2:	8c 2f       	mov	r24, r28
    25c4:	88 0f       	add	r24, r24
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    25cc:	88 34       	cpi	r24, 0x48	; 72
    25ce:	29 f4       	brne	.+10     	; 0x25da <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    25d0:	84 e9       	ldi	r24, 0x94	; 148
    25d2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <start_read+0x2c>
	}	
	return 1;	// success
    25da:	81 e0       	ldi	r24, 0x01	; 1
}	
    25dc:	cf 91       	pop	r28
    25de:	08 95       	ret

000025e0 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	60 97       	sbiw	r28, 0x10	; 16
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	08 2f       	mov	r16, r24
    25fe:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2600:	fe 01       	movw	r30, r28
    2602:	31 96       	adiw	r30, 0x01	; 1
    2604:	80 e1       	ldi	r24, 0x10	; 16
    2606:	df 01       	movw	r26, r30
    2608:	1d 92       	st	X+, r1
    260a:	8a 95       	dec	r24
    260c:	e9 f7       	brne	.-6      	; 0x2608 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    260e:	88 e5       	ldi	r24, 0x58	; 88
    2610:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_write>
    2614:	88 23       	and	r24, r24
    2616:	09 f4       	brne	.+2      	; 0x261a <m_wii_read+0x3a>
    2618:	6e c0       	rjmp	.+220    	; 0x26f6 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    261a:	86 e3       	ldi	r24, 0x36	; 54
    261c:	0e 94 ab 11 	call	0x2356	; 0x2356 <send_byte>
    2620:	88 23       	and	r24, r24
    2622:	09 f4       	brne	.+2      	; 0x2626 <m_wii_read+0x46>
    2624:	6a c0       	rjmp	.+212    	; 0x26fa <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2626:	84 e9       	ldi	r24, 0x94	; 148
    2628:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    262c:	b8 e0       	ldi	r27, 0x08	; 8
    262e:	ba 95       	dec	r27
    2630:	f1 f7       	brne	.-4      	; 0x262e <m_wii_read+0x4e>
    2632:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2634:	88 e5       	ldi	r24, 0x58	; 88
    2636:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <start_read>
    263a:	88 23       	and	r24, r24
    263c:	09 f4       	brne	.+2      	; 0x2640 <m_wii_read+0x60>
    263e:	5f c0       	rjmp	.+190    	; 0x26fe <m_wii_read+0x11e>
    2640:	be 01       	movw	r22, r28
    2642:	6f 5f       	subi	r22, 0xFF	; 255
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	9e 01       	movw	r18, r28
    2648:	20 5f       	subi	r18, 0xF0	; 240
    264a:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    264c:	ec eb       	ldi	r30, 0xBC	; 188
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2652:	4b eb       	ldi	r20, 0xBB	; 187
    2654:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2656:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2658:	80 81       	ld	r24, Z
    265a:	88 23       	and	r24, r24
    265c:	ec f7       	brge	.-6      	; 0x2658 <m_wii_read+0x78>
		temp[i] = TWDR;
    265e:	da 01       	movw	r26, r20
    2660:	8c 91       	ld	r24, X
    2662:	db 01       	movw	r26, r22
    2664:	8d 93       	st	X+, r24
    2666:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2668:	a2 17       	cp	r26, r18
    266a:	b3 07       	cpc	r27, r19
    266c:	a1 f7       	brne	.-24     	; 0x2656 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    266e:	84 e8       	ldi	r24, 0x84	; 132
    2670:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2674:	ec eb       	ldi	r30, 0xBC	; 188
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	88 23       	and	r24, r24
    267c:	ec f7       	brge	.-6      	; 0x2678 <m_wii_read+0x98>
	temp[15] = TWDR;
    267e:	80 91 bb 00 	lds	r24, 0x00BB
    2682:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2684:	84 e9       	ldi	r24, 0x94	; 148
    2686:	80 93 bc 00 	sts	0x00BC, r24
    268a:	fe 01       	movw	r30, r28
    268c:	34 96       	adiw	r30, 0x04	; 4
    268e:	e0 2e       	mov	r14, r16
    2690:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2692:	80 81       	ld	r24, Z
    2694:	98 2f       	mov	r25, r24
    2696:	90 73       	andi	r25, 0x30	; 48
    2698:	af 01       	movw	r20, r30
    269a:	42 50       	subi	r20, 0x02	; 2
    269c:	51 09       	sbc	r21, r1
    269e:	da 01       	movw	r26, r20
    26a0:	4c 91       	ld	r20, X
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	b0 e1       	ldi	r27, 0x10	; 16
    26a6:	9b 9f       	mul	r25, r27
    26a8:	40 0d       	add	r20, r0
    26aa:	51 1d       	adc	r21, r1
    26ac:	11 24       	eor	r1, r1
    26ae:	d7 01       	movw	r26, r14
    26b0:	4d 93       	st	X+, r20
    26b2:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    26b4:	48 2f       	mov	r20, r24
    26b6:	40 7c       	andi	r20, 0xC0	; 192
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	44 0f       	add	r20, r20
    26bc:	55 1f       	adc	r21, r21
    26be:	44 0f       	add	r20, r20
    26c0:	55 1f       	adc	r21, r21
    26c2:	bf 01       	movw	r22, r30
    26c4:	61 50       	subi	r22, 0x01	; 1
    26c6:	71 09       	sbc	r23, r1
    26c8:	db 01       	movw	r26, r22
    26ca:	9c 91       	ld	r25, X
    26cc:	49 0f       	add	r20, r25
    26ce:	51 1d       	adc	r21, r1
    26d0:	d7 01       	movw	r26, r14
    26d2:	13 96       	adiw	r26, 0x03	; 3
    26d4:	5c 93       	st	X, r21
    26d6:	4e 93       	st	-X, r20
    26d8:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    26da:	8f 70       	andi	r24, 0x0F	; 15
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	15 96       	adiw	r26, 0x05	; 5
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
    26e4:	14 97       	sbiw	r26, 0x04	; 4
    26e6:	33 96       	adiw	r30, 0x03	; 3
    26e8:	b6 e0       	ldi	r27, 0x06	; 6
    26ea:	eb 0e       	add	r14, r27
    26ec:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    26ee:	2e 17       	cp	r18, r30
    26f0:	3f 07       	cpc	r19, r31
    26f2:	79 f6       	brne	.-98     	; 0x2692 <m_wii_read+0xb2>
    26f4:	06 c0       	rjmp	.+12     	; 0x2702 <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	05 c0       	rjmp	.+10     	; 0x2704 <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	03 c0       	rjmp	.+6      	; 0x2704 <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	01 c0       	rjmp	.+2      	; 0x2704 <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2702:	81 e0       	ldi	r24, 0x01	; 1
}
    2704:	60 96       	adiw	r28, 0x10	; 16
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	08 95       	ret

0000271e <acos>:
    271e:	9f 93       	push	r25
    2720:	9f 77       	andi	r25, 0x7F	; 127
    2722:	4a d1       	rcall	.+660    	; 0x29b8 <__fp_arccos>
    2724:	0f 90       	pop	r0
    2726:	00 20       	and	r0, r0
    2728:	3a f4       	brpl	.+14     	; 0x2738 <acos+0x1a>
    272a:	90 58       	subi	r25, 0x80	; 128
    272c:	a2 ea       	ldi	r26, 0xA2	; 162
    272e:	2a ed       	ldi	r18, 0xDA	; 218
    2730:	3f e0       	ldi	r19, 0x0F	; 15
    2732:	49 e4       	ldi	r20, 0x49	; 73
    2734:	50 e4       	ldi	r21, 0x40	; 64
    2736:	13 d0       	rcall	.+38     	; 0x275e <__addsf3x>
    2738:	ba c1       	rjmp	.+884    	; 0x2aae <__fp_round>

0000273a <__subsf3>:
    273a:	50 58       	subi	r21, 0x80	; 128

0000273c <__addsf3>:
    273c:	bb 27       	eor	r27, r27
    273e:	aa 27       	eor	r26, r26
    2740:	0e d0       	rcall	.+28     	; 0x275e <__addsf3x>
    2742:	b5 c1       	rjmp	.+874    	; 0x2aae <__fp_round>
    2744:	a6 d1       	rcall	.+844    	; 0x2a92 <__fp_pscA>
    2746:	30 f0       	brcs	.+12     	; 0x2754 <__addsf3+0x18>
    2748:	ab d1       	rcall	.+854    	; 0x2aa0 <__fp_pscB>
    274a:	20 f0       	brcs	.+8      	; 0x2754 <__addsf3+0x18>
    274c:	31 f4       	brne	.+12     	; 0x275a <__addsf3+0x1e>
    274e:	9f 3f       	cpi	r25, 0xFF	; 255
    2750:	11 f4       	brne	.+4      	; 0x2756 <__addsf3+0x1a>
    2752:	1e f4       	brtc	.+6      	; 0x275a <__addsf3+0x1e>
    2754:	76 c1       	rjmp	.+748    	; 0x2a42 <__fp_nan>
    2756:	0e f4       	brtc	.+2      	; 0x275a <__addsf3+0x1e>
    2758:	e0 95       	com	r30
    275a:	e7 fb       	bst	r30, 7
    275c:	6c c1       	rjmp	.+728    	; 0x2a36 <__fp_inf>

0000275e <__addsf3x>:
    275e:	e9 2f       	mov	r30, r25
    2760:	b7 d1       	rcall	.+878    	; 0x2ad0 <__fp_split3>
    2762:	80 f3       	brcs	.-32     	; 0x2744 <__addsf3+0x8>
    2764:	ba 17       	cp	r27, r26
    2766:	62 07       	cpc	r22, r18
    2768:	73 07       	cpc	r23, r19
    276a:	84 07       	cpc	r24, r20
    276c:	95 07       	cpc	r25, r21
    276e:	18 f0       	brcs	.+6      	; 0x2776 <__addsf3x+0x18>
    2770:	71 f4       	brne	.+28     	; 0x278e <__addsf3x+0x30>
    2772:	9e f5       	brtc	.+102    	; 0x27da <__addsf3x+0x7c>
    2774:	cf c1       	rjmp	.+926    	; 0x2b14 <__fp_zero>
    2776:	0e f4       	brtc	.+2      	; 0x277a <__addsf3x+0x1c>
    2778:	e0 95       	com	r30
    277a:	0b 2e       	mov	r0, r27
    277c:	ba 2f       	mov	r27, r26
    277e:	a0 2d       	mov	r26, r0
    2780:	0b 01       	movw	r0, r22
    2782:	b9 01       	movw	r22, r18
    2784:	90 01       	movw	r18, r0
    2786:	0c 01       	movw	r0, r24
    2788:	ca 01       	movw	r24, r20
    278a:	a0 01       	movw	r20, r0
    278c:	11 24       	eor	r1, r1
    278e:	ff 27       	eor	r31, r31
    2790:	59 1b       	sub	r21, r25
    2792:	99 f0       	breq	.+38     	; 0x27ba <__addsf3x+0x5c>
    2794:	59 3f       	cpi	r21, 0xF9	; 249
    2796:	50 f4       	brcc	.+20     	; 0x27ac <__addsf3x+0x4e>
    2798:	50 3e       	cpi	r21, 0xE0	; 224
    279a:	68 f1       	brcs	.+90     	; 0x27f6 <__addsf3x+0x98>
    279c:	1a 16       	cp	r1, r26
    279e:	f0 40       	sbci	r31, 0x00	; 0
    27a0:	a2 2f       	mov	r26, r18
    27a2:	23 2f       	mov	r18, r19
    27a4:	34 2f       	mov	r19, r20
    27a6:	44 27       	eor	r20, r20
    27a8:	58 5f       	subi	r21, 0xF8	; 248
    27aa:	f3 cf       	rjmp	.-26     	; 0x2792 <__addsf3x+0x34>
    27ac:	46 95       	lsr	r20
    27ae:	37 95       	ror	r19
    27b0:	27 95       	ror	r18
    27b2:	a7 95       	ror	r26
    27b4:	f0 40       	sbci	r31, 0x00	; 0
    27b6:	53 95       	inc	r21
    27b8:	c9 f7       	brne	.-14     	; 0x27ac <__addsf3x+0x4e>
    27ba:	7e f4       	brtc	.+30     	; 0x27da <__addsf3x+0x7c>
    27bc:	1f 16       	cp	r1, r31
    27be:	ba 0b       	sbc	r27, r26
    27c0:	62 0b       	sbc	r22, r18
    27c2:	73 0b       	sbc	r23, r19
    27c4:	84 0b       	sbc	r24, r20
    27c6:	ba f0       	brmi	.+46     	; 0x27f6 <__addsf3x+0x98>
    27c8:	91 50       	subi	r25, 0x01	; 1
    27ca:	a1 f0       	breq	.+40     	; 0x27f4 <__addsf3x+0x96>
    27cc:	ff 0f       	add	r31, r31
    27ce:	bb 1f       	adc	r27, r27
    27d0:	66 1f       	adc	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	88 1f       	adc	r24, r24
    27d6:	c2 f7       	brpl	.-16     	; 0x27c8 <__addsf3x+0x6a>
    27d8:	0e c0       	rjmp	.+28     	; 0x27f6 <__addsf3x+0x98>
    27da:	ba 0f       	add	r27, r26
    27dc:	62 1f       	adc	r22, r18
    27de:	73 1f       	adc	r23, r19
    27e0:	84 1f       	adc	r24, r20
    27e2:	48 f4       	brcc	.+18     	; 0x27f6 <__addsf3x+0x98>
    27e4:	87 95       	ror	r24
    27e6:	77 95       	ror	r23
    27e8:	67 95       	ror	r22
    27ea:	b7 95       	ror	r27
    27ec:	f7 95       	ror	r31
    27ee:	9e 3f       	cpi	r25, 0xFE	; 254
    27f0:	08 f0       	brcs	.+2      	; 0x27f4 <__addsf3x+0x96>
    27f2:	b3 cf       	rjmp	.-154    	; 0x275a <__addsf3+0x1e>
    27f4:	93 95       	inc	r25
    27f6:	88 0f       	add	r24, r24
    27f8:	08 f0       	brcs	.+2      	; 0x27fc <__addsf3x+0x9e>
    27fa:	99 27       	eor	r25, r25
    27fc:	ee 0f       	add	r30, r30
    27fe:	97 95       	ror	r25
    2800:	87 95       	ror	r24
    2802:	08 95       	ret

00002804 <__cmpsf2>:
    2804:	f4 d0       	rcall	.+488    	; 0x29ee <__fp_cmp>
    2806:	08 f4       	brcc	.+2      	; 0x280a <__cmpsf2+0x6>
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	08 95       	ret

0000280c <__divsf3>:
    280c:	0c d0       	rcall	.+24     	; 0x2826 <__divsf3x>
    280e:	4f c1       	rjmp	.+670    	; 0x2aae <__fp_round>
    2810:	47 d1       	rcall	.+654    	; 0x2aa0 <__fp_pscB>
    2812:	40 f0       	brcs	.+16     	; 0x2824 <__divsf3+0x18>
    2814:	3e d1       	rcall	.+636    	; 0x2a92 <__fp_pscA>
    2816:	30 f0       	brcs	.+12     	; 0x2824 <__divsf3+0x18>
    2818:	21 f4       	brne	.+8      	; 0x2822 <__divsf3+0x16>
    281a:	5f 3f       	cpi	r21, 0xFF	; 255
    281c:	19 f0       	breq	.+6      	; 0x2824 <__divsf3+0x18>
    281e:	0b c1       	rjmp	.+534    	; 0x2a36 <__fp_inf>
    2820:	51 11       	cpse	r21, r1
    2822:	79 c1       	rjmp	.+754    	; 0x2b16 <__fp_szero>
    2824:	0e c1       	rjmp	.+540    	; 0x2a42 <__fp_nan>

00002826 <__divsf3x>:
    2826:	54 d1       	rcall	.+680    	; 0x2ad0 <__fp_split3>
    2828:	98 f3       	brcs	.-26     	; 0x2810 <__divsf3+0x4>

0000282a <__divsf3_pse>:
    282a:	99 23       	and	r25, r25
    282c:	c9 f3       	breq	.-14     	; 0x2820 <__divsf3+0x14>
    282e:	55 23       	and	r21, r21
    2830:	b1 f3       	breq	.-20     	; 0x281e <__divsf3+0x12>
    2832:	95 1b       	sub	r25, r21
    2834:	55 0b       	sbc	r21, r21
    2836:	bb 27       	eor	r27, r27
    2838:	aa 27       	eor	r26, r26
    283a:	62 17       	cp	r22, r18
    283c:	73 07       	cpc	r23, r19
    283e:	84 07       	cpc	r24, r20
    2840:	38 f0       	brcs	.+14     	; 0x2850 <__divsf3_pse+0x26>
    2842:	9f 5f       	subi	r25, 0xFF	; 255
    2844:	5f 4f       	sbci	r21, 0xFF	; 255
    2846:	22 0f       	add	r18, r18
    2848:	33 1f       	adc	r19, r19
    284a:	44 1f       	adc	r20, r20
    284c:	aa 1f       	adc	r26, r26
    284e:	a9 f3       	breq	.-22     	; 0x283a <__divsf3_pse+0x10>
    2850:	33 d0       	rcall	.+102    	; 0x28b8 <__divsf3_pse+0x8e>
    2852:	0e 2e       	mov	r0, r30
    2854:	3a f0       	brmi	.+14     	; 0x2864 <__divsf3_pse+0x3a>
    2856:	e0 e8       	ldi	r30, 0x80	; 128
    2858:	30 d0       	rcall	.+96     	; 0x28ba <__divsf3_pse+0x90>
    285a:	91 50       	subi	r25, 0x01	; 1
    285c:	50 40       	sbci	r21, 0x00	; 0
    285e:	e6 95       	lsr	r30
    2860:	00 1c       	adc	r0, r0
    2862:	ca f7       	brpl	.-14     	; 0x2856 <__divsf3_pse+0x2c>
    2864:	29 d0       	rcall	.+82     	; 0x28b8 <__divsf3_pse+0x8e>
    2866:	fe 2f       	mov	r31, r30
    2868:	27 d0       	rcall	.+78     	; 0x28b8 <__divsf3_pse+0x8e>
    286a:	66 0f       	add	r22, r22
    286c:	77 1f       	adc	r23, r23
    286e:	88 1f       	adc	r24, r24
    2870:	bb 1f       	adc	r27, r27
    2872:	26 17       	cp	r18, r22
    2874:	37 07       	cpc	r19, r23
    2876:	48 07       	cpc	r20, r24
    2878:	ab 07       	cpc	r26, r27
    287a:	b0 e8       	ldi	r27, 0x80	; 128
    287c:	09 f0       	breq	.+2      	; 0x2880 <__divsf3_pse+0x56>
    287e:	bb 0b       	sbc	r27, r27
    2880:	80 2d       	mov	r24, r0
    2882:	bf 01       	movw	r22, r30
    2884:	ff 27       	eor	r31, r31
    2886:	93 58       	subi	r25, 0x83	; 131
    2888:	5f 4f       	sbci	r21, 0xFF	; 255
    288a:	2a f0       	brmi	.+10     	; 0x2896 <__divsf3_pse+0x6c>
    288c:	9e 3f       	cpi	r25, 0xFE	; 254
    288e:	51 05       	cpc	r21, r1
    2890:	68 f0       	brcs	.+26     	; 0x28ac <__divsf3_pse+0x82>
    2892:	d1 c0       	rjmp	.+418    	; 0x2a36 <__fp_inf>
    2894:	40 c1       	rjmp	.+640    	; 0x2b16 <__fp_szero>
    2896:	5f 3f       	cpi	r21, 0xFF	; 255
    2898:	ec f3       	brlt	.-6      	; 0x2894 <__divsf3_pse+0x6a>
    289a:	98 3e       	cpi	r25, 0xE8	; 232
    289c:	dc f3       	brlt	.-10     	; 0x2894 <__divsf3_pse+0x6a>
    289e:	86 95       	lsr	r24
    28a0:	77 95       	ror	r23
    28a2:	67 95       	ror	r22
    28a4:	b7 95       	ror	r27
    28a6:	f7 95       	ror	r31
    28a8:	9f 5f       	subi	r25, 0xFF	; 255
    28aa:	c9 f7       	brne	.-14     	; 0x289e <__divsf3_pse+0x74>
    28ac:	88 0f       	add	r24, r24
    28ae:	91 1d       	adc	r25, r1
    28b0:	96 95       	lsr	r25
    28b2:	87 95       	ror	r24
    28b4:	97 f9       	bld	r25, 7
    28b6:	08 95       	ret
    28b8:	e1 e0       	ldi	r30, 0x01	; 1
    28ba:	66 0f       	add	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	88 1f       	adc	r24, r24
    28c0:	bb 1f       	adc	r27, r27
    28c2:	62 17       	cp	r22, r18
    28c4:	73 07       	cpc	r23, r19
    28c6:	84 07       	cpc	r24, r20
    28c8:	ba 07       	cpc	r27, r26
    28ca:	20 f0       	brcs	.+8      	; 0x28d4 <__divsf3_pse+0xaa>
    28cc:	62 1b       	sub	r22, r18
    28ce:	73 0b       	sbc	r23, r19
    28d0:	84 0b       	sbc	r24, r20
    28d2:	ba 0b       	sbc	r27, r26
    28d4:	ee 1f       	adc	r30, r30
    28d6:	88 f7       	brcc	.-30     	; 0x28ba <__divsf3_pse+0x90>
    28d8:	e0 95       	com	r30
    28da:	08 95       	ret

000028dc <__fixsfsi>:
    28dc:	04 d0       	rcall	.+8      	; 0x28e6 <__fixunssfsi>
    28de:	68 94       	set
    28e0:	b1 11       	cpse	r27, r1
    28e2:	19 c1       	rjmp	.+562    	; 0x2b16 <__fp_szero>
    28e4:	08 95       	ret

000028e6 <__fixunssfsi>:
    28e6:	fc d0       	rcall	.+504    	; 0x2ae0 <__fp_splitA>
    28e8:	88 f0       	brcs	.+34     	; 0x290c <__fixunssfsi+0x26>
    28ea:	9f 57       	subi	r25, 0x7F	; 127
    28ec:	90 f0       	brcs	.+36     	; 0x2912 <__fixunssfsi+0x2c>
    28ee:	b9 2f       	mov	r27, r25
    28f0:	99 27       	eor	r25, r25
    28f2:	b7 51       	subi	r27, 0x17	; 23
    28f4:	a0 f0       	brcs	.+40     	; 0x291e <__fixunssfsi+0x38>
    28f6:	d1 f0       	breq	.+52     	; 0x292c <__fixunssfsi+0x46>
    28f8:	66 0f       	add	r22, r22
    28fa:	77 1f       	adc	r23, r23
    28fc:	88 1f       	adc	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	1a f0       	brmi	.+6      	; 0x2908 <__fixunssfsi+0x22>
    2902:	ba 95       	dec	r27
    2904:	c9 f7       	brne	.-14     	; 0x28f8 <__fixunssfsi+0x12>
    2906:	12 c0       	rjmp	.+36     	; 0x292c <__fixunssfsi+0x46>
    2908:	b1 30       	cpi	r27, 0x01	; 1
    290a:	81 f0       	breq	.+32     	; 0x292c <__fixunssfsi+0x46>
    290c:	03 d1       	rcall	.+518    	; 0x2b14 <__fp_zero>
    290e:	b1 e0       	ldi	r27, 0x01	; 1
    2910:	08 95       	ret
    2912:	00 c1       	rjmp	.+512    	; 0x2b14 <__fp_zero>
    2914:	67 2f       	mov	r22, r23
    2916:	78 2f       	mov	r23, r24
    2918:	88 27       	eor	r24, r24
    291a:	b8 5f       	subi	r27, 0xF8	; 248
    291c:	39 f0       	breq	.+14     	; 0x292c <__fixunssfsi+0x46>
    291e:	b9 3f       	cpi	r27, 0xF9	; 249
    2920:	cc f3       	brlt	.-14     	; 0x2914 <__fixunssfsi+0x2e>
    2922:	86 95       	lsr	r24
    2924:	77 95       	ror	r23
    2926:	67 95       	ror	r22
    2928:	b3 95       	inc	r27
    292a:	d9 f7       	brne	.-10     	; 0x2922 <__fixunssfsi+0x3c>
    292c:	3e f4       	brtc	.+14     	; 0x293c <__fixunssfsi+0x56>
    292e:	90 95       	com	r25
    2930:	80 95       	com	r24
    2932:	70 95       	com	r23
    2934:	61 95       	neg	r22
    2936:	7f 4f       	sbci	r23, 0xFF	; 255
    2938:	8f 4f       	sbci	r24, 0xFF	; 255
    293a:	9f 4f       	sbci	r25, 0xFF	; 255
    293c:	08 95       	ret

0000293e <__floatunsisf>:
    293e:	e8 94       	clt
    2940:	09 c0       	rjmp	.+18     	; 0x2954 <__floatsisf+0x12>

00002942 <__floatsisf>:
    2942:	97 fb       	bst	r25, 7
    2944:	3e f4       	brtc	.+14     	; 0x2954 <__floatsisf+0x12>
    2946:	90 95       	com	r25
    2948:	80 95       	com	r24
    294a:	70 95       	com	r23
    294c:	61 95       	neg	r22
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	8f 4f       	sbci	r24, 0xFF	; 255
    2952:	9f 4f       	sbci	r25, 0xFF	; 255
    2954:	99 23       	and	r25, r25
    2956:	a9 f0       	breq	.+42     	; 0x2982 <__floatsisf+0x40>
    2958:	f9 2f       	mov	r31, r25
    295a:	96 e9       	ldi	r25, 0x96	; 150
    295c:	bb 27       	eor	r27, r27
    295e:	93 95       	inc	r25
    2960:	f6 95       	lsr	r31
    2962:	87 95       	ror	r24
    2964:	77 95       	ror	r23
    2966:	67 95       	ror	r22
    2968:	b7 95       	ror	r27
    296a:	f1 11       	cpse	r31, r1
    296c:	f8 cf       	rjmp	.-16     	; 0x295e <__floatsisf+0x1c>
    296e:	fa f4       	brpl	.+62     	; 0x29ae <__floatsisf+0x6c>
    2970:	bb 0f       	add	r27, r27
    2972:	11 f4       	brne	.+4      	; 0x2978 <__floatsisf+0x36>
    2974:	60 ff       	sbrs	r22, 0
    2976:	1b c0       	rjmp	.+54     	; 0x29ae <__floatsisf+0x6c>
    2978:	6f 5f       	subi	r22, 0xFF	; 255
    297a:	7f 4f       	sbci	r23, 0xFF	; 255
    297c:	8f 4f       	sbci	r24, 0xFF	; 255
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	16 c0       	rjmp	.+44     	; 0x29ae <__floatsisf+0x6c>
    2982:	88 23       	and	r24, r24
    2984:	11 f0       	breq	.+4      	; 0x298a <__floatsisf+0x48>
    2986:	96 e9       	ldi	r25, 0x96	; 150
    2988:	11 c0       	rjmp	.+34     	; 0x29ac <__floatsisf+0x6a>
    298a:	77 23       	and	r23, r23
    298c:	21 f0       	breq	.+8      	; 0x2996 <__floatsisf+0x54>
    298e:	9e e8       	ldi	r25, 0x8E	; 142
    2990:	87 2f       	mov	r24, r23
    2992:	76 2f       	mov	r23, r22
    2994:	05 c0       	rjmp	.+10     	; 0x29a0 <__floatsisf+0x5e>
    2996:	66 23       	and	r22, r22
    2998:	71 f0       	breq	.+28     	; 0x29b6 <__floatsisf+0x74>
    299a:	96 e8       	ldi	r25, 0x86	; 134
    299c:	86 2f       	mov	r24, r22
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	2a f0       	brmi	.+10     	; 0x29ae <__floatsisf+0x6c>
    29a4:	9a 95       	dec	r25
    29a6:	66 0f       	add	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	da f7       	brpl	.-10     	; 0x29a4 <__floatsisf+0x62>
    29ae:	88 0f       	add	r24, r24
    29b0:	96 95       	lsr	r25
    29b2:	87 95       	ror	r24
    29b4:	97 f9       	bld	r25, 7
    29b6:	08 95       	ret

000029b8 <__fp_arccos>:
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	1f 93       	push	r17
    29be:	0f 93       	push	r16
    29c0:	8b 01       	movw	r16, r22
    29c2:	ec 01       	movw	r28, r24
    29c4:	ec eb       	ldi	r30, 0xBC	; 188
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	3f d0       	rcall	.+126    	; 0x2a48 <__fp_powser>
    29ca:	71 d0       	rcall	.+226    	; 0x2aae <__fp_round>
    29cc:	98 01       	movw	r18, r16
    29ce:	ae 01       	movw	r20, r28
    29d0:	8b 01       	movw	r16, r22
    29d2:	ec 01       	movw	r28, r24
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	80 e8       	ldi	r24, 0x80	; 128
    29da:	9f e3       	ldi	r25, 0x3F	; 63
    29dc:	ae de       	rcall	.-676    	; 0x273a <__subsf3>
    29de:	0c d1       	rcall	.+536    	; 0x2bf8 <sqrt>
    29e0:	98 01       	movw	r18, r16
    29e2:	ae 01       	movw	r20, r28
    29e4:	0f 91       	pop	r16
    29e6:	1f 91       	pop	r17
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	aa c0       	rjmp	.+340    	; 0x2b42 <__mulsf3x>

000029ee <__fp_cmp>:
    29ee:	99 0f       	add	r25, r25
    29f0:	00 08       	sbc	r0, r0
    29f2:	55 0f       	add	r21, r21
    29f4:	aa 0b       	sbc	r26, r26
    29f6:	e0 e8       	ldi	r30, 0x80	; 128
    29f8:	fe ef       	ldi	r31, 0xFE	; 254
    29fa:	16 16       	cp	r1, r22
    29fc:	17 06       	cpc	r1, r23
    29fe:	e8 07       	cpc	r30, r24
    2a00:	f9 07       	cpc	r31, r25
    2a02:	c0 f0       	brcs	.+48     	; 0x2a34 <__fp_cmp+0x46>
    2a04:	12 16       	cp	r1, r18
    2a06:	13 06       	cpc	r1, r19
    2a08:	e4 07       	cpc	r30, r20
    2a0a:	f5 07       	cpc	r31, r21
    2a0c:	98 f0       	brcs	.+38     	; 0x2a34 <__fp_cmp+0x46>
    2a0e:	62 1b       	sub	r22, r18
    2a10:	73 0b       	sbc	r23, r19
    2a12:	84 0b       	sbc	r24, r20
    2a14:	95 0b       	sbc	r25, r21
    2a16:	39 f4       	brne	.+14     	; 0x2a26 <__fp_cmp+0x38>
    2a18:	0a 26       	eor	r0, r26
    2a1a:	61 f0       	breq	.+24     	; 0x2a34 <__fp_cmp+0x46>
    2a1c:	23 2b       	or	r18, r19
    2a1e:	24 2b       	or	r18, r20
    2a20:	25 2b       	or	r18, r21
    2a22:	21 f4       	brne	.+8      	; 0x2a2c <__fp_cmp+0x3e>
    2a24:	08 95       	ret
    2a26:	0a 26       	eor	r0, r26
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <__fp_cmp+0x3e>
    2a2a:	a1 40       	sbci	r26, 0x01	; 1
    2a2c:	a6 95       	lsr	r26
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	81 1d       	adc	r24, r1
    2a32:	81 1d       	adc	r24, r1
    2a34:	08 95       	ret

00002a36 <__fp_inf>:
    2a36:	97 f9       	bld	r25, 7
    2a38:	9f 67       	ori	r25, 0x7F	; 127
    2a3a:	80 e8       	ldi	r24, 0x80	; 128
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	08 95       	ret

00002a42 <__fp_nan>:
    2a42:	9f ef       	ldi	r25, 0xFF	; 255
    2a44:	80 ec       	ldi	r24, 0xC0	; 192
    2a46:	08 95       	ret

00002a48 <__fp_powser>:
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	1f 93       	push	r17
    2a4e:	0f 93       	push	r16
    2a50:	ff 92       	push	r15
    2a52:	ef 92       	push	r14
    2a54:	df 92       	push	r13
    2a56:	7b 01       	movw	r14, r22
    2a58:	8c 01       	movw	r16, r24
    2a5a:	68 94       	set
    2a5c:	05 c0       	rjmp	.+10     	; 0x2a68 <__fp_powser+0x20>
    2a5e:	da 2e       	mov	r13, r26
    2a60:	ef 01       	movw	r28, r30
    2a62:	6f d0       	rcall	.+222    	; 0x2b42 <__mulsf3x>
    2a64:	fe 01       	movw	r30, r28
    2a66:	e8 94       	clt
    2a68:	a5 91       	lpm	r26, Z+
    2a6a:	25 91       	lpm	r18, Z+
    2a6c:	35 91       	lpm	r19, Z+
    2a6e:	45 91       	lpm	r20, Z+
    2a70:	55 91       	lpm	r21, Z+
    2a72:	ae f3       	brts	.-22     	; 0x2a5e <__fp_powser+0x16>
    2a74:	ef 01       	movw	r28, r30
    2a76:	73 de       	rcall	.-794    	; 0x275e <__addsf3x>
    2a78:	fe 01       	movw	r30, r28
    2a7a:	97 01       	movw	r18, r14
    2a7c:	a8 01       	movw	r20, r16
    2a7e:	da 94       	dec	r13
    2a80:	79 f7       	brne	.-34     	; 0x2a60 <__fp_powser+0x18>
    2a82:	df 90       	pop	r13
    2a84:	ef 90       	pop	r14
    2a86:	ff 90       	pop	r15
    2a88:	0f 91       	pop	r16
    2a8a:	1f 91       	pop	r17
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <__fp_pscA>:
    2a92:	00 24       	eor	r0, r0
    2a94:	0a 94       	dec	r0
    2a96:	16 16       	cp	r1, r22
    2a98:	17 06       	cpc	r1, r23
    2a9a:	18 06       	cpc	r1, r24
    2a9c:	09 06       	cpc	r0, r25
    2a9e:	08 95       	ret

00002aa0 <__fp_pscB>:
    2aa0:	00 24       	eor	r0, r0
    2aa2:	0a 94       	dec	r0
    2aa4:	12 16       	cp	r1, r18
    2aa6:	13 06       	cpc	r1, r19
    2aa8:	14 06       	cpc	r1, r20
    2aaa:	05 06       	cpc	r0, r21
    2aac:	08 95       	ret

00002aae <__fp_round>:
    2aae:	09 2e       	mov	r0, r25
    2ab0:	03 94       	inc	r0
    2ab2:	00 0c       	add	r0, r0
    2ab4:	11 f4       	brne	.+4      	; 0x2aba <__fp_round+0xc>
    2ab6:	88 23       	and	r24, r24
    2ab8:	52 f0       	brmi	.+20     	; 0x2ace <__fp_round+0x20>
    2aba:	bb 0f       	add	r27, r27
    2abc:	40 f4       	brcc	.+16     	; 0x2ace <__fp_round+0x20>
    2abe:	bf 2b       	or	r27, r31
    2ac0:	11 f4       	brne	.+4      	; 0x2ac6 <__fp_round+0x18>
    2ac2:	60 ff       	sbrs	r22, 0
    2ac4:	04 c0       	rjmp	.+8      	; 0x2ace <__fp_round+0x20>
    2ac6:	6f 5f       	subi	r22, 0xFF	; 255
    2ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aca:	8f 4f       	sbci	r24, 0xFF	; 255
    2acc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ace:	08 95       	ret

00002ad0 <__fp_split3>:
    2ad0:	57 fd       	sbrc	r21, 7
    2ad2:	90 58       	subi	r25, 0x80	; 128
    2ad4:	44 0f       	add	r20, r20
    2ad6:	55 1f       	adc	r21, r21
    2ad8:	59 f0       	breq	.+22     	; 0x2af0 <__fp_splitA+0x10>
    2ada:	5f 3f       	cpi	r21, 0xFF	; 255
    2adc:	71 f0       	breq	.+28     	; 0x2afa <__fp_splitA+0x1a>
    2ade:	47 95       	ror	r20

00002ae0 <__fp_splitA>:
    2ae0:	88 0f       	add	r24, r24
    2ae2:	97 fb       	bst	r25, 7
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	61 f0       	breq	.+24     	; 0x2b00 <__fp_splitA+0x20>
    2ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    2aea:	79 f0       	breq	.+30     	; 0x2b0a <__fp_splitA+0x2a>
    2aec:	87 95       	ror	r24
    2aee:	08 95       	ret
    2af0:	12 16       	cp	r1, r18
    2af2:	13 06       	cpc	r1, r19
    2af4:	14 06       	cpc	r1, r20
    2af6:	55 1f       	adc	r21, r21
    2af8:	f2 cf       	rjmp	.-28     	; 0x2ade <__fp_split3+0xe>
    2afa:	46 95       	lsr	r20
    2afc:	f1 df       	rcall	.-30     	; 0x2ae0 <__fp_splitA>
    2afe:	08 c0       	rjmp	.+16     	; 0x2b10 <__fp_splitA+0x30>
    2b00:	16 16       	cp	r1, r22
    2b02:	17 06       	cpc	r1, r23
    2b04:	18 06       	cpc	r1, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	f1 cf       	rjmp	.-30     	; 0x2aec <__fp_splitA+0xc>
    2b0a:	86 95       	lsr	r24
    2b0c:	71 05       	cpc	r23, r1
    2b0e:	61 05       	cpc	r22, r1
    2b10:	08 94       	sec
    2b12:	08 95       	ret

00002b14 <__fp_zero>:
    2b14:	e8 94       	clt

00002b16 <__fp_szero>:
    2b16:	bb 27       	eor	r27, r27
    2b18:	66 27       	eor	r22, r22
    2b1a:	77 27       	eor	r23, r23
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	97 f9       	bld	r25, 7
    2b20:	08 95       	ret

00002b22 <__gesf2>:
    2b22:	65 df       	rcall	.-310    	; 0x29ee <__fp_cmp>
    2b24:	08 f4       	brcc	.+2      	; 0x2b28 <__gesf2+0x6>
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
    2b28:	08 95       	ret

00002b2a <__mulsf3>:
    2b2a:	0b d0       	rcall	.+22     	; 0x2b42 <__mulsf3x>
    2b2c:	c0 cf       	rjmp	.-128    	; 0x2aae <__fp_round>
    2b2e:	b1 df       	rcall	.-158    	; 0x2a92 <__fp_pscA>
    2b30:	28 f0       	brcs	.+10     	; 0x2b3c <__mulsf3+0x12>
    2b32:	b6 df       	rcall	.-148    	; 0x2aa0 <__fp_pscB>
    2b34:	18 f0       	brcs	.+6      	; 0x2b3c <__mulsf3+0x12>
    2b36:	95 23       	and	r25, r21
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <__mulsf3+0x12>
    2b3a:	7d cf       	rjmp	.-262    	; 0x2a36 <__fp_inf>
    2b3c:	82 cf       	rjmp	.-252    	; 0x2a42 <__fp_nan>
    2b3e:	11 24       	eor	r1, r1
    2b40:	ea cf       	rjmp	.-44     	; 0x2b16 <__fp_szero>

00002b42 <__mulsf3x>:
    2b42:	c6 df       	rcall	.-116    	; 0x2ad0 <__fp_split3>
    2b44:	a0 f3       	brcs	.-24     	; 0x2b2e <__mulsf3+0x4>

00002b46 <__mulsf3_pse>:
    2b46:	95 9f       	mul	r25, r21
    2b48:	d1 f3       	breq	.-12     	; 0x2b3e <__mulsf3+0x14>
    2b4a:	95 0f       	add	r25, r21
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	55 1f       	adc	r21, r21
    2b50:	62 9f       	mul	r22, r18
    2b52:	f0 01       	movw	r30, r0
    2b54:	72 9f       	mul	r23, r18
    2b56:	bb 27       	eor	r27, r27
    2b58:	f0 0d       	add	r31, r0
    2b5a:	b1 1d       	adc	r27, r1
    2b5c:	63 9f       	mul	r22, r19
    2b5e:	aa 27       	eor	r26, r26
    2b60:	f0 0d       	add	r31, r0
    2b62:	b1 1d       	adc	r27, r1
    2b64:	aa 1f       	adc	r26, r26
    2b66:	64 9f       	mul	r22, r20
    2b68:	66 27       	eor	r22, r22
    2b6a:	b0 0d       	add	r27, r0
    2b6c:	a1 1d       	adc	r26, r1
    2b6e:	66 1f       	adc	r22, r22
    2b70:	82 9f       	mul	r24, r18
    2b72:	22 27       	eor	r18, r18
    2b74:	b0 0d       	add	r27, r0
    2b76:	a1 1d       	adc	r26, r1
    2b78:	62 1f       	adc	r22, r18
    2b7a:	73 9f       	mul	r23, r19
    2b7c:	b0 0d       	add	r27, r0
    2b7e:	a1 1d       	adc	r26, r1
    2b80:	62 1f       	adc	r22, r18
    2b82:	83 9f       	mul	r24, r19
    2b84:	a0 0d       	add	r26, r0
    2b86:	61 1d       	adc	r22, r1
    2b88:	22 1f       	adc	r18, r18
    2b8a:	74 9f       	mul	r23, r20
    2b8c:	33 27       	eor	r19, r19
    2b8e:	a0 0d       	add	r26, r0
    2b90:	61 1d       	adc	r22, r1
    2b92:	23 1f       	adc	r18, r19
    2b94:	84 9f       	mul	r24, r20
    2b96:	60 0d       	add	r22, r0
    2b98:	21 1d       	adc	r18, r1
    2b9a:	82 2f       	mov	r24, r18
    2b9c:	76 2f       	mov	r23, r22
    2b9e:	6a 2f       	mov	r22, r26
    2ba0:	11 24       	eor	r1, r1
    2ba2:	9f 57       	subi	r25, 0x7F	; 127
    2ba4:	50 40       	sbci	r21, 0x00	; 0
    2ba6:	8a f0       	brmi	.+34     	; 0x2bca <__mulsf3_pse+0x84>
    2ba8:	e1 f0       	breq	.+56     	; 0x2be2 <__mulsf3_pse+0x9c>
    2baa:	88 23       	and	r24, r24
    2bac:	4a f0       	brmi	.+18     	; 0x2bc0 <__mulsf3_pse+0x7a>
    2bae:	ee 0f       	add	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	bb 1f       	adc	r27, r27
    2bb4:	66 1f       	adc	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 1f       	adc	r24, r24
    2bba:	91 50       	subi	r25, 0x01	; 1
    2bbc:	50 40       	sbci	r21, 0x00	; 0
    2bbe:	a9 f7       	brne	.-22     	; 0x2baa <__mulsf3_pse+0x64>
    2bc0:	9e 3f       	cpi	r25, 0xFE	; 254
    2bc2:	51 05       	cpc	r21, r1
    2bc4:	70 f0       	brcs	.+28     	; 0x2be2 <__mulsf3_pse+0x9c>
    2bc6:	37 cf       	rjmp	.-402    	; 0x2a36 <__fp_inf>
    2bc8:	a6 cf       	rjmp	.-180    	; 0x2b16 <__fp_szero>
    2bca:	5f 3f       	cpi	r21, 0xFF	; 255
    2bcc:	ec f3       	brlt	.-6      	; 0x2bc8 <__mulsf3_pse+0x82>
    2bce:	98 3e       	cpi	r25, 0xE8	; 232
    2bd0:	dc f3       	brlt	.-10     	; 0x2bc8 <__mulsf3_pse+0x82>
    2bd2:	86 95       	lsr	r24
    2bd4:	77 95       	ror	r23
    2bd6:	67 95       	ror	r22
    2bd8:	b7 95       	ror	r27
    2bda:	f7 95       	ror	r31
    2bdc:	e7 95       	ror	r30
    2bde:	9f 5f       	subi	r25, 0xFF	; 255
    2be0:	c1 f7       	brne	.-16     	; 0x2bd2 <__mulsf3_pse+0x8c>
    2be2:	fe 2b       	or	r31, r30
    2be4:	88 0f       	add	r24, r24
    2be6:	91 1d       	adc	r25, r1
    2be8:	96 95       	lsr	r25
    2bea:	87 95       	ror	r24
    2bec:	97 f9       	bld	r25, 7
    2bee:	08 95       	ret
    2bf0:	11 f4       	brne	.+4      	; 0x2bf6 <__mulsf3_pse+0xb0>
    2bf2:	0e f4       	brtc	.+2      	; 0x2bf6 <__mulsf3_pse+0xb0>
    2bf4:	26 cf       	rjmp	.-436    	; 0x2a42 <__fp_nan>
    2bf6:	3e c0       	rjmp	.+124    	; 0x2c74 <__fp_mpack>

00002bf8 <sqrt>:
    2bf8:	73 df       	rcall	.-282    	; 0x2ae0 <__fp_splitA>
    2bfa:	d0 f3       	brcs	.-12     	; 0x2bf0 <__mulsf3_pse+0xaa>
    2bfc:	99 23       	and	r25, r25
    2bfe:	d9 f3       	breq	.-10     	; 0x2bf6 <__mulsf3_pse+0xb0>
    2c00:	ce f3       	brts	.-14     	; 0x2bf4 <__mulsf3_pse+0xae>
    2c02:	9f 57       	subi	r25, 0x7F	; 127
    2c04:	55 0b       	sbc	r21, r21
    2c06:	87 ff       	sbrs	r24, 7
    2c08:	43 d0       	rcall	.+134    	; 0x2c90 <__fp_norm2>
    2c0a:	00 24       	eor	r0, r0
    2c0c:	a0 e6       	ldi	r26, 0x60	; 96
    2c0e:	40 ea       	ldi	r20, 0xA0	; 160
    2c10:	90 01       	movw	r18, r0
    2c12:	80 58       	subi	r24, 0x80	; 128
    2c14:	56 95       	lsr	r21
    2c16:	97 95       	ror	r25
    2c18:	28 f4       	brcc	.+10     	; 0x2c24 <sqrt+0x2c>
    2c1a:	80 5c       	subi	r24, 0xC0	; 192
    2c1c:	66 0f       	add	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	88 1f       	adc	r24, r24
    2c22:	20 f0       	brcs	.+8      	; 0x2c2c <sqrt+0x34>
    2c24:	26 17       	cp	r18, r22
    2c26:	37 07       	cpc	r19, r23
    2c28:	48 07       	cpc	r20, r24
    2c2a:	30 f4       	brcc	.+12     	; 0x2c38 <sqrt+0x40>
    2c2c:	62 1b       	sub	r22, r18
    2c2e:	73 0b       	sbc	r23, r19
    2c30:	84 0b       	sbc	r24, r20
    2c32:	20 29       	or	r18, r0
    2c34:	31 29       	or	r19, r1
    2c36:	4a 2b       	or	r20, r26
    2c38:	a6 95       	lsr	r26
    2c3a:	17 94       	ror	r1
    2c3c:	07 94       	ror	r0
    2c3e:	20 25       	eor	r18, r0
    2c40:	31 25       	eor	r19, r1
    2c42:	4a 27       	eor	r20, r26
    2c44:	58 f7       	brcc	.-42     	; 0x2c1c <sqrt+0x24>
    2c46:	66 0f       	add	r22, r22
    2c48:	77 1f       	adc	r23, r23
    2c4a:	88 1f       	adc	r24, r24
    2c4c:	20 f0       	brcs	.+8      	; 0x2c56 <sqrt+0x5e>
    2c4e:	26 17       	cp	r18, r22
    2c50:	37 07       	cpc	r19, r23
    2c52:	48 07       	cpc	r20, r24
    2c54:	30 f4       	brcc	.+12     	; 0x2c62 <sqrt+0x6a>
    2c56:	62 0b       	sbc	r22, r18
    2c58:	73 0b       	sbc	r23, r19
    2c5a:	84 0b       	sbc	r24, r20
    2c5c:	20 0d       	add	r18, r0
    2c5e:	31 1d       	adc	r19, r1
    2c60:	41 1d       	adc	r20, r1
    2c62:	a0 95       	com	r26
    2c64:	81 f7       	brne	.-32     	; 0x2c46 <sqrt+0x4e>
    2c66:	b9 01       	movw	r22, r18
    2c68:	84 2f       	mov	r24, r20
    2c6a:	91 58       	subi	r25, 0x81	; 129
    2c6c:	88 0f       	add	r24, r24
    2c6e:	96 95       	lsr	r25
    2c70:	87 95       	ror	r24
    2c72:	08 95       	ret

00002c74 <__fp_mpack>:
    2c74:	9f 3f       	cpi	r25, 0xFF	; 255
    2c76:	31 f0       	breq	.+12     	; 0x2c84 <__fp_mpack_finite+0xc>

00002c78 <__fp_mpack_finite>:
    2c78:	91 50       	subi	r25, 0x01	; 1
    2c7a:	20 f4       	brcc	.+8      	; 0x2c84 <__fp_mpack_finite+0xc>
    2c7c:	87 95       	ror	r24
    2c7e:	77 95       	ror	r23
    2c80:	67 95       	ror	r22
    2c82:	b7 95       	ror	r27
    2c84:	88 0f       	add	r24, r24
    2c86:	91 1d       	adc	r25, r1
    2c88:	96 95       	lsr	r25
    2c8a:	87 95       	ror	r24
    2c8c:	97 f9       	bld	r25, 7
    2c8e:	08 95       	ret

00002c90 <__fp_norm2>:
    2c90:	91 50       	subi	r25, 0x01	; 1
    2c92:	50 40       	sbci	r21, 0x00	; 0
    2c94:	66 0f       	add	r22, r22
    2c96:	77 1f       	adc	r23, r23
    2c98:	88 1f       	adc	r24, r24
    2c9a:	d2 f7       	brpl	.-12     	; 0x2c90 <__fp_norm2>
    2c9c:	08 95       	ret

00002c9e <__tablejump2__>:
    2c9e:	ee 0f       	add	r30, r30
    2ca0:	ff 1f       	adc	r31, r31

00002ca2 <__tablejump__>:
    2ca2:	05 90       	lpm	r0, Z+
    2ca4:	f4 91       	lpm	r31, Z
    2ca6:	e0 2d       	mov	r30, r0
    2ca8:	09 94       	ijmp

00002caa <__itoa_ncheck>:
    2caa:	bb 27       	eor	r27, r27
    2cac:	4a 30       	cpi	r20, 0x0A	; 10
    2cae:	31 f4       	brne	.+12     	; 0x2cbc <__itoa_ncheck+0x12>
    2cb0:	99 23       	and	r25, r25
    2cb2:	22 f4       	brpl	.+8      	; 0x2cbc <__itoa_ncheck+0x12>
    2cb4:	bd e2       	ldi	r27, 0x2D	; 45
    2cb6:	90 95       	com	r25
    2cb8:	81 95       	neg	r24
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__utoa_common>

00002cc0 <__utoa_ncheck>:
    2cc0:	bb 27       	eor	r27, r27

00002cc2 <__utoa_common>:
    2cc2:	fb 01       	movw	r30, r22
    2cc4:	55 27       	eor	r21, r21
    2cc6:	aa 27       	eor	r26, r26
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	aa 1f       	adc	r26, r26
    2cce:	a4 17       	cp	r26, r20
    2cd0:	10 f0       	brcs	.+4      	; 0x2cd6 <__utoa_common+0x14>
    2cd2:	a4 1b       	sub	r26, r20
    2cd4:	83 95       	inc	r24
    2cd6:	50 51       	subi	r21, 0x10	; 16
    2cd8:	b9 f7       	brne	.-18     	; 0x2cc8 <__utoa_common+0x6>
    2cda:	a0 5d       	subi	r26, 0xD0	; 208
    2cdc:	aa 33       	cpi	r26, 0x3A	; 58
    2cde:	08 f0       	brcs	.+2      	; 0x2ce2 <__utoa_common+0x20>
    2ce0:	a9 5d       	subi	r26, 0xD9	; 217
    2ce2:	a1 93       	st	Z+, r26
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	79 f7       	brne	.-34     	; 0x2cc6 <__utoa_common+0x4>
    2ce8:	b1 11       	cpse	r27, r1
    2cea:	b1 93       	st	Z+, r27
    2cec:	11 92       	st	Z+, r1
    2cee:	cb 01       	movw	r24, r22
    2cf0:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <strrev>

00002cf4 <strrev>:
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	67 2f       	mov	r22, r23
    2cfa:	71 91       	ld	r23, Z+
    2cfc:	77 23       	and	r23, r23
    2cfe:	e1 f7       	brne	.-8      	; 0x2cf8 <strrev+0x4>
    2d00:	32 97       	sbiw	r30, 0x02	; 2
    2d02:	04 c0       	rjmp	.+8      	; 0x2d0c <strrev+0x18>
    2d04:	7c 91       	ld	r23, X
    2d06:	6d 93       	st	X+, r22
    2d08:	70 83       	st	Z, r23
    2d0a:	62 91       	ld	r22, -Z
    2d0c:	ae 17       	cp	r26, r30
    2d0e:	bf 07       	cpc	r27, r31
    2d10:	c8 f3       	brcs	.-14     	; 0x2d04 <strrev+0x10>
    2d12:	08 95       	ret

00002d14 <_exit>:
    2d14:	f8 94       	cli

00002d16 <__stop_program>:
    2d16:	ff cf       	rjmp	.-2      	; 0x2d16 <__stop_program>


Blue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00003c0c  00003ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080013c  0080013c  00003cdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000362f  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd8  00000000  00000000  000075bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011bd  00000000  00000000  00008193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009b0  00000000  00000000  00009350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000094e  00000000  00000000  00009d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000402d  00000000  00000000  0000a64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0000e67b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 01 	jmp	0x37c	; 0x37c <__ctors_end>
       4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_3>
      10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      28:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__vector_10>
      2c:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__vector_11>
      30:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      68:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_29>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      94:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      98:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      9c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      ac:	01 02       	muls	r16, r17
      ae:	0c 02       	muls	r16, r28
      b0:	61 02       	muls	r22, r17
      b2:	80 02       	muls	r24, r16
      b4:	9f 02       	muls	r25, r31
      b6:	04 03       	mulsu	r16, r20
      b8:	b0 02       	muls	r27, r16
      ba:	f4 02       	muls	r31, r20
      bc:	d5 08       	sbc	r13, r5
      be:	e6 08       	sbc	r14, r6
      c0:	f7 08       	sbc	r15, r7
      c2:	08 09       	sbc	r16, r8
      c4:	19 09       	sbc	r17, r9
      c6:	2a 09       	sbc	r18, r10
      c8:	3b 09       	sbc	r19, r11
      ca:	07 2c       	mov	r0, r7
      cc:	7a a5       	ldd	r23, Y+42	; 0x2a
      ce:	ba 6c       	ori	r27, 0xCA	; 202
      d0:	c5 90       	lpm	r12, Z+
      d2:	da 3b       	cpi	r29, 0xBA	; 186
      d4:	93 65       	ori	r25, 0x53	; 83
      d6:	fc 8b       	std	Y+20, r31	; 0x14
      d8:	bc 53       	subi	r27, 0x3C	; 60
      da:	f8 10       	cpse	r15, r8
      dc:	fd 3c       	cpi	r31, 0xCD	; 205
      de:	56 92       	lac	Z, r5
      e0:	83 4d       	sbci	r24, 0xD3	; 211
      e2:	bd 87       	std	Y+13, r27	; 0x0d
      e4:	9d 3a       	cpi	r25, 0xAD	; 173
      e6:	b6 3d       	cpi	r27, 0xD6	; 214
      e8:	cb c9       	rjmp	.-3178   	; 0xfffff480 <__eeprom_end+0xff7ef480>
      ea:	bf 5b       	subi	r27, 0xBF	; 191
      ec:	be 73       	andi	r27, 0x3E	; 62
      ee:	da 0f       	add	r29, r26
      f0:	c9 3f       	cpi	r28, 0xF9	; 249

000000f2 <__trampolines_end>:
      f2:	47 61       	ori	r20, 0x17	; 23
      f4:	6d 65       	ori	r22, 0x5D	; 93
      f6:	20 6f       	ori	r18, 0xF0	; 240
      f8:	76 65       	ori	r23, 0x56	; 86
      fa:	72 0a       	sbc	r7, r18
	...

000000fd <__c.2091>:
      fd:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000107 <__c.2088>:
     107:	50 61 75 73 65 0a 00                                Pause..

0000010e <__c.2085>:
     10e:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000116 <__c.2082>:
     116:	47 6f 61 6c 20 41 0a 00                             Goal A..

0000011e <__c.2079>:
     11e:	50 6c 61 79 20 0a 00                                Play ..

00000125 <__c.2075>:
     125:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

00000131 <__c.2066>:
     131:	0a 00                                               ..

00000133 <__c.2064>:
     133:	2c 20 00                                            , .

00000136 <__c.2062>:
     136:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

0000013f <__c.2058>:
     13f:	0a 00                                               ..

00000141 <__c.2056>:
     141:	2c 20 00                                            , .

00000144 <__c.2054>:
     144:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     154:	3d 20 00                                            = .

00000157 <__c.2051>:
     157:	0a 00                                               ..

00000159 <__c.2049>:
     159:	2c 20 00                                            , .

0000015c <__c.2047>:
     15c:	67 6f 61 6c 20 3d 20 00                             goal = .

00000164 <__c.2040>:
     164:	0a 00                                               ..

00000166 <__c.2038>:
     166:	73 74 61 74 65 3a 20 00                             state: .

0000016e <__c.2099>:
     16e:	6c 6f 73 74 20 74 68 65 20 70 75 63 6b 21 0a 00     lost the puck!..

0000017e <__c.2097>:
     17e:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

0000018d <__c.2066>:
     18d:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000199 <__c.2064>:
     199:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001a4 <__c.2060>:
     1a4:	50 49 44 0a 00                                      PID..

000001a9 <__c.2058>:
     1a9:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001b5 <__c.2056>:
     1b5:	50 49 44 0a 00                                      PID..

000001ba <__c.2054>:
     1ba:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001c5 <__c.2051>:
     1c5:	0a 00                                               ..

000001c7 <__c.2049>:
     1c7:	2c 20 00                                            , .

000001ca <__c.2047>:
     1ca:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     1da:	3a 20 00                                            : .

000001dd <__c.2043>:
     1dd:	0d 0a 00                                            ...

000001e0 <__c.2041>:
     1e0:	0d 0a 00                                            ...

000001e3 <__c.2039>:
     1e3:	50 68 6f 5b 36 5d 00                                Pho[6].

000001ea <__c.2037>:
     1ea:	0d 0a 00                                            ...

000001ed <__c.2035>:
     1ed:	50 68 6f 5b 35 5d 00                                Pho[5].

000001f4 <__c.2033>:
     1f4:	0d 0a 00                                            ...

000001f7 <__c.2031>:
     1f7:	50 68 6f 5b 34 5d 00                                Pho[4].

000001fe <__c.2029>:
     1fe:	0d 0a 00                                            ...

00000201 <__c.2027>:
     201:	50 68 6f 5b 33 5d 00                                Pho[3].

00000208 <__c.2025>:
     208:	0d 0a 00                                            ...

0000020b <__c.2023>:
     20b:	50 68 6f 5b 32 5d 00                                Pho[2].

00000212 <__c.2021>:
     212:	0d 0a 00                                            ...

00000215 <__c.2019>:
     215:	50 68 6f 5b 31 5d 00                                Pho[1].

0000021c <__c.2017>:
     21c:	0d 0a 00                                            ...

0000021f <__c.2015>:
     21f:	50 68 6f 5b 30 5d 00                                Pho[0].

00000226 <__c.2013>:
     226:	0d 0a 00                                            ...

00000229 <__c.2146>:
     229:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000234 <__c.2144>:
     234:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000240 <__c.2142>:
     240:	0a 00                                               ..

00000242 <__c.2140>:
     242:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

0000024c <__c.2138>:
     24c:	0a 00                                               ..

0000024e <__c.2136>:
     24e:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000259 <__c.2128>:
     259:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000264 <__c.2126>:
     264:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000270 <__c.2124>:
     270:	0a 00                                               ..

00000272 <__c.2122>:
     272:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

0000027c <__c.2120>:
     27c:	0a 00                                               ..

0000027e <__c.2118>:
     27e:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

00000289 <__c.2110>:
     289:	0a 00                                               ..

0000028b <__c.2108>:
     28b:	61 6c 70 68 61 3a 20 00                             alpha: .

00000293 <__c.2084>:
     293:	0a 00                                               ..

00000295 <__c.2082>:
     295:	09 76 79 3a 20 30 2e 00                             .vy: 0..

0000029d <__c.2080>:
     29d:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

000002ae <__c.2078>:
     2ae:	0a 00                                               ..

000002b0 <__c.2076>:
     2b0:	09 09 79 3a 00                                      ..y:.

000002b5 <__c.2074>:
     2b5:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

000002c1 <__c.2046>:
     2c1:	0a 00                                               ..

000002c3 <__c.2044>:
     2c3:	64 6d 61 78 3a 00                                   dmax:.

000002c9 <descriptor_list>:
     2c9:	00 01 00 00 60 03 12 00 02 00 00 1d 03 43 00 03     ....`........C..
     2d9:	00 00 19 03 04 01 03 09 04 05 03 12 02 03 09 04     ................
     2e9:	fd 02 06 03 03 09 04 f3 02 08                       ..........

000002f3 <string3>:
     2f3:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000002fd <string2>:
     2fd:	06 03 4d 00 32 00 00 00                             ..M.2...

00000305 <string1>:
     305:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     315:	65 00 00 00                                         e...

00000319 <string0>:
     319:	04 03 09 04                                         ....

0000031d <config1_descriptor>:
     31d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     32d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     33d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     34d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     35d:	40 00 00                                            @..

00000360 <device_descriptor>:
     360:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     370:	03 01                                               ..

00000372 <endpoint_config_table>:
     372:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	da e0       	ldi	r29, 0x0A	; 10
     384:	de bf       	out	0x3e, r29	; 62
     386:	cd bf       	out	0x3d, r28	; 61

00000388 <__do_copy_data>:
     388:	11 e0       	ldi	r17, 0x01	; 1
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b1 e0       	ldi	r27, 0x01	; 1
     38e:	ec e0       	ldi	r30, 0x0C	; 12
     390:	fc e3       	ldi	r31, 0x3C	; 60
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x10>
     394:	05 90       	lpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	ac 33       	cpi	r26, 0x3C	; 60
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0xc>

0000039e <__do_clear_bss>:
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	ac e3       	ldi	r26, 0x3C	; 60
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	a4 3b       	cpi	r26, 0xB4	; 180
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
     3b2:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <_exit>

000003b6 <__bad_interrupt>:
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <__vector_3>:
		m_wait(wait);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
     3dc:	6a e0       	ldi	r22, 0x0A	; 10
     3de:	80 e5       	ldi	r24, 0x50	; 80
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <m_rf_read>
	switch(buffer[0]){
     3e6:	80 91 50 01 	lds	r24, 0x0150
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	fc 01       	movw	r30, r24
     3ee:	e0 5a       	subi	r30, 0xA0	; 160
     3f0:	f1 09       	sbc	r31, r1
     3f2:	e8 30       	cpi	r30, 0x08	; 8
     3f4:	f1 05       	cpc	r31, r1
     3f6:	08 f0       	brcs	.+2      	; 0x3fa <__vector_3+0x40>
     3f8:	07 c1       	rjmp	.+526    	; 0x608 <__vector_3+0x24e>
     3fa:	ea 5a       	subi	r30, 0xAA	; 170
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	0c 94 b5 1d 	jmp	0x3b6a	; 0x3b6a <__tablejump2__>
		case 0xA0:
		usb_tx_string("flash LED \n");
     402:	85 e2       	ldi	r24, 0x25	; 37
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		state = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 af 01 	sts	0x01AF, r25
     412:	80 93 ae 01 	sts	0x01AE, r24
		break;
     416:	f8 c0       	rjmp	.+496    	; 0x608 <__vector_3+0x24e>
		case 0xA1:
		m_usb_tx_string("Play \n");
     418:	8e e1       	ldi	r24, 0x1E	; 30
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		if(check(PINC, 7)){
     420:	37 9b       	sbis	0x06, 7	; 6
     422:	19 c0       	rjmp	.+50     	; 0x456 <__vector_3+0x9c>
			goal[0] = GateB;  // left gate
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	a8 ec       	ldi	r26, 0xC8	; 200
     42a:	b3 ec       	ldi	r27, 0xC3	; 195
     42c:	80 93 08 01 	sts	0x0108, r24
     430:	90 93 09 01 	sts	0x0109, r25
     434:	a0 93 0a 01 	sts	0x010A, r26
     438:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = -xline;  // left defense line
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a8 e4       	ldi	r26, 0x48	; 72
     442:	b3 ec       	ldi	r27, 0xC3	; 195
     444:	80 93 00 01 	sts	0x0100, r24
     448:	90 93 01 01 	sts	0x0101, r25
     44c:	a0 93 02 01 	sts	0x0102, r26
     450:	b0 93 03 01 	sts	0x0103, r27
     454:	18 c0       	rjmp	.+48     	; 0x486 <__vector_3+0xcc>
		}
		else{
			goal[0] = GateA;  // right gate
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a8 ec       	ldi	r26, 0xC8	; 200
     45c:	b3 e4       	ldi	r27, 0x43	; 67
     45e:	80 93 08 01 	sts	0x0108, r24
     462:	90 93 09 01 	sts	0x0109, r25
     466:	a0 93 0a 01 	sts	0x010A, r26
     46a:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = xline;	// right defense line
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a8 e4       	ldi	r26, 0x48	; 72
     474:	b3 e4       	ldi	r27, 0x43	; 67
     476:	80 93 00 01 	sts	0x0100, r24
     47a:	90 93 01 01 	sts	0x0101, r25
     47e:	a0 93 02 01 	sts	0x0102, r26
     482:	b0 93 03 01 	sts	0x0103, r27
		}
		if(check(PINC, 6)){
     486:	36 9b       	sbis	0x06, 6	; 6
     488:	03 c0       	rjmp	.+6      	; 0x490 <__vector_3+0xd6>
			set(PORTB, 2); // red light
     48a:	2a 9a       	sbi	0x05, 2	; 5
			clear(PORTB, 3);
     48c:	2b 98       	cbi	0x05, 3	; 5
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__vector_3+0xda>
		}
		else{
			set(PORTB, 3); // blue light
     490:	2b 9a       	sbi	0x05, 3	; 5
			clear(PORTB, 2);
     492:	2a 98       	cbi	0x05, 2	; 5
		}
		state = 2;
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	90 93 af 01 	sts	0x01AF, r25
     49c:	80 93 ae 01 	sts	0x01AE, r24
		findPuck(state);
     4a0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <findPuck>
		localization(&state, &goal[0], &c_wii[0], &dir[0]);
     4a4:	2c e3       	ldi	r18, 0x3C	; 60
     4a6:	31 e0       	ldi	r19, 0x01	; 1
     4a8:	44 e4       	ldi	r20, 0x44	; 68
     4aa:	51 e0       	ldi	r21, 0x01	; 1
     4ac:	68 e0       	ldi	r22, 0x08	; 8
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	8e ea       	ldi	r24, 0xAE	; 174
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <localization>
		deterState(&state);
     4b8:	8e ea       	ldi	r24, 0xAE	; 174
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <deterState>
		break;
     4c0:	a3 c0       	rjmp	.+326    	; 0x608 <__vector_3+0x24e>
		case 0xA2:
		m_usb_tx_string("Goal A\n");
     4c2:	86 e1       	ldi	r24, 0x16	; 22
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		scoreR = buffer[1];
     4ca:	80 91 51 01 	lds	r24, 0x0151
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	90 93 4f 01 	sts	0x014F, r25
     4d4:	80 93 4e 01 	sts	0x014E, r24
		scoreB = buffer[2];
     4d8:	80 91 52 01 	lds	r24, 0x0152
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 4d 01 	sts	0x014D, r25
     4e2:	80 93 4c 01 	sts	0x014C, r24
		OCR1B = 0;
     4e6:	10 92 8b 00 	sts	0x008B, r1
     4ea:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     4ee:	10 92 8d 00 	sts	0x008D, r1
     4f2:	10 92 8c 00 	sts	0x008C, r1
		state = 0;
     4f6:	10 92 af 01 	sts	0x01AF, r1
     4fa:	10 92 ae 01 	sts	0x01AE, r1
		break;
     4fe:	84 c0       	rjmp	.+264    	; 0x608 <__vector_3+0x24e>
		case 0xA3:
		m_usb_tx_string("Goal B\n");
     500:	8e e0       	ldi	r24, 0x0E	; 14
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		scoreR = buffer[1];
     508:	80 91 51 01 	lds	r24, 0x0151
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	90 93 4f 01 	sts	0x014F, r25
     512:	80 93 4e 01 	sts	0x014E, r24
		scoreB = buffer[2];
     516:	80 91 52 01 	lds	r24, 0x0152
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	90 93 4d 01 	sts	0x014D, r25
     520:	80 93 4c 01 	sts	0x014C, r24
		OCR1B = 0;
     524:	10 92 8b 00 	sts	0x008B, r1
     528:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     52c:	10 92 8d 00 	sts	0x008D, r1
     530:	10 92 8c 00 	sts	0x008C, r1
		state = 0;
     534:	10 92 af 01 	sts	0x01AF, r1
     538:	10 92 ae 01 	sts	0x01AE, r1
		break;
     53c:	65 c0       	rjmp	.+202    	; 0x608 <__vector_3+0x24e>
		case 0xA4:
		m_usb_tx_string("Pause\n");
     53e:	87 e0       	ldi	r24, 0x07	; 7
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		state = 0;
     546:	10 92 af 01 	sts	0x01AF, r1
     54a:	10 92 ae 01 	sts	0x01AE, r1
		OCR1B = 0;
     54e:	10 92 8b 00 	sts	0x008B, r1
     552:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     556:	10 92 8d 00 	sts	0x008D, r1
     55a:	10 92 8c 00 	sts	0x008C, r1
		break;
     55e:	54 c0       	rjmp	.+168    	; 0x608 <__vector_3+0x24e>
		case 0xA6:
		m_usb_tx_string("Halftime\n");
     560:	8d ef       	ldi	r24, 0xFD	; 253
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		if(check(PINC, 6)){
     568:	36 9b       	sbis	0x06, 6	; 6
     56a:	19 c0       	rjmp	.+50     	; 0x59e <__vector_3+0x1e4>
			goal[0] = GateB;  // left gate
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	a8 ec       	ldi	r26, 0xC8	; 200
     572:	b3 ec       	ldi	r27, 0xC3	; 195
     574:	80 93 08 01 	sts	0x0108, r24
     578:	90 93 09 01 	sts	0x0109, r25
     57c:	a0 93 0a 01 	sts	0x010A, r26
     580:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = -xline;  // left defense line
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a8 e4       	ldi	r26, 0x48	; 72
     58a:	b3 ec       	ldi	r27, 0xC3	; 195
     58c:	80 93 00 01 	sts	0x0100, r24
     590:	90 93 01 01 	sts	0x0101, r25
     594:	a0 93 02 01 	sts	0x0102, r26
     598:	b0 93 03 01 	sts	0x0103, r27
     59c:	18 c0       	rjmp	.+48     	; 0x5ce <__vector_3+0x214>
		}
		else{
			goal[0] = GateA;  // right gate
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a8 ec       	ldi	r26, 0xC8	; 200
     5a4:	b3 e4       	ldi	r27, 0x43	; 67
     5a6:	80 93 08 01 	sts	0x0108, r24
     5aa:	90 93 09 01 	sts	0x0109, r25
     5ae:	a0 93 0a 01 	sts	0x010A, r26
     5b2:	b0 93 0b 01 	sts	0x010B, r27
			desPos[0] = xline;	// right defense line
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	a8 e4       	ldi	r26, 0x48	; 72
     5bc:	b3 e4       	ldi	r27, 0x43	; 67
     5be:	80 93 00 01 	sts	0x0100, r24
     5c2:	90 93 01 01 	sts	0x0101, r25
     5c6:	a0 93 02 01 	sts	0x0102, r26
     5ca:	b0 93 03 01 	sts	0x0103, r27
		}

		state = 0;
     5ce:	10 92 af 01 	sts	0x01AF, r1
     5d2:	10 92 ae 01 	sts	0x01AE, r1
		OCR1B = 0;
     5d6:	10 92 8b 00 	sts	0x008B, r1
     5da:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     5de:	10 92 8d 00 	sts	0x008D, r1
     5e2:	10 92 8c 00 	sts	0x008C, r1
		break;
     5e6:	10 c0       	rjmp	.+32     	; 0x608 <__vector_3+0x24e>
		case 0xA7:
		m_usb_tx_string("Game over\n");
     5e8:	82 ef       	ldi	r24, 0xF2	; 242
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		state = 0;
     5f0:	10 92 af 01 	sts	0x01AF, r1
     5f4:	10 92 ae 01 	sts	0x01AE, r1
		OCR1B = 0;
     5f8:	10 92 8b 00 	sts	0x008B, r1
     5fc:	10 92 8a 00 	sts	0x008A, r1
		OCR1C = 0;
     600:	10 92 8d 00 	sts	0x008D, r1
     604:	10 92 8c 00 	sts	0x008C, r1
		break;
		
		default:
		break;
	}
}
     608:	ff 91       	pop	r31
     60a:	ef 91       	pop	r30
     60c:	bf 91       	pop	r27
     60e:	af 91       	pop	r26
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	7f 91       	pop	r23
     616:	6f 91       	pop	r22
     618:	5f 91       	pop	r21
     61a:	4f 91       	pop	r20
     61c:	3f 91       	pop	r19
     61e:	2f 91       	pop	r18
     620:	0f 90       	pop	r0
     622:	0f be       	out	0x3f, r0	; 63
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	18 95       	reti

0000062a <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
     62a:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
     62c:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
     62e:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
     630:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
     632:	80 e2       	ldi	r24, 0x20	; 32
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	90 93 89 00 	sts	0x0089, r25
     63a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     63e:	10 92 8b 00 	sts	0x008B, r1
     642:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     646:	10 92 8d 00 	sts	0x008D, r1
     64a:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
     64e:	a1 e8       	ldi	r26, 0x81	; 129
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	8c 91       	ld	r24, X
     654:	80 61       	ori	r24, 0x10	; 16
     656:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
     658:	8c 91       	ld	r24, X
     65a:	88 60       	ori	r24, 0x08	; 8
     65c:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
     65e:	e0 e8       	ldi	r30, 0x80	; 128
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	82 60       	ori	r24, 0x02	; 2
     666:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     668:	80 81       	ld	r24, Z
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
     66e:	80 81       	ld	r24, Z
     670:	80 62       	ori	r24, 0x20	; 32
     672:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
     674:	80 81       	ld	r24, Z
     676:	8f 7e       	andi	r24, 0xEF	; 239
     678:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
     67a:	80 81       	ld	r24, Z
     67c:	88 60       	ori	r24, 0x08	; 8
     67e:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
     680:	80 81       	ld	r24, Z
     682:	8b 7f       	andi	r24, 0xFB	; 251
     684:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
     686:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
     688:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
     68a:	8c 91       	ld	r24, X
     68c:	8b 7f       	andi	r24, 0xFB	; 251
     68e:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
     690:	8c 91       	ld	r24, X
     692:	8d 7f       	andi	r24, 0xFD	; 253
     694:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
     696:	8c 91       	ld	r24, X
     698:	81 60       	ori	r24, 0x01	; 1
     69a:	8c 93       	st	X, r24
     69c:	08 95       	ret

0000069e <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
     69e:	e1 e6       	ldi	r30, 0x61	; 97
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	80 83       	st	Z, r24
     6a6:	10 82       	st	Z, r1
	
	state = 0;
     6a8:	10 92 af 01 	sts	0x01AF, r1
     6ac:	10 92 ae 01 	sts	0x01AE, r1
	
	m_usb_init();
     6b0:	0e 94 65 16 	call	0x2cca	; 0x2cca <m_usb_init>
	
	m_wii_open();
     6b4:	0e 94 21 19 	call	0x3242	; 0x3242 <m_wii_open>
	//m_red(ON);
	//while(!m_wii_open());
	//m_red(OFF);
	
	m_red(ON);
     6b8:	6e 9a       	sbi	0x0d, 6	; 13
     6ba:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
     6bc:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
     6c0:	4a e0       	ldi	r20, 0x0A	; 10
     6c2:	6d e0       	ldi	r22, 0x0D	; 13
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <m_rf_open>
	m_red(OFF);
     6ca:	6e 9a       	sbi	0x0d, 6	; 13
     6cc:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
     6ce:	0e 94 15 03 	call	0x62a	; 0x62a <init_timer>
	init_ADC();
     6d2:	0e 94 ca 04 	call	0x994	; 0x994 <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
     6d6:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
     6d8:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
     6da:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
     6dc:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
     6de:	23 9a       	sbi	0x04, 3	; 4

	if(check(PINC, 7)){
     6e0:	37 9b       	sbis	0x06, 7	; 6
     6e2:	19 c0       	rjmp	.+50     	; 0x716 <main+0x78>
		goal[0] = GateB;  // left gate
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	a8 ec       	ldi	r26, 0xC8	; 200
     6ea:	b3 ec       	ldi	r27, 0xC3	; 195
     6ec:	80 93 08 01 	sts	0x0108, r24
     6f0:	90 93 09 01 	sts	0x0109, r25
     6f4:	a0 93 0a 01 	sts	0x010A, r26
     6f8:	b0 93 0b 01 	sts	0x010B, r27
		desPos[0] = xline;  // right defense line
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	a8 e4       	ldi	r26, 0x48	; 72
     702:	b3 e4       	ldi	r27, 0x43	; 67
     704:	80 93 00 01 	sts	0x0100, r24
     708:	90 93 01 01 	sts	0x0101, r25
     70c:	a0 93 02 01 	sts	0x0102, r26
     710:	b0 93 03 01 	sts	0x0103, r27
     714:	18 c0       	rjmp	.+48     	; 0x746 <main+0xa8>
	}
	else{
		goal[0] = GateA;  // right gate
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	a8 ec       	ldi	r26, 0xC8	; 200
     71c:	b3 e4       	ldi	r27, 0x43	; 67
     71e:	80 93 08 01 	sts	0x0108, r24
     722:	90 93 09 01 	sts	0x0109, r25
     726:	a0 93 0a 01 	sts	0x010A, r26
     72a:	b0 93 0b 01 	sts	0x010B, r27
		desPos[0] = -xline;	// left defense line
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	a8 e4       	ldi	r26, 0x48	; 72
     734:	b3 ec       	ldi	r27, 0xC3	; 195
     736:	80 93 00 01 	sts	0x0100, r24
     73a:	90 93 01 01 	sts	0x0101, r25
     73e:	a0 93 02 01 	sts	0x0102, r26
     742:	b0 93 03 01 	sts	0x0103, r27
	}
	if(check(PINC, 6)){
     746:	36 9b       	sbis	0x06, 6	; 6
     748:	1c c0       	rjmp	.+56     	; 0x782 <main+0xe4>
		set(PORTB, 2); // red light
     74a:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
     74c:	2b 98       	cbi	0x05, 3	; 5
			m_red(TOGGLE);
			m_wait(1000);	// wait
			break;
			
			case 2:		// play mode, find puck
			m_red(TOGGLE);
     74e:	68 94       	set
     750:	bb 24       	eor	r11, r11
     752:	b6 f8       	bld	r11, 6
			m_usb_tx_int(goal[1]);
			m_usb_tx_string("\n");
			break;
			
			case 4:		// teammate got the puck, back to defense
			m_green(TOGGLE);
     754:	68 94       	set
     756:	aa 24       	eor	r10, r10
     758:	a2 f8       	bld	r10, 2
			m_red(TOGGLE);
			localization(&state, &desPos[0], &c_wii[0], &dir[0]);
			m_usb_tx_string("Desire Position = ");
			m_usb_tx_int(desPos[0]);
			m_usb_tx_string(", ");
			m_usb_tx_int(desPos[1]);
     75a:	0f 2e       	mov	r0, r31
     75c:	f4 e0       	ldi	r31, 0x04	; 4
     75e:	cf 2e       	mov	r12, r31
     760:	f1 e0       	ldi	r31, 0x01	; 1
     762:	df 2e       	mov	r13, r31
     764:	f0 2d       	mov	r31, r0
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
			deterState(&state);
			m_usb_tx_string("goal = ");
			m_usb_tx_int(goal[0]);
			m_usb_tx_string(", ");
			m_usb_tx_int(goal[1]);
     766:	0f 2e       	mov	r0, r31
     768:	fc e0       	ldi	r31, 0x0C	; 12
     76a:	ef 2e       	mov	r14, r31
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	ff 2e       	mov	r15, r31
     770:	f0 2d       	mov	r31, r0
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
			// stop
			OCR1B = 0;
     772:	0a e8       	ldi	r16, 0x8A	; 138
     774:	10 e0       	ldi	r17, 0x00	; 0
			OCR1C = 0;
     776:	cc e8       	ldi	r28, 0x8C	; 140
     778:	d0 e0       	ldi	r29, 0x00	; 0
			if(check(PINC, 6)){
				toggle(PORTB, 2); // blue Red
				clear(PORTB, 3);
			}
			else{
				toggle(PORTB, 3); // red blue
     77a:	68 94       	set
     77c:	99 24       	eor	r9, r9
     77e:	93 f8       	bld	r9, 3
     780:	03 c0       	rjmp	.+6      	; 0x788 <main+0xea>
	if(check(PINC, 6)){
		set(PORTB, 2); // red light
		clear(PORTB, 3);
	}
	else{
		set(PORTB, 3); // blue light
     782:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
     784:	2a 98       	cbi	0x05, 2	; 5
     786:	e3 cf       	rjmp	.-58     	; 0x74e <main+0xb0>
	}
	while(1)
	{
		m_usb_tx_string("state: ");
     788:	86 e6       	ldi	r24, 0x66	; 102
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		m_usb_tx_int(state);
     790:	80 91 ae 01 	lds	r24, 0x01AE
     794:	90 91 af 01 	lds	r25, 0x01AF
     798:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
		m_usb_tx_string("\n");
     79c:	84 e6       	ldi	r24, 0x64	; 100
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		switch(state){
     7a4:	80 91 ae 01 	lds	r24, 0x01AE
     7a8:	90 91 af 01 	lds	r25, 0x01AF
     7ac:	82 30       	cpi	r24, 0x02	; 2
     7ae:	91 05       	cpc	r25, r1
     7b0:	71 f1       	breq	.+92     	; 0x80e <main+0x170>
     7b2:	2c f4       	brge	.+10     	; 0x7be <main+0x120>
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	61 f0       	breq	.+24     	; 0x7d0 <main+0x132>
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	81 f0       	breq	.+32     	; 0x7dc <main+0x13e>
     7bc:	cf c0       	rjmp	.+414    	; 0x95c <main+0x2be>
     7be:	84 30       	cpi	r24, 0x04	; 4
     7c0:	91 05       	cpc	r25, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <main+0x128>
     7c4:	77 c0       	rjmp	.+238    	; 0x8b4 <main+0x216>
     7c6:	f4 f1       	brlt	.+124    	; 0x844 <main+0x1a6>
     7c8:	05 97       	sbiw	r24, 0x05	; 5
     7ca:	09 f4       	brne	.+2      	; 0x7ce <main+0x130>
     7cc:	a9 c0       	rjmp	.+338    	; 0x920 <main+0x282>
     7ce:	c6 c0       	rjmp	.+396    	; 0x95c <main+0x2be>
			case 0:
			// stop
			OCR1B = 0;
     7d0:	f8 01       	movw	r30, r16
     7d2:	11 82       	std	Z+1, r1	; 0x01
     7d4:	10 82       	st	Z, r1
			OCR1C = 0;
     7d6:	19 82       	std	Y+1, r1	; 0x01
     7d8:	18 82       	st	Y, r1
			break;
     7da:	c0 c0       	rjmp	.+384    	; 0x95c <main+0x2be>
			
			case 1:		// comm test, flash a LED
			if(check(PINC, 6)){
     7dc:	36 9b       	sbis	0x06, 6	; 6
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <main+0x14c>
				toggle(PORTB, 2); // blue Red
     7e0:	85 b1       	in	r24, 0x05	; 5
     7e2:	8a 25       	eor	r24, r10
     7e4:	85 b9       	out	0x05, r24	; 5
				clear(PORTB, 3);
     7e6:	2b 98       	cbi	0x05, 3	; 5
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <main+0x154>
			}
			else{
				toggle(PORTB, 3); // red blue
     7ea:	85 b1       	in	r24, 0x05	; 5
     7ec:	89 25       	eor	r24, r9
     7ee:	85 b9       	out	0x05, r24	; 5
				clear(PORTB, 2);
     7f0:	2a 98       	cbi	0x05, 2	; 5
			}
			m_red(TOGGLE);
     7f2:	6e 9a       	sbi	0x0d, 6	; 13
     7f4:	8e b1       	in	r24, 0x0e	; 14
     7f6:	8b 25       	eor	r24, r11
     7f8:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	ff e3       	ldi	r31, 0x3F	; 63
     7fc:	2d e0       	ldi	r18, 0x0D	; 13
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	f1 50       	subi	r31, 0x01	; 1
     802:	20 40       	sbci	r18, 0x00	; 0
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <main+0x162>
     808:	00 c0       	rjmp	.+0      	; 0x80a <main+0x16c>
     80a:	00 00       	nop
     80c:	a7 c0       	rjmp	.+334    	; 0x95c <main+0x2be>
			m_wait(1000);	// wait
			break;
			
			case 2:		// play mode, find puck
			m_red(TOGGLE);
     80e:	6e 9a       	sbi	0x0d, 6	; 13
     810:	8e b1       	in	r24, 0x0e	; 14
     812:	8b 25       	eor	r24, r11
     814:	8e b9       	out	0x0e, r24	; 14
			m_green(OFF);
     816:	6a 9a       	sbi	0x0d, 2	; 13
     818:	72 9a       	sbi	0x0e, 2	; 14
			findPuck(state);
     81a:	80 91 ae 01 	lds	r24, 0x01AE
     81e:	90 91 af 01 	lds	r25, 0x01AF
     822:	0e 94 79 06 	call	0xcf2	; 0xcf2 <findPuck>
			deterState(&state);
     826:	8e ea       	ldi	r24, 0xAE	; 174
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <deterState>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
     82e:	2c e3       	ldi	r18, 0x3C	; 60
     830:	31 e0       	ldi	r19, 0x01	; 1
     832:	44 e4       	ldi	r20, 0x44	; 68
     834:	51 e0       	ldi	r21, 0x01	; 1
     836:	68 e0       	ldi	r22, 0x08	; 8
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	8e ea       	ldi	r24, 0xAE	; 174
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <localization>
			break;
     842:	8c c0       	rjmp	.+280    	; 0x95c <main+0x2be>
			
			case 3:		// got the puck, find goal
			m_green(TOGGLE);
     844:	6a 9a       	sbi	0x0d, 2	; 13
     846:	8e b1       	in	r24, 0x0e	; 14
     848:	8a 25       	eor	r24, r10
     84a:	8e b9       	out	0x0e, r24	; 14
			m_red(OFF);
     84c:	6e 9a       	sbi	0x0d, 6	; 13
     84e:	76 9a       	sbi	0x0e, 6	; 14
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
     850:	2c e3       	ldi	r18, 0x3C	; 60
     852:	31 e0       	ldi	r19, 0x01	; 1
     854:	44 e4       	ldi	r20, 0x44	; 68
     856:	51 e0       	ldi	r21, 0x01	; 1
     858:	68 e0       	ldi	r22, 0x08	; 8
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	8e ea       	ldi	r24, 0xAE	; 174
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <localization>
			deterState(&state);
     864:	8e ea       	ldi	r24, 0xAE	; 174
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 6e 09 	call	0x12dc	; 0x12dc <deterState>
			m_usb_tx_string("goal = ");
     86c:	8c e5       	ldi	r24, 0x5C	; 92
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
			m_usb_tx_int(goal[0]);
     874:	60 91 08 01 	lds	r22, 0x0108
     878:	70 91 09 01 	lds	r23, 0x0109
     87c:	80 91 0a 01 	lds	r24, 0x010A
     880:	90 91 0b 01 	lds	r25, 0x010B
     884:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
     888:	cb 01       	movw	r24, r22
     88a:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
			m_usb_tx_string(", ");
     88e:	89 e5       	ldi	r24, 0x59	; 89
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
			m_usb_tx_int(goal[1]);
     896:	f7 01       	movw	r30, r14
     898:	60 81       	ld	r22, Z
     89a:	71 81       	ldd	r23, Z+1	; 0x01
     89c:	82 81       	ldd	r24, Z+2	; 0x02
     89e:	93 81       	ldd	r25, Z+3	; 0x03
     8a0:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
     8a4:	cb 01       	movw	r24, r22
     8a6:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
			m_usb_tx_string("\n");
     8aa:	87 e5       	ldi	r24, 0x57	; 87
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
			break;
     8b2:	54 c0       	rjmp	.+168    	; 0x95c <main+0x2be>
			
			case 4:		// teammate got the puck, back to defense
			m_green(TOGGLE);
     8b4:	6a 9a       	sbi	0x0d, 2	; 13
     8b6:	8e b1       	in	r24, 0x0e	; 14
     8b8:	8a 25       	eor	r24, r10
     8ba:	8e b9       	out	0x0e, r24	; 14
			m_red(TOGGLE);
     8bc:	6e 9a       	sbi	0x0d, 6	; 13
     8be:	8e b1       	in	r24, 0x0e	; 14
     8c0:	8b 25       	eor	r24, r11
     8c2:	8e b9       	out	0x0e, r24	; 14
			localization(&state, &desPos[0], &c_wii[0], &dir[0]);
     8c4:	2c e3       	ldi	r18, 0x3C	; 60
     8c6:	31 e0       	ldi	r19, 0x01	; 1
     8c8:	44 e4       	ldi	r20, 0x44	; 68
     8ca:	51 e0       	ldi	r21, 0x01	; 1
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	71 e0       	ldi	r23, 0x01	; 1
     8d0:	8e ea       	ldi	r24, 0xAE	; 174
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <localization>
			m_usb_tx_string("Desire Position = ");
     8d8:	84 e4       	ldi	r24, 0x44	; 68
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
			m_usb_tx_int(desPos[0]);
     8e0:	60 91 00 01 	lds	r22, 0x0100
     8e4:	70 91 01 01 	lds	r23, 0x0101
     8e8:	80 91 02 01 	lds	r24, 0x0102
     8ec:	90 91 03 01 	lds	r25, 0x0103
     8f0:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
     8f4:	cb 01       	movw	r24, r22
     8f6:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
			m_usb_tx_string(", ");
     8fa:	81 e4       	ldi	r24, 0x41	; 65
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
			m_usb_tx_int(desPos[1]);
     902:	f6 01       	movw	r30, r12
     904:	60 81       	ld	r22, Z
     906:	71 81       	ldd	r23, Z+1	; 0x01
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	93 81       	ldd	r25, Z+3	; 0x03
     90c:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
     910:	cb 01       	movw	r24, r22
     912:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
			m_usb_tx_string("\n");
     916:	8f e3       	ldi	r24, 0x3F	; 63
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
			break;
     91e:	1e c0       	rjmp	.+60     	; 0x95c <main+0x2be>
			
			case 5:		// defense mode
			m_red(TOGGLE);
     920:	6e 9a       	sbi	0x0d, 6	; 13
     922:	8e b1       	in	r24, 0x0e	; 14
     924:	8b 25       	eor	r24, r11
     926:	8e b9       	out	0x0e, r24	; 14
			m_green(TOGGLE);
     928:	6a 9a       	sbi	0x0d, 2	; 13
     92a:	8e b1       	in	r24, 0x0e	; 14
     92c:	8a 25       	eor	r24, r10
     92e:	8e b9       	out	0x0e, r24	; 14
			findPuck(state);
     930:	80 91 ae 01 	lds	r24, 0x01AE
     934:	90 91 af 01 	lds	r25, 0x01AF
     938:	0e 94 79 06 	call	0xcf2	; 0xcf2 <findPuck>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
     93c:	2c e3       	ldi	r18, 0x3C	; 60
     93e:	31 e0       	ldi	r19, 0x01	; 1
     940:	44 e4       	ldi	r20, 0x44	; 68
     942:	51 e0       	ldi	r21, 0x01	; 1
     944:	68 e0       	ldi	r22, 0x08	; 8
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	8e ea       	ldi	r24, 0xAE	; 174
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <localization>
			ifGotoPuck(&state, &dir[0]);
     950:	6c e3       	ldi	r22, 0x3C	; 60
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	8e ea       	ldi	r24, 0xAE	; 174
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 95 09 	call	0x132a	; 0x132a <ifGotoPuck>
			
			default:
			break;
		}
		
		m_usb_tx_string("1B, 1C: ");
     95c:	86 e3       	ldi	r24, 0x36	; 54
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		m_usb_tx_int(OCR1B);
     964:	f8 01       	movw	r30, r16
     966:	80 81       	ld	r24, Z
     968:	91 81       	ldd	r25, Z+1	; 0x01
     96a:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
		m_usb_tx_string(", ");
     96e:	83 e3       	ldi	r24, 0x33	; 51
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		m_usb_tx_int(OCR1C);
     976:	88 81       	ld	r24, Y
     978:	99 81       	ldd	r25, Y+1	; 0x01
     97a:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
		m_usb_tx_string("\n");
     97e:	81 e3       	ldi	r24, 0x31	; 49
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
     986:	85 ea       	ldi	r24, 0xA5	; 165
     988:	9e e0       	ldi	r25, 0x0E	; 14
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <main+0x2ec>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <main+0x2f2>
     990:	00 00       	nop
     992:	fa ce       	rjmp	.-524    	; 0x788 <main+0xea>

00000994 <init_ADC>:
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)

void init_ADC(void){
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     998:	ac e7       	ldi	r26, 0x7C	; 124
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	8c 91       	ld	r24, X
     99e:	8f 77       	andi	r24, 0x7F	; 127
     9a0:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     9a2:	8c 91       	ld	r24, X
     9a4:	80 64       	ori	r24, 0x40	; 64
     9a6:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     9a8:	ea e7       	ldi	r30, 0x7A	; 122
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	84 60       	ori	r24, 0x04	; 4
     9b0:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     9b2:	80 81       	ld	r24, Z
     9b4:	82 60       	ori	r24, 0x02	; 2
     9b6:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     9b8:	80 81       	ld	r24, Z
     9ba:	81 60       	ori	r24, 0x01	; 1
     9bc:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     9be:	ce e7       	ldi	r28, 0x7E	; 126
     9c0:	d0 e0       	ldi	r29, 0x00	; 0
     9c2:	88 81       	ld	r24, Y
     9c4:	81 60       	ori	r24, 0x01	; 1
     9c6:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     9c8:	88 81       	ld	r24, Y
     9ca:	82 60       	ori	r24, 0x02	; 2
     9cc:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     9ce:	cd e7       	ldi	r28, 0x7D	; 125
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
     9d2:	88 81       	ld	r24, Y
     9d4:	82 60       	ori	r24, 0x02	; 2
     9d6:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     9d8:	88 81       	ld	r24, Y
     9da:	84 60       	ori	r24, 0x04	; 4
     9dc:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     9de:	88 81       	ld	r24, Y
     9e0:	88 60       	ori	r24, 0x08	; 8
     9e2:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     9e4:	88 81       	ld	r24, Y
     9e6:	80 61       	ori	r24, 0x10	; 16
     9e8:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     9ea:	88 81       	ld	r24, Y
     9ec:	81 60       	ori	r24, 0x01	; 1
     9ee:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     9f0:	cb e7       	ldi	r28, 0x7B	; 123
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
     9f4:	88 81       	ld	r24, Y
     9f6:	8f 7d       	andi	r24, 0xDF	; 223
     9f8:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     9fa:	8c 91       	ld	r24, X
     9fc:	8b 7f       	andi	r24, 0xFB	; 251
     9fe:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     a00:	8c 91       	ld	r24, X
     a02:	8d 7f       	andi	r24, 0xFD	; 253
     a04:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     a06:	8c 91       	ld	r24, X
     a08:	8e 7f       	andi	r24, 0xFE	; 254
     a0a:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     a0c:	80 81       	ld	r24, Z
     a0e:	80 62       	ori	r24, 0x20	; 32
     a10:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     a12:	80 81       	ld	r24, Z
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	80 83       	st	Z, r24
	sei();
     a18:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     a1a:	80 81       	ld	r24, Z
     a1c:	80 68       	ori	r24, 0x80	; 128
     a1e:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     a20:	80 81       	ld	r24, Z
     a22:	80 64       	ori	r24, 0x40	; 64
     a24:	80 83       	st	Z, r24
}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <PID_Pho>:
			break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     a2c:	8f 92       	push	r8
     a2e:	9f 92       	push	r9
     a30:	af 92       	push	r10
     a32:	bf 92       	push	r11
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	6b 01       	movw	r12, r22
     a46:	7c 01       	movw	r14, r24
     a48:	49 01       	movw	r8, r18
     a4a:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     a4c:	c0 91 64 01 	lds	r28, 0x0164
     a50:	d0 91 65 01 	lds	r29, 0x0165
     a54:	80 91 68 01 	lds	r24, 0x0168
     a58:	90 91 69 01 	lds	r25, 0x0169
     a5c:	c8 0f       	add	r28, r24
     a5e:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     a60:	20 91 66 01 	lds	r18, 0x0166
     a64:	30 91 67 01 	lds	r19, 0x0167
     a68:	80 91 6a 01 	lds	r24, 0x016A
     a6c:	90 91 6b 01 	lds	r25, 0x016B
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     a74:	c8 1b       	sub	r28, r24
     a76:	d9 0b       	sbc	r29, r25
     a78:	d0 93 b3 01 	sts	0x01B3, r29
     a7c:	c0 93 b2 01 	sts	0x01B2, r28
	diff_Pho = input - input_last;
     a80:	80 91 60 01 	lds	r24, 0x0160
     a84:	90 91 61 01 	lds	r25, 0x0161
     a88:	8e 01       	movw	r16, r28
     a8a:	08 1b       	sub	r16, r24
     a8c:	19 0b       	sbc	r17, r25
     a8e:	10 93 5d 01 	sts	0x015D, r17
     a92:	00 93 5c 01 	sts	0x015C, r16
	sum_Pho = sum_Pho + input;
     a96:	80 91 5e 01 	lds	r24, 0x015E
     a9a:	90 91 5f 01 	lds	r25, 0x015F
     a9e:	8c 0f       	add	r24, r28
     aa0:	9d 1f       	adc	r25, r29
     aa2:	90 93 5f 01 	sts	0x015F, r25
     aa6:	80 93 5e 01 	sts	0x015E, r24
	output = Kp * input + Kd * diff_Pho;
     aaa:	be 01       	movw	r22, r28
     aac:	88 27       	eor	r24, r24
     aae:	77 fd       	sbrc	r23, 7
     ab0:	80 95       	com	r24
     ab2:	98 2f       	mov	r25, r24
     ab4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
     ab8:	a7 01       	movw	r20, r14
     aba:	96 01       	movw	r18, r12
     abc:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
     ac0:	6b 01       	movw	r12, r22
     ac2:	7c 01       	movw	r14, r24
     ac4:	b8 01       	movw	r22, r16
     ac6:	88 27       	eor	r24, r24
     ac8:	77 fd       	sbrc	r23, 7
     aca:	80 95       	com	r24
     acc:	98 2f       	mov	r25, r24
     ace:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
     ad2:	a5 01       	movw	r20, r10
     ad4:	94 01       	movw	r18, r8
     ad6:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
     ada:	9b 01       	movw	r18, r22
     adc:	ac 01       	movw	r20, r24
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
     ae6:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
     aea:	70 93 b1 01 	sts	0x01B1, r23
     aee:	60 93 b0 01 	sts	0x01B0, r22
	
	input_last = input;
     af2:	d0 93 61 01 	sts	0x0161, r29
     af6:	c0 93 60 01 	sts	0x0160, r28
	
	if(output>0){
     afa:	16 16       	cp	r1, r22
     afc:	17 06       	cpc	r1, r23
     afe:	74 f5       	brge	.+92     	; 0xb5c <__stack+0x5d>
		OCR1C = full_speed - abs(output);
     b00:	9b 01       	movw	r18, r22
     b02:	77 23       	and	r23, r23
     b04:	24 f4       	brge	.+8      	; 0xb0e <__stack+0xf>
     b06:	22 27       	eor	r18, r18
     b08:	33 27       	eor	r19, r19
     b0a:	26 1b       	sub	r18, r22
     b0c:	37 0b       	sbc	r19, r23
     b0e:	8a e8       	ldi	r24, 0x8A	; 138
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	82 1b       	sub	r24, r18
     b14:	93 0b       	sbc	r25, r19
     b16:	90 93 8d 00 	sts	0x008D, r25
     b1a:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     b1e:	20 91 10 01 	lds	r18, 0x0110
     b22:	30 91 11 01 	lds	r19, 0x0111
     b26:	80 91 b0 01 	lds	r24, 0x01B0
     b2a:	90 91 b1 01 	lds	r25, 0x01B1
     b2e:	99 23       	and	r25, r25
     b30:	1c f4       	brge	.+6      	; 0xb38 <__stack+0x39>
     b32:	91 95       	neg	r25
     b34:	81 95       	neg	r24
     b36:	91 09       	sbc	r25, r1
     b38:	28 17       	cp	r18, r24
     b3a:	39 07       	cpc	r19, r25
     b3c:	44 f4       	brge	.+16     	; 0xb4e <__stack+0x4f>
			OCR1C = full_speed - speed_diff_Pho;
     b3e:	8a e8       	ldi	r24, 0x8A	; 138
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	82 1b       	sub	r24, r18
     b44:	93 0b       	sbc	r25, r19
     b46:	90 93 8d 00 	sts	0x008D, r25
     b4a:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     b4e:	8a e8       	ldi	r24, 0x8A	; 138
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	90 93 8b 00 	sts	0x008B, r25
     b56:	80 93 8a 00 	sts	0x008A, r24
     b5a:	2d c0       	rjmp	.+90     	; 0xbb6 <__stack+0xb7>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     b5c:	9b 01       	movw	r18, r22
     b5e:	77 23       	and	r23, r23
     b60:	24 f4       	brge	.+8      	; 0xb6a <__stack+0x6b>
     b62:	22 27       	eor	r18, r18
     b64:	33 27       	eor	r19, r19
     b66:	26 1b       	sub	r18, r22
     b68:	37 0b       	sbc	r19, r23
     b6a:	8a e8       	ldi	r24, 0x8A	; 138
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	82 1b       	sub	r24, r18
     b70:	93 0b       	sbc	r25, r19
     b72:	90 93 8b 00 	sts	0x008B, r25
     b76:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     b7a:	20 91 10 01 	lds	r18, 0x0110
     b7e:	30 91 11 01 	lds	r19, 0x0111
     b82:	80 91 b0 01 	lds	r24, 0x01B0
     b86:	90 91 b1 01 	lds	r25, 0x01B1
     b8a:	99 23       	and	r25, r25
     b8c:	1c f4       	brge	.+6      	; 0xb94 <__stack+0x95>
     b8e:	91 95       	neg	r25
     b90:	81 95       	neg	r24
     b92:	91 09       	sbc	r25, r1
     b94:	28 17       	cp	r18, r24
     b96:	39 07       	cpc	r19, r25
     b98:	44 f4       	brge	.+16     	; 0xbaa <__stack+0xab>
			OCR1B = full_speed - speed_diff_Pho;
     b9a:	8a e8       	ldi	r24, 0x8A	; 138
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	82 1b       	sub	r24, r18
     ba0:	93 0b       	sbc	r25, r19
     ba2:	90 93 8b 00 	sts	0x008B, r25
     ba6:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     baa:	8a e8       	ldi	r24, 0x8A	; 138
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	90 93 8d 00 	sts	0x008D, r25
     bb2:	80 93 8c 00 	sts	0x008C, r24
	}
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	9f 90       	pop	r9
     bcc:	8f 90       	pop	r8
     bce:	08 95       	ret

00000bd0 <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     bd0:	8f 92       	push	r8
     bd2:	9f 92       	push	r9
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	6b 01       	movw	r12, r22
     bea:	7c 01       	movw	r14, r24
     bec:	49 01       	movw	r8, r18
     bee:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     bf0:	c0 91 64 01 	lds	r28, 0x0164
     bf4:	d0 91 65 01 	lds	r29, 0x0165
     bf8:	80 91 68 01 	lds	r24, 0x0168
     bfc:	90 91 69 01 	lds	r25, 0x0169
     c00:	c8 0f       	add	r28, r24
     c02:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     c04:	20 91 66 01 	lds	r18, 0x0166
     c08:	30 91 67 01 	lds	r19, 0x0167
     c0c:	80 91 6a 01 	lds	r24, 0x016A
     c10:	90 91 6b 01 	lds	r25, 0x016B
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     c18:	c8 1b       	sub	r28, r24
     c1a:	d9 0b       	sbc	r29, r25
     c1c:	d0 93 b3 01 	sts	0x01B3, r29
     c20:	c0 93 b2 01 	sts	0x01B2, r28
	diff_stalk = input - input_last;
     c24:	80 91 60 01 	lds	r24, 0x0160
     c28:	90 91 61 01 	lds	r25, 0x0161
     c2c:	8e 01       	movw	r16, r28
     c2e:	08 1b       	sub	r16, r24
     c30:	19 0b       	sbc	r17, r25
     c32:	10 93 5b 01 	sts	0x015B, r17
     c36:	00 93 5a 01 	sts	0x015A, r16
	output = Kp * input + Kd * diff_stalk;
     c3a:	be 01       	movw	r22, r28
     c3c:	88 27       	eor	r24, r24
     c3e:	77 fd       	sbrc	r23, 7
     c40:	80 95       	com	r24
     c42:	98 2f       	mov	r25, r24
     c44:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
     c48:	a7 01       	movw	r20, r14
     c4a:	96 01       	movw	r18, r12
     c4c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
     c50:	6b 01       	movw	r12, r22
     c52:	7c 01       	movw	r14, r24
     c54:	b8 01       	movw	r22, r16
     c56:	88 27       	eor	r24, r24
     c58:	77 fd       	sbrc	r23, 7
     c5a:	80 95       	com	r24
     c5c:	98 2f       	mov	r25, r24
     c5e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
     c62:	a5 01       	movw	r20, r10
     c64:	94 01       	movw	r18, r8
     c66:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
     c6a:	9b 01       	movw	r18, r22
     c6c:	ac 01       	movw	r20, r24
     c6e:	c7 01       	movw	r24, r14
     c70:	b6 01       	movw	r22, r12
     c72:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
     c76:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
     c7a:	70 93 b1 01 	sts	0x01B1, r23
     c7e:	60 93 b0 01 	sts	0x01B0, r22
	
	input_last = input;
     c82:	d0 93 61 01 	sts	0x0161, r29
     c86:	c0 93 60 01 	sts	0x0160, r28
	
	if(abs(output) >= full_speed_stalk){
     c8a:	9b 01       	movw	r18, r22
     c8c:	77 23       	and	r23, r23
     c8e:	24 f4       	brge	.+8      	; 0xc98 <PID_stalk+0xc8>
     c90:	22 27       	eor	r18, r18
     c92:	33 27       	eor	r19, r19
     c94:	26 1b       	sub	r18, r22
     c96:	37 0b       	sbc	r19, r23
     c98:	2a 38       	cpi	r18, 0x8A	; 138
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	38 07       	cpc	r19, r24
     c9e:	5c f0       	brlt	.+22     	; 0xcb6 <PID_stalk+0xe6>
		OCR1C = full_speed_stalk;
     ca0:	8a e8       	ldi	r24, 0x8A	; 138
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	90 93 8d 00 	sts	0x008D, r25
     ca8:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     cac:	90 93 8b 00 	sts	0x008B, r25
     cb0:	80 93 8a 00 	sts	0x008A, r24
     cb4:	11 c0       	rjmp	.+34     	; 0xcd8 <PID_stalk+0x108>
	}
	else{
		OCR1C = abs(output);
     cb6:	30 93 8d 00 	sts	0x008D, r19
     cba:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     cbe:	80 91 b0 01 	lds	r24, 0x01B0
     cc2:	90 91 b1 01 	lds	r25, 0x01B1
     cc6:	99 23       	and	r25, r25
     cc8:	1c f4       	brge	.+6      	; 0xcd0 <PID_stalk+0x100>
     cca:	91 95       	neg	r25
     ccc:	81 95       	neg	r24
     cce:	91 09       	sbc	r25, r1
     cd0:	90 93 8b 00 	sts	0x008B, r25
     cd4:	80 93 8a 00 	sts	0x008A, r24
	}
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	af 90       	pop	r10
     cec:	9f 90       	pop	r9
     cee:	8f 90       	pop	r8
     cf0:	08 95       	ret

00000cf2 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     cf2:	6f 92       	push	r6
     cf4:	7f 92       	push	r7
     cf6:	8f 92       	push	r8
     cf8:	9f 92       	push	r9
     cfa:	af 92       	push	r10
     cfc:	bf 92       	push	r11
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	5c 01       	movw	r10, r24
	m_usb_tx_string("\r\n");
     d10:	86 e2       	ldi	r24, 0x26	; 38
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("Pho[0]");
     d18:	8f e1       	ldi	r24, 0x1F	; 31
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(Pho[0]);
     d20:	0f 2e       	mov	r0, r31
     d22:	f4 e6       	ldi	r31, 0x64	; 100
     d24:	8f 2e       	mov	r8, r31
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	9f 2e       	mov	r9, r31
     d2a:	f0 2d       	mov	r31, r0
     d2c:	f4 01       	movw	r30, r8
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d36:	8c e1       	ldi	r24, 0x1C	; 28
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("Pho[1]");
     d3e:	85 e1       	ldi	r24, 0x15	; 21
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(Pho[1]);
     d46:	06 e6       	ldi	r16, 0x66	; 102
     d48:	11 e0       	ldi	r17, 0x01	; 1
     d4a:	f8 01       	movw	r30, r16
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d54:	82 e1       	ldi	r24, 0x12	; 18
     d56:	92 e0       	ldi	r25, 0x02	; 2
     d58:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("Pho[2]");
     d5c:	8b e0       	ldi	r24, 0x0B	; 11
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(Pho[2]);
     d64:	0f 2e       	mov	r0, r31
     d66:	f8 e6       	ldi	r31, 0x68	; 104
     d68:	cf 2e       	mov	r12, r31
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
     d6c:	df 2e       	mov	r13, r31
     d6e:	f0 2d       	mov	r31, r0
     d70:	f6 01       	movw	r30, r12
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d7a:	88 e0       	ldi	r24, 0x08	; 8
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("Pho[3]");
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(Pho[3]);
     d8a:	ca e6       	ldi	r28, 0x6A	; 106
     d8c:	d1 e0       	ldi	r29, 0x01	; 1
     d8e:	88 81       	ld	r24, Y
     d90:	99 81       	ldd	r25, Y+1	; 0x01
     d92:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     d96:	8e ef       	ldi	r24, 0xFE	; 254
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("Pho[4]");
     d9e:	87 ef       	ldi	r24, 0xF7	; 247
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(Pho[4]);
     da6:	0f 2e       	mov	r0, r31
     da8:	fc e6       	ldi	r31, 0x6C	; 108
     daa:	ef 2e       	mov	r14, r31
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	ff 2e       	mov	r15, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	f7 01       	movw	r30, r14
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     dbc:	84 ef       	ldi	r24, 0xF4	; 244
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("Pho[5]");
     dc4:	8d ee       	ldi	r24, 0xED	; 237
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(Pho[5]);
     dcc:	0f 2e       	mov	r0, r31
     dce:	fe e6       	ldi	r31, 0x6E	; 110
     dd0:	6f 2e       	mov	r6, r31
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	7f 2e       	mov	r7, r31
     dd6:	f0 2d       	mov	r31, r0
     dd8:	f3 01       	movw	r30, r6
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     de2:	8a ee       	ldi	r24, 0xEA	; 234
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("Pho[6]");
     dea:	83 ee       	ldi	r24, 0xE3	; 227
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(Pho[6]);
     df2:	80 91 70 01 	lds	r24, 0x0170
     df6:	90 91 71 01 	lds	r25, 0x0171
     dfa:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     dfe:	80 ee       	ldi	r24, 0xE0	; 224
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_string("\r\n");
     e06:	8d ed       	ldi	r24, 0xDD	; 221
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	int mean024 = (Pho[0] + Pho[2] + Pho[4])/3;
     e0e:	f4 01       	movw	r30, r8
     e10:	20 81       	ld	r18, Z
     e12:	31 81       	ldd	r19, Z+1	; 0x01
     e14:	f6 01       	movw	r30, r12
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	f7 01       	movw	r30, r14
     e20:	20 81       	ld	r18, Z
     e22:	31 81       	ldd	r19, Z+1	; 0x01
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	23 e0       	ldi	r18, 0x03	; 3
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	b9 01       	movw	r22, r18
     e2e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__divmodhi4>
     e32:	7b 01       	movw	r14, r22
     e34:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3] + Pho[5])/3;
     e36:	f8 01       	movw	r30, r16
     e38:	40 81       	ld	r20, Z
     e3a:	51 81       	ldd	r21, Z+1	; 0x01
     e3c:	88 81       	ld	r24, Y
     e3e:	99 81       	ldd	r25, Y+1	; 0x01
     e40:	84 0f       	add	r24, r20
     e42:	95 1f       	adc	r25, r21
     e44:	f3 01       	movw	r30, r6
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	b9 01       	movw	r22, r18
     e50:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__divmodhi4>
     e54:	eb 01       	movw	r28, r22
     e56:	8b 01       	movw	r16, r22
	
	m_usb_tx_string("mean024, mean135: ");
     e58:	8a ec       	ldi	r24, 0xCA	; 202
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(mean024);
     e60:	c7 01       	movw	r24, r14
     e62:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string(", ");
     e66:	87 ec       	ldi	r24, 0xC7	; 199
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(mean135);
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
     e74:	85 ec       	ldi	r24, 0xC5	; 197
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	switch(state){
     e7c:	f2 e0       	ldi	r31, 0x02	; 2
     e7e:	af 16       	cp	r10, r31
     e80:	b1 04       	cpc	r11, r1
     e82:	31 f0       	breq	.+12     	; 0xe90 <findPuck+0x19e>
     e84:	45 e0       	ldi	r20, 0x05	; 5
     e86:	a4 16       	cp	r10, r20
     e88:	b1 04       	cpc	r11, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <findPuck+0x19c>
     e8c:	bb c0       	rjmp	.+374    	; 0x1004 <findPuck+0x312>
     e8e:	10 c1       	rjmp	.+544    	; 0x10b0 <findPuck+0x3be>
		case 2:
			if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     e90:	c7 01       	movw	r24, r14
     e92:	8c 1b       	sub	r24, r28
     e94:	9d 0b       	sbc	r25, r29
     e96:	c3 97       	sbiw	r24, 0x33	; 51
     e98:	84 f4       	brge	.+32     	; 0xeba <findPuck+0x1c8>
     e9a:	ce 15       	cp	r28, r14
     e9c:	df 05       	cpc	r29, r15
     e9e:	0c f0       	brlt	.+2      	; 0xea2 <findPuck+0x1b0>
     ea0:	50 c0       	rjmp	.+160    	; 0xf42 <findPuck+0x250>
     ea2:	20 91 6c 01 	lds	r18, 0x016C
     ea6:	30 91 6d 01 	lds	r19, 0x016D
     eaa:	80 91 68 01 	lds	r24, 0x0168
     eae:	90 91 69 01 	lds	r25, 0x0169
     eb2:	82 17       	cp	r24, r18
     eb4:	93 07       	cpc	r25, r19
     eb6:	0c f0       	brlt	.+2      	; 0xeba <findPuck+0x1c8>
     eb8:	44 c0       	rjmp	.+136    	; 0xf42 <findPuck+0x250>
				m_usb_tx_string("turn left\n");
     eba:	8a eb       	ldi	r24, 0xBA	; 186
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
				if(mean024 > revThres){
     ec2:	59 e9       	ldi	r21, 0x99	; 153
     ec4:	c5 16       	cp	r12, r21
     ec6:	58 e0       	ldi	r21, 0x08	; 8
     ec8:	d5 06       	cpc	r13, r21
     eca:	6c f0       	brlt	.+26     	; 0xee6 <findPuck+0x1f4>
					set(PORTB, 0);
     ecc:	28 9a       	sbi	0x05, 0	; 5
					clear(PORTB, 1);
     ece:	29 98       	cbi	0x05, 1	; 5
					OCR1C = full_speed;
     ed0:	8a e8       	ldi	r24, 0x8A	; 138
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	90 93 8d 00 	sts	0x008D, r25
     ed8:	80 93 8c 00 	sts	0x008C, r24
					OCR1B = full_speed;
     edc:	90 93 8b 00 	sts	0x008B, r25
     ee0:	80 93 8a 00 	sts	0x008A, r24
     ee4:	e5 c0       	rjmp	.+458    	; 0x10b0 <findPuck+0x3be>
				}
				else{
					set(PORTB, 0);
     ee6:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     ee8:	29 9a       	sbi	0x05, 1	; 5
					OCR1C = full_speed - speed_diff_Pho;
     eea:	8a e8       	ldi	r24, 0x8A	; 138
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	20 91 10 01 	lds	r18, 0x0110
     ef2:	30 91 11 01 	lds	r19, 0x0111
     ef6:	fc 01       	movw	r30, r24
     ef8:	e2 1b       	sub	r30, r18
     efa:	f3 0b       	sbc	r31, r19
     efc:	f0 93 8d 00 	sts	0x008D, r31
     f00:	e0 93 8c 00 	sts	0x008C, r30
					OCR1B = full_speed;
     f04:	90 93 8b 00 	sts	0x008B, r25
     f08:	80 93 8a 00 	sts	0x008A, r24
					if(Pho[2]>Pho[4]){
     f0c:	20 91 68 01 	lds	r18, 0x0168
     f10:	30 91 69 01 	lds	r19, 0x0169
     f14:	80 91 6c 01 	lds	r24, 0x016C
     f18:	90 91 6d 01 	lds	r25, 0x016D
     f1c:	82 17       	cp	r24, r18
     f1e:	93 07       	cpc	r25, r19
     f20:	0c f0       	brlt	.+2      	; 0xf24 <findPuck+0x232>
     f22:	c6 c0       	rjmp	.+396    	; 0x10b0 <findPuck+0x3be>
						m_usb_tx_string("PID\n");
     f24:	85 eb       	ldi	r24, 0xB5	; 181
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e7       	ldi	r20, 0x70	; 112
     f32:	51 e4       	ldi	r21, 0x41	; 65
     f34:	6a e9       	ldi	r22, 0x9A	; 154
     f36:	79 e9       	ldi	r23, 0x99	; 153
     f38:	89 e9       	ldi	r24, 0x99	; 153
     f3a:	9e e3       	ldi	r25, 0x3E	; 62
     f3c:	0e 94 16 05 	call	0xa2c	; 0xa2c <PID_Pho>
     f40:	b7 c0       	rjmp	.+366    	; 0x10b0 <findPuck+0x3be>
					}
				}
			}
		
			else {
				if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     f42:	ce 19       	sub	r28, r14
     f44:	df 09       	sbc	r29, r15
     f46:	e3 97       	sbiw	r28, 0x33	; 51
     f48:	84 f4       	brge	.+32     	; 0xf6a <findPuck+0x278>
     f4a:	c0 16       	cp	r12, r16
     f4c:	d1 06       	cpc	r13, r17
     f4e:	0c f0       	brlt	.+2      	; 0xf52 <findPuck+0x260>
     f50:	4e c0       	rjmp	.+156    	; 0xfee <findPuck+0x2fc>
     f52:	20 91 6e 01 	lds	r18, 0x016E
     f56:	30 91 6f 01 	lds	r19, 0x016F
     f5a:	80 91 6a 01 	lds	r24, 0x016A
     f5e:	90 91 6b 01 	lds	r25, 0x016B
     f62:	82 17       	cp	r24, r18
     f64:	93 07       	cpc	r25, r19
     f66:	0c f0       	brlt	.+2      	; 0xf6a <findPuck+0x278>
     f68:	42 c0       	rjmp	.+132    	; 0xfee <findPuck+0x2fc>
					m_usb_tx_string("turn right\n");
     f6a:	89 ea       	ldi	r24, 0xA9	; 169
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
					if(mean135 > revThres){
     f72:	09 39       	cpi	r16, 0x99	; 153
     f74:	18 40       	sbci	r17, 0x08	; 8
     f76:	6c f0       	brlt	.+26     	; 0xf92 <findPuck+0x2a0>
						set(PORTB, 1);
     f78:	29 9a       	sbi	0x05, 1	; 5
						clear(PORTB, 0);
     f7a:	28 98       	cbi	0x05, 0	; 5
						OCR1B = full_speed;
     f7c:	8a e8       	ldi	r24, 0x8A	; 138
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	90 93 8b 00 	sts	0x008B, r25
     f84:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed;
     f88:	90 93 8d 00 	sts	0x008D, r25
     f8c:	80 93 8c 00 	sts	0x008C, r24
     f90:	8f c0       	rjmp	.+286    	; 0x10b0 <findPuck+0x3be>
					}
					else{
						set(PORTB, 0);
     f92:	28 9a       	sbi	0x05, 0	; 5
						set(PORTB, 1);
     f94:	29 9a       	sbi	0x05, 1	; 5
						OCR1B = full_speed - speed_diff_Pho;
     f96:	8a e8       	ldi	r24, 0x8A	; 138
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	20 91 10 01 	lds	r18, 0x0110
     f9e:	30 91 11 01 	lds	r19, 0x0111
     fa2:	ac 01       	movw	r20, r24
     fa4:	42 1b       	sub	r20, r18
     fa6:	53 0b       	sbc	r21, r19
     fa8:	50 93 8b 00 	sts	0x008B, r21
     fac:	40 93 8a 00 	sts	0x008A, r20
						OCR1C = full_speed;
     fb0:	90 93 8d 00 	sts	0x008D, r25
     fb4:	80 93 8c 00 	sts	0x008C, r24
						if(Pho[3]>Pho[5]){
     fb8:	20 91 6a 01 	lds	r18, 0x016A
     fbc:	30 91 6b 01 	lds	r19, 0x016B
     fc0:	80 91 6e 01 	lds	r24, 0x016E
     fc4:	90 91 6f 01 	lds	r25, 0x016F
     fc8:	82 17       	cp	r24, r18
     fca:	93 07       	cpc	r25, r19
     fcc:	0c f0       	brlt	.+2      	; 0xfd0 <findPuck+0x2de>
     fce:	70 c0       	rjmp	.+224    	; 0x10b0 <findPuck+0x3be>
							m_usb_tx_string("PID\n");
     fd0:	84 ea       	ldi	r24, 0xA4	; 164
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
							PID_Pho(Kp_Pho, Kd_Pho);
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e7       	ldi	r20, 0x70	; 112
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	6a e9       	ldi	r22, 0x9A	; 154
     fe2:	79 e9       	ldi	r23, 0x99	; 153
     fe4:	89 e9       	ldi	r24, 0x99	; 153
     fe6:	9e e3       	ldi	r25, 0x3E	; 62
     fe8:	0e 94 16 05 	call	0xa2c	; 0xa2c <PID_Pho>
     fec:	61 c0       	rjmp	.+194    	; 0x10b0 <findPuck+0x3be>
						}
					}
				}
				else{
					PID_Pho(3*Kp_Pho, Kd_Pho);
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e7       	ldi	r20, 0x70	; 112
     ff4:	51 e4       	ldi	r21, 0x41	; 65
     ff6:	67 e6       	ldi	r22, 0x67	; 103
     ff8:	76 e6       	ldi	r23, 0x66	; 102
     ffa:	86 e6       	ldi	r24, 0x66	; 102
     ffc:	9f e3       	ldi	r25, 0x3F	; 63
     ffe:	0e 94 16 05 	call	0xa2c	; 0xa2c <PID_Pho>
    1002:	56 c0       	rjmp	.+172    	; 0x10b0 <findPuck+0x3be>
				}
			}
			break;
		case 5:
			if(mean024 - mean135 > strThres){
    1004:	c7 01       	movw	r24, r14
    1006:	8c 1b       	sub	r24, r28
    1008:	9d 0b       	sbc	r25, r29
    100a:	c3 97       	sbiw	r24, 0x33	; 51
    100c:	3c f1       	brlt	.+78     	; 0x105c <findPuck+0x36a>
				m_usb_tx_string("turn left\n");
    100e:	89 e9       	ldi	r24, 0x99	; 153
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
				set(PORTB, 0);
    1016:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
    1018:	29 98       	cbi	0x05, 1	; 5
				if (Pho[2] > Pho[4]){
    101a:	20 91 68 01 	lds	r18, 0x0168
    101e:	30 91 69 01 	lds	r19, 0x0169
    1022:	80 91 6c 01 	lds	r24, 0x016C
    1026:	90 91 6d 01 	lds	r25, 0x016D
    102a:	82 17       	cp	r24, r18
    102c:	93 07       	cpc	r25, r19
    102e:	5c f4       	brge	.+22     	; 0x1046 <findPuck+0x354>
					PID_stalk(Kp_stalk, Kd_stalk); 
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e4       	ldi	r21, 0x40	; 64
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	80 e8       	ldi	r24, 0x80	; 128
    103e:	9f e3       	ldi	r25, 0x3F	; 63
    1040:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <PID_stalk>
    1044:	35 c0       	rjmp	.+106    	; 0x10b0 <findPuck+0x3be>
				}
				else{
					OCR1B = full_speed_stalk;
    1046:	8a e8       	ldi	r24, 0x8A	; 138
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	90 93 8b 00 	sts	0x008B, r25
    104e:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
    1052:	90 93 8d 00 	sts	0x008D, r25
    1056:	80 93 8c 00 	sts	0x008C, r24
    105a:	2a c0       	rjmp	.+84     	; 0x10b0 <findPuck+0x3be>
				}
			}
			else{
				if(mean135 - mean024 > strThres){
    105c:	ce 19       	sub	r28, r14
    105e:	df 09       	sbc	r29, r15
    1060:	e3 97       	sbiw	r28, 0x33	; 51
    1062:	34 f1       	brlt	.+76     	; 0x10b0 <findPuck+0x3be>
					m_usb_tx_string("turn right\n");
    1064:	8d e8       	ldi	r24, 0x8D	; 141
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
					clear(PORTB, 0);
    106c:	28 98       	cbi	0x05, 0	; 5
					set(PORTB, 1);
    106e:	29 9a       	sbi	0x05, 1	; 5
					if (Pho[3] > Pho[5]){
    1070:	20 91 6a 01 	lds	r18, 0x016A
    1074:	30 91 6b 01 	lds	r19, 0x016B
    1078:	80 91 6e 01 	lds	r24, 0x016E
    107c:	90 91 6f 01 	lds	r25, 0x016F
    1080:	82 17       	cp	r24, r18
    1082:	93 07       	cpc	r25, r19
    1084:	5c f4       	brge	.+22     	; 0x109c <findPuck+0x3aa>
						PID_stalk(Kp_stalk, Kd_stalk);
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e4       	ldi	r21, 0x40	; 64
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e8       	ldi	r24, 0x80	; 128
    1094:	9f e3       	ldi	r25, 0x3F	; 63
    1096:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <PID_stalk>
    109a:	0a c0       	rjmp	.+20     	; 0x10b0 <findPuck+0x3be>
					}
					else{
						OCR1B = full_speed_stalk;
    109c:	8a e8       	ldi	r24, 0x8A	; 138
    109e:	92 e0       	ldi	r25, 0x02	; 2
    10a0:	90 93 8b 00 	sts	0x008B, r25
    10a4:	80 93 8a 00 	sts	0x008A, r24
						OCR1C = full_speed_stalk;
    10a8:	90 93 8d 00 	sts	0x008D, r25
    10ac:	80 93 8c 00 	sts	0x008C, r24
			break;
		default:
			break;
	}
	
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	8f 90       	pop	r8
    10c8:	7f 90       	pop	r7
    10ca:	6f 90       	pop	r6
    10cc:	08 95       	ret

000010ce <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	af 92       	push	r10
    10da:	bf 92       	push	r11
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
    1104:	c0 91 62 01 	lds	r28, 0x0162
    1108:	d0 91 63 01 	lds	r29, 0x0163
    110c:	a0 90 78 00 	lds	r10, 0x0078
    1110:	b0 90 79 00 	lds	r11, 0x0079
    1114:	8e 01       	movw	r16, r28
    1116:	00 0f       	add	r16, r16
    1118:	11 1f       	adc	r17, r17
    111a:	0c 59       	subi	r16, 0x9C	; 156
    111c:	1e 4f       	sbci	r17, 0xFE	; 254
    111e:	f8 01       	movw	r30, r16
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	88 27       	eor	r24, r24
    1126:	77 fd       	sbrc	r23, 7
    1128:	80 95       	com	r24
    112a:	98 2f       	mov	r25, r24
    112c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
    1130:	2d ec       	ldi	r18, 0xCD	; 205
    1132:	3c ec       	ldi	r19, 0xCC	; 204
    1134:	4c e4       	ldi	r20, 0x4C	; 76
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    113c:	6b 01       	movw	r12, r22
    113e:	7c 01       	movw	r14, r24
    1140:	b5 01       	movw	r22, r10
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    114a:	2c ec       	ldi	r18, 0xCC	; 204
    114c:	3c ec       	ldi	r19, 0xCC	; 204
    114e:	4c e4       	ldi	r20, 0x4C	; 76
    1150:	5e e3       	ldi	r21, 0x3E	; 62
    1152:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24
    115a:	c7 01       	movw	r24, r14
    115c:	b6 01       	movw	r22, r12
    115e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    1162:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1166:	f8 01       	movw	r30, r16
    1168:	71 83       	std	Z+1, r23	; 0x01
    116a:	60 83       	st	Z, r22
	
	i = i + 1;
    116c:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
    116e:	c8 30       	cpi	r28, 0x08	; 8
    1170:	d1 05       	cpc	r29, r1
    1172:	2c f4       	brge	.+10     	; 0x117e <__vector_29+0xb0>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
    1174:	d0 93 63 01 	sts	0x0163, r29
    1178:	c0 93 62 01 	sts	0x0162, r28
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <__vector_29+0xb8>
	if(i > 7){
		i = 0;
    117e:	10 92 63 01 	sts	0x0163, r1
    1182:	10 92 62 01 	sts	0x0162, r1
	}
	
	clear(ADCSRA, ADEN);
    1186:	ea e7       	ldi	r30, 0x7A	; 122
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 77       	andi	r24, 0x7F	; 127
    118e:	80 83       	st	Z, r24
	switch(i){
    1190:	80 91 62 01 	lds	r24, 0x0162
    1194:	90 91 63 01 	lds	r25, 0x0163
    1198:	87 30       	cpi	r24, 0x07	; 7
    119a:	91 05       	cpc	r25, r1
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <__vector_29+0xd2>
    119e:	7b c0       	rjmp	.+246    	; 0x1296 <__vector_29+0x1c8>
    11a0:	fc 01       	movw	r30, r24
    11a2:	e2 5a       	subi	r30, 0xA2	; 162
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	0c 94 b5 1d 	jmp	0x3b6a	; 0x3b6a <__tablejump2__>
		case 0:
			clear(ADCSRB,MUX5);//select F0 as analog input
    11aa:	eb e7       	ldi	r30, 0x7B	; 123
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7d       	andi	r24, 0xDF	; 223
    11b2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    11b4:	ec e7       	ldi	r30, 0x7C	; 124
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8b 7f       	andi	r24, 0xFB	; 251
    11bc:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    11be:	80 81       	ld	r24, Z
    11c0:	8d 7f       	andi	r24, 0xFD	; 253
    11c2:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    11c4:	80 81       	ld	r24, Z
    11c6:	8e 7f       	andi	r24, 0xFE	; 254
    11c8:	80 83       	st	Z, r24
			break;
    11ca:	65 c0       	rjmp	.+202    	; 0x1296 <__vector_29+0x1c8>
		case 1:
			clear(ADCSRB,MUX5);//select F1 as analog input
    11cc:	eb e7       	ldi	r30, 0x7B	; 123
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7d       	andi	r24, 0xDF	; 223
    11d4:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    11d6:	ec e7       	ldi	r30, 0x7C	; 124
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8b 7f       	andi	r24, 0xFB	; 251
    11de:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    11e0:	80 81       	ld	r24, Z
    11e2:	8d 7f       	andi	r24, 0xFD	; 253
    11e4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	80 83       	st	Z, r24
			break;
    11ec:	54 c0       	rjmp	.+168    	; 0x1296 <__vector_29+0x1c8>
		case 2:
			set(ADCSRB,MUX5);//select D6 as analog input
    11ee:	eb e7       	ldi	r30, 0x7B	; 123
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 62       	ori	r24, 0x20	; 32
    11f6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    11f8:	ec e7       	ldi	r30, 0x7C	; 124
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8b 7f       	andi	r24, 0xFB	; 251
    1200:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    1202:	80 81       	ld	r24, Z
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    1208:	80 81       	ld	r24, Z
    120a:	81 60       	ori	r24, 0x01	; 1
    120c:	80 83       	st	Z, r24
			break;
    120e:	43 c0       	rjmp	.+134    	; 0x1296 <__vector_29+0x1c8>
		case 3:
			set(ADCSRB,MUX5);//select D7 as analog input
    1210:	eb e7       	ldi	r30, 0x7B	; 123
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 62       	ori	r24, 0x20	; 32
    1218:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    121a:	ec e7       	ldi	r30, 0x7C	; 124
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8b 7f       	andi	r24, 0xFB	; 251
    1222:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    1224:	80 81       	ld	r24, Z
    1226:	82 60       	ori	r24, 0x02	; 2
    1228:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    122a:	80 81       	ld	r24, Z
    122c:	8e 7f       	andi	r24, 0xFE	; 254
    122e:	80 83       	st	Z, r24
			break;
    1230:	32 c0       	rjmp	.+100    	; 0x1296 <__vector_29+0x1c8>
		case 4:
			set(ADCSRB,MUX5);//select B4 as analog input
    1232:	eb e7       	ldi	r30, 0x7B	; 123
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 62       	ori	r24, 0x20	; 32
    123a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    123c:	ec e7       	ldi	r30, 0x7C	; 124
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8b 7f       	andi	r24, 0xFB	; 251
    1244:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    1246:	80 81       	ld	r24, Z
    1248:	82 60       	ori	r24, 0x02	; 2
    124a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    124c:	80 81       	ld	r24, Z
    124e:	81 60       	ori	r24, 0x01	; 1
    1250:	80 83       	st	Z, r24
			break;
    1252:	21 c0       	rjmp	.+66     	; 0x1296 <__vector_29+0x1c8>
		case 5:
			set(ADCSRB,MUX5);//select B5 as analog input
    1254:	eb e7       	ldi	r30, 0x7B	; 123
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	80 62       	ori	r24, 0x20	; 32
    125c:	80 83       	st	Z, r24
			set(ADMUX,MUX2);
    125e:	ec e7       	ldi	r30, 0x7C	; 124
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	84 60       	ori	r24, 0x04	; 4
    1266:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    1268:	80 81       	ld	r24, Z
    126a:	8d 7f       	andi	r24, 0xFD	; 253
    126c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    126e:	80 81       	ld	r24, Z
    1270:	8e 7f       	andi	r24, 0xFE	; 254
    1272:	80 83       	st	Z, r24
			break;
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <__vector_29+0x1c8>
		case 6:
			set(ADCSRB,MUX5);//select D4 as analog input
    1276:	eb e7       	ldi	r30, 0x7B	; 123
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	80 62       	ori	r24, 0x20	; 32
    127e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
    1280:	ec e7       	ldi	r30, 0x7C	; 124
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8b 7f       	andi	r24, 0xFB	; 251
    1288:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    128a:	80 81       	ld	r24, Z
    128c:	8d 7f       	andi	r24, 0xFD	; 253
    128e:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    1290:	80 81       	ld	r24, Z
    1292:	8e 7f       	andi	r24, 0xFE	; 254
    1294:	80 83       	st	Z, r24
			break;
	}
	set(ADCSRA, ADEN);
    1296:	ea e7       	ldi	r30, 0x7A	; 122
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
    12a0:	80 81       	ld	r24, Z
    12a2:	80 64       	ori	r24, 0x40	; 64
    12a4:	80 83       	st	Z, r24
	
}
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	bf 90       	pop	r11
    12d0:	af 90       	pop	r10
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <deterState>:

void deterState(int *state){
	if (*state == 2 || *state == 3){
    12dc:	fc 01       	movw	r30, r24
    12de:	20 81       	ld	r18, Z
    12e0:	31 81       	ldd	r19, Z+1	; 0x01
    12e2:	22 50       	subi	r18, 0x02	; 2
    12e4:	31 09       	sbc	r19, r1
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	f0 f4       	brcc	.+60     	; 0x1328 <deterState+0x4c>
		if (Pho[6] >gotThres){
    12ec:	20 91 70 01 	lds	r18, 0x0170
    12f0:	30 91 71 01 	lds	r19, 0x0171
    12f4:	25 38       	cpi	r18, 0x85	; 133
    12f6:	f3 e0       	ldi	r31, 0x03	; 3
    12f8:	3f 07       	cpc	r19, r31
    12fa:	54 f0       	brlt	.+20     	; 0x1310 <deterState+0x34>
			
			*state = 3;
    12fc:	23 e0       	ldi	r18, 0x03	; 3
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	fc 01       	movw	r30, r24
    1302:	31 83       	std	Z+1, r19	; 0x01
    1304:	20 83       	st	Z, r18
			
			m_usb_tx_string("got the puck!\n");
    1306:	8e e7       	ldi	r24, 0x7E	; 126
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
    130e:	08 95       	ret
			
		}
		else{
			if(Pho[6] < loseThres){
    1310:	24 38       	cpi	r18, 0x84	; 132
    1312:	33 40       	sbci	r19, 0x03	; 3
    1314:	4c f4       	brge	.+18     	; 0x1328 <deterState+0x4c>
				*state = 2;
    1316:	22 e0       	ldi	r18, 0x02	; 2
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	fc 01       	movw	r30, r24
    131c:	31 83       	std	Z+1, r19	; 0x01
    131e:	20 83       	st	Z, r18
				m_usb_tx_string("lost the puck!\n");
    1320:	8e e6       	ldi	r24, 0x6E	; 110
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
    1328:	08 95       	ret

0000132a <ifGotoPuck>:
		}
	}
}

void ifGotoPuck(int *state, float *dir){
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres){
    132a:	40 91 64 01 	lds	r20, 0x0164
    132e:	50 91 65 01 	lds	r21, 0x0165
    1332:	20 91 66 01 	lds	r18, 0x0166
    1336:	30 91 67 01 	lds	r19, 0x0167
    133a:	42 0f       	add	r20, r18
    133c:	53 1f       	adc	r21, r19
    133e:	20 91 68 01 	lds	r18, 0x0168
    1342:	30 91 69 01 	lds	r19, 0x0169
    1346:	42 0f       	add	r20, r18
    1348:	53 1f       	adc	r21, r19
    134a:	20 91 6a 01 	lds	r18, 0x016A
    134e:	30 91 6b 01 	lds	r19, 0x016B
    1352:	42 0f       	add	r20, r18
    1354:	53 1f       	adc	r21, r19
    1356:	20 91 12 01 	lds	r18, 0x0112
    135a:	30 91 13 01 	lds	r19, 0x0113
    135e:	24 17       	cp	r18, r20
    1360:	35 07       	cpc	r19, r21
    1362:	2c f4       	brge	.+10     	; 0x136e <ifGotoPuck+0x44>
		*state = 2;
    1364:	22 e0       	ldi	r18, 0x02	; 2
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	fc 01       	movw	r30, r24
    136a:	31 83       	std	Z+1, r19	; 0x01
    136c:	20 83       	st	Z, r18
    136e:	08 95       	ret

00001370 <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
    1370:	4f 92       	push	r4
    1372:	5f 92       	push	r5
    1374:	6f 92       	push	r6
    1376:	7f 92       	push	r7
    1378:	8f 92       	push	r8
    137a:	9f 92       	push	r9
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	60 97       	sbiw	r28, 0x10	; 16
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	2b 01       	movw	r4, r22
    13a2:	3c 01       	movw	r6, r24
    13a4:	2d 83       	std	Y+5, r18	; 0x05
    13a6:	3e 83       	std	Y+6, r19	; 0x06
    13a8:	4f 83       	std	Y+7, r20	; 0x07
    13aa:	58 87       	std	Y+8, r21	; 0x08
    13ac:	58 01       	movw	r10, r16
    13ae:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
    13b0:	d5 01       	movw	r26, r10
    13b2:	cd 90       	ld	r12, X+
    13b4:	dd 90       	ld	r13, X+
    13b6:	ed 90       	ld	r14, X+
    13b8:	fc 90       	ld	r15, X
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	c7 01       	movw	r24, r14
    13c0:	b6 01       	movw	r22, r12
    13c2:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    13c6:	f8 01       	movw	r30, r16
    13c8:	20 81       	ld	r18, Z
    13ca:	31 81       	ldd	r19, Z+1	; 0x01
    13cc:	42 81       	ldd	r20, Z+2	; 0x02
    13ce:	53 81       	ldd	r21, Z+3	; 0x03
    13d0:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    13d4:	69 87       	std	Y+9, r22	; 0x09
    13d6:	7a 87       	std	Y+10, r23	; 0x0a
    13d8:	8b 87       	std	Y+11, r24	; 0x0b
    13da:	9c 87       	std	Y+12, r25	; 0x0c
    13dc:	d5 01       	movw	r26, r10
    13de:	14 96       	adiw	r26, 0x04	; 4
    13e0:	8d 91       	ld	r24, X+
    13e2:	9d 91       	ld	r25, X+
    13e4:	0d 90       	ld	r0, X+
    13e6:	bc 91       	ld	r27, X
    13e8:	a0 2d       	mov	r26, r0
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	ab 83       	std	Y+3, r26	; 0x03
    13f0:	bc 83       	std	Y+4, r27	; 0x04
    13f2:	2d 81       	ldd	r18, Y+5	; 0x05
    13f4:	3e 81       	ldd	r19, Y+6	; 0x06
    13f6:	4f 81       	ldd	r20, Y+7	; 0x07
    13f8:	58 85       	ldd	r21, Y+8	; 0x08
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1402:	6d 87       	std	Y+13, r22	; 0x0d
    1404:	7e 87       	std	Y+14, r23	; 0x0e
    1406:	8f 87       	std	Y+15, r24	; 0x0f
    1408:	98 8b       	std	Y+16, r25	; 0x10
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	69 85       	ldd	r22, Y+9	; 0x09
    1410:	7a 85       	ldd	r23, Y+10	; 0x0a
    1412:	8b 85       	ldd	r24, Y+11	; 0x0b
    1414:	9c 85       	ldd	r25, Y+12	; 0x0c
    1416:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    141a:	4b 01       	movw	r8, r22
    141c:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
    141e:	29 81       	ldd	r18, Y+1	; 0x01
    1420:	3a 81       	ldd	r19, Y+2	; 0x02
    1422:	4b 81       	ldd	r20, Y+3	; 0x03
    1424:	5c 81       	ldd	r21, Y+4	; 0x04
    1426:	c3 01       	movw	r24, r6
    1428:	b2 01       	movw	r22, r4
    142a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    142e:	f8 01       	movw	r30, r16
    1430:	24 81       	ldd	r18, Z+4	; 0x04
    1432:	35 81       	ldd	r19, Z+5	; 0x05
    1434:	46 81       	ldd	r20, Z+6	; 0x06
    1436:	57 81       	ldd	r21, Z+7	; 0x07
    1438:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    143c:	2b 01       	movw	r4, r22
    143e:	3c 01       	movw	r6, r24
    1440:	2d 81       	ldd	r18, Y+5	; 0x05
    1442:	3e 81       	ldd	r19, Y+6	; 0x06
    1444:	4f 81       	ldd	r20, Y+7	; 0x07
    1446:	58 85       	ldd	r21, Y+8	; 0x08
    1448:	c7 01       	movw	r24, r14
    144a:	b6 01       	movw	r22, r12
    144c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1450:	69 83       	std	Y+1, r22	; 0x01
    1452:	7a 83       	std	Y+2, r23	; 0x02
    1454:	8b 83       	std	Y+3, r24	; 0x03
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	9b 01       	movw	r18, r22
    145a:	ac 01       	movw	r20, r24
    145c:	c3 01       	movw	r24, r6
    145e:	b2 01       	movw	r22, r4
    1460:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    1464:	6b 01       	movw	r12, r22
    1466:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
    1468:	2d 85       	ldd	r18, Y+13	; 0x0d
    146a:	3e 85       	ldd	r19, Y+14	; 0x0e
    146c:	4f 85       	ldd	r20, Y+15	; 0x0f
    146e:	58 89       	ldd	r21, Y+16	; 0x10
    1470:	69 85       	ldd	r22, Y+9	; 0x09
    1472:	7a 85       	ldd	r23, Y+10	; 0x0a
    1474:	8b 85       	ldd	r24, Y+11	; 0x0b
    1476:	9c 85       	ldd	r25, Y+12	; 0x0c
    1478:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    147c:	6d 83       	std	Y+5, r22	; 0x05
    147e:	7e 83       	std	Y+6, r23	; 0x06
    1480:	8f 83       	std	Y+7, r24	; 0x07
    1482:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
    1484:	29 81       	ldd	r18, Y+1	; 0x01
    1486:	3a 81       	ldd	r19, Y+2	; 0x02
    1488:	4b 81       	ldd	r20, Y+3	; 0x03
    148a:	5c 81       	ldd	r21, Y+4	; 0x04
    148c:	c3 01       	movw	r24, r6
    148e:	b2 01       	movw	r22, r4
    1490:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    1494:	2b 01       	movw	r4, r22
    1496:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
    1498:	a5 01       	movw	r20, r10
    149a:	94 01       	movw	r18, r8
    149c:	c5 01       	movw	r24, r10
    149e:	b4 01       	movw	r22, r8
    14a0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    14a4:	4b 01       	movw	r8, r22
    14a6:	5c 01       	movw	r10, r24
    14a8:	a7 01       	movw	r20, r14
    14aa:	96 01       	movw	r18, r12
    14ac:	c7 01       	movw	r24, r14
    14ae:	b6 01       	movw	r22, r12
    14b0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	c5 01       	movw	r24, r10
    14ba:	b4 01       	movw	r22, r8
    14bc:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    14c0:	6b 01       	movw	r12, r22
    14c2:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
    14c4:	2d 81       	ldd	r18, Y+5	; 0x05
    14c6:	3e 81       	ldd	r19, Y+6	; 0x06
    14c8:	4f 81       	ldd	r20, Y+7	; 0x07
    14ca:	58 85       	ldd	r21, Y+8	; 0x08
    14cc:	ca 01       	movw	r24, r20
    14ce:	b9 01       	movw	r22, r18
    14d0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    14d4:	4b 01       	movw	r8, r22
    14d6:	5c 01       	movw	r10, r24
    14d8:	a3 01       	movw	r20, r6
    14da:	92 01       	movw	r18, r4
    14dc:	c3 01       	movw	r24, r6
    14de:	b2 01       	movw	r22, r4
    14e0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    14e4:	9b 01       	movw	r18, r22
    14e6:	ac 01       	movw	r20, r24
    14e8:	c5 01       	movw	r24, r10
    14ea:	b4 01       	movw	r22, r8
    14ec:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
    14f4:	01 e0       	ldi	r16, 0x01	; 1
    14f6:	10 e0       	ldi	r17, 0x00	; 0
    14f8:	c7 01       	movw	r24, r14
    14fa:	b6 01       	movw	r22, r12
    14fc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1500:	88 23       	and	r24, r24
    1502:	14 f0       	brlt	.+4      	; 0x1508 <find_sign+0x198>
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
    1508:	c8 01       	movw	r24, r16
    150a:	60 96       	adiw	r28, 0x10	; 16
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	bf 90       	pop	r11
    1528:	af 90       	pop	r10
    152a:	9f 90       	pop	r9
    152c:	8f 90       	pop	r8
    152e:	7f 90       	pop	r7
    1530:	6f 90       	pop	r6
    1532:	5f 90       	pop	r5
    1534:	4f 90       	pop	r4
    1536:	08 95       	ret

00001538 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
    1538:	2f 92       	push	r2
    153a:	3f 92       	push	r3
    153c:	4f 92       	push	r4
    153e:	5f 92       	push	r5
    1540:	6f 92       	push	r6
    1542:	7f 92       	push	r7
    1544:	8f 92       	push	r8
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	bf 92       	push	r11
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	28 97       	sbiw	r28, 0x08	; 8
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	1c 01       	movw	r2, r24
    156e:	49 83       	std	Y+1, r20	; 0x01
    1570:	5a 83       	std	Y+2, r21	; 0x02
    1572:	6b 83       	std	Y+3, r22	; 0x03
    1574:	7c 83       	std	Y+4, r23	; 0x04
    1576:	0d 83       	std	Y+5, r16	; 0x05
    1578:	1e 83       	std	Y+6, r17	; 0x06
    157a:	2f 83       	std	Y+7, r18	; 0x07
    157c:	38 87       	std	Y+8, r19	; 0x08
    157e:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
    1580:	f6 01       	movw	r30, r12
    1582:	20 81       	ld	r18, Z
    1584:	31 81       	ldd	r19, Z+1	; 0x01
    1586:	42 81       	ldd	r20, Z+2	; 0x02
    1588:	53 81       	ldd	r21, Z+3	; 0x03
    158a:	f7 01       	movw	r30, r14
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    1598:	4b 01       	movw	r8, r22
    159a:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
    159c:	f6 01       	movw	r30, r12
    159e:	24 81       	ldd	r18, Z+4	; 0x04
    15a0:	35 81       	ldd	r19, Z+5	; 0x05
    15a2:	46 81       	ldd	r20, Z+6	; 0x06
    15a4:	57 81       	ldd	r21, Z+7	; 0x07
    15a6:	f7 01       	movw	r30, r14
    15a8:	64 81       	ldd	r22, Z+4	; 0x04
    15aa:	75 81       	ldd	r23, Z+5	; 0x05
    15ac:	86 81       	ldd	r24, Z+6	; 0x06
    15ae:	97 81       	ldd	r25, Z+7	; 0x07
    15b0:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    15b4:	6b 01       	movw	r12, r22
    15b6:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
    15b8:	a5 01       	movw	r20, r10
    15ba:	94 01       	movw	r18, r8
    15bc:	c5 01       	movw	r24, r10
    15be:	b4 01       	movw	r22, r8
    15c0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    15c4:	2b 01       	movw	r4, r22
    15c6:	3c 01       	movw	r6, r24
    15c8:	a7 01       	movw	r20, r14
    15ca:	96 01       	movw	r18, r12
    15cc:	c7 01       	movw	r24, r14
    15ce:	b6 01       	movw	r22, r12
    15d0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    15d4:	9b 01       	movw	r18, r22
    15d6:	ac 01       	movw	r20, r24
    15d8:	c3 01       	movw	r24, r6
    15da:	b2 01       	movw	r22, r4
    15dc:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
    15e0:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <sqrt>
    15e4:	2b 01       	movw	r4, r22
    15e6:	3c 01       	movw	r6, r24
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	c5 01       	movw	r24, r10
    15ee:	b4 01       	movw	r22, r8
    15f0:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__divsf3>
    15f4:	4b 01       	movw	r8, r22
    15f6:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
    15f8:	a3 01       	movw	r20, r6
    15fa:	92 01       	movw	r18, r4
    15fc:	c7 01       	movw	r24, r14
    15fe:	b6 01       	movw	r22, r12
    1600:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__divsf3>
    1604:	6b 01       	movw	r12, r22
    1606:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
    1608:	f8 01       	movw	r30, r16
    160a:	20 81       	ld	r18, Z
    160c:	31 81       	ldd	r19, Z+1	; 0x01
    160e:	42 81       	ldd	r20, Z+2	; 0x02
    1610:	53 81       	ldd	r21, Z+3	; 0x03
    1612:	c5 01       	movw	r24, r10
    1614:	b4 01       	movw	r22, r8
    1616:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    161a:	2b 01       	movw	r4, r22
    161c:	3c 01       	movw	r6, r24
    161e:	f8 01       	movw	r30, r16
    1620:	24 81       	ldd	r18, Z+4	; 0x04
    1622:	35 81       	ldd	r19, Z+5	; 0x05
    1624:	46 81       	ldd	r20, Z+6	; 0x06
    1626:	57 81       	ldd	r21, Z+7	; 0x07
    1628:	c7 01       	movw	r24, r14
    162a:	b6 01       	movw	r22, r12
    162c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	c3 01       	movw	r24, r6
    1636:	b2 01       	movw	r22, r4
    1638:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
	alpha = acos(cos_alpha);
    163c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <acos>
    1640:	2b 01       	movw	r4, r22
    1642:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
    1644:	2a 94       	dec	r2
    1646:	23 28       	or	r2, r3
    1648:	d1 f4       	brne	.+52     	; 0x167e <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
    164a:	2d 81       	ldd	r18, Y+5	; 0x05
    164c:	3e 81       	ldd	r19, Y+6	; 0x06
    164e:	4f 81       	ldd	r20, Y+7	; 0x07
    1650:	58 85       	ldd	r21, Y+8	; 0x08
    1652:	50 58       	subi	r21, 0x80	; 128
    1654:	c7 01       	movw	r24, r14
    1656:	b6 01       	movw	r22, r12
    1658:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    165c:	6b 01       	movw	r12, r22
    165e:	7c 01       	movw	r14, r24
    1660:	29 81       	ldd	r18, Y+1	; 0x01
    1662:	3a 81       	ldd	r19, Y+2	; 0x02
    1664:	4b 81       	ldd	r20, Y+3	; 0x03
    1666:	5c 81       	ldd	r21, Y+4	; 0x04
    1668:	c5 01       	movw	r24, r10
    166a:	b4 01       	movw	r22, r8
    166c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	c7 01       	movw	r24, r14
    1676:	b6 01       	movw	r22, r12
    1678:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    167c:	19 c0       	rjmp	.+50     	; 0x16b0 <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    167e:	2d 81       	ldd	r18, Y+5	; 0x05
    1680:	3e 81       	ldd	r19, Y+6	; 0x06
    1682:	4f 81       	ldd	r20, Y+7	; 0x07
    1684:	58 85       	ldd	r21, Y+8	; 0x08
    1686:	50 58       	subi	r21, 0x80	; 128
    1688:	c7 01       	movw	r24, r14
    168a:	b6 01       	movw	r22, r12
    168c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1690:	6b 01       	movw	r12, r22
    1692:	7c 01       	movw	r14, r24
    1694:	29 81       	ldd	r18, Y+1	; 0x01
    1696:	3a 81       	ldd	r19, Y+2	; 0x02
    1698:	4b 81       	ldd	r20, Y+3	; 0x03
    169a:	5c 81       	ldd	r21, Y+4	; 0x04
    169c:	c5 01       	movw	r24, r10
    169e:	b4 01       	movw	r22, r8
    16a0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	c7 01       	movw	r24, r14
    16aa:	b6 01       	movw	r22, r12
    16ac:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
	}
	if (c2g_wx < 0){
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	4c f0       	brlt	.+18     	; 0x16d0 <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    16be:	40 92 7e 01 	sts	0x017E, r4
    16c2:	50 92 7f 01 	sts	0x017F, r5
    16c6:	60 92 80 01 	sts	0x0180, r6
    16ca:	70 92 81 01 	sts	0x0181, r7
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    16d0:	77 fa       	bst	r7, 7
    16d2:	70 94       	com	r7
    16d4:	77 f8       	bld	r7, 7
    16d6:	70 94       	com	r7
    16d8:	40 92 7e 01 	sts	0x017E, r4
    16dc:	50 92 7f 01 	sts	0x017F, r5
    16e0:	60 92 80 01 	sts	0x0180, r6
    16e4:	70 92 81 01 	sts	0x0181, r7
	};   

	m_usb_tx_string("alpha: ");
    16e8:	8b e8       	ldi	r24, 0x8B	; 139
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(alpha*10);
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e2       	ldi	r20, 0x20	; 32
    16f6:	51 e4       	ldi	r21, 0x41	; 65
    16f8:	60 91 7e 01 	lds	r22, 0x017E
    16fc:	70 91 7f 01 	lds	r23, 0x017F
    1700:	80 91 80 01 	lds	r24, 0x0180
    1704:	90 91 81 01 	lds	r25, 0x0181
    1708:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    170c:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1710:	cb 01       	movw	r24, r22
    1712:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    1716:	89 e8       	ldi	r24, 0x89	; 137
    1718:	92 e0       	ldi	r25, 0x02	; 2
    171a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
}
    171e:	28 96       	adiw	r28, 0x08	; 8
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	9f 90       	pop	r9
    1740:	8f 90       	pop	r8
    1742:	7f 90       	pop	r7
    1744:	6f 90       	pop	r6
    1746:	5f 90       	pop	r5
    1748:	4f 90       	pop	r4
    174a:	3f 90       	pop	r3
    174c:	2f 90       	pop	r2
    174e:	08 95       	ret

00001750 <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    1750:	4f 92       	push	r4
    1752:	5f 92       	push	r5
    1754:	6f 92       	push	r6
    1756:	7f 92       	push	r7
    1758:	8f 92       	push	r8
    175a:	9f 92       	push	r9
    175c:	af 92       	push	r10
    175e:	bf 92       	push	r11
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	00 d0       	rcall	.+0      	; 0x176e <PID_alpha+0x1e>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <PID_alpha+0x20>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	4b 01       	movw	r8, r22
    1776:	5c 01       	movw	r10, r24
    1778:	29 83       	std	Y+1, r18	; 0x01
    177a:	3a 83       	std	Y+2, r19	; 0x02
    177c:	4b 83       	std	Y+3, r20	; 0x03
    177e:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1780:	40 90 7e 01 	lds	r4, 0x017E
    1784:	50 90 7f 01 	lds	r5, 0x017F
    1788:	60 90 80 01 	lds	r6, 0x0180
    178c:	70 90 81 01 	lds	r7, 0x0181
    1790:	20 91 7a 01 	lds	r18, 0x017A
    1794:	30 91 7b 01 	lds	r19, 0x017B
    1798:	40 91 7c 01 	lds	r20, 0x017C
    179c:	50 91 7d 01 	lds	r21, 0x017D
    17a0:	c3 01       	movw	r24, r6
    17a2:	b2 01       	movw	r22, r4
    17a4:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    17a8:	6b 01       	movw	r12, r22
    17aa:	7c 01       	movw	r14, r24
    17ac:	60 93 76 01 	sts	0x0176, r22
    17b0:	70 93 77 01 	sts	0x0177, r23
    17b4:	80 93 78 01 	sts	0x0178, r24
    17b8:	90 93 79 01 	sts	0x0179, r25
	float P =0, D = 0;
	P = Kp * alpha;
    17bc:	a5 01       	movw	r20, r10
    17be:	94 01       	movw	r18, r8
    17c0:	c3 01       	movw	r24, r6
    17c2:	b2 01       	movw	r22, r4
    17c4:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    17c8:	4b 01       	movw	r8, r22
    17ca:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;	gain_loc = P+D;
    17cc:	29 81       	ldd	r18, Y+1	; 0x01
    17ce:	3a 81       	ldd	r19, Y+2	; 0x02
    17d0:	4b 81       	ldd	r20, Y+3	; 0x03
    17d2:	5c 81       	ldd	r21, Y+4	; 0x04
    17d4:	c7 01       	movw	r24, r14
    17d6:	b6 01       	movw	r22, r12
    17d8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    17dc:	9b 01       	movw	r18, r22
    17de:	ac 01       	movw	r20, r24
    17e0:	c5 01       	movw	r24, r10
    17e2:	b4 01       	movw	r22, r8
    17e4:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    17e8:	60 93 72 01 	sts	0x0172, r22
    17ec:	70 93 73 01 	sts	0x0173, r23
    17f0:	80 93 74 01 	sts	0x0174, r24
    17f4:	90 93 75 01 	sts	0x0175, r25
	
	alpha_last = alpha;
    17f8:	40 92 7a 01 	sts	0x017A, r4
    17fc:	50 92 7b 01 	sts	0x017B, r5
    1800:	60 92 7c 01 	sts	0x017C, r6
    1804:	70 92 7d 01 	sts	0x017D, r7
	
	m_usb_tx_string("alpha*10: ");
    1808:	8e e7       	ldi	r24, 0x7E	; 126
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e2       	ldi	r20, 0x20	; 32
    1816:	51 e4       	ldi	r21, 0x41	; 65
    1818:	60 91 7e 01 	lds	r22, 0x017E
    181c:	70 91 7f 01 	lds	r23, 0x017F
    1820:	80 91 80 01 	lds	r24, 0x0180
    1824:	90 91 81 01 	lds	r25, 0x0181
    1828:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    182c:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1830:	cb 01       	movw	r24, r22
    1832:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    1836:	8c e7       	ldi	r24, 0x7C	; 124
    1838:	92 e0       	ldi	r25, 0x02	; 2
    183a:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	m_usb_tx_string("gain*10: ");
    183e:	82 e7       	ldi	r24, 0x72	; 114
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	60 91 72 01 	lds	r22, 0x0172
    1852:	70 91 73 01 	lds	r23, 0x0173
    1856:	80 91 74 01 	lds	r24, 0x0174
    185a:	90 91 75 01 	lds	r25, 0x0175
    185e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1862:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1866:	cb 01       	movw	r24, r22
    1868:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    186c:	80 e7       	ldi	r24, 0x70	; 112
    186e:	92 e0       	ldi	r25, 0x02	; 2
    1870:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	if(gain_loc<0){  // turn right
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	60 91 72 01 	lds	r22, 0x0172
    187e:	70 91 73 01 	lds	r23, 0x0173
    1882:	80 91 74 01 	lds	r24, 0x0174
    1886:	90 91 75 01 	lds	r25, 0x0175
    188a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    188e:	88 23       	and	r24, r24
    1890:	0c f0       	brlt	.+2      	; 0x1894 <PID_alpha+0x144>
    1892:	44 c0       	rjmp	.+136    	; 0x191c <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    1894:	84 e6       	ldi	r24, 0x64	; 100
    1896:	92 e0       	ldi	r25, 0x02	; 2
    1898:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    189c:	60 91 72 01 	lds	r22, 0x0172
    18a0:	70 91 73 01 	lds	r23, 0x0173
    18a4:	80 91 74 01 	lds	r24, 0x0174
    18a8:	90 91 75 01 	lds	r25, 0x0175
    18ac:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    18b0:	9b 01       	movw	r18, r22
    18b2:	77 23       	and	r23, r23
    18b4:	24 f4       	brge	.+8      	; 0x18be <PID_alpha+0x16e>
    18b6:	22 27       	eor	r18, r18
    18b8:	33 27       	eor	r19, r19
    18ba:	26 1b       	sub	r18, r22
    18bc:	37 0b       	sbc	r19, r23
    18be:	8a e8       	ldi	r24, 0x8A	; 138
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	82 1b       	sub	r24, r18
    18c4:	93 0b       	sbc	r25, r19
    18c6:	90 93 8b 00 	sts	0x008B, r25
    18ca:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    18ce:	e0 90 2a 01 	lds	r14, 0x012A
    18d2:	f0 90 2b 01 	lds	r15, 0x012B
    18d6:	60 91 72 01 	lds	r22, 0x0172
    18da:	70 91 73 01 	lds	r23, 0x0173
    18de:	80 91 74 01 	lds	r24, 0x0174
    18e2:	90 91 75 01 	lds	r25, 0x0175
    18e6:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    18ea:	9b 01       	movw	r18, r22
    18ec:	77 23       	and	r23, r23
    18ee:	24 f4       	brge	.+8      	; 0x18f8 <PID_alpha+0x1a8>
    18f0:	22 27       	eor	r18, r18
    18f2:	33 27       	eor	r19, r19
    18f4:	26 1b       	sub	r18, r22
    18f6:	37 0b       	sbc	r19, r23
    18f8:	e2 16       	cp	r14, r18
    18fa:	f3 06       	cpc	r15, r19
    18fc:	44 f4       	brge	.+16     	; 0x190e <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    18fe:	8a e8       	ldi	r24, 0x8A	; 138
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	8e 19       	sub	r24, r14
    1904:	9f 09       	sbc	r25, r15
    1906:	90 93 8b 00 	sts	0x008B, r25
    190a:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    190e:	8a e8       	ldi	r24, 0x8A	; 138
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	90 93 8d 00 	sts	0x008D, r25
    1916:	80 93 8c 00 	sts	0x008C, r24
    191a:	43 c0       	rjmp	.+134    	; 0x19a2 <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    191c:	89 e5       	ldi	r24, 0x59	; 89
    191e:	92 e0       	ldi	r25, 0x02	; 2
    1920:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1924:	60 91 72 01 	lds	r22, 0x0172
    1928:	70 91 73 01 	lds	r23, 0x0173
    192c:	80 91 74 01 	lds	r24, 0x0174
    1930:	90 91 75 01 	lds	r25, 0x0175
    1934:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1938:	9b 01       	movw	r18, r22
    193a:	77 23       	and	r23, r23
    193c:	24 f4       	brge	.+8      	; 0x1946 <PID_alpha+0x1f6>
    193e:	22 27       	eor	r18, r18
    1940:	33 27       	eor	r19, r19
    1942:	26 1b       	sub	r18, r22
    1944:	37 0b       	sbc	r19, r23
    1946:	8a e8       	ldi	r24, 0x8A	; 138
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	82 1b       	sub	r24, r18
    194c:	93 0b       	sbc	r25, r19
    194e:	90 93 8d 00 	sts	0x008D, r25
    1952:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    1956:	e0 90 2a 01 	lds	r14, 0x012A
    195a:	f0 90 2b 01 	lds	r15, 0x012B
    195e:	60 91 72 01 	lds	r22, 0x0172
    1962:	70 91 73 01 	lds	r23, 0x0173
    1966:	80 91 74 01 	lds	r24, 0x0174
    196a:	90 91 75 01 	lds	r25, 0x0175
    196e:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1972:	9b 01       	movw	r18, r22
    1974:	77 23       	and	r23, r23
    1976:	24 f4       	brge	.+8      	; 0x1980 <PID_alpha+0x230>
    1978:	22 27       	eor	r18, r18
    197a:	33 27       	eor	r19, r19
    197c:	26 1b       	sub	r18, r22
    197e:	37 0b       	sbc	r19, r23
    1980:	e2 16       	cp	r14, r18
    1982:	f3 06       	cpc	r15, r19
    1984:	44 f4       	brge	.+16     	; 0x1996 <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    1986:	8a e8       	ldi	r24, 0x8A	; 138
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	8e 19       	sub	r24, r14
    198c:	9f 09       	sbc	r25, r15
    198e:	90 93 8d 00 	sts	0x008D, r25
    1992:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1996:	8a e8       	ldi	r24, 0x8A	; 138
    1998:	92 e0       	ldi	r25, 0x02	; 2
    199a:	90 93 8b 00 	sts	0x008B, r25
    199e:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	7f 90       	pop	r7
    19c0:	6f 90       	pop	r6
    19c2:	5f 90       	pop	r5
    19c4:	4f 90       	pop	r4
    19c6:	08 95       	ret

000019c8 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    19c8:	4f 92       	push	r4
    19ca:	5f 92       	push	r5
    19cc:	6f 92       	push	r6
    19ce:	7f 92       	push	r7
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <PID_p2p+0x1e>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <PID_p2p+0x20>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	4b 01       	movw	r8, r22
    19ee:	5c 01       	movw	r10, r24
    19f0:	29 83       	std	Y+1, r18	; 0x01
    19f2:	3a 83       	std	Y+2, r19	; 0x02
    19f4:	4b 83       	std	Y+3, r20	; 0x03
    19f6:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    19f8:	40 90 7e 01 	lds	r4, 0x017E
    19fc:	50 90 7f 01 	lds	r5, 0x017F
    1a00:	60 90 80 01 	lds	r6, 0x0180
    1a04:	70 90 81 01 	lds	r7, 0x0181
    1a08:	20 91 7a 01 	lds	r18, 0x017A
    1a0c:	30 91 7b 01 	lds	r19, 0x017B
    1a10:	40 91 7c 01 	lds	r20, 0x017C
    1a14:	50 91 7d 01 	lds	r21, 0x017D
    1a18:	c3 01       	movw	r24, r6
    1a1a:	b2 01       	movw	r22, r4
    1a1c:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    1a20:	6b 01       	movw	r12, r22
    1a22:	7c 01       	movw	r14, r24
    1a24:	60 93 76 01 	sts	0x0176, r22
    1a28:	70 93 77 01 	sts	0x0177, r23
    1a2c:	80 93 78 01 	sts	0x0178, r24
    1a30:	90 93 79 01 	sts	0x0179, r25
	float P =0, D = 0;
	P = Kp * alpha;
    1a34:	a5 01       	movw	r20, r10
    1a36:	94 01       	movw	r18, r8
    1a38:	c3 01       	movw	r24, r6
    1a3a:	b2 01       	movw	r22, r4
    1a3c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1a40:	4b 01       	movw	r8, r22
    1a42:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    1a44:	29 81       	ldd	r18, Y+1	; 0x01
    1a46:	3a 81       	ldd	r19, Y+2	; 0x02
    1a48:	4b 81       	ldd	r20, Y+3	; 0x03
    1a4a:	5c 81       	ldd	r21, Y+4	; 0x04
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	b6 01       	movw	r22, r12
    1a50:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1a54:	9b 01       	movw	r18, r22
    1a56:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    1a58:	c5 01       	movw	r24, r10
    1a5a:	b4 01       	movw	r22, r8
    1a5c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    1a60:	60 93 72 01 	sts	0x0172, r22
    1a64:	70 93 73 01 	sts	0x0173, r23
    1a68:	80 93 74 01 	sts	0x0174, r24
    1a6c:	90 93 75 01 	sts	0x0175, r25
	
	alpha_last = alpha;
    1a70:	40 92 7a 01 	sts	0x017A, r4
    1a74:	50 92 7b 01 	sts	0x017B, r5
    1a78:	60 92 7c 01 	sts	0x017C, r6
    1a7c:	70 92 7d 01 	sts	0x017D, r7
	
	m_usb_tx_string("alpha*10: ");
    1a80:	8e e4       	ldi	r24, 0x4E	; 78
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	60 91 7e 01 	lds	r22, 0x017E
    1a94:	70 91 7f 01 	lds	r23, 0x017F
    1a98:	80 91 80 01 	lds	r24, 0x0180
    1a9c:	90 91 81 01 	lds	r25, 0x0181
    1aa0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1aa4:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    1aae:	8c e4       	ldi	r24, 0x4C	; 76
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1ab6:	82 e4       	ldi	r24, 0x42	; 66
    1ab8:	92 e0       	ldi	r25, 0x02	; 2
    1aba:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	60 91 72 01 	lds	r22, 0x0172
    1aca:	70 91 73 01 	lds	r23, 0x0173
    1ace:	80 91 74 01 	lds	r24, 0x0174
    1ad2:	90 91 75 01 	lds	r25, 0x0175
    1ad6:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1ada:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1ade:	cb 01       	movw	r24, r22
    1ae0:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    1ae4:	80 e4       	ldi	r24, 0x40	; 64
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	if(gain_loc<0){  // turn right
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	a9 01       	movw	r20, r18
    1af2:	60 91 72 01 	lds	r22, 0x0172
    1af6:	70 91 73 01 	lds	r23, 0x0173
    1afa:	80 91 74 01 	lds	r24, 0x0174
    1afe:	90 91 75 01 	lds	r25, 0x0175
    1b02:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	0c f0       	brlt	.+2      	; 0x1b0c <PID_p2p+0x144>
    1b0a:	44 c0       	rjmp	.+136    	; 0x1b94 <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    1b0c:	84 e3       	ldi	r24, 0x34	; 52
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1b14:	60 91 72 01 	lds	r22, 0x0172
    1b18:	70 91 73 01 	lds	r23, 0x0173
    1b1c:	80 91 74 01 	lds	r24, 0x0174
    1b20:	90 91 75 01 	lds	r25, 0x0175
    1b24:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1b28:	9b 01       	movw	r18, r22
    1b2a:	77 23       	and	r23, r23
    1b2c:	24 f4       	brge	.+8      	; 0x1b36 <PID_p2p+0x16e>
    1b2e:	22 27       	eor	r18, r18
    1b30:	33 27       	eor	r19, r19
    1b32:	26 1b       	sub	r18, r22
    1b34:	37 0b       	sbc	r19, r23
    1b36:	8a e8       	ldi	r24, 0x8A	; 138
    1b38:	92 e0       	ldi	r25, 0x02	; 2
    1b3a:	82 1b       	sub	r24, r18
    1b3c:	93 0b       	sbc	r25, r19
    1b3e:	90 93 8b 00 	sts	0x008B, r25
    1b42:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    1b46:	e0 90 28 01 	lds	r14, 0x0128
    1b4a:	f0 90 29 01 	lds	r15, 0x0129
    1b4e:	60 91 72 01 	lds	r22, 0x0172
    1b52:	70 91 73 01 	lds	r23, 0x0173
    1b56:	80 91 74 01 	lds	r24, 0x0174
    1b5a:	90 91 75 01 	lds	r25, 0x0175
    1b5e:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1b62:	9b 01       	movw	r18, r22
    1b64:	77 23       	and	r23, r23
    1b66:	24 f4       	brge	.+8      	; 0x1b70 <PID_p2p+0x1a8>
    1b68:	22 27       	eor	r18, r18
    1b6a:	33 27       	eor	r19, r19
    1b6c:	26 1b       	sub	r18, r22
    1b6e:	37 0b       	sbc	r19, r23
    1b70:	e2 16       	cp	r14, r18
    1b72:	f3 06       	cpc	r15, r19
    1b74:	44 f4       	brge	.+16     	; 0x1b86 <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    1b76:	8a e8       	ldi	r24, 0x8A	; 138
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	8e 19       	sub	r24, r14
    1b7c:	9f 09       	sbc	r25, r15
    1b7e:	90 93 8b 00 	sts	0x008B, r25
    1b82:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1b86:	8a e8       	ldi	r24, 0x8A	; 138
    1b88:	92 e0       	ldi	r25, 0x02	; 2
    1b8a:	90 93 8d 00 	sts	0x008D, r25
    1b8e:	80 93 8c 00 	sts	0x008C, r24
    1b92:	43 c0       	rjmp	.+134    	; 0x1c1a <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1b94:	89 e2       	ldi	r24, 0x29	; 41
    1b96:	92 e0       	ldi	r25, 0x02	; 2
    1b98:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1b9c:	60 91 72 01 	lds	r22, 0x0172
    1ba0:	70 91 73 01 	lds	r23, 0x0173
    1ba4:	80 91 74 01 	lds	r24, 0x0174
    1ba8:	90 91 75 01 	lds	r25, 0x0175
    1bac:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1bb0:	9b 01       	movw	r18, r22
    1bb2:	77 23       	and	r23, r23
    1bb4:	24 f4       	brge	.+8      	; 0x1bbe <PID_p2p+0x1f6>
    1bb6:	22 27       	eor	r18, r18
    1bb8:	33 27       	eor	r19, r19
    1bba:	26 1b       	sub	r18, r22
    1bbc:	37 0b       	sbc	r19, r23
    1bbe:	8a e8       	ldi	r24, 0x8A	; 138
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	82 1b       	sub	r24, r18
    1bc4:	93 0b       	sbc	r25, r19
    1bc6:	90 93 8d 00 	sts	0x008D, r25
    1bca:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    1bce:	e0 90 28 01 	lds	r14, 0x0128
    1bd2:	f0 90 29 01 	lds	r15, 0x0129
    1bd6:	60 91 72 01 	lds	r22, 0x0172
    1bda:	70 91 73 01 	lds	r23, 0x0173
    1bde:	80 91 74 01 	lds	r24, 0x0174
    1be2:	90 91 75 01 	lds	r25, 0x0175
    1be6:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    1bea:	9b 01       	movw	r18, r22
    1bec:	77 23       	and	r23, r23
    1bee:	24 f4       	brge	.+8      	; 0x1bf8 <PID_p2p+0x230>
    1bf0:	22 27       	eor	r18, r18
    1bf2:	33 27       	eor	r19, r19
    1bf4:	26 1b       	sub	r18, r22
    1bf6:	37 0b       	sbc	r19, r23
    1bf8:	e2 16       	cp	r14, r18
    1bfa:	f3 06       	cpc	r15, r19
    1bfc:	44 f4       	brge	.+16     	; 0x1c0e <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    1bfe:	8a e8       	ldi	r24, 0x8A	; 138
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	8e 19       	sub	r24, r14
    1c04:	9f 09       	sbc	r25, r15
    1c06:	90 93 8d 00 	sts	0x008D, r25
    1c0a:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1c0e:	8a e8       	ldi	r24, 0x8A	; 138
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	90 93 8b 00 	sts	0x008B, r25
    1c16:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	9f 90       	pop	r9
    1c34:	8f 90       	pop	r8
    1c36:	7f 90       	pop	r7
    1c38:	6f 90       	pop	r6
    1c3a:	5f 90       	pop	r5
    1c3c:	4f 90       	pop	r4
    1c3e:	08 95       	ret

00001c40 <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	6b 01       	movw	r12, r22
    1c4e:	7c 01       	movw	r14, r24
	//unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	a9 01       	movw	r20, r18
    1c56:	f8 01       	movw	r30, r16
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	7c f4       	brge	.+30     	; 0x1c86 <find_if_reach+0x46>
		if(x<0){
    1c68:	01 e0       	ldi	r16, 0x01	; 1
    1c6a:	10 e0       	ldi	r17, 0x00	; 0
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	c7 01       	movw	r24, r14
    1c74:	b6 01       	movw	r22, r12
    1c76:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	0c f0       	brlt	.+2      	; 0x1c80 <find_if_reach+0x40>
    1c7e:	00 e0       	ldi	r16, 0x00	; 0
			return 1;
    1c80:	80 2f       	mov	r24, r16
    1c82:	91 2f       	mov	r25, r17
    1c84:	0e c0       	rjmp	.+28     	; 0x1ca2 <find_if_reach+0x62>
			return 0;
		}
		
	}
	else{
		if(x>0){
    1c86:	01 e0       	ldi	r16, 0x01	; 1
    1c88:	10 e0       	ldi	r17, 0x00	; 0
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	a9 01       	movw	r20, r18
    1c90:	c7 01       	movw	r24, r14
    1c92:	b6 01       	movw	r22, r12
    1c94:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__gesf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	0c f0       	brlt	.+2      	; 0x1c9e <find_if_reach+0x5e>
    1c9c:	00 e0       	ldi	r16, 0x00	; 0
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
		if(x<0){
			return 1;
    1c9e:	80 2f       	mov	r24, r16
    1ca0:	91 2f       	mov	r25, r17
		}else{
			return 0;
		}
		
	}
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	08 95       	ret

00001cb0 <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int *state, float *goal, float *c_wii, float *dir){
    1cb0:	2f 92       	push	r2
    1cb2:	3f 92       	push	r3
    1cb4:	4f 92       	push	r4
    1cb6:	5f 92       	push	r5
    1cb8:	6f 92       	push	r6
    1cba:	7f 92       	push	r7
    1cbc:	8f 92       	push	r8
    1cbe:	9f 92       	push	r9
    1cc0:	af 92       	push	r10
    1cc2:	bf 92       	push	r11
    1cc4:	cf 92       	push	r12
    1cc6:	df 92       	push	r13
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	c6 58       	subi	r28, 0x86	; 134
    1cda:	d1 09       	sbc	r29, r1
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	cd 57       	subi	r28, 0x7D	; 125
    1ce8:	df 4f       	sbci	r29, 0xFF	; 255
    1cea:	99 83       	std	Y+1, r25	; 0x01
    1cec:	88 83       	st	Y, r24
    1cee:	c3 58       	subi	r28, 0x83	; 131
    1cf0:	d0 40       	sbci	r29, 0x00	; 0
    1cf2:	cb 57       	subi	r28, 0x7B	; 123
    1cf4:	df 4f       	sbci	r29, 0xFF	; 255
    1cf6:	79 83       	std	Y+1, r23	; 0x01
    1cf8:	68 83       	st	Y, r22
    1cfa:	c5 58       	subi	r28, 0x85	; 133
    1cfc:	d0 40       	sbci	r29, 0x00	; 0
    1cfe:	ed 96       	adiw	r28, 0x3d	; 61
    1d00:	5f af       	std	Y+63, r21	; 0x3f
    1d02:	4e af       	std	Y+62, r20	; 0x3e
    1d04:	ed 97       	sbiw	r28, 0x3d	; 61
    1d06:	ef 96       	adiw	r28, 0x3f	; 63
    1d08:	3f af       	std	Y+63, r19	; 0x3f
    1d0a:	2e af       	std	Y+62, r18	; 0x3e
    1d0c:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    1d0e:	82 e9       	ldi	r24, 0x92	; 146
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	0e 94 42 1a 	call	0x3484	; 0x3484 <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    1d16:	60 91 92 01 	lds	r22, 0x0192
    1d1a:	70 91 93 01 	lds	r23, 0x0193
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1d26:	69 83       	std	Y+1, r22	; 0x01
    1d28:	7a 83       	std	Y+2, r23	; 0x02
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	60 91 98 01 	lds	r22, 0x0198
    1d32:	70 91 99 01 	lds	r23, 0x0199
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1d3e:	6d 83       	std	Y+5, r22	; 0x05
    1d40:	7e 83       	std	Y+6, r23	; 0x06
    1d42:	8f 83       	std	Y+7, r24	; 0x07
    1d44:	98 87       	std	Y+8, r25	; 0x08
    1d46:	60 91 9e 01 	lds	r22, 0x019E
    1d4a:	70 91 9f 01 	lds	r23, 0x019F
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1d56:	69 87       	std	Y+9, r22	; 0x09
    1d58:	7a 87       	std	Y+10, r23	; 0x0a
    1d5a:	8b 87       	std	Y+11, r24	; 0x0b
    1d5c:	9c 87       	std	Y+12, r25	; 0x0c
    1d5e:	60 91 a4 01 	lds	r22, 0x01A4
    1d62:	70 91 a5 01 	lds	r23, 0x01A5
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1d6e:	6d 87       	std	Y+13, r22	; 0x0d
    1d70:	7e 87       	std	Y+14, r23	; 0x0e
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
    1d74:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    1d76:	60 91 94 01 	lds	r22, 0x0194
    1d7a:	70 91 95 01 	lds	r23, 0x0195
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1d86:	69 8b       	std	Y+17, r22	; 0x11
    1d88:	7a 8b       	std	Y+18, r23	; 0x12
    1d8a:	8b 8b       	std	Y+19, r24	; 0x13
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	60 91 9a 01 	lds	r22, 0x019A
    1d92:	70 91 9b 01 	lds	r23, 0x019B
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1d9e:	6d 8b       	std	Y+21, r22	; 0x15
    1da0:	7e 8b       	std	Y+22, r23	; 0x16
    1da2:	8f 8b       	std	Y+23, r24	; 0x17
    1da4:	98 8f       	std	Y+24, r25	; 0x18
    1da6:	60 91 a0 01 	lds	r22, 0x01A0
    1daa:	70 91 a1 01 	lds	r23, 0x01A1
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1db6:	69 8f       	std	Y+25, r22	; 0x19
    1db8:	7a 8f       	std	Y+26, r23	; 0x1a
    1dba:	8b 8f       	std	Y+27, r24	; 0x1b
    1dbc:	9c 8f       	std	Y+28, r25	; 0x1c
    1dbe:	60 91 a6 01 	lds	r22, 0x01A6
    1dc2:	70 91 a7 01 	lds	r23, 0x01A7
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__floatunsisf>
    1dce:	6d 8f       	std	Y+29, r22	; 0x1d
    1dd0:	7e 8f       	std	Y+30, r23	; 0x1e
    1dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd4:	98 a3       	std	Y+32, r25	; 0x20
    1dd6:	9e 01       	movw	r18, r28
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	eb 96       	adiw	r28, 0x3b	; 59
    1dde:	3f af       	std	Y+63, r19	; 0x3f
    1de0:	2e af       	std	Y+62, r18	; 0x3e
    1de2:	eb 97       	sbiw	r28, 0x3b	; 59
    1de4:	ce 01       	movw	r24, r28
    1de6:	41 96       	adiw	r24, 0x11	; 17
    1de8:	e3 96       	adiw	r28, 0x33	; 51
    1dea:	9f af       	std	Y+63, r25	; 0x3f
    1dec:	8e af       	std	Y+62, r24	; 0x3e
    1dee:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1df0:	ab 96       	adiw	r28, 0x2b	; 43
    1df2:	1f ae       	std	Y+63, r1	; 0x3f
    1df4:	1e ae       	std	Y+62, r1	; 0x3e
    1df6:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    1df8:	e9 96       	adiw	r28, 0x39	; 57
    1dfa:	1f ae       	std	Y+63, r1	; 0x3f
    1dfc:	1e ae       	std	Y+62, r1	; 0x3e
    1dfe:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1e00:	ab 96       	adiw	r28, 0x2b	; 43
    1e02:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e04:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e06:	ab 97       	sbiw	r28, 0x2b	; 43
    1e08:	11 96       	adiw	r26, 0x01	; 1
    1e0a:	e7 96       	adiw	r28, 0x37	; 55
    1e0c:	bf af       	std	Y+63, r27	; 0x3f
    1e0e:	ae af       	std	Y+62, r26	; 0x3e
    1e10:	e7 97       	sbiw	r28, 0x37	; 55
    1e12:	14 97       	sbiw	r26, 0x04	; 4
    1e14:	0c f0       	brlt	.+2      	; 0x1e18 <localization+0x168>
    1e16:	5c c6       	rjmp	.+3256   	; 0x2ad0 <localization+0xe20>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1e18:	eb 96       	adiw	r28, 0x3b	; 59
    1e1a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e1c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e1e:	eb 97       	sbiw	r28, 0x3b	; 59
    1e20:	81 90       	ld	r8, Z+
    1e22:	91 90       	ld	r9, Z+
    1e24:	a1 90       	ld	r10, Z+
    1e26:	b1 90       	ld	r11, Z+
    1e28:	e9 96       	adiw	r28, 0x39	; 57
    1e2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e2e:	e9 97       	sbiw	r28, 0x39	; 57
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	29 e3       	ldi	r18, 0x39	; 57
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	2c 0f       	add	r18, r28
    1e3a:	3d 1f       	adc	r19, r29
    1e3c:	28 0f       	add	r18, r24
    1e3e:	39 1f       	adc	r19, r25
    1e40:	a3 96       	adiw	r28, 0x23	; 35
    1e42:	3f af       	std	Y+63, r19	; 0x3f
    1e44:	2e af       	std	Y+62, r18	; 0x3e
    1e46:	a3 97       	sbiw	r28, 0x23	; 35
    1e48:	a5 e4       	ldi	r26, 0x45	; 69
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ac 0f       	add	r26, r28
    1e4e:	bd 1f       	adc	r27, r29
    1e50:	a8 0f       	add	r26, r24
    1e52:	b9 1f       	adc	r27, r25
    1e54:	a7 96       	adiw	r28, 0x27	; 39
    1e56:	bf af       	std	Y+63, r27	; 0x3f
    1e58:	ae af       	std	Y+62, r26	; 0x3e
    1e5a:	a7 97       	sbiw	r28, 0x27	; 39
    1e5c:	e9 96       	adiw	r28, 0x39	; 57
    1e5e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e60:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e62:	e9 97       	sbiw	r28, 0x39	; 57
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0f 2e       	mov	r0, r31
    1e6e:	f1 e2       	ldi	r31, 0x21	; 33
    1e70:	6f 2e       	mov	r6, r31
    1e72:	71 2c       	mov	r7, r1
    1e74:	f0 2d       	mov	r31, r0
    1e76:	6c 0e       	add	r6, r28
    1e78:	7d 1e       	adc	r7, r29
    1e7a:	68 0e       	add	r6, r24
    1e7c:	79 1e       	adc	r7, r25
    1e7e:	e3 96       	adiw	r28, 0x33	; 51
    1e80:	2e ad       	ldd	r18, Y+62	; 0x3e
    1e82:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e84:	e3 97       	sbiw	r28, 0x33	; 51
    1e86:	2c 5f       	subi	r18, 0xFC	; 252
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1e8c:	e7 96       	adiw	r28, 0x37	; 55
    1e8e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1e90:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e92:	e7 97       	sbiw	r28, 0x37	; 55
    1e94:	e1 96       	adiw	r28, 0x31	; 49
    1e96:	8c ae       	std	Y+60, r8	; 0x3c
    1e98:	9d ae       	std	Y+61, r9	; 0x3d
    1e9a:	ae ae       	std	Y+62, r10	; 0x3e
    1e9c:	bf ae       	std	Y+63, r11	; 0x3f
    1e9e:	e1 97       	sbiw	r28, 0x31	; 49
    1ea0:	59 01       	movw	r10, r18
    1ea2:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 ec       	ldi	r19, 0xC0	; 192
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	e1 96       	adiw	r28, 0x31	; 49
    1eae:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eb0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb6:	e1 97       	sbiw	r28, 0x31	; 49
    1eb8:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <localization+0x212>
    1ec0:	70 c0       	rjmp	.+224    	; 0x1fa2 <localization+0x2f2>
    1ec2:	e3 96       	adiw	r28, 0x33	; 51
    1ec4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ec6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ec8:	e3 97       	sbiw	r28, 0x33	; 51
    1eca:	cd 90       	ld	r12, X+
    1ecc:	dd 90       	ld	r13, X+
    1ece:	ed 90       	ld	r14, X+
    1ed0:	fc 90       	ld	r15, X
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 ec       	ldi	r19, 0xC0	; 192
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	54 e4       	ldi	r21, 0x44	; 68
    1eda:	c7 01       	movw	r24, r14
    1edc:	b6 01       	movw	r22, r12
    1ede:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <localization+0x238>
    1ee6:	5d c0       	rjmp	.+186    	; 0x1fa2 <localization+0x2f2>
    1ee8:	f1 01       	movw	r30, r2
    1eea:	40 80       	ld	r4, Z
    1eec:	51 80       	ldd	r5, Z+1	; 0x01
    1eee:	62 80       	ldd	r6, Z+2	; 0x02
    1ef0:	73 80       	ldd	r7, Z+3	; 0x03
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 ec       	ldi	r19, 0xC0	; 192
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	c3 01       	movw	r24, r6
    1efc:	b2 01       	movw	r22, r4
    1efe:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <localization+0x258>
    1f06:	4d c0       	rjmp	.+154    	; 0x1fa2 <localization+0x2f2>
    1f08:	d5 01       	movw	r26, r10
    1f0a:	8d 91       	ld	r24, X+
    1f0c:	9d 91       	ld	r25, X+
    1f0e:	0d 90       	ld	r0, X+
    1f10:	bc 91       	ld	r27, X
    1f12:	a0 2d       	mov	r26, r0
    1f14:	c1 58       	subi	r28, 0x81	; 129
    1f16:	df 4f       	sbci	r29, 0xFF	; 255
    1f18:	88 83       	st	Y, r24
    1f1a:	99 83       	std	Y+1, r25	; 0x01
    1f1c:	aa 83       	std	Y+2, r26	; 0x02
    1f1e:	bb 83       	std	Y+3, r27	; 0x03
    1f20:	cf 57       	subi	r28, 0x7F	; 127
    1f22:	d0 40       	sbci	r29, 0x00	; 0
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 ec       	ldi	r19, 0xC0	; 192
    1f28:	4f e7       	ldi	r20, 0x7F	; 127
    1f2a:	54 e4       	ldi	r21, 0x44	; 68
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	a9 f1       	breq	.+106    	; 0x1fa2 <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    1f38:	a3 01       	movw	r20, r6
    1f3a:	92 01       	movw	r18, r4
    1f3c:	e1 96       	adiw	r28, 0x31	; 49
    1f3e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f40:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f42:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f44:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f46:	e1 97       	sbiw	r28, 0x31	; 49
    1f48:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    1f4c:	2b 01       	movw	r4, r22
    1f4e:	3c 01       	movw	r6, r24
    1f50:	c1 58       	subi	r28, 0x81	; 129
    1f52:	df 4f       	sbci	r29, 0xFF	; 255
    1f54:	28 81       	ld	r18, Y
    1f56:	39 81       	ldd	r19, Y+1	; 0x01
    1f58:	4a 81       	ldd	r20, Y+2	; 0x02
    1f5a:	5b 81       	ldd	r21, Y+3	; 0x03
    1f5c:	cf 57       	subi	r28, 0x7F	; 127
    1f5e:	d0 40       	sbci	r29, 0x00	; 0
    1f60:	c7 01       	movw	r24, r14
    1f62:	b6 01       	movw	r22, r12
    1f64:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    1f68:	6b 01       	movw	r12, r22
    1f6a:	7c 01       	movw	r14, r24
    1f6c:	a3 01       	movw	r20, r6
    1f6e:	92 01       	movw	r18, r4
    1f70:	c3 01       	movw	r24, r6
    1f72:	b2 01       	movw	r22, r4
    1f74:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1f78:	2b 01       	movw	r4, r22
    1f7a:	3c 01       	movw	r6, r24
    1f7c:	a7 01       	movw	r20, r14
    1f7e:	96 01       	movw	r18, r12
    1f80:	c7 01       	movw	r24, r14
    1f82:	b6 01       	movw	r22, r12
    1f84:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    1f88:	9b 01       	movw	r18, r22
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	c3 01       	movw	r24, r6
    1f8e:	b2 01       	movw	r22, r4
    1f90:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    1f94:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <sqrt>
    1f98:	f4 01       	movw	r30, r8
    1f9a:	60 83       	st	Z, r22
    1f9c:	71 83       	std	Z+1, r23	; 0x01
    1f9e:	82 83       	std	Z+2, r24	; 0x02
    1fa0:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1fa2:	a3 96       	adiw	r28, 0x23	; 35
    1fa4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fa6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fa8:	a3 97       	sbiw	r28, 0x23	; 35
    1faa:	ab 96       	adiw	r28, 0x2b	; 43
    1fac:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fb0:	ab 97       	sbiw	r28, 0x2b	; 43
    1fb2:	ed 93       	st	X+, r30
    1fb4:	fd 93       	st	X+, r31
    1fb6:	a3 96       	adiw	r28, 0x23	; 35
    1fb8:	bf af       	std	Y+63, r27	; 0x3f
    1fba:	ae af       	std	Y+62, r26	; 0x3e
    1fbc:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1fbe:	a7 96       	adiw	r28, 0x27	; 39
    1fc0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fc2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fc4:	a7 97       	sbiw	r28, 0x27	; 39
    1fc6:	0d 93       	st	X+, r16
    1fc8:	1d 93       	st	X+, r17
    1fca:	a7 96       	adiw	r28, 0x27	; 39
    1fcc:	bf af       	std	Y+63, r27	; 0x3f
    1fce:	ae af       	std	Y+62, r26	; 0x3e
    1fd0:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1fd2:	0f 5f       	subi	r16, 0xFF	; 255
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	b4 e0       	ldi	r27, 0x04	; 4
    1fd8:	2b 0e       	add	r2, r27
    1fda:	31 1c       	adc	r3, r1
    1fdc:	e4 e0       	ldi	r30, 0x04	; 4
    1fde:	ae 0e       	add	r10, r30
    1fe0:	b1 1c       	adc	r11, r1
    1fe2:	f4 e0       	ldi	r31, 0x04	; 4
    1fe4:	8f 0e       	add	r8, r31
    1fe6:	91 1c       	adc	r9, r1
    1fe8:	04 30       	cpi	r16, 0x04	; 4
    1fea:	11 05       	cpc	r17, r1
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <localization+0x340>
    1fee:	5a cf       	rjmp	.-332    	; 0x1ea4 <localization+0x1f4>
    1ff0:	e9 96       	adiw	r28, 0x39	; 57
    1ff2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ff4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ff6:	e9 97       	sbiw	r28, 0x39	; 57
    1ff8:	e7 96       	adiw	r28, 0x37	; 55
    1ffa:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ffc:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ffe:	e7 97       	sbiw	r28, 0x37	; 55
    2000:	82 1b       	sub	r24, r18
    2002:	93 0b       	sbc	r25, r19
    2004:	dc 01       	movw	r26, r24
    2006:	14 96       	adiw	r26, 0x04	; 4
    2008:	e9 96       	adiw	r28, 0x39	; 57
    200a:	bf af       	std	Y+63, r27	; 0x3f
    200c:	ae af       	std	Y+62, r26	; 0x3e
    200e:	e9 97       	sbiw	r28, 0x39	; 57
    2010:	eb 96       	adiw	r28, 0x3b	; 59
    2012:	ee ad       	ldd	r30, Y+62	; 0x3e
    2014:	ff ad       	ldd	r31, Y+63	; 0x3f
    2016:	eb 97       	sbiw	r28, 0x3b	; 59
    2018:	34 96       	adiw	r30, 0x04	; 4
    201a:	eb 96       	adiw	r28, 0x3b	; 59
    201c:	ff af       	std	Y+63, r31	; 0x3f
    201e:	ee af       	std	Y+62, r30	; 0x3e
    2020:	eb 97       	sbiw	r28, 0x3b	; 59
    2022:	e3 96       	adiw	r28, 0x33	; 51
    2024:	2e ad       	ldd	r18, Y+62	; 0x3e
    2026:	3f ad       	ldd	r19, Y+63	; 0x3f
    2028:	e3 97       	sbiw	r28, 0x33	; 51
    202a:	2c 5f       	subi	r18, 0xFC	; 252
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	e3 96       	adiw	r28, 0x33	; 51
    2030:	3f af       	std	Y+63, r19	; 0x3f
    2032:	2e af       	std	Y+62, r18	; 0x3e
    2034:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    2036:	e7 96       	adiw	r28, 0x37	; 55
    2038:	8e ad       	ldd	r24, Y+62	; 0x3e
    203a:	9f ad       	ldd	r25, Y+63	; 0x3f
    203c:	e7 97       	sbiw	r28, 0x37	; 55
    203e:	03 97       	sbiw	r24, 0x03	; 3
    2040:	49 f0       	breq	.+18     	; 0x2054 <localization+0x3a4>
    2042:	e7 96       	adiw	r28, 0x37	; 55
    2044:	ae ad       	ldd	r26, Y+62	; 0x3e
    2046:	bf ad       	ldd	r27, Y+63	; 0x3f
    2048:	e7 97       	sbiw	r28, 0x37	; 55
    204a:	ab 96       	adiw	r28, 0x2b	; 43
    204c:	bf af       	std	Y+63, r27	; 0x3f
    204e:	ae af       	std	Y+62, r26	; 0x3e
    2050:	ab 97       	sbiw	r28, 0x2b	; 43
    2052:	d6 ce       	rjmp	.-596    	; 0x1e00 <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    2054:	e9 96       	adiw	r28, 0x39	; 57
    2056:	ee ad       	ldd	r30, Y+62	; 0x3e
    2058:	ff ad       	ldd	r31, Y+63	; 0x3f
    205a:	e9 97       	sbiw	r28, 0x39	; 57
    205c:	1e 16       	cp	r1, r30
    205e:	1f 06       	cpc	r1, r31
    2060:	84 f5       	brge	.+96     	; 0x20c2 <localization+0x412>
    2062:	6e 01       	movw	r12, r28
    2064:	f1 e2       	ldi	r31, 0x21	; 33
    2066:	cf 0e       	add	r12, r31
    2068:	d1 1c       	adc	r13, r1
    206a:	21 2c       	mov	r2, r1
    206c:	31 2c       	mov	r3, r1
    206e:	00 e0       	ldi	r16, 0x00	; 0
    2070:	10 e0       	ldi	r17, 0x00	; 0
    2072:	e1 2c       	mov	r14, r1
    2074:	f1 2c       	mov	r15, r1
    2076:	e9 96       	adiw	r28, 0x39	; 57
    2078:	ae ac       	ldd	r10, Y+62	; 0x3e
    207a:	bf ac       	ldd	r11, Y+63	; 0x3f
    207c:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    207e:	d6 01       	movw	r26, r12
    2080:	4d 90       	ld	r4, X+
    2082:	5d 90       	ld	r5, X+
    2084:	6d 90       	ld	r6, X+
    2086:	7d 90       	ld	r7, X+
    2088:	6d 01       	movw	r12, r26
    208a:	b8 01       	movw	r22, r16
    208c:	88 27       	eor	r24, r24
    208e:	77 fd       	sbrc	r23, 7
    2090:	80 95       	com	r24
    2092:	98 2f       	mov	r25, r24
    2094:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
    2098:	9b 01       	movw	r18, r22
    209a:	ac 01       	movw	r20, r24
    209c:	c3 01       	movw	r24, r6
    209e:	b2 01       	movw	r22, r4
    20a0:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__gesf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	34 f4       	brge	.+12     	; 0x20b4 <localization+0x404>
			indmax = i;
			dmax = d[i];
    20a8:	c3 01       	movw	r24, r6
    20aa:	b2 01       	movw	r22, r4
    20ac:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    20b0:	8b 01       	movw	r16, r22
    20b2:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    20b4:	bf ef       	ldi	r27, 0xFF	; 255
    20b6:	eb 1a       	sub	r14, r27
    20b8:	fb 0a       	sbc	r15, r27
    20ba:	ea 14       	cp	r14, r10
    20bc:	fb 04       	cpc	r15, r11
    20be:	f9 f6       	brne	.-66     	; 0x207e <localization+0x3ce>
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <localization+0x41a>
    20c2:	21 2c       	mov	r2, r1
    20c4:	31 2c       	mov	r3, r1
    20c6:	00 e0       	ldi	r16, 0x00	; 0
    20c8:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    20ca:	83 ec       	ldi	r24, 0xC3	; 195
    20cc:	92 e0       	ldi	r25, 0x02	; 2
    20ce:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(dmax);
    20d2:	c8 01       	movw	r24, r16
    20d4:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    20d8:	81 ec       	ldi	r24, 0xC1	; 193
    20da:	92 e0       	ldi	r25, 0x02	; 2
    20dc:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    20e0:	e9 96       	adiw	r28, 0x39	; 57
    20e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    20e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    20e6:	e9 97       	sbiw	r28, 0x39	; 57
    20e8:	1e 16       	cp	r1, r30
    20ea:	1f 06       	cpc	r1, r31
    20ec:	dc f5       	brge	.+118    	; 0x2164 <localization+0x4b4>
    20ee:	6e 01       	movw	r12, r28
    20f0:	f1 e2       	ldi	r31, 0x21	; 33
    20f2:	cf 0e       	add	r12, r31
    20f4:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    20f6:	a3 96       	adiw	r28, 0x23	; 35
    20f8:	1f ae       	std	Y+63, r1	; 0x3f
    20fa:	1e ae       	std	Y+62, r1	; 0x3e
    20fc:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    20fe:	0f 2e       	mov	r0, r31
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	af 2e       	mov	r10, r31
    2104:	f7 e2       	ldi	r31, 0x27	; 39
    2106:	bf 2e       	mov	r11, r31
    2108:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    210a:	e1 2c       	mov	r14, r1
    210c:	f1 2c       	mov	r15, r1
    210e:	48 01       	movw	r8, r16
    2110:	e9 96       	adiw	r28, 0x39	; 57
    2112:	0e ad       	ldd	r16, Y+62	; 0x3e
    2114:	1f ad       	ldd	r17, Y+63	; 0x3f
    2116:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    2118:	d6 01       	movw	r26, r12
    211a:	4d 90       	ld	r4, X+
    211c:	5d 90       	ld	r5, X+
    211e:	6d 90       	ld	r6, X+
    2120:	7d 90       	ld	r7, X+
    2122:	6d 01       	movw	r12, r26
    2124:	b5 01       	movw	r22, r10
    2126:	88 27       	eor	r24, r24
    2128:	77 fd       	sbrc	r23, 7
    212a:	80 95       	com	r24
    212c:	98 2f       	mov	r25, r24
    212e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
    2132:	9b 01       	movw	r18, r22
    2134:	ac 01       	movw	r20, r24
    2136:	c3 01       	movw	r24, r6
    2138:	b2 01       	movw	r22, r4
    213a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    213e:	88 23       	and	r24, r24
    2140:	4c f4       	brge	.+18     	; 0x2154 <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    2142:	c3 01       	movw	r24, r6
    2144:	b2 01       	movw	r22, r4
    2146:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    214a:	5b 01       	movw	r10, r22
    214c:	a3 96       	adiw	r28, 0x23	; 35
    214e:	ff ae       	std	Y+63, r15	; 0x3f
    2150:	ee ae       	std	Y+62, r14	; 0x3e
    2152:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    2154:	bf ef       	ldi	r27, 0xFF	; 255
    2156:	eb 1a       	sub	r14, r27
    2158:	fb 0a       	sbc	r15, r27
    215a:	e0 16       	cp	r14, r16
    215c:	f1 06       	cpc	r15, r17
    215e:	e1 f6       	brne	.-72     	; 0x2118 <localization+0x468>
    2160:	84 01       	movw	r16, r8
    2162:	04 c0       	rjmp	.+8      	; 0x216c <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    2164:	a3 96       	adiw	r28, 0x23	; 35
    2166:	1f ae       	std	Y+63, r1	; 0x3f
    2168:	1e ae       	std	Y+62, r1	; 0x3e
    216a:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    216c:	80 90 20 01 	lds	r8, 0x0120
    2170:	90 90 21 01 	lds	r9, 0x0121
    2174:	a0 90 22 01 	lds	r10, 0x0122
    2178:	b0 90 23 01 	lds	r11, 0x0123
    217c:	b8 01       	movw	r22, r16
    217e:	88 27       	eor	r24, r24
    2180:	77 fd       	sbrc	r23, 7
    2182:	80 95       	com	r24
    2184:	98 2f       	mov	r25, r24
    2186:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
    218a:	a5 01       	movw	r20, r10
    218c:	94 01       	movw	r18, r8
    218e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2192:	2b 01       	movw	r4, r22
    2194:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    2196:	c0 90 24 01 	lds	r12, 0x0124
    219a:	d0 90 25 01 	lds	r13, 0x0125
    219e:	e0 90 26 01 	lds	r14, 0x0126
    21a2:	f0 90 27 01 	lds	r15, 0x0127
    21a6:	e4 e1       	ldi	r30, 0x14	; 20
    21a8:	f1 e0       	ldi	r31, 0x01	; 1
    21aa:	ab 96       	adiw	r28, 0x2b	; 43
    21ac:	ff af       	std	Y+63, r31	; 0x3f
    21ae:	ee af       	std	Y+62, r30	; 0x3e
    21b0:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    21b2:	a7 96       	adiw	r28, 0x27	; 39
    21b4:	1f ae       	std	Y+63, r1	; 0x3f
    21b6:	1e ae       	std	Y+62, r1	; 0x3e
    21b8:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    21ba:	01 e0       	ldi	r16, 0x01	; 1
    21bc:	10 e0       	ldi	r17, 0x00	; 0
    21be:	af 96       	adiw	r28, 0x2f	; 47
    21c0:	3f ae       	std	Y+63, r3	; 0x3f
    21c2:	2e ae       	std	Y+62, r2	; 0x3e
    21c4:	af 97       	sbiw	r28, 0x2f	; 47
    21c6:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    21c8:	d1 01       	movw	r26, r2
    21ca:	2d 91       	ld	r18, X+
    21cc:	3d 91       	ld	r19, X+
    21ce:	4d 91       	ld	r20, X+
    21d0:	5d 91       	ld	r21, X+
    21d2:	1d 01       	movw	r2, r26
    21d4:	c3 01       	movw	r24, r6
    21d6:	b2 01       	movw	r22, r4
    21d8:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    21dc:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    21e0:	9b 01       	movw	r18, r22
    21e2:	77 23       	and	r23, r23
    21e4:	24 f4       	brge	.+8      	; 0x21ee <localization+0x53e>
    21e6:	22 27       	eor	r18, r18
    21e8:	33 27       	eor	r19, r19
    21ea:	26 1b       	sub	r18, r22
    21ec:	37 0b       	sbc	r19, r23
    21ee:	b9 01       	movw	r22, r18
    21f0:	88 27       	eor	r24, r24
    21f2:	77 fd       	sbrc	r23, 7
    21f4:	80 95       	com	r24
    21f6:	98 2f       	mov	r25, r24
    21f8:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__floatsisf>
    21fc:	a7 01       	movw	r20, r14
    21fe:	96 01       	movw	r18, r12
    2200:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__cmpsf2>
    2204:	88 23       	and	r24, r24
    2206:	24 f4       	brge	.+8      	; 0x2210 <localization+0x560>
    2208:	a7 96       	adiw	r28, 0x27	; 39
    220a:	1f af       	std	Y+63, r17	; 0x3f
    220c:	0e af       	std	Y+62, r16	; 0x3e
    220e:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    2210:	0f 5f       	subi	r16, 0xFF	; 255
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	04 30       	cpi	r16, 0x04	; 4
    2216:	11 05       	cpc	r17, r1
    2218:	b9 f6       	brne	.-82     	; 0x21c8 <localization+0x518>
    221a:	af 96       	adiw	r28, 0x2f	; 47
    221c:	2e ac       	ldd	r2, Y+62	; 0x3e
    221e:	3f ac       	ldd	r3, Y+63	; 0x3f
    2220:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    2222:	65 96       	adiw	r28, 0x15	; 21
    2224:	1c ae       	std	Y+60, r1	; 0x3c
    2226:	1d ae       	std	Y+61, r1	; 0x3d
    2228:	1e ae       	std	Y+62, r1	; 0x3e
    222a:	1f ae       	std	Y+63, r1	; 0x3f
    222c:	65 97       	sbiw	r28, 0x15	; 21
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e8       	ldi	r26, 0x80	; 128
    2234:	bf e3       	ldi	r27, 0x3F	; 63
    2236:	69 96       	adiw	r28, 0x19	; 25
    2238:	8c af       	std	Y+60, r24	; 0x3c
    223a:	9d af       	std	Y+61, r25	; 0x3d
    223c:	ae af       	std	Y+62, r26	; 0x3e
    223e:	bf af       	std	Y+63, r27	; 0x3f
    2240:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    2242:	a7 96       	adiw	r28, 0x27	; 39
    2244:	ee ad       	ldd	r30, Y+62	; 0x3e
    2246:	ff ad       	ldd	r31, Y+63	; 0x3f
    2248:	a7 97       	sbiw	r28, 0x27	; 39
    224a:	e2 30       	cpi	r30, 0x02	; 2
    224c:	f1 05       	cpc	r31, r1
    224e:	19 f0       	breq	.+6      	; 0x2256 <localization+0x5a6>
    2250:	33 97       	sbiw	r30, 0x03	; 3
    2252:	51 f1       	breq	.+84     	; 0x22a8 <localization+0x5f8>
    2254:	5a c0       	rjmp	.+180    	; 0x230a <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    2256:	a5 01       	movw	r20, r10
    2258:	94 01       	movw	r18, r8
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	88 e6       	ldi	r24, 0x68	; 104
    2260:	91 e4       	ldi	r25, 0x41	; 65
    2262:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__divsf3>
    2266:	e1 96       	adiw	r28, 0x31	; 49
    2268:	6c af       	std	Y+60, r22	; 0x3c
    226a:	7d af       	std	Y+61, r23	; 0x3d
    226c:	8e af       	std	Y+62, r24	; 0x3e
    226e:	9f af       	std	Y+63, r25	; 0x3f
    2270:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    2272:	84 e9       	ldi	r24, 0x94	; 148
    2274:	97 e8       	ldi	r25, 0x87	; 135
    2276:	a5 ee       	ldi	r26, 0xE5	; 229
    2278:	be e3       	ldi	r27, 0x3E	; 62
    227a:	65 96       	adiw	r28, 0x15	; 21
    227c:	8c af       	std	Y+60, r24	; 0x3c
    227e:	9d af       	std	Y+61, r25	; 0x3d
    2280:	ae af       	std	Y+62, r26	; 0x3e
    2282:	bf af       	std	Y+63, r27	; 0x3f
    2284:	65 97       	sbiw	r28, 0x15	; 21
    2286:	81 ea       	ldi	r24, 0xA1	; 161
    2288:	96 ed       	ldi	r25, 0xD6	; 214
    228a:	a4 e6       	ldi	r26, 0x64	; 100
    228c:	bf eb       	ldi	r27, 0xBF	; 191
    228e:	69 96       	adiw	r28, 0x19	; 25
    2290:	8c af       	std	Y+60, r24	; 0x3c
    2292:	9d af       	std	Y+61, r25	; 0x3d
    2294:	ae af       	std	Y+62, r26	; 0x3e
    2296:	bf af       	std	Y+63, r27	; 0x3f
    2298:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    229a:	e5 96       	adiw	r28, 0x35	; 53
    229c:	1c ae       	std	Y+60, r1	; 0x3c
    229e:	1d ae       	std	Y+61, r1	; 0x3d
    22a0:	1e ae       	std	Y+62, r1	; 0x3e
    22a2:	1f ae       	std	Y+63, r1	; 0x3f
    22a4:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    22a6:	45 c0       	rjmp	.+138    	; 0x2332 <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    22a8:	a5 01       	movw	r20, r10
    22aa:	94 01       	movw	r18, r8
    22ac:	61 ee       	ldi	r22, 0xE1	; 225
    22ae:	7a e7       	ldi	r23, 0x7A	; 122
    22b0:	8a e3       	ldi	r24, 0x3A	; 58
    22b2:	91 e4       	ldi	r25, 0x41	; 65
    22b4:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__divsf3>
    22b8:	e5 96       	adiw	r28, 0x35	; 53
    22ba:	6c af       	std	Y+60, r22	; 0x3c
    22bc:	7d af       	std	Y+61, r23	; 0x3d
    22be:	8e af       	std	Y+62, r24	; 0x3e
    22c0:	9f af       	std	Y+63, r25	; 0x3f
    22c2:	e5 97       	sbiw	r28, 0x35	; 53
    22c4:	a5 01       	movw	r20, r10
    22c6:	94 01       	movw	r18, r8
    22c8:	63 e2       	ldi	r22, 0x23	; 35
    22ca:	7b ed       	ldi	r23, 0xDB	; 219
    22cc:	8b e0       	ldi	r24, 0x0B	; 11
    22ce:	91 ec       	ldi	r25, 0xC1	; 193
    22d0:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__divsf3>
    22d4:	e1 96       	adiw	r28, 0x31	; 49
    22d6:	6c af       	std	Y+60, r22	; 0x3c
    22d8:	7d af       	std	Y+61, r23	; 0x3d
    22da:	8e af       	std	Y+62, r24	; 0x3e
    22dc:	9f af       	std	Y+63, r25	; 0x3f
    22de:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    22e0:	86 e6       	ldi	r24, 0x66	; 102
    22e2:	96 e6       	ldi	r25, 0x66	; 102
    22e4:	a6 e7       	ldi	r26, 0x76	; 118
    22e6:	bf eb       	ldi	r27, 0xBF	; 191
    22e8:	65 96       	adiw	r28, 0x15	; 21
    22ea:	8c af       	std	Y+60, r24	; 0x3c
    22ec:	9d af       	std	Y+61, r25	; 0x3d
    22ee:	ae af       	std	Y+62, r26	; 0x3e
    22f0:	bf af       	std	Y+63, r27	; 0x3f
    22f2:	65 97       	sbiw	r28, 0x15	; 21
    22f4:	8f e9       	ldi	r24, 0x9F	; 159
    22f6:	9d ec       	ldi	r25, 0xCD	; 205
    22f8:	aa e8       	ldi	r26, 0x8A	; 138
    22fa:	be e3       	ldi	r27, 0x3E	; 62
    22fc:	69 96       	adiw	r28, 0x19	; 25
    22fe:	8c af       	std	Y+60, r24	; 0x3c
    2300:	9d af       	std	Y+61, r25	; 0x3d
    2302:	ae af       	std	Y+62, r26	; 0x3e
    2304:	bf af       	std	Y+63, r27	; 0x3f
    2306:	69 97       	sbiw	r28, 0x19	; 25
			break;
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    230a:	a7 96       	adiw	r28, 0x27	; 39
    230c:	2e ad       	ldd	r18, Y+62	; 0x3e
    230e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2310:	a7 97       	sbiw	r28, 0x27	; 39
    2312:	12 16       	cp	r1, r18
    2314:	13 06       	cpc	r1, r19
    2316:	0c f0       	brlt	.+2      	; 0x231a <localization+0x66a>
    2318:	4a c3       	rjmp	.+1684   	; 0x29ae <localization+0xcfe>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    231a:	e5 96       	adiw	r28, 0x35	; 53
    231c:	1c ae       	std	Y+60, r1	; 0x3c
    231e:	1d ae       	std	Y+61, r1	; 0x3d
    2320:	1e ae       	std	Y+62, r1	; 0x3e
    2322:	1f ae       	std	Y+63, r1	; 0x3f
    2324:	e5 97       	sbiw	r28, 0x35	; 53
    2326:	e1 96       	adiw	r28, 0x31	; 49
    2328:	1c ae       	std	Y+60, r1	; 0x3c
    232a:	1d ae       	std	Y+61, r1	; 0x3d
    232c:	1e ae       	std	Y+62, r1	; 0x3e
    232e:	1f ae       	std	Y+63, r1	; 0x3f
    2330:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    2332:	f1 01       	movw	r30, r2
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	8c 0f       	add	r24, r28
    233e:	9d 1f       	adc	r25, r29
    2340:	e8 0f       	add	r30, r24
    2342:	f9 1f       	adc	r31, r25
    2344:	00 ad       	ldd	r16, Z+56	; 0x38
    2346:	11 ad       	ldd	r17, Z+57	; 0x39
    2348:	a3 96       	adiw	r28, 0x23	; 35
    234a:	ee ad       	ldd	r30, Y+62	; 0x3e
    234c:	ff ad       	ldd	r31, Y+63	; 0x3f
    234e:	a3 97       	sbiw	r28, 0x23	; 35
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	e8 0f       	add	r30, r24
    2356:	f9 1f       	adc	r31, r25
    2358:	80 ad       	ldd	r24, Z+56	; 0x38
    235a:	91 ad       	ldd	r25, Z+57	; 0x39
    235c:	80 17       	cp	r24, r16
    235e:	91 07       	cpc	r25, r17
    2360:	89 f0       	breq	.+34     	; 0x2384 <localization+0x6d4>
    2362:	a3 96       	adiw	r28, 0x23	; 35
    2364:	ee ad       	ldd	r30, Y+62	; 0x3e
    2366:	ff ad       	ldd	r31, Y+63	; 0x3f
    2368:	a3 97       	sbiw	r28, 0x23	; 35
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	a5 e4       	ldi	r26, 0x45	; 69
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ac 0f       	add	r26, r28
    2374:	bd 1f       	adc	r27, r29
    2376:	ea 0f       	add	r30, r26
    2378:	fb 1f       	adc	r31, r27
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	08 17       	cp	r16, r24
    2380:	19 07       	cpc	r17, r25
    2382:	69 f4       	brne	.+26     	; 0x239e <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    2384:	d1 01       	movw	r26, r2
    2386:	aa 0f       	add	r26, r26
    2388:	bb 1f       	adc	r27, r27
    238a:	e5 e4       	ldi	r30, 0x45	; 69
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	ec 0f       	add	r30, r28
    2390:	fd 1f       	adc	r31, r29
    2392:	ae 0f       	add	r26, r30
    2394:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    2396:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    2398:	0d 91       	ld	r16, X+
    239a:	1c 91       	ld	r17, X
    239c:	0c c0       	rjmp	.+24     	; 0x23b6 <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    239e:	f1 01       	movw	r30, r2
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	25 e4       	ldi	r18, 0x45	; 69
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	2c 0f       	add	r18, r28
    23aa:	3d 1f       	adc	r19, r29
    23ac:	e2 0f       	add	r30, r18
    23ae:	f3 1f       	adc	r31, r19
    23b0:	01 90       	ld	r0, Z+
    23b2:	f0 81       	ld	r31, Z
    23b4:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    23b6:	a7 96       	adiw	r28, 0x27	; 39
    23b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    23ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    23bc:	a7 97       	sbiw	r28, 0x27	; 39
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <localization+0x714>
    23c2:	45 c0       	rjmp	.+138    	; 0x244e <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    23c4:	6f 01       	movw	r12, r30
    23c6:	cc 0c       	add	r12, r12
    23c8:	dd 1c       	adc	r13, r13
    23ca:	cc 0c       	add	r12, r12
    23cc:	dd 1c       	adc	r13, r13
    23ce:	a1 e0       	ldi	r26, 0x01	; 1
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ac 0f       	add	r26, r28
    23d4:	bd 1f       	adc	r27, r29
    23d6:	ca 0e       	add	r12, r26
    23d8:	db 1e       	adc	r13, r27
    23da:	78 01       	movw	r14, r16
    23dc:	ee 0c       	add	r14, r14
    23de:	ff 1c       	adc	r15, r15
    23e0:	ee 0c       	add	r14, r14
    23e2:	ff 1c       	adc	r15, r15
    23e4:	ea 0e       	add	r14, r26
    23e6:	fb 1e       	adc	r15, r27
    23e8:	f7 01       	movw	r30, r14
    23ea:	20 81       	ld	r18, Z
    23ec:	31 81       	ldd	r19, Z+1	; 0x01
    23ee:	42 81       	ldd	r20, Z+2	; 0x02
    23f0:	53 81       	ldd	r21, Z+3	; 0x03
    23f2:	d6 01       	movw	r26, r12
    23f4:	6d 91       	ld	r22, X+
    23f6:	7d 91       	ld	r23, X+
    23f8:	8d 91       	ld	r24, X+
    23fa:	9c 91       	ld	r25, X
    23fc:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    240c:	ad 96       	adiw	r28, 0x2d	; 45
    240e:	6c af       	std	Y+60, r22	; 0x3c
    2410:	7d af       	std	Y+61, r23	; 0x3d
    2412:	8e af       	std	Y+62, r24	; 0x3e
    2414:	9f af       	std	Y+63, r25	; 0x3f
    2416:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    2418:	f7 01       	movw	r30, r14
    241a:	20 89       	ldd	r18, Z+16	; 0x10
    241c:	31 89       	ldd	r19, Z+17	; 0x11
    241e:	42 89       	ldd	r20, Z+18	; 0x12
    2420:	53 89       	ldd	r21, Z+19	; 0x13
    2422:	d6 01       	movw	r26, r12
    2424:	50 96       	adiw	r26, 0x10	; 16
    2426:	6d 91       	ld	r22, X+
    2428:	7d 91       	ld	r23, X+
    242a:	8d 91       	ld	r24, X+
    242c:	9c 91       	ld	r25, X
    242e:	53 97       	sbiw	r26, 0x13	; 19
    2430:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2440:	a9 96       	adiw	r28, 0x29	; 41
    2442:	6c af       	std	Y+60, r22	; 0x3c
    2444:	7d af       	std	Y+61, r23	; 0x3d
    2446:	8e af       	std	Y+62, r24	; 0x3e
    2448:	9f af       	std	Y+63, r25	; 0x3f
    244a:	a9 97       	sbiw	r28, 0x29	; 41
    244c:	1e c0       	rjmp	.+60     	; 0x248a <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	21 e0       	ldi	r18, 0x01	; 1
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	2c 0f       	add	r18, r28
    245c:	3d 1f       	adc	r19, r29
    245e:	e2 0f       	add	r30, r18
    2460:	f3 1f       	adc	r31, r19
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	a2 81       	ldd	r26, Z+2	; 0x02
    2468:	b3 81       	ldd	r27, Z+3	; 0x03
    246a:	ad 96       	adiw	r28, 0x2d	; 45
    246c:	8c af       	std	Y+60, r24	; 0x3c
    246e:	9d af       	std	Y+61, r25	; 0x3d
    2470:	ae af       	std	Y+62, r26	; 0x3e
    2472:	bf af       	std	Y+63, r27	; 0x3f
    2474:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    2476:	80 89       	ldd	r24, Z+16	; 0x10
    2478:	91 89       	ldd	r25, Z+17	; 0x11
    247a:	a2 89       	ldd	r26, Z+18	; 0x12
    247c:	b3 89       	ldd	r27, Z+19	; 0x13
    247e:	a9 96       	adiw	r28, 0x29	; 41
    2480:	8c af       	std	Y+60, r24	; 0x3c
    2482:	9d af       	std	Y+61, r25	; 0x3d
    2484:	ae af       	std	Y+62, r26	; 0x3e
    2486:	bf af       	std	Y+63, r27	; 0x3f
    2488:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    248a:	00 0f       	add	r16, r16
    248c:	11 1f       	adc	r17, r17
    248e:	00 0f       	add	r16, r16
    2490:	11 1f       	adc	r17, r17
    2492:	a1 e0       	ldi	r26, 0x01	; 1
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ac 0f       	add	r26, r28
    2498:	bd 1f       	adc	r27, r29
    249a:	0a 0f       	add	r16, r26
    249c:	1b 1f       	adc	r17, r27
    249e:	ad 96       	adiw	r28, 0x2d	; 45
    24a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    24a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    24a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    24a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    24a8:	ad 97       	sbiw	r28, 0x2d	; 45
    24aa:	f8 01       	movw	r30, r16
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    24b8:	4b 01       	movw	r8, r22
    24ba:	5c 01       	movw	r10, r24
    24bc:	a9 96       	adiw	r28, 0x29	; 41
    24be:	2c ad       	ldd	r18, Y+60	; 0x3c
    24c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    24c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    24c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    24c6:	a9 97       	sbiw	r28, 0x29	; 41
    24c8:	d8 01       	movw	r26, r16
    24ca:	50 96       	adiw	r26, 0x10	; 16
    24cc:	6d 91       	ld	r22, X+
    24ce:	7d 91       	ld	r23, X+
    24d0:	8d 91       	ld	r24, X+
    24d2:	9c 91       	ld	r25, X
    24d4:	53 97       	sbiw	r26, 0x13	; 19
    24d6:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    24da:	6b 01       	movw	r12, r22
    24dc:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    24de:	a5 01       	movw	r20, r10
    24e0:	94 01       	movw	r18, r8
    24e2:	c5 01       	movw	r24, r10
    24e4:	b4 01       	movw	r22, r8
    24e6:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    24ea:	2b 01       	movw	r4, r22
    24ec:	3c 01       	movw	r6, r24
    24ee:	a7 01       	movw	r20, r14
    24f0:	96 01       	movw	r18, r12
    24f2:	c7 01       	movw	r24, r14
    24f4:	b6 01       	movw	r22, r12
    24f6:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    24fa:	9b 01       	movw	r18, r22
    24fc:	ac 01       	movw	r20, r24
    24fe:	c3 01       	movw	r24, r6
    2500:	b2 01       	movw	r22, r4
    2502:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    2506:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <sqrt>
    250a:	2b 01       	movw	r4, r22
    250c:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    250e:	9b 01       	movw	r18, r22
    2510:	ac 01       	movw	r20, r24
    2512:	c5 01       	movw	r24, r10
    2514:	b4 01       	movw	r22, r8
    2516:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__divsf3>
    251a:	4b 01       	movw	r8, r22
    251c:	5c 01       	movw	r10, r24
    251e:	6d 96       	adiw	r28, 0x1d	; 29
    2520:	6c af       	std	Y+60, r22	; 0x3c
    2522:	7d af       	std	Y+61, r23	; 0x3d
    2524:	8e af       	std	Y+62, r24	; 0x3e
    2526:	9f af       	std	Y+63, r25	; 0x3f
    2528:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    252a:	a3 01       	movw	r20, r6
    252c:	92 01       	movw	r18, r4
    252e:	c7 01       	movw	r24, r14
    2530:	b6 01       	movw	r22, r12
    2532:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__divsf3>
    2536:	6b 01       	movw	r12, r22
    2538:	7c 01       	movw	r14, r24
    253a:	a1 96       	adiw	r28, 0x21	; 33
    253c:	6c af       	std	Y+60, r22	; 0x3c
    253e:	7d af       	std	Y+61, r23	; 0x3d
    2540:	8e af       	std	Y+62, r24	; 0x3e
    2542:	9f af       	std	Y+63, r25	; 0x3f
    2544:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    2546:	65 96       	adiw	r28, 0x15	; 21
    2548:	2c ad       	ldd	r18, Y+60	; 0x3c
    254a:	3d ad       	ldd	r19, Y+61	; 0x3d
    254c:	4e ad       	ldd	r20, Y+62	; 0x3e
    254e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2550:	65 97       	sbiw	r28, 0x15	; 21
    2552:	c5 01       	movw	r24, r10
    2554:	b4 01       	movw	r22, r8
    2556:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    255a:	4b 01       	movw	r8, r22
    255c:	5c 01       	movw	r10, r24
    255e:	69 96       	adiw	r28, 0x19	; 25
    2560:	2c ad       	ldd	r18, Y+60	; 0x3c
    2562:	3d ad       	ldd	r19, Y+61	; 0x3d
    2564:	4e ad       	ldd	r20, Y+62	; 0x3e
    2566:	5f ad       	ldd	r21, Y+63	; 0x3f
    2568:	69 97       	sbiw	r28, 0x19	; 25
    256a:	c7 01       	movw	r24, r14
    256c:	b6 01       	movw	r22, r12
    256e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2572:	9b 01       	movw	r18, r22
    2574:	ac 01       	movw	r20, r24
    2576:	c5 01       	movw	r24, r10
    2578:	b4 01       	movw	r22, r8
    257a:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    257e:	2b 01       	movw	r4, r22
    2580:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    2582:	9b 01       	movw	r18, r22
    2584:	ac 01       	movw	r20, r24
    2586:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    258a:	9b 01       	movw	r18, r22
    258c:	ac 01       	movw	r20, r24
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e8       	ldi	r24, 0x80	; 128
    2594:	9f e3       	ldi	r25, 0x3F	; 63
    2596:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    259a:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <sqrt>
    259e:	a5 96       	adiw	r28, 0x25	; 37
    25a0:	6c af       	std	Y+60, r22	; 0x3c
    25a2:	7d af       	std	Y+61, r23	; 0x3d
    25a4:	8e af       	std	Y+62, r24	; 0x3e
    25a6:	9f af       	std	Y+63, r25	; 0x3f
    25a8:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 5a       	subi	r30, 0xAF	; 175
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	7f 01       	movw	r14, r30
    25b2:	8e 01       	movw	r16, r28
    25b4:	07 5a       	subi	r16, 0xA7	; 167
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	9b 01       	movw	r18, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	c3 01       	movw	r24, r6
    25be:	b2 01       	movw	r22, r4
    25c0:	0e 94 b8 09 	call	0x1370	; 0x1370 <find_sign>
    25c4:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	91 05       	cpc	r25, r1
    25ca:	09 f0       	breq	.+2      	; 0x25ce <localization+0x91e>
    25cc:	a1 c0       	rjmp	.+322    	; 0x2710 <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    25ce:	0f 2e       	mov	r0, r31
    25d0:	fc e2       	ldi	r31, 0x2C	; 44
    25d2:	af 2e       	mov	r10, r31
    25d4:	f1 e0       	ldi	r31, 0x01	; 1
    25d6:	bf 2e       	mov	r11, r31
    25d8:	f0 2d       	mov	r31, r0
    25da:	d5 01       	movw	r26, r10
    25dc:	2d 91       	ld	r18, X+
    25de:	3d 91       	ld	r19, X+
    25e0:	4d 91       	ld	r20, X+
    25e2:	5c 91       	ld	r21, X
    25e4:	ad 96       	adiw	r28, 0x2d	; 45
    25e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    25e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    25ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    25ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    25ee:	ad 97       	sbiw	r28, 0x2d	; 45
    25f0:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    25f4:	a3 01       	movw	r20, r6
    25f6:	92 01       	movw	r18, r4
    25f8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    25fc:	9b 01       	movw	r18, r22
    25fe:	ac 01       	movw	r20, r24
    2600:	e5 96       	adiw	r28, 0x35	; 53
    2602:	6c ad       	ldd	r22, Y+60	; 0x3c
    2604:	7d ad       	ldd	r23, Y+61	; 0x3d
    2606:	8e ad       	ldd	r24, Y+62	; 0x3e
    2608:	9f ad       	ldd	r25, Y+63	; 0x3f
    260a:	e5 97       	sbiw	r28, 0x35	; 53
    260c:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    2610:	6b 01       	movw	r12, r22
    2612:	7c 01       	movw	r14, r24
    2614:	00 e3       	ldi	r16, 0x30	; 48
    2616:	11 e0       	ldi	r17, 0x01	; 1
    2618:	f8 01       	movw	r30, r16
    261a:	20 81       	ld	r18, Z
    261c:	31 81       	ldd	r19, Z+1	; 0x01
    261e:	42 81       	ldd	r20, Z+2	; 0x02
    2620:	53 81       	ldd	r21, Z+3	; 0x03
    2622:	a9 96       	adiw	r28, 0x29	; 41
    2624:	6c ad       	ldd	r22, Y+60	; 0x3c
    2626:	7d ad       	ldd	r23, Y+61	; 0x3d
    2628:	8e ad       	ldd	r24, Y+62	; 0x3e
    262a:	9f ad       	ldd	r25, Y+63	; 0x3f
    262c:	a9 97       	sbiw	r28, 0x29	; 41
    262e:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    2632:	a5 96       	adiw	r28, 0x25	; 37
    2634:	2c ad       	ldd	r18, Y+60	; 0x3c
    2636:	3d ad       	ldd	r19, Y+61	; 0x3d
    2638:	4e ad       	ldd	r20, Y+62	; 0x3e
    263a:	5f ad       	ldd	r21, Y+63	; 0x3f
    263c:	a5 97       	sbiw	r28, 0x25	; 37
    263e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2642:	9b 01       	movw	r18, r22
    2644:	ac 01       	movw	r20, r24
    2646:	c7 01       	movw	r24, r14
    2648:	b6 01       	movw	r22, r12
    264a:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    264e:	ed 96       	adiw	r28, 0x3d	; 61
    2650:	ae ad       	ldd	r26, Y+62	; 0x3e
    2652:	bf ad       	ldd	r27, Y+63	; 0x3f
    2654:	ed 97       	sbiw	r28, 0x3d	; 61
    2656:	6d 93       	st	X+, r22
    2658:	7d 93       	st	X+, r23
    265a:	8d 93       	st	X+, r24
    265c:	9c 93       	st	X, r25
    265e:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    2660:	f8 01       	movw	r30, r16
    2662:	20 81       	ld	r18, Z
    2664:	31 81       	ldd	r19, Z+1	; 0x01
    2666:	42 81       	ldd	r20, Z+2	; 0x02
    2668:	53 81       	ldd	r21, Z+3	; 0x03
    266a:	a9 96       	adiw	r28, 0x29	; 41
    266c:	6c ad       	ldd	r22, Y+60	; 0x3c
    266e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2670:	8e ad       	ldd	r24, Y+62	; 0x3e
    2672:	9f ad       	ldd	r25, Y+63	; 0x3f
    2674:	a9 97       	sbiw	r28, 0x29	; 41
    2676:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    267a:	a3 01       	movw	r20, r6
    267c:	92 01       	movw	r18, r4
    267e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2682:	9b 01       	movw	r18, r22
    2684:	ac 01       	movw	r20, r24
    2686:	e1 96       	adiw	r28, 0x31	; 49
    2688:	6c ad       	ldd	r22, Y+60	; 0x3c
    268a:	7d ad       	ldd	r23, Y+61	; 0x3d
    268c:	8e ad       	ldd	r24, Y+62	; 0x3e
    268e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2690:	e1 97       	sbiw	r28, 0x31	; 49
    2692:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    2696:	6b 01       	movw	r12, r22
    2698:	7c 01       	movw	r14, r24
    269a:	d5 01       	movw	r26, r10
    269c:	2d 91       	ld	r18, X+
    269e:	3d 91       	ld	r19, X+
    26a0:	4d 91       	ld	r20, X+
    26a2:	5c 91       	ld	r21, X
    26a4:	ad 96       	adiw	r28, 0x2d	; 45
    26a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    26a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    26aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    26ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    26ae:	ad 97       	sbiw	r28, 0x2d	; 45
    26b0:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    26b4:	a5 96       	adiw	r28, 0x25	; 37
    26b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    26b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    26ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    26bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    26be:	a5 97       	sbiw	r28, 0x25	; 37
    26c0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    26c4:	9b 01       	movw	r18, r22
    26c6:	ac 01       	movw	r20, r24
    26c8:	c7 01       	movw	r24, r14
    26ca:	b6 01       	movw	r22, r12
    26cc:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    26d0:	ed 96       	adiw	r28, 0x3d	; 61
    26d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    26d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    26d6:	ed 97       	sbiw	r28, 0x3d	; 61
    26d8:	64 83       	std	Z+4, r22	; 0x04
    26da:	75 83       	std	Z+5, r23	; 0x05
    26dc:	86 83       	std	Z+6, r24	; 0x06
    26de:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    26e0:	ef 96       	adiw	r28, 0x3f	; 63
    26e2:	ae ad       	ldd	r26, Y+62	; 0x3e
    26e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    26e6:	ef 97       	sbiw	r28, 0x3f	; 63
    26e8:	4d 92       	st	X+, r4
    26ea:	5d 92       	st	X+, r5
    26ec:	6d 92       	st	X+, r6
    26ee:	7c 92       	st	X, r7
    26f0:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    26f2:	a5 96       	adiw	r28, 0x25	; 37
    26f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    26f6:	9d ad       	ldd	r25, Y+61	; 0x3d
    26f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    26fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    26fc:	a5 97       	sbiw	r28, 0x25	; 37
    26fe:	ef 96       	adiw	r28, 0x3f	; 63
    2700:	ee ad       	ldd	r30, Y+62	; 0x3e
    2702:	ff ad       	ldd	r31, Y+63	; 0x3f
    2704:	ef 97       	sbiw	r28, 0x3f	; 63
    2706:	84 83       	std	Z+4, r24	; 0x04
    2708:	95 83       	std	Z+5, r25	; 0x05
    270a:	a6 83       	std	Z+6, r26	; 0x06
    270c:	b7 83       	std	Z+7, r27	; 0x07
    270e:	a1 c0       	rjmp	.+322    	; 0x2852 <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    2710:	0f 2e       	mov	r0, r31
    2712:	fc e2       	ldi	r31, 0x2C	; 44
    2714:	af 2e       	mov	r10, r31
    2716:	f1 e0       	ldi	r31, 0x01	; 1
    2718:	bf 2e       	mov	r11, r31
    271a:	f0 2d       	mov	r31, r0
    271c:	d5 01       	movw	r26, r10
    271e:	2d 91       	ld	r18, X+
    2720:	3d 91       	ld	r19, X+
    2722:	4d 91       	ld	r20, X+
    2724:	5c 91       	ld	r21, X
    2726:	ad 96       	adiw	r28, 0x2d	; 45
    2728:	6c ad       	ldd	r22, Y+60	; 0x3c
    272a:	7d ad       	ldd	r23, Y+61	; 0x3d
    272c:	8e ad       	ldd	r24, Y+62	; 0x3e
    272e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2730:	ad 97       	sbiw	r28, 0x2d	; 45
    2732:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    2736:	a3 01       	movw	r20, r6
    2738:	92 01       	movw	r18, r4
    273a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    273e:	9b 01       	movw	r18, r22
    2740:	ac 01       	movw	r20, r24
    2742:	e5 96       	adiw	r28, 0x35	; 53
    2744:	6c ad       	ldd	r22, Y+60	; 0x3c
    2746:	7d ad       	ldd	r23, Y+61	; 0x3d
    2748:	8e ad       	ldd	r24, Y+62	; 0x3e
    274a:	9f ad       	ldd	r25, Y+63	; 0x3f
    274c:	e5 97       	sbiw	r28, 0x35	; 53
    274e:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    2752:	6b 01       	movw	r12, r22
    2754:	7c 01       	movw	r14, r24
    2756:	00 e3       	ldi	r16, 0x30	; 48
    2758:	11 e0       	ldi	r17, 0x01	; 1
    275a:	f8 01       	movw	r30, r16
    275c:	20 81       	ld	r18, Z
    275e:	31 81       	ldd	r19, Z+1	; 0x01
    2760:	42 81       	ldd	r20, Z+2	; 0x02
    2762:	53 81       	ldd	r21, Z+3	; 0x03
    2764:	a9 96       	adiw	r28, 0x29	; 41
    2766:	6c ad       	ldd	r22, Y+60	; 0x3c
    2768:	7d ad       	ldd	r23, Y+61	; 0x3d
    276a:	8e ad       	ldd	r24, Y+62	; 0x3e
    276c:	9f ad       	ldd	r25, Y+63	; 0x3f
    276e:	a9 97       	sbiw	r28, 0x29	; 41
    2770:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    2774:	a5 96       	adiw	r28, 0x25	; 37
    2776:	2c ad       	ldd	r18, Y+60	; 0x3c
    2778:	3d ad       	ldd	r19, Y+61	; 0x3d
    277a:	4e ad       	ldd	r20, Y+62	; 0x3e
    277c:	5f ad       	ldd	r21, Y+63	; 0x3f
    277e:	a5 97       	sbiw	r28, 0x25	; 37
    2780:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2784:	9b 01       	movw	r18, r22
    2786:	ac 01       	movw	r20, r24
    2788:	c7 01       	movw	r24, r14
    278a:	b6 01       	movw	r22, r12
    278c:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    2790:	ed 96       	adiw	r28, 0x3d	; 61
    2792:	ae ad       	ldd	r26, Y+62	; 0x3e
    2794:	bf ad       	ldd	r27, Y+63	; 0x3f
    2796:	ed 97       	sbiw	r28, 0x3d	; 61
    2798:	6d 93       	st	X+, r22
    279a:	7d 93       	st	X+, r23
    279c:	8d 93       	st	X+, r24
    279e:	9c 93       	st	X, r25
    27a0:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    27a2:	f8 01       	movw	r30, r16
    27a4:	20 81       	ld	r18, Z
    27a6:	31 81       	ldd	r19, Z+1	; 0x01
    27a8:	42 81       	ldd	r20, Z+2	; 0x02
    27aa:	53 81       	ldd	r21, Z+3	; 0x03
    27ac:	a9 96       	adiw	r28, 0x29	; 41
    27ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    27b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    27b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    27b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    27b6:	a9 97       	sbiw	r28, 0x29	; 41
    27b8:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    27bc:	a3 01       	movw	r20, r6
    27be:	92 01       	movw	r18, r4
    27c0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    27c4:	9b 01       	movw	r18, r22
    27c6:	ac 01       	movw	r20, r24
    27c8:	e1 96       	adiw	r28, 0x31	; 49
    27ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    27cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    27ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    27d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    27d2:	e1 97       	sbiw	r28, 0x31	; 49
    27d4:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    27d8:	6b 01       	movw	r12, r22
    27da:	7c 01       	movw	r14, r24
    27dc:	d5 01       	movw	r26, r10
    27de:	2d 91       	ld	r18, X+
    27e0:	3d 91       	ld	r19, X+
    27e2:	4d 91       	ld	r20, X+
    27e4:	5c 91       	ld	r21, X
    27e6:	ad 96       	adiw	r28, 0x2d	; 45
    27e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    27ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    27ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    27ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    27f0:	ad 97       	sbiw	r28, 0x2d	; 45
    27f2:	0e 94 ef 1a 	call	0x35de	; 0x35de <__subsf3>
    27f6:	a5 96       	adiw	r28, 0x25	; 37
    27f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    27fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    27fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    27fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    2800:	a5 97       	sbiw	r28, 0x25	; 37
    2802:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2806:	9b 01       	movw	r18, r22
    2808:	ac 01       	movw	r20, r24
    280a:	c7 01       	movw	r24, r14
    280c:	b6 01       	movw	r22, r12
    280e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__addsf3>
    2812:	ed 96       	adiw	r28, 0x3d	; 61
    2814:	ee ad       	ldd	r30, Y+62	; 0x3e
    2816:	ff ad       	ldd	r31, Y+63	; 0x3f
    2818:	ed 97       	sbiw	r28, 0x3d	; 61
    281a:	64 83       	std	Z+4, r22	; 0x04
    281c:	75 83       	std	Z+5, r23	; 0x05
    281e:	86 83       	std	Z+6, r24	; 0x06
    2820:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    2822:	ef 96       	adiw	r28, 0x3f	; 63
    2824:	ae ad       	ldd	r26, Y+62	; 0x3e
    2826:	bf ad       	ldd	r27, Y+63	; 0x3f
    2828:	ef 97       	sbiw	r28, 0x3f	; 63
    282a:	4d 92       	st	X+, r4
    282c:	5d 92       	st	X+, r5
    282e:	6d 92       	st	X+, r6
    2830:	7c 92       	st	X, r7
    2832:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    2834:	a5 96       	adiw	r28, 0x25	; 37
    2836:	8c ad       	ldd	r24, Y+60	; 0x3c
    2838:	9d ad       	ldd	r25, Y+61	; 0x3d
    283a:	ae ad       	ldd	r26, Y+62	; 0x3e
    283c:	bf ad       	ldd	r27, Y+63	; 0x3f
    283e:	a5 97       	sbiw	r28, 0x25	; 37
    2840:	b0 58       	subi	r27, 0x80	; 128
    2842:	ef 96       	adiw	r28, 0x3f	; 63
    2844:	ee ad       	ldd	r30, Y+62	; 0x3e
    2846:	ff ad       	ldd	r31, Y+63	; 0x3f
    2848:	ef 97       	sbiw	r28, 0x3f	; 63
    284a:	84 83       	std	Z+4, r24	; 0x04
    284c:	95 83       	std	Z+5, r25	; 0x05
    284e:	a6 83       	std	Z+6, r26	; 0x06
    2850:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    2852:	ed 96       	adiw	r28, 0x3d	; 61
    2854:	ee ad       	ldd	r30, Y+62	; 0x3e
    2856:	ff ad       	ldd	r31, Y+63	; 0x3f
    2858:	ed 97       	sbiw	r28, 0x3d	; 61
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	a2 81       	ldd	r26, Z+2	; 0x02
    2860:	b3 81       	ldd	r27, Z+3	; 0x03
    2862:	80 93 8a 01 	sts	0x018A, r24
    2866:	90 93 8b 01 	sts	0x018B, r25
    286a:	a0 93 8c 01 	sts	0x018C, r26
    286e:	b0 93 8d 01 	sts	0x018D, r27
		c_wii_last[1] = c_wii[1];
    2872:	84 81       	ldd	r24, Z+4	; 0x04
    2874:	95 81       	ldd	r25, Z+5	; 0x05
    2876:	a6 81       	ldd	r26, Z+6	; 0x06
    2878:	b7 81       	ldd	r27, Z+7	; 0x07
    287a:	80 93 8e 01 	sts	0x018E, r24
    287e:	90 93 8f 01 	sts	0x018F, r25
    2882:	a0 93 90 01 	sts	0x0190, r26
    2886:	b0 93 91 01 	sts	0x0191, r27
		dir_last[0] = dir[0];
    288a:	ef 96       	adiw	r28, 0x3f	; 63
    288c:	ee ad       	ldd	r30, Y+62	; 0x3e
    288e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2890:	ef 97       	sbiw	r28, 0x3f	; 63
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	a2 81       	ldd	r26, Z+2	; 0x02
    2898:	b3 81       	ldd	r27, Z+3	; 0x03
    289a:	80 93 82 01 	sts	0x0182, r24
    289e:	90 93 83 01 	sts	0x0183, r25
    28a2:	a0 93 84 01 	sts	0x0184, r26
    28a6:	b0 93 85 01 	sts	0x0185, r27
		dir_last[1] = dir[1];
    28aa:	84 81       	ldd	r24, Z+4	; 0x04
    28ac:	95 81       	ldd	r25, Z+5	; 0x05
    28ae:	a6 81       	ldd	r26, Z+6	; 0x06
    28b0:	b7 81       	ldd	r27, Z+7	; 0x07
    28b2:	80 93 86 01 	sts	0x0186, r24
    28b6:	90 93 87 01 	sts	0x0187, r25
    28ba:	a0 93 88 01 	sts	0x0188, r26
    28be:	b0 93 89 01 	sts	0x0189, r27
		
		if (*state == 4){
    28c2:	cd 57       	subi	r28, 0x7D	; 125
    28c4:	df 4f       	sbci	r29, 0xFF	; 255
    28c6:	a8 81       	ld	r26, Y
    28c8:	b9 81       	ldd	r27, Y+1	; 0x01
    28ca:	c3 58       	subi	r28, 0x83	; 131
    28cc:	d0 40       	sbci	r29, 0x00	; 0
    28ce:	8d 91       	ld	r24, X+
    28d0:	9c 91       	ld	r25, X
    28d2:	04 97       	sbiw	r24, 0x04	; 4
    28d4:	e9 f5       	brne	.+122    	; 0x2950 <localization+0xca0>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    28d6:	ed 96       	adiw	r28, 0x3d	; 61
    28d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    28da:	ff ad       	ldd	r31, Y+63	; 0x3f
    28dc:	ed 97       	sbiw	r28, 0x3d	; 61
    28de:	24 81       	ldd	r18, Z+4	; 0x04
    28e0:	35 81       	ldd	r19, Z+5	; 0x05
    28e2:	46 81       	ldd	r20, Z+6	; 0x06
    28e4:	57 81       	ldd	r21, Z+7	; 0x07
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	cb 57       	subi	r28, 0x7B	; 123
    28f0:	df 4f       	sbci	r29, 0xFF	; 255
    28f2:	08 81       	ld	r16, Y
    28f4:	19 81       	ldd	r17, Y+1	; 0x01
    28f6:	c5 58       	subi	r28, 0x85	; 133
    28f8:	d0 40       	sbci	r29, 0x00	; 0
    28fa:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <find_if_reach>
			if (!if_reach){
    28fe:	89 2b       	or	r24, r25
    2900:	f9 f4       	brne	.+62     	; 0x2940 <localization+0xc90>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    2902:	ef 96       	adiw	r28, 0x3f	; 63
    2904:	ae ac       	ldd	r10, Y+62	; 0x3e
    2906:	bf ac       	ldd	r11, Y+63	; 0x3f
    2908:	ef 97       	sbiw	r28, 0x3f	; 63
    290a:	ed 96       	adiw	r28, 0x3d	; 61
    290c:	ce ac       	ldd	r12, Y+62	; 0x3e
    290e:	df ac       	ldd	r13, Y+63	; 0x3f
    2910:	ed 97       	sbiw	r28, 0x3d	; 61
    2912:	78 01       	movw	r14, r16
    2914:	93 01       	movw	r18, r6
    2916:	82 01       	movw	r16, r4
    2918:	a5 96       	adiw	r28, 0x25	; 37
    291a:	4c ad       	ldd	r20, Y+60	; 0x3c
    291c:	5d ad       	ldd	r21, Y+61	; 0x3d
    291e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2920:	7f ad       	ldd	r23, Y+63	; 0x3f
    2922:	a5 97       	sbiw	r28, 0x25	; 37
    2924:	c4 01       	movw	r24, r8
    2926:	0e 94 9c 0a 	call	0x1538	; 0x1538 <cal_angle>
				PID_p2p(Kp_p2p, Kd_p2p);
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	48 ec       	ldi	r20, 0xC8	; 200
    2930:	53 e4       	ldi	r21, 0x43	; 67
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	88 ec       	ldi	r24, 0xC8	; 200
    2938:	92 e4       	ldi	r25, 0x42	; 66
    293a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <PID_p2p>
    293e:	08 c0       	rjmp	.+16     	; 0x2950 <localization+0xca0>
			}
			else{ // reach goal, stop
				OCR1B = 0;
    2940:	10 92 8b 00 	sts	0x008B, r1
    2944:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    2948:	10 92 8d 00 	sts	0x008D, r1
    294c:	10 92 8c 00 	sts	0x008C, r1
				//if (*state == 4){
					//*state = 5;
				//}
			}
		}
		if (*state == 3){
    2950:	cd 57       	subi	r28, 0x7D	; 125
    2952:	df 4f       	sbci	r29, 0xFF	; 255
    2954:	a8 81       	ld	r26, Y
    2956:	b9 81       	ldd	r27, Y+1	; 0x01
    2958:	c3 58       	subi	r28, 0x83	; 131
    295a:	d0 40       	sbci	r29, 0x00	; 0
    295c:	8d 91       	ld	r24, X+
    295e:	9c 91       	ld	r25, X
    2960:	03 97       	sbiw	r24, 0x03	; 3
    2962:	09 f0       	breq	.+2      	; 0x2966 <localization+0xcb6>
    2964:	5c c0       	rjmp	.+184    	; 0x2a1e <localization+0xd6e>
			cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    2966:	ef 96       	adiw	r28, 0x3f	; 63
    2968:	ae ac       	ldd	r10, Y+62	; 0x3e
    296a:	bf ac       	ldd	r11, Y+63	; 0x3f
    296c:	ef 97       	sbiw	r28, 0x3f	; 63
    296e:	ed 96       	adiw	r28, 0x3d	; 61
    2970:	ce ac       	ldd	r12, Y+62	; 0x3e
    2972:	df ac       	ldd	r13, Y+63	; 0x3f
    2974:	ed 97       	sbiw	r28, 0x3d	; 61
    2976:	cb 57       	subi	r28, 0x7B	; 123
    2978:	df 4f       	sbci	r29, 0xFF	; 255
    297a:	e8 80       	ld	r14, Y
    297c:	f9 80       	ldd	r15, Y+1	; 0x01
    297e:	c5 58       	subi	r28, 0x85	; 133
    2980:	d0 40       	sbci	r29, 0x00	; 0
    2982:	93 01       	movw	r18, r6
    2984:	82 01       	movw	r16, r4
    2986:	a5 96       	adiw	r28, 0x25	; 37
    2988:	4c ad       	ldd	r20, Y+60	; 0x3c
    298a:	5d ad       	ldd	r21, Y+61	; 0x3d
    298c:	6e ad       	ldd	r22, Y+62	; 0x3e
    298e:	7f ad       	ldd	r23, Y+63	; 0x3f
    2990:	a5 97       	sbiw	r28, 0x25	; 37
    2992:	c4 01       	movw	r24, r8
    2994:	0e 94 9c 0a 	call	0x1538	; 0x1538 <cal_angle>
			PID_alpha(Kp_loc, Kd_loc);
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	48 ec       	ldi	r20, 0xC8	; 200
    299e:	53 e4       	ldi	r21, 0x43	; 67
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	88 ec       	ldi	r24, 0xC8	; 200
    29a6:	92 e4       	ldi	r25, 0x42	; 66
    29a8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <PID_alpha>
    29ac:	38 c0       	rjmp	.+112    	; 0x2a1e <localization+0xd6e>
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    29ae:	80 91 8a 01 	lds	r24, 0x018A
    29b2:	90 91 8b 01 	lds	r25, 0x018B
    29b6:	a0 91 8c 01 	lds	r26, 0x018C
    29ba:	b0 91 8d 01 	lds	r27, 0x018D
    29be:	ed 96       	adiw	r28, 0x3d	; 61
    29c0:	ee ad       	ldd	r30, Y+62	; 0x3e
    29c2:	ff ad       	ldd	r31, Y+63	; 0x3f
    29c4:	ed 97       	sbiw	r28, 0x3d	; 61
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    29ce:	80 91 8e 01 	lds	r24, 0x018E
    29d2:	90 91 8f 01 	lds	r25, 0x018F
    29d6:	a0 91 90 01 	lds	r26, 0x0190
    29da:	b0 91 91 01 	lds	r27, 0x0191
    29de:	84 83       	std	Z+4, r24	; 0x04
    29e0:	95 83       	std	Z+5, r25	; 0x05
    29e2:	a6 83       	std	Z+6, r26	; 0x06
    29e4:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    29e6:	80 91 82 01 	lds	r24, 0x0182
    29ea:	90 91 83 01 	lds	r25, 0x0183
    29ee:	a0 91 84 01 	lds	r26, 0x0184
    29f2:	b0 91 85 01 	lds	r27, 0x0185
    29f6:	ef 96       	adiw	r28, 0x3f	; 63
    29f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    29fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    29fc:	ef 97       	sbiw	r28, 0x3f	; 63
    29fe:	80 83       	st	Z, r24
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	a2 83       	std	Z+2, r26	; 0x02
    2a04:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    2a06:	80 91 86 01 	lds	r24, 0x0186
    2a0a:	90 91 87 01 	lds	r25, 0x0187
    2a0e:	a0 91 88 01 	lds	r26, 0x0188
    2a12:	b0 91 89 01 	lds	r27, 0x0189
    2a16:	84 83       	std	Z+4, r24	; 0x04
    2a18:	95 83       	std	Z+5, r25	; 0x05
    2a1a:	a6 83       	std	Z+6, r26	; 0x06
    2a1c:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    2a1e:	85 eb       	ldi	r24, 0xB5	; 181
    2a20:	92 e0       	ldi	r25, 0x02	; 2
    2a22:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(c_wii[0]);
    2a26:	ed 96       	adiw	r28, 0x3d	; 61
    2a28:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a2a:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a2c:	ed 97       	sbiw	r28, 0x3d	; 61
    2a2e:	6d 91       	ld	r22, X+
    2a30:	7d 91       	ld	r23, X+
    2a32:	8d 91       	ld	r24, X+
    2a34:	9c 91       	ld	r25, X
    2a36:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("		y:");
    2a40:	80 eb       	ldi	r24, 0xB0	; 176
    2a42:	92 e0       	ldi	r25, 0x02	; 2
    2a44:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(c_wii[1]);
    2a48:	ed 96       	adiw	r28, 0x3d	; 61
    2a4a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a4c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a4e:	ed 97       	sbiw	r28, 0x3d	; 61
    2a50:	64 81       	ldd	r22, Z+4	; 0x04
    2a52:	75 81       	ldd	r23, Z+5	; 0x05
    2a54:	86 81       	ldd	r24, Z+6	; 0x06
    2a56:	97 81       	ldd	r25, Z+7	; 0x07
    2a58:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    2a62:	8e ea       	ldi	r24, 0xAE	; 174
    2a64:	92 e0       	ldi	r25, 0x02	; 2
    2a66:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    2a6a:	8d e9       	ldi	r24, 0x9D	; 157
    2a6c:	92 e0       	ldi	r25, 0x02	; 2
    2a6e:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(dir[0]*1000);
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4a e7       	ldi	r20, 0x7A	; 122
    2a78:	54 e4       	ldi	r21, 0x44	; 68
    2a7a:	ef 96       	adiw	r28, 0x3f	; 63
    2a7c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a7e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a80:	ef 97       	sbiw	r28, 0x3f	; 63
    2a82:	6d 91       	ld	r22, X+
    2a84:	7d 91       	ld	r23, X+
    2a86:	8d 91       	ld	r24, X+
    2a88:	9c 91       	ld	r25, X
    2a8a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2a8e:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    2a92:	cb 01       	movw	r24, r22
    2a94:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2a98:	85 e9       	ldi	r24, 0x95	; 149
    2a9a:	92 e0       	ldi	r25, 0x02	; 2
    2a9c:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
	m_usb_tx_int(dir[1]*1000);
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a e7       	ldi	r20, 0x7A	; 122
    2aa6:	54 e4       	ldi	r21, 0x44	; 68
    2aa8:	ef 96       	adiw	r28, 0x3f	; 63
    2aaa:	ee ad       	ldd	r30, Y+62	; 0x3e
    2aac:	ff ad       	ldd	r31, Y+63	; 0x3f
    2aae:	ef 97       	sbiw	r28, 0x3f	; 63
    2ab0:	64 81       	ldd	r22, Z+4	; 0x04
    2ab2:	75 81       	ldd	r23, Z+5	; 0x05
    2ab4:	86 81       	ldd	r24, Z+6	; 0x06
    2ab6:	97 81       	ldd	r25, Z+7	; 0x07
    2ab8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__mulsf3>
    2abc:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fixsfsi>
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	0e 94 b6 18 	call	0x316c	; 0x316c <m_usb_tx_int>
	m_usb_tx_string("\n");
    2ac6:	83 e9       	ldi	r24, 0x93	; 147
    2ac8:	92 e0       	ldi	r25, 0x02	; 2
    2aca:	0e 94 9c 18 	call	0x3138	; 0x3138 <print_P>
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <localization+0xe48>
    2ad0:	eb 96       	adiw	r28, 0x3b	; 59
    2ad2:	2e ad       	ldd	r18, Y+62	; 0x3e
    2ad4:	3f ad       	ldd	r19, Y+63	; 0x3f
    2ad6:	eb 97       	sbiw	r28, 0x3b	; 59
    2ad8:	2c 5f       	subi	r18, 0xFC	; 252
    2ada:	3f 4f       	sbci	r19, 0xFF	; 255
    2adc:	eb 96       	adiw	r28, 0x3b	; 59
    2ade:	3f af       	std	Y+63, r19	; 0x3f
    2ae0:	2e af       	std	Y+62, r18	; 0x3e
    2ae2:	eb 97       	sbiw	r28, 0x3b	; 59
    2ae4:	e3 96       	adiw	r28, 0x33	; 51
    2ae6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ae8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aea:	e3 97       	sbiw	r28, 0x33	; 51
    2aec:	04 96       	adiw	r24, 0x04	; 4
    2aee:	e3 96       	adiw	r28, 0x33	; 51
    2af0:	9f af       	std	Y+63, r25	; 0x3f
    2af2:	8e af       	std	Y+62, r24	; 0x3e
    2af4:	e3 97       	sbiw	r28, 0x33	; 51
    2af6:	a5 ca       	rjmp	.-2742   	; 0x2042 <localization+0x392>
}
    2af8:	ca 57       	subi	r28, 0x7A	; 122
    2afa:	df 4f       	sbci	r29, 0xFF	; 255
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	ff 90       	pop	r15
    2b10:	ef 90       	pop	r14
    2b12:	df 90       	pop	r13
    2b14:	cf 90       	pop	r12
    2b16:	bf 90       	pop	r11
    2b18:	af 90       	pop	r10
    2b1a:	9f 90       	pop	r9
    2b1c:	8f 90       	pop	r8
    2b1e:	7f 90       	pop	r7
    2b20:	6f 90       	pop	r6
    2b22:	5f 90       	pop	r5
    2b24:	4f 90       	pop	r4
    2b26:	3f 90       	pop	r3
    2b28:	2f 90       	pop	r2
    2b2a:	08 95       	ret

00002b2c <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2b2c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2b2e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2b30:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2b32:	8c e0       	ldi	r24, 0x0C	; 12
    2b34:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2b38:	e9 e6       	ldi	r30, 0x69	; 105
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	80 62       	ori	r24, 0x20	; 32
    2b40:	80 83       	st	Z, r24
    2b42:	80 81       	ld	r24, Z
    2b44:	8f 7e       	andi	r24, 0xEF	; 239
    2b46:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2b48:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2b4a:	78 94       	sei
    2b4c:	08 95       	ret

00002b4e <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	18 2f       	mov	r17, r24
    2b56:	d6 2f       	mov	r29, r22
    2b58:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2b5a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2b5e:	94 ea       	ldi	r25, 0xA4	; 164
    2b60:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b64:	ec eb       	ldi	r30, 0xBC	; 188
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	90 81       	ld	r25, Z
    2b6a:	99 23       	and	r25, r25
    2b6c:	ec f7       	brge	.-6      	; 0x2b68 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2b6e:	90 e5       	ldi	r25, 0x50	; 80
    2b70:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b74:	94 e8       	ldi	r25, 0x84	; 132
    2b76:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b7a:	ec eb       	ldi	r30, 0xBC	; 188
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	90 81       	ld	r25, Z
    2b80:	99 23       	and	r25, r25
    2b82:	ec f7       	brge	.-6      	; 0x2b7e <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2b84:	90 91 b9 00 	lds	r25, 0x00B9
    2b88:	98 7f       	andi	r25, 0xF8	; 248
    2b8a:	90 32       	cpi	r25, 0x20	; 32
    2b8c:	29 f4       	brne	.+10     	; 0x2b98 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2b8e:	84 e9       	ldi	r24, 0x94	; 148
    2b90:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	2d c0       	rjmp	.+90     	; 0x2bf2 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b9e:	84 e8       	ldi	r24, 0x84	; 132
    2ba0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2ba4:	ec eb       	ldi	r30, 0xBC	; 188
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	90 81       	ld	r25, Z
    2baa:	99 23       	and	r25, r25
    2bac:	ec f7       	brge	.-6      	; 0x2ba8 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2bae:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bb2:	84 e8       	ldi	r24, 0x84	; 132
    2bb4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2bb8:	ec eb       	ldi	r30, 0xBC	; 188
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	88 23       	and	r24, r24
    2bc0:	ec f7       	brge	.-6      	; 0x2bbc <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2bc2:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bc6:	84 e8       	ldi	r24, 0x84	; 132
    2bc8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2bcc:	ec eb       	ldi	r30, 0xBC	; 188
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	88 23       	and	r24, r24
    2bd4:	ec f7       	brge	.-6      	; 0x2bd0 <m_rf_open+0x82>
	
	TWDR = packet_length;
    2bd6:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bda:	84 e8       	ldi	r24, 0x84	; 132
    2bdc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2be0:	ec eb       	ldi	r30, 0xBC	; 188
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	88 23       	and	r24, r24
    2be8:	ec f7       	brge	.-6      	; 0x2be4 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2bea:	84 e9       	ldi	r24, 0x94	; 148
    2bec:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
}
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	08 95       	ret

00002bfa <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2bfa:	1f 93       	push	r17
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2c00:	24 ea       	ldi	r18, 0xA4	; 164
    2c02:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    2c06:	ec eb       	ldi	r30, 0xBC	; 188
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	20 81       	ld	r18, Z
    2c0c:	22 23       	and	r18, r18
    2c0e:	ec f7       	brge	.-6      	; 0x2c0a <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2c10:	21 e5       	ldi	r18, 0x51	; 81
    2c12:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c16:	24 e8       	ldi	r18, 0x84	; 132
    2c18:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2c1c:	ec eb       	ldi	r30, 0xBC	; 188
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	20 81       	ld	r18, Z
    2c22:	22 23       	and	r18, r18
    2c24:	ec f7       	brge	.-6      	; 0x2c20 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2c26:	20 91 b9 00 	lds	r18, 0x00B9
    2c2a:	28 7f       	andi	r18, 0xF8	; 248
    2c2c:	28 34       	cpi	r18, 0x48	; 72
    2c2e:	29 f4       	brne	.+10     	; 0x2c3a <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2c30:	84 e9       	ldi	r24, 0x94	; 148
    2c32:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	44 c0       	rjmp	.+136    	; 0x2cc2 <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2c3a:	24 ec       	ldi	r18, 0xC4	; 196
    2c3c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2c40:	ec eb       	ldi	r30, 0xBC	; 188
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	20 81       	ld	r18, Z
    2c46:	22 23       	and	r18, r18
    2c48:	ec f7       	brge	.-6      	; 0x2c44 <m_rf_read+0x4a>
	bytes = TWDR;
    2c4a:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
    2c4e:	16 13       	cpse	r17, r22
    2c50:	0a c0       	rjmp	.+20     	; 0x2c66 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2c52:	41 2f       	mov	r20, r17
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	41 50       	subi	r20, 0x01	; 1
    2c58:	51 09       	sbc	r21, r1
    2c5a:	14 16       	cp	r1, r20
    2c5c:	15 06       	cpc	r1, r21
    2c5e:	44 f0       	brlt	.+16     	; 0x2c70 <m_rf_read+0x76>
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	1c c0       	rjmp	.+56     	; 0x2c9e <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2c66:	84 e9       	ldi	r24, 0x94	; 148
    2c68:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	29 c0       	rjmp	.+82     	; 0x2cc2 <m_rf_read+0xc8>
    2c70:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2c76:	ec eb       	ldi	r30, 0xBC	; 188
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2c7c:	cb eb       	ldi	r28, 0xBB	; 187
    2c7e:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2c80:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2c82:	60 81       	ld	r22, Z
    2c84:	66 23       	and	r22, r22
    2c86:	ec f7       	brge	.-6      	; 0x2c82 <m_rf_read+0x88>
		buffer[i] = TWDR;
    2c88:	68 81       	ld	r22, Y
    2c8a:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2c8c:	2f 5f       	subi	r18, 0xFF	; 255
    2c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c90:	24 17       	cp	r18, r20
    2c92:	35 07       	cpc	r19, r21
    2c94:	ac f3       	brlt	.-22     	; 0x2c80 <m_rf_read+0x86>
    2c96:	21 2f       	mov	r18, r17
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	21 50       	subi	r18, 0x01	; 1
    2c9c:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2c9e:	44 e8       	ldi	r20, 0x84	; 132
    2ca0:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2ca4:	ec eb       	ldi	r30, 0xBC	; 188
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	40 81       	ld	r20, Z
    2caa:	44 23       	and	r20, r20
    2cac:	ec f7       	brge	.-6      	; 0x2ca8 <m_rf_read+0xae>
	buffer[i++] = TWDR;
    2cae:	40 91 bb 00 	lds	r20, 0x00BB
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	e2 0f       	add	r30, r18
    2cb6:	f3 1f       	adc	r31, r19
    2cb8:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2cba:	84 e9       	ldi	r24, 0x94	; 148
    2cbc:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
}
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	08 95       	ret

00002cca <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    2cd0:	80 ea       	ldi	r24, 0xA0	; 160
    2cd2:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2cd6:	82 e1       	ldi	r24, 0x12	; 18
    2cd8:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2cda:	09 b4       	in	r0, 0x29	; 41
    2cdc:	00 fe       	sbrs	r0, 0
    2cde:	fd cf       	rjmp	.-6      	; 0x2cda <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    2ce0:	80 e9       	ldi	r24, 0x90	; 144
    2ce2:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2ce6:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2cea:	10 92 ad 01 	sts	0x01AD, r1
	cdc_line_rtsdtr = 0;
    2cee:	10 92 aa 01 	sts	0x01AA, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    2cf2:	8c e0       	ldi	r24, 0x0C	; 12
    2cf4:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2cf8:	78 94       	sei
    2cfa:	08 95       	ret

00002cfc <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2d00:	90 91 ad 01 	lds	r25, 0x01AD
    2d04:	99 23       	and	r25, r25
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <m_usb_tx_char+0xe>
    2d08:	4c c0       	rjmp	.+152    	; 0x2da2 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2d0a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2d0c:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2d0e:	24 e0       	ldi	r18, 0x04	; 4
    2d10:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2d14:	20 91 ab 01 	lds	r18, 0x01AB
    2d18:	22 23       	and	r18, r18
    2d1a:	49 f0       	breq	.+18     	; 0x2d2e <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    2d1c:	20 91 e8 00 	lds	r18, 0x00E8
    2d20:	25 fd       	sbrc	r18, 5
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <m_usb_tx_char+0x2e>
			SREG = intr_state;
    2d24:	9f bf       	out	0x3f, r25	; 63
			return -1;
    2d26:	8f ef       	ldi	r24, 0xFF	; 255
    2d28:	41 c0       	rjmp	.+130    	; 0x2dac <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    2d2a:	10 92 ab 01 	sts	0x01AB, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2d2e:	30 91 e4 00 	lds	r19, 0x00E4
    2d32:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2d34:	20 91 e8 00 	lds	r18, 0x00E8
    2d38:	25 fd       	sbrc	r18, 5
    2d3a:	24 c0       	rjmp	.+72     	; 0x2d84 <m_usb_tx_char+0x88>
		SREG = intr_state;
    2d3c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2d3e:	90 91 e4 00 	lds	r25, 0x00E4
    2d42:	93 17       	cp	r25, r19
    2d44:	81 f0       	breq	.+32     	; 0x2d66 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2d46:	90 91 ad 01 	lds	r25, 0x01AD
    2d4a:	99 23       	and	r25, r25
    2d4c:	61 f1       	breq	.+88     	; 0x2da6 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    2d4e:	a9 ee       	ldi	r26, 0xE9	; 233
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2d54:	e8 ee       	ldi	r30, 0xE8	; 232
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2d58:	c4 ee       	ldi	r28, 0xE4	; 228
    2d5a:	d0 e0       	ldi	r29, 0x00	; 0
    2d5c:	0d c0       	rjmp	.+26     	; 0x2d78 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2d5e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2d60:	98 81       	ld	r25, Y
    2d62:	93 13       	cpse	r25, r19
    2d64:	05 c0       	rjmp	.+10     	; 0x2d70 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	80 93 ab 01 	sts	0x01AB, r24
			return -1;
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	1e c0       	rjmp	.+60     	; 0x2dac <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2d70:	90 91 ad 01 	lds	r25, 0x01AD
    2d74:	99 23       	and	r25, r25
    2d76:	c9 f0       	breq	.+50     	; 0x2daa <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    2d78:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2d7a:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2d7c:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2d7e:	20 81       	ld	r18, Z
    2d80:	25 ff       	sbrs	r18, 5
    2d82:	ed cf       	rjmp	.-38     	; 0x2d5e <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2d84:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2d88:	80 91 e8 00 	lds	r24, 0x00E8
    2d8c:	85 fd       	sbrc	r24, 5
    2d8e:	03 c0       	rjmp	.+6      	; 0x2d96 <m_usb_tx_char+0x9a>
    2d90:	8a e3       	ldi	r24, 0x3A	; 58
    2d92:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2d96:	85 e0       	ldi	r24, 0x05	; 5
    2d98:	80 93 ac 01 	sts	0x01AC, r24
	SREG = intr_state;
    2d9c:	9f bf       	out	0x3f, r25	; 63
	return 0;
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	05 c0       	rjmp	.+10     	; 0x2dac <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2da2:	8f ef       	ldi	r24, 0xFF	; 255
    2da4:	03 c0       	rjmp	.+6      	; 0x2dac <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2da6:	8f ef       	ldi	r24, 0xFF	; 255
    2da8:	01 c0       	rjmp	.+2      	; 0x2dac <m_usb_tx_char+0xb0>
    2daa:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	08 95       	ret

00002db2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2db2:	1f 92       	push	r1
    2db4:	0f 92       	push	r0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	0f 92       	push	r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	8f 93       	push	r24
    2dbe:	9f 93       	push	r25
    2dc0:	ef 93       	push	r30
    2dc2:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2dc4:	e1 ee       	ldi	r30, 0xE1	; 225
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
        UDINT = 0;
    2dca:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2dcc:	83 ff       	sbrs	r24, 3
    2dce:	11 c0       	rjmp	.+34     	; 0x2df2 <__vector_10+0x40>
		UENUM = 0;
    2dd0:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2dda:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2dde:	92 e1       	ldi	r25, 0x12	; 18
    2de0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2de4:	98 e0       	ldi	r25, 0x08	; 8
    2de6:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2dea:	10 92 ad 01 	sts	0x01AD, r1
		cdc_line_rtsdtr = 0;
    2dee:	10 92 aa 01 	sts	0x01AA, r1
        }
	if (intbits & (1<<SOFI)) {
    2df2:	82 ff       	sbrs	r24, 2
    2df4:	13 c0       	rjmp	.+38     	; 0x2e1c <__vector_10+0x6a>
		if (usb_configuration) {
    2df6:	80 91 ad 01 	lds	r24, 0x01AD
    2dfa:	88 23       	and	r24, r24
    2dfc:	79 f0       	breq	.+30     	; 0x2e1c <__vector_10+0x6a>
			t = transmit_flush_timer;
    2dfe:	80 91 ac 01 	lds	r24, 0x01AC
			if (t) {
    2e02:	88 23       	and	r24, r24
    2e04:	59 f0       	breq	.+22     	; 0x2e1c <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2e06:	81 50       	subi	r24, 0x01	; 1
    2e08:	80 93 ac 01 	sts	0x01AC, r24
				if (!t) {
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	06 c0       	rjmp	.+12     	; 0x2e1c <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2e10:	84 e0       	ldi	r24, 0x04	; 4
    2e12:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2e16:	8a e3       	ldi	r24, 0x3A	; 58
    2e18:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2e1c:	ff 91       	pop	r31
    2e1e:	ef 91       	pop	r30
    2e20:	9f 91       	pop	r25
    2e22:	8f 91       	pop	r24
    2e24:	0f 90       	pop	r0
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	0f 90       	pop	r0
    2e2a:	1f 90       	pop	r1
    2e2c:	18 95       	reti

00002e2e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2e2e:	1f 92       	push	r1
    2e30:	0f 92       	push	r0
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	0f 92       	push	r0
    2e36:	11 24       	eor	r1, r1
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	2f 93       	push	r18
    2e3e:	3f 93       	push	r19
    2e40:	4f 93       	push	r20
    2e42:	5f 93       	push	r21
    2e44:	6f 93       	push	r22
    2e46:	7f 93       	push	r23
    2e48:	8f 93       	push	r24
    2e4a:	9f 93       	push	r25
    2e4c:	af 93       	push	r26
    2e4e:	bf 93       	push	r27
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	ef 93       	push	r30
    2e56:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2e58:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2e5c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2e60:	83 ff       	sbrs	r24, 3
    2e62:	4e c1       	rjmp	.+668    	; 0x3100 <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    2e64:	e1 ef       	ldi	r30, 0xF1	; 241
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    2e6a:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2e6c:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2e6e:	80 81       	ld	r24, Z
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    2e74:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    2e76:	50 81       	ld	r21, Z
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	75 2b       	or	r23, r21
                wLength = UEDATX;
    2e7e:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    2e80:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2e82:	82 ef       	ldi	r24, 0xF2	; 242
    2e84:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    2e88:	46 30       	cpi	r20, 0x06	; 6
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <__vector_11+0x60>
    2e8c:	58 c0       	rjmp	.+176    	; 0x2f3e <__vector_11+0x110>
    2e8e:	04 c0       	rjmp	.+8      	; 0x2e98 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2e90:	81 e2       	ldi	r24, 0x21	; 33
    2e92:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2e96:	3b c1       	rjmp	.+630    	; 0x310e <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2e98:	c6 e0       	ldi	r28, 0x06	; 6
    2e9a:	89 ec       	ldi	r24, 0xC9	; 201
    2e9c:	92 e0       	ldi	r25, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	45 91       	lpm	r20, Z+
    2ea2:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    2ea4:	24 17       	cp	r18, r20
    2ea6:	35 07       	cpc	r19, r21
    2ea8:	11 f0       	breq	.+4      	; 0x2eae <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    2eaa:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2eac:	23 c0       	rjmp	.+70     	; 0x2ef4 <__vector_11+0xc6>
				}
				list += 2;
    2eae:	fc 01       	movw	r30, r24
    2eb0:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2eb2:	45 91       	lpm	r20, Z+
    2eb4:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    2eb6:	64 17       	cp	r22, r20
    2eb8:	75 07       	cpc	r23, r21
    2eba:	11 f0       	breq	.+4      	; 0x2ec0 <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    2ebc:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2ebe:	1a c0       	rjmp	.+52     	; 0x2ef4 <__vector_11+0xc6>
				}
				list += 2;
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2ec4:	25 91       	lpm	r18, Z+
    2ec6:	34 91       	lpm	r19, Z
				list += 2;
    2ec8:	fc 01       	movw	r30, r24
    2eca:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2ecc:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2ece:	8b 2f       	mov	r24, r27
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2ed4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	19 f0       	breq	.+6      	; 0x2ee0 <__vector_11+0xb2>
    2eda:	10 f0       	brcs	.+4      	; 0x2ee0 <__vector_11+0xb2>
    2edc:	8f ef       	ldi	r24, 0xFF	; 255
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	85 17       	cp	r24, r21
    2ee2:	08 f4       	brcc	.+2      	; 0x2ee6 <__vector_11+0xb8>
    2ee4:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2ee6:	a8 ee       	ldi	r26, 0xE8	; 232
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2eea:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2eec:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2eee:	c1 ef       	ldi	r28, 0xF1	; 241
    2ef0:	d0 e0       	ldi	r29, 0x00	; 0
    2ef2:	03 c0       	rjmp	.+6      	; 0x2efa <__vector_11+0xcc>
    2ef4:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2ef6:	99 f6       	brne	.-90     	; 0x2e9e <__vector_11+0x70>
    2ef8:	cb cf       	rjmp	.-106    	; 0x2e90 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2efa:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2efc:	98 2f       	mov	r25, r24
    2efe:	95 70       	andi	r25, 0x05	; 5
    2f00:	e1 f3       	breq	.-8      	; 0x2efa <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    2f02:	82 fd       	sbrc	r24, 2
    2f04:	04 c1       	rjmp	.+520    	; 0x310e <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2f06:	45 2f       	mov	r20, r21
    2f08:	51 31       	cpi	r21, 0x11	; 17
    2f0a:	08 f0       	brcs	.+2      	; 0x2f0e <__vector_11+0xe0>
    2f0c:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    2f0e:	44 23       	and	r20, r20
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <__vector_11+0xe6>
    2f12:	fa c0       	rjmp	.+500    	; 0x3108 <__vector_11+0x2da>
    2f14:	f9 01       	movw	r30, r18
    2f16:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    2f18:	94 91       	lpm	r25, Z
    2f1a:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2f1c:	81 50       	subi	r24, 0x01	; 1
    2f1e:	31 96       	adiw	r30, 0x01	; 1
    2f20:	81 11       	cpse	r24, r1
    2f22:	fa cf       	rjmp	.-12     	; 0x2f18 <__vector_11+0xea>
    2f24:	8f ef       	ldi	r24, 0xFF	; 255
    2f26:	84 0f       	add	r24, r20
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	28 0f       	add	r18, r24
    2f2e:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2f30:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f32:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2f34:	51 11       	cpse	r21, r1
    2f36:	e1 cf       	rjmp	.-62     	; 0x2efa <__vector_11+0xcc>
    2f38:	40 31       	cpi	r20, 0x10	; 16
    2f3a:	f9 f2       	breq	.-66     	; 0x2efa <__vector_11+0xcc>
    2f3c:	e8 c0       	rjmp	.+464    	; 0x310e <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2f3e:	45 30       	cpi	r20, 0x05	; 5
    2f40:	61 f4       	brne	.+24     	; 0x2f5a <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f42:	8e ef       	ldi	r24, 0xFE	; 254
    2f44:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2f48:	e8 ee       	ldi	r30, 0xE8	; 232
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	80 ff       	sbrs	r24, 0
    2f50:	fd cf       	rjmp	.-6      	; 0x2f4c <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2f52:	20 68       	ori	r18, 0x80	; 128
    2f54:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2f58:	da c0       	rjmp	.+436    	; 0x310e <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2f5a:	49 30       	cpi	r20, 0x09	; 9
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <__vector_11+0x132>
    2f5e:	36 c0       	rjmp	.+108    	; 0x2fcc <__vector_11+0x19e>
    2f60:	c1 11       	cpse	r28, r1
    2f62:	5f c0       	rjmp	.+190    	; 0x3022 <__vector_11+0x1f4>
			usb_configuration = wValue;
    2f64:	20 93 ad 01 	sts	0x01AD, r18
			cdc_line_rtsdtr = 0;
    2f68:	10 92 aa 01 	sts	0x01AA, r1
			transmit_flush_timer = 0;
    2f6c:	10 92 ac 01 	sts	0x01AC, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f70:	8e ef       	ldi	r24, 0xFE	; 254
    2f72:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2f76:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2f78:	82 e7       	ldi	r24, 0x72	; 114
    2f7a:	93 e0       	ldi	r25, 0x03	; 3
			for (i=1; i<5; i++) {
				UENUM = i;
    2f7c:	c9 ee       	ldi	r28, 0xE9	; 233
    2f7e:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2f80:	ab ee       	ldi	r26, 0xEB	; 235
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2f84:	6c ee       	ldi	r22, 0xEC	; 236
    2f86:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2f88:	4d ee       	ldi	r20, 0xED	; 237
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2f8c:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2f8e:	9c 01       	movw	r18, r24
    2f90:	2f 5f       	subi	r18, 0xFF	; 255
    2f92:	3f 4f       	sbci	r19, 0xFF	; 255
    2f94:	fc 01       	movw	r30, r24
    2f96:	04 91       	lpm	r16, Z
				UECONX = en;
    2f98:	0c 93       	st	X, r16
				if (en) {
    2f9a:	00 23       	and	r16, r16
    2f9c:	61 f0       	breq	.+24     	; 0x2fb6 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    2f9e:	f9 01       	movw	r30, r18
    2fa0:	24 91       	lpm	r18, Z
    2fa2:	fb 01       	movw	r30, r22
    2fa4:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    2fa6:	9c 01       	movw	r18, r24
    2fa8:	2d 5f       	subi	r18, 0xFD	; 253
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
    2fac:	fc 01       	movw	r30, r24
    2fae:	32 96       	adiw	r30, 0x02	; 2
    2fb0:	84 91       	lpm	r24, Z
    2fb2:	fa 01       	movw	r30, r20
    2fb4:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2fb6:	1f 5f       	subi	r17, 0xFF	; 255
    2fb8:	15 30       	cpi	r17, 0x05	; 5
    2fba:	11 f0       	breq	.+4      	; 0x2fc0 <__vector_11+0x192>
    2fbc:	c9 01       	movw	r24, r18
    2fbe:	e6 cf       	rjmp	.-52     	; 0x2f8c <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2fc0:	ea ee       	ldi	r30, 0xEA	; 234
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	8e e1       	ldi	r24, 0x1E	; 30
    2fc6:	80 83       	st	Z, r24
        		UERST = 0;
    2fc8:	10 82       	st	Z, r1
			return;
    2fca:	a1 c0       	rjmp	.+322    	; 0x310e <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2fcc:	48 30       	cpi	r20, 0x08	; 8
    2fce:	81 f4       	brne	.+32     	; 0x2ff0 <__vector_11+0x1c2>
    2fd0:	c0 38       	cpi	r28, 0x80	; 128
    2fd2:	09 f0       	breq	.+2      	; 0x2fd6 <__vector_11+0x1a8>
    2fd4:	42 c0       	rjmp	.+132    	; 0x305a <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2fd6:	e8 ee       	ldi	r30, 0xE8	; 232
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	80 ff       	sbrs	r24, 0
    2fde:	fd cf       	rjmp	.-6      	; 0x2fda <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2fe0:	80 91 ad 01 	lds	r24, 0x01AD
    2fe4:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2fe8:	8e ef       	ldi	r24, 0xFE	; 254
    2fea:	80 93 e8 00 	sts	0x00E8, r24
    2fee:	8f c0       	rjmp	.+286    	; 0x310e <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2ff0:	41 32       	cpi	r20, 0x21	; 33
    2ff2:	b9 f4       	brne	.+46     	; 0x3022 <__vector_11+0x1f4>
    2ff4:	c1 3a       	cpi	r28, 0xA1	; 161
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <__vector_11+0x1cc>
    2ff8:	40 c0       	rjmp	.+128    	; 0x307a <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2ffa:	e8 ee       	ldi	r30, 0xE8	; 232
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	80 ff       	sbrs	r24, 0
    3002:	fd cf       	rjmp	.-6      	; 0x2ffe <__vector_11+0x1d0>
    3004:	e4 e3       	ldi	r30, 0x34	; 52
    3006:	f1 e0       	ldi	r31, 0x01	; 1
    3008:	8b e3       	ldi	r24, 0x3B	; 59
    300a:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    300c:	a1 ef       	ldi	r26, 0xF1	; 241
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	21 91       	ld	r18, Z+
    3012:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    3014:	e8 17       	cp	r30, r24
    3016:	f9 07       	cpc	r31, r25
    3018:	d9 f7       	brne	.-10     	; 0x3010 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    301a:	8e ef       	ldi	r24, 0xFE	; 254
    301c:	80 93 e8 00 	sts	0x00E8, r24
    3020:	76 c0       	rjmp	.+236    	; 0x310e <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    3022:	40 32       	cpi	r20, 0x20	; 32
    3024:	d1 f4       	brne	.+52     	; 0x305a <__vector_11+0x22c>
    3026:	c1 32       	cpi	r28, 0x21	; 33
    3028:	09 f0       	breq	.+2      	; 0x302c <__vector_11+0x1fe>
    302a:	43 c0       	rjmp	.+134    	; 0x30b2 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    302c:	e8 ee       	ldi	r30, 0xE8	; 232
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	82 ff       	sbrs	r24, 2
    3034:	fd cf       	rjmp	.-6      	; 0x3030 <__vector_11+0x202>
    3036:	e4 e3       	ldi	r30, 0x34	; 52
    3038:	f1 e0       	ldi	r31, 0x01	; 1
    303a:	8b e3       	ldi	r24, 0x3B	; 59
    303c:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    303e:	a1 ef       	ldi	r26, 0xF1	; 241
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	2c 91       	ld	r18, X
    3044:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    3046:	e8 17       	cp	r30, r24
    3048:	f9 07       	cpc	r31, r25
    304a:	d9 f7       	brne	.-10     	; 0x3042 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    304c:	e8 ee       	ldi	r30, 0xE8	; 232
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	8b ef       	ldi	r24, 0xFB	; 251
    3052:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3054:	8e ef       	ldi	r24, 0xFE	; 254
    3056:	80 83       	st	Z, r24
    3058:	5a c0       	rjmp	.+180    	; 0x310e <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    305a:	42 32       	cpi	r20, 0x22	; 34
    305c:	71 f4       	brne	.+28     	; 0x307a <__vector_11+0x24c>
    305e:	c1 32       	cpi	r28, 0x21	; 33
    3060:	09 f0       	breq	.+2      	; 0x3064 <__vector_11+0x236>
    3062:	4e c0       	rjmp	.+156    	; 0x3100 <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    3064:	20 93 aa 01 	sts	0x01AA, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3068:	e8 ee       	ldi	r30, 0xE8	; 232
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	80 ff       	sbrs	r24, 0
    3070:	fd cf       	rjmp	.-6      	; 0x306c <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3072:	8e ef       	ldi	r24, 0xFE	; 254
    3074:	80 93 e8 00 	sts	0x00E8, r24
    3078:	4a c0       	rjmp	.+148    	; 0x310e <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    307a:	41 11       	cpse	r20, r1
    307c:	1a c0       	rjmp	.+52     	; 0x30b2 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    307e:	e8 ee       	ldi	r30, 0xE8	; 232
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	80 ff       	sbrs	r24, 0
    3086:	fd cf       	rjmp	.-6      	; 0x3082 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    3088:	c2 38       	cpi	r28, 0x82	; 130
    308a:	51 f4       	brne	.+20     	; 0x30a0 <__vector_11+0x272>
				UENUM = wIndex;
    308c:	e9 ee       	ldi	r30, 0xE9	; 233
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    3092:	80 91 eb 00 	lds	r24, 0x00EB
    3096:	85 fb       	bst	r24, 5
    3098:	88 27       	eor	r24, r24
    309a:	80 f9       	bld	r24, 0
				UENUM = 0;
    309c:	10 82       	st	Z, r1
    309e:	01 c0       	rjmp	.+2      	; 0x30a2 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    30a0:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    30a2:	e1 ef       	ldi	r30, 0xF1	; 241
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 83       	st	Z, r24
			UEDATX = 0;
    30a8:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    30aa:	8e ef       	ldi	r24, 0xFE	; 254
    30ac:	80 93 e8 00 	sts	0x00E8, r24
    30b0:	2e c0       	rjmp	.+92     	; 0x310e <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    30b2:	84 2f       	mov	r24, r20
    30b4:	8d 7f       	andi	r24, 0xFD	; 253
    30b6:	81 30       	cpi	r24, 0x01	; 1
    30b8:	19 f5       	brne	.+70     	; 0x3100 <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    30ba:	c2 30       	cpi	r28, 0x02	; 2
    30bc:	09 f5       	brne	.+66     	; 0x3100 <__vector_11+0x2d2>
    30be:	23 2b       	or	r18, r19
    30c0:	f9 f4       	brne	.+62     	; 0x3100 <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    30c2:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    30c4:	8f ef       	ldi	r24, 0xFF	; 255
    30c6:	86 0f       	add	r24, r22
    30c8:	84 30       	cpi	r24, 0x04	; 4
    30ca:	d0 f4       	brcc	.+52     	; 0x3100 <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    30cc:	8e ef       	ldi	r24, 0xFE	; 254
    30ce:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    30d2:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    30d6:	43 30       	cpi	r20, 0x03	; 3
    30d8:	21 f4       	brne	.+8      	; 0x30e2 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    30da:	81 e2       	ldi	r24, 0x21	; 33
    30dc:	80 93 eb 00 	sts	0x00EB, r24
    30e0:	16 c0       	rjmp	.+44     	; 0x310e <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    30e2:	89 e1       	ldi	r24, 0x19	; 25
    30e4:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <__vector_11+0x2c4>
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	6a 95       	dec	r22
    30f4:	e2 f7       	brpl	.-8      	; 0x30ee <__vector_11+0x2c0>
    30f6:	ea ee       	ldi	r30, 0xEA	; 234
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 83       	st	Z, r24
					UERST = 0;
    30fc:	10 82       	st	Z, r1
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    3100:	81 e2       	ldi	r24, 0x21	; 33
    3102:	80 93 eb 00 	sts	0x00EB, r24
    3106:	03 c0       	rjmp	.+6      	; 0x310e <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3108:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    310a:	51 11       	cpse	r21, r1
    310c:	f6 ce       	rjmp	.-532    	; 0x2efa <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    310e:	ff 91       	pop	r31
    3110:	ef 91       	pop	r30
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	bf 91       	pop	r27
    3118:	af 91       	pop	r26
    311a:	9f 91       	pop	r25
    311c:	8f 91       	pop	r24
    311e:	7f 91       	pop	r23
    3120:	6f 91       	pop	r22
    3122:	5f 91       	pop	r21
    3124:	4f 91       	pop	r20
    3126:	3f 91       	pop	r19
    3128:	2f 91       	pop	r18
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	0f 90       	pop	r0
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	0f 90       	pop	r0
    3134:	1f 90       	pop	r1
    3136:	18 95       	reti

00003138 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    313e:	ec 01       	movw	r28, r24
    3140:	21 96       	adiw	r28, 0x01	; 1
    3142:	fc 01       	movw	r30, r24
    3144:	14 91       	lpm	r17, Z
		if (!c) break;
    3146:	11 23       	and	r17, r17
    3148:	69 f0       	breq	.+26     	; 0x3164 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    314a:	1a 30       	cpi	r17, 0x0A	; 10
    314c:	19 f4       	brne	.+6      	; 0x3154 <print_P+0x1c>
    314e:	8d e0       	ldi	r24, 0x0D	; 13
    3150:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <m_usb_tx_char>
		usb_tx_char(c);
    3154:	81 2f       	mov	r24, r17
    3156:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    315a:	fe 01       	movw	r30, r28
    315c:	14 91       	lpm	r17, Z
    315e:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    3160:	11 11       	cpse	r17, r1
    3162:	f3 cf       	rjmp	.-26     	; 0x314a <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	08 95       	ret

0000316c <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    316c:	ef 92       	push	r14
    316e:	ff 92       	push	r15
    3170:	0f 93       	push	r16
    3172:	1f 93       	push	r17
    3174:	cf 93       	push	r28
    3176:	df 93       	push	r29
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
    317c:	27 97       	sbiw	r28, 0x07	; 7
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    3188:	8e 01       	movw	r16, r28
    318a:	0f 5f       	subi	r16, 0xFF	; 255
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	27 e0       	ldi	r18, 0x07	; 7
    3190:	f8 01       	movw	r30, r16
    3192:	11 92       	st	Z+, r1
    3194:	2a 95       	dec	r18
    3196:	e9 f7       	brne	.-6      	; 0x3192 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3198:	4a e0       	ldi	r20, 0x0A	; 10
    319a:	b8 01       	movw	r22, r16
    319c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__itoa_ncheck>
    31a0:	7e 01       	movw	r14, r28
    31a2:	f8 e0       	ldi	r31, 0x08	; 8
    31a4:	ef 0e       	add	r14, r31
    31a6:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    31a8:	f8 01       	movw	r30, r16
    31aa:	81 91       	ld	r24, Z+
    31ac:	8f 01       	movw	r16, r30
    31ae:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    31b0:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    31b4:	0e 15       	cp	r16, r14
    31b6:	1f 05       	cpc	r17, r15
    31b8:	b9 f7       	brne	.-18     	; 0x31a8 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    31ba:	27 96       	adiw	r28, 0x07	; 7
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ff 90       	pop	r15
    31d0:	ef 90       	pop	r14
    31d2:	08 95       	ret

000031d4 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    31d8:	ec eb       	ldi	r30, 0xBC	; 188
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	88 23       	and	r24, r24
    31e0:	34 f0       	brlt	.+12     	; 0x31ee <twi_wait+0x1a>
    31e2:	2f 5f       	subi	r18, 0xFF	; 255
    31e4:	3f 4f       	sbci	r19, 0xFF	; 255
    31e6:	29 3e       	cpi	r18, 0xE9	; 233
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	38 07       	cpc	r19, r24
    31ec:	b9 f7       	brne	.-18     	; 0x31dc <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	28 3e       	cpi	r18, 0xE8	; 232
    31f2:	33 40       	sbci	r19, 0x03	; 3
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <twi_wait+0x24>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    31f8:	08 95       	ret

000031fa <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    31fa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    31fe:	84 e8       	ldi	r24, 0x84	; 132
    3200:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    3204:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <twi_wait>
    3208:	88 23       	and	r24, r24
    320a:	19 f0       	breq	.+6      	; 0x3212 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    320c:	80 91 b9 00 	lds	r24, 0x00B9
    3210:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    3212:	08 95       	ret

00003214 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    3214:	cf 93       	push	r28
    3216:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    3218:	94 ea       	ldi	r25, 0xA4	; 164
    321a:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    321e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <twi_wait>
    3222:	88 23       	and	r24, r24
    3224:	61 f0       	breq	.+24     	; 0x323e <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    3226:	8c 2f       	mov	r24, r28
    3228:	88 0f       	add	r24, r24
    322a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    322e:	80 32       	cpi	r24, 0x20	; 32
    3230:	29 f4       	brne	.+10     	; 0x323c <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    3232:	84 e9       	ldi	r24, 0x94	; 148
    3234:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	01 c0       	rjmp	.+2      	; 0x323e <start_write+0x2a>
	}	
	return 1;	// success
    323c:	81 e0       	ldi	r24, 0x01	; 1
}	
    323e:	cf 91       	pop	r28
    3240:	08 95       	ret

00003242 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    3242:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    3246:	88 e5       	ldi	r24, 0x58	; 88
    3248:	0e 94 0a 19 	call	0x3214	; 0x3214 <start_write>
    324c:	88 23       	and	r24, r24
    324e:	09 f4       	brne	.+2      	; 0x3252 <m_wii_open+0x10>
    3250:	cd c0       	rjmp	.+410    	; 0x33ec <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    3252:	80 e3       	ldi	r24, 0x30	; 48
    3254:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    3258:	88 23       	and	r24, r24
    325a:	09 f4       	brne	.+2      	; 0x325e <m_wii_open+0x1c>
    325c:	c9 c0       	rjmp	.+402    	; 0x33f0 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    3264:	88 23       	and	r24, r24
    3266:	09 f4       	brne	.+2      	; 0x326a <m_wii_open+0x28>
    3268:	c5 c0       	rjmp	.+394    	; 0x33f4 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    326a:	84 e9       	ldi	r24, 0x94	; 148
    326c:	80 93 bc 00 	sts	0x00BC, r24
    3270:	83 ec       	ldi	r24, 0xC3	; 195
    3272:	99 e0       	ldi	r25, 0x09	; 9
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <m_wii_open+0x32>
    3278:	00 c0       	rjmp	.+0      	; 0x327a <m_wii_open+0x38>
    327a:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    327c:	88 e5       	ldi	r24, 0x58	; 88
    327e:	0e 94 0a 19 	call	0x3214	; 0x3214 <start_write>
    3282:	88 23       	and	r24, r24
    3284:	09 f4       	brne	.+2      	; 0x3288 <m_wii_open+0x46>
    3286:	b8 c0       	rjmp	.+368    	; 0x33f8 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    328e:	88 23       	and	r24, r24
    3290:	09 f4       	brne	.+2      	; 0x3294 <m_wii_open+0x52>
    3292:	b4 c0       	rjmp	.+360    	; 0x33fc <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    329a:	88 23       	and	r24, r24
    329c:	09 f4       	brne	.+2      	; 0x32a0 <m_wii_open+0x5e>
    329e:	b0 c0       	rjmp	.+352    	; 0x3400 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    32a6:	88 23       	and	r24, r24
    32a8:	09 f4       	brne	.+2      	; 0x32ac <m_wii_open+0x6a>
    32aa:	ac c0       	rjmp	.+344    	; 0x3404 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    32b2:	88 23       	and	r24, r24
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <m_wii_open+0x76>
    32b6:	a8 c0       	rjmp	.+336    	; 0x3408 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    32be:	88 23       	and	r24, r24
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <m_wii_open+0x82>
    32c2:	a4 c0       	rjmp	.+328    	; 0x340c <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    32ca:	88 23       	and	r24, r24
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <m_wii_open+0x8e>
    32ce:	a0 c0       	rjmp	.+320    	; 0x3410 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    32d6:	88 23       	and	r24, r24
    32d8:	09 f4       	brne	.+2      	; 0x32dc <m_wii_open+0x9a>
    32da:	9c c0       	rjmp	.+312    	; 0x3414 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    32dc:	80 e9       	ldi	r24, 0x90	; 144
    32de:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    32e2:	88 23       	and	r24, r24
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <m_wii_open+0xa6>
    32e6:	98 c0       	rjmp	.+304    	; 0x3418 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    32e8:	84 e9       	ldi	r24, 0x94	; 148
    32ea:	80 93 bc 00 	sts	0x00BC, r24
    32ee:	83 ec       	ldi	r24, 0xC3	; 195
    32f0:	99 e0       	ldi	r25, 0x09	; 9
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <m_wii_open+0xb0>
    32f6:	00 c0       	rjmp	.+0      	; 0x32f8 <m_wii_open+0xb6>
    32f8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    32fa:	88 e5       	ldi	r24, 0x58	; 88
    32fc:	0e 94 0a 19 	call	0x3214	; 0x3214 <start_write>
    3300:	88 23       	and	r24, r24
    3302:	09 f4       	brne	.+2      	; 0x3306 <m_wii_open+0xc4>
    3304:	8b c0       	rjmp	.+278    	; 0x341c <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    3306:	87 e0       	ldi	r24, 0x07	; 7
    3308:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    330c:	88 23       	and	r24, r24
    330e:	09 f4       	brne	.+2      	; 0x3312 <m_wii_open+0xd0>
    3310:	87 c0       	rjmp	.+270    	; 0x3420 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    3318:	88 23       	and	r24, r24
    331a:	09 f4       	brne	.+2      	; 0x331e <m_wii_open+0xdc>
    331c:	83 c0       	rjmp	.+262    	; 0x3424 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    331e:	81 e4       	ldi	r24, 0x41	; 65
    3320:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    3324:	88 23       	and	r24, r24
    3326:	09 f4       	brne	.+2      	; 0x332a <m_wii_open+0xe8>
    3328:	7f c0       	rjmp	.+254    	; 0x3428 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    332a:	84 e9       	ldi	r24, 0x94	; 148
    332c:	80 93 bc 00 	sts	0x00BC, r24
    3330:	83 ec       	ldi	r24, 0xC3	; 195
    3332:	99 e0       	ldi	r25, 0x09	; 9
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <m_wii_open+0xf2>
    3338:	00 c0       	rjmp	.+0      	; 0x333a <m_wii_open+0xf8>
    333a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    333c:	88 e5       	ldi	r24, 0x58	; 88
    333e:	0e 94 0a 19 	call	0x3214	; 0x3214 <start_write>
    3342:	88 23       	and	r24, r24
    3344:	09 f4       	brne	.+2      	; 0x3348 <m_wii_open+0x106>
    3346:	72 c0       	rjmp	.+228    	; 0x342c <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    3348:	8a e1       	ldi	r24, 0x1A	; 26
    334a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    334e:	88 23       	and	r24, r24
    3350:	09 f4       	brne	.+2      	; 0x3354 <m_wii_open+0x112>
    3352:	6e c0       	rjmp	.+220    	; 0x3430 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    3354:	80 e4       	ldi	r24, 0x40	; 64
    3356:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    335a:	88 23       	and	r24, r24
    335c:	09 f4       	brne	.+2      	; 0x3360 <m_wii_open+0x11e>
    335e:	6a c0       	rjmp	.+212    	; 0x3434 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    3366:	88 23       	and	r24, r24
    3368:	09 f4       	brne	.+2      	; 0x336c <m_wii_open+0x12a>
    336a:	66 c0       	rjmp	.+204    	; 0x3438 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    336c:	84 e9       	ldi	r24, 0x94	; 148
    336e:	80 93 bc 00 	sts	0x00BC, r24
    3372:	83 ec       	ldi	r24, 0xC3	; 195
    3374:	99 e0       	ldi	r25, 0x09	; 9
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <m_wii_open+0x134>
    337a:	00 c0       	rjmp	.+0      	; 0x337c <m_wii_open+0x13a>
    337c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    337e:	88 e5       	ldi	r24, 0x58	; 88
    3380:	0e 94 0a 19 	call	0x3214	; 0x3214 <start_write>
    3384:	88 23       	and	r24, r24
    3386:	09 f4       	brne	.+2      	; 0x338a <m_wii_open+0x148>
    3388:	59 c0       	rjmp	.+178    	; 0x343c <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    338a:	83 e3       	ldi	r24, 0x33	; 51
    338c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    3390:	88 23       	and	r24, r24
    3392:	09 f4       	brne	.+2      	; 0x3396 <m_wii_open+0x154>
    3394:	55 c0       	rjmp	.+170    	; 0x3440 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    339c:	88 23       	and	r24, r24
    339e:	09 f4       	brne	.+2      	; 0x33a2 <m_wii_open+0x160>
    33a0:	51 c0       	rjmp	.+162    	; 0x3444 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    33a2:	84 e9       	ldi	r24, 0x94	; 148
    33a4:	80 93 bc 00 	sts	0x00BC, r24
    33a8:	83 ec       	ldi	r24, 0xC3	; 195
    33aa:	99 e0       	ldi	r25, 0x09	; 9
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <m_wii_open+0x16a>
    33b0:	00 c0       	rjmp	.+0      	; 0x33b2 <m_wii_open+0x170>
    33b2:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    33b4:	88 e5       	ldi	r24, 0x58	; 88
    33b6:	0e 94 0a 19 	call	0x3214	; 0x3214 <start_write>
    33ba:	88 23       	and	r24, r24
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <m_wii_open+0x17e>
    33be:	44 c0       	rjmp	.+136    	; 0x3448 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    33c0:	80 e3       	ldi	r24, 0x30	; 48
    33c2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    33c6:	88 23       	and	r24, r24
    33c8:	09 f4       	brne	.+2      	; 0x33cc <m_wii_open+0x18a>
    33ca:	40 c0       	rjmp	.+128    	; 0x344c <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    33cc:	88 e0       	ldi	r24, 0x08	; 8
    33ce:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    33d2:	88 23       	and	r24, r24
    33d4:	e9 f1       	breq	.+122    	; 0x3450 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    33d6:	84 e9       	ldi	r24, 0x94	; 148
    33d8:	80 93 bc 00 	sts	0x00BC, r24
    33dc:	83 ec       	ldi	r24, 0xC3	; 195
    33de:	99 e0       	ldi	r25, 0x09	; 9
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <m_wii_open+0x19e>
    33e4:	00 c0       	rjmp	.+0      	; 0x33e6 <m_wii_open+0x1a4>
    33e6:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    3450:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    3452:	08 95       	ret

00003454 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    3454:	cf 93       	push	r28
    3456:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    3458:	94 ea       	ldi	r25, 0xA4	; 164
    345a:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    345e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <twi_wait>
    3462:	88 23       	and	r24, r24
    3464:	69 f0       	breq	.+26     	; 0x3480 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    3466:	8c 2f       	mov	r24, r28
    3468:	88 0f       	add	r24, r24
    346a:	8f 5f       	subi	r24, 0xFF	; 255
    346c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    3470:	88 34       	cpi	r24, 0x48	; 72
    3472:	29 f4       	brne	.+10     	; 0x347e <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    3474:	84 e9       	ldi	r24, 0x94	; 148
    3476:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	01 c0       	rjmp	.+2      	; 0x3480 <start_read+0x2c>
	}	
	return 1;	// success
    347e:	81 e0       	ldi	r24, 0x01	; 1
}	
    3480:	cf 91       	pop	r28
    3482:	08 95       	ret

00003484 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    3484:	ef 92       	push	r14
    3486:	ff 92       	push	r15
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	60 97       	sbiw	r28, 0x10	; 16
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	08 2f       	mov	r16, r24
    34a2:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    34a4:	fe 01       	movw	r30, r28
    34a6:	31 96       	adiw	r30, 0x01	; 1
    34a8:	80 e1       	ldi	r24, 0x10	; 16
    34aa:	df 01       	movw	r26, r30
    34ac:	1d 92       	st	X+, r1
    34ae:	8a 95       	dec	r24
    34b0:	e9 f7       	brne	.-6      	; 0x34ac <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    34b2:	88 e5       	ldi	r24, 0x58	; 88
    34b4:	0e 94 0a 19 	call	0x3214	; 0x3214 <start_write>
    34b8:	88 23       	and	r24, r24
    34ba:	09 f4       	brne	.+2      	; 0x34be <m_wii_read+0x3a>
    34bc:	6e c0       	rjmp	.+220    	; 0x359a <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    34be:	86 e3       	ldi	r24, 0x36	; 54
    34c0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <send_byte>
    34c4:	88 23       	and	r24, r24
    34c6:	09 f4       	brne	.+2      	; 0x34ca <m_wii_read+0x46>
    34c8:	6a c0       	rjmp	.+212    	; 0x359e <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    34ca:	84 e9       	ldi	r24, 0x94	; 148
    34cc:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34d0:	b8 e0       	ldi	r27, 0x08	; 8
    34d2:	ba 95       	dec	r27
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <m_wii_read+0x4e>
    34d6:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    34d8:	88 e5       	ldi	r24, 0x58	; 88
    34da:	0e 94 2a 1a 	call	0x3454	; 0x3454 <start_read>
    34de:	88 23       	and	r24, r24
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <m_wii_read+0x60>
    34e2:	5f c0       	rjmp	.+190    	; 0x35a2 <m_wii_read+0x11e>
    34e4:	be 01       	movw	r22, r28
    34e6:	6f 5f       	subi	r22, 0xFF	; 255
    34e8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ea:	9e 01       	movw	r18, r28
    34ec:	20 5f       	subi	r18, 0xF0	; 240
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    34f0:	ec eb       	ldi	r30, 0xBC	; 188
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    34f6:	4b eb       	ldi	r20, 0xBB	; 187
    34f8:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    34fa:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    34fc:	80 81       	ld	r24, Z
    34fe:	88 23       	and	r24, r24
    3500:	ec f7       	brge	.-6      	; 0x34fc <m_wii_read+0x78>
		temp[i] = TWDR;
    3502:	da 01       	movw	r26, r20
    3504:	8c 91       	ld	r24, X
    3506:	db 01       	movw	r26, r22
    3508:	8d 93       	st	X+, r24
    350a:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    350c:	a2 17       	cp	r26, r18
    350e:	b3 07       	cpc	r27, r19
    3510:	a1 f7       	brne	.-24     	; 0x34fa <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    3512:	84 e8       	ldi	r24, 0x84	; 132
    3514:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    3518:	ec eb       	ldi	r30, 0xBC	; 188
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	88 23       	and	r24, r24
    3520:	ec f7       	brge	.-6      	; 0x351c <m_wii_read+0x98>
	temp[15] = TWDR;
    3522:	80 91 bb 00 	lds	r24, 0x00BB
    3526:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3528:	84 e9       	ldi	r24, 0x94	; 148
    352a:	80 93 bc 00 	sts	0x00BC, r24
    352e:	fe 01       	movw	r30, r28
    3530:	34 96       	adiw	r30, 0x04	; 4
    3532:	e0 2e       	mov	r14, r16
    3534:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    3536:	80 81       	ld	r24, Z
    3538:	98 2f       	mov	r25, r24
    353a:	90 73       	andi	r25, 0x30	; 48
    353c:	af 01       	movw	r20, r30
    353e:	42 50       	subi	r20, 0x02	; 2
    3540:	51 09       	sbc	r21, r1
    3542:	da 01       	movw	r26, r20
    3544:	4c 91       	ld	r20, X
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	b0 e1       	ldi	r27, 0x10	; 16
    354a:	9b 9f       	mul	r25, r27
    354c:	40 0d       	add	r20, r0
    354e:	51 1d       	adc	r21, r1
    3550:	11 24       	eor	r1, r1
    3552:	d7 01       	movw	r26, r14
    3554:	4d 93       	st	X+, r20
    3556:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    3558:	48 2f       	mov	r20, r24
    355a:	40 7c       	andi	r20, 0xC0	; 192
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	44 0f       	add	r20, r20
    3560:	55 1f       	adc	r21, r21
    3562:	44 0f       	add	r20, r20
    3564:	55 1f       	adc	r21, r21
    3566:	bf 01       	movw	r22, r30
    3568:	61 50       	subi	r22, 0x01	; 1
    356a:	71 09       	sbc	r23, r1
    356c:	db 01       	movw	r26, r22
    356e:	9c 91       	ld	r25, X
    3570:	49 0f       	add	r20, r25
    3572:	51 1d       	adc	r21, r1
    3574:	d7 01       	movw	r26, r14
    3576:	13 96       	adiw	r26, 0x03	; 3
    3578:	5c 93       	st	X, r21
    357a:	4e 93       	st	-X, r20
    357c:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    357e:	8f 70       	andi	r24, 0x0F	; 15
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	15 96       	adiw	r26, 0x05	; 5
    3584:	9c 93       	st	X, r25
    3586:	8e 93       	st	-X, r24
    3588:	14 97       	sbiw	r26, 0x04	; 4
    358a:	33 96       	adiw	r30, 0x03	; 3
    358c:	b6 e0       	ldi	r27, 0x06	; 6
    358e:	eb 0e       	add	r14, r27
    3590:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    3592:	2e 17       	cp	r18, r30
    3594:	3f 07       	cpc	r19, r31
    3596:	79 f6       	brne	.-98     	; 0x3536 <m_wii_read+0xb2>
    3598:	06 c0       	rjmp	.+12     	; 0x35a6 <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	05 c0       	rjmp	.+10     	; 0x35a8 <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	03 c0       	rjmp	.+6      	; 0x35a8 <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	01 c0       	rjmp	.+2      	; 0x35a8 <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
}
    35a8:	60 96       	adiw	r28, 0x10	; 16
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	08 95       	ret

000035c2 <acos>:
    35c2:	9f 93       	push	r25
    35c4:	9f 77       	andi	r25, 0x7F	; 127
    35c6:	4a d1       	rcall	.+660    	; 0x385c <__fp_arccos>
    35c8:	0f 90       	pop	r0
    35ca:	00 20       	and	r0, r0
    35cc:	3a f4       	brpl	.+14     	; 0x35dc <acos+0x1a>
    35ce:	90 58       	subi	r25, 0x80	; 128
    35d0:	a2 ea       	ldi	r26, 0xA2	; 162
    35d2:	2a ed       	ldi	r18, 0xDA	; 218
    35d4:	3f e0       	ldi	r19, 0x0F	; 15
    35d6:	49 e4       	ldi	r20, 0x49	; 73
    35d8:	50 e4       	ldi	r21, 0x40	; 64
    35da:	13 d0       	rcall	.+38     	; 0x3602 <__addsf3x>
    35dc:	ba c1       	rjmp	.+884    	; 0x3952 <__fp_round>

000035de <__subsf3>:
    35de:	50 58       	subi	r21, 0x80	; 128

000035e0 <__addsf3>:
    35e0:	bb 27       	eor	r27, r27
    35e2:	aa 27       	eor	r26, r26
    35e4:	0e d0       	rcall	.+28     	; 0x3602 <__addsf3x>
    35e6:	b5 c1       	rjmp	.+874    	; 0x3952 <__fp_round>
    35e8:	a6 d1       	rcall	.+844    	; 0x3936 <__fp_pscA>
    35ea:	30 f0       	brcs	.+12     	; 0x35f8 <__addsf3+0x18>
    35ec:	ab d1       	rcall	.+854    	; 0x3944 <__fp_pscB>
    35ee:	20 f0       	brcs	.+8      	; 0x35f8 <__addsf3+0x18>
    35f0:	31 f4       	brne	.+12     	; 0x35fe <__addsf3+0x1e>
    35f2:	9f 3f       	cpi	r25, 0xFF	; 255
    35f4:	11 f4       	brne	.+4      	; 0x35fa <__addsf3+0x1a>
    35f6:	1e f4       	brtc	.+6      	; 0x35fe <__addsf3+0x1e>
    35f8:	76 c1       	rjmp	.+748    	; 0x38e6 <__fp_nan>
    35fa:	0e f4       	brtc	.+2      	; 0x35fe <__addsf3+0x1e>
    35fc:	e0 95       	com	r30
    35fe:	e7 fb       	bst	r30, 7
    3600:	6c c1       	rjmp	.+728    	; 0x38da <__fp_inf>

00003602 <__addsf3x>:
    3602:	e9 2f       	mov	r30, r25
    3604:	b7 d1       	rcall	.+878    	; 0x3974 <__fp_split3>
    3606:	80 f3       	brcs	.-32     	; 0x35e8 <__addsf3+0x8>
    3608:	ba 17       	cp	r27, r26
    360a:	62 07       	cpc	r22, r18
    360c:	73 07       	cpc	r23, r19
    360e:	84 07       	cpc	r24, r20
    3610:	95 07       	cpc	r25, r21
    3612:	18 f0       	brcs	.+6      	; 0x361a <__addsf3x+0x18>
    3614:	71 f4       	brne	.+28     	; 0x3632 <__addsf3x+0x30>
    3616:	9e f5       	brtc	.+102    	; 0x367e <__addsf3x+0x7c>
    3618:	cf c1       	rjmp	.+926    	; 0x39b8 <__fp_zero>
    361a:	0e f4       	brtc	.+2      	; 0x361e <__addsf3x+0x1c>
    361c:	e0 95       	com	r30
    361e:	0b 2e       	mov	r0, r27
    3620:	ba 2f       	mov	r27, r26
    3622:	a0 2d       	mov	r26, r0
    3624:	0b 01       	movw	r0, r22
    3626:	b9 01       	movw	r22, r18
    3628:	90 01       	movw	r18, r0
    362a:	0c 01       	movw	r0, r24
    362c:	ca 01       	movw	r24, r20
    362e:	a0 01       	movw	r20, r0
    3630:	11 24       	eor	r1, r1
    3632:	ff 27       	eor	r31, r31
    3634:	59 1b       	sub	r21, r25
    3636:	99 f0       	breq	.+38     	; 0x365e <__addsf3x+0x5c>
    3638:	59 3f       	cpi	r21, 0xF9	; 249
    363a:	50 f4       	brcc	.+20     	; 0x3650 <__addsf3x+0x4e>
    363c:	50 3e       	cpi	r21, 0xE0	; 224
    363e:	68 f1       	brcs	.+90     	; 0x369a <__addsf3x+0x98>
    3640:	1a 16       	cp	r1, r26
    3642:	f0 40       	sbci	r31, 0x00	; 0
    3644:	a2 2f       	mov	r26, r18
    3646:	23 2f       	mov	r18, r19
    3648:	34 2f       	mov	r19, r20
    364a:	44 27       	eor	r20, r20
    364c:	58 5f       	subi	r21, 0xF8	; 248
    364e:	f3 cf       	rjmp	.-26     	; 0x3636 <__addsf3x+0x34>
    3650:	46 95       	lsr	r20
    3652:	37 95       	ror	r19
    3654:	27 95       	ror	r18
    3656:	a7 95       	ror	r26
    3658:	f0 40       	sbci	r31, 0x00	; 0
    365a:	53 95       	inc	r21
    365c:	c9 f7       	brne	.-14     	; 0x3650 <__addsf3x+0x4e>
    365e:	7e f4       	brtc	.+30     	; 0x367e <__addsf3x+0x7c>
    3660:	1f 16       	cp	r1, r31
    3662:	ba 0b       	sbc	r27, r26
    3664:	62 0b       	sbc	r22, r18
    3666:	73 0b       	sbc	r23, r19
    3668:	84 0b       	sbc	r24, r20
    366a:	ba f0       	brmi	.+46     	; 0x369a <__addsf3x+0x98>
    366c:	91 50       	subi	r25, 0x01	; 1
    366e:	a1 f0       	breq	.+40     	; 0x3698 <__addsf3x+0x96>
    3670:	ff 0f       	add	r31, r31
    3672:	bb 1f       	adc	r27, r27
    3674:	66 1f       	adc	r22, r22
    3676:	77 1f       	adc	r23, r23
    3678:	88 1f       	adc	r24, r24
    367a:	c2 f7       	brpl	.-16     	; 0x366c <__addsf3x+0x6a>
    367c:	0e c0       	rjmp	.+28     	; 0x369a <__addsf3x+0x98>
    367e:	ba 0f       	add	r27, r26
    3680:	62 1f       	adc	r22, r18
    3682:	73 1f       	adc	r23, r19
    3684:	84 1f       	adc	r24, r20
    3686:	48 f4       	brcc	.+18     	; 0x369a <__addsf3x+0x98>
    3688:	87 95       	ror	r24
    368a:	77 95       	ror	r23
    368c:	67 95       	ror	r22
    368e:	b7 95       	ror	r27
    3690:	f7 95       	ror	r31
    3692:	9e 3f       	cpi	r25, 0xFE	; 254
    3694:	08 f0       	brcs	.+2      	; 0x3698 <__addsf3x+0x96>
    3696:	b3 cf       	rjmp	.-154    	; 0x35fe <__addsf3+0x1e>
    3698:	93 95       	inc	r25
    369a:	88 0f       	add	r24, r24
    369c:	08 f0       	brcs	.+2      	; 0x36a0 <__addsf3x+0x9e>
    369e:	99 27       	eor	r25, r25
    36a0:	ee 0f       	add	r30, r30
    36a2:	97 95       	ror	r25
    36a4:	87 95       	ror	r24
    36a6:	08 95       	ret

000036a8 <__cmpsf2>:
    36a8:	f4 d0       	rcall	.+488    	; 0x3892 <__fp_cmp>
    36aa:	08 f4       	brcc	.+2      	; 0x36ae <__cmpsf2+0x6>
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	08 95       	ret

000036b0 <__divsf3>:
    36b0:	0c d0       	rcall	.+24     	; 0x36ca <__divsf3x>
    36b2:	4f c1       	rjmp	.+670    	; 0x3952 <__fp_round>
    36b4:	47 d1       	rcall	.+654    	; 0x3944 <__fp_pscB>
    36b6:	40 f0       	brcs	.+16     	; 0x36c8 <__divsf3+0x18>
    36b8:	3e d1       	rcall	.+636    	; 0x3936 <__fp_pscA>
    36ba:	30 f0       	brcs	.+12     	; 0x36c8 <__divsf3+0x18>
    36bc:	21 f4       	brne	.+8      	; 0x36c6 <__divsf3+0x16>
    36be:	5f 3f       	cpi	r21, 0xFF	; 255
    36c0:	19 f0       	breq	.+6      	; 0x36c8 <__divsf3+0x18>
    36c2:	0b c1       	rjmp	.+534    	; 0x38da <__fp_inf>
    36c4:	51 11       	cpse	r21, r1
    36c6:	79 c1       	rjmp	.+754    	; 0x39ba <__fp_szero>
    36c8:	0e c1       	rjmp	.+540    	; 0x38e6 <__fp_nan>

000036ca <__divsf3x>:
    36ca:	54 d1       	rcall	.+680    	; 0x3974 <__fp_split3>
    36cc:	98 f3       	brcs	.-26     	; 0x36b4 <__divsf3+0x4>

000036ce <__divsf3_pse>:
    36ce:	99 23       	and	r25, r25
    36d0:	c9 f3       	breq	.-14     	; 0x36c4 <__divsf3+0x14>
    36d2:	55 23       	and	r21, r21
    36d4:	b1 f3       	breq	.-20     	; 0x36c2 <__divsf3+0x12>
    36d6:	95 1b       	sub	r25, r21
    36d8:	55 0b       	sbc	r21, r21
    36da:	bb 27       	eor	r27, r27
    36dc:	aa 27       	eor	r26, r26
    36de:	62 17       	cp	r22, r18
    36e0:	73 07       	cpc	r23, r19
    36e2:	84 07       	cpc	r24, r20
    36e4:	38 f0       	brcs	.+14     	; 0x36f4 <__divsf3_pse+0x26>
    36e6:	9f 5f       	subi	r25, 0xFF	; 255
    36e8:	5f 4f       	sbci	r21, 0xFF	; 255
    36ea:	22 0f       	add	r18, r18
    36ec:	33 1f       	adc	r19, r19
    36ee:	44 1f       	adc	r20, r20
    36f0:	aa 1f       	adc	r26, r26
    36f2:	a9 f3       	breq	.-22     	; 0x36de <__divsf3_pse+0x10>
    36f4:	33 d0       	rcall	.+102    	; 0x375c <__divsf3_pse+0x8e>
    36f6:	0e 2e       	mov	r0, r30
    36f8:	3a f0       	brmi	.+14     	; 0x3708 <__divsf3_pse+0x3a>
    36fa:	e0 e8       	ldi	r30, 0x80	; 128
    36fc:	30 d0       	rcall	.+96     	; 0x375e <__divsf3_pse+0x90>
    36fe:	91 50       	subi	r25, 0x01	; 1
    3700:	50 40       	sbci	r21, 0x00	; 0
    3702:	e6 95       	lsr	r30
    3704:	00 1c       	adc	r0, r0
    3706:	ca f7       	brpl	.-14     	; 0x36fa <__divsf3_pse+0x2c>
    3708:	29 d0       	rcall	.+82     	; 0x375c <__divsf3_pse+0x8e>
    370a:	fe 2f       	mov	r31, r30
    370c:	27 d0       	rcall	.+78     	; 0x375c <__divsf3_pse+0x8e>
    370e:	66 0f       	add	r22, r22
    3710:	77 1f       	adc	r23, r23
    3712:	88 1f       	adc	r24, r24
    3714:	bb 1f       	adc	r27, r27
    3716:	26 17       	cp	r18, r22
    3718:	37 07       	cpc	r19, r23
    371a:	48 07       	cpc	r20, r24
    371c:	ab 07       	cpc	r26, r27
    371e:	b0 e8       	ldi	r27, 0x80	; 128
    3720:	09 f0       	breq	.+2      	; 0x3724 <__divsf3_pse+0x56>
    3722:	bb 0b       	sbc	r27, r27
    3724:	80 2d       	mov	r24, r0
    3726:	bf 01       	movw	r22, r30
    3728:	ff 27       	eor	r31, r31
    372a:	93 58       	subi	r25, 0x83	; 131
    372c:	5f 4f       	sbci	r21, 0xFF	; 255
    372e:	2a f0       	brmi	.+10     	; 0x373a <__divsf3_pse+0x6c>
    3730:	9e 3f       	cpi	r25, 0xFE	; 254
    3732:	51 05       	cpc	r21, r1
    3734:	68 f0       	brcs	.+26     	; 0x3750 <__divsf3_pse+0x82>
    3736:	d1 c0       	rjmp	.+418    	; 0x38da <__fp_inf>
    3738:	40 c1       	rjmp	.+640    	; 0x39ba <__fp_szero>
    373a:	5f 3f       	cpi	r21, 0xFF	; 255
    373c:	ec f3       	brlt	.-6      	; 0x3738 <__divsf3_pse+0x6a>
    373e:	98 3e       	cpi	r25, 0xE8	; 232
    3740:	dc f3       	brlt	.-10     	; 0x3738 <__divsf3_pse+0x6a>
    3742:	86 95       	lsr	r24
    3744:	77 95       	ror	r23
    3746:	67 95       	ror	r22
    3748:	b7 95       	ror	r27
    374a:	f7 95       	ror	r31
    374c:	9f 5f       	subi	r25, 0xFF	; 255
    374e:	c9 f7       	brne	.-14     	; 0x3742 <__divsf3_pse+0x74>
    3750:	88 0f       	add	r24, r24
    3752:	91 1d       	adc	r25, r1
    3754:	96 95       	lsr	r25
    3756:	87 95       	ror	r24
    3758:	97 f9       	bld	r25, 7
    375a:	08 95       	ret
    375c:	e1 e0       	ldi	r30, 0x01	; 1
    375e:	66 0f       	add	r22, r22
    3760:	77 1f       	adc	r23, r23
    3762:	88 1f       	adc	r24, r24
    3764:	bb 1f       	adc	r27, r27
    3766:	62 17       	cp	r22, r18
    3768:	73 07       	cpc	r23, r19
    376a:	84 07       	cpc	r24, r20
    376c:	ba 07       	cpc	r27, r26
    376e:	20 f0       	brcs	.+8      	; 0x3778 <__divsf3_pse+0xaa>
    3770:	62 1b       	sub	r22, r18
    3772:	73 0b       	sbc	r23, r19
    3774:	84 0b       	sbc	r24, r20
    3776:	ba 0b       	sbc	r27, r26
    3778:	ee 1f       	adc	r30, r30
    377a:	88 f7       	brcc	.-30     	; 0x375e <__divsf3_pse+0x90>
    377c:	e0 95       	com	r30
    377e:	08 95       	ret

00003780 <__fixsfsi>:
    3780:	04 d0       	rcall	.+8      	; 0x378a <__fixunssfsi>
    3782:	68 94       	set
    3784:	b1 11       	cpse	r27, r1
    3786:	19 c1       	rjmp	.+562    	; 0x39ba <__fp_szero>
    3788:	08 95       	ret

0000378a <__fixunssfsi>:
    378a:	fc d0       	rcall	.+504    	; 0x3984 <__fp_splitA>
    378c:	88 f0       	brcs	.+34     	; 0x37b0 <__fixunssfsi+0x26>
    378e:	9f 57       	subi	r25, 0x7F	; 127
    3790:	90 f0       	brcs	.+36     	; 0x37b6 <__fixunssfsi+0x2c>
    3792:	b9 2f       	mov	r27, r25
    3794:	99 27       	eor	r25, r25
    3796:	b7 51       	subi	r27, 0x17	; 23
    3798:	a0 f0       	brcs	.+40     	; 0x37c2 <__fixunssfsi+0x38>
    379a:	d1 f0       	breq	.+52     	; 0x37d0 <__fixunssfsi+0x46>
    379c:	66 0f       	add	r22, r22
    379e:	77 1f       	adc	r23, r23
    37a0:	88 1f       	adc	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	1a f0       	brmi	.+6      	; 0x37ac <__fixunssfsi+0x22>
    37a6:	ba 95       	dec	r27
    37a8:	c9 f7       	brne	.-14     	; 0x379c <__fixunssfsi+0x12>
    37aa:	12 c0       	rjmp	.+36     	; 0x37d0 <__fixunssfsi+0x46>
    37ac:	b1 30       	cpi	r27, 0x01	; 1
    37ae:	81 f0       	breq	.+32     	; 0x37d0 <__fixunssfsi+0x46>
    37b0:	03 d1       	rcall	.+518    	; 0x39b8 <__fp_zero>
    37b2:	b1 e0       	ldi	r27, 0x01	; 1
    37b4:	08 95       	ret
    37b6:	00 c1       	rjmp	.+512    	; 0x39b8 <__fp_zero>
    37b8:	67 2f       	mov	r22, r23
    37ba:	78 2f       	mov	r23, r24
    37bc:	88 27       	eor	r24, r24
    37be:	b8 5f       	subi	r27, 0xF8	; 248
    37c0:	39 f0       	breq	.+14     	; 0x37d0 <__fixunssfsi+0x46>
    37c2:	b9 3f       	cpi	r27, 0xF9	; 249
    37c4:	cc f3       	brlt	.-14     	; 0x37b8 <__fixunssfsi+0x2e>
    37c6:	86 95       	lsr	r24
    37c8:	77 95       	ror	r23
    37ca:	67 95       	ror	r22
    37cc:	b3 95       	inc	r27
    37ce:	d9 f7       	brne	.-10     	; 0x37c6 <__fixunssfsi+0x3c>
    37d0:	3e f4       	brtc	.+14     	; 0x37e0 <__fixunssfsi+0x56>
    37d2:	90 95       	com	r25
    37d4:	80 95       	com	r24
    37d6:	70 95       	com	r23
    37d8:	61 95       	neg	r22
    37da:	7f 4f       	sbci	r23, 0xFF	; 255
    37dc:	8f 4f       	sbci	r24, 0xFF	; 255
    37de:	9f 4f       	sbci	r25, 0xFF	; 255
    37e0:	08 95       	ret

000037e2 <__floatunsisf>:
    37e2:	e8 94       	clt
    37e4:	09 c0       	rjmp	.+18     	; 0x37f8 <__floatsisf+0x12>

000037e6 <__floatsisf>:
    37e6:	97 fb       	bst	r25, 7
    37e8:	3e f4       	brtc	.+14     	; 0x37f8 <__floatsisf+0x12>
    37ea:	90 95       	com	r25
    37ec:	80 95       	com	r24
    37ee:	70 95       	com	r23
    37f0:	61 95       	neg	r22
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	8f 4f       	sbci	r24, 0xFF	; 255
    37f6:	9f 4f       	sbci	r25, 0xFF	; 255
    37f8:	99 23       	and	r25, r25
    37fa:	a9 f0       	breq	.+42     	; 0x3826 <__floatsisf+0x40>
    37fc:	f9 2f       	mov	r31, r25
    37fe:	96 e9       	ldi	r25, 0x96	; 150
    3800:	bb 27       	eor	r27, r27
    3802:	93 95       	inc	r25
    3804:	f6 95       	lsr	r31
    3806:	87 95       	ror	r24
    3808:	77 95       	ror	r23
    380a:	67 95       	ror	r22
    380c:	b7 95       	ror	r27
    380e:	f1 11       	cpse	r31, r1
    3810:	f8 cf       	rjmp	.-16     	; 0x3802 <__floatsisf+0x1c>
    3812:	fa f4       	brpl	.+62     	; 0x3852 <__floatsisf+0x6c>
    3814:	bb 0f       	add	r27, r27
    3816:	11 f4       	brne	.+4      	; 0x381c <__floatsisf+0x36>
    3818:	60 ff       	sbrs	r22, 0
    381a:	1b c0       	rjmp	.+54     	; 0x3852 <__floatsisf+0x6c>
    381c:	6f 5f       	subi	r22, 0xFF	; 255
    381e:	7f 4f       	sbci	r23, 0xFF	; 255
    3820:	8f 4f       	sbci	r24, 0xFF	; 255
    3822:	9f 4f       	sbci	r25, 0xFF	; 255
    3824:	16 c0       	rjmp	.+44     	; 0x3852 <__floatsisf+0x6c>
    3826:	88 23       	and	r24, r24
    3828:	11 f0       	breq	.+4      	; 0x382e <__floatsisf+0x48>
    382a:	96 e9       	ldi	r25, 0x96	; 150
    382c:	11 c0       	rjmp	.+34     	; 0x3850 <__floatsisf+0x6a>
    382e:	77 23       	and	r23, r23
    3830:	21 f0       	breq	.+8      	; 0x383a <__floatsisf+0x54>
    3832:	9e e8       	ldi	r25, 0x8E	; 142
    3834:	87 2f       	mov	r24, r23
    3836:	76 2f       	mov	r23, r22
    3838:	05 c0       	rjmp	.+10     	; 0x3844 <__floatsisf+0x5e>
    383a:	66 23       	and	r22, r22
    383c:	71 f0       	breq	.+28     	; 0x385a <__floatsisf+0x74>
    383e:	96 e8       	ldi	r25, 0x86	; 134
    3840:	86 2f       	mov	r24, r22
    3842:	70 e0       	ldi	r23, 0x00	; 0
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	2a f0       	brmi	.+10     	; 0x3852 <__floatsisf+0x6c>
    3848:	9a 95       	dec	r25
    384a:	66 0f       	add	r22, r22
    384c:	77 1f       	adc	r23, r23
    384e:	88 1f       	adc	r24, r24
    3850:	da f7       	brpl	.-10     	; 0x3848 <__floatsisf+0x62>
    3852:	88 0f       	add	r24, r24
    3854:	96 95       	lsr	r25
    3856:	87 95       	ror	r24
    3858:	97 f9       	bld	r25, 7
    385a:	08 95       	ret

0000385c <__fp_arccos>:
    385c:	df 93       	push	r29
    385e:	cf 93       	push	r28
    3860:	1f 93       	push	r17
    3862:	0f 93       	push	r16
    3864:	8b 01       	movw	r16, r22
    3866:	ec 01       	movw	r28, r24
    3868:	ea ec       	ldi	r30, 0xCA	; 202
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	3f d0       	rcall	.+126    	; 0x38ec <__fp_powser>
    386e:	71 d0       	rcall	.+226    	; 0x3952 <__fp_round>
    3870:	98 01       	movw	r18, r16
    3872:	ae 01       	movw	r20, r28
    3874:	8b 01       	movw	r16, r22
    3876:	ec 01       	movw	r28, r24
    3878:	60 e0       	ldi	r22, 0x00	; 0
    387a:	70 e0       	ldi	r23, 0x00	; 0
    387c:	80 e8       	ldi	r24, 0x80	; 128
    387e:	9f e3       	ldi	r25, 0x3F	; 63
    3880:	ae de       	rcall	.-676    	; 0x35de <__subsf3>
    3882:	0c d1       	rcall	.+536    	; 0x3a9c <sqrt>
    3884:	98 01       	movw	r18, r16
    3886:	ae 01       	movw	r20, r28
    3888:	0f 91       	pop	r16
    388a:	1f 91       	pop	r17
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	aa c0       	rjmp	.+340    	; 0x39e6 <__mulsf3x>

00003892 <__fp_cmp>:
    3892:	99 0f       	add	r25, r25
    3894:	00 08       	sbc	r0, r0
    3896:	55 0f       	add	r21, r21
    3898:	aa 0b       	sbc	r26, r26
    389a:	e0 e8       	ldi	r30, 0x80	; 128
    389c:	fe ef       	ldi	r31, 0xFE	; 254
    389e:	16 16       	cp	r1, r22
    38a0:	17 06       	cpc	r1, r23
    38a2:	e8 07       	cpc	r30, r24
    38a4:	f9 07       	cpc	r31, r25
    38a6:	c0 f0       	brcs	.+48     	; 0x38d8 <__fp_cmp+0x46>
    38a8:	12 16       	cp	r1, r18
    38aa:	13 06       	cpc	r1, r19
    38ac:	e4 07       	cpc	r30, r20
    38ae:	f5 07       	cpc	r31, r21
    38b0:	98 f0       	brcs	.+38     	; 0x38d8 <__fp_cmp+0x46>
    38b2:	62 1b       	sub	r22, r18
    38b4:	73 0b       	sbc	r23, r19
    38b6:	84 0b       	sbc	r24, r20
    38b8:	95 0b       	sbc	r25, r21
    38ba:	39 f4       	brne	.+14     	; 0x38ca <__fp_cmp+0x38>
    38bc:	0a 26       	eor	r0, r26
    38be:	61 f0       	breq	.+24     	; 0x38d8 <__fp_cmp+0x46>
    38c0:	23 2b       	or	r18, r19
    38c2:	24 2b       	or	r18, r20
    38c4:	25 2b       	or	r18, r21
    38c6:	21 f4       	brne	.+8      	; 0x38d0 <__fp_cmp+0x3e>
    38c8:	08 95       	ret
    38ca:	0a 26       	eor	r0, r26
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <__fp_cmp+0x3e>
    38ce:	a1 40       	sbci	r26, 0x01	; 1
    38d0:	a6 95       	lsr	r26
    38d2:	8f ef       	ldi	r24, 0xFF	; 255
    38d4:	81 1d       	adc	r24, r1
    38d6:	81 1d       	adc	r24, r1
    38d8:	08 95       	ret

000038da <__fp_inf>:
    38da:	97 f9       	bld	r25, 7
    38dc:	9f 67       	ori	r25, 0x7F	; 127
    38de:	80 e8       	ldi	r24, 0x80	; 128
    38e0:	70 e0       	ldi	r23, 0x00	; 0
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	08 95       	ret

000038e6 <__fp_nan>:
    38e6:	9f ef       	ldi	r25, 0xFF	; 255
    38e8:	80 ec       	ldi	r24, 0xC0	; 192
    38ea:	08 95       	ret

000038ec <__fp_powser>:
    38ec:	df 93       	push	r29
    38ee:	cf 93       	push	r28
    38f0:	1f 93       	push	r17
    38f2:	0f 93       	push	r16
    38f4:	ff 92       	push	r15
    38f6:	ef 92       	push	r14
    38f8:	df 92       	push	r13
    38fa:	7b 01       	movw	r14, r22
    38fc:	8c 01       	movw	r16, r24
    38fe:	68 94       	set
    3900:	05 c0       	rjmp	.+10     	; 0x390c <__fp_powser+0x20>
    3902:	da 2e       	mov	r13, r26
    3904:	ef 01       	movw	r28, r30
    3906:	6f d0       	rcall	.+222    	; 0x39e6 <__mulsf3x>
    3908:	fe 01       	movw	r30, r28
    390a:	e8 94       	clt
    390c:	a5 91       	lpm	r26, Z+
    390e:	25 91       	lpm	r18, Z+
    3910:	35 91       	lpm	r19, Z+
    3912:	45 91       	lpm	r20, Z+
    3914:	55 91       	lpm	r21, Z+
    3916:	ae f3       	brts	.-22     	; 0x3902 <__fp_powser+0x16>
    3918:	ef 01       	movw	r28, r30
    391a:	73 de       	rcall	.-794    	; 0x3602 <__addsf3x>
    391c:	fe 01       	movw	r30, r28
    391e:	97 01       	movw	r18, r14
    3920:	a8 01       	movw	r20, r16
    3922:	da 94       	dec	r13
    3924:	79 f7       	brne	.-34     	; 0x3904 <__fp_powser+0x18>
    3926:	df 90       	pop	r13
    3928:	ef 90       	pop	r14
    392a:	ff 90       	pop	r15
    392c:	0f 91       	pop	r16
    392e:	1f 91       	pop	r17
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	08 95       	ret

00003936 <__fp_pscA>:
    3936:	00 24       	eor	r0, r0
    3938:	0a 94       	dec	r0
    393a:	16 16       	cp	r1, r22
    393c:	17 06       	cpc	r1, r23
    393e:	18 06       	cpc	r1, r24
    3940:	09 06       	cpc	r0, r25
    3942:	08 95       	ret

00003944 <__fp_pscB>:
    3944:	00 24       	eor	r0, r0
    3946:	0a 94       	dec	r0
    3948:	12 16       	cp	r1, r18
    394a:	13 06       	cpc	r1, r19
    394c:	14 06       	cpc	r1, r20
    394e:	05 06       	cpc	r0, r21
    3950:	08 95       	ret

00003952 <__fp_round>:
    3952:	09 2e       	mov	r0, r25
    3954:	03 94       	inc	r0
    3956:	00 0c       	add	r0, r0
    3958:	11 f4       	brne	.+4      	; 0x395e <__fp_round+0xc>
    395a:	88 23       	and	r24, r24
    395c:	52 f0       	brmi	.+20     	; 0x3972 <__fp_round+0x20>
    395e:	bb 0f       	add	r27, r27
    3960:	40 f4       	brcc	.+16     	; 0x3972 <__fp_round+0x20>
    3962:	bf 2b       	or	r27, r31
    3964:	11 f4       	brne	.+4      	; 0x396a <__fp_round+0x18>
    3966:	60 ff       	sbrs	r22, 0
    3968:	04 c0       	rjmp	.+8      	; 0x3972 <__fp_round+0x20>
    396a:	6f 5f       	subi	r22, 0xFF	; 255
    396c:	7f 4f       	sbci	r23, 0xFF	; 255
    396e:	8f 4f       	sbci	r24, 0xFF	; 255
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	08 95       	ret

00003974 <__fp_split3>:
    3974:	57 fd       	sbrc	r21, 7
    3976:	90 58       	subi	r25, 0x80	; 128
    3978:	44 0f       	add	r20, r20
    397a:	55 1f       	adc	r21, r21
    397c:	59 f0       	breq	.+22     	; 0x3994 <__fp_splitA+0x10>
    397e:	5f 3f       	cpi	r21, 0xFF	; 255
    3980:	71 f0       	breq	.+28     	; 0x399e <__fp_splitA+0x1a>
    3982:	47 95       	ror	r20

00003984 <__fp_splitA>:
    3984:	88 0f       	add	r24, r24
    3986:	97 fb       	bst	r25, 7
    3988:	99 1f       	adc	r25, r25
    398a:	61 f0       	breq	.+24     	; 0x39a4 <__fp_splitA+0x20>
    398c:	9f 3f       	cpi	r25, 0xFF	; 255
    398e:	79 f0       	breq	.+30     	; 0x39ae <__fp_splitA+0x2a>
    3990:	87 95       	ror	r24
    3992:	08 95       	ret
    3994:	12 16       	cp	r1, r18
    3996:	13 06       	cpc	r1, r19
    3998:	14 06       	cpc	r1, r20
    399a:	55 1f       	adc	r21, r21
    399c:	f2 cf       	rjmp	.-28     	; 0x3982 <__fp_split3+0xe>
    399e:	46 95       	lsr	r20
    39a0:	f1 df       	rcall	.-30     	; 0x3984 <__fp_splitA>
    39a2:	08 c0       	rjmp	.+16     	; 0x39b4 <__fp_splitA+0x30>
    39a4:	16 16       	cp	r1, r22
    39a6:	17 06       	cpc	r1, r23
    39a8:	18 06       	cpc	r1, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	f1 cf       	rjmp	.-30     	; 0x3990 <__fp_splitA+0xc>
    39ae:	86 95       	lsr	r24
    39b0:	71 05       	cpc	r23, r1
    39b2:	61 05       	cpc	r22, r1
    39b4:	08 94       	sec
    39b6:	08 95       	ret

000039b8 <__fp_zero>:
    39b8:	e8 94       	clt

000039ba <__fp_szero>:
    39ba:	bb 27       	eor	r27, r27
    39bc:	66 27       	eor	r22, r22
    39be:	77 27       	eor	r23, r23
    39c0:	cb 01       	movw	r24, r22
    39c2:	97 f9       	bld	r25, 7
    39c4:	08 95       	ret

000039c6 <__gesf2>:
    39c6:	65 df       	rcall	.-310    	; 0x3892 <__fp_cmp>
    39c8:	08 f4       	brcc	.+2      	; 0x39cc <__gesf2+0x6>
    39ca:	8f ef       	ldi	r24, 0xFF	; 255
    39cc:	08 95       	ret

000039ce <__mulsf3>:
    39ce:	0b d0       	rcall	.+22     	; 0x39e6 <__mulsf3x>
    39d0:	c0 cf       	rjmp	.-128    	; 0x3952 <__fp_round>
    39d2:	b1 df       	rcall	.-158    	; 0x3936 <__fp_pscA>
    39d4:	28 f0       	brcs	.+10     	; 0x39e0 <__mulsf3+0x12>
    39d6:	b6 df       	rcall	.-148    	; 0x3944 <__fp_pscB>
    39d8:	18 f0       	brcs	.+6      	; 0x39e0 <__mulsf3+0x12>
    39da:	95 23       	and	r25, r21
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <__mulsf3+0x12>
    39de:	7d cf       	rjmp	.-262    	; 0x38da <__fp_inf>
    39e0:	82 cf       	rjmp	.-252    	; 0x38e6 <__fp_nan>
    39e2:	11 24       	eor	r1, r1
    39e4:	ea cf       	rjmp	.-44     	; 0x39ba <__fp_szero>

000039e6 <__mulsf3x>:
    39e6:	c6 df       	rcall	.-116    	; 0x3974 <__fp_split3>
    39e8:	a0 f3       	brcs	.-24     	; 0x39d2 <__mulsf3+0x4>

000039ea <__mulsf3_pse>:
    39ea:	95 9f       	mul	r25, r21
    39ec:	d1 f3       	breq	.-12     	; 0x39e2 <__mulsf3+0x14>
    39ee:	95 0f       	add	r25, r21
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	55 1f       	adc	r21, r21
    39f4:	62 9f       	mul	r22, r18
    39f6:	f0 01       	movw	r30, r0
    39f8:	72 9f       	mul	r23, r18
    39fa:	bb 27       	eor	r27, r27
    39fc:	f0 0d       	add	r31, r0
    39fe:	b1 1d       	adc	r27, r1
    3a00:	63 9f       	mul	r22, r19
    3a02:	aa 27       	eor	r26, r26
    3a04:	f0 0d       	add	r31, r0
    3a06:	b1 1d       	adc	r27, r1
    3a08:	aa 1f       	adc	r26, r26
    3a0a:	64 9f       	mul	r22, r20
    3a0c:	66 27       	eor	r22, r22
    3a0e:	b0 0d       	add	r27, r0
    3a10:	a1 1d       	adc	r26, r1
    3a12:	66 1f       	adc	r22, r22
    3a14:	82 9f       	mul	r24, r18
    3a16:	22 27       	eor	r18, r18
    3a18:	b0 0d       	add	r27, r0
    3a1a:	a1 1d       	adc	r26, r1
    3a1c:	62 1f       	adc	r22, r18
    3a1e:	73 9f       	mul	r23, r19
    3a20:	b0 0d       	add	r27, r0
    3a22:	a1 1d       	adc	r26, r1
    3a24:	62 1f       	adc	r22, r18
    3a26:	83 9f       	mul	r24, r19
    3a28:	a0 0d       	add	r26, r0
    3a2a:	61 1d       	adc	r22, r1
    3a2c:	22 1f       	adc	r18, r18
    3a2e:	74 9f       	mul	r23, r20
    3a30:	33 27       	eor	r19, r19
    3a32:	a0 0d       	add	r26, r0
    3a34:	61 1d       	adc	r22, r1
    3a36:	23 1f       	adc	r18, r19
    3a38:	84 9f       	mul	r24, r20
    3a3a:	60 0d       	add	r22, r0
    3a3c:	21 1d       	adc	r18, r1
    3a3e:	82 2f       	mov	r24, r18
    3a40:	76 2f       	mov	r23, r22
    3a42:	6a 2f       	mov	r22, r26
    3a44:	11 24       	eor	r1, r1
    3a46:	9f 57       	subi	r25, 0x7F	; 127
    3a48:	50 40       	sbci	r21, 0x00	; 0
    3a4a:	8a f0       	brmi	.+34     	; 0x3a6e <__mulsf3_pse+0x84>
    3a4c:	e1 f0       	breq	.+56     	; 0x3a86 <__mulsf3_pse+0x9c>
    3a4e:	88 23       	and	r24, r24
    3a50:	4a f0       	brmi	.+18     	; 0x3a64 <__mulsf3_pse+0x7a>
    3a52:	ee 0f       	add	r30, r30
    3a54:	ff 1f       	adc	r31, r31
    3a56:	bb 1f       	adc	r27, r27
    3a58:	66 1f       	adc	r22, r22
    3a5a:	77 1f       	adc	r23, r23
    3a5c:	88 1f       	adc	r24, r24
    3a5e:	91 50       	subi	r25, 0x01	; 1
    3a60:	50 40       	sbci	r21, 0x00	; 0
    3a62:	a9 f7       	brne	.-22     	; 0x3a4e <__mulsf3_pse+0x64>
    3a64:	9e 3f       	cpi	r25, 0xFE	; 254
    3a66:	51 05       	cpc	r21, r1
    3a68:	70 f0       	brcs	.+28     	; 0x3a86 <__mulsf3_pse+0x9c>
    3a6a:	37 cf       	rjmp	.-402    	; 0x38da <__fp_inf>
    3a6c:	a6 cf       	rjmp	.-180    	; 0x39ba <__fp_szero>
    3a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a70:	ec f3       	brlt	.-6      	; 0x3a6c <__mulsf3_pse+0x82>
    3a72:	98 3e       	cpi	r25, 0xE8	; 232
    3a74:	dc f3       	brlt	.-10     	; 0x3a6c <__mulsf3_pse+0x82>
    3a76:	86 95       	lsr	r24
    3a78:	77 95       	ror	r23
    3a7a:	67 95       	ror	r22
    3a7c:	b7 95       	ror	r27
    3a7e:	f7 95       	ror	r31
    3a80:	e7 95       	ror	r30
    3a82:	9f 5f       	subi	r25, 0xFF	; 255
    3a84:	c1 f7       	brne	.-16     	; 0x3a76 <__mulsf3_pse+0x8c>
    3a86:	fe 2b       	or	r31, r30
    3a88:	88 0f       	add	r24, r24
    3a8a:	91 1d       	adc	r25, r1
    3a8c:	96 95       	lsr	r25
    3a8e:	87 95       	ror	r24
    3a90:	97 f9       	bld	r25, 7
    3a92:	08 95       	ret
    3a94:	11 f4       	brne	.+4      	; 0x3a9a <__mulsf3_pse+0xb0>
    3a96:	0e f4       	brtc	.+2      	; 0x3a9a <__mulsf3_pse+0xb0>
    3a98:	26 cf       	rjmp	.-436    	; 0x38e6 <__fp_nan>
    3a9a:	3e c0       	rjmp	.+124    	; 0x3b18 <__fp_mpack>

00003a9c <sqrt>:
    3a9c:	73 df       	rcall	.-282    	; 0x3984 <__fp_splitA>
    3a9e:	d0 f3       	brcs	.-12     	; 0x3a94 <__mulsf3_pse+0xaa>
    3aa0:	99 23       	and	r25, r25
    3aa2:	d9 f3       	breq	.-10     	; 0x3a9a <__mulsf3_pse+0xb0>
    3aa4:	ce f3       	brts	.-14     	; 0x3a98 <__mulsf3_pse+0xae>
    3aa6:	9f 57       	subi	r25, 0x7F	; 127
    3aa8:	55 0b       	sbc	r21, r21
    3aaa:	87 ff       	sbrs	r24, 7
    3aac:	43 d0       	rcall	.+134    	; 0x3b34 <__fp_norm2>
    3aae:	00 24       	eor	r0, r0
    3ab0:	a0 e6       	ldi	r26, 0x60	; 96
    3ab2:	40 ea       	ldi	r20, 0xA0	; 160
    3ab4:	90 01       	movw	r18, r0
    3ab6:	80 58       	subi	r24, 0x80	; 128
    3ab8:	56 95       	lsr	r21
    3aba:	97 95       	ror	r25
    3abc:	28 f4       	brcc	.+10     	; 0x3ac8 <sqrt+0x2c>
    3abe:	80 5c       	subi	r24, 0xC0	; 192
    3ac0:	66 0f       	add	r22, r22
    3ac2:	77 1f       	adc	r23, r23
    3ac4:	88 1f       	adc	r24, r24
    3ac6:	20 f0       	brcs	.+8      	; 0x3ad0 <sqrt+0x34>
    3ac8:	26 17       	cp	r18, r22
    3aca:	37 07       	cpc	r19, r23
    3acc:	48 07       	cpc	r20, r24
    3ace:	30 f4       	brcc	.+12     	; 0x3adc <sqrt+0x40>
    3ad0:	62 1b       	sub	r22, r18
    3ad2:	73 0b       	sbc	r23, r19
    3ad4:	84 0b       	sbc	r24, r20
    3ad6:	20 29       	or	r18, r0
    3ad8:	31 29       	or	r19, r1
    3ada:	4a 2b       	or	r20, r26
    3adc:	a6 95       	lsr	r26
    3ade:	17 94       	ror	r1
    3ae0:	07 94       	ror	r0
    3ae2:	20 25       	eor	r18, r0
    3ae4:	31 25       	eor	r19, r1
    3ae6:	4a 27       	eor	r20, r26
    3ae8:	58 f7       	brcc	.-42     	; 0x3ac0 <sqrt+0x24>
    3aea:	66 0f       	add	r22, r22
    3aec:	77 1f       	adc	r23, r23
    3aee:	88 1f       	adc	r24, r24
    3af0:	20 f0       	brcs	.+8      	; 0x3afa <sqrt+0x5e>
    3af2:	26 17       	cp	r18, r22
    3af4:	37 07       	cpc	r19, r23
    3af6:	48 07       	cpc	r20, r24
    3af8:	30 f4       	brcc	.+12     	; 0x3b06 <sqrt+0x6a>
    3afa:	62 0b       	sbc	r22, r18
    3afc:	73 0b       	sbc	r23, r19
    3afe:	84 0b       	sbc	r24, r20
    3b00:	20 0d       	add	r18, r0
    3b02:	31 1d       	adc	r19, r1
    3b04:	41 1d       	adc	r20, r1
    3b06:	a0 95       	com	r26
    3b08:	81 f7       	brne	.-32     	; 0x3aea <sqrt+0x4e>
    3b0a:	b9 01       	movw	r22, r18
    3b0c:	84 2f       	mov	r24, r20
    3b0e:	91 58       	subi	r25, 0x81	; 129
    3b10:	88 0f       	add	r24, r24
    3b12:	96 95       	lsr	r25
    3b14:	87 95       	ror	r24
    3b16:	08 95       	ret

00003b18 <__fp_mpack>:
    3b18:	9f 3f       	cpi	r25, 0xFF	; 255
    3b1a:	31 f0       	breq	.+12     	; 0x3b28 <__fp_mpack_finite+0xc>

00003b1c <__fp_mpack_finite>:
    3b1c:	91 50       	subi	r25, 0x01	; 1
    3b1e:	20 f4       	brcc	.+8      	; 0x3b28 <__fp_mpack_finite+0xc>
    3b20:	87 95       	ror	r24
    3b22:	77 95       	ror	r23
    3b24:	67 95       	ror	r22
    3b26:	b7 95       	ror	r27
    3b28:	88 0f       	add	r24, r24
    3b2a:	91 1d       	adc	r25, r1
    3b2c:	96 95       	lsr	r25
    3b2e:	87 95       	ror	r24
    3b30:	97 f9       	bld	r25, 7
    3b32:	08 95       	ret

00003b34 <__fp_norm2>:
    3b34:	91 50       	subi	r25, 0x01	; 1
    3b36:	50 40       	sbci	r21, 0x00	; 0
    3b38:	66 0f       	add	r22, r22
    3b3a:	77 1f       	adc	r23, r23
    3b3c:	88 1f       	adc	r24, r24
    3b3e:	d2 f7       	brpl	.-12     	; 0x3b34 <__fp_norm2>
    3b40:	08 95       	ret

00003b42 <__divmodhi4>:
    3b42:	97 fb       	bst	r25, 7
    3b44:	07 2e       	mov	r0, r23
    3b46:	16 f4       	brtc	.+4      	; 0x3b4c <__divmodhi4+0xa>
    3b48:	00 94       	com	r0
    3b4a:	07 d0       	rcall	.+14     	; 0x3b5a <__divmodhi4_neg1>
    3b4c:	77 fd       	sbrc	r23, 7
    3b4e:	09 d0       	rcall	.+18     	; 0x3b62 <__divmodhi4_neg2>
    3b50:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__udivmodhi4>
    3b54:	07 fc       	sbrc	r0, 7
    3b56:	05 d0       	rcall	.+10     	; 0x3b62 <__divmodhi4_neg2>
    3b58:	3e f4       	brtc	.+14     	; 0x3b68 <__divmodhi4_exit>

00003b5a <__divmodhi4_neg1>:
    3b5a:	90 95       	com	r25
    3b5c:	81 95       	neg	r24
    3b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b60:	08 95       	ret

00003b62 <__divmodhi4_neg2>:
    3b62:	70 95       	com	r23
    3b64:	61 95       	neg	r22
    3b66:	7f 4f       	sbci	r23, 0xFF	; 255

00003b68 <__divmodhi4_exit>:
    3b68:	08 95       	ret

00003b6a <__tablejump2__>:
    3b6a:	ee 0f       	add	r30, r30
    3b6c:	ff 1f       	adc	r31, r31

00003b6e <__tablejump__>:
    3b6e:	05 90       	lpm	r0, Z+
    3b70:	f4 91       	lpm	r31, Z
    3b72:	e0 2d       	mov	r30, r0
    3b74:	09 94       	ijmp

00003b76 <__udivmodhi4>:
    3b76:	aa 1b       	sub	r26, r26
    3b78:	bb 1b       	sub	r27, r27
    3b7a:	51 e1       	ldi	r21, 0x11	; 17
    3b7c:	07 c0       	rjmp	.+14     	; 0x3b8c <__udivmodhi4_ep>

00003b7e <__udivmodhi4_loop>:
    3b7e:	aa 1f       	adc	r26, r26
    3b80:	bb 1f       	adc	r27, r27
    3b82:	a6 17       	cp	r26, r22
    3b84:	b7 07       	cpc	r27, r23
    3b86:	10 f0       	brcs	.+4      	; 0x3b8c <__udivmodhi4_ep>
    3b88:	a6 1b       	sub	r26, r22
    3b8a:	b7 0b       	sbc	r27, r23

00003b8c <__udivmodhi4_ep>:
    3b8c:	88 1f       	adc	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	5a 95       	dec	r21
    3b92:	a9 f7       	brne	.-22     	; 0x3b7e <__udivmodhi4_loop>
    3b94:	80 95       	com	r24
    3b96:	90 95       	com	r25
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	08 95       	ret

00003b9e <__itoa_ncheck>:
    3b9e:	bb 27       	eor	r27, r27
    3ba0:	4a 30       	cpi	r20, 0x0A	; 10
    3ba2:	31 f4       	brne	.+12     	; 0x3bb0 <__itoa_ncheck+0x12>
    3ba4:	99 23       	and	r25, r25
    3ba6:	22 f4       	brpl	.+8      	; 0x3bb0 <__itoa_ncheck+0x12>
    3ba8:	bd e2       	ldi	r27, 0x2D	; 45
    3baa:	90 95       	com	r25
    3bac:	81 95       	neg	r24
    3bae:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb0:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__utoa_common>

00003bb4 <__utoa_ncheck>:
    3bb4:	bb 27       	eor	r27, r27

00003bb6 <__utoa_common>:
    3bb6:	fb 01       	movw	r30, r22
    3bb8:	55 27       	eor	r21, r21
    3bba:	aa 27       	eor	r26, r26
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	aa 1f       	adc	r26, r26
    3bc2:	a4 17       	cp	r26, r20
    3bc4:	10 f0       	brcs	.+4      	; 0x3bca <__utoa_common+0x14>
    3bc6:	a4 1b       	sub	r26, r20
    3bc8:	83 95       	inc	r24
    3bca:	50 51       	subi	r21, 0x10	; 16
    3bcc:	b9 f7       	brne	.-18     	; 0x3bbc <__utoa_common+0x6>
    3bce:	a0 5d       	subi	r26, 0xD0	; 208
    3bd0:	aa 33       	cpi	r26, 0x3A	; 58
    3bd2:	08 f0       	brcs	.+2      	; 0x3bd6 <__utoa_common+0x20>
    3bd4:	a9 5d       	subi	r26, 0xD9	; 217
    3bd6:	a1 93       	st	Z+, r26
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	79 f7       	brne	.-34     	; 0x3bba <__utoa_common+0x4>
    3bdc:	b1 11       	cpse	r27, r1
    3bde:	b1 93       	st	Z+, r27
    3be0:	11 92       	st	Z+, r1
    3be2:	cb 01       	movw	r24, r22
    3be4:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <strrev>

00003be8 <strrev>:
    3be8:	dc 01       	movw	r26, r24
    3bea:	fc 01       	movw	r30, r24
    3bec:	67 2f       	mov	r22, r23
    3bee:	71 91       	ld	r23, Z+
    3bf0:	77 23       	and	r23, r23
    3bf2:	e1 f7       	brne	.-8      	; 0x3bec <strrev+0x4>
    3bf4:	32 97       	sbiw	r30, 0x02	; 2
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <strrev+0x18>
    3bf8:	7c 91       	ld	r23, X
    3bfa:	6d 93       	st	X+, r22
    3bfc:	70 83       	st	Z, r23
    3bfe:	62 91       	ld	r22, -Z
    3c00:	ae 17       	cp	r26, r30
    3c02:	bf 07       	cpc	r27, r31
    3c04:	c8 f3       	brcs	.-14     	; 0x3bf8 <strrev+0x10>
    3c06:	08 95       	ret

00003c08 <_exit>:
    3c08:	f8 94       	cli

00003c0a <__stop_program>:
    3c0a:	ff cf       	rjmp	.-2      	; 0x3c0a <__stop_program>

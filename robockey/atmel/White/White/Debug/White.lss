
White.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00003c52  00003ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080013e  0080013e  00003d24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003d24  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  00003d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035f1  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be3  00000000  00000000  000075c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011bd  00000000  00000000  000081a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009c4  00000000  00000000  00009368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000951  00000000  00000000  00009d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000040e2  00000000  00000000  0000a67d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0000e75f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 01 	jmp	0x37c	; 0x37c <__ctors_end>
       4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       c:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__vector_3>
      10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      28:	0c 94 17 14 	jmp	0x282e	; 0x282e <__vector_10>
      2c:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__vector_11>
      30:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      68:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__vector_29>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      94:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      98:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      9c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      ac:	d0 05       	cpc	r29, r0
      ae:	e1 05       	cpc	r30, r1
      b0:	f2 05       	cpc	r31, r2
      b2:	03 06       	cpc	r0, r19
      b4:	14 06       	cpc	r1, r20
      b6:	25 06       	cpc	r2, r21
      b8:	36 06       	cpc	r3, r22
      ba:	43 18       	sub	r4, r3
      bc:	4e 18       	sub	r4, r14
      be:	a3 18       	sub	r10, r3
      c0:	c2 18       	sub	r12, r2
      c2:	e1 18       	sub	r14, r1
      c4:	46 19       	sub	r20, r6
      c6:	f2 18       	sub	r15, r2
      c8:	36 19       	sub	r19, r6
      ca:	07 2c       	mov	r0, r7
      cc:	7a a5       	ldd	r23, Y+42	; 0x2a
      ce:	ba 6c       	ori	r27, 0xCA	; 202
      d0:	c5 90       	lpm	r12, Z+
      d2:	da 3b       	cpi	r29, 0xBA	; 186
      d4:	93 65       	ori	r25, 0x53	; 83
      d6:	fc 8b       	std	Y+20, r31	; 0x14
      d8:	bc 53       	subi	r27, 0x3C	; 60
      da:	f8 10       	cpse	r15, r8
      dc:	fd 3c       	cpi	r31, 0xCD	; 205
      de:	56 92       	lac	Z, r5
      e0:	83 4d       	sbci	r24, 0xD3	; 211
      e2:	bd 87       	std	Y+13, r27	; 0x0d
      e4:	9d 3a       	cpi	r25, 0xAD	; 173
      e6:	b6 3d       	cpi	r27, 0xD6	; 214
      e8:	cb c9       	rjmp	.-3178   	; 0xfffff480 <__eeprom_end+0xff7ef480>
      ea:	bf 5b       	subi	r27, 0xBF	; 191
      ec:	be 73       	andi	r27, 0x3E	; 62
      ee:	da 0f       	add	r29, r26
      f0:	c9 3f       	cpi	r28, 0xF9	; 249

000000f2 <__trampolines_end>:
      f2:	6c 6f       	ori	r22, 0xFC	; 252
      f4:	73 74       	andi	r23, 0x43	; 67
      f6:	20 74       	andi	r18, 0x40	; 64
      f8:	68 65       	ori	r22, 0x58	; 88
      fa:	20 70       	andi	r18, 0x00	; 0
      fc:	75 63       	ori	r23, 0x35	; 53
      fe:	6b 21       	and	r22, r11
     100:	0a 00       	.word	0x000a	; ????

00000102 <__c.2097>:
     102:	67 6f 74 20 74 68 65 20 70 75 63 6b 21 0a 00        got the puck!..

00000111 <__c.2066>:
     111:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

0000011d <__c.2064>:
     11d:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000128 <__c.2060>:
     128:	50 49 44 0a 00                                      PID..

0000012d <__c.2058>:
     12d:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

00000139 <__c.2056>:
     139:	50 49 44 0a 00                                      PID..

0000013e <__c.2054>:
     13e:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

00000149 <__c.2051>:
     149:	0a 00                                               ..

0000014b <__c.2049>:
     14b:	2c 20 00                                            , .

0000014e <__c.2047>:
     14e:	6d 65 61 6e 30 32 34 2c 20 6d 65 61 6e 31 33 35     mean024, mean135
     15e:	3a 20 00                                            : .

00000161 <__c.2043>:
     161:	0d 0a 00                                            ...

00000164 <__c.2041>:
     164:	0d 0a 00                                            ...

00000167 <__c.2039>:
     167:	50 68 6f 5b 36 5d 00                                Pho[6].

0000016e <__c.2037>:
     16e:	0d 0a 00                                            ...

00000171 <__c.2035>:
     171:	50 68 6f 5b 35 5d 00                                Pho[5].

00000178 <__c.2033>:
     178:	0d 0a 00                                            ...

0000017b <__c.2031>:
     17b:	50 68 6f 5b 34 5d 00                                Pho[4].

00000182 <__c.2029>:
     182:	0d 0a 00                                            ...

00000185 <__c.2027>:
     185:	50 68 6f 5b 33 5d 00                                Pho[3].

0000018c <__c.2025>:
     18c:	0d 0a 00                                            ...

0000018f <__c.2023>:
     18f:	50 68 6f 5b 32 5d 00                                Pho[2].

00000196 <__c.2021>:
     196:	0d 0a 00                                            ...

00000199 <__c.2019>:
     199:	50 68 6f 5b 31 5d 00                                Pho[1].

000001a0 <__c.2017>:
     1a0:	0d 0a 00                                            ...

000001a3 <__c.2015>:
     1a3:	50 68 6f 5b 30 5d 00                                Pho[0].

000001aa <__c.2013>:
     1aa:	0d 0a 00                                            ...

000001ad <__c.2146>:
     1ad:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001b8 <__c.2144>:
     1b8:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001c4 <__c.2142>:
     1c4:	0a 00                                               ..

000001c6 <__c.2140>:
     1c6:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

000001d0 <__c.2138>:
     1d0:	0a 00                                               ..

000001d2 <__c.2136>:
     1d2:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

000001dd <__c.2128>:
     1dd:	74 75 72 6e 20 6c 65 66 74 0a 00                    turn left..

000001e8 <__c.2126>:
     1e8:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000001f4 <__c.2124>:
     1f4:	0a 00                                               ..

000001f6 <__c.2122>:
     1f6:	67 61 69 6e 2a 31 30 3a 20 00                       gain*10: .

00000200 <__c.2120>:
     200:	0a 00                                               ..

00000202 <__c.2118>:
     202:	61 6c 70 68 61 2a 31 30 3a 20 00                    alpha*10: .

0000020d <__c.2110>:
     20d:	0a 00                                               ..

0000020f <__c.2108>:
     20f:	61 6c 70 68 61 3a 20 00                             alpha: .

00000217 <__c.2084>:
     217:	0a 00                                               ..

00000219 <__c.2082>:
     219:	09 76 79 3a 20 30 2e 00                             .vy: 0..

00000221 <__c.2080>:
     221:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

00000232 <__c.2078>:
     232:	0a 00                                               ..

00000234 <__c.2076>:
     234:	09 09 79 3a 00                                      ..y:.

00000239 <__c.2074>:
     239:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000245 <__c.2046>:
     245:	0a 00                                               ..

00000247 <__c.2044>:
     247:	64 6d 61 78 3a 00                                   dmax:.

0000024d <descriptor_list>:
     24d:	00 01 00 00 e4 02 12 00 02 00 00 a1 02 43 00 03     .............C..
     25d:	00 00 9d 02 04 01 03 09 04 89 02 12 02 03 09 04     ................
     26d:	81 02 06 03 03 09 04 77 02 08                       .......w..

00000277 <string3>:
     277:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000281 <string2>:
     281:	06 03 4d 00 32 00 00 00                             ..M.2...

00000289 <string1>:
     289:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     299:	65 00 00 00                                         e...

0000029d <string0>:
     29d:	04 03 09 04                                         ....

000002a1 <config1_descriptor>:
     2a1:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     2b1:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2c1:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     2d1:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2e1:	40 00 00                                            @..

000002e4 <device_descriptor>:
     2e4:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2f4:	03 01                                               ..

000002f6 <endpoint_config_table>:
     2f6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000300 <__c.2094>:
     300:	47 61 6d 65 20 6f 76 65 72 0a 00                    Game over..

0000030b <__c.2091>:
     30b:	48 61 6c 66 74 69 6d 65 0a 00                       Halftime..

00000315 <__c.2088>:
     315:	50 61 75 73 65 0a 00                                Pause..

0000031c <__c.2085>:
     31c:	47 6f 61 6c 20 42 0a 00                             Goal B..

00000324 <__c.2082>:
     324:	47 6f 61 6c 20 41 0a 00                             Goal A..

0000032c <__c.2079>:
     32c:	50 6c 61 79 20 0a 00                                Play ..

00000333 <__c.2075>:
     333:	66 6c 61 73 68 20 4c 45 44 20 0a 00                 flash LED ..

0000033f <__c.2066>:
     33f:	0a 00                                               ..

00000341 <__c.2064>:
     341:	2c 20 00                                            , .

00000344 <__c.2062>:
     344:	31 42 2c 20 31 43 3a 20 00                          1B, 1C: .

0000034d <__c.2058>:
     34d:	0a 00                                               ..

0000034f <__c.2056>:
     34f:	2c 20 00                                            , .

00000352 <__c.2054>:
     352:	44 65 73 69 72 65 20 50 6f 73 69 74 69 6f 6e 20     Desire Position 
     362:	3d 20 00                                            = .

00000365 <__c.2051>:
     365:	0a 00                                               ..

00000367 <__c.2049>:
     367:	2c 20 00                                            , .

0000036a <__c.2047>:
     36a:	67 6f 61 6c 20 3d 20 00                             goal = .

00000372 <__c.2040>:
     372:	0a 00                                               ..

00000374 <__c.2038>:
     374:	73 74 61 74 65 3a 20 00                             state: .

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	da e0       	ldi	r29, 0x0A	; 10
     384:	de bf       	out	0x3e, r29	; 62
     386:	cd bf       	out	0x3d, r28	; 61

00000388 <__do_copy_data>:
     388:	11 e0       	ldi	r17, 0x01	; 1
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b1 e0       	ldi	r27, 0x01	; 1
     38e:	e2 e5       	ldi	r30, 0x52	; 82
     390:	fc e3       	ldi	r31, 0x3C	; 60
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x10>
     394:	05 90       	lpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	ae 33       	cpi	r26, 0x3E	; 62
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0xc>

0000039e <__do_clear_bss>:
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	ae e3       	ldi	r26, 0x3E	; 62
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	a6 3b       	cpi	r26, 0xB6	; 182
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	0e 94 91 19 	call	0x3322	; 0x3322 <main>
     3b2:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <_exit>

000003b6 <__bad_interrupt>:
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <init_ADC>:
int sum_Pho = 0;
int sum_stalk = 0;
int diff_Pho = 0;
int diff_stalk = 0;
int speed_diff_Pho = full_speed;	// speed different for wheels (in order to have a smoother turn)
void init_ADC(void){
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
	clear(ADMUX,REFS1);//set the voltage reference
     3be:	ac e7       	ldi	r26, 0x7C	; 124
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	8c 91       	ld	r24, X
     3c4:	8f 77       	andi	r24, 0x7F	; 127
     3c6:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
     3c8:	8c 91       	ld	r24, X
     3ca:	80 64       	ori	r24, 0x40	; 64
     3cc:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
     3ce:	ea e7       	ldi	r30, 0x7A	; 122
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     3d8:	80 81       	ld	r24, Z
     3da:	82 60       	ori	r24, 0x02	; 2
     3dc:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     3de:	80 81       	ld	r24, Z
     3e0:	81 60       	ori	r24, 0x01	; 1
     3e2:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);
     3e4:	ce e7       	ldi	r28, 0x7E	; 126
     3e6:	d0 e0       	ldi	r29, 0x00	; 0
     3e8:	88 81       	ld	r24, Y
     3ea:	81 60       	ori	r24, 0x01	; 1
     3ec:	88 83       	st	Y, r24
	set(DIDR0,ADC1D);
     3ee:	88 81       	ld	r24, Y
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	88 83       	st	Y, r24
	set(DIDR2,ADC9D);
     3f4:	cd e7       	ldi	r28, 0x7D	; 125
     3f6:	d0 e0       	ldi	r29, 0x00	; 0
     3f8:	88 81       	ld	r24, Y
     3fa:	82 60       	ori	r24, 0x02	; 2
     3fc:	88 83       	st	Y, r24
	set(DIDR2,ADC10D);
     3fe:	88 81       	ld	r24, Y
     400:	84 60       	ori	r24, 0x04	; 4
     402:	88 83       	st	Y, r24
	set(DIDR2,ADC11D);
     404:	88 81       	ld	r24, Y
     406:	88 60       	ori	r24, 0x08	; 8
     408:	88 83       	st	Y, r24
	set(DIDR2,ADC12D);
     40a:	88 81       	ld	r24, Y
     40c:	80 61       	ori	r24, 0x10	; 16
     40e:	88 83       	st	Y, r24
	set(DIDR2,ADC8D);
     410:	88 81       	ld	r24, Y
     412:	81 60       	ori	r24, 0x01	; 1
     414:	88 83       	st	Y, r24
	
	clear(ADCSRB,MUX5);//select F0 as analog input
     416:	cb e7       	ldi	r28, 0x7B	; 123
     418:	d0 e0       	ldi	r29, 0x00	; 0
     41a:	88 81       	ld	r24, Y
     41c:	8f 7d       	andi	r24, 0xDF	; 223
     41e:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
     420:	8c 91       	ld	r24, X
     422:	8b 7f       	andi	r24, 0xFB	; 251
     424:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
     426:	8c 91       	ld	r24, X
     428:	8d 7f       	andi	r24, 0xFD	; 253
     42a:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
     42c:	8c 91       	ld	r24, X
     42e:	8e 7f       	andi	r24, 0xFE	; 254
     430:	8c 93       	st	X, r24
	
	
	set(ADCSRA,ADATE); //triggering
     432:	80 81       	ld	r24, Z
     434:	80 62       	ori	r24, 0x20	; 32
     436:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIE);//interrupt
     438:	80 81       	ld	r24, Z
     43a:	88 60       	ori	r24, 0x08	; 8
     43c:	80 83       	st	Z, r24
	sei();
     43e:	78 94       	sei
	
	set(ADCSRA,ADEN);// enable conversions
     440:	80 81       	ld	r24, Z
     442:	80 68       	ori	r24, 0x80	; 128
     444:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     446:	80 81       	ld	r24, Z
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	80 83       	st	Z, r24
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <PID_Pho>:
		break;
	}
	
}

void PID_Pho(float Kp, float Kd) {
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	6b 01       	movw	r12, r22
     46c:	7c 01       	movw	r14, r24
     46e:	49 01       	movw	r8, r18
     470:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     472:	c0 91 48 01 	lds	r28, 0x0148
     476:	d0 91 49 01 	lds	r29, 0x0149
     47a:	80 91 4c 01 	lds	r24, 0x014C
     47e:	90 91 4d 01 	lds	r25, 0x014D
     482:	c8 0f       	add	r28, r24
     484:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     486:	20 91 4a 01 	lds	r18, 0x014A
     48a:	30 91 4b 01 	lds	r19, 0x014B
     48e:	80 91 4e 01 	lds	r24, 0x014E
     492:	90 91 4f 01 	lds	r25, 0x014F
     496:	82 0f       	add	r24, r18
     498:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     49a:	c8 1b       	sub	r28, r24
     49c:	d9 0b       	sbc	r29, r25
     49e:	d0 93 b3 01 	sts	0x01B3, r29
     4a2:	c0 93 b2 01 	sts	0x01B2, r28
	diff_Pho = input - input_last;
     4a6:	80 91 44 01 	lds	r24, 0x0144
     4aa:	90 91 45 01 	lds	r25, 0x0145
     4ae:	8e 01       	movw	r16, r28
     4b0:	08 1b       	sub	r16, r24
     4b2:	19 0b       	sbc	r17, r25
     4b4:	10 93 41 01 	sts	0x0141, r17
     4b8:	00 93 40 01 	sts	0x0140, r16
	sum_Pho = sum_Pho + input;
     4bc:	80 91 42 01 	lds	r24, 0x0142
     4c0:	90 91 43 01 	lds	r25, 0x0143
     4c4:	8c 0f       	add	r24, r28
     4c6:	9d 1f       	adc	r25, r29
     4c8:	90 93 43 01 	sts	0x0143, r25
     4cc:	80 93 42 01 	sts	0x0142, r24
	output = Kp * input + Kd * diff_Pho;
     4d0:	be 01       	movw	r22, r28
     4d2:	88 27       	eor	r24, r24
     4d4:	77 fd       	sbrc	r23, 7
     4d6:	80 95       	com	r24
     4d8:	98 2f       	mov	r25, r24
     4da:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     4e6:	6b 01       	movw	r12, r22
     4e8:	7c 01       	movw	r14, r24
     4ea:	b8 01       	movw	r22, r16
     4ec:	88 27       	eor	r24, r24
     4ee:	77 fd       	sbrc	r23, 7
     4f0:	80 95       	com	r24
     4f2:	98 2f       	mov	r25, r24
     4f4:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
     4f8:	a5 01       	movw	r20, r10
     4fa:	94 01       	movw	r18, r8
     4fc:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12
     508:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
     50c:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
     510:	70 93 b1 01 	sts	0x01B1, r23
     514:	60 93 b0 01 	sts	0x01B0, r22
	
	input_last = input;
     518:	d0 93 45 01 	sts	0x0145, r29
     51c:	c0 93 44 01 	sts	0x0144, r28
	
	if(output>0){
     520:	16 16       	cp	r1, r22
     522:	17 06       	cpc	r1, r23
     524:	74 f5       	brge	.+92     	; 0x582 <PID_Pho+0x130>
		OCR1C = full_speed - abs(output);
     526:	9b 01       	movw	r18, r22
     528:	77 23       	and	r23, r23
     52a:	24 f4       	brge	.+8      	; 0x534 <PID_Pho+0xe2>
     52c:	22 27       	eor	r18, r18
     52e:	33 27       	eor	r19, r19
     530:	26 1b       	sub	r18, r22
     532:	37 0b       	sbc	r19, r23
     534:	8a e8       	ldi	r24, 0x8A	; 138
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	82 1b       	sub	r24, r18
     53a:	93 0b       	sbc	r25, r19
     53c:	90 93 8d 00 	sts	0x008D, r25
     540:	80 93 8c 00 	sts	0x008C, r24
		if (abs(output) > speed_diff_Pho){
     544:	20 91 00 01 	lds	r18, 0x0100
     548:	30 91 01 01 	lds	r19, 0x0101
     54c:	80 91 b0 01 	lds	r24, 0x01B0
     550:	90 91 b1 01 	lds	r25, 0x01B1
     554:	99 23       	and	r25, r25
     556:	1c f4       	brge	.+6      	; 0x55e <PID_Pho+0x10c>
     558:	91 95       	neg	r25
     55a:	81 95       	neg	r24
     55c:	91 09       	sbc	r25, r1
     55e:	28 17       	cp	r18, r24
     560:	39 07       	cpc	r19, r25
     562:	44 f4       	brge	.+16     	; 0x574 <PID_Pho+0x122>
			OCR1C = full_speed - speed_diff_Pho;
     564:	8a e8       	ldi	r24, 0x8A	; 138
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	82 1b       	sub	r24, r18
     56a:	93 0b       	sbc	r25, r19
     56c:	90 93 8d 00 	sts	0x008D, r25
     570:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
     574:	8a e8       	ldi	r24, 0x8A	; 138
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	90 93 8b 00 	sts	0x008B, r25
     57c:	80 93 8a 00 	sts	0x008A, r24
     580:	2d c0       	rjmp	.+90     	; 0x5dc <PID_Pho+0x18a>
		
	}
	else{
		OCR1B = full_speed - abs(output);
     582:	9b 01       	movw	r18, r22
     584:	77 23       	and	r23, r23
     586:	24 f4       	brge	.+8      	; 0x590 <PID_Pho+0x13e>
     588:	22 27       	eor	r18, r18
     58a:	33 27       	eor	r19, r19
     58c:	26 1b       	sub	r18, r22
     58e:	37 0b       	sbc	r19, r23
     590:	8a e8       	ldi	r24, 0x8A	; 138
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	82 1b       	sub	r24, r18
     596:	93 0b       	sbc	r25, r19
     598:	90 93 8b 00 	sts	0x008B, r25
     59c:	80 93 8a 00 	sts	0x008A, r24
		if (abs(output) > speed_diff_Pho){
     5a0:	20 91 00 01 	lds	r18, 0x0100
     5a4:	30 91 01 01 	lds	r19, 0x0101
     5a8:	80 91 b0 01 	lds	r24, 0x01B0
     5ac:	90 91 b1 01 	lds	r25, 0x01B1
     5b0:	99 23       	and	r25, r25
     5b2:	1c f4       	brge	.+6      	; 0x5ba <PID_Pho+0x168>
     5b4:	91 95       	neg	r25
     5b6:	81 95       	neg	r24
     5b8:	91 09       	sbc	r25, r1
     5ba:	28 17       	cp	r18, r24
     5bc:	39 07       	cpc	r19, r25
     5be:	44 f4       	brge	.+16     	; 0x5d0 <PID_Pho+0x17e>
			OCR1B = full_speed - speed_diff_Pho;
     5c0:	8a e8       	ldi	r24, 0x8A	; 138
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	82 1b       	sub	r24, r18
     5c6:	93 0b       	sbc	r25, r19
     5c8:	90 93 8b 00 	sts	0x008B, r25
     5cc:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
     5d0:	8a e8       	ldi	r24, 0x8A	; 138
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	90 93 8d 00 	sts	0x008D, r25
     5d8:	80 93 8c 00 	sts	0x008C, r24
	}
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	08 95       	ret

000005f6 <PID_stalk>:

void PID_stalk(float Kp, float Kd){
     5f6:	8f 92       	push	r8
     5f8:	9f 92       	push	r9
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	49 01       	movw	r8, r18
     614:	5a 01       	movw	r10, r20
	int sum02 = Pho[0] + Pho[2];
     616:	c0 91 48 01 	lds	r28, 0x0148
     61a:	d0 91 49 01 	lds	r29, 0x0149
     61e:	80 91 4c 01 	lds	r24, 0x014C
     622:	90 91 4d 01 	lds	r25, 0x014D
     626:	c8 0f       	add	r28, r24
     628:	d9 1f       	adc	r29, r25
	int sum13 = Pho[1] + Pho[3];
     62a:	20 91 4a 01 	lds	r18, 0x014A
     62e:	30 91 4b 01 	lds	r19, 0x014B
     632:	80 91 4e 01 	lds	r24, 0x014E
     636:	90 91 4f 01 	lds	r25, 0x014F
     63a:	82 0f       	add	r24, r18
     63c:	93 1f       	adc	r25, r19
	input = sum02 - sum13;
     63e:	c8 1b       	sub	r28, r24
     640:	d9 0b       	sbc	r29, r25
     642:	d0 93 b3 01 	sts	0x01B3, r29
     646:	c0 93 b2 01 	sts	0x01B2, r28
	diff_stalk = input - input_last;
     64a:	80 91 44 01 	lds	r24, 0x0144
     64e:	90 91 45 01 	lds	r25, 0x0145
     652:	8e 01       	movw	r16, r28
     654:	08 1b       	sub	r16, r24
     656:	19 0b       	sbc	r17, r25
     658:	10 93 3f 01 	sts	0x013F, r17
     65c:	00 93 3e 01 	sts	0x013E, r16
	output = Kp * input + Kd * diff_stalk;
     660:	be 01       	movw	r22, r28
     662:	88 27       	eor	r24, r24
     664:	77 fd       	sbrc	r23, 7
     666:	80 95       	com	r24
     668:	98 2f       	mov	r25, r24
     66a:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
     66e:	a7 01       	movw	r20, r14
     670:	96 01       	movw	r18, r12
     672:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     676:	6b 01       	movw	r12, r22
     678:	7c 01       	movw	r14, r24
     67a:	b8 01       	movw	r22, r16
     67c:	88 27       	eor	r24, r24
     67e:	77 fd       	sbrc	r23, 7
     680:	80 95       	com	r24
     682:	98 2f       	mov	r25, r24
     684:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
     688:	a5 01       	movw	r20, r10
     68a:	94 01       	movw	r18, r8
     68c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     690:	9b 01       	movw	r18, r22
     692:	ac 01       	movw	r20, r24
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
     69c:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
     6a0:	70 93 b1 01 	sts	0x01B1, r23
     6a4:	60 93 b0 01 	sts	0x01B0, r22
	
	input_last = input;
     6a8:	d0 93 45 01 	sts	0x0145, r29
     6ac:	c0 93 44 01 	sts	0x0144, r28
	
	if(abs(output) >= full_speed_stalk){
     6b0:	9b 01       	movw	r18, r22
     6b2:	77 23       	and	r23, r23
     6b4:	24 f4       	brge	.+8      	; 0x6be <PID_stalk+0xc8>
     6b6:	22 27       	eor	r18, r18
     6b8:	33 27       	eor	r19, r19
     6ba:	26 1b       	sub	r18, r22
     6bc:	37 0b       	sbc	r19, r23
     6be:	2a 38       	cpi	r18, 0x8A	; 138
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	38 07       	cpc	r19, r24
     6c4:	5c f0       	brlt	.+22     	; 0x6dc <PID_stalk+0xe6>
		OCR1C = full_speed_stalk;
     6c6:	8a e8       	ldi	r24, 0x8A	; 138
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	90 93 8d 00 	sts	0x008D, r25
     6ce:	80 93 8c 00 	sts	0x008C, r24
		OCR1B = full_speed_stalk;
     6d2:	90 93 8b 00 	sts	0x008B, r25
     6d6:	80 93 8a 00 	sts	0x008A, r24
     6da:	11 c0       	rjmp	.+34     	; 0x6fe <PID_stalk+0x108>
	}
	else{
		OCR1C = abs(output);
     6dc:	30 93 8d 00 	sts	0x008D, r19
     6e0:	20 93 8c 00 	sts	0x008C, r18
		OCR1B = abs(output);
     6e4:	80 91 b0 01 	lds	r24, 0x01B0
     6e8:	90 91 b1 01 	lds	r25, 0x01B1
     6ec:	99 23       	and	r25, r25
     6ee:	1c f4       	brge	.+6      	; 0x6f6 <PID_stalk+0x100>
     6f0:	91 95       	neg	r25
     6f2:	81 95       	neg	r24
     6f4:	91 09       	sbc	r25, r1
     6f6:	90 93 8b 00 	sts	0x008B, r25
     6fa:	80 93 8a 00 	sts	0x008A, r24
	}
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	bf 90       	pop	r11
     710:	af 90       	pop	r10
     712:	9f 90       	pop	r9
     714:	8f 90       	pop	r8
     716:	08 95       	ret

00000718 <findPuck>:
	set(ADCSRA,ADEN);// enable conversions
	set(ADCSRA,ADSC);
}


void findPuck(state){
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	7c 01       	movw	r14, r24
	m_usb_tx_string("\r\n");
     72e:	8a ea       	ldi	r24, 0xAA	; 170
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("Pho[0]");
     736:	83 ea       	ldi	r24, 0xA3	; 163
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(Pho[0]);
     73e:	0f 2e       	mov	r0, r31
     740:	f8 e4       	ldi	r31, 0x48	; 72
     742:	cf 2e       	mov	r12, r31
     744:	f1 e0       	ldi	r31, 0x01	; 1
     746:	df 2e       	mov	r13, r31
     748:	f0 2d       	mov	r31, r0
     74a:	f6 01       	movw	r30, r12
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     754:	80 ea       	ldi	r24, 0xA0	; 160
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("Pho[1]");
     75c:	89 e9       	ldi	r24, 0x99	; 153
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(Pho[1]);
     764:	0f 2e       	mov	r0, r31
     766:	fa e4       	ldi	r31, 0x4A	; 74
     768:	af 2e       	mov	r10, r31
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	bf 2e       	mov	r11, r31
     76e:	f0 2d       	mov	r31, r0
     770:	f5 01       	movw	r30, r10
     772:	80 81       	ld	r24, Z
     774:	91 81       	ldd	r25, Z+1	; 0x01
     776:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     77a:	86 e9       	ldi	r24, 0x96	; 150
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("Pho[2]");
     782:	8f e8       	ldi	r24, 0x8F	; 143
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(Pho[2]);
     78a:	cc e4       	ldi	r28, 0x4C	; 76
     78c:	d1 e0       	ldi	r29, 0x01	; 1
     78e:	88 81       	ld	r24, Y
     790:	99 81       	ldd	r25, Y+1	; 0x01
     792:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     796:	8c e8       	ldi	r24, 0x8C	; 140
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("Pho[3]");
     79e:	85 e8       	ldi	r24, 0x85	; 133
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(Pho[3]);
     7a6:	0e e4       	ldi	r16, 0x4E	; 78
     7a8:	11 e0       	ldi	r17, 0x01	; 1
     7aa:	f8 01       	movw	r30, r16
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7b4:	82 e8       	ldi	r24, 0x82	; 130
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("Pho[4]");
     7bc:	8b e7       	ldi	r24, 0x7B	; 123
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(Pho[4]);
     7c4:	80 91 50 01 	lds	r24, 0x0150
     7c8:	90 91 51 01 	lds	r25, 0x0151
     7cc:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7d0:	88 e7       	ldi	r24, 0x78	; 120
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("Pho[5]");
     7d8:	81 e7       	ldi	r24, 0x71	; 113
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(Pho[5]);
     7e0:	80 91 52 01 	lds	r24, 0x0152
     7e4:	90 91 53 01 	lds	r25, 0x0153
     7e8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     7ec:	8e e6       	ldi	r24, 0x6E	; 110
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("Pho[6]");
     7f4:	87 e6       	ldi	r24, 0x67	; 103
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(Pho[6]);
     7fc:	80 91 54 01 	lds	r24, 0x0154
     800:	90 91 55 01 	lds	r25, 0x0155
     804:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\r\n");
     808:	84 e6       	ldi	r24, 0x64	; 100
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_string("\r\n");
     810:	81 e6       	ldi	r24, 0x61	; 97
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	int mean024 = (Pho[0] + Pho[2])/3;
     818:	f6 01       	movw	r30, r12
     81a:	20 81       	ld	r18, Z
     81c:	31 81       	ldd	r19, Z+1	; 0x01
     81e:	88 81       	ld	r24, Y
     820:	99 81       	ldd	r25, Y+1	; 0x01
     822:	82 0f       	add	r24, r18
     824:	93 1f       	adc	r25, r19
     826:	23 e0       	ldi	r18, 0x03	; 3
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	b9 01       	movw	r22, r18
     82c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divmodhi4>
     830:	eb 01       	movw	r28, r22
     832:	6b 01       	movw	r12, r22
	int mean135 = (Pho[1] + Pho[3])/3;
     834:	f5 01       	movw	r30, r10
     836:	40 81       	ld	r20, Z
     838:	51 81       	ldd	r21, Z+1	; 0x01
     83a:	f8 01       	movw	r30, r16
     83c:	80 81       	ld	r24, Z
     83e:	91 81       	ldd	r25, Z+1	; 0x01
     840:	84 0f       	add	r24, r20
     842:	95 1f       	adc	r25, r21
     844:	b9 01       	movw	r22, r18
     846:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divmodhi4>
     84a:	8b 01       	movw	r16, r22
     84c:	5b 01       	movw	r10, r22
	
	m_usb_tx_string("mean024, mean135: ");
     84e:	8e e4       	ldi	r24, 0x4E	; 78
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(mean024);
     856:	ce 01       	movw	r24, r28
     858:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string(", ");
     85c:	8b e4       	ldi	r24, 0x4B	; 75
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(mean135);
     864:	c8 01       	movw	r24, r16
     866:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
     86a:	89 e4       	ldi	r24, 0x49	; 73
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	switch(state){
     872:	f2 e0       	ldi	r31, 0x02	; 2
     874:	ef 16       	cp	r14, r31
     876:	f1 04       	cpc	r15, r1
     878:	31 f0       	breq	.+12     	; 0x886 <findPuck+0x16e>
     87a:	45 e0       	ldi	r20, 0x05	; 5
     87c:	e4 16       	cp	r14, r20
     87e:	f1 04       	cpc	r15, r1
     880:	09 f4       	brne	.+2      	; 0x884 <findPuck+0x16c>
     882:	be c0       	rjmp	.+380    	; 0xa00 <findPuck+0x2e8>
     884:	14 c1       	rjmp	.+552    	; 0xaae <findPuck+0x396>
		case 2:
		if(mean024 - mean135> strThres || (mean024 > mean135 && Pho[4] > Pho[2]) ){
     886:	ce 01       	movw	r24, r28
     888:	80 1b       	sub	r24, r16
     88a:	91 0b       	sbc	r25, r17
     88c:	c3 97       	sbiw	r24, 0x33	; 51
     88e:	84 f4       	brge	.+32     	; 0x8b0 <findPuck+0x198>
     890:	0c 17       	cp	r16, r28
     892:	1d 07       	cpc	r17, r29
     894:	0c f0       	brlt	.+2      	; 0x898 <findPuck+0x180>
     896:	50 c0       	rjmp	.+160    	; 0x938 <findPuck+0x220>
     898:	20 91 50 01 	lds	r18, 0x0150
     89c:	30 91 51 01 	lds	r19, 0x0151
     8a0:	80 91 4c 01 	lds	r24, 0x014C
     8a4:	90 91 4d 01 	lds	r25, 0x014D
     8a8:	82 17       	cp	r24, r18
     8aa:	93 07       	cpc	r25, r19
     8ac:	0c f0       	brlt	.+2      	; 0x8b0 <findPuck+0x198>
     8ae:	44 c0       	rjmp	.+136    	; 0x938 <findPuck+0x220>
			m_usb_tx_string("turn left\n");
     8b0:	8e e3       	ldi	r24, 0x3E	; 62
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			if(mean024 > revThres){
     8b8:	59 e9       	ldi	r21, 0x99	; 153
     8ba:	c5 16       	cp	r12, r21
     8bc:	58 e0       	ldi	r21, 0x08	; 8
     8be:	d5 06       	cpc	r13, r21
     8c0:	6c f0       	brlt	.+26     	; 0x8dc <findPuck+0x1c4>
				set(PORTB, 0);
     8c2:	28 9a       	sbi	0x05, 0	; 5
				clear(PORTB, 1);
     8c4:	29 98       	cbi	0x05, 1	; 5
				OCR1C = full_speed;
     8c6:	8a e8       	ldi	r24, 0x8A	; 138
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	90 93 8d 00 	sts	0x008D, r25
     8ce:	80 93 8c 00 	sts	0x008C, r24
				OCR1B = full_speed;
     8d2:	90 93 8b 00 	sts	0x008B, r25
     8d6:	80 93 8a 00 	sts	0x008A, r24
     8da:	e9 c0       	rjmp	.+466    	; 0xaae <findPuck+0x396>
			}
			else{
				set(PORTB, 0);
     8dc:	28 9a       	sbi	0x05, 0	; 5
				set(PORTB, 1);
     8de:	29 9a       	sbi	0x05, 1	; 5
				OCR1C = full_speed - speed_diff_Pho;
     8e0:	8a e8       	ldi	r24, 0x8A	; 138
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	20 91 00 01 	lds	r18, 0x0100
     8e8:	30 91 01 01 	lds	r19, 0x0101
     8ec:	fc 01       	movw	r30, r24
     8ee:	e2 1b       	sub	r30, r18
     8f0:	f3 0b       	sbc	r31, r19
     8f2:	f0 93 8d 00 	sts	0x008D, r31
     8f6:	e0 93 8c 00 	sts	0x008C, r30
				OCR1B = full_speed;
     8fa:	90 93 8b 00 	sts	0x008B, r25
     8fe:	80 93 8a 00 	sts	0x008A, r24
				if(Pho[2]>Pho[4]){
     902:	20 91 4c 01 	lds	r18, 0x014C
     906:	30 91 4d 01 	lds	r19, 0x014D
     90a:	80 91 50 01 	lds	r24, 0x0150
     90e:	90 91 51 01 	lds	r25, 0x0151
     912:	82 17       	cp	r24, r18
     914:	93 07       	cpc	r25, r19
     916:	0c f0       	brlt	.+2      	; 0x91a <findPuck+0x202>
     918:	ca c0       	rjmp	.+404    	; 0xaae <findPuck+0x396>
					m_usb_tx_string("PID\n");
     91a:	89 e3       	ldi	r24, 0x39	; 57
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
					PID_Pho(Kp_Pho, Kd_Pho);
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e7       	ldi	r20, 0x70	; 112
     928:	51 e4       	ldi	r21, 0x41	; 65
     92a:	6a e9       	ldi	r22, 0x9A	; 154
     92c:	79 e9       	ldi	r23, 0x99	; 153
     92e:	89 e9       	ldi	r24, 0x99	; 153
     930:	9e e3       	ldi	r25, 0x3E	; 62
     932:	0e 94 29 02 	call	0x452	; 0x452 <PID_Pho>
     936:	bb c0       	rjmp	.+374    	; 0xaae <findPuck+0x396>
				}
			}
		}
		
		else {
			if (mean135 - mean024> strThres || (mean135 > mean024 && Pho[5] > Pho[3])){
     938:	0c 1b       	sub	r16, r28
     93a:	1d 0b       	sbc	r17, r29
     93c:	03 33       	cpi	r16, 0x33	; 51
     93e:	11 05       	cpc	r17, r1
     940:	84 f4       	brge	.+32     	; 0x962 <findPuck+0x24a>
     942:	ca 14       	cp	r12, r10
     944:	db 04       	cpc	r13, r11
     946:	0c f0       	brlt	.+2      	; 0x94a <findPuck+0x232>
     948:	50 c0       	rjmp	.+160    	; 0x9ea <findPuck+0x2d2>
     94a:	20 91 52 01 	lds	r18, 0x0152
     94e:	30 91 53 01 	lds	r19, 0x0153
     952:	80 91 4e 01 	lds	r24, 0x014E
     956:	90 91 4f 01 	lds	r25, 0x014F
     95a:	82 17       	cp	r24, r18
     95c:	93 07       	cpc	r25, r19
     95e:	0c f0       	brlt	.+2      	; 0x962 <findPuck+0x24a>
     960:	44 c0       	rjmp	.+136    	; 0x9ea <findPuck+0x2d2>
				m_usb_tx_string("turn right\n");
     962:	8d e2       	ldi	r24, 0x2D	; 45
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				if(mean135 > revThres){
     96a:	f9 e9       	ldi	r31, 0x99	; 153
     96c:	af 16       	cp	r10, r31
     96e:	f8 e0       	ldi	r31, 0x08	; 8
     970:	bf 06       	cpc	r11, r31
     972:	6c f0       	brlt	.+26     	; 0x98e <findPuck+0x276>
					set(PORTB, 1);
     974:	29 9a       	sbi	0x05, 1	; 5
					clear(PORTB, 0);
     976:	28 98       	cbi	0x05, 0	; 5
					OCR1B = full_speed;
     978:	8a e8       	ldi	r24, 0x8A	; 138
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	90 93 8b 00 	sts	0x008B, r25
     980:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed;
     984:	90 93 8d 00 	sts	0x008D, r25
     988:	80 93 8c 00 	sts	0x008C, r24
     98c:	90 c0       	rjmp	.+288    	; 0xaae <findPuck+0x396>
				}
				else{
					set(PORTB, 0);
     98e:	28 9a       	sbi	0x05, 0	; 5
					set(PORTB, 1);
     990:	29 9a       	sbi	0x05, 1	; 5
					OCR1B = full_speed - speed_diff_Pho;
     992:	8a e8       	ldi	r24, 0x8A	; 138
     994:	92 e0       	ldi	r25, 0x02	; 2
     996:	20 91 00 01 	lds	r18, 0x0100
     99a:	30 91 01 01 	lds	r19, 0x0101
     99e:	ac 01       	movw	r20, r24
     9a0:	42 1b       	sub	r20, r18
     9a2:	53 0b       	sbc	r21, r19
     9a4:	50 93 8b 00 	sts	0x008B, r21
     9a8:	40 93 8a 00 	sts	0x008A, r20
					OCR1C = full_speed;
     9ac:	90 93 8d 00 	sts	0x008D, r25
     9b0:	80 93 8c 00 	sts	0x008C, r24
					if(Pho[3]>Pho[5]){
     9b4:	20 91 4e 01 	lds	r18, 0x014E
     9b8:	30 91 4f 01 	lds	r19, 0x014F
     9bc:	80 91 52 01 	lds	r24, 0x0152
     9c0:	90 91 53 01 	lds	r25, 0x0153
     9c4:	82 17       	cp	r24, r18
     9c6:	93 07       	cpc	r25, r19
     9c8:	0c f0       	brlt	.+2      	; 0x9cc <findPuck+0x2b4>
     9ca:	71 c0       	rjmp	.+226    	; 0xaae <findPuck+0x396>
						m_usb_tx_string("PID\n");
     9cc:	88 e2       	ldi	r24, 0x28	; 40
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
						PID_Pho(Kp_Pho, Kd_Pho);
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	40 e7       	ldi	r20, 0x70	; 112
     9da:	51 e4       	ldi	r21, 0x41	; 65
     9dc:	6a e9       	ldi	r22, 0x9A	; 154
     9de:	79 e9       	ldi	r23, 0x99	; 153
     9e0:	89 e9       	ldi	r24, 0x99	; 153
     9e2:	9e e3       	ldi	r25, 0x3E	; 62
     9e4:	0e 94 29 02 	call	0x452	; 0x452 <PID_Pho>
     9e8:	62 c0       	rjmp	.+196    	; 0xaae <findPuck+0x396>
					}
				}
			}
			else{
				PID_Pho(Kp_Pho, Kd_Pho);
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e7       	ldi	r20, 0x70	; 112
     9f0:	51 e4       	ldi	r21, 0x41	; 65
     9f2:	6a e9       	ldi	r22, 0x9A	; 154
     9f4:	79 e9       	ldi	r23, 0x99	; 153
     9f6:	89 e9       	ldi	r24, 0x99	; 153
     9f8:	9e e3       	ldi	r25, 0x3E	; 62
     9fa:	0e 94 29 02 	call	0x452	; 0x452 <PID_Pho>
     9fe:	57 c0       	rjmp	.+174    	; 0xaae <findPuck+0x396>
			}
		}
		break;
		case 5:
		if(mean024 - mean135 > strThres){
     a00:	ce 01       	movw	r24, r28
     a02:	80 1b       	sub	r24, r16
     a04:	91 0b       	sbc	r25, r17
     a06:	c3 97       	sbiw	r24, 0x33	; 51
     a08:	3c f1       	brlt	.+78     	; 0xa58 <findPuck+0x340>
			m_usb_tx_string("turn left\n");
     a0a:	8d e1       	ldi	r24, 0x1D	; 29
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			set(PORTB, 0);
     a12:	28 9a       	sbi	0x05, 0	; 5
			clear(PORTB, 1);
     a14:	29 98       	cbi	0x05, 1	; 5
			if (Pho[2] > Pho[4]){
     a16:	20 91 4c 01 	lds	r18, 0x014C
     a1a:	30 91 4d 01 	lds	r19, 0x014D
     a1e:	80 91 50 01 	lds	r24, 0x0150
     a22:	90 91 51 01 	lds	r25, 0x0151
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	5c f4       	brge	.+22     	; 0xa42 <findPuck+0x32a>
				PID_stalk(Kp_stalk, Kd_stalk);
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e4       	ldi	r21, 0x40	; 64
     a34:	6d ec       	ldi	r22, 0xCD	; 205
     a36:	7c ec       	ldi	r23, 0xCC	; 204
     a38:	8c e4       	ldi	r24, 0x4C	; 76
     a3a:	9f e3       	ldi	r25, 0x3F	; 63
     a3c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <PID_stalk>
     a40:	36 c0       	rjmp	.+108    	; 0xaae <findPuck+0x396>
			}
			else{
				OCR1B = full_speed_stalk;
     a42:	8a e8       	ldi	r24, 0x8A	; 138
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	90 93 8b 00 	sts	0x008B, r25
     a4a:	80 93 8a 00 	sts	0x008A, r24
				OCR1C = full_speed_stalk;
     a4e:	90 93 8d 00 	sts	0x008D, r25
     a52:	80 93 8c 00 	sts	0x008C, r24
     a56:	2b c0       	rjmp	.+86     	; 0xaae <findPuck+0x396>
			}
		}
		else{
			if(mean135 - mean024 > strThres){
     a58:	0c 1b       	sub	r16, r28
     a5a:	1d 0b       	sbc	r17, r29
     a5c:	03 33       	cpi	r16, 0x33	; 51
     a5e:	11 05       	cpc	r17, r1
     a60:	34 f1       	brlt	.+76     	; 0xaae <findPuck+0x396>
				m_usb_tx_string("turn right\n");
     a62:	81 e1       	ldi	r24, 0x11	; 17
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				clear(PORTB, 0);
     a6a:	28 98       	cbi	0x05, 0	; 5
				set(PORTB, 1);
     a6c:	29 9a       	sbi	0x05, 1	; 5
				if (Pho[3] > Pho[5]){
     a6e:	20 91 4e 01 	lds	r18, 0x014E
     a72:	30 91 4f 01 	lds	r19, 0x014F
     a76:	80 91 52 01 	lds	r24, 0x0152
     a7a:	90 91 53 01 	lds	r25, 0x0153
     a7e:	82 17       	cp	r24, r18
     a80:	93 07       	cpc	r25, r19
     a82:	5c f4       	brge	.+22     	; 0xa9a <findPuck+0x382>
					PID_stalk(Kp_stalk, Kd_stalk);
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e4       	ldi	r21, 0x40	; 64
     a8c:	6d ec       	ldi	r22, 0xCD	; 205
     a8e:	7c ec       	ldi	r23, 0xCC	; 204
     a90:	8c e4       	ldi	r24, 0x4C	; 76
     a92:	9f e3       	ldi	r25, 0x3F	; 63
     a94:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <PID_stalk>
     a98:	0a c0       	rjmp	.+20     	; 0xaae <findPuck+0x396>
				}
				else{
					OCR1B = full_speed_stalk;
     a9a:	8a e8       	ldi	r24, 0x8A	; 138
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	90 93 8b 00 	sts	0x008B, r25
     aa2:	80 93 8a 00 	sts	0x008A, r24
					OCR1C = full_speed_stalk;
     aa6:	90 93 8d 00 	sts	0x008D, r25
     aaa:	80 93 8c 00 	sts	0x008C, r24
		break;
		default:
		break;
	}
	
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	08 95       	ret

00000ac4 <__vector_29>:
		OCR1C = abs(output);
		OCR1B = abs(output);
	}
}

ISR(ADC_vect){
     ac4:	1f 92       	push	r1
     ac6:	0f 92       	push	r0
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	0f 92       	push	r0
     acc:	11 24       	eor	r1, r1
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	4f 93       	push	r20
     ae4:	5f 93       	push	r21
     ae6:	6f 93       	push	r22
     ae8:	7f 93       	push	r23
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	af 93       	push	r26
     af0:	bf 93       	push	r27
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
     afa:	c0 91 46 01 	lds	r28, 0x0146
     afe:	d0 91 47 01 	lds	r29, 0x0147
     b02:	a0 90 78 00 	lds	r10, 0x0078
     b06:	b0 90 79 00 	lds	r11, 0x0079
     b0a:	8e 01       	movw	r16, r28
     b0c:	00 0f       	add	r16, r16
     b0e:	11 1f       	adc	r17, r17
     b10:	08 5b       	subi	r16, 0xB8	; 184
     b12:	1e 4f       	sbci	r17, 0xFE	; 254
     b14:	f8 01       	movw	r30, r16
     b16:	60 81       	ld	r22, Z
     b18:	71 81       	ldd	r23, Z+1	; 0x01
     b1a:	88 27       	eor	r24, r24
     b1c:	77 fd       	sbrc	r23, 7
     b1e:	80 95       	com	r24
     b20:	98 2f       	mov	r25, r24
     b22:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
     b26:	2d ec       	ldi	r18, 0xCD	; 205
     b28:	3c ec       	ldi	r19, 0xCC	; 204
     b2a:	4c e4       	ldi	r20, 0x4C	; 76
     b2c:	5f e3       	ldi	r21, 0x3F	; 63
     b2e:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     b32:	6b 01       	movw	r12, r22
     b34:	7c 01       	movw	r14, r24
     b36:	b5 01       	movw	r22, r10
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
     b40:	2c ec       	ldi	r18, 0xCC	; 204
     b42:	3c ec       	ldi	r19, 0xCC	; 204
     b44:	4c e4       	ldi	r20, 0x4C	; 76
     b46:	5e e3       	ldi	r21, 0x3E	; 62
     b48:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	c7 01       	movw	r24, r14
     b52:	b6 01       	movw	r22, r12
     b54:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
     b58:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
     b5c:	f8 01       	movw	r30, r16
     b5e:	71 83       	std	Z+1, r23	; 0x01
     b60:	60 83       	st	Z, r22
	
	i = i + 1;
     b62:	21 96       	adiw	r28, 0x01	; 1
	if(i > 7){
     b64:	c8 30       	cpi	r28, 0x08	; 8
     b66:	d1 05       	cpc	r29, r1
     b68:	2c f4       	brge	.+10     	; 0xb74 <__stack+0x75>
}

ISR(ADC_vect){
	Pho[i] = beta * Pho[i] + (1- beta) * ADC;
	
	i = i + 1;
     b6a:	d0 93 47 01 	sts	0x0147, r29
     b6e:	c0 93 46 01 	sts	0x0146, r28
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <__stack+0x7d>
	if(i > 7){
		i = 0;
     b74:	10 92 47 01 	sts	0x0147, r1
     b78:	10 92 46 01 	sts	0x0146, r1
	}
	
	clear(ADCSRA, ADEN);
     b7c:	ea e7       	ldi	r30, 0x7A	; 122
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 77       	andi	r24, 0x7F	; 127
     b84:	80 83       	st	Z, r24
	switch(i){
     b86:	80 91 46 01 	lds	r24, 0x0146
     b8a:	90 91 47 01 	lds	r25, 0x0147
     b8e:	87 30       	cpi	r24, 0x07	; 7
     b90:	91 05       	cpc	r25, r1
     b92:	08 f0       	brcs	.+2      	; 0xb96 <__stack+0x97>
     b94:	7b c0       	rjmp	.+246    	; 0xc8c <__stack+0x18d>
     b96:	fc 01       	movw	r30, r24
     b98:	ea 5a       	subi	r30, 0xAA	; 170
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__tablejump2__>
		case 0:
		clear(ADCSRB,MUX5);//select F0 as analog input
     ba0:	eb e7       	ldi	r30, 0x7B	; 123
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7d       	andi	r24, 0xDF	; 223
     ba8:	80 83       	st	Z, r24
		clear(ADMUX,MUX2);
     baa:	ec e7       	ldi	r30, 0x7C	; 124
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	8b 7f       	andi	r24, 0xFB	; 251
     bb2:	80 83       	st	Z, r24
		clear(ADMUX,MUX1);
     bb4:	80 81       	ld	r24, Z
     bb6:	8d 7f       	andi	r24, 0xFD	; 253
     bb8:	80 83       	st	Z, r24
		clear(ADMUX,MUX0);
     bba:	80 81       	ld	r24, Z
     bbc:	8e 7f       	andi	r24, 0xFE	; 254
     bbe:	80 83       	st	Z, r24
		break;
     bc0:	65 c0       	rjmp	.+202    	; 0xc8c <__stack+0x18d>
		case 1:
		clear(ADCSRB,MUX5);//select F1 as analog input
     bc2:	eb e7       	ldi	r30, 0x7B	; 123
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7d       	andi	r24, 0xDF	; 223
     bca:	80 83       	st	Z, r24
		clear(ADMUX,MUX2);
     bcc:	ec e7       	ldi	r30, 0x7C	; 124
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8b 7f       	andi	r24, 0xFB	; 251
     bd4:	80 83       	st	Z, r24
		clear(ADMUX,MUX1);
     bd6:	80 81       	ld	r24, Z
     bd8:	8d 7f       	andi	r24, 0xFD	; 253
     bda:	80 83       	st	Z, r24
		set(ADMUX,MUX0);
     bdc:	80 81       	ld	r24, Z
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	80 83       	st	Z, r24
		break;
     be2:	54 c0       	rjmp	.+168    	; 0xc8c <__stack+0x18d>
		case 2:
		set(ADCSRB,MUX5);//select D6 as analog input
     be4:	eb e7       	ldi	r30, 0x7B	; 123
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 62       	ori	r24, 0x20	; 32
     bec:	80 83       	st	Z, r24
		clear(ADMUX,MUX2);
     bee:	ec e7       	ldi	r30, 0x7C	; 124
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8b 7f       	andi	r24, 0xFB	; 251
     bf6:	80 83       	st	Z, r24
		clear(ADMUX,MUX1);
     bf8:	80 81       	ld	r24, Z
     bfa:	8d 7f       	andi	r24, 0xFD	; 253
     bfc:	80 83       	st	Z, r24
		set(ADMUX,MUX0);
     bfe:	80 81       	ld	r24, Z
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	80 83       	st	Z, r24
		break;
     c04:	43 c0       	rjmp	.+134    	; 0xc8c <__stack+0x18d>
		case 3:
		set(ADCSRB,MUX5);//select D7 as analog input
     c06:	eb e7       	ldi	r30, 0x7B	; 123
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 62       	ori	r24, 0x20	; 32
     c0e:	80 83       	st	Z, r24
		clear(ADMUX,MUX2);
     c10:	ec e7       	ldi	r30, 0x7C	; 124
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8b 7f       	andi	r24, 0xFB	; 251
     c18:	80 83       	st	Z, r24
		set(ADMUX,MUX1);
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	80 83       	st	Z, r24
		clear(ADMUX,MUX0);
     c20:	80 81       	ld	r24, Z
     c22:	8e 7f       	andi	r24, 0xFE	; 254
     c24:	80 83       	st	Z, r24
		break;
     c26:	32 c0       	rjmp	.+100    	; 0xc8c <__stack+0x18d>
		case 4:
		set(ADCSRB,MUX5);//select B4 as analog input
     c28:	eb e7       	ldi	r30, 0x7B	; 123
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 62       	ori	r24, 0x20	; 32
     c30:	80 83       	st	Z, r24
		clear(ADMUX,MUX2);
     c32:	ec e7       	ldi	r30, 0x7C	; 124
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8b 7f       	andi	r24, 0xFB	; 251
     c3a:	80 83       	st	Z, r24
		set(ADMUX,MUX1);
     c3c:	80 81       	ld	r24, Z
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	80 83       	st	Z, r24
		set(ADMUX,MUX0);
     c42:	80 81       	ld	r24, Z
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	80 83       	st	Z, r24
		break;
     c48:	21 c0       	rjmp	.+66     	; 0xc8c <__stack+0x18d>
		case 5:
		set(ADCSRB,MUX5);//select B5 as analog input
     c4a:	eb e7       	ldi	r30, 0x7B	; 123
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	80 62       	ori	r24, 0x20	; 32
     c52:	80 83       	st	Z, r24
		set(ADMUX,MUX2);
     c54:	ec e7       	ldi	r30, 0x7C	; 124
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	84 60       	ori	r24, 0x04	; 4
     c5c:	80 83       	st	Z, r24
		clear(ADMUX,MUX1);
     c5e:	80 81       	ld	r24, Z
     c60:	8d 7f       	andi	r24, 0xFD	; 253
     c62:	80 83       	st	Z, r24
		clear(ADMUX,MUX0);
     c64:	80 81       	ld	r24, Z
     c66:	8e 7f       	andi	r24, 0xFE	; 254
     c68:	80 83       	st	Z, r24
		break;
     c6a:	10 c0       	rjmp	.+32     	; 0xc8c <__stack+0x18d>
		case 6:
		set(ADCSRB,MUX5);//select D4 as analog input
     c6c:	eb e7       	ldi	r30, 0x7B	; 123
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 62       	ori	r24, 0x20	; 32
     c74:	80 83       	st	Z, r24
		clear(ADMUX,MUX2);
     c76:	ec e7       	ldi	r30, 0x7C	; 124
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8b 7f       	andi	r24, 0xFB	; 251
     c7e:	80 83       	st	Z, r24
		clear(ADMUX,MUX1);
     c80:	80 81       	ld	r24, Z
     c82:	8d 7f       	andi	r24, 0xFD	; 253
     c84:	80 83       	st	Z, r24
		clear(ADMUX,MUX0);
     c86:	80 81       	ld	r24, Z
     c88:	8e 7f       	andi	r24, 0xFE	; 254
     c8a:	80 83       	st	Z, r24
		break;
	}
	set(ADCSRA, ADEN);
     c8c:	ea e7       	ldi	r30, 0x7A	; 122
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
     c96:	80 81       	ld	r24, Z
     c98:	80 64       	ori	r24, 0x40	; 64
     c9a:	80 83       	st	Z, r24
	
}
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <deterState>:

void deterState(int *state){
	if (*state == 2 || *state == 3){
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 81       	ld	r18, Z
     cd6:	31 81       	ldd	r19, Z+1	; 0x01
     cd8:	22 50       	subi	r18, 0x02	; 2
     cda:	31 09       	sbc	r19, r1
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	f0 f4       	brcc	.+60     	; 0xd1e <deterState+0x4c>
		if (Pho[6] >gotThres){
     ce2:	20 91 54 01 	lds	r18, 0x0154
     ce6:	30 91 55 01 	lds	r19, 0x0155
     cea:	23 3e       	cpi	r18, 0xE3	; 227
     cec:	f3 e0       	ldi	r31, 0x03	; 3
     cee:	3f 07       	cpc	r19, r31
     cf0:	54 f0       	brlt	.+20     	; 0xd06 <deterState+0x34>
			
			*state = 3;
     cf2:	23 e0       	ldi	r18, 0x03	; 3
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	31 83       	std	Z+1, r19	; 0x01
     cfa:	20 83       	st	Z, r18
			
			m_usb_tx_string("got the puck!\n");
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
     d04:	08 95       	ret
			
		}
		else{
			if(Pho[6] < loseThres){
     d06:	24 38       	cpi	r18, 0x84	; 132
     d08:	33 40       	sbci	r19, 0x03	; 3
     d0a:	4c f4       	brge	.+18     	; 0xd1e <deterState+0x4c>
				*state = 2;
     d0c:	22 e0       	ldi	r18, 0x02	; 2
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	fc 01       	movw	r30, r24
     d12:	31 83       	std	Z+1, r19	; 0x01
     d14:	20 83       	st	Z, r18
				m_usb_tx_string("lost the puck!\n");
     d16:	82 ef       	ldi	r24, 0xF2	; 242
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
     d1e:	08 95       	ret

00000d20 <ifGotoPuck>:
			}
		}
	}
}

void ifGotoPuck(int *state, float *dir){
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
     d32:	8b 01       	movw	r16, r22
	if(Pho[0] + Pho[1] + Pho[2] + Pho[3] > atkThres - 1500*abs(dir[1])){
     d34:	60 91 48 01 	lds	r22, 0x0148
     d38:	70 91 49 01 	lds	r23, 0x0149
     d3c:	80 91 4a 01 	lds	r24, 0x014A
     d40:	90 91 4b 01 	lds	r25, 0x014B
     d44:	68 0f       	add	r22, r24
     d46:	79 1f       	adc	r23, r25
     d48:	80 91 4c 01 	lds	r24, 0x014C
     d4c:	90 91 4d 01 	lds	r25, 0x014D
     d50:	68 0f       	add	r22, r24
     d52:	79 1f       	adc	r23, r25
     d54:	80 91 4e 01 	lds	r24, 0x014E
     d58:	90 91 4f 01 	lds	r25, 0x014F
     d5c:	68 0f       	add	r22, r24
     d5e:	79 1f       	adc	r23, r25
     d60:	88 27       	eor	r24, r24
     d62:	77 fd       	sbrc	r23, 7
     d64:	80 95       	com	r24
     d66:	98 2f       	mov	r25, r24
     d68:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
     d6c:	6b 01       	movw	r12, r22
     d6e:	7c 01       	movw	r14, r24
     d70:	f8 01       	movw	r30, r16
     d72:	64 81       	ldd	r22, Z+4	; 0x04
     d74:	75 81       	ldd	r23, Z+5	; 0x05
     d76:	86 81       	ldd	r24, Z+6	; 0x06
     d78:	97 81       	ldd	r25, Z+7	; 0x07
     d7a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
     d7e:	ab 01       	movw	r20, r22
     d80:	77 23       	and	r23, r23
     d82:	24 f4       	brge	.+8      	; 0xd8c <ifGotoPuck+0x6c>
     d84:	44 27       	eor	r20, r20
     d86:	55 27       	eor	r21, r21
     d88:	46 1b       	sub	r20, r22
     d8a:	57 0b       	sbc	r21, r23
     d8c:	2c ed       	ldi	r18, 0xDC	; 220
     d8e:	35 e0       	ldi	r19, 0x05	; 5
     d90:	42 9f       	mul	r20, r18
     d92:	b0 01       	movw	r22, r0
     d94:	43 9f       	mul	r20, r19
     d96:	70 0d       	add	r23, r0
     d98:	52 9f       	mul	r21, r18
     d9a:	70 0d       	add	r23, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	88 27       	eor	r24, r24
     da0:	77 fd       	sbrc	r23, 7
     da2:	80 95       	com	r24
     da4:	98 2f       	mov	r25, r24
     da6:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
     daa:	9b 01       	movw	r18, r22
     dac:	ac 01       	movw	r20, r24
     dae:	60 91 02 01 	lds	r22, 0x0102
     db2:	70 91 03 01 	lds	r23, 0x0103
     db6:	80 91 04 01 	lds	r24, 0x0104
     dba:	90 91 05 01 	lds	r25, 0x0105
     dbe:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	c7 01       	movw	r24, r14
     dc8:	b6 01       	movw	r22, r12
     dca:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__gesf2>
     dce:	18 16       	cp	r1, r24
     dd0:	24 f4       	brge	.+8      	; 0xdda <ifGotoPuck+0xba>
		*state = 2;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	99 83       	std	Y+1, r25	; 0x01
     dd8:	88 83       	st	Y, r24
	}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	cf 90       	pop	r12
     dea:	08 95       	ret

00000dec <find_sign>:
	m_usb_tx_string("	vy: 0.");
	m_usb_tx_int(dir[1]*1000);
	m_usb_tx_string("\n");
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     dec:	4f 92       	push	r4
     dee:	5f 92       	push	r5
     df0:	6f 92       	push	r6
     df2:	7f 92       	push	r7
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	60 97       	sbiw	r28, 0x10	; 16
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	2b 01       	movw	r4, r22
     e1e:	3c 01       	movw	r6, r24
     e20:	2d 83       	std	Y+5, r18	; 0x05
     e22:	3e 83       	std	Y+6, r19	; 0x06
     e24:	4f 83       	std	Y+7, r20	; 0x07
     e26:	58 87       	std	Y+8, r21	; 0x08
     e28:	58 01       	movw	r10, r16
     e2a:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     e2c:	d5 01       	movw	r26, r10
     e2e:	cd 90       	ld	r12, X+
     e30:	dd 90       	ld	r13, X+
     e32:	ed 90       	ld	r14, X+
     e34:	fc 90       	ld	r15, X
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	c7 01       	movw	r24, r14
     e3c:	b6 01       	movw	r22, r12
     e3e:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     e42:	f8 01       	movw	r30, r16
     e44:	20 81       	ld	r18, Z
     e46:	31 81       	ldd	r19, Z+1	; 0x01
     e48:	42 81       	ldd	r20, Z+2	; 0x02
     e4a:	53 81       	ldd	r21, Z+3	; 0x03
     e4c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
     e50:	69 87       	std	Y+9, r22	; 0x09
     e52:	7a 87       	std	Y+10, r23	; 0x0a
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	d5 01       	movw	r26, r10
     e5a:	14 96       	adiw	r26, 0x04	; 4
     e5c:	8d 91       	ld	r24, X+
     e5e:	9d 91       	ld	r25, X+
     e60:	0d 90       	ld	r0, X+
     e62:	bc 91       	ld	r27, X
     e64:	a0 2d       	mov	r26, r0
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	ab 83       	std	Y+3, r26	; 0x03
     e6c:	bc 83       	std	Y+4, r27	; 0x04
     e6e:	2d 81       	ldd	r18, Y+5	; 0x05
     e70:	3e 81       	ldd	r19, Y+6	; 0x06
     e72:	4f 81       	ldd	r20, Y+7	; 0x07
     e74:	58 85       	ldd	r21, Y+8	; 0x08
     e76:	bc 01       	movw	r22, r24
     e78:	cd 01       	movw	r24, r26
     e7a:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     e7e:	6d 87       	std	Y+13, r22	; 0x0d
     e80:	7e 87       	std	Y+14, r23	; 0x0e
     e82:	8f 87       	std	Y+15, r24	; 0x0f
     e84:	98 8b       	std	Y+16, r25	; 0x10
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	69 85       	ldd	r22, Y+9	; 0x09
     e8c:	7a 85       	ldd	r23, Y+10	; 0x0a
     e8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e90:	9c 85       	ldd	r25, Y+12	; 0x0c
     e92:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
     e96:	4b 01       	movw	r8, r22
     e98:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     e9a:	29 81       	ldd	r18, Y+1	; 0x01
     e9c:	3a 81       	ldd	r19, Y+2	; 0x02
     e9e:	4b 81       	ldd	r20, Y+3	; 0x03
     ea0:	5c 81       	ldd	r21, Y+4	; 0x04
     ea2:	c3 01       	movw	r24, r6
     ea4:	b2 01       	movw	r22, r4
     ea6:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     eaa:	f8 01       	movw	r30, r16
     eac:	24 81       	ldd	r18, Z+4	; 0x04
     eae:	35 81       	ldd	r19, Z+5	; 0x05
     eb0:	46 81       	ldd	r20, Z+6	; 0x06
     eb2:	57 81       	ldd	r21, Z+7	; 0x07
     eb4:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
     eb8:	2b 01       	movw	r4, r22
     eba:	3c 01       	movw	r6, r24
     ebc:	2d 81       	ldd	r18, Y+5	; 0x05
     ebe:	3e 81       	ldd	r19, Y+6	; 0x06
     ec0:	4f 81       	ldd	r20, Y+7	; 0x07
     ec2:	58 85       	ldd	r21, Y+8	; 0x08
     ec4:	c7 01       	movw	r24, r14
     ec6:	b6 01       	movw	r22, r12
     ec8:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     ecc:	69 83       	std	Y+1, r22	; 0x01
     ece:	7a 83       	std	Y+2, r23	; 0x02
     ed0:	8b 83       	std	Y+3, r24	; 0x03
     ed2:	9c 83       	std	Y+4, r25	; 0x04
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	c3 01       	movw	r24, r6
     eda:	b2 01       	movw	r22, r4
     edc:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
     ee0:	6b 01       	movw	r12, r22
     ee2:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     ee4:	2d 85       	ldd	r18, Y+13	; 0x0d
     ee6:	3e 85       	ldd	r19, Y+14	; 0x0e
     ee8:	4f 85       	ldd	r20, Y+15	; 0x0f
     eea:	58 89       	ldd	r21, Y+16	; 0x10
     eec:	69 85       	ldd	r22, Y+9	; 0x09
     eee:	7a 85       	ldd	r23, Y+10	; 0x0a
     ef0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef4:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
     ef8:	6d 83       	std	Y+5, r22	; 0x05
     efa:	7e 83       	std	Y+6, r23	; 0x06
     efc:	8f 83       	std	Y+7, r24	; 0x07
     efe:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     f00:	29 81       	ldd	r18, Y+1	; 0x01
     f02:	3a 81       	ldd	r19, Y+2	; 0x02
     f04:	4b 81       	ldd	r20, Y+3	; 0x03
     f06:	5c 81       	ldd	r21, Y+4	; 0x04
     f08:	c3 01       	movw	r24, r6
     f0a:	b2 01       	movw	r22, r4
     f0c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
     f10:	2b 01       	movw	r4, r22
     f12:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     f14:	a5 01       	movw	r20, r10
     f16:	94 01       	movw	r18, r8
     f18:	c5 01       	movw	r24, r10
     f1a:	b4 01       	movw	r22, r8
     f1c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     f20:	4b 01       	movw	r8, r22
     f22:	5c 01       	movw	r10, r24
     f24:	a7 01       	movw	r20, r14
     f26:	96 01       	movw	r18, r12
     f28:	c7 01       	movw	r24, r14
     f2a:	b6 01       	movw	r22, r12
     f2c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     f30:	9b 01       	movw	r18, r22
     f32:	ac 01       	movw	r20, r24
     f34:	c5 01       	movw	r24, r10
     f36:	b4 01       	movw	r22, r8
     f38:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
     f3c:	6b 01       	movw	r12, r22
     f3e:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     f40:	2d 81       	ldd	r18, Y+5	; 0x05
     f42:	3e 81       	ldd	r19, Y+6	; 0x06
     f44:	4f 81       	ldd	r20, Y+7	; 0x07
     f46:	58 85       	ldd	r21, Y+8	; 0x08
     f48:	ca 01       	movw	r24, r20
     f4a:	b9 01       	movw	r22, r18
     f4c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     f50:	4b 01       	movw	r8, r22
     f52:	5c 01       	movw	r10, r24
     f54:	a3 01       	movw	r20, r6
     f56:	92 01       	movw	r18, r4
     f58:	c3 01       	movw	r24, r6
     f5a:	b2 01       	movw	r22, r4
     f5c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	c5 01       	movw	r24, r10
     f66:	b4 01       	movw	r22, r8
     f68:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
     f6c:	9b 01       	movw	r18, r22
     f6e:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     f70:	01 e0       	ldi	r16, 0x01	; 1
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
     f7c:	88 23       	and	r24, r24
     f7e:	14 f0       	brlt	.+4      	; 0xf84 <find_sign+0x198>
     f80:	00 e0       	ldi	r16, 0x00	; 0
     f82:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     f84:	c8 01       	movw	r24, r16
     f86:	60 96       	adiw	r28, 0x10	; 16
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	df 90       	pop	r13
     fa0:	cf 90       	pop	r12
     fa2:	bf 90       	pop	r11
     fa4:	af 90       	pop	r10
     fa6:	9f 90       	pop	r9
     fa8:	8f 90       	pop	r8
     faa:	7f 90       	pop	r7
     fac:	6f 90       	pop	r6
     fae:	5f 90       	pop	r5
     fb0:	4f 90       	pop	r4
     fb2:	08 95       	ret

00000fb4 <cal_angle>:

void cal_angle(int if_pos_sign, float sintheta, float costheta, float *goal ,float *c_wii, float *dir){
     fb4:	2f 92       	push	r2
     fb6:	3f 92       	push	r3
     fb8:	4f 92       	push	r4
     fba:	5f 92       	push	r5
     fbc:	6f 92       	push	r6
     fbe:	7f 92       	push	r7
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	28 97       	sbiw	r28, 0x08	; 8
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	1c 01       	movw	r2, r24
     fea:	49 83       	std	Y+1, r20	; 0x01
     fec:	5a 83       	std	Y+2, r21	; 0x02
     fee:	6b 83       	std	Y+3, r22	; 0x03
     ff0:	7c 83       	std	Y+4, r23	; 0x04
     ff2:	0d 83       	std	Y+5, r16	; 0x05
     ff4:	1e 83       	std	Y+6, r17	; 0x06
     ff6:	2f 83       	std	Y+7, r18	; 0x07
     ff8:	38 87       	std	Y+8, r19	; 0x08
     ffa:	85 01       	movw	r16, r10
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     ffc:	f6 01       	movw	r30, r12
     ffe:	20 81       	ld	r18, Z
    1000:	31 81       	ldd	r19, Z+1	; 0x01
    1002:	42 81       	ldd	r20, Z+2	; 0x02
    1004:	53 81       	ldd	r21, Z+3	; 0x03
    1006:	f7 01       	movw	r30, r14
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    1014:	4b 01       	movw	r8, r22
    1016:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
    1018:	f6 01       	movw	r30, r12
    101a:	24 81       	ldd	r18, Z+4	; 0x04
    101c:	35 81       	ldd	r19, Z+5	; 0x05
    101e:	46 81       	ldd	r20, Z+6	; 0x06
    1020:	57 81       	ldd	r21, Z+7	; 0x07
    1022:	f7 01       	movw	r30, r14
    1024:	64 81       	ldd	r22, Z+4	; 0x04
    1026:	75 81       	ldd	r23, Z+5	; 0x05
    1028:	86 81       	ldd	r24, Z+6	; 0x06
    102a:	97 81       	ldd	r25, Z+7	; 0x07
    102c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    1030:	6b 01       	movw	r12, r22
    1032:	7c 01       	movw	r14, r24

	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
    1034:	a5 01       	movw	r20, r10
    1036:	94 01       	movw	r18, r8
    1038:	c5 01       	movw	r24, r10
    103a:	b4 01       	movw	r22, r8
    103c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1040:	2b 01       	movw	r4, r22
    1042:	3c 01       	movw	r6, r24
    1044:	a7 01       	movw	r20, r14
    1046:	96 01       	movw	r18, r12
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	c3 01       	movw	r24, r6
    1056:	b2 01       	movw	r22, r4
    1058:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
    105c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <sqrt>
    1060:	2b 01       	movw	r4, r22
    1062:	3c 01       	movw	r6, r24
    1064:	9b 01       	movw	r18, r22
    1066:	ac 01       	movw	r20, r24
    1068:	c5 01       	movw	r24, r10
    106a:	b4 01       	movw	r22, r8
    106c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divsf3>
    1070:	4b 01       	movw	r8, r22
    1072:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
    1074:	a3 01       	movw	r20, r6
    1076:	92 01       	movw	r18, r4
    1078:	c7 01       	movw	r24, r14
    107a:	b6 01       	movw	r22, r12
    107c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divsf3>
    1080:	6b 01       	movw	r12, r22
    1082:	7c 01       	movw	r14, r24

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
    1084:	f8 01       	movw	r30, r16
    1086:	20 81       	ld	r18, Z
    1088:	31 81       	ldd	r19, Z+1	; 0x01
    108a:	42 81       	ldd	r20, Z+2	; 0x02
    108c:	53 81       	ldd	r21, Z+3	; 0x03
    108e:	c5 01       	movw	r24, r10
    1090:	b4 01       	movw	r22, r8
    1092:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1096:	2b 01       	movw	r4, r22
    1098:	3c 01       	movw	r6, r24
    109a:	f8 01       	movw	r30, r16
    109c:	24 81       	ldd	r18, Z+4	; 0x04
    109e:	35 81       	ldd	r19, Z+5	; 0x05
    10a0:	46 81       	ldd	r20, Z+6	; 0x06
    10a2:	57 81       	ldd	r21, Z+7	; 0x07
    10a4:	c7 01       	movw	r24, r14
    10a6:	b6 01       	movw	r22, r12
    10a8:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	c3 01       	movw	r24, r6
    10b2:	b2 01       	movw	r22, r4
    10b4:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
	alpha = acos(cos_alpha);
    10b8:	0e 94 04 1b 	call	0x3608	; 0x3608 <acos>
    10bc:	2b 01       	movw	r4, r22
    10be:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
    10c0:	2a 94       	dec	r2
    10c2:	23 28       	or	r2, r3
    10c4:	d1 f4       	brne	.+52     	; 0x10fa <cal_angle+0x146>
		c2g_wx = -costheta*c2g[1] + sintheta*c2g[0];
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ca:	4f 81       	ldd	r20, Y+7	; 0x07
    10cc:	58 85       	ldd	r21, Y+8	; 0x08
    10ce:	50 58       	subi	r21, 0x80	; 128
    10d0:	c7 01       	movw	r24, r14
    10d2:	b6 01       	movw	r22, r12
    10d4:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    10d8:	6b 01       	movw	r12, r22
    10da:	7c 01       	movw	r14, r24
    10dc:	29 81       	ldd	r18, Y+1	; 0x01
    10de:	3a 81       	ldd	r19, Y+2	; 0x02
    10e0:	4b 81       	ldd	r20, Y+3	; 0x03
    10e2:	5c 81       	ldd	r21, Y+4	; 0x04
    10e4:	c5 01       	movw	r24, r10
    10e6:	b4 01       	movw	r22, r8
    10e8:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    10ec:	9b 01       	movw	r18, r22
    10ee:	ac 01       	movw	r20, r24
    10f0:	c7 01       	movw	r24, r14
    10f2:	b6 01       	movw	r22, r12
    10f4:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <cal_angle+0x178>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1100:	58 85       	ldd	r21, Y+8	; 0x08
    1102:	50 58       	subi	r21, 0x80	; 128
    1104:	c7 01       	movw	r24, r14
    1106:	b6 01       	movw	r22, r12
    1108:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    110c:	6b 01       	movw	r12, r22
    110e:	7c 01       	movw	r14, r24
    1110:	29 81       	ldd	r18, Y+1	; 0x01
    1112:	3a 81       	ldd	r19, Y+2	; 0x02
    1114:	4b 81       	ldd	r20, Y+3	; 0x03
    1116:	5c 81       	ldd	r21, Y+4	; 0x04
    1118:	c5 01       	movw	r24, r10
    111a:	b4 01       	movw	r22, r8
    111c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1120:	9b 01       	movw	r18, r22
    1122:	ac 01       	movw	r20, r24
    1124:	c7 01       	movw	r24, r14
    1126:	b6 01       	movw	r22, r12
    1128:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
	}
	if (c2g_wx < 0){
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    1136:	88 23       	and	r24, r24
    1138:	4c f0       	brlt	.+18     	; 0x114c <cal_angle+0x198>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);

	float cos_alpha = c2g[0] * dir[0] + c2g[1] * dir[1];
	alpha = acos(cos_alpha);
    113a:	40 92 62 01 	sts	0x0162, r4
    113e:	50 92 63 01 	sts	0x0163, r5
    1142:	60 92 64 01 	sts	0x0164, r6
    1146:	70 92 65 01 	sts	0x0165, r7
    114a:	0c c0       	rjmp	.+24     	; 0x1164 <cal_angle+0x1b0>
	}
	else{
		c2g_wx = -costheta*c2g[1] - sintheta*c2g[0];
	}
	if (c2g_wx < 0){
		alpha = - alpha;
    114c:	77 fa       	bst	r7, 7
    114e:	70 94       	com	r7
    1150:	77 f8       	bld	r7, 7
    1152:	70 94       	com	r7
    1154:	40 92 62 01 	sts	0x0162, r4
    1158:	50 92 63 01 	sts	0x0163, r5
    115c:	60 92 64 01 	sts	0x0164, r6
    1160:	70 92 65 01 	sts	0x0165, r7
	};   

	m_usb_tx_string("alpha: ");
    1164:	8f e0       	ldi	r24, 0x0F	; 15
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(alpha*10);
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	60 91 62 01 	lds	r22, 0x0162
    1178:	70 91 63 01 	lds	r23, 0x0163
    117c:	80 91 64 01 	lds	r24, 0x0164
    1180:	90 91 65 01 	lds	r25, 0x0165
    1184:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1188:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    118c:	cb 01       	movw	r24, r22
    118e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1192:	8d e0       	ldi	r24, 0x0D	; 13
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
}
    119a:	28 96       	adiw	r28, 0x08	; 8
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	7f 90       	pop	r7
    11c0:	6f 90       	pop	r6
    11c2:	5f 90       	pop	r5
    11c4:	4f 90       	pop	r4
    11c6:	3f 90       	pop	r3
    11c8:	2f 90       	pop	r2
    11ca:	08 95       	ret

000011cc <PID_alpha>:
void PID_alpha(float Kp, float Kd){
    11cc:	4f 92       	push	r4
    11ce:	5f 92       	push	r5
    11d0:	6f 92       	push	r6
    11d2:	7f 92       	push	r7
    11d4:	8f 92       	push	r8
    11d6:	9f 92       	push	r9
    11d8:	af 92       	push	r10
    11da:	bf 92       	push	r11
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <PID_alpha+0x1e>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <PID_alpha+0x20>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	4b 01       	movw	r8, r22
    11f2:	5c 01       	movw	r10, r24
    11f4:	29 83       	std	Y+1, r18	; 0x01
    11f6:	3a 83       	std	Y+2, r19	; 0x02
    11f8:	4b 83       	std	Y+3, r20	; 0x03
    11fa:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    11fc:	40 90 62 01 	lds	r4, 0x0162
    1200:	50 90 63 01 	lds	r5, 0x0163
    1204:	60 90 64 01 	lds	r6, 0x0164
    1208:	70 90 65 01 	lds	r7, 0x0165
    120c:	20 91 5e 01 	lds	r18, 0x015E
    1210:	30 91 5f 01 	lds	r19, 0x015F
    1214:	40 91 60 01 	lds	r20, 0x0160
    1218:	50 91 61 01 	lds	r21, 0x0161
    121c:	c3 01       	movw	r24, r6
    121e:	b2 01       	movw	r22, r4
    1220:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    1224:	6b 01       	movw	r12, r22
    1226:	7c 01       	movw	r14, r24
    1228:	60 93 5a 01 	sts	0x015A, r22
    122c:	70 93 5b 01 	sts	0x015B, r23
    1230:	80 93 5c 01 	sts	0x015C, r24
    1234:	90 93 5d 01 	sts	0x015D, r25
	float P =0, D = 0;
	P = Kp * alpha;
    1238:	a5 01       	movw	r20, r10
    123a:	94 01       	movw	r18, r8
    123c:	c3 01       	movw	r24, r6
    123e:	b2 01       	movw	r22, r4
    1240:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1244:	4b 01       	movw	r8, r22
    1246:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;	gain_loc = P+D;
    1248:	29 81       	ldd	r18, Y+1	; 0x01
    124a:	3a 81       	ldd	r19, Y+2	; 0x02
    124c:	4b 81       	ldd	r20, Y+3	; 0x03
    124e:	5c 81       	ldd	r21, Y+4	; 0x04
    1250:	c7 01       	movw	r24, r14
    1252:	b6 01       	movw	r22, r12
    1254:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	c5 01       	movw	r24, r10
    125e:	b4 01       	movw	r22, r8
    1260:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    1264:	60 93 56 01 	sts	0x0156, r22
    1268:	70 93 57 01 	sts	0x0157, r23
    126c:	80 93 58 01 	sts	0x0158, r24
    1270:	90 93 59 01 	sts	0x0159, r25
	
	alpha_last = alpha;
    1274:	40 92 5e 01 	sts	0x015E, r4
    1278:	50 92 5f 01 	sts	0x015F, r5
    127c:	60 92 60 01 	sts	0x0160, r6
    1280:	70 92 61 01 	sts	0x0161, r7
	
	m_usb_tx_string("alpha*10: ");
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	60 91 62 01 	lds	r22, 0x0162
    1298:	70 91 63 01 	lds	r23, 0x0163
    129c:	80 91 64 01 	lds	r24, 0x0164
    12a0:	90 91 65 01 	lds	r25, 0x0165
    12a4:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    12a8:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    12ac:	cb 01       	movw	r24, r22
    12ae:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	92 e0       	ldi	r25, 0x02	; 2
    12b6:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	m_usb_tx_string("gain*10: ");
    12ba:	86 ef       	ldi	r24, 0xF6	; 246
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	60 91 56 01 	lds	r22, 0x0156
    12ce:	70 91 57 01 	lds	r23, 0x0157
    12d2:	80 91 58 01 	lds	r24, 0x0158
    12d6:	90 91 59 01 	lds	r25, 0x0159
    12da:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    12de:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    12e2:	cb 01       	movw	r24, r22
    12e4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    12e8:	84 ef       	ldi	r24, 0xF4	; 244
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	if(gain_loc<0){  // turn right
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	60 91 56 01 	lds	r22, 0x0156
    12fa:	70 91 57 01 	lds	r23, 0x0157
    12fe:	80 91 58 01 	lds	r24, 0x0158
    1302:	90 91 59 01 	lds	r25, 0x0159
    1306:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    130a:	88 23       	and	r24, r24
    130c:	0c f0       	brlt	.+2      	; 0x1310 <PID_alpha+0x144>
    130e:	44 c0       	rjmp	.+136    	; 0x1398 <PID_alpha+0x1cc>
		m_usb_tx_string("turn right\n");
    1310:	88 ee       	ldi	r24, 0xE8	; 232
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1318:	60 91 56 01 	lds	r22, 0x0156
    131c:	70 91 57 01 	lds	r23, 0x0157
    1320:	80 91 58 01 	lds	r24, 0x0158
    1324:	90 91 59 01 	lds	r25, 0x0159
    1328:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    132c:	9b 01       	movw	r18, r22
    132e:	77 23       	and	r23, r23
    1330:	24 f4       	brge	.+8      	; 0x133a <PID_alpha+0x16e>
    1332:	22 27       	eor	r18, r18
    1334:	33 27       	eor	r19, r19
    1336:	26 1b       	sub	r18, r22
    1338:	37 0b       	sbc	r19, r23
    133a:	8a e8       	ldi	r24, 0x8A	; 138
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	82 1b       	sub	r24, r18
    1340:	93 0b       	sbc	r25, r19
    1342:	90 93 8b 00 	sts	0x008B, r25
    1346:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_loc){
    134a:	e0 90 1c 01 	lds	r14, 0x011C
    134e:	f0 90 1d 01 	lds	r15, 0x011D
    1352:	60 91 56 01 	lds	r22, 0x0156
    1356:	70 91 57 01 	lds	r23, 0x0157
    135a:	80 91 58 01 	lds	r24, 0x0158
    135e:	90 91 59 01 	lds	r25, 0x0159
    1362:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    1366:	9b 01       	movw	r18, r22
    1368:	77 23       	and	r23, r23
    136a:	24 f4       	brge	.+8      	; 0x1374 <PID_alpha+0x1a8>
    136c:	22 27       	eor	r18, r18
    136e:	33 27       	eor	r19, r19
    1370:	26 1b       	sub	r18, r22
    1372:	37 0b       	sbc	r19, r23
    1374:	e2 16       	cp	r14, r18
    1376:	f3 06       	cpc	r15, r19
    1378:	44 f4       	brge	.+16     	; 0x138a <PID_alpha+0x1be>
			OCR1B = full_speed - speed_diff_loc;
    137a:	8a e8       	ldi	r24, 0x8A	; 138
    137c:	92 e0       	ldi	r25, 0x02	; 2
    137e:	8e 19       	sub	r24, r14
    1380:	9f 09       	sbc	r25, r15
    1382:	90 93 8b 00 	sts	0x008B, r25
    1386:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    138a:	8a e8       	ldi	r24, 0x8A	; 138
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	90 93 8d 00 	sts	0x008D, r25
    1392:	80 93 8c 00 	sts	0x008C, r24
    1396:	43 c0       	rjmp	.+134    	; 0x141e <PID_alpha+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1398:	8d ed       	ldi	r24, 0xDD	; 221
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    13a0:	60 91 56 01 	lds	r22, 0x0156
    13a4:	70 91 57 01 	lds	r23, 0x0157
    13a8:	80 91 58 01 	lds	r24, 0x0158
    13ac:	90 91 59 01 	lds	r25, 0x0159
    13b0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    13b4:	9b 01       	movw	r18, r22
    13b6:	77 23       	and	r23, r23
    13b8:	24 f4       	brge	.+8      	; 0x13c2 <PID_alpha+0x1f6>
    13ba:	22 27       	eor	r18, r18
    13bc:	33 27       	eor	r19, r19
    13be:	26 1b       	sub	r18, r22
    13c0:	37 0b       	sbc	r19, r23
    13c2:	8a e8       	ldi	r24, 0x8A	; 138
    13c4:	92 e0       	ldi	r25, 0x02	; 2
    13c6:	82 1b       	sub	r24, r18
    13c8:	93 0b       	sbc	r25, r19
    13ca:	90 93 8d 00 	sts	0x008D, r25
    13ce:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_loc){
    13d2:	e0 90 1c 01 	lds	r14, 0x011C
    13d6:	f0 90 1d 01 	lds	r15, 0x011D
    13da:	60 91 56 01 	lds	r22, 0x0156
    13de:	70 91 57 01 	lds	r23, 0x0157
    13e2:	80 91 58 01 	lds	r24, 0x0158
    13e6:	90 91 59 01 	lds	r25, 0x0159
    13ea:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    13ee:	9b 01       	movw	r18, r22
    13f0:	77 23       	and	r23, r23
    13f2:	24 f4       	brge	.+8      	; 0x13fc <PID_alpha+0x230>
    13f4:	22 27       	eor	r18, r18
    13f6:	33 27       	eor	r19, r19
    13f8:	26 1b       	sub	r18, r22
    13fa:	37 0b       	sbc	r19, r23
    13fc:	e2 16       	cp	r14, r18
    13fe:	f3 06       	cpc	r15, r19
    1400:	44 f4       	brge	.+16     	; 0x1412 <PID_alpha+0x246>
			OCR1C = full_speed - speed_diff_loc;
    1402:	8a e8       	ldi	r24, 0x8A	; 138
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	8e 19       	sub	r24, r14
    1408:	9f 09       	sbc	r25, r15
    140a:	90 93 8d 00 	sts	0x008D, r25
    140e:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    1412:	8a e8       	ldi	r24, 0x8A	; 138
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	90 93 8b 00 	sts	0x008B, r25
    141a:	80 93 8a 00 	sts	0x008A, r24
	}	
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	7f 90       	pop	r7
    143c:	6f 90       	pop	r6
    143e:	5f 90       	pop	r5
    1440:	4f 90       	pop	r4
    1442:	08 95       	ret

00001444 <PID_p2p>:

void PID_p2p(float Kp, float Kd){
    1444:	4f 92       	push	r4
    1446:	5f 92       	push	r5
    1448:	6f 92       	push	r6
    144a:	7f 92       	push	r7
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <PID_p2p+0x1e>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <PID_p2p+0x20>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	4b 01       	movw	r8, r22
    146a:	5c 01       	movw	r10, r24
    146c:	29 83       	std	Y+1, r18	; 0x01
    146e:	3a 83       	std	Y+2, r19	; 0x02
    1470:	4b 83       	std	Y+3, r20	; 0x03
    1472:	5c 83       	std	Y+4, r21	; 0x04
	diff_loc = alpha - alpha_last;
    1474:	40 90 62 01 	lds	r4, 0x0162
    1478:	50 90 63 01 	lds	r5, 0x0163
    147c:	60 90 64 01 	lds	r6, 0x0164
    1480:	70 90 65 01 	lds	r7, 0x0165
    1484:	20 91 5e 01 	lds	r18, 0x015E
    1488:	30 91 5f 01 	lds	r19, 0x015F
    148c:	40 91 60 01 	lds	r20, 0x0160
    1490:	50 91 61 01 	lds	r21, 0x0161
    1494:	c3 01       	movw	r24, r6
    1496:	b2 01       	movw	r22, r4
    1498:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24
    14a0:	60 93 5a 01 	sts	0x015A, r22
    14a4:	70 93 5b 01 	sts	0x015B, r23
    14a8:	80 93 5c 01 	sts	0x015C, r24
    14ac:	90 93 5d 01 	sts	0x015D, r25
	float P =0, D = 0;
	P = Kp * alpha;
    14b0:	a5 01       	movw	r20, r10
    14b2:	94 01       	movw	r18, r8
    14b4:	c3 01       	movw	r24, r6
    14b6:	b2 01       	movw	r22, r4
    14b8:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    14bc:	4b 01       	movw	r8, r22
    14be:	5c 01       	movw	r10, r24
	D = Kd * diff_loc;   
    14c0:	29 81       	ldd	r18, Y+1	; 0x01
    14c2:	3a 81       	ldd	r19, Y+2	; 0x02
    14c4:	4b 81       	ldd	r20, Y+3	; 0x03
    14c6:	5c 81       	ldd	r21, Y+4	; 0x04
    14c8:	c7 01       	movw	r24, r14
    14ca:	b6 01       	movw	r22, r12
    14cc:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    14d0:	9b 01       	movw	r18, r22
    14d2:	ac 01       	movw	r20, r24
	gain_loc = P+D;
    14d4:	c5 01       	movw	r24, r10
    14d6:	b4 01       	movw	r22, r8
    14d8:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    14dc:	60 93 56 01 	sts	0x0156, r22
    14e0:	70 93 57 01 	sts	0x0157, r23
    14e4:	80 93 58 01 	sts	0x0158, r24
    14e8:	90 93 59 01 	sts	0x0159, r25
	
	alpha_last = alpha;
    14ec:	40 92 5e 01 	sts	0x015E, r4
    14f0:	50 92 5f 01 	sts	0x015F, r5
    14f4:	60 92 60 01 	sts	0x0160, r6
    14f8:	70 92 61 01 	sts	0x0161, r7
	
	m_usb_tx_string("alpha*10: ");
    14fc:	82 ed       	ldi	r24, 0xD2	; 210
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e2       	ldi	r20, 0x20	; 32
    150a:	51 e4       	ldi	r21, 0x41	; 65
    150c:	60 91 62 01 	lds	r22, 0x0162
    1510:	70 91 63 01 	lds	r23, 0x0163
    1514:	80 91 64 01 	lds	r24, 0x0164
    1518:	90 91 65 01 	lds	r25, 0x0165
    151c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1520:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    1524:	cb 01       	movw	r24, r22
    1526:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    152a:	80 ed       	ldi	r24, 0xD0	; 208
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	m_usb_tx_string("gain*10: ");
    1532:	86 ec       	ldi	r24, 0xC6	; 198
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int((int) (gain_loc*10)); // multiply X10
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e2       	ldi	r20, 0x20	; 32
    1540:	51 e4       	ldi	r21, 0x41	; 65
    1542:	60 91 56 01 	lds	r22, 0x0156
    1546:	70 91 57 01 	lds	r23, 0x0157
    154a:	80 91 58 01 	lds	r24, 0x0158
    154e:	90 91 59 01 	lds	r25, 0x0159
    1552:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1556:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    155a:	cb 01       	movw	r24, r22
    155c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1560:	84 ec       	ldi	r24, 0xC4	; 196
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	if(gain_loc<0){  // turn right
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	60 91 56 01 	lds	r22, 0x0156
    1572:	70 91 57 01 	lds	r23, 0x0157
    1576:	80 91 58 01 	lds	r24, 0x0158
    157a:	90 91 59 01 	lds	r25, 0x0159
    157e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    1582:	88 23       	and	r24, r24
    1584:	0c f0       	brlt	.+2      	; 0x1588 <PID_p2p+0x144>
    1586:	44 c0       	rjmp	.+136    	; 0x1610 <PID_p2p+0x1cc>
		m_usb_tx_string("turn right\n");
    1588:	88 eb       	ldi	r24, 0xB8	; 184
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		OCR1B = full_speed-abs(gain_loc);
    1590:	60 91 56 01 	lds	r22, 0x0156
    1594:	70 91 57 01 	lds	r23, 0x0157
    1598:	80 91 58 01 	lds	r24, 0x0158
    159c:	90 91 59 01 	lds	r25, 0x0159
    15a0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    15a4:	9b 01       	movw	r18, r22
    15a6:	77 23       	and	r23, r23
    15a8:	24 f4       	brge	.+8      	; 0x15b2 <PID_p2p+0x16e>
    15aa:	22 27       	eor	r18, r18
    15ac:	33 27       	eor	r19, r19
    15ae:	26 1b       	sub	r18, r22
    15b0:	37 0b       	sbc	r19, r23
    15b2:	8a e8       	ldi	r24, 0x8A	; 138
    15b4:	92 e0       	ldi	r25, 0x02	; 2
    15b6:	82 1b       	sub	r24, r18
    15b8:	93 0b       	sbc	r25, r19
    15ba:	90 93 8b 00 	sts	0x008B, r25
    15be:	80 93 8a 00 	sts	0x008A, r24
		if (abs(gain_loc) > speed_diff_p2p){
    15c2:	e0 90 1a 01 	lds	r14, 0x011A
    15c6:	f0 90 1b 01 	lds	r15, 0x011B
    15ca:	60 91 56 01 	lds	r22, 0x0156
    15ce:	70 91 57 01 	lds	r23, 0x0157
    15d2:	80 91 58 01 	lds	r24, 0x0158
    15d6:	90 91 59 01 	lds	r25, 0x0159
    15da:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    15de:	9b 01       	movw	r18, r22
    15e0:	77 23       	and	r23, r23
    15e2:	24 f4       	brge	.+8      	; 0x15ec <PID_p2p+0x1a8>
    15e4:	22 27       	eor	r18, r18
    15e6:	33 27       	eor	r19, r19
    15e8:	26 1b       	sub	r18, r22
    15ea:	37 0b       	sbc	r19, r23
    15ec:	e2 16       	cp	r14, r18
    15ee:	f3 06       	cpc	r15, r19
    15f0:	44 f4       	brge	.+16     	; 0x1602 <PID_p2p+0x1be>
			OCR1B = full_speed - speed_diff_p2p;
    15f2:	8a e8       	ldi	r24, 0x8A	; 138
    15f4:	92 e0       	ldi	r25, 0x02	; 2
    15f6:	8e 19       	sub	r24, r14
    15f8:	9f 09       	sbc	r25, r15
    15fa:	90 93 8b 00 	sts	0x008B, r25
    15fe:	80 93 8a 00 	sts	0x008A, r24
		}
		OCR1C = full_speed;
    1602:	8a e8       	ldi	r24, 0x8A	; 138
    1604:	92 e0       	ldi	r25, 0x02	; 2
    1606:	90 93 8d 00 	sts	0x008D, r25
    160a:	80 93 8c 00 	sts	0x008C, r24
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <PID_p2p+0x252>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
    1610:	8d ea       	ldi	r24, 0xAD	; 173
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		OCR1C = full_speed-abs(gain_loc);
    1618:	60 91 56 01 	lds	r22, 0x0156
    161c:	70 91 57 01 	lds	r23, 0x0157
    1620:	80 91 58 01 	lds	r24, 0x0158
    1624:	90 91 59 01 	lds	r25, 0x0159
    1628:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    162c:	9b 01       	movw	r18, r22
    162e:	77 23       	and	r23, r23
    1630:	24 f4       	brge	.+8      	; 0x163a <PID_p2p+0x1f6>
    1632:	22 27       	eor	r18, r18
    1634:	33 27       	eor	r19, r19
    1636:	26 1b       	sub	r18, r22
    1638:	37 0b       	sbc	r19, r23
    163a:	8a e8       	ldi	r24, 0x8A	; 138
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	82 1b       	sub	r24, r18
    1640:	93 0b       	sbc	r25, r19
    1642:	90 93 8d 00 	sts	0x008D, r25
    1646:	80 93 8c 00 	sts	0x008C, r24
		if (abs(gain_loc) > speed_diff_p2p){
    164a:	e0 90 1a 01 	lds	r14, 0x011A
    164e:	f0 90 1b 01 	lds	r15, 0x011B
    1652:	60 91 56 01 	lds	r22, 0x0156
    1656:	70 91 57 01 	lds	r23, 0x0157
    165a:	80 91 58 01 	lds	r24, 0x0158
    165e:	90 91 59 01 	lds	r25, 0x0159
    1662:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    1666:	9b 01       	movw	r18, r22
    1668:	77 23       	and	r23, r23
    166a:	24 f4       	brge	.+8      	; 0x1674 <PID_p2p+0x230>
    166c:	22 27       	eor	r18, r18
    166e:	33 27       	eor	r19, r19
    1670:	26 1b       	sub	r18, r22
    1672:	37 0b       	sbc	r19, r23
    1674:	e2 16       	cp	r14, r18
    1676:	f3 06       	cpc	r15, r19
    1678:	44 f4       	brge	.+16     	; 0x168a <PID_p2p+0x246>
			OCR1C = full_speed - speed_diff_p2p;
    167a:	8a e8       	ldi	r24, 0x8A	; 138
    167c:	92 e0       	ldi	r25, 0x02	; 2
    167e:	8e 19       	sub	r24, r14
    1680:	9f 09       	sbc	r25, r15
    1682:	90 93 8d 00 	sts	0x008D, r25
    1686:	80 93 8c 00 	sts	0x008C, r24
		}
		OCR1B = full_speed;
    168a:	8a e8       	ldi	r24, 0x8A	; 138
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	90 93 8b 00 	sts	0x008B, r25
    1692:	80 93 8a 00 	sts	0x008A, r24
	}
	
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	af 90       	pop	r10
    16ae:	9f 90       	pop	r9
    16b0:	8f 90       	pop	r8
    16b2:	7f 90       	pop	r7
    16b4:	6f 90       	pop	r6
    16b6:	5f 90       	pop	r5
    16b8:	4f 90       	pop	r4
    16ba:	08 95       	ret

000016bc <find_if_reach>:


int find_if_reach(float x, float y, float *goal){
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	6b 01       	movw	r12, r22
    16ca:	7c 01       	movw	r14, r24
	//unsigned int dist = abs(x - goal[0])* abs(x - goal[0]);
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	a9 01       	movw	r20, r18
    16d2:	f8 01       	movw	r30, r16
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	7c f4       	brge	.+30     	; 0x1702 <find_if_reach+0x46>
		if(x<0){
    16e4:	01 e0       	ldi	r16, 0x01	; 1
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	a9 01       	movw	r20, r18
    16ee:	c7 01       	movw	r24, r14
    16f0:	b6 01       	movw	r22, r12
    16f2:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	0c f0       	brlt	.+2      	; 0x16fc <find_if_reach+0x40>
    16fa:	00 e0       	ldi	r16, 0x00	; 0
			return 1;
    16fc:	80 2f       	mov	r24, r16
    16fe:	91 2f       	mov	r25, r17
    1700:	0e c0       	rjmp	.+28     	; 0x171e <find_if_reach+0x62>
			return 0;
		}
		
	}
	else{
		if(x>0){
    1702:	01 e0       	ldi	r16, 0x01	; 1
    1704:	10 e0       	ldi	r17, 0x00	; 0
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	a9 01       	movw	r20, r18
    170c:	c7 01       	movw	r24, r14
    170e:	b6 01       	movw	r22, r12
    1710:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__gesf2>
    1714:	18 16       	cp	r1, r24
    1716:	0c f0       	brlt	.+2      	; 0x171a <find_if_reach+0x5e>
    1718:	00 e0       	ldi	r16, 0x00	; 0
	/*m_usb_tx_string("dist: ");
	m_usb_tx_int(dist); 
	m_usb_tx_string("\n");*/
	if (goal[0]<0){
		if(x<0){
			return 1;
    171a:	80 2f       	mov	r24, r16
    171c:	91 2f       	mov	r25, r17
		}else{
			return 0;
		}
		
	}
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	08 95       	ret

0000172c <localization>:
float sum_loc = 0;
float diff_loc = 0;
float gain_loc = 0;


void localization(int *state, float *goal, float *c_wii, float *dir){
    172c:	2f 92       	push	r2
    172e:	3f 92       	push	r3
    1730:	4f 92       	push	r4
    1732:	5f 92       	push	r5
    1734:	6f 92       	push	r6
    1736:	7f 92       	push	r7
    1738:	8f 92       	push	r8
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	c6 58       	subi	r28, 0x86	; 134
    1756:	d1 09       	sbc	r29, r1
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cd 57       	subi	r28, 0x7D	; 125
    1764:	df 4f       	sbci	r29, 0xFF	; 255
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	88 83       	st	Y, r24
    176a:	c3 58       	subi	r28, 0x83	; 131
    176c:	d0 40       	sbci	r29, 0x00	; 0
    176e:	cb 57       	subi	r28, 0x7B	; 123
    1770:	df 4f       	sbci	r29, 0xFF	; 255
    1772:	79 83       	std	Y+1, r23	; 0x01
    1774:	68 83       	st	Y, r22
    1776:	c5 58       	subi	r28, 0x85	; 133
    1778:	d0 40       	sbci	r29, 0x00	; 0
    177a:	ed 96       	adiw	r28, 0x3d	; 61
    177c:	5f af       	std	Y+63, r21	; 0x3f
    177e:	4e af       	std	Y+62, r20	; 0x3e
    1780:	ed 97       	sbiw	r28, 0x3d	; 61
    1782:	ef 96       	adiw	r28, 0x3f	; 63
    1784:	3f af       	std	Y+63, r19	; 0x3f
    1786:	2e af       	std	Y+62, r18	; 0x3e
    1788:	ef 97       	sbiw	r28, 0x3f	; 63
	m_wii_read(&blobs[0]);
    178a:	86 e7       	ldi	r24, 0x76	; 118
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <m_wii_read>
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[9]);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(blobs[10]);
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
    1792:	60 91 76 01 	lds	r22, 0x0176
    1796:	70 91 77 01 	lds	r23, 0x0177
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    17a2:	69 83       	std	Y+1, r22	; 0x01
    17a4:	7a 83       	std	Y+2, r23	; 0x02
    17a6:	8b 83       	std	Y+3, r24	; 0x03
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	60 91 7c 01 	lds	r22, 0x017C
    17ae:	70 91 7d 01 	lds	r23, 0x017D
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    17ba:	6d 83       	std	Y+5, r22	; 0x05
    17bc:	7e 83       	std	Y+6, r23	; 0x06
    17be:	8f 83       	std	Y+7, r24	; 0x07
    17c0:	98 87       	std	Y+8, r25	; 0x08
    17c2:	60 91 82 01 	lds	r22, 0x0182
    17c6:	70 91 83 01 	lds	r23, 0x0183
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    17d2:	69 87       	std	Y+9, r22	; 0x09
    17d4:	7a 87       	std	Y+10, r23	; 0x0a
    17d6:	8b 87       	std	Y+11, r24	; 0x0b
    17d8:	9c 87       	std	Y+12, r25	; 0x0c
    17da:	60 91 88 01 	lds	r22, 0x0188
    17de:	70 91 89 01 	lds	r23, 0x0189
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    17ea:	6d 87       	std	Y+13, r22	; 0x0d
    17ec:	7e 87       	std	Y+14, r23	; 0x0e
    17ee:	8f 87       	std	Y+15, r24	; 0x0f
    17f0:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
    17f2:	60 91 78 01 	lds	r22, 0x0178
    17f6:	70 91 79 01 	lds	r23, 0x0179
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    1802:	69 8b       	std	Y+17, r22	; 0x11
    1804:	7a 8b       	std	Y+18, r23	; 0x12
    1806:	8b 8b       	std	Y+19, r24	; 0x13
    1808:	9c 8b       	std	Y+20, r25	; 0x14
    180a:	60 91 7e 01 	lds	r22, 0x017E
    180e:	70 91 7f 01 	lds	r23, 0x017F
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    181a:	6d 8b       	std	Y+21, r22	; 0x15
    181c:	7e 8b       	std	Y+22, r23	; 0x16
    181e:	8f 8b       	std	Y+23, r24	; 0x17
    1820:	98 8f       	std	Y+24, r25	; 0x18
    1822:	60 91 84 01 	lds	r22, 0x0184
    1826:	70 91 85 01 	lds	r23, 0x0185
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    1832:	69 8f       	std	Y+25, r22	; 0x19
    1834:	7a 8f       	std	Y+26, r23	; 0x1a
    1836:	8b 8f       	std	Y+27, r24	; 0x1b
    1838:	9c 8f       	std	Y+28, r25	; 0x1c
    183a:	60 91 8a 01 	lds	r22, 0x018A
    183e:	70 91 8b 01 	lds	r23, 0x018B
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 14 1c 	call	0x3828	; 0x3828 <__floatunsisf>
    184a:	6d 8f       	std	Y+29, r22	; 0x1d
    184c:	7e 8f       	std	Y+30, r23	; 0x1e
    184e:	8f 8f       	std	Y+31, r24	; 0x1f
    1850:	98 a3       	std	Y+32, r25	; 0x20
    1852:	9e 01       	movw	r18, r28
    1854:	2f 5f       	subi	r18, 0xFF	; 255
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	eb 96       	adiw	r28, 0x3b	; 59
    185a:	3f af       	std	Y+63, r19	; 0x3f
    185c:	2e af       	std	Y+62, r18	; 0x3e
    185e:	eb 97       	sbiw	r28, 0x3b	; 59
    1860:	ce 01       	movw	r24, r28
    1862:	41 96       	adiw	r24, 0x11	; 17
    1864:	e3 96       	adiw	r28, 0x33	; 51
    1866:	9f af       	std	Y+63, r25	; 0x3f
    1868:	8e af       	std	Y+62, r24	; 0x3e
    186a:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    186c:	ab 96       	adiw	r28, 0x2b	; 43
    186e:	1f ae       	std	Y+63, r1	; 0x3f
    1870:	1e ae       	std	Y+62, r1	; 0x3e
    1872:	ab 97       	sbiw	r28, 0x2b	; 43
// 	m_usb_tx_string("\n");
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
    1874:	e9 96       	adiw	r28, 0x39	; 57
    1876:	1f ae       	std	Y+63, r1	; 0x3f
    1878:	1e ae       	std	Y+62, r1	; 0x3e
    187a:	e9 97       	sbiw	r28, 0x39	; 57
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    187c:	ab 96       	adiw	r28, 0x2b	; 43
    187e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1880:	bf ad       	ldd	r27, Y+63	; 0x3f
    1882:	ab 97       	sbiw	r28, 0x2b	; 43
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	e7 96       	adiw	r28, 0x37	; 55
    1888:	bf af       	std	Y+63, r27	; 0x3f
    188a:	ae af       	std	Y+62, r26	; 0x3e
    188c:	e7 97       	sbiw	r28, 0x37	; 55
    188e:	14 97       	sbiw	r26, 0x04	; 4
    1890:	0c f0       	brlt	.+2      	; 0x1894 <localization+0x168>
    1892:	5c c6       	rjmp	.+3256   	; 0x254c <localization+0xe20>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1894:	eb 96       	adiw	r28, 0x3b	; 59
    1896:	ee ad       	ldd	r30, Y+62	; 0x3e
    1898:	ff ad       	ldd	r31, Y+63	; 0x3f
    189a:	eb 97       	sbiw	r28, 0x3b	; 59
    189c:	81 90       	ld	r8, Z+
    189e:	91 90       	ld	r9, Z+
    18a0:	a1 90       	ld	r10, Z+
    18a2:	b1 90       	ld	r11, Z+
    18a4:	e9 96       	adiw	r28, 0x39	; 57
    18a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    18a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    18aa:	e9 97       	sbiw	r28, 0x39	; 57
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	29 e3       	ldi	r18, 0x39	; 57
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	2c 0f       	add	r18, r28
    18b6:	3d 1f       	adc	r19, r29
    18b8:	28 0f       	add	r18, r24
    18ba:	39 1f       	adc	r19, r25
    18bc:	a3 96       	adiw	r28, 0x23	; 35
    18be:	3f af       	std	Y+63, r19	; 0x3f
    18c0:	2e af       	std	Y+62, r18	; 0x3e
    18c2:	a3 97       	sbiw	r28, 0x23	; 35
    18c4:	a5 e4       	ldi	r26, 0x45	; 69
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ac 0f       	add	r26, r28
    18ca:	bd 1f       	adc	r27, r29
    18cc:	a8 0f       	add	r26, r24
    18ce:	b9 1f       	adc	r27, r25
    18d0:	a7 96       	adiw	r28, 0x27	; 39
    18d2:	bf af       	std	Y+63, r27	; 0x3f
    18d4:	ae af       	std	Y+62, r26	; 0x3e
    18d6:	a7 97       	sbiw	r28, 0x27	; 39
    18d8:	e9 96       	adiw	r28, 0x39	; 57
    18da:	8e ad       	ldd	r24, Y+62	; 0x3e
    18dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    18de:	e9 97       	sbiw	r28, 0x39	; 57
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0f 2e       	mov	r0, r31
    18ea:	f1 e2       	ldi	r31, 0x21	; 33
    18ec:	6f 2e       	mov	r6, r31
    18ee:	71 2c       	mov	r7, r1
    18f0:	f0 2d       	mov	r31, r0
    18f2:	6c 0e       	add	r6, r28
    18f4:	7d 1e       	adc	r7, r29
    18f6:	68 0e       	add	r6, r24
    18f8:	79 1e       	adc	r7, r25
    18fa:	e3 96       	adiw	r28, 0x33	; 51
    18fc:	2e ad       	ldd	r18, Y+62	; 0x3e
    18fe:	3f ad       	ldd	r19, Y+63	; 0x3f
    1900:	e3 97       	sbiw	r28, 0x33	; 51
    1902:	2c 5f       	subi	r18, 0xFC	; 252
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1908:	e7 96       	adiw	r28, 0x37	; 55
    190a:	0e ad       	ldd	r16, Y+62	; 0x3e
    190c:	1f ad       	ldd	r17, Y+63	; 0x3f
    190e:	e7 97       	sbiw	r28, 0x37	; 55
    1910:	e1 96       	adiw	r28, 0x31	; 49
    1912:	8c ae       	std	Y+60, r8	; 0x3c
    1914:	9d ae       	std	Y+61, r9	; 0x3d
    1916:	ae ae       	std	Y+62, r10	; 0x3e
    1918:	bf ae       	std	Y+63, r11	; 0x3f
    191a:	e1 97       	sbiw	r28, 0x31	; 49
    191c:	59 01       	movw	r10, r18
    191e:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 ec       	ldi	r19, 0xC0	; 192
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	e1 96       	adiw	r28, 0x31	; 49
    192a:	6c ad       	ldd	r22, Y+60	; 0x3c
    192c:	7d ad       	ldd	r23, Y+61	; 0x3d
    192e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1930:	9f ad       	ldd	r25, Y+63	; 0x3f
    1932:	e1 97       	sbiw	r28, 0x31	; 49
    1934:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    1938:	88 23       	and	r24, r24
    193a:	09 f4       	brne	.+2      	; 0x193e <localization+0x212>
    193c:	70 c0       	rjmp	.+224    	; 0x1a1e <localization+0x2f2>
    193e:	e3 96       	adiw	r28, 0x33	; 51
    1940:	ae ad       	ldd	r26, Y+62	; 0x3e
    1942:	bf ad       	ldd	r27, Y+63	; 0x3f
    1944:	e3 97       	sbiw	r28, 0x33	; 51
    1946:	cd 90       	ld	r12, X+
    1948:	dd 90       	ld	r13, X+
    194a:	ed 90       	ld	r14, X+
    194c:	fc 90       	ld	r15, X
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 ec       	ldi	r19, 0xC0	; 192
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	54 e4       	ldi	r21, 0x44	; 68
    1956:	c7 01       	movw	r24, r14
    1958:	b6 01       	movw	r22, r12
    195a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    195e:	88 23       	and	r24, r24
    1960:	09 f4       	brne	.+2      	; 0x1964 <localization+0x238>
    1962:	5d c0       	rjmp	.+186    	; 0x1a1e <localization+0x2f2>
    1964:	f1 01       	movw	r30, r2
    1966:	40 80       	ld	r4, Z
    1968:	51 80       	ldd	r5, Z+1	; 0x01
    196a:	62 80       	ldd	r6, Z+2	; 0x02
    196c:	73 80       	ldd	r7, Z+3	; 0x03
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 ec       	ldi	r19, 0xC0	; 192
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	54 e4       	ldi	r21, 0x44	; 68
    1976:	c3 01       	movw	r24, r6
    1978:	b2 01       	movw	r22, r4
    197a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    197e:	88 23       	and	r24, r24
    1980:	09 f4       	brne	.+2      	; 0x1984 <localization+0x258>
    1982:	4d c0       	rjmp	.+154    	; 0x1a1e <localization+0x2f2>
    1984:	d5 01       	movw	r26, r10
    1986:	8d 91       	ld	r24, X+
    1988:	9d 91       	ld	r25, X+
    198a:	0d 90       	ld	r0, X+
    198c:	bc 91       	ld	r27, X
    198e:	a0 2d       	mov	r26, r0
    1990:	c1 58       	subi	r28, 0x81	; 129
    1992:	df 4f       	sbci	r29, 0xFF	; 255
    1994:	88 83       	st	Y, r24
    1996:	99 83       	std	Y+1, r25	; 0x01
    1998:	aa 83       	std	Y+2, r26	; 0x02
    199a:	bb 83       	std	Y+3, r27	; 0x03
    199c:	cf 57       	subi	r28, 0x7F	; 127
    199e:	d0 40       	sbci	r29, 0x00	; 0
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 ec       	ldi	r19, 0xC0	; 192
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	a9 f1       	breq	.+106    	; 0x1a1e <localization+0x2f2>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
    19b4:	a3 01       	movw	r20, r6
    19b6:	92 01       	movw	r18, r4
    19b8:	e1 96       	adiw	r28, 0x31	; 49
    19ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    19bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    19be:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19c2:	e1 97       	sbiw	r28, 0x31	; 49
    19c4:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    19c8:	2b 01       	movw	r4, r22
    19ca:	3c 01       	movw	r6, r24
    19cc:	c1 58       	subi	r28, 0x81	; 129
    19ce:	df 4f       	sbci	r29, 0xFF	; 255
    19d0:	28 81       	ld	r18, Y
    19d2:	39 81       	ldd	r19, Y+1	; 0x01
    19d4:	4a 81       	ldd	r20, Y+2	; 0x02
    19d6:	5b 81       	ldd	r21, Y+3	; 0x03
    19d8:	cf 57       	subi	r28, 0x7F	; 127
    19da:	d0 40       	sbci	r29, 0x00	; 0
    19dc:	c7 01       	movw	r24, r14
    19de:	b6 01       	movw	r22, r12
    19e0:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    19e4:	6b 01       	movw	r12, r22
    19e6:	7c 01       	movw	r14, r24
    19e8:	a3 01       	movw	r20, r6
    19ea:	92 01       	movw	r18, r4
    19ec:	c3 01       	movw	r24, r6
    19ee:	b2 01       	movw	r22, r4
    19f0:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    19f4:	2b 01       	movw	r4, r22
    19f6:	3c 01       	movw	r6, r24
    19f8:	a7 01       	movw	r20, r14
    19fa:	96 01       	movw	r18, r12
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	c3 01       	movw	r24, r6
    1a0a:	b2 01       	movw	r22, r4
    1a0c:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    1a10:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <sqrt>
    1a14:	f4 01       	movw	r30, r8
    1a16:	60 83       	st	Z, r22
    1a18:	71 83       	std	Z+1, r23	; 0x01
    1a1a:	82 83       	std	Z+2, r24	; 0x02
    1a1c:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
    1a1e:	a3 96       	adiw	r28, 0x23	; 35
    1a20:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a22:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a24:	a3 97       	sbiw	r28, 0x23	; 35
    1a26:	ab 96       	adiw	r28, 0x2b	; 43
    1a28:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a2c:	ab 97       	sbiw	r28, 0x2b	; 43
    1a2e:	ed 93       	st	X+, r30
    1a30:	fd 93       	st	X+, r31
    1a32:	a3 96       	adiw	r28, 0x23	; 35
    1a34:	bf af       	std	Y+63, r27	; 0x3f
    1a36:	ae af       	std	Y+62, r26	; 0x3e
    1a38:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
    1a3a:	a7 96       	adiw	r28, 0x27	; 39
    1a3c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a3e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a40:	a7 97       	sbiw	r28, 0x27	; 39
    1a42:	0d 93       	st	X+, r16
    1a44:	1d 93       	st	X+, r17
    1a46:	a7 96       	adiw	r28, 0x27	; 39
    1a48:	bf af       	std	Y+63, r27	; 0x3f
    1a4a:	ae af       	std	Y+62, r26	; 0x3e
    1a4c:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
    1a4e:	0f 5f       	subi	r16, 0xFF	; 255
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	b4 e0       	ldi	r27, 0x04	; 4
    1a54:	2b 0e       	add	r2, r27
    1a56:	31 1c       	adc	r3, r1
    1a58:	e4 e0       	ldi	r30, 0x04	; 4
    1a5a:	ae 0e       	add	r10, r30
    1a5c:	b1 1c       	adc	r11, r1
    1a5e:	f4 e0       	ldi	r31, 0x04	; 4
    1a60:	8f 0e       	add	r8, r31
    1a62:	91 1c       	adc	r9, r1
    1a64:	04 30       	cpi	r16, 0x04	; 4
    1a66:	11 05       	cpc	r17, r1
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <localization+0x340>
    1a6a:	5a cf       	rjmp	.-332    	; 0x1920 <localization+0x1f4>
    1a6c:	e9 96       	adiw	r28, 0x39	; 57
    1a6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a70:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a72:	e9 97       	sbiw	r28, 0x39	; 57
    1a74:	e7 96       	adiw	r28, 0x37	; 55
    1a76:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a78:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a7a:	e7 97       	sbiw	r28, 0x37	; 55
    1a7c:	82 1b       	sub	r24, r18
    1a7e:	93 0b       	sbc	r25, r19
    1a80:	dc 01       	movw	r26, r24
    1a82:	14 96       	adiw	r26, 0x04	; 4
    1a84:	e9 96       	adiw	r28, 0x39	; 57
    1a86:	bf af       	std	Y+63, r27	; 0x3f
    1a88:	ae af       	std	Y+62, r26	; 0x3e
    1a8a:	e9 97       	sbiw	r28, 0x39	; 57
    1a8c:	eb 96       	adiw	r28, 0x3b	; 59
    1a8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a90:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a92:	eb 97       	sbiw	r28, 0x3b	; 59
    1a94:	34 96       	adiw	r30, 0x04	; 4
    1a96:	eb 96       	adiw	r28, 0x3b	; 59
    1a98:	ff af       	std	Y+63, r31	; 0x3f
    1a9a:	ee af       	std	Y+62, r30	; 0x3e
    1a9c:	eb 97       	sbiw	r28, 0x3b	; 59
    1a9e:	e3 96       	adiw	r28, 0x33	; 51
    1aa0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1aa2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1aa4:	e3 97       	sbiw	r28, 0x33	; 51
    1aa6:	2c 5f       	subi	r18, 0xFC	; 252
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	e3 96       	adiw	r28, 0x33	; 51
    1aac:	3f af       	std	Y+63, r19	; 0x3f
    1aae:	2e af       	std	Y+62, r18	; 0x3e
    1ab0:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
    1ab2:	e7 96       	adiw	r28, 0x37	; 55
    1ab4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ab8:	e7 97       	sbiw	r28, 0x37	; 55
    1aba:	03 97       	sbiw	r24, 0x03	; 3
    1abc:	49 f0       	breq	.+18     	; 0x1ad0 <localization+0x3a4>
    1abe:	e7 96       	adiw	r28, 0x37	; 55
    1ac0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ac2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ac4:	e7 97       	sbiw	r28, 0x37	; 55
    1ac6:	ab 96       	adiw	r28, 0x2b	; 43
    1ac8:	bf af       	std	Y+63, r27	; 0x3f
    1aca:	ae af       	std	Y+62, r26	; 0x3e
    1acc:	ab 97       	sbiw	r28, 0x2b	; 43
    1ace:	d6 ce       	rjmp	.-596    	; 0x187c <localization+0x150>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1ad0:	e9 96       	adiw	r28, 0x39	; 57
    1ad2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ad4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ad6:	e9 97       	sbiw	r28, 0x39	; 57
    1ad8:	1e 16       	cp	r1, r30
    1ada:	1f 06       	cpc	r1, r31
    1adc:	84 f5       	brge	.+96     	; 0x1b3e <localization+0x412>
    1ade:	6e 01       	movw	r12, r28
    1ae0:	f1 e2       	ldi	r31, 0x21	; 33
    1ae2:	cf 0e       	add	r12, r31
    1ae4:	d1 1c       	adc	r13, r1
    1ae6:	21 2c       	mov	r2, r1
    1ae8:	31 2c       	mov	r3, r1
    1aea:	00 e0       	ldi	r16, 0x00	; 0
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	e1 2c       	mov	r14, r1
    1af0:	f1 2c       	mov	r15, r1
    1af2:	e9 96       	adiw	r28, 0x39	; 57
    1af4:	ae ac       	ldd	r10, Y+62	; 0x3e
    1af6:	bf ac       	ldd	r11, Y+63	; 0x3f
    1af8:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] > dmax){
    1afa:	d6 01       	movw	r26, r12
    1afc:	4d 90       	ld	r4, X+
    1afe:	5d 90       	ld	r5, X+
    1b00:	6d 90       	ld	r6, X+
    1b02:	7d 90       	ld	r7, X+
    1b04:	6d 01       	movw	r12, r26
    1b06:	b8 01       	movw	r22, r16
    1b08:	88 27       	eor	r24, r24
    1b0a:	77 fd       	sbrc	r23, 7
    1b0c:	80 95       	com	r24
    1b0e:	98 2f       	mov	r25, r24
    1b10:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
    1b14:	9b 01       	movw	r18, r22
    1b16:	ac 01       	movw	r20, r24
    1b18:	c3 01       	movw	r24, r6
    1b1a:	b2 01       	movw	r22, r4
    1b1c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__gesf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	34 f4       	brge	.+12     	; 0x1b30 <localization+0x404>
			indmax = i;
			dmax = d[i];
    1b24:	c3 01       	movw	r24, r6
    1b26:	b2 01       	movw	r22, r4
    1b28:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    1b2c:	8b 01       	movw	r16, r22
    1b2e:	17 01       	movw	r2, r14
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
    1b30:	bf ef       	ldi	r27, 0xFF	; 255
    1b32:	eb 1a       	sub	r14, r27
    1b34:	fb 0a       	sbc	r15, r27
    1b36:	ea 14       	cp	r14, r10
    1b38:	fb 04       	cpc	r15, r11
    1b3a:	f9 f6       	brne	.-66     	; 0x1afa <localization+0x3ce>
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <localization+0x41a>
    1b3e:	21 2c       	mov	r2, r1
    1b40:	31 2c       	mov	r3, r1
    1b42:	00 e0       	ldi	r16, 0x00	; 0
    1b44:	10 e0       	ldi	r17, 0x00	; 0
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax:");
    1b46:	87 e4       	ldi	r24, 0x47	; 71
    1b48:	92 e0       	ldi	r25, 0x02	; 2
    1b4a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(dmax);
    1b4e:	c8 01       	movw	r24, r16
    1b50:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    1b54:	85 e4       	ldi	r24, 0x45	; 69
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1b5c:	e9 96       	adiw	r28, 0x39	; 57
    1b5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b60:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b62:	e9 97       	sbiw	r28, 0x39	; 57
    1b64:	1e 16       	cp	r1, r30
    1b66:	1f 06       	cpc	r1, r31
    1b68:	dc f5       	brge	.+118    	; 0x1be0 <localization+0x4b4>
    1b6a:	6e 01       	movw	r12, r28
    1b6c:	f1 e2       	ldi	r31, 0x21	; 33
    1b6e:	cf 0e       	add	r12, r31
    1b70:	d1 1c       	adc	r13, r1
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1b72:	a3 96       	adiw	r28, 0x23	; 35
    1b74:	1f ae       	std	Y+63, r1	; 0x3f
    1b76:	1e ae       	std	Y+62, r1	; 0x3e
    1b78:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("dmax:");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
    1b7a:	0f 2e       	mov	r0, r31
    1b7c:	f0 e1       	ldi	r31, 0x10	; 16
    1b7e:	af 2e       	mov	r10, r31
    1b80:	f7 e2       	ldi	r31, 0x27	; 39
    1b82:	bf 2e       	mov	r11, r31
    1b84:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
    1b86:	e1 2c       	mov	r14, r1
    1b88:	f1 2c       	mov	r15, r1
    1b8a:	48 01       	movw	r8, r16
    1b8c:	e9 96       	adiw	r28, 0x39	; 57
    1b8e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b90:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b92:	e9 97       	sbiw	r28, 0x39	; 57
		if(d[i] < dmin){
    1b94:	d6 01       	movw	r26, r12
    1b96:	4d 90       	ld	r4, X+
    1b98:	5d 90       	ld	r5, X+
    1b9a:	6d 90       	ld	r6, X+
    1b9c:	7d 90       	ld	r7, X+
    1b9e:	6d 01       	movw	r12, r26
    1ba0:	b5 01       	movw	r22, r10
    1ba2:	88 27       	eor	r24, r24
    1ba4:	77 fd       	sbrc	r23, 7
    1ba6:	80 95       	com	r24
    1ba8:	98 2f       	mov	r25, r24
    1baa:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	c3 01       	movw	r24, r6
    1bb4:	b2 01       	movw	r22, r4
    1bb6:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	4c f4       	brge	.+18     	; 0x1bd0 <localization+0x4a4>
			indmin = i;
			dmin = d[i];
    1bbe:	c3 01       	movw	r24, r6
    1bc0:	b2 01       	movw	r22, r4
    1bc2:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    1bc6:	5b 01       	movw	r10, r22
    1bc8:	a3 96       	adiw	r28, 0x23	; 35
    1bca:	ff ae       	std	Y+63, r15	; 0x3f
    1bcc:	ee ae       	std	Y+62, r14	; 0x3e
    1bce:	a3 97       	sbiw	r28, 0x23	; 35
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
    1bd0:	bf ef       	ldi	r27, 0xFF	; 255
    1bd2:	eb 1a       	sub	r14, r27
    1bd4:	fb 0a       	sbc	r15, r27
    1bd6:	e0 16       	cp	r14, r16
    1bd8:	f1 06       	cpc	r15, r17
    1bda:	e1 f6       	brne	.-72     	; 0x1b94 <localization+0x468>
    1bdc:	84 01       	movw	r16, r8
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <localization+0x4bc>
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	
	// find minimum
	int dmin = 10000;
	int indmin = 0;
    1be0:	a3 96       	adiw	r28, 0x23	; 35
    1be2:	1f ae       	std	Y+63, r1	; 0x3f
    1be4:	1e ae       	std	Y+62, r1	; 0x3e
    1be6:	a3 97       	sbiw	r28, 0x23	; 35
			dmin = d[i];
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
    1be8:	80 90 12 01 	lds	r8, 0x0112
    1bec:	90 90 13 01 	lds	r9, 0x0113
    1bf0:	a0 90 14 01 	lds	r10, 0x0114
    1bf4:	b0 90 15 01 	lds	r11, 0x0115
    1bf8:	b8 01       	movw	r22, r16
    1bfa:	88 27       	eor	r24, r24
    1bfc:	77 fd       	sbrc	r23, 7
    1bfe:	80 95       	com	r24
    1c00:	98 2f       	mov	r25, r24
    1c02:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
    1c06:	a5 01       	movw	r20, r10
    1c08:	94 01       	movw	r18, r8
    1c0a:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1c0e:	2b 01       	movw	r4, r22
    1c10:	3c 01       	movw	r6, r24
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
    1c12:	c0 90 16 01 	lds	r12, 0x0116
    1c16:	d0 90 17 01 	lds	r13, 0x0117
    1c1a:	e0 90 18 01 	lds	r14, 0x0118
    1c1e:	f0 90 19 01 	lds	r15, 0x0119
    1c22:	e6 e0       	ldi	r30, 0x06	; 6
    1c24:	f1 e0       	ldi	r31, 0x01	; 1
    1c26:	ab 96       	adiw	r28, 0x2b	; 43
    1c28:	ff af       	std	Y+63, r31	; 0x3f
    1c2a:	ee af       	std	Y+62, r30	; 0x3e
    1c2c:	ab 97       	sbiw	r28, 0x2b	; 43
		}
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
    1c2e:	a7 96       	adiw	r28, 0x27	; 39
    1c30:	1f ae       	std	Y+63, r1	; 0x3f
    1c32:	1e ae       	std	Y+62, r1	; 0x3e
    1c34:	a7 97       	sbiw	r28, 0x27	; 39
	for(i = 1; i<4; i++){
    1c36:	01 e0       	ldi	r16, 0x01	; 1
    1c38:	10 e0       	ldi	r17, 0x00	; 0
    1c3a:	af 96       	adiw	r28, 0x2f	; 47
    1c3c:	3f ae       	std	Y+63, r3	; 0x3f
    1c3e:	2e ae       	std	Y+62, r2	; 0x3e
    1c40:	af 97       	sbiw	r28, 0x2f	; 47
    1c42:	1f 01       	movw	r2, r30
		if(abs(actdmax - actmax[i-1])<threshold){
    1c44:	d1 01       	movw	r26, r2
    1c46:	2d 91       	ld	r18, X+
    1c48:	3d 91       	ld	r19, X+
    1c4a:	4d 91       	ld	r20, X+
    1c4c:	5d 91       	ld	r21, X+
    1c4e:	1d 01       	movw	r2, r26
    1c50:	c3 01       	movw	r24, r6
    1c52:	b2 01       	movw	r22, r4
    1c54:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    1c58:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	77 23       	and	r23, r23
    1c60:	24 f4       	brge	.+8      	; 0x1c6a <localization+0x53e>
    1c62:	22 27       	eor	r18, r18
    1c64:	33 27       	eor	r19, r19
    1c66:	26 1b       	sub	r18, r22
    1c68:	37 0b       	sbc	r19, r23
    1c6a:	b9 01       	movw	r22, r18
    1c6c:	88 27       	eor	r24, r24
    1c6e:	77 fd       	sbrc	r23, 7
    1c70:	80 95       	com	r24
    1c72:	98 2f       	mov	r25, r24
    1c74:	0e 94 16 1c 	call	0x382c	; 0x382c <__floatsisf>
    1c78:	a7 01       	movw	r20, r14
    1c7a:	96 01       	movw	r18, r12
    1c7c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__cmpsf2>
    1c80:	88 23       	and	r24, r24
    1c82:	24 f4       	brge	.+8      	; 0x1c8c <localization+0x560>
    1c84:	a7 96       	adiw	r28, 0x27	; 39
    1c86:	1f af       	std	Y+63, r17	; 0x3f
    1c88:	0e af       	std	Y+62, r16	; 0x3e
    1c8a:	a7 97       	sbiw	r28, 0x27	; 39
	}

	// find miss which point
	double actdmax = dmax * pix2act;
	int ca = 0;
	for(i = 1; i<4; i++){
    1c8c:	0f 5f       	subi	r16, 0xFF	; 255
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	04 30       	cpi	r16, 0x04	; 4
    1c92:	11 05       	cpc	r17, r1
    1c94:	b9 f6       	brne	.-82     	; 0x1c44 <localization+0x518>
    1c96:	af 96       	adiw	r28, 0x2f	; 47
    1c98:	2e ac       	ldd	r2, Y+62	; 0x3e
    1c9a:	3f ac       	ldd	r3, Y+63	; 0x3f
    1c9c:	af 97       	sbiw	r28, 0x2f	; 47
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
    1c9e:	65 96       	adiw	r28, 0x15	; 21
    1ca0:	1c ae       	std	Y+60, r1	; 0x3c
    1ca2:	1d ae       	std	Y+61, r1	; 0x3d
    1ca4:	1e ae       	std	Y+62, r1	; 0x3e
    1ca6:	1f ae       	std	Y+63, r1	; 0x3f
    1ca8:	65 97       	sbiw	r28, 0x15	; 21
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e8       	ldi	r26, 0x80	; 128
    1cb0:	bf e3       	ldi	r27, 0x3F	; 63
    1cb2:	69 96       	adiw	r28, 0x19	; 25
    1cb4:	8c af       	std	Y+60, r24	; 0x3c
    1cb6:	9d af       	std	Y+61, r25	; 0x3d
    1cb8:	ae af       	std	Y+62, r26	; 0x3e
    1cba:	bf af       	std	Y+63, r27	; 0x3f
    1cbc:	69 97       	sbiw	r28, 0x19	; 25
	
	
	switch(ca){
    1cbe:	a7 96       	adiw	r28, 0x27	; 39
    1cc0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cc2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cc4:	a7 97       	sbiw	r28, 0x27	; 39
    1cc6:	e2 30       	cpi	r30, 0x02	; 2
    1cc8:	f1 05       	cpc	r31, r1
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <localization+0x5a6>
    1ccc:	33 97       	sbiw	r30, 0x03	; 3
    1cce:	51 f1       	breq	.+84     	; 0x1d24 <localization+0x5f8>
    1cd0:	5a c0       	rjmp	.+180    	; 0x1d86 <localization+0x65a>
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1cd2:	a5 01       	movw	r20, r10
    1cd4:	94 01       	movw	r18, r8
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	88 e6       	ldi	r24, 0x68	; 104
    1cdc:	91 e4       	ldi	r25, 0x41	; 65
    1cde:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divsf3>
    1ce2:	e1 96       	adiw	r28, 0x31	; 49
    1ce4:	6c af       	std	Y+60, r22	; 0x3c
    1ce6:	7d af       	std	Y+61, r23	; 0x3d
    1ce8:	8e af       	std	Y+62, r24	; 0x3e
    1cea:	9f af       	std	Y+63, r25	; 0x3f
    1cec:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
    1cee:	84 e9       	ldi	r24, 0x94	; 148
    1cf0:	97 e8       	ldi	r25, 0x87	; 135
    1cf2:	a5 ee       	ldi	r26, 0xE5	; 229
    1cf4:	be e3       	ldi	r27, 0x3E	; 62
    1cf6:	65 96       	adiw	r28, 0x15	; 21
    1cf8:	8c af       	std	Y+60, r24	; 0x3c
    1cfa:	9d af       	std	Y+61, r25	; 0x3d
    1cfc:	ae af       	std	Y+62, r26	; 0x3e
    1cfe:	bf af       	std	Y+63, r27	; 0x3f
    1d00:	65 97       	sbiw	r28, 0x15	; 21
    1d02:	81 ea       	ldi	r24, 0xA1	; 161
    1d04:	96 ed       	ldi	r25, 0xD6	; 214
    1d06:	a4 e6       	ldi	r26, 0x64	; 100
    1d08:	bf eb       	ldi	r27, 0xBF	; 191
    1d0a:	69 96       	adiw	r28, 0x19	; 25
    1d0c:	8c af       	std	Y+60, r24	; 0x3c
    1d0e:	9d af       	std	Y+61, r25	; 0x3d
    1d10:	ae af       	std	Y+62, r26	; 0x3e
    1d12:	bf af       	std	Y+63, r27	; 0x3f
    1d14:	69 97       	sbiw	r28, 0x19	; 25
			// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
			ref_pw[0] = 0; ref_pw[1] = 0;
			ref_vw[0] = 0; ref_vw[1] = 1;
			break;	
		case 2: // miss point 4
			ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    1d16:	e5 96       	adiw	r28, 0x35	; 53
    1d18:	1c ae       	std	Y+60, r1	; 0x3c
    1d1a:	1d ae       	std	Y+61, r1	; 0x3d
    1d1c:	1e ae       	std	Y+62, r1	; 0x3e
    1d1e:	1f ae       	std	Y+63, r1	; 0x3f
    1d20:	e5 97       	sbiw	r28, 0x35	; 53
			ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
			break;		
    1d22:	45 c0       	rjmp	.+138    	; 0x1dae <localization+0x682>
		case 3: // miss point 1
			ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1d24:	a5 01       	movw	r20, r10
    1d26:	94 01       	movw	r18, r8
    1d28:	61 ee       	ldi	r22, 0xE1	; 225
    1d2a:	7a e7       	ldi	r23, 0x7A	; 122
    1d2c:	8a e3       	ldi	r24, 0x3A	; 58
    1d2e:	91 e4       	ldi	r25, 0x41	; 65
    1d30:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divsf3>
    1d34:	e5 96       	adiw	r28, 0x35	; 53
    1d36:	6c af       	std	Y+60, r22	; 0x3c
    1d38:	7d af       	std	Y+61, r23	; 0x3d
    1d3a:	8e af       	std	Y+62, r24	; 0x3e
    1d3c:	9f af       	std	Y+63, r25	; 0x3f
    1d3e:	e5 97       	sbiw	r28, 0x35	; 53
    1d40:	a5 01       	movw	r20, r10
    1d42:	94 01       	movw	r18, r8
    1d44:	63 e2       	ldi	r22, 0x23	; 35
    1d46:	7b ed       	ldi	r23, 0xDB	; 219
    1d48:	8b e0       	ldi	r24, 0x0B	; 11
    1d4a:	91 ec       	ldi	r25, 0xC1	; 193
    1d4c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divsf3>
    1d50:	e1 96       	adiw	r28, 0x31	; 49
    1d52:	6c af       	std	Y+60, r22	; 0x3c
    1d54:	7d af       	std	Y+61, r23	; 0x3d
    1d56:	8e af       	std	Y+62, r24	; 0x3e
    1d58:	9f af       	std	Y+63, r25	; 0x3f
    1d5a:	e1 97       	sbiw	r28, 0x31	; 49
			ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1d5c:	86 e6       	ldi	r24, 0x66	; 102
    1d5e:	96 e6       	ldi	r25, 0x66	; 102
    1d60:	a6 e7       	ldi	r26, 0x76	; 118
    1d62:	bf eb       	ldi	r27, 0xBF	; 191
    1d64:	65 96       	adiw	r28, 0x15	; 21
    1d66:	8c af       	std	Y+60, r24	; 0x3c
    1d68:	9d af       	std	Y+61, r25	; 0x3d
    1d6a:	ae af       	std	Y+62, r26	; 0x3e
    1d6c:	bf af       	std	Y+63, r27	; 0x3f
    1d6e:	65 97       	sbiw	r28, 0x15	; 21
    1d70:	8f e9       	ldi	r24, 0x9F	; 159
    1d72:	9d ec       	ldi	r25, 0xCD	; 205
    1d74:	aa e8       	ldi	r26, 0x8A	; 138
    1d76:	be e3       	ldi	r27, 0x3E	; 62
    1d78:	69 96       	adiw	r28, 0x19	; 25
    1d7a:	8c af       	std	Y+60, r24	; 0x3c
    1d7c:	9d af       	std	Y+61, r25	; 0x3d
    1d7e:	ae af       	std	Y+62, r26	; 0x3e
    1d80:	bf af       	std	Y+63, r27	; 0x3f
    1d82:	69 97       	sbiw	r28, 0x19	; 25
			break;
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <localization+0x682>
		default:
			break;
	}
	
	if (ca > 0){
    1d86:	a7 96       	adiw	r28, 0x27	; 39
    1d88:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d8a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d8c:	a7 97       	sbiw	r28, 0x27	; 39
    1d8e:	12 16       	cp	r1, r18
    1d90:	13 06       	cpc	r1, r19
    1d92:	0c f0       	brlt	.+2      	; 0x1d96 <localization+0x66a>
    1d94:	4a c3       	rjmp	.+1684   	; 0x242a <localization+0xcfe>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    1d96:	e5 96       	adiw	r28, 0x35	; 53
    1d98:	1c ae       	std	Y+60, r1	; 0x3c
    1d9a:	1d ae       	std	Y+61, r1	; 0x3d
    1d9c:	1e ae       	std	Y+62, r1	; 0x3e
    1d9e:	1f ae       	std	Y+63, r1	; 0x3f
    1da0:	e5 97       	sbiw	r28, 0x35	; 53
    1da2:	e1 96       	adiw	r28, 0x31	; 49
    1da4:	1c ae       	std	Y+60, r1	; 0x3c
    1da6:	1d ae       	std	Y+61, r1	; 0x3d
    1da8:	1e ae       	std	Y+62, r1	; 0x3e
    1daa:	1f ae       	std	Y+63, r1	; 0x3f
    1dac:	e1 97       	sbiw	r28, 0x31	; 49
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    1dae:	f1 01       	movw	r30, r2
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	8c 0f       	add	r24, r28
    1dba:	9d 1f       	adc	r25, r29
    1dbc:	e8 0f       	add	r30, r24
    1dbe:	f9 1f       	adc	r31, r25
    1dc0:	00 ad       	ldd	r16, Z+56	; 0x38
    1dc2:	11 ad       	ldd	r17, Z+57	; 0x39
    1dc4:	a3 96       	adiw	r28, 0x23	; 35
    1dc6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dc8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dca:	a3 97       	sbiw	r28, 0x23	; 35
    1dcc:	ee 0f       	add	r30, r30
    1dce:	ff 1f       	adc	r31, r31
    1dd0:	e8 0f       	add	r30, r24
    1dd2:	f9 1f       	adc	r31, r25
    1dd4:	80 ad       	ldd	r24, Z+56	; 0x38
    1dd6:	91 ad       	ldd	r25, Z+57	; 0x39
    1dd8:	80 17       	cp	r24, r16
    1dda:	91 07       	cpc	r25, r17
    1ddc:	89 f0       	breq	.+34     	; 0x1e00 <localization+0x6d4>
    1dde:	a3 96       	adiw	r28, 0x23	; 35
    1de0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1de2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1de4:	a3 97       	sbiw	r28, 0x23	; 35
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	a5 e4       	ldi	r26, 0x45	; 69
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	ac 0f       	add	r26, r28
    1df0:	bd 1f       	adc	r27, r29
    1df2:	ea 0f       	add	r30, r26
    1df4:	fb 1f       	adc	r31, r27
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	08 17       	cp	r16, r24
    1dfc:	19 07       	cpc	r17, r25
    1dfe:	69 f4       	brne	.+26     	; 0x1e1a <localization+0x6ee>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1e00:	d1 01       	movw	r26, r2
    1e02:	aa 0f       	add	r26, r26
    1e04:	bb 1f       	adc	r27, r27
    1e06:	e5 e4       	ldi	r30, 0x45	; 69
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	ec 0f       	add	r30, r28
    1e0c:	fd 1f       	adc	r31, r29
    1e0e:	ae 0f       	add	r26, r30
    1e10:	bf 1f       	adc	r27, r31
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1e12:	f8 01       	movw	r30, r16
			other_ind = to[indmax];
    1e14:	0d 91       	ld	r16, X+
    1e16:	1c 91       	ld	r17, X
    1e18:	0c c0       	rjmp	.+24     	; 0x1e32 <localization+0x706>
		}
		else{
			coin_ind = to[indmax];
    1e1a:	f1 01       	movw	r30, r2
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	25 e4       	ldi	r18, 0x45	; 69
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	2c 0f       	add	r18, r28
    1e26:	3d 1f       	adc	r19, r29
    1e28:	e2 0f       	add	r30, r18
    1e2a:	f3 1f       	adc	r31, r19
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	f0 81       	ld	r31, Z
    1e30:	e0 2d       	mov	r30, r0
		}
		
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1e32:	a7 96       	adiw	r28, 0x27	; 39
    1e34:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e36:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e38:	a7 97       	sbiw	r28, 0x27	; 39
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <localization+0x714>
    1e3e:	45 c0       	rjmp	.+138    	; 0x1eca <localization+0x79e>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    1e40:	6f 01       	movw	r12, r30
    1e42:	cc 0c       	add	r12, r12
    1e44:	dd 1c       	adc	r13, r13
    1e46:	cc 0c       	add	r12, r12
    1e48:	dd 1c       	adc	r13, r13
    1e4a:	a1 e0       	ldi	r26, 0x01	; 1
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	ac 0f       	add	r26, r28
    1e50:	bd 1f       	adc	r27, r29
    1e52:	ca 0e       	add	r12, r26
    1e54:	db 1e       	adc	r13, r27
    1e56:	78 01       	movw	r14, r16
    1e58:	ee 0c       	add	r14, r14
    1e5a:	ff 1c       	adc	r15, r15
    1e5c:	ee 0c       	add	r14, r14
    1e5e:	ff 1c       	adc	r15, r15
    1e60:	ea 0e       	add	r14, r26
    1e62:	fb 1e       	adc	r15, r27
    1e64:	f7 01       	movw	r30, r14
    1e66:	20 81       	ld	r18, Z
    1e68:	31 81       	ldd	r19, Z+1	; 0x01
    1e6a:	42 81       	ldd	r20, Z+2	; 0x02
    1e6c:	53 81       	ldd	r21, Z+3	; 0x03
    1e6e:	d6 01       	movw	r26, r12
    1e70:	6d 91       	ld	r22, X+
    1e72:	7d 91       	ld	r23, X+
    1e74:	8d 91       	ld	r24, X+
    1e76:	9c 91       	ld	r25, X
    1e78:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	5f e3       	ldi	r21, 0x3F	; 63
    1e84:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1e88:	ad 96       	adiw	r28, 0x2d	; 45
    1e8a:	6c af       	std	Y+60, r22	; 0x3c
    1e8c:	7d af       	std	Y+61, r23	; 0x3d
    1e8e:	8e af       	std	Y+62, r24	; 0x3e
    1e90:	9f af       	std	Y+63, r25	; 0x3f
    1e92:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    1e94:	f7 01       	movw	r30, r14
    1e96:	20 89       	ldd	r18, Z+16	; 0x10
    1e98:	31 89       	ldd	r19, Z+17	; 0x11
    1e9a:	42 89       	ldd	r20, Z+18	; 0x12
    1e9c:	53 89       	ldd	r21, Z+19	; 0x13
    1e9e:	d6 01       	movw	r26, r12
    1ea0:	50 96       	adiw	r26, 0x10	; 16
    1ea2:	6d 91       	ld	r22, X+
    1ea4:	7d 91       	ld	r23, X+
    1ea6:	8d 91       	ld	r24, X+
    1ea8:	9c 91       	ld	r25, X
    1eaa:	53 97       	sbiw	r26, 0x13	; 19
    1eac:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1ebc:	a9 96       	adiw	r28, 0x29	; 41
    1ebe:	6c af       	std	Y+60, r22	; 0x3c
    1ec0:	7d af       	std	Y+61, r23	; 0x3d
    1ec2:	8e af       	std	Y+62, r24	; 0x3e
    1ec4:	9f af       	std	Y+63, r25	; 0x3f
    1ec6:	a9 97       	sbiw	r28, 0x29	; 41
    1ec8:	1e c0       	rjmp	.+60     	; 0x1f06 <localization+0x7da>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	21 e0       	ldi	r18, 0x01	; 1
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	2c 0f       	add	r18, r28
    1ed8:	3d 1f       	adc	r19, r29
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ee4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ee6:	ad 96       	adiw	r28, 0x2d	; 45
    1ee8:	8c af       	std	Y+60, r24	; 0x3c
    1eea:	9d af       	std	Y+61, r25	; 0x3d
    1eec:	ae af       	std	Y+62, r26	; 0x3e
    1eee:	bf af       	std	Y+63, r27	; 0x3f
    1ef0:	ad 97       	sbiw	r28, 0x2d	; 45
			ref_pc[1] = y[coin_ind];
    1ef2:	80 89       	ldd	r24, Z+16	; 0x10
    1ef4:	91 89       	ldd	r25, Z+17	; 0x11
    1ef6:	a2 89       	ldd	r26, Z+18	; 0x12
    1ef8:	b3 89       	ldd	r27, Z+19	; 0x13
    1efa:	a9 96       	adiw	r28, 0x29	; 41
    1efc:	8c af       	std	Y+60, r24	; 0x3c
    1efe:	9d af       	std	Y+61, r25	; 0x3d
    1f00:	ae af       	std	Y+62, r26	; 0x3e
    1f02:	bf af       	std	Y+63, r27	; 0x3f
    1f04:	a9 97       	sbiw	r28, 0x29	; 41
		}
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    1f06:	00 0f       	add	r16, r16
    1f08:	11 1f       	adc	r17, r17
    1f0a:	00 0f       	add	r16, r16
    1f0c:	11 1f       	adc	r17, r17
    1f0e:	a1 e0       	ldi	r26, 0x01	; 1
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ac 0f       	add	r26, r28
    1f14:	bd 1f       	adc	r27, r29
    1f16:	0a 0f       	add	r16, r26
    1f18:	1b 1f       	adc	r17, r27
    1f1a:	ad 96       	adiw	r28, 0x2d	; 45
    1f1c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f1e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f20:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f22:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f24:	ad 97       	sbiw	r28, 0x2d	; 45
    1f26:	f8 01       	movw	r30, r16
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    1f34:	4b 01       	movw	r8, r22
    1f36:	5c 01       	movw	r10, r24
    1f38:	a9 96       	adiw	r28, 0x29	; 41
    1f3a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f3c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f3e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f40:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f42:	a9 97       	sbiw	r28, 0x29	; 41
    1f44:	d8 01       	movw	r26, r16
    1f46:	50 96       	adiw	r26, 0x10	; 16
    1f48:	6d 91       	ld	r22, X+
    1f4a:	7d 91       	ld	r23, X+
    1f4c:	8d 91       	ld	r24, X+
    1f4e:	9c 91       	ld	r25, X
    1f50:	53 97       	sbiw	r26, 0x13	; 19
    1f52:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    1f56:	6b 01       	movw	r12, r22
    1f58:	7c 01       	movw	r14, r24
		
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    1f5a:	a5 01       	movw	r20, r10
    1f5c:	94 01       	movw	r18, r8
    1f5e:	c5 01       	movw	r24, r10
    1f60:	b4 01       	movw	r22, r8
    1f62:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1f66:	2b 01       	movw	r4, r22
    1f68:	3c 01       	movw	r6, r24
    1f6a:	a7 01       	movw	r20, r14
    1f6c:	96 01       	movw	r18, r12
    1f6e:	c7 01       	movw	r24, r14
    1f70:	b6 01       	movw	r22, r12
    1f72:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1f76:	9b 01       	movw	r18, r22
    1f78:	ac 01       	movw	r20, r24
    1f7a:	c3 01       	movw	r24, r6
    1f7c:	b2 01       	movw	r22, r4
    1f7e:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    1f82:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <sqrt>
    1f86:	2b 01       	movw	r4, r22
    1f88:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    1f8a:	9b 01       	movw	r18, r22
    1f8c:	ac 01       	movw	r20, r24
    1f8e:	c5 01       	movw	r24, r10
    1f90:	b4 01       	movw	r22, r8
    1f92:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divsf3>
    1f96:	4b 01       	movw	r8, r22
    1f98:	5c 01       	movw	r10, r24
    1f9a:	6d 96       	adiw	r28, 0x1d	; 29
    1f9c:	6c af       	std	Y+60, r22	; 0x3c
    1f9e:	7d af       	std	Y+61, r23	; 0x3d
    1fa0:	8e af       	std	Y+62, r24	; 0x3e
    1fa2:	9f af       	std	Y+63, r25	; 0x3f
    1fa4:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    1fa6:	a3 01       	movw	r20, r6
    1fa8:	92 01       	movw	r18, r4
    1faa:	c7 01       	movw	r24, r14
    1fac:	b6 01       	movw	r22, r12
    1fae:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divsf3>
    1fb2:	6b 01       	movw	r12, r22
    1fb4:	7c 01       	movw	r14, r24
    1fb6:	a1 96       	adiw	r28, 0x21	; 33
    1fb8:	6c af       	std	Y+60, r22	; 0x3c
    1fba:	7d af       	std	Y+61, r23	; 0x3d
    1fbc:	8e af       	std	Y+62, r24	; 0x3e
    1fbe:	9f af       	std	Y+63, r25	; 0x3f
    1fc0:	a1 97       	sbiw	r28, 0x21	; 33
		
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    1fc2:	65 96       	adiw	r28, 0x15	; 21
    1fc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fca:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fcc:	65 97       	sbiw	r28, 0x15	; 21
    1fce:	c5 01       	movw	r24, r10
    1fd0:	b4 01       	movw	r22, r8
    1fd2:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1fd6:	4b 01       	movw	r8, r22
    1fd8:	5c 01       	movw	r10, r24
    1fda:	69 96       	adiw	r28, 0x19	; 25
    1fdc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fde:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fe0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fe2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fe4:	69 97       	sbiw	r28, 0x19	; 25
    1fe6:	c7 01       	movw	r24, r14
    1fe8:	b6 01       	movw	r22, r12
    1fea:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    1fee:	9b 01       	movw	r18, r22
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	c5 01       	movw	r24, r10
    1ff4:	b4 01       	movw	r22, r8
    1ff6:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    1ffa:	2b 01       	movw	r4, r22
    1ffc:	3c 01       	movw	r6, r24
		float sintheta = sqrt(1 - costheta*costheta);
    1ffe:	9b 01       	movw	r18, r22
    2000:	ac 01       	movw	r20, r24
    2002:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    2006:	9b 01       	movw	r18, r22
    2008:	ac 01       	movw	r20, r24
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	80 e8       	ldi	r24, 0x80	; 128
    2010:	9f e3       	ldi	r25, 0x3F	; 63
    2012:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    2016:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <sqrt>
    201a:	a5 96       	adiw	r28, 0x25	; 37
    201c:	6c af       	std	Y+60, r22	; 0x3c
    201e:	7d af       	std	Y+61, r23	; 0x3d
    2020:	8e af       	std	Y+62, r24	; 0x3e
    2022:	9f af       	std	Y+63, r25	; 0x3f
    2024:	a5 97       	sbiw	r28, 0x25	; 37
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    2026:	fe 01       	movw	r30, r28
    2028:	ef 5a       	subi	r30, 0xAF	; 175
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	7f 01       	movw	r14, r30
    202e:	8e 01       	movw	r16, r28
    2030:	07 5a       	subi	r16, 0xA7	; 167
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	9b 01       	movw	r18, r22
    2036:	ac 01       	movw	r20, r24
    2038:	c3 01       	movw	r24, r6
    203a:	b2 01       	movw	r22, r4
    203c:	0e 94 f6 06 	call	0xdec	; 0xdec <find_sign>
    2040:	4c 01       	movw	r8, r24
		
		
		if(if_pos_sin == 1){
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	91 05       	cpc	r25, r1
    2046:	09 f0       	breq	.+2      	; 0x204a <localization+0x91e>
    2048:	a1 c0       	rjmp	.+322    	; 0x218c <localization+0xa60>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) + sintheta*(ref_pc[1] - camera_center[1]);
    204a:	0f 2e       	mov	r0, r31
    204c:	fe e1       	ldi	r31, 0x1E	; 30
    204e:	af 2e       	mov	r10, r31
    2050:	f1 e0       	ldi	r31, 0x01	; 1
    2052:	bf 2e       	mov	r11, r31
    2054:	f0 2d       	mov	r31, r0
    2056:	d5 01       	movw	r26, r10
    2058:	2d 91       	ld	r18, X+
    205a:	3d 91       	ld	r19, X+
    205c:	4d 91       	ld	r20, X+
    205e:	5c 91       	ld	r21, X
    2060:	ad 96       	adiw	r28, 0x2d	; 45
    2062:	6c ad       	ldd	r22, Y+60	; 0x3c
    2064:	7d ad       	ldd	r23, Y+61	; 0x3d
    2066:	8e ad       	ldd	r24, Y+62	; 0x3e
    2068:	9f ad       	ldd	r25, Y+63	; 0x3f
    206a:	ad 97       	sbiw	r28, 0x2d	; 45
    206c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    2070:	a3 01       	movw	r20, r6
    2072:	92 01       	movw	r18, r4
    2074:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    2078:	9b 01       	movw	r18, r22
    207a:	ac 01       	movw	r20, r24
    207c:	e5 96       	adiw	r28, 0x35	; 53
    207e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2080:	7d ad       	ldd	r23, Y+61	; 0x3d
    2082:	8e ad       	ldd	r24, Y+62	; 0x3e
    2084:	9f ad       	ldd	r25, Y+63	; 0x3f
    2086:	e5 97       	sbiw	r28, 0x35	; 53
    2088:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    208c:	6b 01       	movw	r12, r22
    208e:	7c 01       	movw	r14, r24
    2090:	02 e2       	ldi	r16, 0x22	; 34
    2092:	11 e0       	ldi	r17, 0x01	; 1
    2094:	f8 01       	movw	r30, r16
    2096:	20 81       	ld	r18, Z
    2098:	31 81       	ldd	r19, Z+1	; 0x01
    209a:	42 81       	ldd	r20, Z+2	; 0x02
    209c:	53 81       	ldd	r21, Z+3	; 0x03
    209e:	a9 96       	adiw	r28, 0x29	; 41
    20a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    20a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    20a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    20a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20a8:	a9 97       	sbiw	r28, 0x29	; 41
    20aa:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    20ae:	a5 96       	adiw	r28, 0x25	; 37
    20b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    20b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    20b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    20b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    20b8:	a5 97       	sbiw	r28, 0x25	; 37
    20ba:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	c7 01       	movw	r24, r14
    20c4:	b6 01       	movw	r22, r12
    20c6:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    20ca:	ed 96       	adiw	r28, 0x3d	; 61
    20cc:	ae ad       	ldd	r26, Y+62	; 0x3e
    20ce:	bf ad       	ldd	r27, Y+63	; 0x3f
    20d0:	ed 97       	sbiw	r28, 0x3d	; 61
    20d2:	6d 93       	st	X+, r22
    20d4:	7d 93       	st	X+, r23
    20d6:	8d 93       	st	X+, r24
    20d8:	9c 93       	st	X, r25
    20da:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) - sintheta*(ref_pc[0] - camera_center[0]);
    20dc:	f8 01       	movw	r30, r16
    20de:	20 81       	ld	r18, Z
    20e0:	31 81       	ldd	r19, Z+1	; 0x01
    20e2:	42 81       	ldd	r20, Z+2	; 0x02
    20e4:	53 81       	ldd	r21, Z+3	; 0x03
    20e6:	a9 96       	adiw	r28, 0x29	; 41
    20e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    20ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    20ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    20ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    20f0:	a9 97       	sbiw	r28, 0x29	; 41
    20f2:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    20f6:	a3 01       	movw	r20, r6
    20f8:	92 01       	movw	r18, r4
    20fa:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    20fe:	9b 01       	movw	r18, r22
    2100:	ac 01       	movw	r20, r24
    2102:	e1 96       	adiw	r28, 0x31	; 49
    2104:	6c ad       	ldd	r22, Y+60	; 0x3c
    2106:	7d ad       	ldd	r23, Y+61	; 0x3d
    2108:	8e ad       	ldd	r24, Y+62	; 0x3e
    210a:	9f ad       	ldd	r25, Y+63	; 0x3f
    210c:	e1 97       	sbiw	r28, 0x31	; 49
    210e:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    2112:	6b 01       	movw	r12, r22
    2114:	7c 01       	movw	r14, r24
    2116:	d5 01       	movw	r26, r10
    2118:	2d 91       	ld	r18, X+
    211a:	3d 91       	ld	r19, X+
    211c:	4d 91       	ld	r20, X+
    211e:	5c 91       	ld	r21, X
    2120:	ad 96       	adiw	r28, 0x2d	; 45
    2122:	6c ad       	ldd	r22, Y+60	; 0x3c
    2124:	7d ad       	ldd	r23, Y+61	; 0x3d
    2126:	8e ad       	ldd	r24, Y+62	; 0x3e
    2128:	9f ad       	ldd	r25, Y+63	; 0x3f
    212a:	ad 97       	sbiw	r28, 0x2d	; 45
    212c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    2130:	a5 96       	adiw	r28, 0x25	; 37
    2132:	2c ad       	ldd	r18, Y+60	; 0x3c
    2134:	3d ad       	ldd	r19, Y+61	; 0x3d
    2136:	4e ad       	ldd	r20, Y+62	; 0x3e
    2138:	5f ad       	ldd	r21, Y+63	; 0x3f
    213a:	a5 97       	sbiw	r28, 0x25	; 37
    213c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    2140:	9b 01       	movw	r18, r22
    2142:	ac 01       	movw	r20, r24
    2144:	c7 01       	movw	r24, r14
    2146:	b6 01       	movw	r22, r12
    2148:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    214c:	ed 96       	adiw	r28, 0x3d	; 61
    214e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2150:	ff ad       	ldd	r31, Y+63	; 0x3f
    2152:	ed 97       	sbiw	r28, 0x3d	; 61
    2154:	64 83       	std	Z+4, r22	; 0x04
    2156:	75 83       	std	Z+5, r23	; 0x05
    2158:	86 83       	std	Z+6, r24	; 0x06
    215a:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    215c:	ef 96       	adiw	r28, 0x3f	; 63
    215e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2160:	bf ad       	ldd	r27, Y+63	; 0x3f
    2162:	ef 97       	sbiw	r28, 0x3f	; 63
    2164:	4d 92       	st	X+, r4
    2166:	5d 92       	st	X+, r5
    2168:	6d 92       	st	X+, r6
    216a:	7c 92       	st	X, r7
    216c:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = sintheta;
    216e:	a5 96       	adiw	r28, 0x25	; 37
    2170:	8c ad       	ldd	r24, Y+60	; 0x3c
    2172:	9d ad       	ldd	r25, Y+61	; 0x3d
    2174:	ae ad       	ldd	r26, Y+62	; 0x3e
    2176:	bf ad       	ldd	r27, Y+63	; 0x3f
    2178:	a5 97       	sbiw	r28, 0x25	; 37
    217a:	ef 96       	adiw	r28, 0x3f	; 63
    217c:	ee ad       	ldd	r30, Y+62	; 0x3e
    217e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2180:	ef 97       	sbiw	r28, 0x3f	; 63
    2182:	84 83       	std	Z+4, r24	; 0x04
    2184:	95 83       	std	Z+5, r25	; 0x05
    2186:	a6 83       	std	Z+6, r26	; 0x06
    2188:	b7 83       	std	Z+7, r27	; 0x07
    218a:	a1 c0       	rjmp	.+322    	; 0x22ce <localization+0xba2>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - camera_center[0]) - sintheta*(ref_pc[1] - camera_center[1]);
    218c:	0f 2e       	mov	r0, r31
    218e:	fe e1       	ldi	r31, 0x1E	; 30
    2190:	af 2e       	mov	r10, r31
    2192:	f1 e0       	ldi	r31, 0x01	; 1
    2194:	bf 2e       	mov	r11, r31
    2196:	f0 2d       	mov	r31, r0
    2198:	d5 01       	movw	r26, r10
    219a:	2d 91       	ld	r18, X+
    219c:	3d 91       	ld	r19, X+
    219e:	4d 91       	ld	r20, X+
    21a0:	5c 91       	ld	r21, X
    21a2:	ad 96       	adiw	r28, 0x2d	; 45
    21a4:	6c ad       	ldd	r22, Y+60	; 0x3c
    21a6:	7d ad       	ldd	r23, Y+61	; 0x3d
    21a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    21aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ac:	ad 97       	sbiw	r28, 0x2d	; 45
    21ae:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    21b2:	a3 01       	movw	r20, r6
    21b4:	92 01       	movw	r18, r4
    21b6:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	e5 96       	adiw	r28, 0x35	; 53
    21c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    21c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    21c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    21c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    21c8:	e5 97       	sbiw	r28, 0x35	; 53
    21ca:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    21ce:	6b 01       	movw	r12, r22
    21d0:	7c 01       	movw	r14, r24
    21d2:	02 e2       	ldi	r16, 0x22	; 34
    21d4:	11 e0       	ldi	r17, 0x01	; 1
    21d6:	f8 01       	movw	r30, r16
    21d8:	20 81       	ld	r18, Z
    21da:	31 81       	ldd	r19, Z+1	; 0x01
    21dc:	42 81       	ldd	r20, Z+2	; 0x02
    21de:	53 81       	ldd	r21, Z+3	; 0x03
    21e0:	a9 96       	adiw	r28, 0x29	; 41
    21e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    21e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    21e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    21e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ea:	a9 97       	sbiw	r28, 0x29	; 41
    21ec:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    21f0:	a5 96       	adiw	r28, 0x25	; 37
    21f2:	2c ad       	ldd	r18, Y+60	; 0x3c
    21f4:	3d ad       	ldd	r19, Y+61	; 0x3d
    21f6:	4e ad       	ldd	r20, Y+62	; 0x3e
    21f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    21fa:	a5 97       	sbiw	r28, 0x25	; 37
    21fc:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    2200:	9b 01       	movw	r18, r22
    2202:	ac 01       	movw	r20, r24
    2204:	c7 01       	movw	r24, r14
    2206:	b6 01       	movw	r22, r12
    2208:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    220c:	ed 96       	adiw	r28, 0x3d	; 61
    220e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2210:	bf ad       	ldd	r27, Y+63	; 0x3f
    2212:	ed 97       	sbiw	r28, 0x3d	; 61
    2214:	6d 93       	st	X+, r22
    2216:	7d 93       	st	X+, r23
    2218:	8d 93       	st	X+, r24
    221a:	9c 93       	st	X, r25
    221c:	13 97       	sbiw	r26, 0x03	; 3
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - camera_center[1]) + sintheta*(ref_pc[0] - camera_center[0]);
    221e:	f8 01       	movw	r30, r16
    2220:	20 81       	ld	r18, Z
    2222:	31 81       	ldd	r19, Z+1	; 0x01
    2224:	42 81       	ldd	r20, Z+2	; 0x02
    2226:	53 81       	ldd	r21, Z+3	; 0x03
    2228:	a9 96       	adiw	r28, 0x29	; 41
    222a:	6c ad       	ldd	r22, Y+60	; 0x3c
    222c:	7d ad       	ldd	r23, Y+61	; 0x3d
    222e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2230:	9f ad       	ldd	r25, Y+63	; 0x3f
    2232:	a9 97       	sbiw	r28, 0x29	; 41
    2234:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    2238:	a3 01       	movw	r20, r6
    223a:	92 01       	movw	r18, r4
    223c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    2240:	9b 01       	movw	r18, r22
    2242:	ac 01       	movw	r20, r24
    2244:	e1 96       	adiw	r28, 0x31	; 49
    2246:	6c ad       	ldd	r22, Y+60	; 0x3c
    2248:	7d ad       	ldd	r23, Y+61	; 0x3d
    224a:	8e ad       	ldd	r24, Y+62	; 0x3e
    224c:	9f ad       	ldd	r25, Y+63	; 0x3f
    224e:	e1 97       	sbiw	r28, 0x31	; 49
    2250:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    2254:	6b 01       	movw	r12, r22
    2256:	7c 01       	movw	r14, r24
    2258:	d5 01       	movw	r26, r10
    225a:	2d 91       	ld	r18, X+
    225c:	3d 91       	ld	r19, X+
    225e:	4d 91       	ld	r20, X+
    2260:	5c 91       	ld	r21, X
    2262:	ad 96       	adiw	r28, 0x2d	; 45
    2264:	6c ad       	ldd	r22, Y+60	; 0x3c
    2266:	7d ad       	ldd	r23, Y+61	; 0x3d
    2268:	8e ad       	ldd	r24, Y+62	; 0x3e
    226a:	9f ad       	ldd	r25, Y+63	; 0x3f
    226c:	ad 97       	sbiw	r28, 0x2d	; 45
    226e:	0e 94 12 1b 	call	0x3624	; 0x3624 <__subsf3>
    2272:	a5 96       	adiw	r28, 0x25	; 37
    2274:	2c ad       	ldd	r18, Y+60	; 0x3c
    2276:	3d ad       	ldd	r19, Y+61	; 0x3d
    2278:	4e ad       	ldd	r20, Y+62	; 0x3e
    227a:	5f ad       	ldd	r21, Y+63	; 0x3f
    227c:	a5 97       	sbiw	r28, 0x25	; 37
    227e:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    2282:	9b 01       	movw	r18, r22
    2284:	ac 01       	movw	r20, r24
    2286:	c7 01       	movw	r24, r14
    2288:	b6 01       	movw	r22, r12
    228a:	0e 94 13 1b 	call	0x3626	; 0x3626 <__addsf3>
    228e:	ed 96       	adiw	r28, 0x3d	; 61
    2290:	ee ad       	ldd	r30, Y+62	; 0x3e
    2292:	ff ad       	ldd	r31, Y+63	; 0x3f
    2294:	ed 97       	sbiw	r28, 0x3d	; 61
    2296:	64 83       	std	Z+4, r22	; 0x04
    2298:	75 83       	std	Z+5, r23	; 0x05
    229a:	86 83       	std	Z+6, r24	; 0x06
    229c:	97 83       	std	Z+7, r25	; 0x07
			dir[0] = costheta;
    229e:	ef 96       	adiw	r28, 0x3f	; 63
    22a0:	ae ad       	ldd	r26, Y+62	; 0x3e
    22a2:	bf ad       	ldd	r27, Y+63	; 0x3f
    22a4:	ef 97       	sbiw	r28, 0x3f	; 63
    22a6:	4d 92       	st	X+, r4
    22a8:	5d 92       	st	X+, r5
    22aa:	6d 92       	st	X+, r6
    22ac:	7c 92       	st	X, r7
    22ae:	13 97       	sbiw	r26, 0x03	; 3
			dir[1] = -sintheta;
    22b0:	a5 96       	adiw	r28, 0x25	; 37
    22b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    22b4:	9d ad       	ldd	r25, Y+61	; 0x3d
    22b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    22b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    22ba:	a5 97       	sbiw	r28, 0x25	; 37
    22bc:	b0 58       	subi	r27, 0x80	; 128
    22be:	ef 96       	adiw	r28, 0x3f	; 63
    22c0:	ee ad       	ldd	r30, Y+62	; 0x3e
    22c2:	ff ad       	ldd	r31, Y+63	; 0x3f
    22c4:	ef 97       	sbiw	r28, 0x3f	; 63
    22c6:	84 83       	std	Z+4, r24	; 0x04
    22c8:	95 83       	std	Z+5, r25	; 0x05
    22ca:	a6 83       	std	Z+6, r26	; 0x06
    22cc:	b7 83       	std	Z+7, r27	; 0x07
		}
		c_wii_last[0] = c_wii[0];
    22ce:	ed 96       	adiw	r28, 0x3d	; 61
    22d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    22d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    22d4:	ed 97       	sbiw	r28, 0x3d	; 61
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	a2 81       	ldd	r26, Z+2	; 0x02
    22dc:	b3 81       	ldd	r27, Z+3	; 0x03
    22de:	80 93 6e 01 	sts	0x016E, r24
    22e2:	90 93 6f 01 	sts	0x016F, r25
    22e6:	a0 93 70 01 	sts	0x0170, r26
    22ea:	b0 93 71 01 	sts	0x0171, r27
		c_wii_last[1] = c_wii[1];
    22ee:	84 81       	ldd	r24, Z+4	; 0x04
    22f0:	95 81       	ldd	r25, Z+5	; 0x05
    22f2:	a6 81       	ldd	r26, Z+6	; 0x06
    22f4:	b7 81       	ldd	r27, Z+7	; 0x07
    22f6:	80 93 72 01 	sts	0x0172, r24
    22fa:	90 93 73 01 	sts	0x0173, r25
    22fe:	a0 93 74 01 	sts	0x0174, r26
    2302:	b0 93 75 01 	sts	0x0175, r27
		dir_last[0] = dir[0];
    2306:	ef 96       	adiw	r28, 0x3f	; 63
    2308:	ee ad       	ldd	r30, Y+62	; 0x3e
    230a:	ff ad       	ldd	r31, Y+63	; 0x3f
    230c:	ef 97       	sbiw	r28, 0x3f	; 63
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	a2 81       	ldd	r26, Z+2	; 0x02
    2314:	b3 81       	ldd	r27, Z+3	; 0x03
    2316:	80 93 66 01 	sts	0x0166, r24
    231a:	90 93 67 01 	sts	0x0167, r25
    231e:	a0 93 68 01 	sts	0x0168, r26
    2322:	b0 93 69 01 	sts	0x0169, r27
		dir_last[1] = dir[1];
    2326:	84 81       	ldd	r24, Z+4	; 0x04
    2328:	95 81       	ldd	r25, Z+5	; 0x05
    232a:	a6 81       	ldd	r26, Z+6	; 0x06
    232c:	b7 81       	ldd	r27, Z+7	; 0x07
    232e:	80 93 6a 01 	sts	0x016A, r24
    2332:	90 93 6b 01 	sts	0x016B, r25
    2336:	a0 93 6c 01 	sts	0x016C, r26
    233a:	b0 93 6d 01 	sts	0x016D, r27
		
		if (*state == 4){
    233e:	cd 57       	subi	r28, 0x7D	; 125
    2340:	df 4f       	sbci	r29, 0xFF	; 255
    2342:	a8 81       	ld	r26, Y
    2344:	b9 81       	ldd	r27, Y+1	; 0x01
    2346:	c3 58       	subi	r28, 0x83	; 131
    2348:	d0 40       	sbci	r29, 0x00	; 0
    234a:	8d 91       	ld	r24, X+
    234c:	9c 91       	ld	r25, X
    234e:	04 97       	sbiw	r24, 0x04	; 4
    2350:	e9 f5       	brne	.+122    	; 0x23cc <localization+0xca0>
			int if_reach = find_if_reach(c_wii[0], c_wii[1], &goal[0]);
    2352:	ed 96       	adiw	r28, 0x3d	; 61
    2354:	ee ad       	ldd	r30, Y+62	; 0x3e
    2356:	ff ad       	ldd	r31, Y+63	; 0x3f
    2358:	ed 97       	sbiw	r28, 0x3d	; 61
    235a:	24 81       	ldd	r18, Z+4	; 0x04
    235c:	35 81       	ldd	r19, Z+5	; 0x05
    235e:	46 81       	ldd	r20, Z+6	; 0x06
    2360:	57 81       	ldd	r21, Z+7	; 0x07
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	cb 57       	subi	r28, 0x7B	; 123
    236c:	df 4f       	sbci	r29, 0xFF	; 255
    236e:	08 81       	ld	r16, Y
    2370:	19 81       	ldd	r17, Y+1	; 0x01
    2372:	c5 58       	subi	r28, 0x85	; 133
    2374:	d0 40       	sbci	r29, 0x00	; 0
    2376:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <find_if_reach>
			if (!if_reach){
    237a:	89 2b       	or	r24, r25
    237c:	f9 f4       	brne	.+62     	; 0x23bc <localization+0xc90>
				cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    237e:	ef 96       	adiw	r28, 0x3f	; 63
    2380:	ae ac       	ldd	r10, Y+62	; 0x3e
    2382:	bf ac       	ldd	r11, Y+63	; 0x3f
    2384:	ef 97       	sbiw	r28, 0x3f	; 63
    2386:	ed 96       	adiw	r28, 0x3d	; 61
    2388:	ce ac       	ldd	r12, Y+62	; 0x3e
    238a:	df ac       	ldd	r13, Y+63	; 0x3f
    238c:	ed 97       	sbiw	r28, 0x3d	; 61
    238e:	78 01       	movw	r14, r16
    2390:	93 01       	movw	r18, r6
    2392:	82 01       	movw	r16, r4
    2394:	a5 96       	adiw	r28, 0x25	; 37
    2396:	4c ad       	ldd	r20, Y+60	; 0x3c
    2398:	5d ad       	ldd	r21, Y+61	; 0x3d
    239a:	6e ad       	ldd	r22, Y+62	; 0x3e
    239c:	7f ad       	ldd	r23, Y+63	; 0x3f
    239e:	a5 97       	sbiw	r28, 0x25	; 37
    23a0:	c4 01       	movw	r24, r8
    23a2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <cal_angle>
				PID_p2p(Kp_p2p, Kd_p2p);
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	48 ec       	ldi	r20, 0xC8	; 200
    23ac:	53 e4       	ldi	r21, 0x43	; 67
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	92 e4       	ldi	r25, 0x42	; 66
    23b6:	0e 94 22 0a 	call	0x1444	; 0x1444 <PID_p2p>
    23ba:	08 c0       	rjmp	.+16     	; 0x23cc <localization+0xca0>
			}
			else{ // reach goal, stop
				OCR1B = 0;
    23bc:	10 92 8b 00 	sts	0x008B, r1
    23c0:	10 92 8a 00 	sts	0x008A, r1
				OCR1C = 0;
    23c4:	10 92 8d 00 	sts	0x008D, r1
    23c8:	10 92 8c 00 	sts	0x008C, r1
				//if (*state == 4){
					//*state = 5;
				//}
			}
		}
		if (*state == 3){
    23cc:	cd 57       	subi	r28, 0x7D	; 125
    23ce:	df 4f       	sbci	r29, 0xFF	; 255
    23d0:	a8 81       	ld	r26, Y
    23d2:	b9 81       	ldd	r27, Y+1	; 0x01
    23d4:	c3 58       	subi	r28, 0x83	; 131
    23d6:	d0 40       	sbci	r29, 0x00	; 0
    23d8:	8d 91       	ld	r24, X+
    23da:	9c 91       	ld	r25, X
    23dc:	03 97       	sbiw	r24, 0x03	; 3
    23de:	09 f0       	breq	.+2      	; 0x23e2 <localization+0xcb6>
    23e0:	5c c0       	rjmp	.+184    	; 0x249a <localization+0xd6e>
			cal_angle(if_pos_sin, sintheta, costheta, &goal[0], &c_wii[0], &dir[0]);
    23e2:	ef 96       	adiw	r28, 0x3f	; 63
    23e4:	ae ac       	ldd	r10, Y+62	; 0x3e
    23e6:	bf ac       	ldd	r11, Y+63	; 0x3f
    23e8:	ef 97       	sbiw	r28, 0x3f	; 63
    23ea:	ed 96       	adiw	r28, 0x3d	; 61
    23ec:	ce ac       	ldd	r12, Y+62	; 0x3e
    23ee:	df ac       	ldd	r13, Y+63	; 0x3f
    23f0:	ed 97       	sbiw	r28, 0x3d	; 61
    23f2:	cb 57       	subi	r28, 0x7B	; 123
    23f4:	df 4f       	sbci	r29, 0xFF	; 255
    23f6:	e8 80       	ld	r14, Y
    23f8:	f9 80       	ldd	r15, Y+1	; 0x01
    23fa:	c5 58       	subi	r28, 0x85	; 133
    23fc:	d0 40       	sbci	r29, 0x00	; 0
    23fe:	93 01       	movw	r18, r6
    2400:	82 01       	movw	r16, r4
    2402:	a5 96       	adiw	r28, 0x25	; 37
    2404:	4c ad       	ldd	r20, Y+60	; 0x3c
    2406:	5d ad       	ldd	r21, Y+61	; 0x3d
    2408:	6e ad       	ldd	r22, Y+62	; 0x3e
    240a:	7f ad       	ldd	r23, Y+63	; 0x3f
    240c:	a5 97       	sbiw	r28, 0x25	; 37
    240e:	c4 01       	movw	r24, r8
    2410:	0e 94 da 07 	call	0xfb4	; 0xfb4 <cal_angle>
			PID_alpha(Kp_loc, Kd_loc);
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	48 ec       	ldi	r20, 0xC8	; 200
    241a:	53 e4       	ldi	r21, 0x43	; 67
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	80 e7       	ldi	r24, 0x70	; 112
    2422:	92 e4       	ldi	r25, 0x42	; 66
    2424:	0e 94 e6 08 	call	0x11cc	; 0x11cc <PID_alpha>
    2428:	38 c0       	rjmp	.+112    	; 0x249a <localization+0xd6e>
		}
		
	}
	else{
		c_wii[0] = c_wii_last[0];
    242a:	80 91 6e 01 	lds	r24, 0x016E
    242e:	90 91 6f 01 	lds	r25, 0x016F
    2432:	a0 91 70 01 	lds	r26, 0x0170
    2436:	b0 91 71 01 	lds	r27, 0x0171
    243a:	ed 96       	adiw	r28, 0x3d	; 61
    243c:	ee ad       	ldd	r30, Y+62	; 0x3e
    243e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2440:	ed 97       	sbiw	r28, 0x3d	; 61
    2442:	80 83       	st	Z, r24
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	a2 83       	std	Z+2, r26	; 0x02
    2448:	b3 83       	std	Z+3, r27	; 0x03
		c_wii[1] = c_wii_last[1];
    244a:	80 91 72 01 	lds	r24, 0x0172
    244e:	90 91 73 01 	lds	r25, 0x0173
    2452:	a0 91 74 01 	lds	r26, 0x0174
    2456:	b0 91 75 01 	lds	r27, 0x0175
    245a:	84 83       	std	Z+4, r24	; 0x04
    245c:	95 83       	std	Z+5, r25	; 0x05
    245e:	a6 83       	std	Z+6, r26	; 0x06
    2460:	b7 83       	std	Z+7, r27	; 0x07
		dir[0] = dir_last[0];
    2462:	80 91 66 01 	lds	r24, 0x0166
    2466:	90 91 67 01 	lds	r25, 0x0167
    246a:	a0 91 68 01 	lds	r26, 0x0168
    246e:	b0 91 69 01 	lds	r27, 0x0169
    2472:	ef 96       	adiw	r28, 0x3f	; 63
    2474:	ee ad       	ldd	r30, Y+62	; 0x3e
    2476:	ff ad       	ldd	r31, Y+63	; 0x3f
    2478:	ef 97       	sbiw	r28, 0x3f	; 63
    247a:	80 83       	st	Z, r24
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	a2 83       	std	Z+2, r26	; 0x02
    2480:	b3 83       	std	Z+3, r27	; 0x03
		dir[1] = dir_last[1];
    2482:	80 91 6a 01 	lds	r24, 0x016A
    2486:	90 91 6b 01 	lds	r25, 0x016B
    248a:	a0 91 6c 01 	lds	r26, 0x016C
    248e:	b0 91 6d 01 	lds	r27, 0x016D
    2492:	84 83       	std	Z+4, r24	; 0x04
    2494:	95 83       	std	Z+5, r25	; 0x05
    2496:	a6 83       	std	Z+6, r26	; 0x06
    2498:	b7 83       	std	Z+7, r27	; 0x07
	}
	m_usb_tx_string("Position x:");
    249a:	89 e3       	ldi	r24, 0x39	; 57
    249c:	92 e0       	ldi	r25, 0x02	; 2
    249e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(c_wii[0]);
    24a2:	ed 96       	adiw	r28, 0x3d	; 61
    24a4:	ae ad       	ldd	r26, Y+62	; 0x3e
    24a6:	bf ad       	ldd	r27, Y+63	; 0x3f
    24a8:	ed 97       	sbiw	r28, 0x3d	; 61
    24aa:	6d 91       	ld	r22, X+
    24ac:	7d 91       	ld	r23, X+
    24ae:	8d 91       	ld	r24, X+
    24b0:	9c 91       	ld	r25, X
    24b2:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    24b6:	cb 01       	movw	r24, r22
    24b8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("		y:");
    24bc:	84 e3       	ldi	r24, 0x34	; 52
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(c_wii[1]);
    24c4:	ed 96       	adiw	r28, 0x3d	; 61
    24c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    24c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    24ca:	ed 97       	sbiw	r28, 0x3d	; 61
    24cc:	64 81       	ldd	r22, Z+4	; 0x04
    24ce:	75 81       	ldd	r23, Z+5	; 0x05
    24d0:	86 81       	ldd	r24, Z+6	; 0x06
    24d2:	97 81       	ldd	r25, Z+7	; 0x07
    24d4:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    24d8:	cb 01       	movw	r24, r22
    24da:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    24de:	82 e3       	ldi	r24, 0x32	; 50
    24e0:	92 e0       	ldi	r25, 0x02	; 2
    24e2:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	
	m_usb_tx_string("Direction vx: 0.");
    24e6:	81 e2       	ldi	r24, 0x21	; 33
    24e8:	92 e0       	ldi	r25, 0x02	; 2
    24ea:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(dir[0]*1000);
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a e7       	ldi	r20, 0x7A	; 122
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	ef 96       	adiw	r28, 0x3f	; 63
    24f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    24fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    24fc:	ef 97       	sbiw	r28, 0x3f	; 63
    24fe:	6d 91       	ld	r22, X+
    2500:	7d 91       	ld	r23, X+
    2502:	8d 91       	ld	r24, X+
    2504:	9c 91       	ld	r25, X
    2506:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    250a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    250e:	cb 01       	movw	r24, r22
    2510:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("	vy: 0.");
    2514:	89 e1       	ldi	r24, 0x19	; 25
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
	m_usb_tx_int(dir[1]*1000);
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	ef 96       	adiw	r28, 0x3f	; 63
    2526:	ee ad       	ldd	r30, Y+62	; 0x3e
    2528:	ff ad       	ldd	r31, Y+63	; 0x3f
    252a:	ef 97       	sbiw	r28, 0x3f	; 63
    252c:	64 81       	ldd	r22, Z+4	; 0x04
    252e:	75 81       	ldd	r23, Z+5	; 0x05
    2530:	86 81       	ldd	r24, Z+6	; 0x06
    2532:	97 81       	ldd	r25, Z+7	; 0x07
    2534:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__mulsf3>
    2538:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    253c:	cb 01       	movw	r24, r22
    253e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
	m_usb_tx_string("\n");
    2542:	87 e1       	ldi	r24, 0x17	; 23
    2544:	92 e0       	ldi	r25, 0x02	; 2
    2546:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <localization+0xe48>
    254c:	eb 96       	adiw	r28, 0x3b	; 59
    254e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2550:	3f ad       	ldd	r19, Y+63	; 0x3f
    2552:	eb 97       	sbiw	r28, 0x3b	; 59
    2554:	2c 5f       	subi	r18, 0xFC	; 252
    2556:	3f 4f       	sbci	r19, 0xFF	; 255
    2558:	eb 96       	adiw	r28, 0x3b	; 59
    255a:	3f af       	std	Y+63, r19	; 0x3f
    255c:	2e af       	std	Y+62, r18	; 0x3e
    255e:	eb 97       	sbiw	r28, 0x3b	; 59
    2560:	e3 96       	adiw	r28, 0x33	; 51
    2562:	8e ad       	ldd	r24, Y+62	; 0x3e
    2564:	9f ad       	ldd	r25, Y+63	; 0x3f
    2566:	e3 97       	sbiw	r28, 0x33	; 51
    2568:	04 96       	adiw	r24, 0x04	; 4
    256a:	e3 96       	adiw	r28, 0x33	; 51
    256c:	9f af       	std	Y+63, r25	; 0x3f
    256e:	8e af       	std	Y+62, r24	; 0x3e
    2570:	e3 97       	sbiw	r28, 0x33	; 51
    2572:	a5 ca       	rjmp	.-2742   	; 0x1abe <localization+0x392>
}
    2574:	ca 57       	subi	r28, 0x7A	; 122
    2576:	df 4f       	sbci	r29, 0xFF	; 255
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	df 90       	pop	r13
    2590:	cf 90       	pop	r12
    2592:	bf 90       	pop	r11
    2594:	af 90       	pop	r10
    2596:	9f 90       	pop	r9
    2598:	8f 90       	pop	r8
    259a:	7f 90       	pop	r7
    259c:	6f 90       	pop	r6
    259e:	5f 90       	pop	r5
    25a0:	4f 90       	pop	r4
    25a2:	3f 90       	pop	r3
    25a4:	2f 90       	pop	r2
    25a6:	08 95       	ret

000025a8 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    25a8:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    25aa:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    25ac:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    25ae:	8c e0       	ldi	r24, 0x0C	; 12
    25b0:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    25b4:	e9 e6       	ldi	r30, 0x69	; 105
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	80 62       	ori	r24, 0x20	; 32
    25bc:	80 83       	st	Z, r24
    25be:	80 81       	ld	r24, Z
    25c0:	8f 7e       	andi	r24, 0xEF	; 239
    25c2:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    25c4:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    25c6:	78 94       	sei
    25c8:	08 95       	ret

000025ca <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	18 2f       	mov	r17, r24
    25d2:	d6 2f       	mov	r29, r22
    25d4:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    25d6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    25da:	94 ea       	ldi	r25, 0xA4	; 164
    25dc:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    25e0:	ec eb       	ldi	r30, 0xBC	; 188
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	90 81       	ld	r25, Z
    25e6:	99 23       	and	r25, r25
    25e8:	ec f7       	brge	.-6      	; 0x25e4 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    25ea:	90 e5       	ldi	r25, 0x50	; 80
    25ec:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    25f0:	94 e8       	ldi	r25, 0x84	; 132
    25f2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    25f6:	ec eb       	ldi	r30, 0xBC	; 188
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	90 81       	ld	r25, Z
    25fc:	99 23       	and	r25, r25
    25fe:	ec f7       	brge	.-6      	; 0x25fa <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2600:	90 91 b9 00 	lds	r25, 0x00B9
    2604:	98 7f       	andi	r25, 0xF8	; 248
    2606:	90 32       	cpi	r25, 0x20	; 32
    2608:	29 f4       	brne	.+10     	; 0x2614 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    260a:	84 e9       	ldi	r24, 0x94	; 148
    260c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	2d c0       	rjmp	.+90     	; 0x266e <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    261a:	84 e8       	ldi	r24, 0x84	; 132
    261c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2620:	ec eb       	ldi	r30, 0xBC	; 188
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	90 81       	ld	r25, Z
    2626:	99 23       	and	r25, r25
    2628:	ec f7       	brge	.-6      	; 0x2624 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    262a:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    262e:	84 e8       	ldi	r24, 0x84	; 132
    2630:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2634:	ec eb       	ldi	r30, 0xBC	; 188
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 23       	and	r24, r24
    263c:	ec f7       	brge	.-6      	; 0x2638 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    263e:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2642:	84 e8       	ldi	r24, 0x84	; 132
    2644:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2648:	ec eb       	ldi	r30, 0xBC	; 188
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	88 23       	and	r24, r24
    2650:	ec f7       	brge	.-6      	; 0x264c <m_rf_open+0x82>
	
	TWDR = packet_length;
    2652:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2656:	84 e8       	ldi	r24, 0x84	; 132
    2658:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    265c:	ec eb       	ldi	r30, 0xBC	; 188
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	88 23       	and	r24, r24
    2664:	ec f7       	brge	.-6      	; 0x2660 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2666:	84 e9       	ldi	r24, 0x94	; 148
    2668:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
}
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	08 95       	ret

00002676 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2676:	1f 93       	push	r17
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    267c:	24 ea       	ldi	r18, 0xA4	; 164
    267e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    2682:	ec eb       	ldi	r30, 0xBC	; 188
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	20 81       	ld	r18, Z
    2688:	22 23       	and	r18, r18
    268a:	ec f7       	brge	.-6      	; 0x2686 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    268c:	21 e5       	ldi	r18, 0x51	; 81
    268e:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2692:	24 e8       	ldi	r18, 0x84	; 132
    2694:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2698:	ec eb       	ldi	r30, 0xBC	; 188
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	20 81       	ld	r18, Z
    269e:	22 23       	and	r18, r18
    26a0:	ec f7       	brge	.-6      	; 0x269c <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    26a2:	20 91 b9 00 	lds	r18, 0x00B9
    26a6:	28 7f       	andi	r18, 0xF8	; 248
    26a8:	28 34       	cpi	r18, 0x48	; 72
    26aa:	29 f4       	brne	.+10     	; 0x26b6 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    26ac:	84 e9       	ldi	r24, 0x94	; 148
    26ae:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	44 c0       	rjmp	.+136    	; 0x273e <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26b6:	24 ec       	ldi	r18, 0xC4	; 196
    26b8:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26bc:	ec eb       	ldi	r30, 0xBC	; 188
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	20 81       	ld	r18, Z
    26c2:	22 23       	and	r18, r18
    26c4:	ec f7       	brge	.-6      	; 0x26c0 <m_rf_read+0x4a>
	bytes = TWDR;
    26c6:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
    26ca:	16 13       	cpse	r17, r22
    26cc:	0a c0       	rjmp	.+20     	; 0x26e2 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    26ce:	41 2f       	mov	r20, r17
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	41 50       	subi	r20, 0x01	; 1
    26d4:	51 09       	sbc	r21, r1
    26d6:	14 16       	cp	r1, r20
    26d8:	15 06       	cpc	r1, r21
    26da:	44 f0       	brlt	.+16     	; 0x26ec <m_rf_read+0x76>
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	1c c0       	rjmp	.+56     	; 0x271a <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    26e2:	84 e9       	ldi	r24, 0x94	; 148
    26e4:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	29 c0       	rjmp	.+82     	; 0x273e <m_rf_read+0xc8>
    26ec:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26f2:	ec eb       	ldi	r30, 0xBC	; 188
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    26f8:	cb eb       	ldi	r28, 0xBB	; 187
    26fa:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26fc:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26fe:	60 81       	ld	r22, Z
    2700:	66 23       	and	r22, r22
    2702:	ec f7       	brge	.-6      	; 0x26fe <m_rf_read+0x88>
		buffer[i] = TWDR;
    2704:	68 81       	ld	r22, Y
    2706:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2708:	2f 5f       	subi	r18, 0xFF	; 255
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	24 17       	cp	r18, r20
    270e:	35 07       	cpc	r19, r21
    2710:	ac f3       	brlt	.-22     	; 0x26fc <m_rf_read+0x86>
    2712:	21 2f       	mov	r18, r17
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	21 50       	subi	r18, 0x01	; 1
    2718:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    271a:	44 e8       	ldi	r20, 0x84	; 132
    271c:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2720:	ec eb       	ldi	r30, 0xBC	; 188
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	40 81       	ld	r20, Z
    2726:	44 23       	and	r20, r20
    2728:	ec f7       	brge	.-6      	; 0x2724 <m_rf_read+0xae>
	buffer[i++] = TWDR;
    272a:	40 91 bb 00 	lds	r20, 0x00BB
    272e:	fc 01       	movw	r30, r24
    2730:	e2 0f       	add	r30, r18
    2732:	f3 1f       	adc	r31, r19
    2734:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2736:	84 e9       	ldi	r24, 0x94	; 148
    2738:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
}
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	1f 91       	pop	r17
    2744:	08 95       	ret

00002746 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    274c:	80 ea       	ldi	r24, 0xA0	; 160
    274e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2752:	82 e1       	ldi	r24, 0x12	; 18
    2754:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2756:	09 b4       	in	r0, 0x29	; 41
    2758:	00 fe       	sbrs	r0, 0
    275a:	fd cf       	rjmp	.-6      	; 0x2756 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    275c:	80 e9       	ldi	r24, 0x90	; 144
    275e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2762:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2766:	10 92 91 01 	sts	0x0191, r1
	cdc_line_rtsdtr = 0;
    276a:	10 92 8e 01 	sts	0x018E, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    276e:	8c e0       	ldi	r24, 0x0C	; 12
    2770:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2774:	78 94       	sei
    2776:	08 95       	ret

00002778 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    277c:	90 91 91 01 	lds	r25, 0x0191
    2780:	99 23       	and	r25, r25
    2782:	09 f4       	brne	.+2      	; 0x2786 <m_usb_tx_char+0xe>
    2784:	4c c0       	rjmp	.+152    	; 0x281e <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2786:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2788:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    278a:	24 e0       	ldi	r18, 0x04	; 4
    278c:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2790:	20 91 8f 01 	lds	r18, 0x018F
    2794:	22 23       	and	r18, r18
    2796:	49 f0       	breq	.+18     	; 0x27aa <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    2798:	20 91 e8 00 	lds	r18, 0x00E8
    279c:	25 fd       	sbrc	r18, 5
    279e:	03 c0       	rjmp	.+6      	; 0x27a6 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    27a0:	9f bf       	out	0x3f, r25	; 63
			return -1;
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	41 c0       	rjmp	.+130    	; 0x2828 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    27a6:	10 92 8f 01 	sts	0x018F, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    27aa:	30 91 e4 00 	lds	r19, 0x00E4
    27ae:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    27b0:	20 91 e8 00 	lds	r18, 0x00E8
    27b4:	25 fd       	sbrc	r18, 5
    27b6:	24 c0       	rjmp	.+72     	; 0x2800 <m_usb_tx_char+0x88>
		SREG = intr_state;
    27b8:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    27ba:	90 91 e4 00 	lds	r25, 0x00E4
    27be:	93 17       	cp	r25, r19
    27c0:	81 f0       	breq	.+32     	; 0x27e2 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    27c2:	90 91 91 01 	lds	r25, 0x0191
    27c6:	99 23       	and	r25, r25
    27c8:	61 f1       	breq	.+88     	; 0x2822 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    27ca:	a9 ee       	ldi	r26, 0xE9	; 233
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    27d0:	e8 ee       	ldi	r30, 0xE8	; 232
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    27d4:	c4 ee       	ldi	r28, 0xE4	; 228
    27d6:	d0 e0       	ldi	r29, 0x00	; 0
    27d8:	0d c0       	rjmp	.+26     	; 0x27f4 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    27da:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    27dc:	98 81       	ld	r25, Y
    27de:	93 13       	cpse	r25, r19
    27e0:	05 c0       	rjmp	.+10     	; 0x27ec <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	80 93 8f 01 	sts	0x018F, r24
			return -1;
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	1e c0       	rjmp	.+60     	; 0x2828 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    27ec:	90 91 91 01 	lds	r25, 0x0191
    27f0:	99 23       	and	r25, r25
    27f2:	c9 f0       	breq	.+50     	; 0x2826 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    27f4:	9f b7       	in	r25, 0x3f	; 63
		cli();
    27f6:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    27f8:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    27fa:	20 81       	ld	r18, Z
    27fc:	25 ff       	sbrs	r18, 5
    27fe:	ed cf       	rjmp	.-38     	; 0x27da <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2800:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2804:	80 91 e8 00 	lds	r24, 0x00E8
    2808:	85 fd       	sbrc	r24, 5
    280a:	03 c0       	rjmp	.+6      	; 0x2812 <m_usb_tx_char+0x9a>
    280c:	8a e3       	ldi	r24, 0x3A	; 58
    280e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2812:	85 e0       	ldi	r24, 0x05	; 5
    2814:	80 93 90 01 	sts	0x0190, r24
	SREG = intr_state;
    2818:	9f bf       	out	0x3f, r25	; 63
	return 0;
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	05 c0       	rjmp	.+10     	; 0x2828 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	03 c0       	rjmp	.+6      	; 0x2828 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2822:	8f ef       	ldi	r24, 0xFF	; 255
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <m_usb_tx_char+0xb0>
    2826:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    282e:	1f 92       	push	r1
    2830:	0f 92       	push	r0
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	0f 92       	push	r0
    2836:	11 24       	eor	r1, r1
    2838:	8f 93       	push	r24
    283a:	9f 93       	push	r25
    283c:	ef 93       	push	r30
    283e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2840:	e1 ee       	ldi	r30, 0xE1	; 225
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
        UDINT = 0;
    2846:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2848:	83 ff       	sbrs	r24, 3
    284a:	11 c0       	rjmp	.+34     	; 0x286e <__vector_10+0x40>
		UENUM = 0;
    284c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2856:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    285a:	92 e1       	ldi	r25, 0x12	; 18
    285c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2860:	98 e0       	ldi	r25, 0x08	; 8
    2862:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2866:	10 92 91 01 	sts	0x0191, r1
		cdc_line_rtsdtr = 0;
    286a:	10 92 8e 01 	sts	0x018E, r1
        }
	if (intbits & (1<<SOFI)) {
    286e:	82 ff       	sbrs	r24, 2
    2870:	13 c0       	rjmp	.+38     	; 0x2898 <__vector_10+0x6a>
		if (usb_configuration) {
    2872:	80 91 91 01 	lds	r24, 0x0191
    2876:	88 23       	and	r24, r24
    2878:	79 f0       	breq	.+30     	; 0x2898 <__vector_10+0x6a>
			t = transmit_flush_timer;
    287a:	80 91 90 01 	lds	r24, 0x0190
			if (t) {
    287e:	88 23       	and	r24, r24
    2880:	59 f0       	breq	.+22     	; 0x2898 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2882:	81 50       	subi	r24, 0x01	; 1
    2884:	80 93 90 01 	sts	0x0190, r24
				if (!t) {
    2888:	81 11       	cpse	r24, r1
    288a:	06 c0       	rjmp	.+12     	; 0x2898 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    288c:	84 e0       	ldi	r24, 0x04	; 4
    288e:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2892:	8a e3       	ldi	r24, 0x3A	; 58
    2894:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2898:	ff 91       	pop	r31
    289a:	ef 91       	pop	r30
    289c:	9f 91       	pop	r25
    289e:	8f 91       	pop	r24
    28a0:	0f 90       	pop	r0
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	0f 90       	pop	r0
    28a6:	1f 90       	pop	r1
    28a8:	18 95       	reti

000028aa <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    28aa:	1f 92       	push	r1
    28ac:	0f 92       	push	r0
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	0f 92       	push	r0
    28b2:	11 24       	eor	r1, r1
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	2f 93       	push	r18
    28ba:	3f 93       	push	r19
    28bc:	4f 93       	push	r20
    28be:	5f 93       	push	r21
    28c0:	6f 93       	push	r22
    28c2:	7f 93       	push	r23
    28c4:	8f 93       	push	r24
    28c6:	9f 93       	push	r25
    28c8:	af 93       	push	r26
    28ca:	bf 93       	push	r27
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	ef 93       	push	r30
    28d2:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    28d4:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    28d8:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    28dc:	83 ff       	sbrs	r24, 3
    28de:	4e c1       	rjmp	.+668    	; 0x2b7c <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    28e0:	e1 ef       	ldi	r30, 0xF1	; 241
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    28e6:	40 81       	ld	r20, Z
                wValue = UEDATX;
    28e8:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    28ea:	80 81       	ld	r24, Z
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    28f0:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    28f2:	50 81       	ld	r21, Z
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	bc 01       	movw	r22, r24
    28f8:	75 2b       	or	r23, r21
                wLength = UEDATX;
    28fa:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    28fc:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    28fe:	82 ef       	ldi	r24, 0xF2	; 242
    2900:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    2904:	46 30       	cpi	r20, 0x06	; 6
    2906:	09 f0       	breq	.+2      	; 0x290a <__vector_11+0x60>
    2908:	58 c0       	rjmp	.+176    	; 0x29ba <__vector_11+0x110>
    290a:	04 c0       	rjmp	.+8      	; 0x2914 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    290c:	81 e2       	ldi	r24, 0x21	; 33
    290e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2912:	3b c1       	rjmp	.+630    	; 0x2b8a <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2914:	c6 e0       	ldi	r28, 0x06	; 6
    2916:	8d e4       	ldi	r24, 0x4D	; 77
    2918:	92 e0       	ldi	r25, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    291a:	fc 01       	movw	r30, r24
    291c:	45 91       	lpm	r20, Z+
    291e:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    2920:	24 17       	cp	r18, r20
    2922:	35 07       	cpc	r19, r21
    2924:	11 f0       	breq	.+4      	; 0x292a <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    2926:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2928:	23 c0       	rjmp	.+70     	; 0x2970 <__vector_11+0xc6>
				}
				list += 2;
    292a:	fc 01       	movw	r30, r24
    292c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    292e:	45 91       	lpm	r20, Z+
    2930:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    2932:	64 17       	cp	r22, r20
    2934:	75 07       	cpc	r23, r21
    2936:	11 f0       	breq	.+4      	; 0x293c <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    2938:	07 96       	adiw	r24, 0x07	; 7
					continue;
    293a:	1a c0       	rjmp	.+52     	; 0x2970 <__vector_11+0xc6>
				}
				list += 2;
    293c:	fc 01       	movw	r30, r24
    293e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2940:	25 91       	lpm	r18, Z+
    2942:	34 91       	lpm	r19, Z
				list += 2;
    2944:	fc 01       	movw	r30, r24
    2946:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2948:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    294a:	8b 2f       	mov	r24, r27
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2950:	8f 3f       	cpi	r24, 0xFF	; 255
    2952:	91 05       	cpc	r25, r1
    2954:	19 f0       	breq	.+6      	; 0x295c <__vector_11+0xb2>
    2956:	10 f0       	brcs	.+4      	; 0x295c <__vector_11+0xb2>
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	85 17       	cp	r24, r21
    295e:	08 f4       	brcc	.+2      	; 0x2962 <__vector_11+0xb8>
    2960:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2962:	a8 ee       	ldi	r26, 0xE8	; 232
    2964:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2966:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2968:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    296a:	c1 ef       	ldi	r28, 0xF1	; 241
    296c:	d0 e0       	ldi	r29, 0x00	; 0
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <__vector_11+0xcc>
    2970:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2972:	99 f6       	brne	.-90     	; 0x291a <__vector_11+0x70>
    2974:	cb cf       	rjmp	.-106    	; 0x290c <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2976:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2978:	98 2f       	mov	r25, r24
    297a:	95 70       	andi	r25, 0x05	; 5
    297c:	e1 f3       	breq	.-8      	; 0x2976 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    297e:	82 fd       	sbrc	r24, 2
    2980:	04 c1       	rjmp	.+520    	; 0x2b8a <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2982:	45 2f       	mov	r20, r21
    2984:	51 31       	cpi	r21, 0x11	; 17
    2986:	08 f0       	brcs	.+2      	; 0x298a <__vector_11+0xe0>
    2988:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    298a:	44 23       	and	r20, r20
    298c:	09 f4       	brne	.+2      	; 0x2990 <__vector_11+0xe6>
    298e:	fa c0       	rjmp	.+500    	; 0x2b84 <__vector_11+0x2da>
    2990:	f9 01       	movw	r30, r18
    2992:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    2994:	94 91       	lpm	r25, Z
    2996:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2998:	81 50       	subi	r24, 0x01	; 1
    299a:	31 96       	adiw	r30, 0x01	; 1
    299c:	81 11       	cpse	r24, r1
    299e:	fa cf       	rjmp	.-12     	; 0x2994 <__vector_11+0xea>
    29a0:	8f ef       	ldi	r24, 0xFF	; 255
    29a2:	84 0f       	add	r24, r20
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	28 0f       	add	r18, r24
    29aa:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    29ac:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29ae:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    29b0:	51 11       	cpse	r21, r1
    29b2:	e1 cf       	rjmp	.-62     	; 0x2976 <__vector_11+0xcc>
    29b4:	40 31       	cpi	r20, 0x10	; 16
    29b6:	f9 f2       	breq	.-66     	; 0x2976 <__vector_11+0xcc>
    29b8:	e8 c0       	rjmp	.+464    	; 0x2b8a <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    29ba:	45 30       	cpi	r20, 0x05	; 5
    29bc:	61 f4       	brne	.+24     	; 0x29d6 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29be:	8e ef       	ldi	r24, 0xFE	; 254
    29c0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    29c4:	e8 ee       	ldi	r30, 0xE8	; 232
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	80 ff       	sbrs	r24, 0
    29cc:	fd cf       	rjmp	.-6      	; 0x29c8 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    29ce:	20 68       	ori	r18, 0x80	; 128
    29d0:	20 93 e3 00 	sts	0x00E3, r18
			return;
    29d4:	da c0       	rjmp	.+436    	; 0x2b8a <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    29d6:	49 30       	cpi	r20, 0x09	; 9
    29d8:	09 f0       	breq	.+2      	; 0x29dc <__vector_11+0x132>
    29da:	36 c0       	rjmp	.+108    	; 0x2a48 <__vector_11+0x19e>
    29dc:	c1 11       	cpse	r28, r1
    29de:	5f c0       	rjmp	.+190    	; 0x2a9e <__vector_11+0x1f4>
			usb_configuration = wValue;
    29e0:	20 93 91 01 	sts	0x0191, r18
			cdc_line_rtsdtr = 0;
    29e4:	10 92 8e 01 	sts	0x018E, r1
			transmit_flush_timer = 0;
    29e8:	10 92 90 01 	sts	0x0190, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29ec:	8e ef       	ldi	r24, 0xFE	; 254
    29ee:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    29f2:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    29f4:	86 ef       	ldi	r24, 0xF6	; 246
    29f6:	92 e0       	ldi	r25, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    29f8:	c9 ee       	ldi	r28, 0xE9	; 233
    29fa:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    29fc:	ab ee       	ldi	r26, 0xEB	; 235
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2a00:	6c ee       	ldi	r22, 0xEC	; 236
    2a02:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2a04:	4d ee       	ldi	r20, 0xED	; 237
    2a06:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2a08:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2a0a:	9c 01       	movw	r18, r24
    2a0c:	2f 5f       	subi	r18, 0xFF	; 255
    2a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a10:	fc 01       	movw	r30, r24
    2a12:	04 91       	lpm	r16, Z
				UECONX = en;
    2a14:	0c 93       	st	X, r16
				if (en) {
    2a16:	00 23       	and	r16, r16
    2a18:	61 f0       	breq	.+24     	; 0x2a32 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    2a1a:	f9 01       	movw	r30, r18
    2a1c:	24 91       	lpm	r18, Z
    2a1e:	fb 01       	movw	r30, r22
    2a20:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    2a22:	9c 01       	movw	r18, r24
    2a24:	2d 5f       	subi	r18, 0xFD	; 253
    2a26:	3f 4f       	sbci	r19, 0xFF	; 255
    2a28:	fc 01       	movw	r30, r24
    2a2a:	32 96       	adiw	r30, 0x02	; 2
    2a2c:	84 91       	lpm	r24, Z
    2a2e:	fa 01       	movw	r30, r20
    2a30:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2a32:	1f 5f       	subi	r17, 0xFF	; 255
    2a34:	15 30       	cpi	r17, 0x05	; 5
    2a36:	11 f0       	breq	.+4      	; 0x2a3c <__vector_11+0x192>
    2a38:	c9 01       	movw	r24, r18
    2a3a:	e6 cf       	rjmp	.-52     	; 0x2a08 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2a3c:	ea ee       	ldi	r30, 0xEA	; 234
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	8e e1       	ldi	r24, 0x1E	; 30
    2a42:	80 83       	st	Z, r24
        		UERST = 0;
    2a44:	10 82       	st	Z, r1
			return;
    2a46:	a1 c0       	rjmp	.+322    	; 0x2b8a <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2a48:	48 30       	cpi	r20, 0x08	; 8
    2a4a:	81 f4       	brne	.+32     	; 0x2a6c <__vector_11+0x1c2>
    2a4c:	c0 38       	cpi	r28, 0x80	; 128
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <__vector_11+0x1a8>
    2a50:	42 c0       	rjmp	.+132    	; 0x2ad6 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2a52:	e8 ee       	ldi	r30, 0xE8	; 232
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	80 ff       	sbrs	r24, 0
    2a5a:	fd cf       	rjmp	.-6      	; 0x2a56 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2a5c:	80 91 91 01 	lds	r24, 0x0191
    2a60:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2a64:	8e ef       	ldi	r24, 0xFE	; 254
    2a66:	80 93 e8 00 	sts	0x00E8, r24
    2a6a:	8f c0       	rjmp	.+286    	; 0x2b8a <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2a6c:	41 32       	cpi	r20, 0x21	; 33
    2a6e:	b9 f4       	brne	.+46     	; 0x2a9e <__vector_11+0x1f4>
    2a70:	c1 3a       	cpi	r28, 0xA1	; 161
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <__vector_11+0x1cc>
    2a74:	40 c0       	rjmp	.+128    	; 0x2af6 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2a76:	e8 ee       	ldi	r30, 0xE8	; 232
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	80 ff       	sbrs	r24, 0
    2a7e:	fd cf       	rjmp	.-6      	; 0x2a7a <__vector_11+0x1d0>
    2a80:	e6 e2       	ldi	r30, 0x26	; 38
    2a82:	f1 e0       	ldi	r31, 0x01	; 1
    2a84:	8d e2       	ldi	r24, 0x2D	; 45
    2a86:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2a88:	a1 ef       	ldi	r26, 0xF1	; 241
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	21 91       	ld	r18, Z+
    2a8e:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2a90:	e8 17       	cp	r30, r24
    2a92:	f9 07       	cpc	r31, r25
    2a94:	d9 f7       	brne	.-10     	; 0x2a8c <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2a96:	8e ef       	ldi	r24, 0xFE	; 254
    2a98:	80 93 e8 00 	sts	0x00E8, r24
    2a9c:	76 c0       	rjmp	.+236    	; 0x2b8a <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2a9e:	40 32       	cpi	r20, 0x20	; 32
    2aa0:	d1 f4       	brne	.+52     	; 0x2ad6 <__vector_11+0x22c>
    2aa2:	c1 32       	cpi	r28, 0x21	; 33
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <__vector_11+0x1fe>
    2aa6:	43 c0       	rjmp	.+134    	; 0x2b2e <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2aa8:	e8 ee       	ldi	r30, 0xE8	; 232
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	82 ff       	sbrs	r24, 2
    2ab0:	fd cf       	rjmp	.-6      	; 0x2aac <__vector_11+0x202>
    2ab2:	e6 e2       	ldi	r30, 0x26	; 38
    2ab4:	f1 e0       	ldi	r31, 0x01	; 1
    2ab6:	8d e2       	ldi	r24, 0x2D	; 45
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2aba:	a1 ef       	ldi	r26, 0xF1	; 241
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	2c 91       	ld	r18, X
    2ac0:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2ac2:	e8 17       	cp	r30, r24
    2ac4:	f9 07       	cpc	r31, r25
    2ac6:	d9 f7       	brne	.-10     	; 0x2abe <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2ac8:	e8 ee       	ldi	r30, 0xE8	; 232
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	8b ef       	ldi	r24, 0xFB	; 251
    2ace:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2ad0:	8e ef       	ldi	r24, 0xFE	; 254
    2ad2:	80 83       	st	Z, r24
    2ad4:	5a c0       	rjmp	.+180    	; 0x2b8a <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2ad6:	42 32       	cpi	r20, 0x22	; 34
    2ad8:	71 f4       	brne	.+28     	; 0x2af6 <__vector_11+0x24c>
    2ada:	c1 32       	cpi	r28, 0x21	; 33
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <__vector_11+0x236>
    2ade:	4e c0       	rjmp	.+156    	; 0x2b7c <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    2ae0:	20 93 8e 01 	sts	0x018E, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2ae4:	e8 ee       	ldi	r30, 0xE8	; 232
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	80 ff       	sbrs	r24, 0
    2aec:	fd cf       	rjmp	.-6      	; 0x2ae8 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2aee:	8e ef       	ldi	r24, 0xFE	; 254
    2af0:	80 93 e8 00 	sts	0x00E8, r24
    2af4:	4a c0       	rjmp	.+148    	; 0x2b8a <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2af6:	41 11       	cpse	r20, r1
    2af8:	1a c0       	rjmp	.+52     	; 0x2b2e <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2afa:	e8 ee       	ldi	r30, 0xE8	; 232
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	80 ff       	sbrs	r24, 0
    2b02:	fd cf       	rjmp	.-6      	; 0x2afe <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2b04:	c2 38       	cpi	r28, 0x82	; 130
    2b06:	51 f4       	brne	.+20     	; 0x2b1c <__vector_11+0x272>
				UENUM = wIndex;
    2b08:	e9 ee       	ldi	r30, 0xE9	; 233
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    2b0e:	80 91 eb 00 	lds	r24, 0x00EB
    2b12:	85 fb       	bst	r24, 5
    2b14:	88 27       	eor	r24, r24
    2b16:	80 f9       	bld	r24, 0
				UENUM = 0;
    2b18:	10 82       	st	Z, r1
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    2b1e:	e1 ef       	ldi	r30, 0xF1	; 241
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 83       	st	Z, r24
			UEDATX = 0;
    2b24:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2b26:	8e ef       	ldi	r24, 0xFE	; 254
    2b28:	80 93 e8 00 	sts	0x00E8, r24
    2b2c:	2e c0       	rjmp	.+92     	; 0x2b8a <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2b2e:	84 2f       	mov	r24, r20
    2b30:	8d 7f       	andi	r24, 0xFD	; 253
    2b32:	81 30       	cpi	r24, 0x01	; 1
    2b34:	19 f5       	brne	.+70     	; 0x2b7c <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    2b36:	c2 30       	cpi	r28, 0x02	; 2
    2b38:	09 f5       	brne	.+66     	; 0x2b7c <__vector_11+0x2d2>
    2b3a:	23 2b       	or	r18, r19
    2b3c:	f9 f4       	brne	.+62     	; 0x2b7c <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    2b3e:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2b40:	8f ef       	ldi	r24, 0xFF	; 255
    2b42:	86 0f       	add	r24, r22
    2b44:	84 30       	cpi	r24, 0x04	; 4
    2b46:	d0 f4       	brcc	.+52     	; 0x2b7c <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2b48:	8e ef       	ldi	r24, 0xFE	; 254
    2b4a:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2b4e:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    2b52:	43 30       	cpi	r20, 0x03	; 3
    2b54:	21 f4       	brne	.+8      	; 0x2b5e <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2b56:	81 e2       	ldi	r24, 0x21	; 33
    2b58:	80 93 eb 00 	sts	0x00EB, r24
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2b5e:	89 e1       	ldi	r24, 0x19	; 25
    2b60:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <__vector_11+0x2c4>
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	6a 95       	dec	r22
    2b70:	e2 f7       	brpl	.-8      	; 0x2b6a <__vector_11+0x2c0>
    2b72:	ea ee       	ldi	r30, 0xEA	; 234
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 83       	st	Z, r24
					UERST = 0;
    2b78:	10 82       	st	Z, r1
    2b7a:	07 c0       	rjmp	.+14     	; 0x2b8a <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2b7c:	81 e2       	ldi	r24, 0x21	; 33
    2b7e:	80 93 eb 00 	sts	0x00EB, r24
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2b84:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2b86:	51 11       	cpse	r21, r1
    2b88:	f6 ce       	rjmp	.-532    	; 0x2976 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2b8a:	ff 91       	pop	r31
    2b8c:	ef 91       	pop	r30
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	bf 91       	pop	r27
    2b94:	af 91       	pop	r26
    2b96:	9f 91       	pop	r25
    2b98:	8f 91       	pop	r24
    2b9a:	7f 91       	pop	r23
    2b9c:	6f 91       	pop	r22
    2b9e:	5f 91       	pop	r21
    2ba0:	4f 91       	pop	r20
    2ba2:	3f 91       	pop	r19
    2ba4:	2f 91       	pop	r18
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	0f 90       	pop	r0
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	0f 90       	pop	r0
    2bb0:	1f 90       	pop	r1
    2bb2:	18 95       	reti

00002bb4 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2bba:	ec 01       	movw	r28, r24
    2bbc:	21 96       	adiw	r28, 0x01	; 1
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	14 91       	lpm	r17, Z
		if (!c) break;
    2bc2:	11 23       	and	r17, r17
    2bc4:	69 f0       	breq	.+26     	; 0x2be0 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    2bc6:	1a 30       	cpi	r17, 0x0A	; 10
    2bc8:	19 f4       	brne	.+6      	; 0x2bd0 <print_P+0x1c>
    2bca:	8d e0       	ldi	r24, 0x0D	; 13
    2bcc:	0e 94 bc 13 	call	0x2778	; 0x2778 <m_usb_tx_char>
		usb_tx_char(c);
    2bd0:	81 2f       	mov	r24, r17
    2bd2:	0e 94 bc 13 	call	0x2778	; 0x2778 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	14 91       	lpm	r17, Z
    2bda:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    2bdc:	11 11       	cpse	r17, r1
    2bde:	f3 cf       	rjmp	.-26     	; 0x2bc6 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	1f 91       	pop	r17
    2be6:	08 95       	ret

00002be8 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	27 97       	sbiw	r28, 0x07	; 7
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    2c04:	8e 01       	movw	r16, r28
    2c06:	0f 5f       	subi	r16, 0xFF	; 255
    2c08:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0a:	27 e0       	ldi	r18, 0x07	; 7
    2c0c:	f8 01       	movw	r30, r16
    2c0e:	11 92       	st	Z+, r1
    2c10:	2a 95       	dec	r18
    2c12:	e9 f7       	brne	.-6      	; 0x2c0e <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2c14:	4a e0       	ldi	r20, 0x0A	; 10
    2c16:	b8 01       	movw	r22, r16
    2c18:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__itoa_ncheck>
    2c1c:	7e 01       	movw	r14, r28
    2c1e:	f8 e0       	ldi	r31, 0x08	; 8
    2c20:	ef 0e       	add	r14, r31
    2c22:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    2c24:	f8 01       	movw	r30, r16
    2c26:	81 91       	ld	r24, Z+
    2c28:	8f 01       	movw	r16, r30
    2c2a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    2c2c:	0e 94 bc 13 	call	0x2778	; 0x2778 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    2c30:	0e 15       	cp	r16, r14
    2c32:	1f 05       	cpc	r17, r15
    2c34:	b9 f7       	brne	.-18     	; 0x2c24 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2c36:	27 96       	adiw	r28, 0x07	; 7
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	08 95       	ret

00002c50 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2c54:	ec eb       	ldi	r30, 0xBC	; 188
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	88 23       	and	r24, r24
    2c5c:	34 f0       	brlt	.+12     	; 0x2c6a <twi_wait+0x1a>
    2c5e:	2f 5f       	subi	r18, 0xFF	; 255
    2c60:	3f 4f       	sbci	r19, 0xFF	; 255
    2c62:	29 3e       	cpi	r18, 0xE9	; 233
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	38 07       	cpc	r19, r24
    2c68:	b9 f7       	brne	.-18     	; 0x2c58 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	28 3e       	cpi	r18, 0xE8	; 232
    2c6e:	33 40       	sbci	r19, 0x03	; 3
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <twi_wait+0x24>
    2c72:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2c74:	08 95       	ret

00002c76 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2c76:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2c7a:	84 e8       	ldi	r24, 0x84	; 132
    2c7c:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2c80:	0e 94 28 16 	call	0x2c50	; 0x2c50 <twi_wait>
    2c84:	88 23       	and	r24, r24
    2c86:	19 f0       	breq	.+6      	; 0x2c8e <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2c88:	80 91 b9 00 	lds	r24, 0x00B9
    2c8c:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    2c8e:	08 95       	ret

00002c90 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2c90:	cf 93       	push	r28
    2c92:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2c94:	94 ea       	ldi	r25, 0xA4	; 164
    2c96:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2c9a:	0e 94 28 16 	call	0x2c50	; 0x2c50 <twi_wait>
    2c9e:	88 23       	and	r24, r24
    2ca0:	61 f0       	breq	.+24     	; 0x2cba <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2ca2:	8c 2f       	mov	r24, r28
    2ca4:	88 0f       	add	r24, r24
    2ca6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2caa:	80 32       	cpi	r24, 0x20	; 32
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2cae:	84 e9       	ldi	r24, 0x94	; 148
    2cb0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <start_write+0x2a>
	}	
	return 1;	// success
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
}	
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2cbe:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2cc2:	88 e5       	ldi	r24, 0x58	; 88
    2cc4:	0e 94 48 16 	call	0x2c90	; 0x2c90 <start_write>
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f4       	brne	.+2      	; 0x2cce <m_wii_open+0x10>
    2ccc:	cd c0       	rjmp	.+410    	; 0x2e68 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2cce:	80 e3       	ldi	r24, 0x30	; 48
    2cd0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2cd4:	88 23       	and	r24, r24
    2cd6:	09 f4       	brne	.+2      	; 0x2cda <m_wii_open+0x1c>
    2cd8:	c9 c0       	rjmp	.+402    	; 0x2e6c <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <m_wii_open+0x28>
    2ce4:	c5 c0       	rjmp	.+394    	; 0x2e70 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2ce6:	84 e9       	ldi	r24, 0x94	; 148
    2ce8:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2cec:	83 ec       	ldi	r24, 0xC3	; 195
    2cee:	99 e0       	ldi	r25, 0x09	; 9
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <m_wii_open+0x32>
    2cf4:	00 c0       	rjmp	.+0      	; 0x2cf6 <m_wii_open+0x38>
    2cf6:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2cf8:	88 e5       	ldi	r24, 0x58	; 88
    2cfa:	0e 94 48 16 	call	0x2c90	; 0x2c90 <start_write>
    2cfe:	88 23       	and	r24, r24
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <m_wii_open+0x46>
    2d02:	b8 c0       	rjmp	.+368    	; 0x2e74 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d0a:	88 23       	and	r24, r24
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <m_wii_open+0x52>
    2d0e:	b4 c0       	rjmp	.+360    	; 0x2e78 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d16:	88 23       	and	r24, r24
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <m_wii_open+0x5e>
    2d1a:	b0 c0       	rjmp	.+352    	; 0x2e7c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d22:	88 23       	and	r24, r24
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <m_wii_open+0x6a>
    2d26:	ac c0       	rjmp	.+344    	; 0x2e80 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d2e:	88 23       	and	r24, r24
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <m_wii_open+0x76>
    2d32:	a8 c0       	rjmp	.+336    	; 0x2e84 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <m_wii_open+0x82>
    2d3e:	a4 c0       	rjmp	.+328    	; 0x2e88 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d46:	88 23       	and	r24, r24
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <m_wii_open+0x8e>
    2d4a:	a0 c0       	rjmp	.+320    	; 0x2e8c <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d52:	88 23       	and	r24, r24
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <m_wii_open+0x9a>
    2d56:	9c c0       	rjmp	.+312    	; 0x2e90 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2d58:	80 e9       	ldi	r24, 0x90	; 144
    2d5a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d5e:	88 23       	and	r24, r24
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <m_wii_open+0xa6>
    2d62:	98 c0       	rjmp	.+304    	; 0x2e94 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2d64:	84 e9       	ldi	r24, 0x94	; 148
    2d66:	80 93 bc 00 	sts	0x00BC, r24
    2d6a:	83 ec       	ldi	r24, 0xC3	; 195
    2d6c:	99 e0       	ldi	r25, 0x09	; 9
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <m_wii_open+0xb0>
    2d72:	00 c0       	rjmp	.+0      	; 0x2d74 <m_wii_open+0xb6>
    2d74:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2d76:	88 e5       	ldi	r24, 0x58	; 88
    2d78:	0e 94 48 16 	call	0x2c90	; 0x2c90 <start_write>
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <m_wii_open+0xc4>
    2d80:	8b c0       	rjmp	.+278    	; 0x2e98 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2d82:	87 e0       	ldi	r24, 0x07	; 7
    2d84:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d88:	88 23       	and	r24, r24
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <m_wii_open+0xd0>
    2d8c:	87 c0       	rjmp	.+270    	; 0x2e9c <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2d94:	88 23       	and	r24, r24
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <m_wii_open+0xdc>
    2d98:	83 c0       	rjmp	.+262    	; 0x2ea0 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    2d9a:	81 e4       	ldi	r24, 0x41	; 65
    2d9c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2da0:	88 23       	and	r24, r24
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <m_wii_open+0xe8>
    2da4:	7f c0       	rjmp	.+254    	; 0x2ea4 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2da6:	84 e9       	ldi	r24, 0x94	; 148
    2da8:	80 93 bc 00 	sts	0x00BC, r24
    2dac:	83 ec       	ldi	r24, 0xC3	; 195
    2dae:	99 e0       	ldi	r25, 0x09	; 9
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <m_wii_open+0xf2>
    2db4:	00 c0       	rjmp	.+0      	; 0x2db6 <m_wii_open+0xf8>
    2db6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2db8:	88 e5       	ldi	r24, 0x58	; 88
    2dba:	0e 94 48 16 	call	0x2c90	; 0x2c90 <start_write>
    2dbe:	88 23       	and	r24, r24
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <m_wii_open+0x106>
    2dc2:	72 c0       	rjmp	.+228    	; 0x2ea8 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2dc4:	8a e1       	ldi	r24, 0x1A	; 26
    2dc6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2dca:	88 23       	and	r24, r24
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <m_wii_open+0x112>
    2dce:	6e c0       	rjmp	.+220    	; 0x2eac <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2dd0:	80 e4       	ldi	r24, 0x40	; 64
    2dd2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2dd6:	88 23       	and	r24, r24
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <m_wii_open+0x11e>
    2dda:	6a c0       	rjmp	.+212    	; 0x2eb0 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2de2:	88 23       	and	r24, r24
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <m_wii_open+0x12a>
    2de6:	66 c0       	rjmp	.+204    	; 0x2eb4 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2de8:	84 e9       	ldi	r24, 0x94	; 148
    2dea:	80 93 bc 00 	sts	0x00BC, r24
    2dee:	83 ec       	ldi	r24, 0xC3	; 195
    2df0:	99 e0       	ldi	r25, 0x09	; 9
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	f1 f7       	brne	.-4      	; 0x2df2 <m_wii_open+0x134>
    2df6:	00 c0       	rjmp	.+0      	; 0x2df8 <m_wii_open+0x13a>
    2df8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2dfa:	88 e5       	ldi	r24, 0x58	; 88
    2dfc:	0e 94 48 16 	call	0x2c90	; 0x2c90 <start_write>
    2e00:	88 23       	and	r24, r24
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <m_wii_open+0x148>
    2e04:	59 c0       	rjmp	.+178    	; 0x2eb8 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2e06:	83 e3       	ldi	r24, 0x33	; 51
    2e08:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2e0c:	88 23       	and	r24, r24
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <m_wii_open+0x154>
    2e10:	55 c0       	rjmp	.+170    	; 0x2ebc <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2e12:	83 e0       	ldi	r24, 0x03	; 3
    2e14:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2e18:	88 23       	and	r24, r24
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <m_wii_open+0x160>
    2e1c:	51 c0       	rjmp	.+162    	; 0x2ec0 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2e1e:	84 e9       	ldi	r24, 0x94	; 148
    2e20:	80 93 bc 00 	sts	0x00BC, r24
    2e24:	83 ec       	ldi	r24, 0xC3	; 195
    2e26:	99 e0       	ldi	r25, 0x09	; 9
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <m_wii_open+0x16a>
    2e2c:	00 c0       	rjmp	.+0      	; 0x2e2e <m_wii_open+0x170>
    2e2e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2e30:	88 e5       	ldi	r24, 0x58	; 88
    2e32:	0e 94 48 16 	call	0x2c90	; 0x2c90 <start_write>
    2e36:	88 23       	and	r24, r24
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <m_wii_open+0x17e>
    2e3a:	44 c0       	rjmp	.+136    	; 0x2ec4 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    2e3c:	80 e3       	ldi	r24, 0x30	; 48
    2e3e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2e42:	88 23       	and	r24, r24
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <m_wii_open+0x18a>
    2e46:	40 c0       	rjmp	.+128    	; 0x2ec8 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    2e48:	88 e0       	ldi	r24, 0x08	; 8
    2e4a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2e4e:	88 23       	and	r24, r24
    2e50:	e9 f1       	breq	.+122    	; 0x2ecc <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2e52:	84 e9       	ldi	r24, 0x94	; 148
    2e54:	80 93 bc 00 	sts	0x00BC, r24
    2e58:	83 ec       	ldi	r24, 0xC3	; 195
    2e5a:	99 e0       	ldi	r25, 0x09	; 9
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <m_wii_open+0x19e>
    2e60:	00 c0       	rjmp	.+0      	; 0x2e62 <m_wii_open+0x1a4>
    2e62:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2ece:	08 95       	ret

00002ed0 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2ed0:	cf 93       	push	r28
    2ed2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2ed4:	94 ea       	ldi	r25, 0xA4	; 164
    2ed6:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2eda:	0e 94 28 16 	call	0x2c50	; 0x2c50 <twi_wait>
    2ede:	88 23       	and	r24, r24
    2ee0:	69 f0       	breq	.+26     	; 0x2efc <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2ee2:	8c 2f       	mov	r24, r28
    2ee4:	88 0f       	add	r24, r24
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2eec:	88 34       	cpi	r24, 0x48	; 72
    2eee:	29 f4       	brne	.+10     	; 0x2efa <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2ef0:	84 e9       	ldi	r24, 0x94	; 148
    2ef2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <start_read+0x2c>
	}	
	return 1;	// success
    2efa:	81 e0       	ldi	r24, 0x01	; 1
}	
    2efc:	cf 91       	pop	r28
    2efe:	08 95       	ret

00002f00 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	60 97       	sbiw	r28, 0x10	; 16
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	08 2f       	mov	r16, r24
    2f1e:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2f20:	fe 01       	movw	r30, r28
    2f22:	31 96       	adiw	r30, 0x01	; 1
    2f24:	80 e1       	ldi	r24, 0x10	; 16
    2f26:	df 01       	movw	r26, r30
    2f28:	1d 92       	st	X+, r1
    2f2a:	8a 95       	dec	r24
    2f2c:	e9 f7       	brne	.-6      	; 0x2f28 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2f2e:	88 e5       	ldi	r24, 0x58	; 88
    2f30:	0e 94 48 16 	call	0x2c90	; 0x2c90 <start_write>
    2f34:	88 23       	and	r24, r24
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <m_wii_read+0x3a>
    2f38:	6e c0       	rjmp	.+220    	; 0x3016 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    2f3a:	86 e3       	ldi	r24, 0x36	; 54
    2f3c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <send_byte>
    2f40:	88 23       	and	r24, r24
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <m_wii_read+0x46>
    2f44:	6a c0       	rjmp	.+212    	; 0x301a <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2f46:	84 e9       	ldi	r24, 0x94	; 148
    2f48:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f4c:	b8 e0       	ldi	r27, 0x08	; 8
    2f4e:	ba 95       	dec	r27
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <m_wii_read+0x4e>
    2f52:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2f54:	88 e5       	ldi	r24, 0x58	; 88
    2f56:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <start_read>
    2f5a:	88 23       	and	r24, r24
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <m_wii_read+0x60>
    2f5e:	5f c0       	rjmp	.+190    	; 0x301e <m_wii_read+0x11e>
    2f60:	be 01       	movw	r22, r28
    2f62:	6f 5f       	subi	r22, 0xFF	; 255
    2f64:	7f 4f       	sbci	r23, 0xFF	; 255
    2f66:	9e 01       	movw	r18, r28
    2f68:	20 5f       	subi	r18, 0xF0	; 240
    2f6a:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2f6c:	ec eb       	ldi	r30, 0xBC	; 188
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2f72:	4b eb       	ldi	r20, 0xBB	; 187
    2f74:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2f76:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2f78:	80 81       	ld	r24, Z
    2f7a:	88 23       	and	r24, r24
    2f7c:	ec f7       	brge	.-6      	; 0x2f78 <m_wii_read+0x78>
		temp[i] = TWDR;
    2f7e:	da 01       	movw	r26, r20
    2f80:	8c 91       	ld	r24, X
    2f82:	db 01       	movw	r26, r22
    2f84:	8d 93       	st	X+, r24
    2f86:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2f88:	a2 17       	cp	r26, r18
    2f8a:	b3 07       	cpc	r27, r19
    2f8c:	a1 f7       	brne	.-24     	; 0x2f76 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2f8e:	84 e8       	ldi	r24, 0x84	; 132
    2f90:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2f94:	ec eb       	ldi	r30, 0xBC	; 188
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	88 23       	and	r24, r24
    2f9c:	ec f7       	brge	.-6      	; 0x2f98 <m_wii_read+0x98>
	temp[15] = TWDR;
    2f9e:	80 91 bb 00 	lds	r24, 0x00BB
    2fa2:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2fa4:	84 e9       	ldi	r24, 0x94	; 148
    2fa6:	80 93 bc 00 	sts	0x00BC, r24
    2faa:	fe 01       	movw	r30, r28
    2fac:	34 96       	adiw	r30, 0x04	; 4
    2fae:	e0 2e       	mov	r14, r16
    2fb0:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2fb2:	80 81       	ld	r24, Z
    2fb4:	98 2f       	mov	r25, r24
    2fb6:	90 73       	andi	r25, 0x30	; 48
    2fb8:	af 01       	movw	r20, r30
    2fba:	42 50       	subi	r20, 0x02	; 2
    2fbc:	51 09       	sbc	r21, r1
    2fbe:	da 01       	movw	r26, r20
    2fc0:	4c 91       	ld	r20, X
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	b0 e1       	ldi	r27, 0x10	; 16
    2fc6:	9b 9f       	mul	r25, r27
    2fc8:	40 0d       	add	r20, r0
    2fca:	51 1d       	adc	r21, r1
    2fcc:	11 24       	eor	r1, r1
    2fce:	d7 01       	movw	r26, r14
    2fd0:	4d 93       	st	X+, r20
    2fd2:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2fd4:	48 2f       	mov	r20, r24
    2fd6:	40 7c       	andi	r20, 0xC0	; 192
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	44 0f       	add	r20, r20
    2fdc:	55 1f       	adc	r21, r21
    2fde:	44 0f       	add	r20, r20
    2fe0:	55 1f       	adc	r21, r21
    2fe2:	bf 01       	movw	r22, r30
    2fe4:	61 50       	subi	r22, 0x01	; 1
    2fe6:	71 09       	sbc	r23, r1
    2fe8:	db 01       	movw	r26, r22
    2fea:	9c 91       	ld	r25, X
    2fec:	49 0f       	add	r20, r25
    2fee:	51 1d       	adc	r21, r1
    2ff0:	d7 01       	movw	r26, r14
    2ff2:	13 96       	adiw	r26, 0x03	; 3
    2ff4:	5c 93       	st	X, r21
    2ff6:	4e 93       	st	-X, r20
    2ff8:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2ffa:	8f 70       	andi	r24, 0x0F	; 15
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	15 96       	adiw	r26, 0x05	; 5
    3000:	9c 93       	st	X, r25
    3002:	8e 93       	st	-X, r24
    3004:	14 97       	sbiw	r26, 0x04	; 4
    3006:	33 96       	adiw	r30, 0x03	; 3
    3008:	b6 e0       	ldi	r27, 0x06	; 6
    300a:	eb 0e       	add	r14, r27
    300c:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    300e:	2e 17       	cp	r18, r30
    3010:	3f 07       	cpc	r19, r31
    3012:	79 f6       	brne	.-98     	; 0x2fb2 <m_wii_read+0xb2>
    3014:	06 c0       	rjmp	.+12     	; 0x3022 <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	05 c0       	rjmp	.+10     	; 0x3024 <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	03 c0       	rjmp	.+6      	; 0x3024 <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    3022:	81 e0       	ldi	r24, 0x01	; 1
}
    3024:	60 96       	adiw	r28, 0x10	; 16
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	ff 90       	pop	r15
    303a:	ef 90       	pop	r14
    303c:	08 95       	ret

0000303e <__vector_3>:
		m_wait(wait);		// 500ms for read putty, 10ms for actual running
		
	}
}

ISR(INT2_vect){
    303e:	1f 92       	push	r1
    3040:	0f 92       	push	r0
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	0f 92       	push	r0
    3046:	11 24       	eor	r1, r1
    3048:	2f 93       	push	r18
    304a:	3f 93       	push	r19
    304c:	4f 93       	push	r20
    304e:	5f 93       	push	r21
    3050:	6f 93       	push	r22
    3052:	7f 93       	push	r23
    3054:	8f 93       	push	r24
    3056:	9f 93       	push	r25
    3058:	af 93       	push	r26
    305a:	bf 93       	push	r27
    305c:	ef 93       	push	r30
    305e:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);	// pull the packet
    3060:	6a e0       	ldi	r22, 0x0A	; 10
    3062:	86 ea       	ldi	r24, 0xA6	; 166
    3064:	91 e0       	ldi	r25, 0x01	; 1
    3066:	0e 94 3b 13 	call	0x2676	; 0x2676 <m_rf_read>
	switch(buffer[0]){
    306a:	80 91 a6 01 	lds	r24, 0x01A6
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	fc 01       	movw	r30, r24
    3072:	e0 5a       	subi	r30, 0xA0	; 160
    3074:	f1 09       	sbc	r31, r1
    3076:	e8 30       	cpi	r30, 0x08	; 8
    3078:	f1 05       	cpc	r31, r1
    307a:	08 f0       	brcs	.+2      	; 0x307e <__vector_3+0x40>
    307c:	07 c1       	rjmp	.+526    	; 0x328c <__vector_3+0x24e>
    307e:	e3 5a       	subi	r30, 0xA3	; 163
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__tablejump2__>
		case 0xA0:
			usb_tx_string("flash LED \n");
    3086:	83 e3       	ldi	r24, 0x33	; 51
    3088:	93 e0       	ldi	r25, 0x03	; 3
    308a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			state = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	90 93 b5 01 	sts	0x01B5, r25
    3096:	80 93 b4 01 	sts	0x01B4, r24
			break;
    309a:	f8 c0       	rjmp	.+496    	; 0x328c <__vector_3+0x24e>
		case 0xA1:
			m_usb_tx_string("Play \n");
    309c:	8c e2       	ldi	r24, 0x2C	; 44
    309e:	93 e0       	ldi	r25, 0x03	; 3
    30a0:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			if(check(PINC, 7)){
    30a4:	37 9b       	sbis	0x06, 7	; 6
    30a6:	19 c0       	rjmp	.+50     	; 0x30da <__vector_3+0x9c>
				goal[0] = GateB;  // left gate
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a8 ec       	ldi	r26, 0xC8	; 200
    30ae:	b3 ec       	ldi	r27, 0xC3	; 195
    30b0:	80 93 35 01 	sts	0x0135, r24
    30b4:	90 93 36 01 	sts	0x0136, r25
    30b8:	a0 93 37 01 	sts	0x0137, r26
    30bc:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = -xline;  // left defense line
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	a8 e4       	ldi	r26, 0x48	; 72
    30c6:	b3 ec       	ldi	r27, 0xC3	; 195
    30c8:	80 93 2d 01 	sts	0x012D, r24
    30cc:	90 93 2e 01 	sts	0x012E, r25
    30d0:	a0 93 2f 01 	sts	0x012F, r26
    30d4:	b0 93 30 01 	sts	0x0130, r27
    30d8:	18 c0       	rjmp	.+48     	; 0x310a <__vector_3+0xcc>
			}
			else{
				goal[0] = GateA;  // right gate
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a8 ec       	ldi	r26, 0xC8	; 200
    30e0:	b3 e4       	ldi	r27, 0x43	; 67
    30e2:	80 93 35 01 	sts	0x0135, r24
    30e6:	90 93 36 01 	sts	0x0136, r25
    30ea:	a0 93 37 01 	sts	0x0137, r26
    30ee:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = xline;	// right defense line
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a8 e4       	ldi	r26, 0x48	; 72
    30f8:	b3 e4       	ldi	r27, 0x43	; 67
    30fa:	80 93 2d 01 	sts	0x012D, r24
    30fe:	90 93 2e 01 	sts	0x012E, r25
    3102:	a0 93 2f 01 	sts	0x012F, r26
    3106:	b0 93 30 01 	sts	0x0130, r27
			}
			if(check(PINC, 6)){
    310a:	36 9b       	sbis	0x06, 6	; 6
    310c:	03 c0       	rjmp	.+6      	; 0x3114 <__vector_3+0xd6>
				set(PORTB, 2); // red light
    310e:	2a 9a       	sbi	0x05, 2	; 5
				clear(PORTB, 3);
    3110:	2b 98       	cbi	0x05, 3	; 5
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <__vector_3+0xda>
			}
			else{
				set(PORTB, 3); // blue light
    3114:	2b 9a       	sbi	0x05, 3	; 5
				clear(PORTB, 2);
    3116:	2a 98       	cbi	0x05, 2	; 5
			}
			state = 5;
    3118:	85 e0       	ldi	r24, 0x05	; 5
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	90 93 b5 01 	sts	0x01B5, r25
    3120:	80 93 b4 01 	sts	0x01B4, r24
			findPuck(state);
    3124:	0e 94 8c 03 	call	0x718	; 0x718 <findPuck>
			localization(&state, &goal[0], &c_wii[0], &dir[0]);
    3128:	22 e9       	ldi	r18, 0x92	; 146
    312a:	31 e0       	ldi	r19, 0x01	; 1
    312c:	4a e9       	ldi	r20, 0x9A	; 154
    312e:	51 e0       	ldi	r21, 0x01	; 1
    3130:	65 e3       	ldi	r22, 0x35	; 53
    3132:	71 e0       	ldi	r23, 0x01	; 1
    3134:	84 eb       	ldi	r24, 0xB4	; 180
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	0e 94 96 0b 	call	0x172c	; 0x172c <localization>
			deterState(&state);
    313c:	84 eb       	ldi	r24, 0xB4	; 180
    313e:	91 e0       	ldi	r25, 0x01	; 1
    3140:	0e 94 69 06 	call	0xcd2	; 0xcd2 <deterState>
			break;
    3144:	a3 c0       	rjmp	.+326    	; 0x328c <__vector_3+0x24e>
		case 0xA2:
			m_usb_tx_string("Goal A\n");
    3146:	84 e2       	ldi	r24, 0x24	; 36
    3148:	93 e0       	ldi	r25, 0x03	; 3
    314a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			scoreR = buffer[1];
    314e:	80 91 a7 01 	lds	r24, 0x01A7
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	90 93 a5 01 	sts	0x01A5, r25
    3158:	80 93 a4 01 	sts	0x01A4, r24
			scoreB = buffer[2];
    315c:	80 91 a8 01 	lds	r24, 0x01A8
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	90 93 a3 01 	sts	0x01A3, r25
    3166:	80 93 a2 01 	sts	0x01A2, r24
			OCR1B = 0;
    316a:	10 92 8b 00 	sts	0x008B, r1
    316e:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3172:	10 92 8d 00 	sts	0x008D, r1
    3176:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    317a:	10 92 b5 01 	sts	0x01B5, r1
    317e:	10 92 b4 01 	sts	0x01B4, r1
			break;
    3182:	84 c0       	rjmp	.+264    	; 0x328c <__vector_3+0x24e>
		case 0xA3:
			m_usb_tx_string("Goal B\n");
    3184:	8c e1       	ldi	r24, 0x1C	; 28
    3186:	93 e0       	ldi	r25, 0x03	; 3
    3188:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			scoreR = buffer[1];
    318c:	80 91 a7 01 	lds	r24, 0x01A7
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	90 93 a5 01 	sts	0x01A5, r25
    3196:	80 93 a4 01 	sts	0x01A4, r24
			scoreB = buffer[2];
    319a:	80 91 a8 01 	lds	r24, 0x01A8
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	90 93 a3 01 	sts	0x01A3, r25
    31a4:	80 93 a2 01 	sts	0x01A2, r24
			OCR1B = 0;
    31a8:	10 92 8b 00 	sts	0x008B, r1
    31ac:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    31b0:	10 92 8d 00 	sts	0x008D, r1
    31b4:	10 92 8c 00 	sts	0x008C, r1
			state = 0;
    31b8:	10 92 b5 01 	sts	0x01B5, r1
    31bc:	10 92 b4 01 	sts	0x01B4, r1
			break;
    31c0:	65 c0       	rjmp	.+202    	; 0x328c <__vector_3+0x24e>
		case 0xA4:
			m_usb_tx_string("Pause\n");
    31c2:	85 e1       	ldi	r24, 0x15	; 21
    31c4:	93 e0       	ldi	r25, 0x03	; 3
    31c6:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			state = 0;
    31ca:	10 92 b5 01 	sts	0x01B5, r1
    31ce:	10 92 b4 01 	sts	0x01B4, r1
			OCR1B = 0;
    31d2:	10 92 8b 00 	sts	0x008B, r1
    31d6:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    31da:	10 92 8d 00 	sts	0x008D, r1
    31de:	10 92 8c 00 	sts	0x008C, r1
			break;
    31e2:	54 c0       	rjmp	.+168    	; 0x328c <__vector_3+0x24e>
		case 0xA6:
			m_usb_tx_string("Halftime\n");
    31e4:	8b e0       	ldi	r24, 0x0B	; 11
    31e6:	93 e0       	ldi	r25, 0x03	; 3
    31e8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			if(check(PINC, 6)){
    31ec:	36 9b       	sbis	0x06, 6	; 6
    31ee:	19 c0       	rjmp	.+50     	; 0x3222 <__vector_3+0x1e4>
				goal[0] = GateB;  // left gate
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	a8 ec       	ldi	r26, 0xC8	; 200
    31f6:	b3 ec       	ldi	r27, 0xC3	; 195
    31f8:	80 93 35 01 	sts	0x0135, r24
    31fc:	90 93 36 01 	sts	0x0136, r25
    3200:	a0 93 37 01 	sts	0x0137, r26
    3204:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = -xline;  // left defense line
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a8 e4       	ldi	r26, 0x48	; 72
    320e:	b3 ec       	ldi	r27, 0xC3	; 195
    3210:	80 93 2d 01 	sts	0x012D, r24
    3214:	90 93 2e 01 	sts	0x012E, r25
    3218:	a0 93 2f 01 	sts	0x012F, r26
    321c:	b0 93 30 01 	sts	0x0130, r27
    3220:	18 c0       	rjmp	.+48     	; 0x3252 <__vector_3+0x214>
			}
			else{
				goal[0] = GateA;  // right gate
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	a8 ec       	ldi	r26, 0xC8	; 200
    3228:	b3 e4       	ldi	r27, 0x43	; 67
    322a:	80 93 35 01 	sts	0x0135, r24
    322e:	90 93 36 01 	sts	0x0136, r25
    3232:	a0 93 37 01 	sts	0x0137, r26
    3236:	b0 93 38 01 	sts	0x0138, r27
				desPos[0] = xline;	// right defense line
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a8 e4       	ldi	r26, 0x48	; 72
    3240:	b3 e4       	ldi	r27, 0x43	; 67
    3242:	80 93 2d 01 	sts	0x012D, r24
    3246:	90 93 2e 01 	sts	0x012E, r25
    324a:	a0 93 2f 01 	sts	0x012F, r26
    324e:	b0 93 30 01 	sts	0x0130, r27
			}

			state = 0;
    3252:	10 92 b5 01 	sts	0x01B5, r1
    3256:	10 92 b4 01 	sts	0x01B4, r1
			OCR1B = 0;
    325a:	10 92 8b 00 	sts	0x008B, r1
    325e:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3262:	10 92 8d 00 	sts	0x008D, r1
    3266:	10 92 8c 00 	sts	0x008C, r1
			break;
    326a:	10 c0       	rjmp	.+32     	; 0x328c <__vector_3+0x24e>
		case 0xA7:
			m_usb_tx_string("Game over\n");
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	93 e0       	ldi	r25, 0x03	; 3
    3270:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
			state = 0;
    3274:	10 92 b5 01 	sts	0x01B5, r1
    3278:	10 92 b4 01 	sts	0x01B4, r1
			OCR1B = 0;
    327c:	10 92 8b 00 	sts	0x008B, r1
    3280:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    3284:	10 92 8d 00 	sts	0x008D, r1
    3288:	10 92 8c 00 	sts	0x008C, r1
			break;
		
		default:
			break;
	}
}
    328c:	ff 91       	pop	r31
    328e:	ef 91       	pop	r30
    3290:	bf 91       	pop	r27
    3292:	af 91       	pop	r26
    3294:	9f 91       	pop	r25
    3296:	8f 91       	pop	r24
    3298:	7f 91       	pop	r23
    329a:	6f 91       	pop	r22
    329c:	5f 91       	pop	r21
    329e:	4f 91       	pop	r20
    32a0:	3f 91       	pop	r19
    32a2:	2f 91       	pop	r18
    32a4:	0f 90       	pop	r0
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	0f 90       	pop	r0
    32aa:	1f 90       	pop	r1
    32ac:	18 95       	reti

000032ae <init_timer>:

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
    32ae:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
    32b0:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
    32b2:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
    32b4:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 800;
    32b6:	80 e2       	ldi	r24, 0x20	; 32
    32b8:	93 e0       	ldi	r25, 0x03	; 3
    32ba:	90 93 89 00 	sts	0x0089, r25
    32be:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    32c2:	10 92 8b 00 	sts	0x008B, r1
    32c6:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
    32ca:	10 92 8d 00 	sts	0x008D, r1
    32ce:	10 92 8c 00 	sts	0x008C, r1
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
    32d2:	a1 e8       	ldi	r26, 0x81	; 129
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	8c 91       	ld	r24, X
    32d8:	80 61       	ori	r24, 0x10	; 16
    32da:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
    32dc:	8c 91       	ld	r24, X
    32de:	88 60       	ori	r24, 0x08	; 8
    32e0:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
    32e2:	e0 e8       	ldi	r30, 0x80	; 128
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 81       	ld	r24, Z
    32e8:	82 60       	ori	r24, 0x02	; 2
    32ea:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
    32ec:	80 81       	ld	r24, Z
    32ee:	81 60       	ori	r24, 0x01	; 1
    32f0:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
    32f2:	80 81       	ld	r24, Z
    32f4:	80 62       	ori	r24, 0x20	; 32
    32f6:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    32f8:	80 81       	ld	r24, Z
    32fa:	8f 7e       	andi	r24, 0xEF	; 239
    32fc:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
    32fe:	80 81       	ld	r24, Z
    3300:	88 60       	ori	r24, 0x08	; 8
    3302:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    3304:	80 81       	ld	r24, Z
    3306:	8b 7f       	andi	r24, 0xFB	; 251
    3308:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
    330a:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
    330c:	27 9a       	sbi	0x04, 7	; 4
	
	// Turn off timer first
	clear(TCCR1B, CS12);
    330e:	8c 91       	ld	r24, X
    3310:	8b 7f       	andi	r24, 0xFB	; 251
    3312:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
    3314:	8c 91       	ld	r24, X
    3316:	8d 7f       	andi	r24, 0xFD	; 253
    3318:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
    331a:	8c 91       	ld	r24, X
    331c:	81 60       	ori	r24, 0x01	; 1
    331e:	8c 93       	st	X, r24
    3320:	08 95       	ret

00003322 <main>:

void init_timer(void);

int main(void)
{
	m_clockdivide(0);
    3322:	e1 e6       	ldi	r30, 0x61	; 97
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 e8       	ldi	r24, 0x80	; 128
    3328:	80 83       	st	Z, r24
    332a:	10 82       	st	Z, r1
	
	state = 0;
    332c:	10 92 b5 01 	sts	0x01B5, r1
    3330:	10 92 b4 01 	sts	0x01B4, r1
	
	m_usb_init();
    3334:	0e 94 a3 13 	call	0x2746	; 0x2746 <m_usb_init>
	
	m_wii_open();
    3338:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <m_wii_open>
	//m_red(ON);
	//while(!m_wii_open());
	//m_red(OFF);
	
	m_red(ON);
    333c:	6e 9a       	sbi	0x0d, 6	; 13
    333e:	76 98       	cbi	0x0e, 6	; 14
	m_bus_init(); // enable mBUS
    3340:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // configure mRF
    3344:	4a e0       	ldi	r20, 0x0A	; 10
    3346:	6e e0       	ldi	r22, 0x0E	; 14
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <m_rf_open>
	m_red(OFF);
    334e:	6e 9a       	sbi	0x0d, 6	; 13
    3350:	76 9a       	sbi	0x0e, 6	; 14
	
	init_timer();
    3352:	0e 94 57 19 	call	0x32ae	; 0x32ae <init_timer>
	init_ADC();
    3356:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_ADC>
	
	clear(DDRC, 6); // Read a switch value to decide which team
    335a:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRC, 7);
    335c:	3f 98       	cbi	0x07, 7	; 7
	clear(PORTC,7);
    335e:	47 98       	cbi	0x08, 7	; 8
	set(DDRB, 2);
    3360:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB, 3);
    3362:	23 9a       	sbi	0x04, 3	; 4

	if(check(PINC, 7)){
    3364:	37 9b       	sbis	0x06, 7	; 6
    3366:	19 c0       	rjmp	.+50     	; 0x339a <main+0x78>
		goal[0] = GateB;  // left gate
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	a8 ec       	ldi	r26, 0xC8	; 200
    336e:	b3 ec       	ldi	r27, 0xC3	; 195
    3370:	80 93 35 01 	sts	0x0135, r24
    3374:	90 93 36 01 	sts	0x0136, r25
    3378:	a0 93 37 01 	sts	0x0137, r26
    337c:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = xline;  // right defense line
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	a8 e4       	ldi	r26, 0x48	; 72
    3386:	b3 e4       	ldi	r27, 0x43	; 67
    3388:	80 93 2d 01 	sts	0x012D, r24
    338c:	90 93 2e 01 	sts	0x012E, r25
    3390:	a0 93 2f 01 	sts	0x012F, r26
    3394:	b0 93 30 01 	sts	0x0130, r27
    3398:	18 c0       	rjmp	.+48     	; 0x33ca <main+0xa8>
	}
	else{
		goal[0] = GateA;  // right gate
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	a8 ec       	ldi	r26, 0xC8	; 200
    33a0:	b3 e4       	ldi	r27, 0x43	; 67
    33a2:	80 93 35 01 	sts	0x0135, r24
    33a6:	90 93 36 01 	sts	0x0136, r25
    33aa:	a0 93 37 01 	sts	0x0137, r26
    33ae:	b0 93 38 01 	sts	0x0138, r27
		desPos[0] = -xline;	// left defense line
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	a8 e4       	ldi	r26, 0x48	; 72
    33b8:	b3 ec       	ldi	r27, 0xC3	; 195
    33ba:	80 93 2d 01 	sts	0x012D, r24
    33be:	90 93 2e 01 	sts	0x012E, r25
    33c2:	a0 93 2f 01 	sts	0x012F, r26
    33c6:	b0 93 30 01 	sts	0x0130, r27
	}
	if(check(PINC, 6)){
    33ca:	36 9b       	sbis	0x06, 6	; 6
    33cc:	1c c0       	rjmp	.+56     	; 0x3406 <main+0xe4>
		set(PORTB, 2); // red light
    33ce:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB, 3);
    33d0:	2b 98       	cbi	0x05, 3	; 5
				m_red(TOGGLE);
				m_wait(1000);	// wait
				break;
				
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    33d2:	68 94       	set
    33d4:	bb 24       	eor	r11, r11
    33d6:	b6 f8       	bld	r11, 6
				m_usb_tx_int(goal[1]);
				m_usb_tx_string("\n");
				break;
				
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    33d8:	68 94       	set
    33da:	aa 24       	eor	r10, r10
    33dc:	a2 f8       	bld	r10, 2
				m_red(TOGGLE);
				localization(&state, &desPos[0], &c_wii[0], &dir[0]);
				m_usb_tx_string("Desire Position = ");
				m_usb_tx_int(desPos[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(desPos[1]);
    33de:	0f 2e       	mov	r0, r31
    33e0:	f1 e3       	ldi	r31, 0x31	; 49
    33e2:	cf 2e       	mov	r12, r31
    33e4:	f1 e0       	ldi	r31, 0x01	; 1
    33e6:	df 2e       	mov	r13, r31
    33e8:	f0 2d       	mov	r31, r0
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
				//deterState(&state);
				m_usb_tx_string("goal = ");
				m_usb_tx_int(goal[0]);
				m_usb_tx_string(", ");
				m_usb_tx_int(goal[1]);
    33ea:	0f 2e       	mov	r0, r31
    33ec:	f9 e3       	ldi	r31, 0x39	; 57
    33ee:	ef 2e       	mov	r14, r31
    33f0:	f1 e0       	ldi	r31, 0x01	; 1
    33f2:	ff 2e       	mov	r15, r31
    33f4:	f0 2d       	mov	r31, r0
		m_usb_tx_int(state);
		m_usb_tx_string("\n");
		switch(state){
			case 0:
				// stop
				OCR1B = 0;
    33f6:	0a e8       	ldi	r16, 0x8A	; 138
    33f8:	10 e0       	ldi	r17, 0x00	; 0
				OCR1C = 0;
    33fa:	cc e8       	ldi	r28, 0x8C	; 140
    33fc:	d0 e0       	ldi	r29, 0x00	; 0
				if(check(PINC, 6)){
					toggle(PORTB, 2); // blue Red
					clear(PORTB, 3);
				}
				else{
					toggle(PORTB, 3); // red blue
    33fe:	68 94       	set
    3400:	99 24       	eor	r9, r9
    3402:	93 f8       	bld	r9, 3
    3404:	03 c0       	rjmp	.+6      	; 0x340c <main+0xea>
	if(check(PINC, 6)){
		set(PORTB, 2); // red light
		clear(PORTB, 3);
	}
	else{
		set(PORTB, 3); // blue light
    3406:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTB, 2);
    3408:	2a 98       	cbi	0x05, 2	; 5
    340a:	e3 cf       	rjmp	.-58     	; 0x33d2 <main+0xb0>
	}
	while(1)
	{
		m_usb_tx_string("state: ");
    340c:	84 e7       	ldi	r24, 0x74	; 116
    340e:	93 e0       	ldi	r25, 0x03	; 3
    3410:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		m_usb_tx_int(state);
    3414:	80 91 b4 01 	lds	r24, 0x01B4
    3418:	90 91 b5 01 	lds	r25, 0x01B5
    341c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    3420:	82 e7       	ldi	r24, 0x72	; 114
    3422:	93 e0       	ldi	r25, 0x03	; 3
    3424:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		switch(state){
    3428:	80 91 b4 01 	lds	r24, 0x01B4
    342c:	90 91 b5 01 	lds	r25, 0x01B5
    3430:	82 30       	cpi	r24, 0x02	; 2
    3432:	91 05       	cpc	r25, r1
    3434:	71 f1       	breq	.+92     	; 0x3492 <main+0x170>
    3436:	2c f4       	brge	.+10     	; 0x3442 <main+0x120>
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	61 f0       	breq	.+24     	; 0x3454 <main+0x132>
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	81 f0       	breq	.+32     	; 0x3460 <main+0x13e>
    3440:	c7 c0       	rjmp	.+398    	; 0x35d0 <main+0x2ae>
    3442:	84 30       	cpi	r24, 0x04	; 4
    3444:	91 05       	cpc	r25, r1
    3446:	09 f4       	brne	.+2      	; 0x344a <main+0x128>
    3448:	6f c0       	rjmp	.+222    	; 0x3528 <main+0x206>
    344a:	d4 f1       	brlt	.+116    	; 0x34c0 <main+0x19e>
    344c:	05 97       	sbiw	r24, 0x05	; 5
    344e:	09 f4       	brne	.+2      	; 0x3452 <main+0x130>
    3450:	a1 c0       	rjmp	.+322    	; 0x3594 <main+0x272>
    3452:	be c0       	rjmp	.+380    	; 0x35d0 <main+0x2ae>
			case 0:
				// stop
				OCR1B = 0;
    3454:	f8 01       	movw	r30, r16
    3456:	11 82       	std	Z+1, r1	; 0x01
    3458:	10 82       	st	Z, r1
				OCR1C = 0;
    345a:	19 82       	std	Y+1, r1	; 0x01
    345c:	18 82       	st	Y, r1
				break;
    345e:	b8 c0       	rjmp	.+368    	; 0x35d0 <main+0x2ae>
			
			case 1:		// comm test, flash a LED
				if(check(PINC, 6)){
    3460:	36 9b       	sbis	0x06, 6	; 6
    3462:	05 c0       	rjmp	.+10     	; 0x346e <main+0x14c>
					toggle(PORTB, 2); // blue Red
    3464:	85 b1       	in	r24, 0x05	; 5
    3466:	8a 25       	eor	r24, r10
    3468:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 3);
    346a:	2b 98       	cbi	0x05, 3	; 5
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <main+0x154>
				}
				else{
					toggle(PORTB, 3); // red blue
    346e:	85 b1       	in	r24, 0x05	; 5
    3470:	89 25       	eor	r24, r9
    3472:	85 b9       	out	0x05, r24	; 5
					clear(PORTB, 2);
    3474:	2a 98       	cbi	0x05, 2	; 5
				}
				m_red(TOGGLE);
    3476:	6e 9a       	sbi	0x0d, 6	; 13
    3478:	8e b1       	in	r24, 0x0e	; 14
    347a:	8b 25       	eor	r24, r11
    347c:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    347e:	ff e3       	ldi	r31, 0x3F	; 63
    3480:	2d e0       	ldi	r18, 0x0D	; 13
    3482:	83 e0       	ldi	r24, 0x03	; 3
    3484:	f1 50       	subi	r31, 0x01	; 1
    3486:	20 40       	sbci	r18, 0x00	; 0
    3488:	80 40       	sbci	r24, 0x00	; 0
    348a:	e1 f7       	brne	.-8      	; 0x3484 <main+0x162>
    348c:	00 c0       	rjmp	.+0      	; 0x348e <main+0x16c>
    348e:	00 00       	nop
    3490:	9f c0       	rjmp	.+318    	; 0x35d0 <main+0x2ae>
				m_wait(1000);	// wait
				break;
				
			case 2:		// play mode, find puck
				m_red(TOGGLE);
    3492:	6e 9a       	sbi	0x0d, 6	; 13
    3494:	8e b1       	in	r24, 0x0e	; 14
    3496:	8b 25       	eor	r24, r11
    3498:	8e b9       	out	0x0e, r24	; 14
				m_green(OFF);
    349a:	6a 9a       	sbi	0x0d, 2	; 13
    349c:	72 9a       	sbi	0x0e, 2	; 14
				findPuck(state);
    349e:	80 91 b4 01 	lds	r24, 0x01B4
    34a2:	90 91 b5 01 	lds	r25, 0x01B5
    34a6:	0e 94 8c 03 	call	0x718	; 0x718 <findPuck>
				//deterState(&state);
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    34aa:	22 e9       	ldi	r18, 0x92	; 146
    34ac:	31 e0       	ldi	r19, 0x01	; 1
    34ae:	4a e9       	ldi	r20, 0x9A	; 154
    34b0:	51 e0       	ldi	r21, 0x01	; 1
    34b2:	65 e3       	ldi	r22, 0x35	; 53
    34b4:	71 e0       	ldi	r23, 0x01	; 1
    34b6:	84 eb       	ldi	r24, 0xB4	; 180
    34b8:	91 e0       	ldi	r25, 0x01	; 1
    34ba:	0e 94 96 0b 	call	0x172c	; 0x172c <localization>
				break;
    34be:	88 c0       	rjmp	.+272    	; 0x35d0 <main+0x2ae>
				
			case 3:		// got the puck, find goal
				m_green(TOGGLE);
    34c0:	6a 9a       	sbi	0x0d, 2	; 13
    34c2:	8e b1       	in	r24, 0x0e	; 14
    34c4:	8a 25       	eor	r24, r10
    34c6:	8e b9       	out	0x0e, r24	; 14
				m_red(OFF);
    34c8:	6e 9a       	sbi	0x0d, 6	; 13
    34ca:	76 9a       	sbi	0x0e, 6	; 14
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    34cc:	22 e9       	ldi	r18, 0x92	; 146
    34ce:	31 e0       	ldi	r19, 0x01	; 1
    34d0:	4a e9       	ldi	r20, 0x9A	; 154
    34d2:	51 e0       	ldi	r21, 0x01	; 1
    34d4:	65 e3       	ldi	r22, 0x35	; 53
    34d6:	71 e0       	ldi	r23, 0x01	; 1
    34d8:	84 eb       	ldi	r24, 0xB4	; 180
    34da:	91 e0       	ldi	r25, 0x01	; 1
    34dc:	0e 94 96 0b 	call	0x172c	; 0x172c <localization>
				//deterState(&state);
				m_usb_tx_string("goal = ");
    34e0:	8a e6       	ldi	r24, 0x6A	; 106
    34e2:	93 e0       	ldi	r25, 0x03	; 3
    34e4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				m_usb_tx_int(goal[0]);
    34e8:	60 91 35 01 	lds	r22, 0x0135
    34ec:	70 91 36 01 	lds	r23, 0x0136
    34f0:	80 91 37 01 	lds	r24, 0x0137
    34f4:	90 91 38 01 	lds	r25, 0x0138
    34f8:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    34fc:	cb 01       	movw	r24, r22
    34fe:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
				m_usb_tx_string(", ");
    3502:	87 e6       	ldi	r24, 0x67	; 103
    3504:	93 e0       	ldi	r25, 0x03	; 3
    3506:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				m_usb_tx_int(goal[1]);
    350a:	f7 01       	movw	r30, r14
    350c:	60 81       	ld	r22, Z
    350e:	71 81       	ldd	r23, Z+1	; 0x01
    3510:	82 81       	ldd	r24, Z+2	; 0x02
    3512:	93 81       	ldd	r25, Z+3	; 0x03
    3514:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    3518:	cb 01       	movw	r24, r22
    351a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
				m_usb_tx_string("\n");
    351e:	85 e6       	ldi	r24, 0x65	; 101
    3520:	93 e0       	ldi	r25, 0x03	; 3
    3522:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				break;
    3526:	54 c0       	rjmp	.+168    	; 0x35d0 <main+0x2ae>
				
			case 4:		// teammate got the puck, back to defense
				m_green(TOGGLE);
    3528:	6a 9a       	sbi	0x0d, 2	; 13
    352a:	8e b1       	in	r24, 0x0e	; 14
    352c:	8a 25       	eor	r24, r10
    352e:	8e b9       	out	0x0e, r24	; 14
				m_red(TOGGLE);
    3530:	6e 9a       	sbi	0x0d, 6	; 13
    3532:	8e b1       	in	r24, 0x0e	; 14
    3534:	8b 25       	eor	r24, r11
    3536:	8e b9       	out	0x0e, r24	; 14
				localization(&state, &desPos[0], &c_wii[0], &dir[0]);
    3538:	22 e9       	ldi	r18, 0x92	; 146
    353a:	31 e0       	ldi	r19, 0x01	; 1
    353c:	4a e9       	ldi	r20, 0x9A	; 154
    353e:	51 e0       	ldi	r21, 0x01	; 1
    3540:	6d e2       	ldi	r22, 0x2D	; 45
    3542:	71 e0       	ldi	r23, 0x01	; 1
    3544:	84 eb       	ldi	r24, 0xB4	; 180
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	0e 94 96 0b 	call	0x172c	; 0x172c <localization>
				m_usb_tx_string("Desire Position = ");
    354c:	82 e5       	ldi	r24, 0x52	; 82
    354e:	93 e0       	ldi	r25, 0x03	; 3
    3550:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				m_usb_tx_int(desPos[0]);
    3554:	60 91 2d 01 	lds	r22, 0x012D
    3558:	70 91 2e 01 	lds	r23, 0x012E
    355c:	80 91 2f 01 	lds	r24, 0x012F
    3560:	90 91 30 01 	lds	r25, 0x0130
    3564:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    3568:	cb 01       	movw	r24, r22
    356a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
				m_usb_tx_string(", ");
    356e:	8f e4       	ldi	r24, 0x4F	; 79
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				m_usb_tx_int(desPos[1]);
    3576:	f6 01       	movw	r30, r12
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__fixsfsi>
    3584:	cb 01       	movw	r24, r22
    3586:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
				m_usb_tx_string("\n");
    358a:	8d e4       	ldi	r24, 0x4D	; 77
    358c:	93 e0       	ldi	r25, 0x03	; 3
    358e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
				break;
    3592:	1e c0       	rjmp	.+60     	; 0x35d0 <main+0x2ae>
				
			case 5:		// defense mode
				m_red(TOGGLE);
    3594:	6e 9a       	sbi	0x0d, 6	; 13
    3596:	8e b1       	in	r24, 0x0e	; 14
    3598:	8b 25       	eor	r24, r11
    359a:	8e b9       	out	0x0e, r24	; 14
				m_green(TOGGLE);
    359c:	6a 9a       	sbi	0x0d, 2	; 13
    359e:	8e b1       	in	r24, 0x0e	; 14
    35a0:	8a 25       	eor	r24, r10
    35a2:	8e b9       	out	0x0e, r24	; 14
				findPuck(state);
    35a4:	80 91 b4 01 	lds	r24, 0x01B4
    35a8:	90 91 b5 01 	lds	r25, 0x01B5
    35ac:	0e 94 8c 03 	call	0x718	; 0x718 <findPuck>
				localization(&state, &goal[0], &c_wii[0], &dir[0]);
    35b0:	22 e9       	ldi	r18, 0x92	; 146
    35b2:	31 e0       	ldi	r19, 0x01	; 1
    35b4:	4a e9       	ldi	r20, 0x9A	; 154
    35b6:	51 e0       	ldi	r21, 0x01	; 1
    35b8:	65 e3       	ldi	r22, 0x35	; 53
    35ba:	71 e0       	ldi	r23, 0x01	; 1
    35bc:	84 eb       	ldi	r24, 0xB4	; 180
    35be:	91 e0       	ldi	r25, 0x01	; 1
    35c0:	0e 94 96 0b 	call	0x172c	; 0x172c <localization>
				ifGotoPuck(&state, &dir[0]);
    35c4:	62 e9       	ldi	r22, 0x92	; 146
    35c6:	71 e0       	ldi	r23, 0x01	; 1
    35c8:	84 eb       	ldi	r24, 0xB4	; 180
    35ca:	91 e0       	ldi	r25, 0x01	; 1
    35cc:	0e 94 90 06 	call	0xd20	; 0xd20 <ifGotoPuck>
				
			default:
				break;
		}
		
		m_usb_tx_string("1B, 1C: ");
    35d0:	84 e4       	ldi	r24, 0x44	; 68
    35d2:	93 e0       	ldi	r25, 0x03	; 3
    35d4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		m_usb_tx_int(OCR1B);
    35d8:	f8 01       	movw	r30, r16
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
		m_usb_tx_string(", ");
    35e2:	81 e4       	ldi	r24, 0x41	; 65
    35e4:	93 e0       	ldi	r25, 0x03	; 3
    35e6:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
		m_usb_tx_int(OCR1C);
    35ea:	88 81       	ld	r24, Y
    35ec:	99 81       	ldd	r25, Y+1	; 0x01
    35ee:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <m_usb_tx_int>
		m_usb_tx_string("\n");
    35f2:	8f e3       	ldi	r24, 0x3F	; 63
    35f4:	93 e0       	ldi	r25, 0x03	; 3
    35f6:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <print_P>
    35fa:	85 ea       	ldi	r24, 0xA5	; 165
    35fc:	9e e0       	ldi	r25, 0x0E	; 14
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	f1 f7       	brne	.-4      	; 0x35fe <main+0x2dc>
    3602:	00 c0       	rjmp	.+0      	; 0x3604 <main+0x2e2>
    3604:	00 00       	nop
    3606:	02 cf       	rjmp	.-508    	; 0x340c <main+0xea>

00003608 <acos>:
    3608:	9f 93       	push	r25
    360a:	9f 77       	andi	r25, 0x7F	; 127
    360c:	4a d1       	rcall	.+660    	; 0x38a2 <__fp_arccos>
    360e:	0f 90       	pop	r0
    3610:	00 20       	and	r0, r0
    3612:	3a f4       	brpl	.+14     	; 0x3622 <acos+0x1a>
    3614:	90 58       	subi	r25, 0x80	; 128
    3616:	a2 ea       	ldi	r26, 0xA2	; 162
    3618:	2a ed       	ldi	r18, 0xDA	; 218
    361a:	3f e0       	ldi	r19, 0x0F	; 15
    361c:	49 e4       	ldi	r20, 0x49	; 73
    361e:	50 e4       	ldi	r21, 0x40	; 64
    3620:	13 d0       	rcall	.+38     	; 0x3648 <__addsf3x>
    3622:	ba c1       	rjmp	.+884    	; 0x3998 <__fp_round>

00003624 <__subsf3>:
    3624:	50 58       	subi	r21, 0x80	; 128

00003626 <__addsf3>:
    3626:	bb 27       	eor	r27, r27
    3628:	aa 27       	eor	r26, r26
    362a:	0e d0       	rcall	.+28     	; 0x3648 <__addsf3x>
    362c:	b5 c1       	rjmp	.+874    	; 0x3998 <__fp_round>
    362e:	a6 d1       	rcall	.+844    	; 0x397c <__fp_pscA>
    3630:	30 f0       	brcs	.+12     	; 0x363e <__addsf3+0x18>
    3632:	ab d1       	rcall	.+854    	; 0x398a <__fp_pscB>
    3634:	20 f0       	brcs	.+8      	; 0x363e <__addsf3+0x18>
    3636:	31 f4       	brne	.+12     	; 0x3644 <__addsf3+0x1e>
    3638:	9f 3f       	cpi	r25, 0xFF	; 255
    363a:	11 f4       	brne	.+4      	; 0x3640 <__addsf3+0x1a>
    363c:	1e f4       	brtc	.+6      	; 0x3644 <__addsf3+0x1e>
    363e:	76 c1       	rjmp	.+748    	; 0x392c <__fp_nan>
    3640:	0e f4       	brtc	.+2      	; 0x3644 <__addsf3+0x1e>
    3642:	e0 95       	com	r30
    3644:	e7 fb       	bst	r30, 7
    3646:	6c c1       	rjmp	.+728    	; 0x3920 <__fp_inf>

00003648 <__addsf3x>:
    3648:	e9 2f       	mov	r30, r25
    364a:	b7 d1       	rcall	.+878    	; 0x39ba <__fp_split3>
    364c:	80 f3       	brcs	.-32     	; 0x362e <__addsf3+0x8>
    364e:	ba 17       	cp	r27, r26
    3650:	62 07       	cpc	r22, r18
    3652:	73 07       	cpc	r23, r19
    3654:	84 07       	cpc	r24, r20
    3656:	95 07       	cpc	r25, r21
    3658:	18 f0       	brcs	.+6      	; 0x3660 <__addsf3x+0x18>
    365a:	71 f4       	brne	.+28     	; 0x3678 <__addsf3x+0x30>
    365c:	9e f5       	brtc	.+102    	; 0x36c4 <__addsf3x+0x7c>
    365e:	cf c1       	rjmp	.+926    	; 0x39fe <__fp_zero>
    3660:	0e f4       	brtc	.+2      	; 0x3664 <__addsf3x+0x1c>
    3662:	e0 95       	com	r30
    3664:	0b 2e       	mov	r0, r27
    3666:	ba 2f       	mov	r27, r26
    3668:	a0 2d       	mov	r26, r0
    366a:	0b 01       	movw	r0, r22
    366c:	b9 01       	movw	r22, r18
    366e:	90 01       	movw	r18, r0
    3670:	0c 01       	movw	r0, r24
    3672:	ca 01       	movw	r24, r20
    3674:	a0 01       	movw	r20, r0
    3676:	11 24       	eor	r1, r1
    3678:	ff 27       	eor	r31, r31
    367a:	59 1b       	sub	r21, r25
    367c:	99 f0       	breq	.+38     	; 0x36a4 <__addsf3x+0x5c>
    367e:	59 3f       	cpi	r21, 0xF9	; 249
    3680:	50 f4       	brcc	.+20     	; 0x3696 <__addsf3x+0x4e>
    3682:	50 3e       	cpi	r21, 0xE0	; 224
    3684:	68 f1       	brcs	.+90     	; 0x36e0 <__addsf3x+0x98>
    3686:	1a 16       	cp	r1, r26
    3688:	f0 40       	sbci	r31, 0x00	; 0
    368a:	a2 2f       	mov	r26, r18
    368c:	23 2f       	mov	r18, r19
    368e:	34 2f       	mov	r19, r20
    3690:	44 27       	eor	r20, r20
    3692:	58 5f       	subi	r21, 0xF8	; 248
    3694:	f3 cf       	rjmp	.-26     	; 0x367c <__addsf3x+0x34>
    3696:	46 95       	lsr	r20
    3698:	37 95       	ror	r19
    369a:	27 95       	ror	r18
    369c:	a7 95       	ror	r26
    369e:	f0 40       	sbci	r31, 0x00	; 0
    36a0:	53 95       	inc	r21
    36a2:	c9 f7       	brne	.-14     	; 0x3696 <__addsf3x+0x4e>
    36a4:	7e f4       	brtc	.+30     	; 0x36c4 <__addsf3x+0x7c>
    36a6:	1f 16       	cp	r1, r31
    36a8:	ba 0b       	sbc	r27, r26
    36aa:	62 0b       	sbc	r22, r18
    36ac:	73 0b       	sbc	r23, r19
    36ae:	84 0b       	sbc	r24, r20
    36b0:	ba f0       	brmi	.+46     	; 0x36e0 <__addsf3x+0x98>
    36b2:	91 50       	subi	r25, 0x01	; 1
    36b4:	a1 f0       	breq	.+40     	; 0x36de <__addsf3x+0x96>
    36b6:	ff 0f       	add	r31, r31
    36b8:	bb 1f       	adc	r27, r27
    36ba:	66 1f       	adc	r22, r22
    36bc:	77 1f       	adc	r23, r23
    36be:	88 1f       	adc	r24, r24
    36c0:	c2 f7       	brpl	.-16     	; 0x36b2 <__addsf3x+0x6a>
    36c2:	0e c0       	rjmp	.+28     	; 0x36e0 <__addsf3x+0x98>
    36c4:	ba 0f       	add	r27, r26
    36c6:	62 1f       	adc	r22, r18
    36c8:	73 1f       	adc	r23, r19
    36ca:	84 1f       	adc	r24, r20
    36cc:	48 f4       	brcc	.+18     	; 0x36e0 <__addsf3x+0x98>
    36ce:	87 95       	ror	r24
    36d0:	77 95       	ror	r23
    36d2:	67 95       	ror	r22
    36d4:	b7 95       	ror	r27
    36d6:	f7 95       	ror	r31
    36d8:	9e 3f       	cpi	r25, 0xFE	; 254
    36da:	08 f0       	brcs	.+2      	; 0x36de <__addsf3x+0x96>
    36dc:	b3 cf       	rjmp	.-154    	; 0x3644 <__addsf3+0x1e>
    36de:	93 95       	inc	r25
    36e0:	88 0f       	add	r24, r24
    36e2:	08 f0       	brcs	.+2      	; 0x36e6 <__addsf3x+0x9e>
    36e4:	99 27       	eor	r25, r25
    36e6:	ee 0f       	add	r30, r30
    36e8:	97 95       	ror	r25
    36ea:	87 95       	ror	r24
    36ec:	08 95       	ret

000036ee <__cmpsf2>:
    36ee:	f4 d0       	rcall	.+488    	; 0x38d8 <__fp_cmp>
    36f0:	08 f4       	brcc	.+2      	; 0x36f4 <__cmpsf2+0x6>
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	08 95       	ret

000036f6 <__divsf3>:
    36f6:	0c d0       	rcall	.+24     	; 0x3710 <__divsf3x>
    36f8:	4f c1       	rjmp	.+670    	; 0x3998 <__fp_round>
    36fa:	47 d1       	rcall	.+654    	; 0x398a <__fp_pscB>
    36fc:	40 f0       	brcs	.+16     	; 0x370e <__divsf3+0x18>
    36fe:	3e d1       	rcall	.+636    	; 0x397c <__fp_pscA>
    3700:	30 f0       	brcs	.+12     	; 0x370e <__divsf3+0x18>
    3702:	21 f4       	brne	.+8      	; 0x370c <__divsf3+0x16>
    3704:	5f 3f       	cpi	r21, 0xFF	; 255
    3706:	19 f0       	breq	.+6      	; 0x370e <__divsf3+0x18>
    3708:	0b c1       	rjmp	.+534    	; 0x3920 <__fp_inf>
    370a:	51 11       	cpse	r21, r1
    370c:	79 c1       	rjmp	.+754    	; 0x3a00 <__fp_szero>
    370e:	0e c1       	rjmp	.+540    	; 0x392c <__fp_nan>

00003710 <__divsf3x>:
    3710:	54 d1       	rcall	.+680    	; 0x39ba <__fp_split3>
    3712:	98 f3       	brcs	.-26     	; 0x36fa <__divsf3+0x4>

00003714 <__divsf3_pse>:
    3714:	99 23       	and	r25, r25
    3716:	c9 f3       	breq	.-14     	; 0x370a <__divsf3+0x14>
    3718:	55 23       	and	r21, r21
    371a:	b1 f3       	breq	.-20     	; 0x3708 <__divsf3+0x12>
    371c:	95 1b       	sub	r25, r21
    371e:	55 0b       	sbc	r21, r21
    3720:	bb 27       	eor	r27, r27
    3722:	aa 27       	eor	r26, r26
    3724:	62 17       	cp	r22, r18
    3726:	73 07       	cpc	r23, r19
    3728:	84 07       	cpc	r24, r20
    372a:	38 f0       	brcs	.+14     	; 0x373a <__divsf3_pse+0x26>
    372c:	9f 5f       	subi	r25, 0xFF	; 255
    372e:	5f 4f       	sbci	r21, 0xFF	; 255
    3730:	22 0f       	add	r18, r18
    3732:	33 1f       	adc	r19, r19
    3734:	44 1f       	adc	r20, r20
    3736:	aa 1f       	adc	r26, r26
    3738:	a9 f3       	breq	.-22     	; 0x3724 <__divsf3_pse+0x10>
    373a:	33 d0       	rcall	.+102    	; 0x37a2 <__divsf3_pse+0x8e>
    373c:	0e 2e       	mov	r0, r30
    373e:	3a f0       	brmi	.+14     	; 0x374e <__divsf3_pse+0x3a>
    3740:	e0 e8       	ldi	r30, 0x80	; 128
    3742:	30 d0       	rcall	.+96     	; 0x37a4 <__divsf3_pse+0x90>
    3744:	91 50       	subi	r25, 0x01	; 1
    3746:	50 40       	sbci	r21, 0x00	; 0
    3748:	e6 95       	lsr	r30
    374a:	00 1c       	adc	r0, r0
    374c:	ca f7       	brpl	.-14     	; 0x3740 <__divsf3_pse+0x2c>
    374e:	29 d0       	rcall	.+82     	; 0x37a2 <__divsf3_pse+0x8e>
    3750:	fe 2f       	mov	r31, r30
    3752:	27 d0       	rcall	.+78     	; 0x37a2 <__divsf3_pse+0x8e>
    3754:	66 0f       	add	r22, r22
    3756:	77 1f       	adc	r23, r23
    3758:	88 1f       	adc	r24, r24
    375a:	bb 1f       	adc	r27, r27
    375c:	26 17       	cp	r18, r22
    375e:	37 07       	cpc	r19, r23
    3760:	48 07       	cpc	r20, r24
    3762:	ab 07       	cpc	r26, r27
    3764:	b0 e8       	ldi	r27, 0x80	; 128
    3766:	09 f0       	breq	.+2      	; 0x376a <__divsf3_pse+0x56>
    3768:	bb 0b       	sbc	r27, r27
    376a:	80 2d       	mov	r24, r0
    376c:	bf 01       	movw	r22, r30
    376e:	ff 27       	eor	r31, r31
    3770:	93 58       	subi	r25, 0x83	; 131
    3772:	5f 4f       	sbci	r21, 0xFF	; 255
    3774:	2a f0       	brmi	.+10     	; 0x3780 <__divsf3_pse+0x6c>
    3776:	9e 3f       	cpi	r25, 0xFE	; 254
    3778:	51 05       	cpc	r21, r1
    377a:	68 f0       	brcs	.+26     	; 0x3796 <__divsf3_pse+0x82>
    377c:	d1 c0       	rjmp	.+418    	; 0x3920 <__fp_inf>
    377e:	40 c1       	rjmp	.+640    	; 0x3a00 <__fp_szero>
    3780:	5f 3f       	cpi	r21, 0xFF	; 255
    3782:	ec f3       	brlt	.-6      	; 0x377e <__divsf3_pse+0x6a>
    3784:	98 3e       	cpi	r25, 0xE8	; 232
    3786:	dc f3       	brlt	.-10     	; 0x377e <__divsf3_pse+0x6a>
    3788:	86 95       	lsr	r24
    378a:	77 95       	ror	r23
    378c:	67 95       	ror	r22
    378e:	b7 95       	ror	r27
    3790:	f7 95       	ror	r31
    3792:	9f 5f       	subi	r25, 0xFF	; 255
    3794:	c9 f7       	brne	.-14     	; 0x3788 <__divsf3_pse+0x74>
    3796:	88 0f       	add	r24, r24
    3798:	91 1d       	adc	r25, r1
    379a:	96 95       	lsr	r25
    379c:	87 95       	ror	r24
    379e:	97 f9       	bld	r25, 7
    37a0:	08 95       	ret
    37a2:	e1 e0       	ldi	r30, 0x01	; 1
    37a4:	66 0f       	add	r22, r22
    37a6:	77 1f       	adc	r23, r23
    37a8:	88 1f       	adc	r24, r24
    37aa:	bb 1f       	adc	r27, r27
    37ac:	62 17       	cp	r22, r18
    37ae:	73 07       	cpc	r23, r19
    37b0:	84 07       	cpc	r24, r20
    37b2:	ba 07       	cpc	r27, r26
    37b4:	20 f0       	brcs	.+8      	; 0x37be <__divsf3_pse+0xaa>
    37b6:	62 1b       	sub	r22, r18
    37b8:	73 0b       	sbc	r23, r19
    37ba:	84 0b       	sbc	r24, r20
    37bc:	ba 0b       	sbc	r27, r26
    37be:	ee 1f       	adc	r30, r30
    37c0:	88 f7       	brcc	.-30     	; 0x37a4 <__divsf3_pse+0x90>
    37c2:	e0 95       	com	r30
    37c4:	08 95       	ret

000037c6 <__fixsfsi>:
    37c6:	04 d0       	rcall	.+8      	; 0x37d0 <__fixunssfsi>
    37c8:	68 94       	set
    37ca:	b1 11       	cpse	r27, r1
    37cc:	19 c1       	rjmp	.+562    	; 0x3a00 <__fp_szero>
    37ce:	08 95       	ret

000037d0 <__fixunssfsi>:
    37d0:	fc d0       	rcall	.+504    	; 0x39ca <__fp_splitA>
    37d2:	88 f0       	brcs	.+34     	; 0x37f6 <__fixunssfsi+0x26>
    37d4:	9f 57       	subi	r25, 0x7F	; 127
    37d6:	90 f0       	brcs	.+36     	; 0x37fc <__fixunssfsi+0x2c>
    37d8:	b9 2f       	mov	r27, r25
    37da:	99 27       	eor	r25, r25
    37dc:	b7 51       	subi	r27, 0x17	; 23
    37de:	a0 f0       	brcs	.+40     	; 0x3808 <__fixunssfsi+0x38>
    37e0:	d1 f0       	breq	.+52     	; 0x3816 <__fixunssfsi+0x46>
    37e2:	66 0f       	add	r22, r22
    37e4:	77 1f       	adc	r23, r23
    37e6:	88 1f       	adc	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	1a f0       	brmi	.+6      	; 0x37f2 <__fixunssfsi+0x22>
    37ec:	ba 95       	dec	r27
    37ee:	c9 f7       	brne	.-14     	; 0x37e2 <__fixunssfsi+0x12>
    37f0:	12 c0       	rjmp	.+36     	; 0x3816 <__fixunssfsi+0x46>
    37f2:	b1 30       	cpi	r27, 0x01	; 1
    37f4:	81 f0       	breq	.+32     	; 0x3816 <__fixunssfsi+0x46>
    37f6:	03 d1       	rcall	.+518    	; 0x39fe <__fp_zero>
    37f8:	b1 e0       	ldi	r27, 0x01	; 1
    37fa:	08 95       	ret
    37fc:	00 c1       	rjmp	.+512    	; 0x39fe <__fp_zero>
    37fe:	67 2f       	mov	r22, r23
    3800:	78 2f       	mov	r23, r24
    3802:	88 27       	eor	r24, r24
    3804:	b8 5f       	subi	r27, 0xF8	; 248
    3806:	39 f0       	breq	.+14     	; 0x3816 <__fixunssfsi+0x46>
    3808:	b9 3f       	cpi	r27, 0xF9	; 249
    380a:	cc f3       	brlt	.-14     	; 0x37fe <__fixunssfsi+0x2e>
    380c:	86 95       	lsr	r24
    380e:	77 95       	ror	r23
    3810:	67 95       	ror	r22
    3812:	b3 95       	inc	r27
    3814:	d9 f7       	brne	.-10     	; 0x380c <__fixunssfsi+0x3c>
    3816:	3e f4       	brtc	.+14     	; 0x3826 <__fixunssfsi+0x56>
    3818:	90 95       	com	r25
    381a:	80 95       	com	r24
    381c:	70 95       	com	r23
    381e:	61 95       	neg	r22
    3820:	7f 4f       	sbci	r23, 0xFF	; 255
    3822:	8f 4f       	sbci	r24, 0xFF	; 255
    3824:	9f 4f       	sbci	r25, 0xFF	; 255
    3826:	08 95       	ret

00003828 <__floatunsisf>:
    3828:	e8 94       	clt
    382a:	09 c0       	rjmp	.+18     	; 0x383e <__floatsisf+0x12>

0000382c <__floatsisf>:
    382c:	97 fb       	bst	r25, 7
    382e:	3e f4       	brtc	.+14     	; 0x383e <__floatsisf+0x12>
    3830:	90 95       	com	r25
    3832:	80 95       	com	r24
    3834:	70 95       	com	r23
    3836:	61 95       	neg	r22
    3838:	7f 4f       	sbci	r23, 0xFF	; 255
    383a:	8f 4f       	sbci	r24, 0xFF	; 255
    383c:	9f 4f       	sbci	r25, 0xFF	; 255
    383e:	99 23       	and	r25, r25
    3840:	a9 f0       	breq	.+42     	; 0x386c <__floatsisf+0x40>
    3842:	f9 2f       	mov	r31, r25
    3844:	96 e9       	ldi	r25, 0x96	; 150
    3846:	bb 27       	eor	r27, r27
    3848:	93 95       	inc	r25
    384a:	f6 95       	lsr	r31
    384c:	87 95       	ror	r24
    384e:	77 95       	ror	r23
    3850:	67 95       	ror	r22
    3852:	b7 95       	ror	r27
    3854:	f1 11       	cpse	r31, r1
    3856:	f8 cf       	rjmp	.-16     	; 0x3848 <__floatsisf+0x1c>
    3858:	fa f4       	brpl	.+62     	; 0x3898 <__floatsisf+0x6c>
    385a:	bb 0f       	add	r27, r27
    385c:	11 f4       	brne	.+4      	; 0x3862 <__floatsisf+0x36>
    385e:	60 ff       	sbrs	r22, 0
    3860:	1b c0       	rjmp	.+54     	; 0x3898 <__floatsisf+0x6c>
    3862:	6f 5f       	subi	r22, 0xFF	; 255
    3864:	7f 4f       	sbci	r23, 0xFF	; 255
    3866:	8f 4f       	sbci	r24, 0xFF	; 255
    3868:	9f 4f       	sbci	r25, 0xFF	; 255
    386a:	16 c0       	rjmp	.+44     	; 0x3898 <__floatsisf+0x6c>
    386c:	88 23       	and	r24, r24
    386e:	11 f0       	breq	.+4      	; 0x3874 <__floatsisf+0x48>
    3870:	96 e9       	ldi	r25, 0x96	; 150
    3872:	11 c0       	rjmp	.+34     	; 0x3896 <__floatsisf+0x6a>
    3874:	77 23       	and	r23, r23
    3876:	21 f0       	breq	.+8      	; 0x3880 <__floatsisf+0x54>
    3878:	9e e8       	ldi	r25, 0x8E	; 142
    387a:	87 2f       	mov	r24, r23
    387c:	76 2f       	mov	r23, r22
    387e:	05 c0       	rjmp	.+10     	; 0x388a <__floatsisf+0x5e>
    3880:	66 23       	and	r22, r22
    3882:	71 f0       	breq	.+28     	; 0x38a0 <__floatsisf+0x74>
    3884:	96 e8       	ldi	r25, 0x86	; 134
    3886:	86 2f       	mov	r24, r22
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	2a f0       	brmi	.+10     	; 0x3898 <__floatsisf+0x6c>
    388e:	9a 95       	dec	r25
    3890:	66 0f       	add	r22, r22
    3892:	77 1f       	adc	r23, r23
    3894:	88 1f       	adc	r24, r24
    3896:	da f7       	brpl	.-10     	; 0x388e <__floatsisf+0x62>
    3898:	88 0f       	add	r24, r24
    389a:	96 95       	lsr	r25
    389c:	87 95       	ror	r24
    389e:	97 f9       	bld	r25, 7
    38a0:	08 95       	ret

000038a2 <__fp_arccos>:
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	1f 93       	push	r17
    38a8:	0f 93       	push	r16
    38aa:	8b 01       	movw	r16, r22
    38ac:	ec 01       	movw	r28, r24
    38ae:	ea ec       	ldi	r30, 0xCA	; 202
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	3f d0       	rcall	.+126    	; 0x3932 <__fp_powser>
    38b4:	71 d0       	rcall	.+226    	; 0x3998 <__fp_round>
    38b6:	98 01       	movw	r18, r16
    38b8:	ae 01       	movw	r20, r28
    38ba:	8b 01       	movw	r16, r22
    38bc:	ec 01       	movw	r28, r24
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	70 e0       	ldi	r23, 0x00	; 0
    38c2:	80 e8       	ldi	r24, 0x80	; 128
    38c4:	9f e3       	ldi	r25, 0x3F	; 63
    38c6:	ae de       	rcall	.-676    	; 0x3624 <__subsf3>
    38c8:	0c d1       	rcall	.+536    	; 0x3ae2 <sqrt>
    38ca:	98 01       	movw	r18, r16
    38cc:	ae 01       	movw	r20, r28
    38ce:	0f 91       	pop	r16
    38d0:	1f 91       	pop	r17
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	aa c0       	rjmp	.+340    	; 0x3a2c <__mulsf3x>

000038d8 <__fp_cmp>:
    38d8:	99 0f       	add	r25, r25
    38da:	00 08       	sbc	r0, r0
    38dc:	55 0f       	add	r21, r21
    38de:	aa 0b       	sbc	r26, r26
    38e0:	e0 e8       	ldi	r30, 0x80	; 128
    38e2:	fe ef       	ldi	r31, 0xFE	; 254
    38e4:	16 16       	cp	r1, r22
    38e6:	17 06       	cpc	r1, r23
    38e8:	e8 07       	cpc	r30, r24
    38ea:	f9 07       	cpc	r31, r25
    38ec:	c0 f0       	brcs	.+48     	; 0x391e <__fp_cmp+0x46>
    38ee:	12 16       	cp	r1, r18
    38f0:	13 06       	cpc	r1, r19
    38f2:	e4 07       	cpc	r30, r20
    38f4:	f5 07       	cpc	r31, r21
    38f6:	98 f0       	brcs	.+38     	; 0x391e <__fp_cmp+0x46>
    38f8:	62 1b       	sub	r22, r18
    38fa:	73 0b       	sbc	r23, r19
    38fc:	84 0b       	sbc	r24, r20
    38fe:	95 0b       	sbc	r25, r21
    3900:	39 f4       	brne	.+14     	; 0x3910 <__fp_cmp+0x38>
    3902:	0a 26       	eor	r0, r26
    3904:	61 f0       	breq	.+24     	; 0x391e <__fp_cmp+0x46>
    3906:	23 2b       	or	r18, r19
    3908:	24 2b       	or	r18, r20
    390a:	25 2b       	or	r18, r21
    390c:	21 f4       	brne	.+8      	; 0x3916 <__fp_cmp+0x3e>
    390e:	08 95       	ret
    3910:	0a 26       	eor	r0, r26
    3912:	09 f4       	brne	.+2      	; 0x3916 <__fp_cmp+0x3e>
    3914:	a1 40       	sbci	r26, 0x01	; 1
    3916:	a6 95       	lsr	r26
    3918:	8f ef       	ldi	r24, 0xFF	; 255
    391a:	81 1d       	adc	r24, r1
    391c:	81 1d       	adc	r24, r1
    391e:	08 95       	ret

00003920 <__fp_inf>:
    3920:	97 f9       	bld	r25, 7
    3922:	9f 67       	ori	r25, 0x7F	; 127
    3924:	80 e8       	ldi	r24, 0x80	; 128
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	60 e0       	ldi	r22, 0x00	; 0
    392a:	08 95       	ret

0000392c <__fp_nan>:
    392c:	9f ef       	ldi	r25, 0xFF	; 255
    392e:	80 ec       	ldi	r24, 0xC0	; 192
    3930:	08 95       	ret

00003932 <__fp_powser>:
    3932:	df 93       	push	r29
    3934:	cf 93       	push	r28
    3936:	1f 93       	push	r17
    3938:	0f 93       	push	r16
    393a:	ff 92       	push	r15
    393c:	ef 92       	push	r14
    393e:	df 92       	push	r13
    3940:	7b 01       	movw	r14, r22
    3942:	8c 01       	movw	r16, r24
    3944:	68 94       	set
    3946:	05 c0       	rjmp	.+10     	; 0x3952 <__fp_powser+0x20>
    3948:	da 2e       	mov	r13, r26
    394a:	ef 01       	movw	r28, r30
    394c:	6f d0       	rcall	.+222    	; 0x3a2c <__mulsf3x>
    394e:	fe 01       	movw	r30, r28
    3950:	e8 94       	clt
    3952:	a5 91       	lpm	r26, Z+
    3954:	25 91       	lpm	r18, Z+
    3956:	35 91       	lpm	r19, Z+
    3958:	45 91       	lpm	r20, Z+
    395a:	55 91       	lpm	r21, Z+
    395c:	ae f3       	brts	.-22     	; 0x3948 <__fp_powser+0x16>
    395e:	ef 01       	movw	r28, r30
    3960:	73 de       	rcall	.-794    	; 0x3648 <__addsf3x>
    3962:	fe 01       	movw	r30, r28
    3964:	97 01       	movw	r18, r14
    3966:	a8 01       	movw	r20, r16
    3968:	da 94       	dec	r13
    396a:	79 f7       	brne	.-34     	; 0x394a <__fp_powser+0x18>
    396c:	df 90       	pop	r13
    396e:	ef 90       	pop	r14
    3970:	ff 90       	pop	r15
    3972:	0f 91       	pop	r16
    3974:	1f 91       	pop	r17
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	08 95       	ret

0000397c <__fp_pscA>:
    397c:	00 24       	eor	r0, r0
    397e:	0a 94       	dec	r0
    3980:	16 16       	cp	r1, r22
    3982:	17 06       	cpc	r1, r23
    3984:	18 06       	cpc	r1, r24
    3986:	09 06       	cpc	r0, r25
    3988:	08 95       	ret

0000398a <__fp_pscB>:
    398a:	00 24       	eor	r0, r0
    398c:	0a 94       	dec	r0
    398e:	12 16       	cp	r1, r18
    3990:	13 06       	cpc	r1, r19
    3992:	14 06       	cpc	r1, r20
    3994:	05 06       	cpc	r0, r21
    3996:	08 95       	ret

00003998 <__fp_round>:
    3998:	09 2e       	mov	r0, r25
    399a:	03 94       	inc	r0
    399c:	00 0c       	add	r0, r0
    399e:	11 f4       	brne	.+4      	; 0x39a4 <__fp_round+0xc>
    39a0:	88 23       	and	r24, r24
    39a2:	52 f0       	brmi	.+20     	; 0x39b8 <__fp_round+0x20>
    39a4:	bb 0f       	add	r27, r27
    39a6:	40 f4       	brcc	.+16     	; 0x39b8 <__fp_round+0x20>
    39a8:	bf 2b       	or	r27, r31
    39aa:	11 f4       	brne	.+4      	; 0x39b0 <__fp_round+0x18>
    39ac:	60 ff       	sbrs	r22, 0
    39ae:	04 c0       	rjmp	.+8      	; 0x39b8 <__fp_round+0x20>
    39b0:	6f 5f       	subi	r22, 0xFF	; 255
    39b2:	7f 4f       	sbci	r23, 0xFF	; 255
    39b4:	8f 4f       	sbci	r24, 0xFF	; 255
    39b6:	9f 4f       	sbci	r25, 0xFF	; 255
    39b8:	08 95       	ret

000039ba <__fp_split3>:
    39ba:	57 fd       	sbrc	r21, 7
    39bc:	90 58       	subi	r25, 0x80	; 128
    39be:	44 0f       	add	r20, r20
    39c0:	55 1f       	adc	r21, r21
    39c2:	59 f0       	breq	.+22     	; 0x39da <__fp_splitA+0x10>
    39c4:	5f 3f       	cpi	r21, 0xFF	; 255
    39c6:	71 f0       	breq	.+28     	; 0x39e4 <__fp_splitA+0x1a>
    39c8:	47 95       	ror	r20

000039ca <__fp_splitA>:
    39ca:	88 0f       	add	r24, r24
    39cc:	97 fb       	bst	r25, 7
    39ce:	99 1f       	adc	r25, r25
    39d0:	61 f0       	breq	.+24     	; 0x39ea <__fp_splitA+0x20>
    39d2:	9f 3f       	cpi	r25, 0xFF	; 255
    39d4:	79 f0       	breq	.+30     	; 0x39f4 <__fp_splitA+0x2a>
    39d6:	87 95       	ror	r24
    39d8:	08 95       	ret
    39da:	12 16       	cp	r1, r18
    39dc:	13 06       	cpc	r1, r19
    39de:	14 06       	cpc	r1, r20
    39e0:	55 1f       	adc	r21, r21
    39e2:	f2 cf       	rjmp	.-28     	; 0x39c8 <__fp_split3+0xe>
    39e4:	46 95       	lsr	r20
    39e6:	f1 df       	rcall	.-30     	; 0x39ca <__fp_splitA>
    39e8:	08 c0       	rjmp	.+16     	; 0x39fa <__fp_splitA+0x30>
    39ea:	16 16       	cp	r1, r22
    39ec:	17 06       	cpc	r1, r23
    39ee:	18 06       	cpc	r1, r24
    39f0:	99 1f       	adc	r25, r25
    39f2:	f1 cf       	rjmp	.-30     	; 0x39d6 <__fp_splitA+0xc>
    39f4:	86 95       	lsr	r24
    39f6:	71 05       	cpc	r23, r1
    39f8:	61 05       	cpc	r22, r1
    39fa:	08 94       	sec
    39fc:	08 95       	ret

000039fe <__fp_zero>:
    39fe:	e8 94       	clt

00003a00 <__fp_szero>:
    3a00:	bb 27       	eor	r27, r27
    3a02:	66 27       	eor	r22, r22
    3a04:	77 27       	eor	r23, r23
    3a06:	cb 01       	movw	r24, r22
    3a08:	97 f9       	bld	r25, 7
    3a0a:	08 95       	ret

00003a0c <__gesf2>:
    3a0c:	65 df       	rcall	.-310    	; 0x38d8 <__fp_cmp>
    3a0e:	08 f4       	brcc	.+2      	; 0x3a12 <__gesf2+0x6>
    3a10:	8f ef       	ldi	r24, 0xFF	; 255
    3a12:	08 95       	ret

00003a14 <__mulsf3>:
    3a14:	0b d0       	rcall	.+22     	; 0x3a2c <__mulsf3x>
    3a16:	c0 cf       	rjmp	.-128    	; 0x3998 <__fp_round>
    3a18:	b1 df       	rcall	.-158    	; 0x397c <__fp_pscA>
    3a1a:	28 f0       	brcs	.+10     	; 0x3a26 <__mulsf3+0x12>
    3a1c:	b6 df       	rcall	.-148    	; 0x398a <__fp_pscB>
    3a1e:	18 f0       	brcs	.+6      	; 0x3a26 <__mulsf3+0x12>
    3a20:	95 23       	and	r25, r21
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <__mulsf3+0x12>
    3a24:	7d cf       	rjmp	.-262    	; 0x3920 <__fp_inf>
    3a26:	82 cf       	rjmp	.-252    	; 0x392c <__fp_nan>
    3a28:	11 24       	eor	r1, r1
    3a2a:	ea cf       	rjmp	.-44     	; 0x3a00 <__fp_szero>

00003a2c <__mulsf3x>:
    3a2c:	c6 df       	rcall	.-116    	; 0x39ba <__fp_split3>
    3a2e:	a0 f3       	brcs	.-24     	; 0x3a18 <__mulsf3+0x4>

00003a30 <__mulsf3_pse>:
    3a30:	95 9f       	mul	r25, r21
    3a32:	d1 f3       	breq	.-12     	; 0x3a28 <__mulsf3+0x14>
    3a34:	95 0f       	add	r25, r21
    3a36:	50 e0       	ldi	r21, 0x00	; 0
    3a38:	55 1f       	adc	r21, r21
    3a3a:	62 9f       	mul	r22, r18
    3a3c:	f0 01       	movw	r30, r0
    3a3e:	72 9f       	mul	r23, r18
    3a40:	bb 27       	eor	r27, r27
    3a42:	f0 0d       	add	r31, r0
    3a44:	b1 1d       	adc	r27, r1
    3a46:	63 9f       	mul	r22, r19
    3a48:	aa 27       	eor	r26, r26
    3a4a:	f0 0d       	add	r31, r0
    3a4c:	b1 1d       	adc	r27, r1
    3a4e:	aa 1f       	adc	r26, r26
    3a50:	64 9f       	mul	r22, r20
    3a52:	66 27       	eor	r22, r22
    3a54:	b0 0d       	add	r27, r0
    3a56:	a1 1d       	adc	r26, r1
    3a58:	66 1f       	adc	r22, r22
    3a5a:	82 9f       	mul	r24, r18
    3a5c:	22 27       	eor	r18, r18
    3a5e:	b0 0d       	add	r27, r0
    3a60:	a1 1d       	adc	r26, r1
    3a62:	62 1f       	adc	r22, r18
    3a64:	73 9f       	mul	r23, r19
    3a66:	b0 0d       	add	r27, r0
    3a68:	a1 1d       	adc	r26, r1
    3a6a:	62 1f       	adc	r22, r18
    3a6c:	83 9f       	mul	r24, r19
    3a6e:	a0 0d       	add	r26, r0
    3a70:	61 1d       	adc	r22, r1
    3a72:	22 1f       	adc	r18, r18
    3a74:	74 9f       	mul	r23, r20
    3a76:	33 27       	eor	r19, r19
    3a78:	a0 0d       	add	r26, r0
    3a7a:	61 1d       	adc	r22, r1
    3a7c:	23 1f       	adc	r18, r19
    3a7e:	84 9f       	mul	r24, r20
    3a80:	60 0d       	add	r22, r0
    3a82:	21 1d       	adc	r18, r1
    3a84:	82 2f       	mov	r24, r18
    3a86:	76 2f       	mov	r23, r22
    3a88:	6a 2f       	mov	r22, r26
    3a8a:	11 24       	eor	r1, r1
    3a8c:	9f 57       	subi	r25, 0x7F	; 127
    3a8e:	50 40       	sbci	r21, 0x00	; 0
    3a90:	8a f0       	brmi	.+34     	; 0x3ab4 <__mulsf3_pse+0x84>
    3a92:	e1 f0       	breq	.+56     	; 0x3acc <__mulsf3_pse+0x9c>
    3a94:	88 23       	and	r24, r24
    3a96:	4a f0       	brmi	.+18     	; 0x3aaa <__mulsf3_pse+0x7a>
    3a98:	ee 0f       	add	r30, r30
    3a9a:	ff 1f       	adc	r31, r31
    3a9c:	bb 1f       	adc	r27, r27
    3a9e:	66 1f       	adc	r22, r22
    3aa0:	77 1f       	adc	r23, r23
    3aa2:	88 1f       	adc	r24, r24
    3aa4:	91 50       	subi	r25, 0x01	; 1
    3aa6:	50 40       	sbci	r21, 0x00	; 0
    3aa8:	a9 f7       	brne	.-22     	; 0x3a94 <__mulsf3_pse+0x64>
    3aaa:	9e 3f       	cpi	r25, 0xFE	; 254
    3aac:	51 05       	cpc	r21, r1
    3aae:	70 f0       	brcs	.+28     	; 0x3acc <__mulsf3_pse+0x9c>
    3ab0:	37 cf       	rjmp	.-402    	; 0x3920 <__fp_inf>
    3ab2:	a6 cf       	rjmp	.-180    	; 0x3a00 <__fp_szero>
    3ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ab6:	ec f3       	brlt	.-6      	; 0x3ab2 <__mulsf3_pse+0x82>
    3ab8:	98 3e       	cpi	r25, 0xE8	; 232
    3aba:	dc f3       	brlt	.-10     	; 0x3ab2 <__mulsf3_pse+0x82>
    3abc:	86 95       	lsr	r24
    3abe:	77 95       	ror	r23
    3ac0:	67 95       	ror	r22
    3ac2:	b7 95       	ror	r27
    3ac4:	f7 95       	ror	r31
    3ac6:	e7 95       	ror	r30
    3ac8:	9f 5f       	subi	r25, 0xFF	; 255
    3aca:	c1 f7       	brne	.-16     	; 0x3abc <__mulsf3_pse+0x8c>
    3acc:	fe 2b       	or	r31, r30
    3ace:	88 0f       	add	r24, r24
    3ad0:	91 1d       	adc	r25, r1
    3ad2:	96 95       	lsr	r25
    3ad4:	87 95       	ror	r24
    3ad6:	97 f9       	bld	r25, 7
    3ad8:	08 95       	ret
    3ada:	11 f4       	brne	.+4      	; 0x3ae0 <__mulsf3_pse+0xb0>
    3adc:	0e f4       	brtc	.+2      	; 0x3ae0 <__mulsf3_pse+0xb0>
    3ade:	26 cf       	rjmp	.-436    	; 0x392c <__fp_nan>
    3ae0:	3e c0       	rjmp	.+124    	; 0x3b5e <__fp_mpack>

00003ae2 <sqrt>:
    3ae2:	73 df       	rcall	.-282    	; 0x39ca <__fp_splitA>
    3ae4:	d0 f3       	brcs	.-12     	; 0x3ada <__mulsf3_pse+0xaa>
    3ae6:	99 23       	and	r25, r25
    3ae8:	d9 f3       	breq	.-10     	; 0x3ae0 <__mulsf3_pse+0xb0>
    3aea:	ce f3       	brts	.-14     	; 0x3ade <__mulsf3_pse+0xae>
    3aec:	9f 57       	subi	r25, 0x7F	; 127
    3aee:	55 0b       	sbc	r21, r21
    3af0:	87 ff       	sbrs	r24, 7
    3af2:	43 d0       	rcall	.+134    	; 0x3b7a <__fp_norm2>
    3af4:	00 24       	eor	r0, r0
    3af6:	a0 e6       	ldi	r26, 0x60	; 96
    3af8:	40 ea       	ldi	r20, 0xA0	; 160
    3afa:	90 01       	movw	r18, r0
    3afc:	80 58       	subi	r24, 0x80	; 128
    3afe:	56 95       	lsr	r21
    3b00:	97 95       	ror	r25
    3b02:	28 f4       	brcc	.+10     	; 0x3b0e <sqrt+0x2c>
    3b04:	80 5c       	subi	r24, 0xC0	; 192
    3b06:	66 0f       	add	r22, r22
    3b08:	77 1f       	adc	r23, r23
    3b0a:	88 1f       	adc	r24, r24
    3b0c:	20 f0       	brcs	.+8      	; 0x3b16 <sqrt+0x34>
    3b0e:	26 17       	cp	r18, r22
    3b10:	37 07       	cpc	r19, r23
    3b12:	48 07       	cpc	r20, r24
    3b14:	30 f4       	brcc	.+12     	; 0x3b22 <sqrt+0x40>
    3b16:	62 1b       	sub	r22, r18
    3b18:	73 0b       	sbc	r23, r19
    3b1a:	84 0b       	sbc	r24, r20
    3b1c:	20 29       	or	r18, r0
    3b1e:	31 29       	or	r19, r1
    3b20:	4a 2b       	or	r20, r26
    3b22:	a6 95       	lsr	r26
    3b24:	17 94       	ror	r1
    3b26:	07 94       	ror	r0
    3b28:	20 25       	eor	r18, r0
    3b2a:	31 25       	eor	r19, r1
    3b2c:	4a 27       	eor	r20, r26
    3b2e:	58 f7       	brcc	.-42     	; 0x3b06 <sqrt+0x24>
    3b30:	66 0f       	add	r22, r22
    3b32:	77 1f       	adc	r23, r23
    3b34:	88 1f       	adc	r24, r24
    3b36:	20 f0       	brcs	.+8      	; 0x3b40 <sqrt+0x5e>
    3b38:	26 17       	cp	r18, r22
    3b3a:	37 07       	cpc	r19, r23
    3b3c:	48 07       	cpc	r20, r24
    3b3e:	30 f4       	brcc	.+12     	; 0x3b4c <sqrt+0x6a>
    3b40:	62 0b       	sbc	r22, r18
    3b42:	73 0b       	sbc	r23, r19
    3b44:	84 0b       	sbc	r24, r20
    3b46:	20 0d       	add	r18, r0
    3b48:	31 1d       	adc	r19, r1
    3b4a:	41 1d       	adc	r20, r1
    3b4c:	a0 95       	com	r26
    3b4e:	81 f7       	brne	.-32     	; 0x3b30 <sqrt+0x4e>
    3b50:	b9 01       	movw	r22, r18
    3b52:	84 2f       	mov	r24, r20
    3b54:	91 58       	subi	r25, 0x81	; 129
    3b56:	88 0f       	add	r24, r24
    3b58:	96 95       	lsr	r25
    3b5a:	87 95       	ror	r24
    3b5c:	08 95       	ret

00003b5e <__fp_mpack>:
    3b5e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b60:	31 f0       	breq	.+12     	; 0x3b6e <__fp_mpack_finite+0xc>

00003b62 <__fp_mpack_finite>:
    3b62:	91 50       	subi	r25, 0x01	; 1
    3b64:	20 f4       	brcc	.+8      	; 0x3b6e <__fp_mpack_finite+0xc>
    3b66:	87 95       	ror	r24
    3b68:	77 95       	ror	r23
    3b6a:	67 95       	ror	r22
    3b6c:	b7 95       	ror	r27
    3b6e:	88 0f       	add	r24, r24
    3b70:	91 1d       	adc	r25, r1
    3b72:	96 95       	lsr	r25
    3b74:	87 95       	ror	r24
    3b76:	97 f9       	bld	r25, 7
    3b78:	08 95       	ret

00003b7a <__fp_norm2>:
    3b7a:	91 50       	subi	r25, 0x01	; 1
    3b7c:	50 40       	sbci	r21, 0x00	; 0
    3b7e:	66 0f       	add	r22, r22
    3b80:	77 1f       	adc	r23, r23
    3b82:	88 1f       	adc	r24, r24
    3b84:	d2 f7       	brpl	.-12     	; 0x3b7a <__fp_norm2>
    3b86:	08 95       	ret

00003b88 <__divmodhi4>:
    3b88:	97 fb       	bst	r25, 7
    3b8a:	07 2e       	mov	r0, r23
    3b8c:	16 f4       	brtc	.+4      	; 0x3b92 <__divmodhi4+0xa>
    3b8e:	00 94       	com	r0
    3b90:	07 d0       	rcall	.+14     	; 0x3ba0 <__divmodhi4_neg1>
    3b92:	77 fd       	sbrc	r23, 7
    3b94:	09 d0       	rcall	.+18     	; 0x3ba8 <__divmodhi4_neg2>
    3b96:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__udivmodhi4>
    3b9a:	07 fc       	sbrc	r0, 7
    3b9c:	05 d0       	rcall	.+10     	; 0x3ba8 <__divmodhi4_neg2>
    3b9e:	3e f4       	brtc	.+14     	; 0x3bae <__divmodhi4_exit>

00003ba0 <__divmodhi4_neg1>:
    3ba0:	90 95       	com	r25
    3ba2:	81 95       	neg	r24
    3ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba6:	08 95       	ret

00003ba8 <__divmodhi4_neg2>:
    3ba8:	70 95       	com	r23
    3baa:	61 95       	neg	r22
    3bac:	7f 4f       	sbci	r23, 0xFF	; 255

00003bae <__divmodhi4_exit>:
    3bae:	08 95       	ret

00003bb0 <__tablejump2__>:
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	ff 1f       	adc	r31, r31

00003bb4 <__tablejump__>:
    3bb4:	05 90       	lpm	r0, Z+
    3bb6:	f4 91       	lpm	r31, Z
    3bb8:	e0 2d       	mov	r30, r0
    3bba:	09 94       	ijmp

00003bbc <__udivmodhi4>:
    3bbc:	aa 1b       	sub	r26, r26
    3bbe:	bb 1b       	sub	r27, r27
    3bc0:	51 e1       	ldi	r21, 0x11	; 17
    3bc2:	07 c0       	rjmp	.+14     	; 0x3bd2 <__udivmodhi4_ep>

00003bc4 <__udivmodhi4_loop>:
    3bc4:	aa 1f       	adc	r26, r26
    3bc6:	bb 1f       	adc	r27, r27
    3bc8:	a6 17       	cp	r26, r22
    3bca:	b7 07       	cpc	r27, r23
    3bcc:	10 f0       	brcs	.+4      	; 0x3bd2 <__udivmodhi4_ep>
    3bce:	a6 1b       	sub	r26, r22
    3bd0:	b7 0b       	sbc	r27, r23

00003bd2 <__udivmodhi4_ep>:
    3bd2:	88 1f       	adc	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	5a 95       	dec	r21
    3bd8:	a9 f7       	brne	.-22     	; 0x3bc4 <__udivmodhi4_loop>
    3bda:	80 95       	com	r24
    3bdc:	90 95       	com	r25
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	08 95       	ret

00003be4 <__itoa_ncheck>:
    3be4:	bb 27       	eor	r27, r27
    3be6:	4a 30       	cpi	r20, 0x0A	; 10
    3be8:	31 f4       	brne	.+12     	; 0x3bf6 <__itoa_ncheck+0x12>
    3bea:	99 23       	and	r25, r25
    3bec:	22 f4       	brpl	.+8      	; 0x3bf6 <__itoa_ncheck+0x12>
    3bee:	bd e2       	ldi	r27, 0x2D	; 45
    3bf0:	90 95       	com	r25
    3bf2:	81 95       	neg	r24
    3bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf6:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__utoa_common>

00003bfa <__utoa_ncheck>:
    3bfa:	bb 27       	eor	r27, r27

00003bfc <__utoa_common>:
    3bfc:	fb 01       	movw	r30, r22
    3bfe:	55 27       	eor	r21, r21
    3c00:	aa 27       	eor	r26, r26
    3c02:	88 0f       	add	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	aa 1f       	adc	r26, r26
    3c08:	a4 17       	cp	r26, r20
    3c0a:	10 f0       	brcs	.+4      	; 0x3c10 <__utoa_common+0x14>
    3c0c:	a4 1b       	sub	r26, r20
    3c0e:	83 95       	inc	r24
    3c10:	50 51       	subi	r21, 0x10	; 16
    3c12:	b9 f7       	brne	.-18     	; 0x3c02 <__utoa_common+0x6>
    3c14:	a0 5d       	subi	r26, 0xD0	; 208
    3c16:	aa 33       	cpi	r26, 0x3A	; 58
    3c18:	08 f0       	brcs	.+2      	; 0x3c1c <__utoa_common+0x20>
    3c1a:	a9 5d       	subi	r26, 0xD9	; 217
    3c1c:	a1 93       	st	Z+, r26
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	79 f7       	brne	.-34     	; 0x3c00 <__utoa_common+0x4>
    3c22:	b1 11       	cpse	r27, r1
    3c24:	b1 93       	st	Z+, r27
    3c26:	11 92       	st	Z+, r1
    3c28:	cb 01       	movw	r24, r22
    3c2a:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <strrev>

00003c2e <strrev>:
    3c2e:	dc 01       	movw	r26, r24
    3c30:	fc 01       	movw	r30, r24
    3c32:	67 2f       	mov	r22, r23
    3c34:	71 91       	ld	r23, Z+
    3c36:	77 23       	and	r23, r23
    3c38:	e1 f7       	brne	.-8      	; 0x3c32 <strrev+0x4>
    3c3a:	32 97       	sbiw	r30, 0x02	; 2
    3c3c:	04 c0       	rjmp	.+8      	; 0x3c46 <strrev+0x18>
    3c3e:	7c 91       	ld	r23, X
    3c40:	6d 93       	st	X+, r22
    3c42:	70 83       	st	Z, r23
    3c44:	62 91       	ld	r22, -Z
    3c46:	ae 17       	cp	r26, r30
    3c48:	bf 07       	cpc	r27, r31
    3c4a:	c8 f3       	brcs	.-14     	; 0x3c3e <strrev+0x10>
    3c4c:	08 95       	ret

00003c4e <_exit>:
    3c4e:	f8 94       	cli

00003c50 <__stop_program>:
    3c50:	ff cf       	rjmp	.-2      	; 0x3c50 <__stop_program>

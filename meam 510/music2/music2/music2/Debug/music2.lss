
music2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000008d0  00000964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800108  00800108  0000096c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015f0  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b1  00000000  00000000  000026da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d8  00000000  00000000  0000308c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000634  00000000  00000000  00003564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f1b  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00005ab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_3>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_10>
  2c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e0 ed       	ldi	r30, 0xD0	; 208
 174:	f8 e0       	ldi	r31, 0x08	; 8
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ac 31       	cpi	r26, 0x1C	; 28
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
 196:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <main>:
volatile float i;
volatile int realDuration;
volatile float dutyCycle;
int main(void)
{
  m_clockdivide(3);//set the system clock frequency as 2MHz
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	80 83       	st	Z, r24
  m_bus_init(); // enable mBUS
 1aa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <m_bus_init>
  m_rf_open(channel,RXADDRESS,PACKET_LENGTH); // configure mRF
 1ae:	43 e0       	ldi	r20, 0x03	; 3
 1b0:	67 e4       	ldi	r22, 0x47	; 71
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <m_rf_open>
  
  clear(TCCR1B,CS12);//set prescaler to /64
 1b8:	e1 e8       	ldi	r30, 0x81	; 129
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	80 83       	st	Z, r24
  set(TCCR1B,CS11);
 1c2:	80 81       	ld	r24, Z
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	80 83       	st	Z, r24
  set(TCCR1B,CS10);
 1c8:	80 81       	ld	r24, Z
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 83       	st	Z, r24
  
  //OCR1A=2000000/(64*frequency);//set the value of OCR1A as 100
  //OCR1B=OCR1A/2

  set(TCCR1B,WGM13);//(mode 15) UP to OCR1A, PWM mode
 1ce:	80 81       	ld	r24, Z
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	80 83       	st	Z, r24
  set(TCCR1B,WGM12);
 1d4:	80 81       	ld	r24, Z
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	80 83       	st	Z, r24
  set(TCCR1A,WGM11);
 1da:	e0 e8       	ldi	r30, 0x80	; 128
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 83       	st	Z, r24
  set(TCCR1A,WGM10);
 1e4:	80 81       	ld	r24, Z
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	80 83       	st	Z, r24
  set(TCCR1A,COM1B1);//set at OCR1B, clear at rollover
 1ea:	80 81       	ld	r24, Z
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	80 83       	st	Z, r24
  set(TCCR1A,COM1B0);
 1f0:	80 81       	ld	r24, Z
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	80 83       	st	Z, r24
  
  set(TIMSK1,OCIE1A);//call an interrupt whenever (TCNT1 matches OCR1A)
 1f6:	ef e6       	ldi	r30, 0x6F	; 111
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	80 83       	st	Z, r24
  sei();//enable global interrupt
 200:	78 94       	sei
  
  set(DDRB,6);
 202:	26 9a       	sbi	0x04, 6	; 4
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x66>

00000206 <__vector_3>:
		
        
    }


ISR(INT2_vect){
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH); // pull the packet
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <m_rf_read>
	
	frequency= buffer[0]+256*buffer[1];
 232:	20 91 08 01 	lds	r18, 0x0108
 236:	80 91 09 01 	lds	r24, 0x0109
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	98 2f       	mov	r25, r24
 23e:	88 27       	eor	r24, r24
 240:	82 0f       	add	r24, r18
 242:	91 1d       	adc	r25, r1
 244:	90 93 0f 01 	sts	0x010F, r25
 248:	80 93 0e 01 	sts	0x010E, r24
	realFrequency=frequency/10;
 24c:	80 91 0e 01 	lds	r24, 0x010E
 250:	90 91 0f 01 	lds	r25, 0x010F
 254:	6a e0       	ldi	r22, 0x0A	; 10
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divmodhi4>
 25c:	70 93 15 01 	sts	0x0115, r23
 260:	60 93 14 01 	sts	0x0114, r22
	OCR1A=2000000/(64*realFrequency);
 264:	20 91 14 01 	lds	r18, 0x0114
 268:	30 91 15 01 	lds	r19, 0x0115
 26c:	00 24       	eor	r0, r0
 26e:	36 95       	lsr	r19
 270:	27 95       	ror	r18
 272:	07 94       	ror	r0
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	07 94       	ror	r0
 27a:	32 2f       	mov	r19, r18
 27c:	20 2d       	mov	r18, r0
 27e:	44 27       	eor	r20, r20
 280:	37 fd       	sbrc	r19, 7
 282:	40 95       	com	r20
 284:	54 2f       	mov	r21, r20
 286:	60 e8       	ldi	r22, 0x80	; 128
 288:	74 e8       	ldi	r23, 0x84	; 132
 28a:	8e e1       	ldi	r24, 0x1E	; 30
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 11 04 	call	0x822	; 0x822 <__divmodsi4>
 292:	e8 e8       	ldi	r30, 0x88	; 136
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	31 83       	std	Z+1, r19	; 0x01
 298:	20 83       	st	Z, r18
// 	realDuration=buffer[2]/100;
// 	dutyCycle=realDuration*realFrequency;
    OCR1B=OCR1A/2;
 29a:	80 81       	ld	r24, Z
 29c:	91 81       	ldd	r25, Z+1	; 0x01
 29e:	96 95       	lsr	r25
 2a0:	87 95       	ror	r24
 2a2:	90 93 8b 00 	sts	0x008B, r25
 2a6:	80 93 8a 00 	sts	0x008A, r24
	m_green(TOGGLE);
 2aa:	6a 9a       	sbi	0x0d, 2	; 13
 2ac:	9e b1       	in	r25, 0x0e	; 14
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	89 27       	eor	r24, r25
 2b2:	8e b9       	out	0x0e, r24	; 14
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 2d6:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 2d8:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 2da:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 2dc:	8c e0       	ldi	r24, 0x0C	; 12
 2de:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 2e2:	e9 e6       	ldi	r30, 0x69	; 105
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 62       	ori	r24, 0x20	; 32
 2ea:	80 83       	st	Z, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 7e       	andi	r24, 0xEF	; 239
 2f0:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 2f2:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 2f4:	78 94       	sei
 2f6:	08 95       	ret

000002f8 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	18 2f       	mov	r17, r24
 300:	d6 2f       	mov	r29, r22
 302:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 304:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 308:	94 ea       	ldi	r25, 0xA4	; 164
 30a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 30e:	ec eb       	ldi	r30, 0xBC	; 188
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	90 81       	ld	r25, Z
 314:	99 23       	and	r25, r25
 316:	ec f7       	brge	.-6      	; 0x312 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 318:	90 e5       	ldi	r25, 0x50	; 80
 31a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 31e:	94 e8       	ldi	r25, 0x84	; 132
 320:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 324:	ec eb       	ldi	r30, 0xBC	; 188
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	90 81       	ld	r25, Z
 32a:	99 23       	and	r25, r25
 32c:	ec f7       	brge	.-6      	; 0x328 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 32e:	90 91 b9 00 	lds	r25, 0x00B9
 332:	98 7f       	andi	r25, 0xF8	; 248
 334:	90 32       	cpi	r25, 0x20	; 32
 336:	29 f4       	brne	.+10     	; 0x342 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 338:	84 e9       	ldi	r24, 0x94	; 148
 33a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	2d c0       	rjmp	.+90     	; 0x39c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 348:	84 e8       	ldi	r24, 0x84	; 132
 34a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 34e:	ec eb       	ldi	r30, 0xBC	; 188
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	90 81       	ld	r25, Z
 354:	99 23       	and	r25, r25
 356:	ec f7       	brge	.-6      	; 0x352 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 358:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
 35c:	84 e8       	ldi	r24, 0x84	; 132
 35e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 362:	ec eb       	ldi	r30, 0xBC	; 188
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	88 23       	and	r24, r24
 36a:	ec f7       	brge	.-6      	; 0x366 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 36c:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 370:	84 e8       	ldi	r24, 0x84	; 132
 372:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 376:	ec eb       	ldi	r30, 0xBC	; 188
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	88 23       	and	r24, r24
 37e:	ec f7       	brge	.-6      	; 0x37a <m_rf_open+0x82>
	
	TWDR = packet_length;
 380:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 384:	84 e8       	ldi	r24, 0x84	; 132
 386:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 38a:	ec eb       	ldi	r30, 0xBC	; 188
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	88 23       	and	r24, r24
 392:	ec f7       	brge	.-6      	; 0x38e <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 394:	84 e9       	ldi	r24, 0x94	; 148
 396:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
 39a:	81 e0       	ldi	r24, 0x01	; 1
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	08 95       	ret

000003a4 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 3aa:	24 ea       	ldi	r18, 0xA4	; 164
 3ac:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
 3b0:	ec eb       	ldi	r30, 0xBC	; 188
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	20 81       	ld	r18, Z
 3b6:	22 23       	and	r18, r18
 3b8:	ec f7       	brge	.-6      	; 0x3b4 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
 3ba:	21 e5       	ldi	r18, 0x51	; 81
 3bc:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 3c0:	24 e8       	ldi	r18, 0x84	; 132
 3c2:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
 3c6:	ec eb       	ldi	r30, 0xBC	; 188
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	20 81       	ld	r18, Z
 3cc:	22 23       	and	r18, r18
 3ce:	ec f7       	brge	.-6      	; 0x3ca <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
 3d0:	20 91 b9 00 	lds	r18, 0x00B9
 3d4:	28 7f       	andi	r18, 0xF8	; 248
 3d6:	28 34       	cpi	r18, 0x48	; 72
 3d8:	29 f4       	brne	.+10     	; 0x3e4 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 3da:	84 e9       	ldi	r24, 0x94	; 148
 3dc:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	44 c0       	rjmp	.+136    	; 0x46c <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 3e4:	24 ec       	ldi	r18, 0xC4	; 196
 3e6:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 3ea:	ec eb       	ldi	r30, 0xBC	; 188
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	20 81       	ld	r18, Z
 3f0:	22 23       	and	r18, r18
 3f2:	ec f7       	brge	.-6      	; 0x3ee <m_rf_read+0x4a>
	bytes = TWDR;
 3f4:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
 3f8:	16 13       	cpse	r17, r22
 3fa:	0a c0       	rjmp	.+20     	; 0x410 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 3fc:	41 2f       	mov	r20, r17
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	41 50       	subi	r20, 0x01	; 1
 402:	51 09       	sbc	r21, r1
 404:	14 16       	cp	r1, r20
 406:	15 06       	cpc	r1, r21
 408:	44 f0       	brlt	.+16     	; 0x41a <m_rf_read+0x76>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	1c c0       	rjmp	.+56     	; 0x448 <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 410:	84 e9       	ldi	r24, 0x94	; 148
 412:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	29 c0       	rjmp	.+82     	; 0x46c <m_rf_read+0xc8>
 41a:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 420:	ec eb       	ldi	r30, 0xBC	; 188
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
 426:	cb eb       	ldi	r28, 0xBB	; 187
 428:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 42a:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 42c:	60 81       	ld	r22, Z
 42e:	66 23       	and	r22, r22
 430:	ec f7       	brge	.-6      	; 0x42c <m_rf_read+0x88>
		buffer[i] = TWDR;
 432:	68 81       	ld	r22, Y
 434:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 436:	2f 5f       	subi	r18, 0xFF	; 255
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	24 17       	cp	r18, r20
 43c:	35 07       	cpc	r19, r21
 43e:	ac f3       	brlt	.-22     	; 0x42a <m_rf_read+0x86>
 440:	21 2f       	mov	r18, r17
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	21 50       	subi	r18, 0x01	; 1
 446:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 448:	44 e8       	ldi	r20, 0x84	; 132
 44a:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 44e:	ec eb       	ldi	r30, 0xBC	; 188
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	40 81       	ld	r20, Z
 454:	44 23       	and	r20, r20
 456:	ec f7       	brge	.-6      	; 0x452 <m_rf_read+0xae>
	buffer[i++] = TWDR;
 458:	40 91 bb 00 	lds	r20, 0x00BB
 45c:	fc 01       	movw	r30, r24
 45e:	e2 0f       	add	r30, r18
 460:	f3 1f       	adc	r31, r19
 462:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 464:	84 e9       	ldi	r24, 0x94	; 148
 466:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	08 95       	ret

00000474 <__vector_10>:
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
 474:	1f 92       	push	r1
			case 12: UEDATX = *buffer++;
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 486:	e1 ee       	ldi	r30, 0xE1	; 225
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	10 82       	st	Z, r1
 48e:	83 ff       	sbrs	r24, 3
 490:	11 c0       	rjmp	.+34     	; 0x4b4 <__vector_10+0x40>
 492:	10 92 e9 00 	sts	0x00E9, r1
 496:	91 e0       	ldi	r25, 0x01	; 1
			case 10: UEDATX = *buffer++;
 498:	90 93 eb 00 	sts	0x00EB, r25
 49c:	10 92 ec 00 	sts	0x00EC, r1
 4a0:	92 e1       	ldi	r25, 0x12	; 18
 4a2:	90 93 ed 00 	sts	0x00ED, r25
 4a6:	98 e0       	ldi	r25, 0x08	; 8
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4a8:	90 93 f0 00 	sts	0x00F0, r25
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
 4ac:	10 92 0d 01 	sts	0x010D, r1
 4b0:	10 92 0b 01 	sts	0x010B, r1
 4b4:	82 ff       	sbrs	r24, 2
 4b6:	13 c0       	rjmp	.+38     	; 0x4de <__vector_10+0x6a>
 4b8:	80 91 0d 01 	lds	r24, 0x010D
			#endif
			case  8: UEDATX = *buffer++;
 4bc:	88 23       	and	r24, r24
 4be:	79 f0       	breq	.+30     	; 0x4de <__vector_10+0x6a>
 4c0:	80 91 0c 01 	lds	r24, 0x010C
 4c4:	88 23       	and	r24, r24
 4c6:	59 f0       	breq	.+22     	; 0x4de <__vector_10+0x6a>
 4c8:	81 50       	subi	r24, 0x01	; 1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ca:	80 93 0c 01 	sts	0x010C, r24
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
 4ce:	81 11       	cpse	r24, r1
 4d0:	06 c0       	rjmp	.+12     	; 0x4de <__vector_10+0x6a>
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	80 93 e9 00 	sts	0x00E9, r24
 4d8:	8a e3       	ldi	r24, 0x3A	; 58
 4da:	80 93 e8 00 	sts	0x00E8, r24
			case  6: UEDATX = *buffer++;
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ec:	1f 90       	pop	r1
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
 4ee:	18 95       	reti

000004f0 <__vector_11>:
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
			case  4: UEDATX = *buffer++;
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 50e:	af 93       	push	r26
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 510:	bf 93       	push	r27
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
 51a:	10 92 e9 00 	sts	0x00E9, r1
 51e:	80 91 e8 00 	lds	r24, 0x00E8
			case  2: UEDATX = *buffer++;
 522:	83 ff       	sbrs	r24, 3
 524:	4e c1       	rjmp	.+668    	; 0x7c2 <__vector_11+0x2d2>
 526:	e1 ef       	ldi	r30, 0xF1	; 241
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	c0 81       	ld	r28, Z
 52c:	40 81       	ld	r20, Z
 52e:	20 81       	ld	r18, Z
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 530:	80 81       	ld	r24, Z
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	38 2b       	or	r19, r24
 536:	80 81       	ld	r24, Z
 538:	50 81       	ld	r21, Z
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	bc 01       	movw	r22, r24
 53e:	75 2b       	or	r23, r21
 540:	b0 81       	ld	r27, Z
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 542:	a0 81       	ld	r26, Z
 544:	82 ef       	ldi	r24, 0xF2	; 242
 546:	80 93 e8 00 	sts	0x00E8, r24
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 54a:	46 30       	cpi	r20, 0x06	; 6
 54c:	09 f0       	breq	.+2      	; 0x550 <__vector_11+0x60>
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 54e:	58 c0       	rjmp	.+176    	; 0x600 <__vector_11+0x110>
 550:	04 c0       	rjmp	.+8      	; 0x55a <__vector_11+0x6a>
 552:	81 e2       	ldi	r24, 0x21	; 33
 554:	80 93 eb 00 	sts	0x00EB, r24
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
 558:	3b c1       	rjmp	.+630    	; 0x7d0 <__vector_11+0x2e0>
 55a:	c6 e0       	ldi	r28, 0x06	; 6
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 55c:	8c ea       	ldi	r24, 0xAC	; 172
 55e:	90 e0       	ldi	r25, 0x00	; 0
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 560:	fc 01       	movw	r30, r24
 562:	45 91       	lpm	r20, Z+
 564:	54 91       	lpm	r21, Z
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 566:	24 17       	cp	r18, r20
 568:	35 07       	cpc	r19, r21
 56a:	11 f0       	breq	.+4      	; 0x570 <__vector_11+0x80>
 56c:	07 96       	adiw	r24, 0x07	; 7
 56e:	23 c0       	rjmp	.+70     	; 0x5b6 <__vector_11+0xc6>
 570:	fc 01       	movw	r30, r24
 572:	32 96       	adiw	r30, 0x02	; 2
 574:	45 91       	lpm	r20, Z+
 576:	54 91       	lpm	r21, Z
 578:	64 17       	cp	r22, r20
 57a:	75 07       	cpc	r23, r21
 57c:	11 f0       	breq	.+4      	; 0x582 <__vector_11+0x92>
 57e:	07 96       	adiw	r24, 0x07	; 7
 580:	1a c0       	rjmp	.+52     	; 0x5b6 <__vector_11+0xc6>
 582:	fc 01       	movw	r30, r24
 584:	34 96       	adiw	r30, 0x04	; 4
 586:	25 91       	lpm	r18, Z+
 588:	34 91       	lpm	r19, Z
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
 58a:	fc 01       	movw	r30, r24
 58c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 58e:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 590:	8b 2f       	mov	r24, r27
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 596:	8f 3f       	cpi	r24, 0xFF	; 255
 598:	91 05       	cpc	r25, r1
 59a:	19 f0       	breq	.+6      	; 0x5a2 <__vector_11+0xb2>
 59c:	10 f0       	brcs	.+4      	; 0x5a2 <__vector_11+0xb2>
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	85 17       	cp	r24, r21
 5a4:	08 f4       	brcc	.+2      	; 0x5a8 <__vector_11+0xb8>
 5a6:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 5a8:	a8 ee       	ldi	r26, 0xE8	; 232
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 5ac:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5ae:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 5b0:	c1 ef       	ldi	r28, 0xF1	; 241
 5b2:	d0 e0       	ldi	r29, 0x00	; 0
 5b4:	03 c0       	rjmp	.+6      	; 0x5bc <__vector_11+0xcc>
 5b6:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 5b8:	99 f6       	brne	.-90     	; 0x560 <__vector_11+0x70>
 5ba:	cb cf       	rjmp	.-106    	; 0x552 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 5bc:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 5be:	98 2f       	mov	r25, r24
 5c0:	95 70       	andi	r25, 0x05	; 5
 5c2:	e1 f3       	breq	.-8      	; 0x5bc <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
 5c4:	82 fd       	sbrc	r24, 2
 5c6:	04 c1       	rjmp	.+520    	; 0x7d0 <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 5c8:	45 2f       	mov	r20, r21
 5ca:	51 31       	cpi	r21, 0x11	; 17
 5cc:	08 f0       	brcs	.+2      	; 0x5d0 <__vector_11+0xe0>
 5ce:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
 5d0:	44 23       	and	r20, r20
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <__vector_11+0xe6>
 5d4:	fa c0       	rjmp	.+500    	; 0x7ca <__vector_11+0x2da>
 5d6:	f9 01       	movw	r30, r18
 5d8:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
 5da:	94 91       	lpm	r25, Z
 5dc:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 5de:	81 50       	subi	r24, 0x01	; 1
 5e0:	31 96       	adiw	r30, 0x01	; 1
 5e2:	81 11       	cpse	r24, r1
 5e4:	fa cf       	rjmp	.-12     	; 0x5da <__vector_11+0xea>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	84 0f       	add	r24, r20
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	28 0f       	add	r18, r24
 5f0:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 5f2:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5f4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5f6:	51 11       	cpse	r21, r1
 5f8:	e1 cf       	rjmp	.-62     	; 0x5bc <__vector_11+0xcc>
 5fa:	40 31       	cpi	r20, 0x10	; 16
 5fc:	f9 f2       	breq	.-66     	; 0x5bc <__vector_11+0xcc>
 5fe:	e8 c0       	rjmp	.+464    	; 0x7d0 <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 600:	45 30       	cpi	r20, 0x05	; 5
 602:	61 f4       	brne	.+24     	; 0x61c <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 604:	8e ef       	ldi	r24, 0xFE	; 254
 606:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 60a:	e8 ee       	ldi	r30, 0xE8	; 232
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	80 ff       	sbrs	r24, 0
 612:	fd cf       	rjmp	.-6      	; 0x60e <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 614:	20 68       	ori	r18, 0x80	; 128
 616:	20 93 e3 00 	sts	0x00E3, r18
			return;
 61a:	da c0       	rjmp	.+436    	; 0x7d0 <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 61c:	49 30       	cpi	r20, 0x09	; 9
 61e:	09 f0       	breq	.+2      	; 0x622 <__vector_11+0x132>
 620:	36 c0       	rjmp	.+108    	; 0x68e <__vector_11+0x19e>
 622:	c1 11       	cpse	r28, r1
 624:	5f c0       	rjmp	.+190    	; 0x6e4 <__vector_11+0x1f4>
			usb_configuration = wValue;
 626:	20 93 0d 01 	sts	0x010D, r18
			cdc_line_rtsdtr = 0;
 62a:	10 92 0b 01 	sts	0x010B, r1
			transmit_flush_timer = 0;
 62e:	10 92 0c 01 	sts	0x010C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 632:	8e ef       	ldi	r24, 0xFE	; 254
 634:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 638:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 63a:	85 e5       	ldi	r24, 0x55	; 85
 63c:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 63e:	c9 ee       	ldi	r28, 0xE9	; 233
 640:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 642:	ab ee       	ldi	r26, 0xEB	; 235
 644:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 646:	6c ee       	ldi	r22, 0xEC	; 236
 648:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 64a:	4d ee       	ldi	r20, 0xED	; 237
 64c:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 64e:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
 650:	9c 01       	movw	r18, r24
 652:	2f 5f       	subi	r18, 0xFF	; 255
 654:	3f 4f       	sbci	r19, 0xFF	; 255
 656:	fc 01       	movw	r30, r24
 658:	04 91       	lpm	r16, Z
				UECONX = en;
 65a:	0c 93       	st	X, r16
				if (en) {
 65c:	00 23       	and	r16, r16
 65e:	61 f0       	breq	.+24     	; 0x678 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
 660:	f9 01       	movw	r30, r18
 662:	24 91       	lpm	r18, Z
 664:	fb 01       	movw	r30, r22
 666:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
 668:	9c 01       	movw	r18, r24
 66a:	2d 5f       	subi	r18, 0xFD	; 253
 66c:	3f 4f       	sbci	r19, 0xFF	; 255
 66e:	fc 01       	movw	r30, r24
 670:	32 96       	adiw	r30, 0x02	; 2
 672:	84 91       	lpm	r24, Z
 674:	fa 01       	movw	r30, r20
 676:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 678:	1f 5f       	subi	r17, 0xFF	; 255
 67a:	15 30       	cpi	r17, 0x05	; 5
 67c:	11 f0       	breq	.+4      	; 0x682 <__vector_11+0x192>
 67e:	c9 01       	movw	r24, r18
 680:	e6 cf       	rjmp	.-52     	; 0x64e <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 682:	ea ee       	ldi	r30, 0xEA	; 234
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	8e e1       	ldi	r24, 0x1E	; 30
 688:	80 83       	st	Z, r24
        		UERST = 0;
 68a:	10 82       	st	Z, r1
			return;
 68c:	a1 c0       	rjmp	.+322    	; 0x7d0 <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 68e:	48 30       	cpi	r20, 0x08	; 8
 690:	81 f4       	brne	.+32     	; 0x6b2 <__vector_11+0x1c2>
 692:	c0 38       	cpi	r28, 0x80	; 128
 694:	09 f0       	breq	.+2      	; 0x698 <__vector_11+0x1a8>
 696:	42 c0       	rjmp	.+132    	; 0x71c <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 698:	e8 ee       	ldi	r30, 0xE8	; 232
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 81       	ld	r24, Z
 69e:	80 ff       	sbrs	r24, 0
 6a0:	fd cf       	rjmp	.-6      	; 0x69c <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 6a2:	80 91 0d 01 	lds	r24, 0x010D
 6a6:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6aa:	8e ef       	ldi	r24, 0xFE	; 254
 6ac:	80 93 e8 00 	sts	0x00E8, r24
 6b0:	8f c0       	rjmp	.+286    	; 0x7d0 <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 6b2:	41 32       	cpi	r20, 0x21	; 33
 6b4:	b9 f4       	brne	.+46     	; 0x6e4 <__vector_11+0x1f4>
 6b6:	c1 3a       	cpi	r28, 0xA1	; 161
 6b8:	09 f0       	breq	.+2      	; 0x6bc <__vector_11+0x1cc>
 6ba:	40 c0       	rjmp	.+128    	; 0x73c <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6bc:	e8 ee       	ldi	r30, 0xE8	; 232
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	80 ff       	sbrs	r24, 0
 6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <__vector_11+0x1d0>
 6c6:	e0 e0       	ldi	r30, 0x00	; 0
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	87 e0       	ldi	r24, 0x07	; 7
 6cc:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 6ce:	a1 ef       	ldi	r26, 0xF1	; 241
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	21 91       	ld	r18, Z+
 6d4:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 6d6:	e8 17       	cp	r30, r24
 6d8:	f9 07       	cpc	r31, r25
 6da:	d9 f7       	brne	.-10     	; 0x6d2 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6dc:	8e ef       	ldi	r24, 0xFE	; 254
 6de:	80 93 e8 00 	sts	0x00E8, r24
 6e2:	76 c0       	rjmp	.+236    	; 0x7d0 <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 6e4:	40 32       	cpi	r20, 0x20	; 32
 6e6:	d1 f4       	brne	.+52     	; 0x71c <__vector_11+0x22c>
 6e8:	c1 32       	cpi	r28, 0x21	; 33
 6ea:	09 f0       	breq	.+2      	; 0x6ee <__vector_11+0x1fe>
 6ec:	43 c0       	rjmp	.+134    	; 0x774 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 6ee:	e8 ee       	ldi	r30, 0xE8	; 232
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	82 ff       	sbrs	r24, 2
 6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <__vector_11+0x202>
 6f8:	e0 e0       	ldi	r30, 0x00	; 0
 6fa:	f1 e0       	ldi	r31, 0x01	; 1
 6fc:	87 e0       	ldi	r24, 0x07	; 7
 6fe:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 700:	a1 ef       	ldi	r26, 0xF1	; 241
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	2c 91       	ld	r18, X
 706:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 708:	e8 17       	cp	r30, r24
 70a:	f9 07       	cpc	r31, r25
 70c:	d9 f7       	brne	.-10     	; 0x704 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 70e:	e8 ee       	ldi	r30, 0xE8	; 232
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	8b ef       	ldi	r24, 0xFB	; 251
 714:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 716:	8e ef       	ldi	r24, 0xFE	; 254
 718:	80 83       	st	Z, r24
 71a:	5a c0       	rjmp	.+180    	; 0x7d0 <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 71c:	42 32       	cpi	r20, 0x22	; 34
 71e:	71 f4       	brne	.+28     	; 0x73c <__vector_11+0x24c>
 720:	c1 32       	cpi	r28, 0x21	; 33
 722:	09 f0       	breq	.+2      	; 0x726 <__vector_11+0x236>
 724:	4e c0       	rjmp	.+156    	; 0x7c2 <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
 726:	20 93 0b 01 	sts	0x010B, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 72a:	e8 ee       	ldi	r30, 0xE8	; 232
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	80 ff       	sbrs	r24, 0
 732:	fd cf       	rjmp	.-6      	; 0x72e <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 734:	8e ef       	ldi	r24, 0xFE	; 254
 736:	80 93 e8 00 	sts	0x00E8, r24
 73a:	4a c0       	rjmp	.+148    	; 0x7d0 <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 73c:	41 11       	cpse	r20, r1
 73e:	1a c0       	rjmp	.+52     	; 0x774 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 740:	e8 ee       	ldi	r30, 0xE8	; 232
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	80 ff       	sbrs	r24, 0
 748:	fd cf       	rjmp	.-6      	; 0x744 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 74a:	c2 38       	cpi	r28, 0x82	; 130
 74c:	51 f4       	brne	.+20     	; 0x762 <__vector_11+0x272>
				UENUM = wIndex;
 74e:	e9 ee       	ldi	r30, 0xE9	; 233
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 754:	80 91 eb 00 	lds	r24, 0x00EB
 758:	85 fb       	bst	r24, 5
 75a:	88 27       	eor	r24, r24
 75c:	80 f9       	bld	r24, 0
				UENUM = 0;
 75e:	10 82       	st	Z, r1
 760:	01 c0       	rjmp	.+2      	; 0x764 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 762:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 764:	e1 ef       	ldi	r30, 0xF1	; 241
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 83       	st	Z, r24
			UEDATX = 0;
 76a:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 76c:	8e ef       	ldi	r24, 0xFE	; 254
 76e:	80 93 e8 00 	sts	0x00E8, r24
 772:	2e c0       	rjmp	.+92     	; 0x7d0 <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 774:	84 2f       	mov	r24, r20
 776:	8d 7f       	andi	r24, 0xFD	; 253
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	19 f5       	brne	.+70     	; 0x7c2 <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
 77c:	c2 30       	cpi	r28, 0x02	; 2
 77e:	09 f5       	brne	.+66     	; 0x7c2 <__vector_11+0x2d2>
 780:	23 2b       	or	r18, r19
 782:	f9 f4       	brne	.+62     	; 0x7c2 <__vector_11+0x2d2>
			i = wIndex & 0x7F;
 784:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	86 0f       	add	r24, r22
 78a:	84 30       	cpi	r24, 0x04	; 4
 78c:	d0 f4       	brcc	.+52     	; 0x7c2 <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 78e:	8e ef       	ldi	r24, 0xFE	; 254
 790:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 794:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
 798:	43 30       	cpi	r20, 0x03	; 3
 79a:	21 f4       	brne	.+8      	; 0x7a4 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 79c:	81 e2       	ldi	r24, 0x21	; 33
 79e:	80 93 eb 00 	sts	0x00EB, r24
 7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 7a4:	89 e1       	ldi	r24, 0x19	; 25
 7a6:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <__vector_11+0x2c4>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	6a 95       	dec	r22
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <__vector_11+0x2c0>
 7b8:	ea ee       	ldi	r30, 0xEA	; 234
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 83       	st	Z, r24
					UERST = 0;
 7be:	10 82       	st	Z, r1
 7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 7c2:	81 e2       	ldi	r24, 0x21	; 33
 7c4:	80 93 eb 00 	sts	0x00EB, r24
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7ca:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 7cc:	51 11       	cpse	r21, r1
 7ce:	f6 ce       	rjmp	.-532    	; 0x5bc <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 7d0:	ff 91       	pop	r31
 7d2:	ef 91       	pop	r30
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	7f 91       	pop	r23
 7e2:	6f 91       	pop	r22
 7e4:	5f 91       	pop	r21
 7e6:	4f 91       	pop	r20
 7e8:	3f 91       	pop	r19
 7ea:	2f 91       	pop	r18
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	0f 90       	pop	r0
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	0f 90       	pop	r0
 7f6:	1f 90       	pop	r1
 7f8:	18 95       	reti

000007fa <__divmodhi4>:
 7fa:	97 fb       	bst	r25, 7
 7fc:	07 2e       	mov	r0, r23
 7fe:	16 f4       	brtc	.+4      	; 0x804 <__divmodhi4+0xa>
 800:	00 94       	com	r0
 802:	07 d0       	rcall	.+14     	; 0x812 <__divmodhi4_neg1>
 804:	77 fd       	sbrc	r23, 7
 806:	09 d0       	rcall	.+18     	; 0x81a <__divmodhi4_neg2>
 808:	0e 94 30 04 	call	0x860	; 0x860 <__udivmodhi4>
 80c:	07 fc       	sbrc	r0, 7
 80e:	05 d0       	rcall	.+10     	; 0x81a <__divmodhi4_neg2>
 810:	3e f4       	brtc	.+14     	; 0x820 <__divmodhi4_exit>

00000812 <__divmodhi4_neg1>:
 812:	90 95       	com	r25
 814:	81 95       	neg	r24
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	08 95       	ret

0000081a <__divmodhi4_neg2>:
 81a:	70 95       	com	r23
 81c:	61 95       	neg	r22
 81e:	7f 4f       	sbci	r23, 0xFF	; 255

00000820 <__divmodhi4_exit>:
 820:	08 95       	ret

00000822 <__divmodsi4>:
 822:	05 2e       	mov	r0, r21
 824:	97 fb       	bst	r25, 7
 826:	1e f4       	brtc	.+6      	; 0x82e <__divmodsi4+0xc>
 828:	00 94       	com	r0
 82a:	0e 94 28 04 	call	0x850	; 0x850 <__negsi2>
 82e:	57 fd       	sbrc	r21, 7
 830:	07 d0       	rcall	.+14     	; 0x840 <__divmodsi4_neg2>
 832:	0e 94 44 04 	call	0x888	; 0x888 <__udivmodsi4>
 836:	07 fc       	sbrc	r0, 7
 838:	03 d0       	rcall	.+6      	; 0x840 <__divmodsi4_neg2>
 83a:	4e f4       	brtc	.+18     	; 0x84e <__divmodsi4_exit>
 83c:	0c 94 28 04 	jmp	0x850	; 0x850 <__negsi2>

00000840 <__divmodsi4_neg2>:
 840:	50 95       	com	r21
 842:	40 95       	com	r20
 844:	30 95       	com	r19
 846:	21 95       	neg	r18
 848:	3f 4f       	sbci	r19, 0xFF	; 255
 84a:	4f 4f       	sbci	r20, 0xFF	; 255
 84c:	5f 4f       	sbci	r21, 0xFF	; 255

0000084e <__divmodsi4_exit>:
 84e:	08 95       	ret

00000850 <__negsi2>:
 850:	90 95       	com	r25
 852:	80 95       	com	r24
 854:	70 95       	com	r23
 856:	61 95       	neg	r22
 858:	7f 4f       	sbci	r23, 0xFF	; 255
 85a:	8f 4f       	sbci	r24, 0xFF	; 255
 85c:	9f 4f       	sbci	r25, 0xFF	; 255
 85e:	08 95       	ret

00000860 <__udivmodhi4>:
 860:	aa 1b       	sub	r26, r26
 862:	bb 1b       	sub	r27, r27
 864:	51 e1       	ldi	r21, 0x11	; 17
 866:	07 c0       	rjmp	.+14     	; 0x876 <__udivmodhi4_ep>

00000868 <__udivmodhi4_loop>:
 868:	aa 1f       	adc	r26, r26
 86a:	bb 1f       	adc	r27, r27
 86c:	a6 17       	cp	r26, r22
 86e:	b7 07       	cpc	r27, r23
 870:	10 f0       	brcs	.+4      	; 0x876 <__udivmodhi4_ep>
 872:	a6 1b       	sub	r26, r22
 874:	b7 0b       	sbc	r27, r23

00000876 <__udivmodhi4_ep>:
 876:	88 1f       	adc	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	5a 95       	dec	r21
 87c:	a9 f7       	brne	.-22     	; 0x868 <__udivmodhi4_loop>
 87e:	80 95       	com	r24
 880:	90 95       	com	r25
 882:	bc 01       	movw	r22, r24
 884:	cd 01       	movw	r24, r26
 886:	08 95       	ret

00000888 <__udivmodsi4>:
 888:	a1 e2       	ldi	r26, 0x21	; 33
 88a:	1a 2e       	mov	r1, r26
 88c:	aa 1b       	sub	r26, r26
 88e:	bb 1b       	sub	r27, r27
 890:	fd 01       	movw	r30, r26
 892:	0d c0       	rjmp	.+26     	; 0x8ae <__udivmodsi4_ep>

00000894 <__udivmodsi4_loop>:
 894:	aa 1f       	adc	r26, r26
 896:	bb 1f       	adc	r27, r27
 898:	ee 1f       	adc	r30, r30
 89a:	ff 1f       	adc	r31, r31
 89c:	a2 17       	cp	r26, r18
 89e:	b3 07       	cpc	r27, r19
 8a0:	e4 07       	cpc	r30, r20
 8a2:	f5 07       	cpc	r31, r21
 8a4:	20 f0       	brcs	.+8      	; 0x8ae <__udivmodsi4_ep>
 8a6:	a2 1b       	sub	r26, r18
 8a8:	b3 0b       	sbc	r27, r19
 8aa:	e4 0b       	sbc	r30, r20
 8ac:	f5 0b       	sbc	r31, r21

000008ae <__udivmodsi4_ep>:
 8ae:	66 1f       	adc	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	1a 94       	dec	r1
 8b8:	69 f7       	brne	.-38     	; 0x894 <__udivmodsi4_loop>
 8ba:	60 95       	com	r22
 8bc:	70 95       	com	r23
 8be:	80 95       	com	r24
 8c0:	90 95       	com	r25
 8c2:	9b 01       	movw	r18, r22
 8c4:	ac 01       	movw	r20, r24
 8c6:	bd 01       	movw	r22, r26
 8c8:	cf 01       	movw	r24, r30
 8ca:	08 95       	ret

000008cc <_exit>:
 8cc:	f8 94       	cli

000008ce <__stop_program>:
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>


music6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001172  00001206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800108  00800108  0000120e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  0000123e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016c5  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00002aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a0f  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000554  00000000  00000000  00003acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000658  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000202f  00000000  00000000  00004678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  000066a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_3>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_10>
      2c:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_11>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_17>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_21>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      ac:	05 a8       	ldd	r0, Z+53	; 0x35
      ae:	4c cd       	rjmp	.-1384   	; 0xfffffb48 <__eeprom_end+0xff7efb48>
      b0:	b2 d4       	rcall	.+2404   	; 0xa16 <__vector_11+0x1e4>
      b2:	4e b9       	out	0x0e, r20	; 14
      b4:	38 36       	cpi	r19, 0x68	; 104
      b6:	a9 02       	muls	r26, r25
      b8:	0c 50       	subi	r16, 0x0C	; 12
      ba:	b9 91       	ld	r27, Y+
      bc:	86 88       	ldd	r8, Z+22	; 0x16
      be:	08 3c       	cpi	r16, 0xC8	; 200
      c0:	a6 aa       	std	Z+54, r10	; 0x36
      c2:	aa 2a       	or	r10, r26
      c4:	be 00       	.word	0x00be	; ????
      c6:	00 00       	nop
      c8:	80 3f       	cpi	r24, 0xF0	; 240

000000ca <__trampolines_end>:
      ca:	0d 0a       	sbc	r0, r29
	...

000000cd <descriptor_list>:
      cd:	00 01 00 00 64 01 12 00 02 00 00 21 01 43 00 03     ....d......!.C..
      dd:	00 00 1d 01 04 01 03 09 04 09 01 12 02 03 09 04     ................
      ed:	01 01 06 03 03 09 04 f7 00 08                       ..........

000000f7 <string3>:
      f7:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000101 <string2>:
     101:	06 03 4d 00 32 00 00 00                             ..M.2...

00000109 <string1>:
     109:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     119:	65 00 00 00                                         e...

0000011d <string0>:
     11d:	04 03 09 04                                         ....

00000121 <config1_descriptor>:
     121:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     131:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     141:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     151:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     161:	40 00 00                                            @..

00000164 <device_descriptor>:
     164:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     174:	03 01                                               ..

00000176 <endpoint_config_table>:
     176:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000180 <__ctors_end>:
     180:	11 24       	eor	r1, r1
     182:	1f be       	out	0x3f, r1	; 63
     184:	cf ef       	ldi	r28, 0xFF	; 255
     186:	da e0       	ldi	r29, 0x0A	; 10
     188:	de bf       	out	0x3e, r29	; 62
     18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	e2 e7       	ldi	r30, 0x72	; 114
     194:	f1 e1       	ldi	r31, 0x11	; 17
     196:	02 c0       	rjmp	.+4      	; 0x19c <__do_copy_data+0x10>
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	a8 30       	cpi	r26, 0x08	; 8
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <__do_copy_data+0xc>

000001a2 <__do_clear_bss>:
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	a8 e0       	ldi	r26, 0x08	; 8
     1a6:	b1 e0       	ldi	r27, 0x01	; 1
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	af 31       	cpi	r26, 0x1F	; 31
     1ae:	b2 07       	cpc	r27, r18
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
volatile int flag;


int main(void)
{
	m_clockdivide(3);//set the system clock frequency as 500KHz
     1be:	e1 e6       	ldi	r30, 0x61	; 97
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 e8       	ldi	r24, 0x80	; 128
     1c4:	80 83       	st	Z, r24
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	80 83       	st	Z, r24
	m_usb_init();
     1ca:	0e 94 67 03 	call	0x6ce	; 0x6ce <m_usb_init>
	
	m_bus_init(); // enable mBUS
     1ce:	0e 94 98 02 	call	0x530	; 0x530 <m_bus_init>
	m_rf_open(channel,RXADDRESS,PACKET_LENGTH); // configure mRF
     1d2:	43 e0       	ldi	r20, 0x03	; 3
     1d4:	67 e4       	ldi	r22, 0x47	; 71
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 a9 02 	call	0x552	; 0x552 <m_rf_open>
	
	clear(TCCR1B,CS12);//set prescaler to /64
     1dc:	e1 e8       	ldi	r30, 0x81	; 129
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	8b 7f       	andi	r24, 0xFB	; 251
     1e4:	80 83       	st	Z, r24
	set(TCCR1B,CS11);
     1e6:	80 81       	ld	r24, Z
     1e8:	82 60       	ori	r24, 0x02	; 2
     1ea:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     1ec:	80 81       	ld	r24, Z
     1ee:	81 60       	ori	r24, 0x01	; 1
     1f0:	80 83       	st	Z, r24
	
	//OCR1A=2000000/(64*frequency);//set the value of OCR1A as 100
	//OCR1B=OCR1A/2

	set(TCCR1B,WGM13);//(mode 15) UP to OCR1A, PWM mode
     1f2:	80 81       	ld	r24, Z
     1f4:	80 61       	ori	r24, 0x10	; 16
     1f6:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
     1fc:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
     1fe:	e0 e8       	ldi	r30, 0x80	; 128
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	82 60       	ori	r24, 0x02	; 2
     206:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
     208:	80 81       	ld	r24, Z
     20a:	81 60       	ori	r24, 0x01	; 1
     20c:	80 83       	st	Z, r24
	set(TCCR1A,COM1B1);//set at OCR1B, clear at rollover
     20e:	80 81       	ld	r24, Z
     210:	80 62       	ori	r24, 0x20	; 32
     212:	80 83       	st	Z, r24
	set(TCCR1A,COM1B0);
     214:	80 81       	ld	r24, Z
     216:	80 61       	ori	r24, 0x10	; 16
     218:	80 83       	st	Z, r24
	
	set(TIMSK1,OCIE1A);//call an interrupt whenever (TCNT1 matches OCR1A)
     21a:	ef e6       	ldi	r30, 0x6F	; 111
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	82 60       	ori	r24, 0x02	; 2
     222:	80 83       	st	Z, r24
	sei();//enable global interrupt
     224:	78 94       	sei
	
	set(TCCR0B,WGM02); // MODE: up to OCR0A
     226:	85 b5       	in	r24, 0x25	; 37
     228:	88 60       	ori	r24, 0x08	; 8
     22a:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A,WGM01); // ^
     22c:	84 b5       	in	r24, 0x24	; 36
     22e:	82 60       	ori	r24, 0x02	; 2
     230:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A,WGM00); // ^
     232:	84 b5       	in	r24, 0x24	; 36
     234:	81 60       	ori	r24, 0x01	; 1
     236:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A,COM0B1); // clear at OCR0B, set at OCR0A
     238:	84 b5       	in	r24, 0x24	; 36
     23a:	80 62       	ori	r24, 0x20	; 32
     23c:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A,COM0B0); // ^
     23e:	84 b5       	in	r24, 0x24	; 36
     240:	80 61       	ori	r24, 0x10	; 16
     242:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B,CS02); // set prescaler to /1024
     244:	85 b5       	in	r24, 0x25	; 37
     246:	84 60       	ori	r24, 0x04	; 4
     248:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01); // ^
     24a:	85 b5       	in	r24, 0x25	; 37
     24c:	8d 7f       	andi	r24, 0xFD	; 253
     24e:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00); // ^
     250:	85 b5       	in	r24, 0x25	; 37
     252:	81 60       	ori	r24, 0x01	; 1
     254:	85 bd       	out	0x25, r24	; 37
	
	set(TIMSK0,OCIE0A);
     256:	ee e6       	ldi	r30, 0x6E	; 110
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	82 60       	ori	r24, 0x02	; 2
     25e:	80 83       	st	Z, r24
	
	OCR0A=10;
     260:	8a e0       	ldi	r24, 0x0A	; 10
     262:	87 bd       	out	0x27, r24	; 39
	
	set(DDRB,6);
     264:	26 9a       	sbi	0x04, 6	; 4
		
		if(flag==1){
			
			frequency= buffer[0]+256*buffer[1];
			realFrequency=frequency/10;
			OCR1A=2000000/(64*realFrequency);
     266:	0f 2e       	mov	r0, r31
     268:	f0 e8       	ldi	r31, 0x80	; 128
     26a:	8f 2e       	mov	r8, r31
     26c:	f4 e8       	ldi	r31, 0x84	; 132
     26e:	9f 2e       	mov	r9, r31
     270:	fe e1       	ldi	r31, 0x1E	; 30
     272:	af 2e       	mov	r10, r31
     274:	b1 2c       	mov	r11, r1
     276:	f0 2d       	mov	r31, r0
     278:	c8 e8       	ldi	r28, 0x88	; 136
     27a:	d0 e0       	ldi	r29, 0x00	; 0
			
			
		}
		
		
		if(count>1.95*buffer[2]){
     27c:	0f 2e       	mov	r0, r31
     27e:	f0 e1       	ldi	r31, 0x10	; 16
     280:	2f 2e       	mov	r2, r31
     282:	f1 e0       	ldi	r31, 0x01	; 1
     284:	3f 2e       	mov	r3, r31
     286:	f0 2d       	mov	r31, r0
	
	
	
	while(1){
		
		m_usb_tx_int(realFrequency);
     288:	80 91 17 01 	lds	r24, 0x0117
     28c:	90 91 18 01 	lds	r25, 0x0118
     290:	0e 94 b8 05 	call	0xb70	; 0xb70 <m_usb_tx_int>
		m_usb_tx_string("\r\n");
     294:	8a ec       	ldi	r24, 0xCA	; 202
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 9e 05 	call	0xb3c	; 0xb3c <print_P>
		
		
		
		if(flag==1){
     29c:	80 91 19 01 	lds	r24, 0x0119
     2a0:	90 91 1a 01 	lds	r25, 0x011A
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	09 f0       	breq	.+2      	; 0x2aa <main+0xec>
     2a8:	46 c0       	rjmp	.+140    	; 0x336 <main+0x178>
			
			frequency= buffer[0]+256*buffer[1];
     2aa:	ee e0       	ldi	r30, 0x0E	; 14
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	20 81       	ld	r18, Z
     2b0:	ef e0       	ldi	r30, 0x0F	; 15
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	80 81       	ld	r24, Z
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	98 2f       	mov	r25, r24
     2ba:	88 27       	eor	r24, r24
     2bc:	82 0f       	add	r24, r18
     2be:	91 1d       	adc	r25, r1
     2c0:	90 93 16 01 	sts	0x0116, r25
     2c4:	80 93 15 01 	sts	0x0115, r24
			realFrequency=frequency/10;
     2c8:	80 91 15 01 	lds	r24, 0x0115
     2cc:	90 91 16 01 	lds	r25, 0x0116
     2d0:	6a e0       	ldi	r22, 0x0A	; 10
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	0e 94 2d 08 	call	0x105a	; 0x105a <__divmodhi4>
     2d8:	70 93 18 01 	sts	0x0118, r23
     2dc:	60 93 17 01 	sts	0x0117, r22
			OCR1A=2000000/(64*realFrequency);
     2e0:	20 91 17 01 	lds	r18, 0x0117
     2e4:	30 91 18 01 	lds	r19, 0x0118
     2e8:	00 24       	eor	r0, r0
     2ea:	36 95       	lsr	r19
     2ec:	27 95       	ror	r18
     2ee:	07 94       	ror	r0
     2f0:	36 95       	lsr	r19
     2f2:	27 95       	ror	r18
     2f4:	07 94       	ror	r0
     2f6:	32 2f       	mov	r19, r18
     2f8:	20 2d       	mov	r18, r0
     2fa:	44 27       	eor	r20, r20
     2fc:	37 fd       	sbrc	r19, 7
     2fe:	40 95       	com	r20
     300:	54 2f       	mov	r21, r20
     302:	c5 01       	movw	r24, r10
     304:	b4 01       	movw	r22, r8
     306:	0e 94 41 08 	call	0x1082	; 0x1082 <__divmodsi4>
     30a:	39 83       	std	Y+1, r19	; 0x01
     30c:	28 83       	st	Y, r18
			set(DDRB,6);
     30e:	26 9a       	sbi	0x04, 6	; 4
			m_green(TOGGLE);
     310:	6a 9a       	sbi	0x0d, 2	; 13
     312:	8e b1       	in	r24, 0x0e	; 14
     314:	f4 e0       	ldi	r31, 0x04	; 4
     316:	8f 27       	eor	r24, r31
     318:	8e b9       	out	0x0e, r24	; 14
			TCNT0=0;
     31a:	16 bc       	out	0x26, r1	; 38
			count=0;
     31c:	10 92 08 01 	sts	0x0108, r1
     320:	10 92 09 01 	sts	0x0109, r1
     324:	10 92 0a 01 	sts	0x010A, r1
     328:	10 92 0b 01 	sts	0x010B, r1
			flag=0;
     32c:	10 92 1a 01 	sts	0x011A, r1
     330:	10 92 19 01 	sts	0x0119, r1
     334:	02 c0       	rjmp	.+4      	; 0x33a <main+0x17c>
			
			}else{
			m_green(0);
     336:	6a 9a       	sbi	0x0d, 2	; 13
     338:	72 9a       	sbi	0x0e, 2	; 14
			
			
		}
		
		
		if(count>1.95*buffer[2]){
     33a:	f1 01       	movw	r30, r2
     33c:	60 81       	ld	r22, Z
     33e:	c0 90 08 01 	lds	r12, 0x0108
     342:	d0 90 09 01 	lds	r13, 0x0109
     346:	e0 90 0a 01 	lds	r14, 0x010A
     34a:	f0 90 0b 01 	lds	r15, 0x010B
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 83 06 	call	0xd06	; 0xd06 <__floatsisf>
     358:	2a e9       	ldi	r18, 0x9A	; 154
     35a:	39 e9       	ldi	r19, 0x99	; 153
     35c:	49 ef       	ldi	r20, 0xF9	; 249
     35e:	5f e3       	ldi	r21, 0x3F	; 63
     360:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     364:	a7 01       	movw	r20, r14
     366:	96 01       	movw	r18, r12
     368:	0e 94 51 06 	call	0xca2	; 0xca2 <__cmpsf2>
     36c:	88 23       	and	r24, r24
     36e:	4c f4       	brge	.+18     	; 0x382 <main+0x1c4>
			
			clear(DDRB,6);
     370:	26 98       	cbi	0x04, 6	; 4
		count=0;}
     372:	10 92 08 01 	sts	0x0108, r1
     376:	10 92 09 01 	sts	0x0109, r1
     37a:	10 92 0a 01 	sts	0x010A, r1
     37e:	10 92 0b 01 	sts	0x010B, r1
		
		if(countsine<OCR1A){
     382:	20 91 0c 01 	lds	r18, 0x010C
     386:	30 91 0d 01 	lds	r19, 0x010D
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
     38e:	28 17       	cp	r18, r24
     390:	39 07       	cpc	r19, r25
     392:	08 f0       	brcs	.+2      	; 0x396 <main+0x1d8>
     394:	47 c0       	rjmp	.+142    	; 0x424 <main+0x266>
			OCR1B=OCR1A/2.0+sin(countsine/OCR1A*2*pi)*OCR1A/2.0;//set the value of OCR1B
     396:	e8 80       	ld	r14, Y
     398:	f9 80       	ldd	r15, Y+1	; 0x01
     39a:	80 91 0c 01 	lds	r24, 0x010C
     39e:	90 91 0d 01 	lds	r25, 0x010D
     3a2:	68 81       	ld	r22, Y
     3a4:	79 81       	ldd	r23, Y+1	; 0x01
     3a6:	0e 94 19 08 	call	0x1032	; 0x1032 <__udivmodhi4>
     3aa:	66 0f       	add	r22, r22
     3ac:	77 1f       	adc	r23, r23
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 81 06 	call	0xd02	; 0xd02 <__floatunsisf>
     3b6:	2a ed       	ldi	r18, 0xDA	; 218
     3b8:	3f e0       	ldi	r19, 0x0F	; 15
     3ba:	49 e4       	ldi	r20, 0x49	; 73
     3bc:	50 e4       	ldi	r21, 0x40	; 64
     3be:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     3c2:	0e 94 96 07 	call	0xf2c	; 0xf2c <sin>
     3c6:	2b 01       	movw	r4, r22
     3c8:	3c 01       	movw	r6, r24
     3ca:	08 81       	ld	r16, Y
     3cc:	19 81       	ldd	r17, Y+1	; 0x01
     3ce:	b7 01       	movw	r22, r14
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 81 06 	call	0xd02	; 0xd02 <__floatunsisf>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	5f e3       	ldi	r21, 0x3F	; 63
     3e0:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     3e4:	6b 01       	movw	r12, r22
     3e6:	7c 01       	movw	r14, r24
     3e8:	b8 01       	movw	r22, r16
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 81 06 	call	0xd02	; 0xd02 <__floatunsisf>
     3f2:	9b 01       	movw	r18, r22
     3f4:	ac 01       	movw	r20, r24
     3f6:	c3 01       	movw	r24, r6
     3f8:	b2 01       	movw	r22, r4
     3fa:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	5f e3       	ldi	r21, 0x3F	; 63
     406:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     40a:	9b 01       	movw	r18, r22
     40c:	ac 01       	movw	r20, r24
     40e:	c7 01       	movw	r24, r14
     410:	b6 01       	movw	r22, r12
     412:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     416:	0e 94 55 06 	call	0xcaa	; 0xcaa <__fixunssfsi>
     41a:	ea e8       	ldi	r30, 0x8A	; 138
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	71 83       	std	Z+1, r23	; 0x01
     420:	60 83       	st	Z, r22
     422:	32 cf       	rjmp	.-412    	; 0x288 <main+0xca>
			}else{
			countsine=0;
     424:	10 92 0d 01 	sts	0x010D, r1
     428:	10 92 0c 01 	sts	0x010C, r1
     42c:	2d cf       	rjmp	.-422    	; 0x288 <main+0xca>

0000042e <__vector_3>:
	
	
}


ISR(INT2_vect){
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	2f 93       	push	r18
     43a:	3f 93       	push	r19
     43c:	4f 93       	push	r20
     43e:	5f 93       	push	r21
     440:	6f 93       	push	r22
     442:	7f 93       	push	r23
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	af 93       	push	r26
     44a:	bf 93       	push	r27
     44c:	ef 93       	push	r30
     44e:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);
     450:	63 e0       	ldi	r22, 0x03	; 3
     452:	8e e0       	ldi	r24, 0x0E	; 14
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 ff 02 	call	0x5fe	; 0x5fe <m_rf_read>
	flag=1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 1a 01 	sts	0x011A, r25
     462:	80 93 19 01 	sts	0x0119, r24
	m_red(TOGGLE);
     466:	6e 9a       	sbi	0x0d, 6	; 13
     468:	9e b1       	in	r25, 0x0e	; 14
     46a:	80 e4       	ldi	r24, 0x40	; 64
     46c:	89 27       	eor	r24, r25
     46e:	8e b9       	out	0x0e, r24	; 14
	// 	OCR1A=2000000/(64*realFrequency);
	// 	set(DDRB,6);
	// 	m_green(TOGGLE);
	// 	TCNT0=0;

}
     470:	ff 91       	pop	r31
     472:	ef 91       	pop	r30
     474:	bf 91       	pop	r27
     476:	af 91       	pop	r26
     478:	9f 91       	pop	r25
     47a:	8f 91       	pop	r24
     47c:	7f 91       	pop	r23
     47e:	6f 91       	pop	r22
     480:	5f 91       	pop	r21
     482:	4f 91       	pop	r20
     484:	3f 91       	pop	r19
     486:	2f 91       	pop	r18
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <__vector_17>:
ISR(TIMER1_COMPA_vect){
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
	countsine++;
     4a0:	80 91 0c 01 	lds	r24, 0x010C
     4a4:	90 91 0d 01 	lds	r25, 0x010D
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	90 93 0d 01 	sts	0x010D, r25
     4ae:	80 93 0c 01 	sts	0x010C, r24
}
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <__vector_21>:

ISR(TIMER0_COMPA_vect){
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
	count++;
     4e2:	60 91 08 01 	lds	r22, 0x0108
     4e6:	70 91 09 01 	lds	r23, 0x0109
     4ea:	80 91 0a 01 	lds	r24, 0x010A
     4ee:	90 91 0b 01 	lds	r25, 0x010B
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e8       	ldi	r20, 0x80	; 128
     4f8:	5f e3       	ldi	r21, 0x3F	; 63
     4fa:	0e 94 ed 05 	call	0xbda	; 0xbda <__addsf3>
     4fe:	60 93 08 01 	sts	0x0108, r22
     502:	70 93 09 01 	sts	0x0109, r23
     506:	80 93 0a 01 	sts	0x010A, r24
     50a:	90 93 0b 01 	sts	0x010B, r25
	
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     530:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     532:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     534:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     536:	8c e0       	ldi	r24, 0x0C	; 12
     538:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     53c:	e9 e6       	ldi	r30, 0x69	; 105
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 62       	ori	r24, 0x20	; 32
     544:	80 83       	st	Z, r24
     546:	80 81       	ld	r24, Z
     548:	8f 7e       	andi	r24, 0xEF	; 239
     54a:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     54c:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     54e:	78 94       	sei
     550:	08 95       	ret

00000552 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	18 2f       	mov	r17, r24
     55a:	d6 2f       	mov	r29, r22
     55c:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     55e:	0e 94 98 02 	call	0x530	; 0x530 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     562:	94 ea       	ldi	r25, 0xA4	; 164
     564:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     568:	ec eb       	ldi	r30, 0xBC	; 188
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	90 81       	ld	r25, Z
     56e:	99 23       	and	r25, r25
     570:	ec f7       	brge	.-6      	; 0x56c <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     572:	90 e5       	ldi	r25, 0x50	; 80
     574:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     578:	94 e8       	ldi	r25, 0x84	; 132
     57a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     57e:	ec eb       	ldi	r30, 0xBC	; 188
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	90 81       	ld	r25, Z
     584:	99 23       	and	r25, r25
     586:	ec f7       	brge	.-6      	; 0x582 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     588:	90 91 b9 00 	lds	r25, 0x00B9
     58c:	98 7f       	andi	r25, 0xF8	; 248
     58e:	90 32       	cpi	r25, 0x20	; 32
     590:	29 f4       	brne	.+10     	; 0x59c <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     592:	84 e9       	ldi	r24, 0x94	; 148
     594:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	2d c0       	rjmp	.+90     	; 0x5f6 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     5a2:	84 e8       	ldi	r24, 0x84	; 132
     5a4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5a8:	ec eb       	ldi	r30, 0xBC	; 188
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	90 81       	ld	r25, Z
     5ae:	99 23       	and	r25, r25
     5b0:	ec f7       	brge	.-6      	; 0x5ac <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
     5b2:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
     5b6:	84 e8       	ldi	r24, 0x84	; 132
     5b8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5bc:	ec eb       	ldi	r30, 0xBC	; 188
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	88 23       	and	r24, r24
     5c4:	ec f7       	brge	.-6      	; 0x5c0 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
     5c6:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
     5ca:	84 e8       	ldi	r24, 0x84	; 132
     5cc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5d0:	ec eb       	ldi	r30, 0xBC	; 188
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	88 23       	and	r24, r24
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <m_rf_open+0x82>
	
	TWDR = packet_length;
     5da:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
     5de:	84 e8       	ldi	r24, 0x84	; 132
     5e0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5e4:	ec eb       	ldi	r30, 0xBC	; 188
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	88 23       	and	r24, r24
     5ec:	ec f7       	brge	.-6      	; 0x5e8 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     5ee:	84 e9       	ldi	r24, 0x94	; 148
     5f0:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	08 95       	ret

000005fe <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     604:	24 ea       	ldi	r18, 0xA4	; 164
     606:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
     60a:	ec eb       	ldi	r30, 0xBC	; 188
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	20 81       	ld	r18, Z
     610:	22 23       	and	r18, r18
     612:	ec f7       	brge	.-6      	; 0x60e <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     614:	21 e5       	ldi	r18, 0x51	; 81
     616:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
     61a:	24 e8       	ldi	r18, 0x84	; 132
     61c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     620:	ec eb       	ldi	r30, 0xBC	; 188
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	20 81       	ld	r18, Z
     626:	22 23       	and	r18, r18
     628:	ec f7       	brge	.-6      	; 0x624 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     62a:	20 91 b9 00 	lds	r18, 0x00B9
     62e:	28 7f       	andi	r18, 0xF8	; 248
     630:	28 34       	cpi	r18, 0x48	; 72
     632:	29 f4       	brne	.+10     	; 0x63e <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     634:	84 e9       	ldi	r24, 0x94	; 148
     636:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	44 c0       	rjmp	.+136    	; 0x6c6 <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     63e:	24 ec       	ldi	r18, 0xC4	; 196
     640:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     644:	ec eb       	ldi	r30, 0xBC	; 188
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	20 81       	ld	r18, Z
     64a:	22 23       	and	r18, r18
     64c:	ec f7       	brge	.-6      	; 0x648 <m_rf_read+0x4a>
	bytes = TWDR;
     64e:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
     652:	16 13       	cpse	r17, r22
     654:	0a c0       	rjmp	.+20     	; 0x66a <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     656:	41 2f       	mov	r20, r17
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	41 50       	subi	r20, 0x01	; 1
     65c:	51 09       	sbc	r21, r1
     65e:	14 16       	cp	r1, r20
     660:	15 06       	cpc	r1, r21
     662:	44 f0       	brlt	.+16     	; 0x674 <m_rf_read+0x76>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	1c c0       	rjmp	.+56     	; 0x6a2 <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     66a:	84 e9       	ldi	r24, 0x94	; 148
     66c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	29 c0       	rjmp	.+82     	; 0x6c6 <m_rf_read+0xc8>
     674:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     67a:	ec eb       	ldi	r30, 0xBC	; 188
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     680:	cb eb       	ldi	r28, 0xBB	; 187
     682:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     684:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     686:	60 81       	ld	r22, Z
     688:	66 23       	and	r22, r22
     68a:	ec f7       	brge	.-6      	; 0x686 <m_rf_read+0x88>
		buffer[i] = TWDR;
     68c:	68 81       	ld	r22, Y
     68e:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     690:	2f 5f       	subi	r18, 0xFF	; 255
     692:	3f 4f       	sbci	r19, 0xFF	; 255
     694:	24 17       	cp	r18, r20
     696:	35 07       	cpc	r19, r21
     698:	ac f3       	brlt	.-22     	; 0x684 <m_rf_read+0x86>
     69a:	21 2f       	mov	r18, r17
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     6a2:	44 e8       	ldi	r20, 0x84	; 132
     6a4:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6a8:	ec eb       	ldi	r30, 0xBC	; 188
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	40 81       	ld	r20, Z
     6ae:	44 23       	and	r20, r20
     6b0:	ec f7       	brge	.-6      	; 0x6ac <m_rf_read+0xae>
	buffer[i++] = TWDR;
     6b2:	40 91 bb 00 	lds	r20, 0x00BB
     6b6:	fc 01       	movw	r30, r24
     6b8:	e2 0f       	add	r30, r18
     6ba:	f3 1f       	adc	r31, r19
     6bc:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     6be:	84 e9       	ldi	r24, 0x94	; 148
     6c0:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	08 95       	ret

000006ce <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     6d4:	80 ea       	ldi	r24, 0xA0	; 160
     6d6:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     6da:	82 e1       	ldi	r24, 0x12	; 18
     6dc:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     6de:	09 b4       	in	r0, 0x29	; 41
     6e0:	00 fe       	sbrs	r0, 0
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     6e4:	80 e9       	ldi	r24, 0x90	; 144
     6e6:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     6ea:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     6ee:	10 92 14 01 	sts	0x0114, r1
	cdc_line_rtsdtr = 0;
     6f2:	10 92 11 01 	sts	0x0111, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     6f6:	8c e0       	ldi	r24, 0x0C	; 12
     6f8:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     6fc:	78 94       	sei
     6fe:	08 95       	ret

00000700 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     704:	90 91 14 01 	lds	r25, 0x0114
     708:	99 23       	and	r25, r25
     70a:	09 f4       	brne	.+2      	; 0x70e <m_usb_tx_char+0xe>
     70c:	4c c0       	rjmp	.+152    	; 0x7a6 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     70e:	9f b7       	in	r25, 0x3f	; 63
	cli();
     710:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     712:	24 e0       	ldi	r18, 0x04	; 4
     714:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     718:	20 91 12 01 	lds	r18, 0x0112
     71c:	22 23       	and	r18, r18
     71e:	49 f0       	breq	.+18     	; 0x732 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     720:	20 91 e8 00 	lds	r18, 0x00E8
     724:	25 fd       	sbrc	r18, 5
     726:	03 c0       	rjmp	.+6      	; 0x72e <m_usb_tx_char+0x2e>
			SREG = intr_state;
     728:	9f bf       	out	0x3f, r25	; 63
			return -1;
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	41 c0       	rjmp	.+130    	; 0x7b0 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     72e:	10 92 12 01 	sts	0x0112, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     732:	30 91 e4 00 	lds	r19, 0x00E4
     736:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     738:	20 91 e8 00 	lds	r18, 0x00E8
     73c:	25 fd       	sbrc	r18, 5
     73e:	24 c0       	rjmp	.+72     	; 0x788 <m_usb_tx_char+0x88>
		SREG = intr_state;
     740:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     742:	90 91 e4 00 	lds	r25, 0x00E4
     746:	93 17       	cp	r25, r19
     748:	81 f0       	breq	.+32     	; 0x76a <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     74a:	90 91 14 01 	lds	r25, 0x0114
     74e:	99 23       	and	r25, r25
     750:	61 f1       	breq	.+88     	; 0x7aa <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     752:	a9 ee       	ldi	r26, 0xE9	; 233
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     758:	e8 ee       	ldi	r30, 0xE8	; 232
     75a:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     75c:	c4 ee       	ldi	r28, 0xE4	; 228
     75e:	d0 e0       	ldi	r29, 0x00	; 0
     760:	0d c0       	rjmp	.+26     	; 0x77c <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     762:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     764:	98 81       	ld	r25, Y
     766:	93 13       	cpse	r25, r19
     768:	05 c0       	rjmp	.+10     	; 0x774 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	80 93 12 01 	sts	0x0112, r24
			return -1;
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	1e c0       	rjmp	.+60     	; 0x7b0 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     774:	90 91 14 01 	lds	r25, 0x0114
     778:	99 23       	and	r25, r25
     77a:	c9 f0       	breq	.+50     	; 0x7ae <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     77c:	9f b7       	in	r25, 0x3f	; 63
		cli();
     77e:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     780:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     782:	20 81       	ld	r18, Z
     784:	25 ff       	sbrs	r18, 5
     786:	ed cf       	rjmp	.-38     	; 0x762 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     788:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     78c:	80 91 e8 00 	lds	r24, 0x00E8
     790:	85 fd       	sbrc	r24, 5
     792:	03 c0       	rjmp	.+6      	; 0x79a <m_usb_tx_char+0x9a>
     794:	8a e3       	ldi	r24, 0x3A	; 58
     796:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     79a:	85 e0       	ldi	r24, 0x05	; 5
     79c:	80 93 13 01 	sts	0x0113, r24
	SREG = intr_state;
     7a0:	9f bf       	out	0x3f, r25	; 63
	return 0;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <m_usb_tx_char+0xb0>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     7c8:	e1 ee       	ldi	r30, 0xE1	; 225
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
        UDINT = 0;
     7ce:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     7d0:	83 ff       	sbrs	r24, 3
     7d2:	11 c0       	rjmp	.+34     	; 0x7f6 <__vector_10+0x40>
		UENUM = 0;
     7d4:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     7de:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     7e2:	92 e1       	ldi	r25, 0x12	; 18
     7e4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     7e8:	98 e0       	ldi	r25, 0x08	; 8
     7ea:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     7ee:	10 92 14 01 	sts	0x0114, r1
		cdc_line_rtsdtr = 0;
     7f2:	10 92 11 01 	sts	0x0111, r1
        }
	if (intbits & (1<<SOFI)) {
     7f6:	82 ff       	sbrs	r24, 2
     7f8:	13 c0       	rjmp	.+38     	; 0x820 <__vector_10+0x6a>
		if (usb_configuration) {
     7fa:	80 91 14 01 	lds	r24, 0x0114
     7fe:	88 23       	and	r24, r24
     800:	79 f0       	breq	.+30     	; 0x820 <__vector_10+0x6a>
			t = transmit_flush_timer;
     802:	80 91 13 01 	lds	r24, 0x0113
			if (t) {
     806:	88 23       	and	r24, r24
     808:	59 f0       	breq	.+22     	; 0x820 <__vector_10+0x6a>
				transmit_flush_timer = --t;
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	80 93 13 01 	sts	0x0113, r24
				if (!t) {
     810:	81 11       	cpse	r24, r1
     812:	06 c0       	rjmp	.+12     	; 0x820 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     814:	84 e0       	ldi	r24, 0x04	; 4
     816:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     81a:	8a e3       	ldi	r24, 0x3A	; 58
     81c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	9f 91       	pop	r25
     826:	8f 91       	pop	r24
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     85c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     860:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     864:	83 ff       	sbrs	r24, 3
     866:	4e c1       	rjmp	.+668    	; 0xb04 <__stack+0x5>
                bmRequestType = UEDATX;
     868:	e1 ef       	ldi	r30, 0xF1	; 241
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
     86e:	40 81       	ld	r20, Z
                wValue = UEDATX;
     870:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     872:	80 81       	ld	r24, Z
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	38 2b       	or	r19, r24
                wIndex = UEDATX;
     878:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
     87a:	50 81       	ld	r21, Z
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	bc 01       	movw	r22, r24
     880:	75 2b       	or	r23, r21
                wLength = UEDATX;
     882:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
     884:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     886:	82 ef       	ldi	r24, 0xF2	; 242
     888:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     88c:	46 30       	cpi	r20, 0x06	; 6
     88e:	09 f0       	breq	.+2      	; 0x892 <__vector_11+0x60>
     890:	58 c0       	rjmp	.+176    	; 0x942 <__vector_11+0x110>
     892:	04 c0       	rjmp	.+8      	; 0x89c <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     894:	81 e2       	ldi	r24, 0x21	; 33
     896:	80 93 eb 00 	sts	0x00EB, r24
					return;
     89a:	3b c1       	rjmp	.+630    	; 0xb12 <__stack+0x13>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
     89c:	c6 e0       	ldi	r28, 0x06	; 6
     89e:	8d ec       	ldi	r24, 0xCD	; 205
     8a0:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
     8a2:	fc 01       	movw	r30, r24
     8a4:	45 91       	lpm	r20, Z+
     8a6:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
     8a8:	24 17       	cp	r18, r20
     8aa:	35 07       	cpc	r19, r21
     8ac:	11 f0       	breq	.+4      	; 0x8b2 <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
     8ae:	07 96       	adiw	r24, 0x07	; 7
					continue;
     8b0:	23 c0       	rjmp	.+70     	; 0x8f8 <__vector_11+0xc6>
				}
				list += 2;
     8b2:	fc 01       	movw	r30, r24
     8b4:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     8b6:	45 91       	lpm	r20, Z+
     8b8:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
     8ba:	64 17       	cp	r22, r20
     8bc:	75 07       	cpc	r23, r21
     8be:	11 f0       	breq	.+4      	; 0x8c4 <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
     8c0:	07 96       	adiw	r24, 0x07	; 7
					continue;
     8c2:	1a c0       	rjmp	.+52     	; 0x8f8 <__vector_11+0xc6>
				}
				list += 2;
     8c4:	fc 01       	movw	r30, r24
     8c6:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     8c8:	25 91       	lpm	r18, Z+
     8ca:	34 91       	lpm	r19, Z
				list += 2;
     8cc:	fc 01       	movw	r30, r24
     8ce:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     8d0:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     8d2:	8b 2f       	mov	r24, r27
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     8d8:	8f 3f       	cpi	r24, 0xFF	; 255
     8da:	91 05       	cpc	r25, r1
     8dc:	19 f0       	breq	.+6      	; 0x8e4 <__vector_11+0xb2>
     8de:	10 f0       	brcs	.+4      	; 0x8e4 <__vector_11+0xb2>
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	85 17       	cp	r24, r21
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <__vector_11+0xb8>
     8e8:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     8ea:	a8 ee       	ldi	r26, 0xE8	; 232
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     8ee:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     8f0:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     8f2:	c1 ef       	ldi	r28, 0xF1	; 241
     8f4:	d0 e0       	ldi	r29, 0x00	; 0
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <__vector_11+0xcc>
     8f8:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     8fa:	99 f6       	brne	.-90     	; 0x8a2 <__vector_11+0x70>
     8fc:	cb cf       	rjmp	.-106    	; 0x894 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     8fe:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     900:	98 2f       	mov	r25, r24
     902:	95 70       	andi	r25, 0x05	; 5
     904:	e1 f3       	breq	.-8      	; 0x8fe <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
     906:	82 fd       	sbrc	r24, 2
     908:	04 c1       	rjmp	.+520    	; 0xb12 <__stack+0x13>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     90a:	45 2f       	mov	r20, r21
     90c:	51 31       	cpi	r21, 0x11	; 17
     90e:	08 f0       	brcs	.+2      	; 0x912 <__vector_11+0xe0>
     910:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
     912:	44 23       	and	r20, r20
     914:	09 f4       	brne	.+2      	; 0x918 <__vector_11+0xe6>
     916:	fa c0       	rjmp	.+500    	; 0xb0c <__stack+0xd>
     918:	f9 01       	movw	r30, r18
     91a:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
     91c:	94 91       	lpm	r25, Z
     91e:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     920:	81 50       	subi	r24, 0x01	; 1
     922:	31 96       	adiw	r30, 0x01	; 1
     924:	81 11       	cpse	r24, r1
     926:	fa cf       	rjmp	.-12     	; 0x91c <__vector_11+0xea>
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	84 0f       	add	r24, r20
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	28 0f       	add	r18, r24
     932:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     934:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     936:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     938:	51 11       	cpse	r21, r1
     93a:	e1 cf       	rjmp	.-62     	; 0x8fe <__vector_11+0xcc>
     93c:	40 31       	cpi	r20, 0x10	; 16
     93e:	f9 f2       	breq	.-66     	; 0x8fe <__vector_11+0xcc>
     940:	e8 c0       	rjmp	.+464    	; 0xb12 <__stack+0x13>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     942:	45 30       	cpi	r20, 0x05	; 5
     944:	61 f4       	brne	.+24     	; 0x95e <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     946:	8e ef       	ldi	r24, 0xFE	; 254
     948:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     94c:	e8 ee       	ldi	r30, 0xE8	; 232
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	80 ff       	sbrs	r24, 0
     954:	fd cf       	rjmp	.-6      	; 0x950 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     956:	20 68       	ori	r18, 0x80	; 128
     958:	20 93 e3 00 	sts	0x00E3, r18
			return;
     95c:	da c0       	rjmp	.+436    	; 0xb12 <__stack+0x13>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     95e:	49 30       	cpi	r20, 0x09	; 9
     960:	09 f0       	breq	.+2      	; 0x964 <__vector_11+0x132>
     962:	36 c0       	rjmp	.+108    	; 0x9d0 <__vector_11+0x19e>
     964:	c1 11       	cpse	r28, r1
     966:	5f c0       	rjmp	.+190    	; 0xa26 <__vector_11+0x1f4>
			usb_configuration = wValue;
     968:	20 93 14 01 	sts	0x0114, r18
			cdc_line_rtsdtr = 0;
     96c:	10 92 11 01 	sts	0x0111, r1
			transmit_flush_timer = 0;
     970:	10 92 13 01 	sts	0x0113, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     974:	8e ef       	ldi	r24, 0xFE	; 254
     976:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     97a:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     97c:	86 e7       	ldi	r24, 0x76	; 118
     97e:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     980:	c9 ee       	ldi	r28, 0xE9	; 233
     982:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     984:	ab ee       	ldi	r26, 0xEB	; 235
     986:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     988:	6c ee       	ldi	r22, 0xEC	; 236
     98a:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     98c:	4d ee       	ldi	r20, 0xED	; 237
     98e:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     990:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
     992:	9c 01       	movw	r18, r24
     994:	2f 5f       	subi	r18, 0xFF	; 255
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	04 91       	lpm	r16, Z
				UECONX = en;
     99c:	0c 93       	st	X, r16
				if (en) {
     99e:	00 23       	and	r16, r16
     9a0:	61 f0       	breq	.+24     	; 0x9ba <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
     9a2:	f9 01       	movw	r30, r18
     9a4:	24 91       	lpm	r18, Z
     9a6:	fb 01       	movw	r30, r22
     9a8:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
     9aa:	9c 01       	movw	r18, r24
     9ac:	2d 5f       	subi	r18, 0xFD	; 253
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	fc 01       	movw	r30, r24
     9b2:	32 96       	adiw	r30, 0x02	; 2
     9b4:	84 91       	lpm	r24, Z
     9b6:	fa 01       	movw	r30, r20
     9b8:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     9ba:	1f 5f       	subi	r17, 0xFF	; 255
     9bc:	15 30       	cpi	r17, 0x05	; 5
     9be:	11 f0       	breq	.+4      	; 0x9c4 <__vector_11+0x192>
     9c0:	c9 01       	movw	r24, r18
     9c2:	e6 cf       	rjmp	.-52     	; 0x990 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     9c4:	ea ee       	ldi	r30, 0xEA	; 234
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	8e e1       	ldi	r24, 0x1E	; 30
     9ca:	80 83       	st	Z, r24
        		UERST = 0;
     9cc:	10 82       	st	Z, r1
			return;
     9ce:	a1 c0       	rjmp	.+322    	; 0xb12 <__stack+0x13>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     9d0:	48 30       	cpi	r20, 0x08	; 8
     9d2:	81 f4       	brne	.+32     	; 0x9f4 <__vector_11+0x1c2>
     9d4:	c0 38       	cpi	r28, 0x80	; 128
     9d6:	09 f0       	breq	.+2      	; 0x9da <__vector_11+0x1a8>
     9d8:	42 c0       	rjmp	.+132    	; 0xa5e <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     9da:	e8 ee       	ldi	r30, 0xE8	; 232
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	80 ff       	sbrs	r24, 0
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     9e4:	80 91 14 01 	lds	r24, 0x0114
     9e8:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     9ec:	8e ef       	ldi	r24, 0xFE	; 254
     9ee:	80 93 e8 00 	sts	0x00E8, r24
     9f2:	8f c0       	rjmp	.+286    	; 0xb12 <__stack+0x13>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     9f4:	41 32       	cpi	r20, 0x21	; 33
     9f6:	b9 f4       	brne	.+46     	; 0xa26 <__vector_11+0x1f4>
     9f8:	c1 3a       	cpi	r28, 0xA1	; 161
     9fa:	09 f0       	breq	.+2      	; 0x9fe <__vector_11+0x1cc>
     9fc:	40 c0       	rjmp	.+128    	; 0xa7e <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     9fe:	e8 ee       	ldi	r30, 0xE8	; 232
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	80 ff       	sbrs	r24, 0
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <__vector_11+0x1d0>
     a08:	e0 e0       	ldi	r30, 0x00	; 0
     a0a:	f1 e0       	ldi	r31, 0x01	; 1
     a0c:	87 e0       	ldi	r24, 0x07	; 7
     a0e:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     a10:	a1 ef       	ldi	r26, 0xF1	; 241
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	21 91       	ld	r18, Z+
     a16:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     a18:	e8 17       	cp	r30, r24
     a1a:	f9 07       	cpc	r31, r25
     a1c:	d9 f7       	brne	.-10     	; 0xa14 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a1e:	8e ef       	ldi	r24, 0xFE	; 254
     a20:	80 93 e8 00 	sts	0x00E8, r24
     a24:	76 c0       	rjmp	.+236    	; 0xb12 <__stack+0x13>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     a26:	40 32       	cpi	r20, 0x20	; 32
     a28:	d1 f4       	brne	.+52     	; 0xa5e <__vector_11+0x22c>
     a2a:	c1 32       	cpi	r28, 0x21	; 33
     a2c:	09 f0       	breq	.+2      	; 0xa30 <__vector_11+0x1fe>
     a2e:	43 c0       	rjmp	.+134    	; 0xab6 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     a30:	e8 ee       	ldi	r30, 0xE8	; 232
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	82 ff       	sbrs	r24, 2
     a38:	fd cf       	rjmp	.-6      	; 0xa34 <__vector_11+0x202>
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	87 e0       	ldi	r24, 0x07	; 7
     a40:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     a42:	a1 ef       	ldi	r26, 0xF1	; 241
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	2c 91       	ld	r18, X
     a48:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     a4a:	e8 17       	cp	r30, r24
     a4c:	f9 07       	cpc	r31, r25
     a4e:	d9 f7       	brne	.-10     	; 0xa46 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     a50:	e8 ee       	ldi	r30, 0xE8	; 232
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	8b ef       	ldi	r24, 0xFB	; 251
     a56:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a58:	8e ef       	ldi	r24, 0xFE	; 254
     a5a:	80 83       	st	Z, r24
     a5c:	5a c0       	rjmp	.+180    	; 0xb12 <__stack+0x13>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     a5e:	42 32       	cpi	r20, 0x22	; 34
     a60:	71 f4       	brne	.+28     	; 0xa7e <__vector_11+0x24c>
     a62:	c1 32       	cpi	r28, 0x21	; 33
     a64:	09 f0       	breq	.+2      	; 0xa68 <__vector_11+0x236>
     a66:	4e c0       	rjmp	.+156    	; 0xb04 <__stack+0x5>
			cdc_line_rtsdtr = wValue;
     a68:	20 93 11 01 	sts	0x0111, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     a6c:	e8 ee       	ldi	r30, 0xE8	; 232
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	80 ff       	sbrs	r24, 0
     a74:	fd cf       	rjmp	.-6      	; 0xa70 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a76:	8e ef       	ldi	r24, 0xFE	; 254
     a78:	80 93 e8 00 	sts	0x00E8, r24
     a7c:	4a c0       	rjmp	.+148    	; 0xb12 <__stack+0x13>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     a7e:	41 11       	cpse	r20, r1
     a80:	1a c0       	rjmp	.+52     	; 0xab6 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     a82:	e8 ee       	ldi	r30, 0xE8	; 232
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	80 ff       	sbrs	r24, 0
     a8a:	fd cf       	rjmp	.-6      	; 0xa86 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     a8c:	c2 38       	cpi	r28, 0x82	; 130
     a8e:	51 f4       	brne	.+20     	; 0xaa4 <__vector_11+0x272>
				UENUM = wIndex;
     a90:	e9 ee       	ldi	r30, 0xE9	; 233
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
     a96:	80 91 eb 00 	lds	r24, 0x00EB
     a9a:	85 fb       	bst	r24, 5
     a9c:	88 27       	eor	r24, r24
     a9e:	80 f9       	bld	r24, 0
				UENUM = 0;
     aa0:	10 82       	st	Z, r1
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     aa6:	e1 ef       	ldi	r30, 0xF1	; 241
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 83       	st	Z, r24
			UEDATX = 0;
     aac:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     aae:	8e ef       	ldi	r24, 0xFE	; 254
     ab0:	80 93 e8 00 	sts	0x00E8, r24
     ab4:	2e c0       	rjmp	.+92     	; 0xb12 <__stack+0x13>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     ab6:	84 2f       	mov	r24, r20
     ab8:	8d 7f       	andi	r24, 0xFD	; 253
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	19 f5       	brne	.+70     	; 0xb04 <__stack+0x5>
		  && bmRequestType == 0x02 && wValue == 0) {
     abe:	c2 30       	cpi	r28, 0x02	; 2
     ac0:	09 f5       	brne	.+66     	; 0xb04 <__stack+0x5>
     ac2:	23 2b       	or	r18, r19
     ac4:	f9 f4       	brne	.+62     	; 0xb04 <__stack+0x5>
			i = wIndex & 0x7F;
     ac6:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	86 0f       	add	r24, r22
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	d0 f4       	brcc	.+52     	; 0xb04 <__stack+0x5>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ad0:	8e ef       	ldi	r24, 0xFE	; 254
     ad2:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     ad6:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
     ada:	43 30       	cpi	r20, 0x03	; 3
     adc:	21 f4       	brne	.+8      	; 0xae6 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     ade:	81 e2       	ldi	r24, 0x21	; 33
     ae0:	80 93 eb 00 	sts	0x00EB, r24
     ae4:	16 c0       	rjmp	.+44     	; 0xb12 <__stack+0x13>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     ae6:	89 e1       	ldi	r24, 0x19	; 25
     ae8:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__vector_11+0x2c4>
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	6a 95       	dec	r22
     af8:	e2 f7       	brpl	.-8      	; 0xaf2 <__vector_11+0x2c0>
     afa:	ea ee       	ldi	r30, 0xEA	; 234
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 83       	st	Z, r24
					UERST = 0;
     b00:	10 82       	st	Z, r1
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <__stack+0x13>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     b04:	81 e2       	ldi	r24, 0x21	; 33
     b06:	80 93 eb 00 	sts	0x00EB, r24
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <__stack+0x13>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b0c:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     b0e:	51 11       	cpse	r21, r1
     b10:	f6 ce       	rjmp	.-532    	; 0x8fe <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     b42:	ec 01       	movw	r28, r24
     b44:	21 96       	adiw	r28, 0x01	; 1
     b46:	fc 01       	movw	r30, r24
     b48:	14 91       	lpm	r17, Z
		if (!c) break;
     b4a:	11 23       	and	r17, r17
     b4c:	69 f0       	breq	.+26     	; 0xb68 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
     b4e:	1a 30       	cpi	r17, 0x0A	; 10
     b50:	19 f4       	brne	.+6      	; 0xb58 <print_P+0x1c>
     b52:	8d e0       	ldi	r24, 0x0D	; 13
     b54:	0e 94 80 03 	call	0x700	; 0x700 <m_usb_tx_char>
		usb_tx_char(c);
     b58:	81 2f       	mov	r24, r17
     b5a:	0e 94 80 03 	call	0x700	; 0x700 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     b5e:	fe 01       	movw	r30, r28
     b60:	14 91       	lpm	r17, Z
     b62:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
     b64:	11 11       	cpse	r17, r1
     b66:	f3 cf       	rjmp	.-26     	; 0xb4e <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	08 95       	ret

00000b70 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	27 97       	sbiw	r28, 0x07	; 7
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     b8c:	8e 01       	movw	r16, r28
     b8e:	0f 5f       	subi	r16, 0xFF	; 255
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
     b92:	27 e0       	ldi	r18, 0x07	; 7
     b94:	f8 01       	movw	r30, r16
     b96:	11 92       	st	Z+, r1
     b98:	2a 95       	dec	r18
     b9a:	e9 f7       	brne	.-6      	; 0xb96 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b9c:	4a e0       	ldi	r20, 0x0A	; 10
     b9e:	b8 01       	movw	r22, r16
     ba0:	0e 94 82 08 	call	0x1104	; 0x1104 <__itoa_ncheck>
     ba4:	7e 01       	movw	r14, r28
     ba6:	f8 e0       	ldi	r31, 0x08	; 8
     ba8:	ef 0e       	add	r14, r31
     baa:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     bac:	f8 01       	movw	r30, r16
     bae:	81 91       	ld	r24, Z+
     bb0:	8f 01       	movw	r16, r30
     bb2:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     bb4:	0e 94 80 03 	call	0x700	; 0x700 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     bb8:	0e 15       	cp	r16, r14
     bba:	1f 05       	cpc	r17, r15
     bbc:	b9 f7       	brne	.-18     	; 0xbac <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     bbe:	27 96       	adiw	r28, 0x07	; 7
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	08 95       	ret

00000bd8 <__subsf3>:
     bd8:	50 58       	subi	r21, 0x80	; 128

00000bda <__addsf3>:
     bda:	bb 27       	eor	r27, r27
     bdc:	aa 27       	eor	r26, r26
     bde:	0e d0       	rcall	.+28     	; 0xbfc <__addsf3x>
     be0:	08 c1       	rjmp	.+528    	; 0xdf2 <__fp_round>
     be2:	f9 d0       	rcall	.+498    	; 0xdd6 <__fp_pscA>
     be4:	30 f0       	brcs	.+12     	; 0xbf2 <__addsf3+0x18>
     be6:	fe d0       	rcall	.+508    	; 0xde4 <__fp_pscB>
     be8:	20 f0       	brcs	.+8      	; 0xbf2 <__addsf3+0x18>
     bea:	31 f4       	brne	.+12     	; 0xbf8 <__addsf3+0x1e>
     bec:	9f 3f       	cpi	r25, 0xFF	; 255
     bee:	11 f4       	brne	.+4      	; 0xbf4 <__addsf3+0x1a>
     bf0:	1e f4       	brtc	.+6      	; 0xbf8 <__addsf3+0x1e>
     bf2:	ee c0       	rjmp	.+476    	; 0xdd0 <__fp_nan>
     bf4:	0e f4       	brtc	.+2      	; 0xbf8 <__addsf3+0x1e>
     bf6:	e0 95       	com	r30
     bf8:	e7 fb       	bst	r30, 7
     bfa:	e4 c0       	rjmp	.+456    	; 0xdc4 <__fp_inf>

00000bfc <__addsf3x>:
     bfc:	e9 2f       	mov	r30, r25
     bfe:	0a d1       	rcall	.+532    	; 0xe14 <__fp_split3>
     c00:	80 f3       	brcs	.-32     	; 0xbe2 <__addsf3+0x8>
     c02:	ba 17       	cp	r27, r26
     c04:	62 07       	cpc	r22, r18
     c06:	73 07       	cpc	r23, r19
     c08:	84 07       	cpc	r24, r20
     c0a:	95 07       	cpc	r25, r21
     c0c:	18 f0       	brcs	.+6      	; 0xc14 <__addsf3x+0x18>
     c0e:	71 f4       	brne	.+28     	; 0xc2c <__addsf3x+0x30>
     c10:	9e f5       	brtc	.+102    	; 0xc78 <__addsf3x+0x7c>
     c12:	22 c1       	rjmp	.+580    	; 0xe58 <__fp_zero>
     c14:	0e f4       	brtc	.+2      	; 0xc18 <__addsf3x+0x1c>
     c16:	e0 95       	com	r30
     c18:	0b 2e       	mov	r0, r27
     c1a:	ba 2f       	mov	r27, r26
     c1c:	a0 2d       	mov	r26, r0
     c1e:	0b 01       	movw	r0, r22
     c20:	b9 01       	movw	r22, r18
     c22:	90 01       	movw	r18, r0
     c24:	0c 01       	movw	r0, r24
     c26:	ca 01       	movw	r24, r20
     c28:	a0 01       	movw	r20, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	ff 27       	eor	r31, r31
     c2e:	59 1b       	sub	r21, r25
     c30:	99 f0       	breq	.+38     	; 0xc58 <__addsf3x+0x5c>
     c32:	59 3f       	cpi	r21, 0xF9	; 249
     c34:	50 f4       	brcc	.+20     	; 0xc4a <__addsf3x+0x4e>
     c36:	50 3e       	cpi	r21, 0xE0	; 224
     c38:	68 f1       	brcs	.+90     	; 0xc94 <__addsf3x+0x98>
     c3a:	1a 16       	cp	r1, r26
     c3c:	f0 40       	sbci	r31, 0x00	; 0
     c3e:	a2 2f       	mov	r26, r18
     c40:	23 2f       	mov	r18, r19
     c42:	34 2f       	mov	r19, r20
     c44:	44 27       	eor	r20, r20
     c46:	58 5f       	subi	r21, 0xF8	; 248
     c48:	f3 cf       	rjmp	.-26     	; 0xc30 <__addsf3x+0x34>
     c4a:	46 95       	lsr	r20
     c4c:	37 95       	ror	r19
     c4e:	27 95       	ror	r18
     c50:	a7 95       	ror	r26
     c52:	f0 40       	sbci	r31, 0x00	; 0
     c54:	53 95       	inc	r21
     c56:	c9 f7       	brne	.-14     	; 0xc4a <__addsf3x+0x4e>
     c58:	7e f4       	brtc	.+30     	; 0xc78 <__addsf3x+0x7c>
     c5a:	1f 16       	cp	r1, r31
     c5c:	ba 0b       	sbc	r27, r26
     c5e:	62 0b       	sbc	r22, r18
     c60:	73 0b       	sbc	r23, r19
     c62:	84 0b       	sbc	r24, r20
     c64:	ba f0       	brmi	.+46     	; 0xc94 <__addsf3x+0x98>
     c66:	91 50       	subi	r25, 0x01	; 1
     c68:	a1 f0       	breq	.+40     	; 0xc92 <__addsf3x+0x96>
     c6a:	ff 0f       	add	r31, r31
     c6c:	bb 1f       	adc	r27, r27
     c6e:	66 1f       	adc	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	88 1f       	adc	r24, r24
     c74:	c2 f7       	brpl	.-16     	; 0xc66 <__addsf3x+0x6a>
     c76:	0e c0       	rjmp	.+28     	; 0xc94 <__addsf3x+0x98>
     c78:	ba 0f       	add	r27, r26
     c7a:	62 1f       	adc	r22, r18
     c7c:	73 1f       	adc	r23, r19
     c7e:	84 1f       	adc	r24, r20
     c80:	48 f4       	brcc	.+18     	; 0xc94 <__addsf3x+0x98>
     c82:	87 95       	ror	r24
     c84:	77 95       	ror	r23
     c86:	67 95       	ror	r22
     c88:	b7 95       	ror	r27
     c8a:	f7 95       	ror	r31
     c8c:	9e 3f       	cpi	r25, 0xFE	; 254
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__addsf3x+0x96>
     c90:	b3 cf       	rjmp	.-154    	; 0xbf8 <__addsf3+0x1e>
     c92:	93 95       	inc	r25
     c94:	88 0f       	add	r24, r24
     c96:	08 f0       	brcs	.+2      	; 0xc9a <__addsf3x+0x9e>
     c98:	99 27       	eor	r25, r25
     c9a:	ee 0f       	add	r30, r30
     c9c:	97 95       	ror	r25
     c9e:	87 95       	ror	r24
     ca0:	08 95       	ret

00000ca2 <__cmpsf2>:
     ca2:	6c d0       	rcall	.+216    	; 0xd7c <__fp_cmp>
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <__cmpsf2+0x6>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	08 95       	ret

00000caa <__fixunssfsi>:
     caa:	bc d0       	rcall	.+376    	; 0xe24 <__fp_splitA>
     cac:	88 f0       	brcs	.+34     	; 0xcd0 <__fixunssfsi+0x26>
     cae:	9f 57       	subi	r25, 0x7F	; 127
     cb0:	90 f0       	brcs	.+36     	; 0xcd6 <__fixunssfsi+0x2c>
     cb2:	b9 2f       	mov	r27, r25
     cb4:	99 27       	eor	r25, r25
     cb6:	b7 51       	subi	r27, 0x17	; 23
     cb8:	a0 f0       	brcs	.+40     	; 0xce2 <__fixunssfsi+0x38>
     cba:	d1 f0       	breq	.+52     	; 0xcf0 <__fixunssfsi+0x46>
     cbc:	66 0f       	add	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	1a f0       	brmi	.+6      	; 0xccc <__fixunssfsi+0x22>
     cc6:	ba 95       	dec	r27
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <__fixunssfsi+0x12>
     cca:	12 c0       	rjmp	.+36     	; 0xcf0 <__fixunssfsi+0x46>
     ccc:	b1 30       	cpi	r27, 0x01	; 1
     cce:	81 f0       	breq	.+32     	; 0xcf0 <__fixunssfsi+0x46>
     cd0:	c3 d0       	rcall	.+390    	; 0xe58 <__fp_zero>
     cd2:	b1 e0       	ldi	r27, 0x01	; 1
     cd4:	08 95       	ret
     cd6:	c0 c0       	rjmp	.+384    	; 0xe58 <__fp_zero>
     cd8:	67 2f       	mov	r22, r23
     cda:	78 2f       	mov	r23, r24
     cdc:	88 27       	eor	r24, r24
     cde:	b8 5f       	subi	r27, 0xF8	; 248
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <__fixunssfsi+0x46>
     ce2:	b9 3f       	cpi	r27, 0xF9	; 249
     ce4:	cc f3       	brlt	.-14     	; 0xcd8 <__fixunssfsi+0x2e>
     ce6:	86 95       	lsr	r24
     ce8:	77 95       	ror	r23
     cea:	67 95       	ror	r22
     cec:	b3 95       	inc	r27
     cee:	d9 f7       	brne	.-10     	; 0xce6 <__fixunssfsi+0x3c>
     cf0:	3e f4       	brtc	.+14     	; 0xd00 <__fixunssfsi+0x56>
     cf2:	90 95       	com	r25
     cf4:	80 95       	com	r24
     cf6:	70 95       	com	r23
     cf8:	61 95       	neg	r22
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	8f 4f       	sbci	r24, 0xFF	; 255
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	08 95       	ret

00000d02 <__floatunsisf>:
     d02:	e8 94       	clt
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <__floatsisf+0x12>

00000d06 <__floatsisf>:
     d06:	97 fb       	bst	r25, 7
     d08:	3e f4       	brtc	.+14     	; 0xd18 <__floatsisf+0x12>
     d0a:	90 95       	com	r25
     d0c:	80 95       	com	r24
     d0e:	70 95       	com	r23
     d10:	61 95       	neg	r22
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	8f 4f       	sbci	r24, 0xFF	; 255
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	99 23       	and	r25, r25
     d1a:	a9 f0       	breq	.+42     	; 0xd46 <__floatsisf+0x40>
     d1c:	f9 2f       	mov	r31, r25
     d1e:	96 e9       	ldi	r25, 0x96	; 150
     d20:	bb 27       	eor	r27, r27
     d22:	93 95       	inc	r25
     d24:	f6 95       	lsr	r31
     d26:	87 95       	ror	r24
     d28:	77 95       	ror	r23
     d2a:	67 95       	ror	r22
     d2c:	b7 95       	ror	r27
     d2e:	f1 11       	cpse	r31, r1
     d30:	f8 cf       	rjmp	.-16     	; 0xd22 <__floatsisf+0x1c>
     d32:	fa f4       	brpl	.+62     	; 0xd72 <__floatsisf+0x6c>
     d34:	bb 0f       	add	r27, r27
     d36:	11 f4       	brne	.+4      	; 0xd3c <__floatsisf+0x36>
     d38:	60 ff       	sbrs	r22, 0
     d3a:	1b c0       	rjmp	.+54     	; 0xd72 <__floatsisf+0x6c>
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	16 c0       	rjmp	.+44     	; 0xd72 <__floatsisf+0x6c>
     d46:	88 23       	and	r24, r24
     d48:	11 f0       	breq	.+4      	; 0xd4e <__floatsisf+0x48>
     d4a:	96 e9       	ldi	r25, 0x96	; 150
     d4c:	11 c0       	rjmp	.+34     	; 0xd70 <__floatsisf+0x6a>
     d4e:	77 23       	and	r23, r23
     d50:	21 f0       	breq	.+8      	; 0xd5a <__floatsisf+0x54>
     d52:	9e e8       	ldi	r25, 0x8E	; 142
     d54:	87 2f       	mov	r24, r23
     d56:	76 2f       	mov	r23, r22
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <__floatsisf+0x5e>
     d5a:	66 23       	and	r22, r22
     d5c:	71 f0       	breq	.+28     	; 0xd7a <__floatsisf+0x74>
     d5e:	96 e8       	ldi	r25, 0x86	; 134
     d60:	86 2f       	mov	r24, r22
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	2a f0       	brmi	.+10     	; 0xd72 <__floatsisf+0x6c>
     d68:	9a 95       	dec	r25
     d6a:	66 0f       	add	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	88 1f       	adc	r24, r24
     d70:	da f7       	brpl	.-10     	; 0xd68 <__floatsisf+0x62>
     d72:	88 0f       	add	r24, r24
     d74:	96 95       	lsr	r25
     d76:	87 95       	ror	r24
     d78:	97 f9       	bld	r25, 7
     d7a:	08 95       	ret

00000d7c <__fp_cmp>:
     d7c:	99 0f       	add	r25, r25
     d7e:	00 08       	sbc	r0, r0
     d80:	55 0f       	add	r21, r21
     d82:	aa 0b       	sbc	r26, r26
     d84:	e0 e8       	ldi	r30, 0x80	; 128
     d86:	fe ef       	ldi	r31, 0xFE	; 254
     d88:	16 16       	cp	r1, r22
     d8a:	17 06       	cpc	r1, r23
     d8c:	e8 07       	cpc	r30, r24
     d8e:	f9 07       	cpc	r31, r25
     d90:	c0 f0       	brcs	.+48     	; 0xdc2 <__fp_cmp+0x46>
     d92:	12 16       	cp	r1, r18
     d94:	13 06       	cpc	r1, r19
     d96:	e4 07       	cpc	r30, r20
     d98:	f5 07       	cpc	r31, r21
     d9a:	98 f0       	brcs	.+38     	; 0xdc2 <__fp_cmp+0x46>
     d9c:	62 1b       	sub	r22, r18
     d9e:	73 0b       	sbc	r23, r19
     da0:	84 0b       	sbc	r24, r20
     da2:	95 0b       	sbc	r25, r21
     da4:	39 f4       	brne	.+14     	; 0xdb4 <__fp_cmp+0x38>
     da6:	0a 26       	eor	r0, r26
     da8:	61 f0       	breq	.+24     	; 0xdc2 <__fp_cmp+0x46>
     daa:	23 2b       	or	r18, r19
     dac:	24 2b       	or	r18, r20
     dae:	25 2b       	or	r18, r21
     db0:	21 f4       	brne	.+8      	; 0xdba <__fp_cmp+0x3e>
     db2:	08 95       	ret
     db4:	0a 26       	eor	r0, r26
     db6:	09 f4       	brne	.+2      	; 0xdba <__fp_cmp+0x3e>
     db8:	a1 40       	sbci	r26, 0x01	; 1
     dba:	a6 95       	lsr	r26
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	81 1d       	adc	r24, r1
     dc0:	81 1d       	adc	r24, r1
     dc2:	08 95       	ret

00000dc4 <__fp_inf>:
     dc4:	97 f9       	bld	r25, 7
     dc6:	9f 67       	ori	r25, 0x7F	; 127
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	08 95       	ret

00000dd0 <__fp_nan>:
     dd0:	9f ef       	ldi	r25, 0xFF	; 255
     dd2:	80 ec       	ldi	r24, 0xC0	; 192
     dd4:	08 95       	ret

00000dd6 <__fp_pscA>:
     dd6:	00 24       	eor	r0, r0
     dd8:	0a 94       	dec	r0
     dda:	16 16       	cp	r1, r22
     ddc:	17 06       	cpc	r1, r23
     dde:	18 06       	cpc	r1, r24
     de0:	09 06       	cpc	r0, r25
     de2:	08 95       	ret

00000de4 <__fp_pscB>:
     de4:	00 24       	eor	r0, r0
     de6:	0a 94       	dec	r0
     de8:	12 16       	cp	r1, r18
     dea:	13 06       	cpc	r1, r19
     dec:	14 06       	cpc	r1, r20
     dee:	05 06       	cpc	r0, r21
     df0:	08 95       	ret

00000df2 <__fp_round>:
     df2:	09 2e       	mov	r0, r25
     df4:	03 94       	inc	r0
     df6:	00 0c       	add	r0, r0
     df8:	11 f4       	brne	.+4      	; 0xdfe <__fp_round+0xc>
     dfa:	88 23       	and	r24, r24
     dfc:	52 f0       	brmi	.+20     	; 0xe12 <__fp_round+0x20>
     dfe:	bb 0f       	add	r27, r27
     e00:	40 f4       	brcc	.+16     	; 0xe12 <__fp_round+0x20>
     e02:	bf 2b       	or	r27, r31
     e04:	11 f4       	brne	.+4      	; 0xe0a <__fp_round+0x18>
     e06:	60 ff       	sbrs	r22, 0
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <__fp_round+0x20>
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	8f 4f       	sbci	r24, 0xFF	; 255
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	08 95       	ret

00000e14 <__fp_split3>:
     e14:	57 fd       	sbrc	r21, 7
     e16:	90 58       	subi	r25, 0x80	; 128
     e18:	44 0f       	add	r20, r20
     e1a:	55 1f       	adc	r21, r21
     e1c:	59 f0       	breq	.+22     	; 0xe34 <__fp_splitA+0x10>
     e1e:	5f 3f       	cpi	r21, 0xFF	; 255
     e20:	71 f0       	breq	.+28     	; 0xe3e <__fp_splitA+0x1a>
     e22:	47 95       	ror	r20

00000e24 <__fp_splitA>:
     e24:	88 0f       	add	r24, r24
     e26:	97 fb       	bst	r25, 7
     e28:	99 1f       	adc	r25, r25
     e2a:	61 f0       	breq	.+24     	; 0xe44 <__fp_splitA+0x20>
     e2c:	9f 3f       	cpi	r25, 0xFF	; 255
     e2e:	79 f0       	breq	.+30     	; 0xe4e <__fp_splitA+0x2a>
     e30:	87 95       	ror	r24
     e32:	08 95       	ret
     e34:	12 16       	cp	r1, r18
     e36:	13 06       	cpc	r1, r19
     e38:	14 06       	cpc	r1, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	f2 cf       	rjmp	.-28     	; 0xe22 <__fp_split3+0xe>
     e3e:	46 95       	lsr	r20
     e40:	f1 df       	rcall	.-30     	; 0xe24 <__fp_splitA>
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <__fp_splitA+0x30>
     e44:	16 16       	cp	r1, r22
     e46:	17 06       	cpc	r1, r23
     e48:	18 06       	cpc	r1, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	f1 cf       	rjmp	.-30     	; 0xe30 <__fp_splitA+0xc>
     e4e:	86 95       	lsr	r24
     e50:	71 05       	cpc	r23, r1
     e52:	61 05       	cpc	r22, r1
     e54:	08 94       	sec
     e56:	08 95       	ret

00000e58 <__fp_zero>:
     e58:	e8 94       	clt

00000e5a <__fp_szero>:
     e5a:	bb 27       	eor	r27, r27
     e5c:	66 27       	eor	r22, r22
     e5e:	77 27       	eor	r23, r23
     e60:	cb 01       	movw	r24, r22
     e62:	97 f9       	bld	r25, 7
     e64:	08 95       	ret

00000e66 <__mulsf3>:
     e66:	0b d0       	rcall	.+22     	; 0xe7e <__mulsf3x>
     e68:	c4 cf       	rjmp	.-120    	; 0xdf2 <__fp_round>
     e6a:	b5 df       	rcall	.-150    	; 0xdd6 <__fp_pscA>
     e6c:	28 f0       	brcs	.+10     	; 0xe78 <__mulsf3+0x12>
     e6e:	ba df       	rcall	.-140    	; 0xde4 <__fp_pscB>
     e70:	18 f0       	brcs	.+6      	; 0xe78 <__mulsf3+0x12>
     e72:	95 23       	and	r25, r21
     e74:	09 f0       	breq	.+2      	; 0xe78 <__mulsf3+0x12>
     e76:	a6 cf       	rjmp	.-180    	; 0xdc4 <__fp_inf>
     e78:	ab cf       	rjmp	.-170    	; 0xdd0 <__fp_nan>
     e7a:	11 24       	eor	r1, r1
     e7c:	ee cf       	rjmp	.-36     	; 0xe5a <__fp_szero>

00000e7e <__mulsf3x>:
     e7e:	ca df       	rcall	.-108    	; 0xe14 <__fp_split3>
     e80:	a0 f3       	brcs	.-24     	; 0xe6a <__mulsf3+0x4>

00000e82 <__mulsf3_pse>:
     e82:	95 9f       	mul	r25, r21
     e84:	d1 f3       	breq	.-12     	; 0xe7a <__mulsf3+0x14>
     e86:	95 0f       	add	r25, r21
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	55 1f       	adc	r21, r21
     e8c:	62 9f       	mul	r22, r18
     e8e:	f0 01       	movw	r30, r0
     e90:	72 9f       	mul	r23, r18
     e92:	bb 27       	eor	r27, r27
     e94:	f0 0d       	add	r31, r0
     e96:	b1 1d       	adc	r27, r1
     e98:	63 9f       	mul	r22, r19
     e9a:	aa 27       	eor	r26, r26
     e9c:	f0 0d       	add	r31, r0
     e9e:	b1 1d       	adc	r27, r1
     ea0:	aa 1f       	adc	r26, r26
     ea2:	64 9f       	mul	r22, r20
     ea4:	66 27       	eor	r22, r22
     ea6:	b0 0d       	add	r27, r0
     ea8:	a1 1d       	adc	r26, r1
     eaa:	66 1f       	adc	r22, r22
     eac:	82 9f       	mul	r24, r18
     eae:	22 27       	eor	r18, r18
     eb0:	b0 0d       	add	r27, r0
     eb2:	a1 1d       	adc	r26, r1
     eb4:	62 1f       	adc	r22, r18
     eb6:	73 9f       	mul	r23, r19
     eb8:	b0 0d       	add	r27, r0
     eba:	a1 1d       	adc	r26, r1
     ebc:	62 1f       	adc	r22, r18
     ebe:	83 9f       	mul	r24, r19
     ec0:	a0 0d       	add	r26, r0
     ec2:	61 1d       	adc	r22, r1
     ec4:	22 1f       	adc	r18, r18
     ec6:	74 9f       	mul	r23, r20
     ec8:	33 27       	eor	r19, r19
     eca:	a0 0d       	add	r26, r0
     ecc:	61 1d       	adc	r22, r1
     ece:	23 1f       	adc	r18, r19
     ed0:	84 9f       	mul	r24, r20
     ed2:	60 0d       	add	r22, r0
     ed4:	21 1d       	adc	r18, r1
     ed6:	82 2f       	mov	r24, r18
     ed8:	76 2f       	mov	r23, r22
     eda:	6a 2f       	mov	r22, r26
     edc:	11 24       	eor	r1, r1
     ede:	9f 57       	subi	r25, 0x7F	; 127
     ee0:	50 40       	sbci	r21, 0x00	; 0
     ee2:	8a f0       	brmi	.+34     	; 0xf06 <__mulsf3_pse+0x84>
     ee4:	e1 f0       	breq	.+56     	; 0xf1e <__mulsf3_pse+0x9c>
     ee6:	88 23       	and	r24, r24
     ee8:	4a f0       	brmi	.+18     	; 0xefc <__mulsf3_pse+0x7a>
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	bb 1f       	adc	r27, r27
     ef0:	66 1f       	adc	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	91 50       	subi	r25, 0x01	; 1
     ef8:	50 40       	sbci	r21, 0x00	; 0
     efa:	a9 f7       	brne	.-22     	; 0xee6 <__mulsf3_pse+0x64>
     efc:	9e 3f       	cpi	r25, 0xFE	; 254
     efe:	51 05       	cpc	r21, r1
     f00:	70 f0       	brcs	.+28     	; 0xf1e <__mulsf3_pse+0x9c>
     f02:	60 cf       	rjmp	.-320    	; 0xdc4 <__fp_inf>
     f04:	aa cf       	rjmp	.-172    	; 0xe5a <__fp_szero>
     f06:	5f 3f       	cpi	r21, 0xFF	; 255
     f08:	ec f3       	brlt	.-6      	; 0xf04 <__mulsf3_pse+0x82>
     f0a:	98 3e       	cpi	r25, 0xE8	; 232
     f0c:	dc f3       	brlt	.-10     	; 0xf04 <__mulsf3_pse+0x82>
     f0e:	86 95       	lsr	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b7 95       	ror	r27
     f16:	f7 95       	ror	r31
     f18:	e7 95       	ror	r30
     f1a:	9f 5f       	subi	r25, 0xFF	; 255
     f1c:	c1 f7       	brne	.-16     	; 0xf0e <__mulsf3_pse+0x8c>
     f1e:	fe 2b       	or	r31, r30
     f20:	88 0f       	add	r24, r24
     f22:	91 1d       	adc	r25, r1
     f24:	96 95       	lsr	r25
     f26:	87 95       	ror	r24
     f28:	97 f9       	bld	r25, 7
     f2a:	08 95       	ret

00000f2c <sin>:
     f2c:	9f 93       	push	r25
     f2e:	05 d0       	rcall	.+10     	; 0xf3a <__fp_rempio2>
     f30:	0f 90       	pop	r0
     f32:	07 fc       	sbrc	r0, 7
     f34:	ee 5f       	subi	r30, 0xFE	; 254
     f36:	28 c0       	rjmp	.+80     	; 0xf88 <__fp_sinus>
     f38:	4b cf       	rjmp	.-362    	; 0xdd0 <__fp_nan>

00000f3a <__fp_rempio2>:
     f3a:	74 df       	rcall	.-280    	; 0xe24 <__fp_splitA>
     f3c:	e8 f3       	brcs	.-6      	; 0xf38 <sin+0xc>
     f3e:	e8 94       	clt
     f40:	e0 e0       	ldi	r30, 0x00	; 0
     f42:	bb 27       	eor	r27, r27
     f44:	9f 57       	subi	r25, 0x7F	; 127
     f46:	f0 f0       	brcs	.+60     	; 0xf84 <__fp_rempio2+0x4a>
     f48:	2a ed       	ldi	r18, 0xDA	; 218
     f4a:	3f e0       	ldi	r19, 0x0F	; 15
     f4c:	49 ec       	ldi	r20, 0xC9	; 201
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <__fp_rempio2+0x22>
     f50:	ee 0f       	add	r30, r30
     f52:	bb 0f       	add	r27, r27
     f54:	66 1f       	adc	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	28 f0       	brcs	.+10     	; 0xf66 <__fp_rempio2+0x2c>
     f5c:	b2 3a       	cpi	r27, 0xA2	; 162
     f5e:	62 07       	cpc	r22, r18
     f60:	73 07       	cpc	r23, r19
     f62:	84 07       	cpc	r24, r20
     f64:	28 f0       	brcs	.+10     	; 0xf70 <__fp_rempio2+0x36>
     f66:	b2 5a       	subi	r27, 0xA2	; 162
     f68:	62 0b       	sbc	r22, r18
     f6a:	73 0b       	sbc	r23, r19
     f6c:	84 0b       	sbc	r24, r20
     f6e:	e3 95       	inc	r30
     f70:	9a 95       	dec	r25
     f72:	72 f7       	brpl	.-36     	; 0xf50 <__fp_rempio2+0x16>
     f74:	80 38       	cpi	r24, 0x80	; 128
     f76:	30 f4       	brcc	.+12     	; 0xf84 <__fp_rempio2+0x4a>
     f78:	9a 95       	dec	r25
     f7a:	bb 0f       	add	r27, r27
     f7c:	66 1f       	adc	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	88 1f       	adc	r24, r24
     f82:	d2 f7       	brpl	.-12     	; 0xf78 <__fp_rempio2+0x3e>
     f84:	90 48       	sbci	r25, 0x80	; 128
     f86:	13 c0       	rjmp	.+38     	; 0xfae <__fp_mpack_finite>

00000f88 <__fp_sinus>:
     f88:	ef 93       	push	r30
     f8a:	e0 ff       	sbrs	r30, 0
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <__fp_sinus+0x12>
     f8e:	a2 ea       	ldi	r26, 0xA2	; 162
     f90:	2a ed       	ldi	r18, 0xDA	; 218
     f92:	3f e0       	ldi	r19, 0x0F	; 15
     f94:	49 ec       	ldi	r20, 0xC9	; 201
     f96:	5f eb       	ldi	r21, 0xBF	; 191
     f98:	31 de       	rcall	.-926    	; 0xbfc <__addsf3x>
     f9a:	2b df       	rcall	.-426    	; 0xdf2 <__fp_round>
     f9c:	0f 90       	pop	r0
     f9e:	03 94       	inc	r0
     fa0:	01 fc       	sbrc	r0, 1
     fa2:	90 58       	subi	r25, 0x80	; 128
     fa4:	ec ea       	ldi	r30, 0xAC	; 172
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <__fp_powsodd>

00000faa <__fp_mpack>:
     faa:	9f 3f       	cpi	r25, 0xFF	; 255
     fac:	31 f0       	breq	.+12     	; 0xfba <__fp_mpack_finite+0xc>

00000fae <__fp_mpack_finite>:
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	20 f4       	brcc	.+8      	; 0xfba <__fp_mpack_finite+0xc>
     fb2:	87 95       	ror	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b7 95       	ror	r27
     fba:	88 0f       	add	r24, r24
     fbc:	91 1d       	adc	r25, r1
     fbe:	96 95       	lsr	r25
     fc0:	87 95       	ror	r24
     fc2:	97 f9       	bld	r25, 7
     fc4:	08 95       	ret

00000fc6 <__fp_powsodd>:
     fc6:	9f 93       	push	r25
     fc8:	8f 93       	push	r24
     fca:	7f 93       	push	r23
     fcc:	6f 93       	push	r22
     fce:	ff 93       	push	r31
     fd0:	ef 93       	push	r30
     fd2:	9b 01       	movw	r18, r22
     fd4:	ac 01       	movw	r20, r24
     fd6:	47 df       	rcall	.-370    	; 0xe66 <__mulsf3>
     fd8:	ef 91       	pop	r30
     fda:	ff 91       	pop	r31
     fdc:	05 d0       	rcall	.+10     	; 0xfe8 <__fp_powser>
     fde:	2f 91       	pop	r18
     fe0:	3f 91       	pop	r19
     fe2:	4f 91       	pop	r20
     fe4:	5f 91       	pop	r21
     fe6:	3f cf       	rjmp	.-386    	; 0xe66 <__mulsf3>

00000fe8 <__fp_powser>:
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	1f 93       	push	r17
     fee:	0f 93       	push	r16
     ff0:	ff 92       	push	r15
     ff2:	ef 92       	push	r14
     ff4:	df 92       	push	r13
     ff6:	7b 01       	movw	r14, r22
     ff8:	8c 01       	movw	r16, r24
     ffa:	68 94       	set
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <__fp_powser+0x20>
     ffe:	da 2e       	mov	r13, r26
    1000:	ef 01       	movw	r28, r30
    1002:	3d df       	rcall	.-390    	; 0xe7e <__mulsf3x>
    1004:	fe 01       	movw	r30, r28
    1006:	e8 94       	clt
    1008:	a5 91       	lpm	r26, Z+
    100a:	25 91       	lpm	r18, Z+
    100c:	35 91       	lpm	r19, Z+
    100e:	45 91       	lpm	r20, Z+
    1010:	55 91       	lpm	r21, Z+
    1012:	ae f3       	brts	.-22     	; 0xffe <__fp_powser+0x16>
    1014:	ef 01       	movw	r28, r30
    1016:	f2 dd       	rcall	.-1052   	; 0xbfc <__addsf3x>
    1018:	fe 01       	movw	r30, r28
    101a:	97 01       	movw	r18, r14
    101c:	a8 01       	movw	r20, r16
    101e:	da 94       	dec	r13
    1020:	79 f7       	brne	.-34     	; 0x1000 <__fp_powser+0x18>
    1022:	df 90       	pop	r13
    1024:	ef 90       	pop	r14
    1026:	ff 90       	pop	r15
    1028:	0f 91       	pop	r16
    102a:	1f 91       	pop	r17
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <__udivmodhi4>:
    1032:	aa 1b       	sub	r26, r26
    1034:	bb 1b       	sub	r27, r27
    1036:	51 e1       	ldi	r21, 0x11	; 17
    1038:	07 c0       	rjmp	.+14     	; 0x1048 <__udivmodhi4_ep>

0000103a <__udivmodhi4_loop>:
    103a:	aa 1f       	adc	r26, r26
    103c:	bb 1f       	adc	r27, r27
    103e:	a6 17       	cp	r26, r22
    1040:	b7 07       	cpc	r27, r23
    1042:	10 f0       	brcs	.+4      	; 0x1048 <__udivmodhi4_ep>
    1044:	a6 1b       	sub	r26, r22
    1046:	b7 0b       	sbc	r27, r23

00001048 <__udivmodhi4_ep>:
    1048:	88 1f       	adc	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	5a 95       	dec	r21
    104e:	a9 f7       	brne	.-22     	; 0x103a <__udivmodhi4_loop>
    1050:	80 95       	com	r24
    1052:	90 95       	com	r25
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	08 95       	ret

0000105a <__divmodhi4>:
    105a:	97 fb       	bst	r25, 7
    105c:	07 2e       	mov	r0, r23
    105e:	16 f4       	brtc	.+4      	; 0x1064 <__divmodhi4+0xa>
    1060:	00 94       	com	r0
    1062:	07 d0       	rcall	.+14     	; 0x1072 <__divmodhi4_neg1>
    1064:	77 fd       	sbrc	r23, 7
    1066:	09 d0       	rcall	.+18     	; 0x107a <__divmodhi4_neg2>
    1068:	0e 94 19 08 	call	0x1032	; 0x1032 <__udivmodhi4>
    106c:	07 fc       	sbrc	r0, 7
    106e:	05 d0       	rcall	.+10     	; 0x107a <__divmodhi4_neg2>
    1070:	3e f4       	brtc	.+14     	; 0x1080 <__divmodhi4_exit>

00001072 <__divmodhi4_neg1>:
    1072:	90 95       	com	r25
    1074:	81 95       	neg	r24
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	08 95       	ret

0000107a <__divmodhi4_neg2>:
    107a:	70 95       	com	r23
    107c:	61 95       	neg	r22
    107e:	7f 4f       	sbci	r23, 0xFF	; 255

00001080 <__divmodhi4_exit>:
    1080:	08 95       	ret

00001082 <__divmodsi4>:
    1082:	05 2e       	mov	r0, r21
    1084:	97 fb       	bst	r25, 7
    1086:	1e f4       	brtc	.+6      	; 0x108e <__divmodsi4+0xc>
    1088:	00 94       	com	r0
    108a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__negsi2>
    108e:	57 fd       	sbrc	r21, 7
    1090:	07 d0       	rcall	.+14     	; 0x10a0 <__divmodsi4_neg2>
    1092:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__udivmodsi4>
    1096:	07 fc       	sbrc	r0, 7
    1098:	03 d0       	rcall	.+6      	; 0x10a0 <__divmodsi4_neg2>
    109a:	4e f4       	brtc	.+18     	; 0x10ae <__divmodsi4_exit>
    109c:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__negsi2>

000010a0 <__divmodsi4_neg2>:
    10a0:	50 95       	com	r21
    10a2:	40 95       	com	r20
    10a4:	30 95       	com	r19
    10a6:	21 95       	neg	r18
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	4f 4f       	sbci	r20, 0xFF	; 255
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255

000010ae <__divmodsi4_exit>:
    10ae:	08 95       	ret

000010b0 <__negsi2>:
    10b0:	90 95       	com	r25
    10b2:	80 95       	com	r24
    10b4:	70 95       	com	r23
    10b6:	61 95       	neg	r22
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	8f 4f       	sbci	r24, 0xFF	; 255
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	08 95       	ret

000010c0 <__udivmodsi4>:
    10c0:	a1 e2       	ldi	r26, 0x21	; 33
    10c2:	1a 2e       	mov	r1, r26
    10c4:	aa 1b       	sub	r26, r26
    10c6:	bb 1b       	sub	r27, r27
    10c8:	fd 01       	movw	r30, r26
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <__udivmodsi4_ep>

000010cc <__udivmodsi4_loop>:
    10cc:	aa 1f       	adc	r26, r26
    10ce:	bb 1f       	adc	r27, r27
    10d0:	ee 1f       	adc	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	a2 17       	cp	r26, r18
    10d6:	b3 07       	cpc	r27, r19
    10d8:	e4 07       	cpc	r30, r20
    10da:	f5 07       	cpc	r31, r21
    10dc:	20 f0       	brcs	.+8      	; 0x10e6 <__udivmodsi4_ep>
    10de:	a2 1b       	sub	r26, r18
    10e0:	b3 0b       	sbc	r27, r19
    10e2:	e4 0b       	sbc	r30, r20
    10e4:	f5 0b       	sbc	r31, r21

000010e6 <__udivmodsi4_ep>:
    10e6:	66 1f       	adc	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	1a 94       	dec	r1
    10f0:	69 f7       	brne	.-38     	; 0x10cc <__udivmodsi4_loop>
    10f2:	60 95       	com	r22
    10f4:	70 95       	com	r23
    10f6:	80 95       	com	r24
    10f8:	90 95       	com	r25
    10fa:	9b 01       	movw	r18, r22
    10fc:	ac 01       	movw	r20, r24
    10fe:	bd 01       	movw	r22, r26
    1100:	cf 01       	movw	r24, r30
    1102:	08 95       	ret

00001104 <__itoa_ncheck>:
    1104:	bb 27       	eor	r27, r27
    1106:	4a 30       	cpi	r20, 0x0A	; 10
    1108:	31 f4       	brne	.+12     	; 0x1116 <__itoa_ncheck+0x12>
    110a:	99 23       	and	r25, r25
    110c:	22 f4       	brpl	.+8      	; 0x1116 <__itoa_ncheck+0x12>
    110e:	bd e2       	ldi	r27, 0x2D	; 45
    1110:	90 95       	com	r25
    1112:	81 95       	neg	r24
    1114:	9f 4f       	sbci	r25, 0xFF	; 255
    1116:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__utoa_common>

0000111a <__utoa_ncheck>:
    111a:	bb 27       	eor	r27, r27

0000111c <__utoa_common>:
    111c:	fb 01       	movw	r30, r22
    111e:	55 27       	eor	r21, r21
    1120:	aa 27       	eor	r26, r26
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	aa 1f       	adc	r26, r26
    1128:	a4 17       	cp	r26, r20
    112a:	10 f0       	brcs	.+4      	; 0x1130 <__utoa_common+0x14>
    112c:	a4 1b       	sub	r26, r20
    112e:	83 95       	inc	r24
    1130:	50 51       	subi	r21, 0x10	; 16
    1132:	b9 f7       	brne	.-18     	; 0x1122 <__utoa_common+0x6>
    1134:	a0 5d       	subi	r26, 0xD0	; 208
    1136:	aa 33       	cpi	r26, 0x3A	; 58
    1138:	08 f0       	brcs	.+2      	; 0x113c <__utoa_common+0x20>
    113a:	a9 5d       	subi	r26, 0xD9	; 217
    113c:	a1 93       	st	Z+, r26
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	79 f7       	brne	.-34     	; 0x1120 <__utoa_common+0x4>
    1142:	b1 11       	cpse	r27, r1
    1144:	b1 93       	st	Z+, r27
    1146:	11 92       	st	Z+, r1
    1148:	cb 01       	movw	r24, r22
    114a:	0c 94 a7 08 	jmp	0x114e	; 0x114e <strrev>

0000114e <strrev>:
    114e:	dc 01       	movw	r26, r24
    1150:	fc 01       	movw	r30, r24
    1152:	67 2f       	mov	r22, r23
    1154:	71 91       	ld	r23, Z+
    1156:	77 23       	and	r23, r23
    1158:	e1 f7       	brne	.-8      	; 0x1152 <strrev+0x4>
    115a:	32 97       	sbiw	r30, 0x02	; 2
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <strrev+0x18>
    115e:	7c 91       	ld	r23, X
    1160:	6d 93       	st	X+, r22
    1162:	70 83       	st	Z, r23
    1164:	62 91       	ld	r22, -Z
    1166:	ae 17       	cp	r26, r30
    1168:	bf 07       	cpc	r27, r31
    116a:	c8 f3       	brcs	.-14     	; 0x115e <strrev+0x10>
    116c:	08 95       	ret

0000116e <_exit>:
    116e:	f8 94       	cli

00001170 <__stop_program>:
    1170:	ff cf       	rjmp	.-2      	; 0x1170 <__stop_program>

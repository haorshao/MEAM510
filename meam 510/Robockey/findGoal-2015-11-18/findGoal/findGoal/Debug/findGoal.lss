
findGoal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000028f6  0000298a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800120  00800120  000029aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028dd  00000000  00000000  00002bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000850  00000000  00000000  00005497  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d2a  00000000  00000000  00005ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000734  00000000  00000000  00006a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d4  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003523  00000000  00000000  0000791c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0000ae3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__ctors_end>
       4:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
       8:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
       c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      10:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      14:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      18:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      1c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      20:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      24:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      28:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_10>
      2c:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_11>
      30:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      34:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      38:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      3c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      40:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      44:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      48:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      4c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      50:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      54:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      58:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      5c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      60:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      64:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      68:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      6c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      70:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      74:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      78:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      7c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      80:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      84:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      88:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      8c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      90:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      94:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      98:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      9c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      a0:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      a4:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      a8:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
      ac:	07 2c       	mov	r0, r7
      ae:	7a a5       	ldd	r23, Y+42	; 0x2a
      b0:	ba 6c       	ori	r27, 0xCA	; 202
      b2:	c5 90       	lpm	r12, Z+
      b4:	da 3b       	cpi	r29, 0xBA	; 186
      b6:	93 65       	ori	r25, 0x53	; 83
      b8:	fc 8b       	std	Y+20, r31	; 0x14
      ba:	bc 53       	subi	r27, 0x3C	; 60
      bc:	f8 10       	cpse	r15, r8
      be:	fd 3c       	cpi	r31, 0xCD	; 205
      c0:	56 92       	lac	Z, r5
      c2:	83 4d       	sbci	r24, 0xD3	; 211
      c4:	bd 87       	std	Y+13, r27	; 0x0d
      c6:	9d 3a       	cpi	r25, 0xAD	; 173
      c8:	b6 3d       	cpi	r27, 0xD6	; 214
      ca:	cb c9       	rjmp	.-3178   	; 0xfffff462 <__eeprom_end+0xff7ef462>
      cc:	bf 5b       	subi	r27, 0xBF	; 191
      ce:	be 73       	andi	r27, 0x3E	; 62
      d0:	da 0f       	add	r29, r26
      d2:	c9 3f       	cpi	r28, 0xF9	; 249

000000d4 <__trampolines_end>:
      d4:	74 75       	andi	r23, 0x54	; 84
      d6:	72 6e       	ori	r23, 0xE2	; 226
      d8:	20 6c       	ori	r18, 0xC0	; 192
      da:	65 66       	ori	r22, 0x65	; 101
      dc:	74 0a       	sbc	r7, r20
	...

000000df <__c.2196>:
      df:	74 75 72 6e 20 72 69 67 68 74 0a 00                 turn right..

000000eb <__c.2188>:
      eb:	0a 00                                               ..

000000ed <__c.2186>:
      ed:	61 6c 70 68 61 3a 20 00                             alpha: .

000000f5 <__c.2164>:
      f5:	0a 00                                               ..

000000f7 <__c.2162>:
      f7:	73 69 67 6e 3a 20 00                                sign: .

000000fe <__c.2159>:
      fe:	0a 00                                               ..

00000100 <__c.2157>:
     100:	09 00                                               ..

00000102 <__c.2155>:
     102:	63 6f 73 2c 20 73 69 6e 3a 00                       cos, sin:.

0000010c <__c.2151>:
     10c:	0a 00                                               ..

0000010e <__c.2149>:
     10e:	09 00                                               ..

00000110 <__c.2147>:
     110:	72 65 66 5f 76 63 30 2c 20 72 65 66 5f 76 63 31     ref_vc0, ref_vc1
     120:	20 28 6e 6f 72 6d 61 6c 69 7a 65 29 3a 20 00         (normalize): .

0000012f <__c.2144>:
     12f:	0a 00                                               ..

00000131 <__c.2142>:
     131:	09 00                                               ..

00000133 <__c.2140>:
     133:	72 65 66 5f 76 63 30 2c 20 72 65 66 5f 76 63 31     ref_vc0, ref_vc1
     143:	20 28 75 6e 6e 6f 72 6d 61 6c 69 7a 65 29 3a 20      (unnormalize): 
	...

00000154 <__c.2137>:
     154:	0a 00                                               ..

00000156 <__c.2135>:
     156:	09 00                                               ..

00000158 <__c.2133>:
     158:	72 65 66 5f 70 63 30 2c 20 72 65 66 5f 70 63 31     ref_pc0, ref_pc1
     168:	3a 20 00                                            : .

0000016b <__c.2130>:
     16b:	0a 00                                               ..

0000016d <__c.2128>:
     16d:	09 00                                               ..

0000016f <__c.2126>:
     16f:	63 6f 69 6e 5f 69 6e 64 2c 20 6f 74 68 65 72 5f     coin_ind, other_
     17f:	69 6e 64 3a 00                                      ind:.

00000184 <__c.2122>:
     184:	63 61 6e 6e 6f 74 20 63 61 6c 63 75 6c 61 74 65     cannot calculate
     194:	0a 00                                               ..

00000196 <__c.2119>:
     196:	6d 69 73 73 20 31 0a 00                             miss 1..

0000019e <__c.2116>:
     19e:	6d 69 73 73 20 34 0a 00                             miss 4..

000001a6 <__c.2112>:
     1a6:	6e 6f 74 20 6d 69 73 73 0a 00                       not miss..

000001b0 <__c.2109>:
     1b0:	0a 00                                               ..

000001b2 <__c.2107>:
     1b2:	63 61 73 65 20 3a 00                                case :.

000001b9 <__c.2099>:
     1b9:	0a 00                                               ..

000001bb <__c.2097>:
     1bb:	61 63 74 75 61 6c 20 6d 61 78 3a 00                 actual max:.

000001c7 <__c.2094>:
     1c7:	0a 00                                               ..

000001c9 <__c.2092>:
     1c9:	64 6d 69 6e 3a 20 00                                dmin: .

000001d0 <__c.2085>:
     1d0:	0a 00                                               ..

000001d2 <__c.2083>:
     1d2:	64 6d 61 78 3a 20 00                                dmax: .

000001d9 <__c.2021>:
     1d9:	0a 00                                               ..

000001db <__c.2019>:
     1db:	09 76 79 3a 20 30 2e 00                             .vy: 0..

000001e3 <__c.2017>:
     1e3:	44 69 72 65 63 74 69 6f 6e 20 76 78 3a 20 30 2e     Direction vx: 0.
	...

000001f4 <__c.2015>:
     1f4:	0a 00                                               ..

000001f6 <__c.2013>:
     1f6:	09 09 79 3a 00                                      ..y:.

000001fb <__c.2011>:
     1fb:	50 6f 73 69 74 69 6f 6e 20 78 3a 00                 Position x:.

00000207 <descriptor_list>:
     207:	00 01 00 00 9e 02 12 00 02 00 00 5b 02 43 00 03     ...........[.C..
     217:	00 00 57 02 04 01 03 09 04 43 02 12 02 03 09 04     ..W......C......
     227:	3b 02 06 03 03 09 04 31 02 08                       ;......1..

00000231 <string3>:
     231:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000023b <string2>:
     23b:	06 03 4d 00 32 00 00 00                             ..M.2...

00000243 <string1>:
     243:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     253:	65 00 00 00                                         e...

00000257 <string0>:
     257:	04 03 09 04                                         ....

0000025b <config1_descriptor>:
     25b:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     26b:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     27b:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     28b:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     29b:	40 00 00                                            @..

0000029e <device_descriptor>:
     29e:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2ae:	03 01                                               ..

000002b0 <endpoint_config_table>:
     2b0:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000002ba <__ctors_end>:
     2ba:	11 24       	eor	r1, r1
     2bc:	1f be       	out	0x3f, r1	; 63
     2be:	cf ef       	ldi	r28, 0xFF	; 255
     2c0:	da e0       	ldi	r29, 0x0A	; 10
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	cd bf       	out	0x3d, r28	; 61

000002c6 <__do_copy_data>:
     2c6:	11 e0       	ldi	r17, 0x01	; 1
     2c8:	a0 e0       	ldi	r26, 0x00	; 0
     2ca:	b1 e0       	ldi	r27, 0x01	; 1
     2cc:	e6 ef       	ldi	r30, 0xF6	; 246
     2ce:	f8 e2       	ldi	r31, 0x28	; 40
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__do_copy_data+0x10>
     2d2:	05 90       	lpm	r0, Z+
     2d4:	0d 92       	st	X+, r0
     2d6:	a0 32       	cpi	r26, 0x20	; 32
     2d8:	b1 07       	cpc	r27, r17
     2da:	d9 f7       	brne	.-10     	; 0x2d2 <__do_copy_data+0xc>

000002dc <__do_clear_bss>:
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	a0 e2       	ldi	r26, 0x20	; 32
     2e0:	b1 e0       	ldi	r27, 0x01	; 1
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <.do_clear_bss_start>

000002e4 <.do_clear_bss_loop>:
     2e4:	1d 92       	st	X+, r1

000002e6 <.do_clear_bss_start>:
     2e6:	a1 37       	cpi	r26, 0x71	; 113
     2e8:	b2 07       	cpc	r27, r18
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <.do_clear_bss_loop>
     2ec:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <main>
     2f0:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <_exit>

000002f4 <__bad_interrupt>:
     2f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002f8 <init_timer>:
	
}

void init_timer(void){
	// Direction pin B0 for motor 1, B1 for motor 2
	set(DDRB, 0);
     2f8:	20 9a       	sbi	0x04, 0	; 4
	set(PORTB, 0);
     2fa:	28 9a       	sbi	0x05, 0	; 5
	
	set(DDRB, 1);
     2fc:	21 9a       	sbi	0x04, 1	; 4
	set(PORTB, 1);
     2fe:	29 9a       	sbi	0x05, 1	; 5
	
	// Initialize timer 1
	OCR1A = 250;
     300:	8a ef       	ldi	r24, 0xFA	; 250
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 89 00 	sts	0x0089, r25
     308:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 250;
     30c:	90 93 8b 00 	sts	0x008B, r25
     310:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = 250;
     314:	90 93 8d 00 	sts	0x008D, r25
     318:	80 93 8c 00 	sts	0x008C, r24
	
	// Set timer 1 modes as up to OCR1A, PWM mode (mode 15)
	set(TCCR1B, WGM13);
     31c:	a1 e8       	ldi	r26, 0x81	; 129
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	8c 91       	ld	r24, X
     322:	80 61       	ori	r24, 0x10	; 16
     324:	8c 93       	st	X, r24
	set(TCCR1B, WGM12);
     326:	8c 91       	ld	r24, X
     328:	88 60       	ori	r24, 0x08	; 8
     32a:	8c 93       	st	X, r24
	set(TCCR1A, WGM11);
     32c:	e0 e8       	ldi	r30, 0x80	; 128
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	82 60       	ori	r24, 0x02	; 2
     334:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
     336:	80 81       	ld	r24, Z
     338:	81 60       	ori	r24, 0x01	; 1
     33a:	80 83       	st	Z, r24

	// Set to clear at OCR1B, set at OCR1A
	set(TCCR1A, COM1B1);
     33c:	80 81       	ld	r24, Z
     33e:	80 62       	ori	r24, 0x20	; 32
     340:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
     342:	80 81       	ld	r24, Z
     344:	8f 7e       	andi	r24, 0xEF	; 239
     346:	80 83       	st	Z, r24
	
	// Set to clear at OCR1C, set at OCR1A
	set(TCCR1A, COM1C1);
     348:	80 81       	ld	r24, Z
     34a:	88 60       	ori	r24, 0x08	; 8
     34c:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
     34e:	80 81       	ld	r24, Z
     350:	8b 7f       	andi	r24, 0xFB	; 251
     352:	80 83       	st	Z, r24

	// Set B6, B7 output
	set(DDRB, 6);
     354:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);
     356:	27 9a       	sbi	0x04, 7	; 4
	
	// Set prescaler as /1
	clear(TCCR1B, CS12);
     358:	8c 91       	ld	r24, X
     35a:	8b 7f       	andi	r24, 0xFB	; 251
     35c:	8c 93       	st	X, r24
	clear(TCCR1B, CS11);
     35e:	8c 91       	ld	r24, X
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	8c 93       	st	X, r24
	set(TCCR1B, CS10);
     364:	8c 91       	ld	r24, X
     366:	81 60       	ori	r24, 0x01	; 1
     368:	8c 93       	st	X, r24
     36a:	08 95       	ret

0000036c <find_sign>:
		ypdir[1] = ypdir_last[1];
	}
	m_green(OFF);
}

int find_sign(float costheta, float sintheta, float *ref_vc, float *ref_vw){
     36c:	4f 92       	push	r4
     36e:	5f 92       	push	r5
     370:	6f 92       	push	r6
     372:	7f 92       	push	r7
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	60 97       	sbiw	r28, 0x10	; 16
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	2b 01       	movw	r4, r22
     39e:	3c 01       	movw	r6, r24
     3a0:	2d 83       	std	Y+5, r18	; 0x05
     3a2:	3e 83       	std	Y+6, r19	; 0x06
     3a4:	4f 83       	std	Y+7, r20	; 0x07
     3a6:	58 87       	std	Y+8, r21	; 0x08
     3a8:	58 01       	movw	r10, r16
     3aa:	87 01       	movw	r16, r14
	float temp1[2] = {0, 0};
	float temp2[2] = {0, 0};
	
	temp1[0] = costheta*ref_vc[0] - ref_vw[0] - ref_vc[1]*sintheta;
     3ac:	d5 01       	movw	r26, r10
     3ae:	cd 90       	ld	r12, X+
     3b0:	dd 90       	ld	r13, X+
     3b2:	ed 90       	ld	r14, X+
     3b4:	fc 90       	ld	r15, X
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	c7 01       	movw	r24, r14
     3bc:	b6 01       	movw	r22, r12
     3be:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     3c2:	f8 01       	movw	r30, r16
     3c4:	20 81       	ld	r18, Z
     3c6:	31 81       	ldd	r19, Z+1	; 0x01
     3c8:	42 81       	ldd	r20, Z+2	; 0x02
     3ca:	53 81       	ldd	r21, Z+3	; 0x03
     3cc:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     3d0:	69 87       	std	Y+9, r22	; 0x09
     3d2:	7a 87       	std	Y+10, r23	; 0x0a
     3d4:	8b 87       	std	Y+11, r24	; 0x0b
     3d6:	9c 87       	std	Y+12, r25	; 0x0c
     3d8:	d5 01       	movw	r26, r10
     3da:	14 96       	adiw	r26, 0x04	; 4
     3dc:	8d 91       	ld	r24, X+
     3de:	9d 91       	ld	r25, X+
     3e0:	0d 90       	ld	r0, X+
     3e2:	bc 91       	ld	r27, X
     3e4:	a0 2d       	mov	r26, r0
     3e6:	89 83       	std	Y+1, r24	; 0x01
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	ab 83       	std	Y+3, r26	; 0x03
     3ec:	bc 83       	std	Y+4, r27	; 0x04
     3ee:	2d 81       	ldd	r18, Y+5	; 0x05
     3f0:	3e 81       	ldd	r19, Y+6	; 0x06
     3f2:	4f 81       	ldd	r20, Y+7	; 0x07
     3f4:	58 85       	ldd	r21, Y+8	; 0x08
     3f6:	bc 01       	movw	r22, r24
     3f8:	cd 01       	movw	r24, r26
     3fa:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     3fe:	6d 87       	std	Y+13, r22	; 0x0d
     400:	7e 87       	std	Y+14, r23	; 0x0e
     402:	8f 87       	std	Y+15, r24	; 0x0f
     404:	98 8b       	std	Y+16, r25	; 0x10
     406:	9b 01       	movw	r18, r22
     408:	ac 01       	movw	r20, r24
     40a:	69 85       	ldd	r22, Y+9	; 0x09
     40c:	7a 85       	ldd	r23, Y+10	; 0x0a
     40e:	8b 85       	ldd	r24, Y+11	; 0x0b
     410:	9c 85       	ldd	r25, Y+12	; 0x0c
     412:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     416:	4b 01       	movw	r8, r22
     418:	5c 01       	movw	r10, r24
	temp1[1] = costheta*ref_vc[1] - ref_vw[1] + ref_vc[0]*sintheta;
     41a:	29 81       	ldd	r18, Y+1	; 0x01
     41c:	3a 81       	ldd	r19, Y+2	; 0x02
     41e:	4b 81       	ldd	r20, Y+3	; 0x03
     420:	5c 81       	ldd	r21, Y+4	; 0x04
     422:	c3 01       	movw	r24, r6
     424:	b2 01       	movw	r22, r4
     426:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     42a:	f8 01       	movw	r30, r16
     42c:	24 81       	ldd	r18, Z+4	; 0x04
     42e:	35 81       	ldd	r19, Z+5	; 0x05
     430:	46 81       	ldd	r20, Z+6	; 0x06
     432:	57 81       	ldd	r21, Z+7	; 0x07
     434:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     438:	2b 01       	movw	r4, r22
     43a:	3c 01       	movw	r6, r24
     43c:	2d 81       	ldd	r18, Y+5	; 0x05
     43e:	3e 81       	ldd	r19, Y+6	; 0x06
     440:	4f 81       	ldd	r20, Y+7	; 0x07
     442:	58 85       	ldd	r21, Y+8	; 0x08
     444:	c7 01       	movw	r24, r14
     446:	b6 01       	movw	r22, r12
     448:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     44c:	69 83       	std	Y+1, r22	; 0x01
     44e:	7a 83       	std	Y+2, r23	; 0x02
     450:	8b 83       	std	Y+3, r24	; 0x03
     452:	9c 83       	std	Y+4, r25	; 0x04
     454:	9b 01       	movw	r18, r22
     456:	ac 01       	movw	r20, r24
     458:	c3 01       	movw	r24, r6
     45a:	b2 01       	movw	r22, r4
     45c:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     460:	6b 01       	movw	r12, r22
     462:	7c 01       	movw	r14, r24
	
	temp2[0] = costheta*ref_vc[0] - ref_vw[0] + ref_vc[1]*sintheta;
     464:	2d 85       	ldd	r18, Y+13	; 0x0d
     466:	3e 85       	ldd	r19, Y+14	; 0x0e
     468:	4f 85       	ldd	r20, Y+15	; 0x0f
     46a:	58 89       	ldd	r21, Y+16	; 0x10
     46c:	69 85       	ldd	r22, Y+9	; 0x09
     46e:	7a 85       	ldd	r23, Y+10	; 0x0a
     470:	8b 85       	ldd	r24, Y+11	; 0x0b
     472:	9c 85       	ldd	r25, Y+12	; 0x0c
     474:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     478:	6d 83       	std	Y+5, r22	; 0x05
     47a:	7e 83       	std	Y+6, r23	; 0x06
     47c:	8f 83       	std	Y+7, r24	; 0x07
     47e:	98 87       	std	Y+8, r25	; 0x08
	temp2[1] = costheta*ref_vc[1] - ref_vw[1] - ref_vc[0]*sintheta;
     480:	29 81       	ldd	r18, Y+1	; 0x01
     482:	3a 81       	ldd	r19, Y+2	; 0x02
     484:	4b 81       	ldd	r20, Y+3	; 0x03
     486:	5c 81       	ldd	r21, Y+4	; 0x04
     488:	c3 01       	movw	r24, r6
     48a:	b2 01       	movw	r22, r4
     48c:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     490:	2b 01       	movw	r4, r22
     492:	3c 01       	movw	r6, r24
	
	float error1 = temp1[0]*temp1[0] +  temp1[1]*temp1[1];
     494:	a5 01       	movw	r20, r10
     496:	94 01       	movw	r18, r8
     498:	c5 01       	movw	r24, r10
     49a:	b4 01       	movw	r22, r8
     49c:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     4a0:	4b 01       	movw	r8, r22
     4a2:	5c 01       	movw	r10, r24
     4a4:	a7 01       	movw	r20, r14
     4a6:	96 01       	movw	r18, r12
     4a8:	c7 01       	movw	r24, r14
     4aa:	b6 01       	movw	r22, r12
     4ac:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     4b0:	9b 01       	movw	r18, r22
     4b2:	ac 01       	movw	r20, r24
     4b4:	c5 01       	movw	r24, r10
     4b6:	b4 01       	movw	r22, r8
     4b8:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     4bc:	6b 01       	movw	r12, r22
     4be:	7c 01       	movw	r14, r24
	float error2 = temp2[0]*temp2[0] +  temp2[1]*temp2[1];
     4c0:	2d 81       	ldd	r18, Y+5	; 0x05
     4c2:	3e 81       	ldd	r19, Y+6	; 0x06
     4c4:	4f 81       	ldd	r20, Y+7	; 0x07
     4c6:	58 85       	ldd	r21, Y+8	; 0x08
     4c8:	ca 01       	movw	r24, r20
     4ca:	b9 01       	movw	r22, r18
     4cc:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     4d0:	4b 01       	movw	r8, r22
     4d2:	5c 01       	movw	r10, r24
     4d4:	a3 01       	movw	r20, r6
     4d6:	92 01       	movw	r18, r4
     4d8:	c3 01       	movw	r24, r6
     4da:	b2 01       	movw	r22, r4
     4dc:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
     4e4:	c5 01       	movw	r24, r10
     4e6:	b4 01       	movw	r22, r8
     4e8:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     4ec:	9b 01       	movw	r18, r22
     4ee:	ac 01       	movw	r20, r24
	
	if (error1 < error2)
     4f0:	01 e0       	ldi	r16, 0x01	; 1
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	c7 01       	movw	r24, r14
     4f6:	b6 01       	movw	r22, r12
     4f8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     4fc:	88 23       	and	r24, r24
     4fe:	14 f0       	brlt	.+4      	; 0x504 <find_sign+0x198>
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	10 e0       	ldi	r17, 0x00	; 0
		return 1;
	else
		return 0;	
}
     504:	c8 01       	movw	r24, r16
     506:	60 96       	adiw	r28, 0x10	; 16
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	bf 90       	pop	r11
     524:	af 90       	pop	r10
     526:	9f 90       	pop	r9
     528:	8f 90       	pop	r8
     52a:	7f 90       	pop	r7
     52c:	6f 90       	pop	r6
     52e:	5f 90       	pop	r5
     530:	4f 90       	pop	r4
     532:	08 95       	ret

00000534 <PID_alpha>:
	
	PID_alpha(1, 0, 1);
	
}

void PID_alpha(float Kp, float Ki, float Kd){
     534:	4f 92       	push	r4
     536:	5f 92       	push	r5
     538:	6f 92       	push	r6
     53a:	7f 92       	push	r7
     53c:	8f 92       	push	r8
     53e:	9f 92       	push	r9
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	00 d0       	rcall	.+0      	; 0x552 <PID_alpha+0x1e>
     552:	00 d0       	rcall	.+0      	; 0x554 <PID_alpha+0x20>
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	6b 01       	movw	r12, r22
     55a:	7c 01       	movw	r14, r24
     55c:	29 83       	std	Y+1, r18	; 0x01
     55e:	3a 83       	std	Y+2, r19	; 0x02
     560:	4b 83       	std	Y+3, r20	; 0x03
     562:	5c 83       	std	Y+4, r21	; 0x04
	float gain = 0;
	diff = alpha - alpha_last;
     564:	40 90 6d 01 	lds	r4, 0x016D
     568:	50 90 6e 01 	lds	r5, 0x016E
     56c:	60 90 6f 01 	lds	r6, 0x016F
     570:	70 90 70 01 	lds	r7, 0x0170
     574:	20 91 24 01 	lds	r18, 0x0124
     578:	30 91 25 01 	lds	r19, 0x0125
     57c:	40 91 26 01 	lds	r20, 0x0126
     580:	50 91 27 01 	lds	r21, 0x0127
     584:	c3 01       	movw	r24, r6
     586:	b2 01       	movw	r22, r4
     588:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     58c:	60 93 68 01 	sts	0x0168, r22
     590:	70 93 69 01 	sts	0x0169, r23
     594:	80 93 6a 01 	sts	0x016A, r24
     598:	90 93 6b 01 	sts	0x016B, r25
	sum = sum + alpha;
     59c:	20 91 20 01 	lds	r18, 0x0120
     5a0:	30 91 21 01 	lds	r19, 0x0121
     5a4:	40 91 22 01 	lds	r20, 0x0122
     5a8:	50 91 23 01 	lds	r21, 0x0123
     5ac:	c3 01       	movw	r24, r6
     5ae:	b2 01       	movw	r22, r4
     5b0:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     5b4:	4b 01       	movw	r8, r22
     5b6:	5c 01       	movw	r10, r24
     5b8:	60 93 20 01 	sts	0x0120, r22
     5bc:	70 93 21 01 	sts	0x0121, r23
     5c0:	80 93 22 01 	sts	0x0122, r24
     5c4:	90 93 23 01 	sts	0x0123, r25
	gain = Kp * alpha + Ki * sum + Kp * alpha;
     5c8:	a7 01       	movw	r20, r14
     5ca:	96 01       	movw	r18, r12
     5cc:	c3 01       	movw	r24, r6
     5ce:	b2 01       	movw	r22, r4
     5d0:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     5d4:	6b 01       	movw	r12, r22
     5d6:	7c 01       	movw	r14, r24
     5d8:	29 81       	ldd	r18, Y+1	; 0x01
     5da:	3a 81       	ldd	r19, Y+2	; 0x02
     5dc:	4b 81       	ldd	r20, Y+3	; 0x03
     5de:	5c 81       	ldd	r21, Y+4	; 0x04
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     5f4:	9b 01       	movw	r18, r22
     5f6:	ac 01       	movw	r20, r24
     5f8:	c7 01       	movw	r24, r14
     5fa:	b6 01       	movw	r22, r12
     5fc:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     600:	6b 01       	movw	r12, r22
     602:	7c 01       	movw	r14, r24
	
	alpha_last = alpha;
     604:	40 92 24 01 	sts	0x0124, r4
     608:	50 92 25 01 	sts	0x0125, r5
     60c:	60 92 26 01 	sts	0x0126, r6
     610:	70 92 27 01 	sts	0x0127, r7
	
	if(gain>0){  // turn right
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	a9 01       	movw	r20, r18
     61a:	0e 94 86 13 	call	0x270c	; 0x270c <__gesf2>
     61e:	18 16       	cp	r1, r24
     620:	fc f4       	brge	.+62     	; 0x660 <PID_alpha+0x12c>
		m_usb_tx_string("turn right\n");
     622:	8f ed       	ldi	r24, 0xDF	; 223
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		OCR1C=250-abs(gain);
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
     632:	9b 01       	movw	r18, r22
     634:	77 23       	and	r23, r23
     636:	24 f4       	brge	.+8      	; 0x640 <PID_alpha+0x10c>
     638:	22 27       	eor	r18, r18
     63a:	33 27       	eor	r19, r19
     63c:	26 1b       	sub	r18, r22
     63e:	37 0b       	sbc	r19, r23
     640:	8a ef       	ldi	r24, 0xFA	; 250
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	ac 01       	movw	r20, r24
     646:	42 1b       	sub	r20, r18
     648:	53 0b       	sbc	r21, r19
     64a:	ec e8       	ldi	r30, 0x8C	; 140
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	51 83       	std	Z+1, r21	; 0x01
     650:	40 83       	st	Z, r20
		if (OCR1C < 0){
     652:	20 81       	ld	r18, Z
     654:	31 81       	ldd	r19, Z+1	; 0x01
			OCR1C = 0;
		}
		OCR1B=250;
     656:	90 93 8b 00 	sts	0x008B, r25
     65a:	80 93 8a 00 	sts	0x008A, r24
     65e:	1f c0       	rjmp	.+62     	; 0x69e <PID_alpha+0x16a>
	}
	else{		// turn left
		m_usb_tx_string("turn left\n");
     660:	84 ed       	ldi	r24, 0xD4	; 212
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		OCR1B=250-abs(gain);
     668:	c7 01       	movw	r24, r14
     66a:	b6 01       	movw	r22, r12
     66c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
     670:	9b 01       	movw	r18, r22
     672:	77 23       	and	r23, r23
     674:	24 f4       	brge	.+8      	; 0x67e <PID_alpha+0x14a>
     676:	22 27       	eor	r18, r18
     678:	33 27       	eor	r19, r19
     67a:	26 1b       	sub	r18, r22
     67c:	37 0b       	sbc	r19, r23
     67e:	8a ef       	ldi	r24, 0xFA	; 250
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	fc 01       	movw	r30, r24
     684:	e2 1b       	sub	r30, r18
     686:	f3 0b       	sbc	r31, r19
     688:	9f 01       	movw	r18, r30
     68a:	ea e8       	ldi	r30, 0x8A	; 138
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	31 83       	std	Z+1, r19	; 0x01
     690:	20 83       	st	Z, r18
		if (OCR1B < 0){
     692:	20 81       	ld	r18, Z
     694:	31 81       	ldd	r19, Z+1	; 0x01
			OCR1B = 0;
		}
		OCR1C=250;
     696:	90 93 8d 00 	sts	0x008D, r25
     69a:	80 93 8c 00 	sts	0x008C, r24
	}
}
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	9f 90       	pop	r9
     6b8:	8f 90       	pop	r8
     6ba:	7f 90       	pop	r7
     6bc:	6f 90       	pop	r6
     6be:	5f 90       	pop	r5
     6c0:	4f 90       	pop	r4
     6c2:	08 95       	ret

000006c4 <cal_angle>:
		return 1;
	else
		return 0;	
}

void cal_angle(int if_pos_sign, float sintheta, float costheta){
     6c4:	2f 92       	push	r2
     6c6:	3f 92       	push	r3
     6c8:	4f 92       	push	r4
     6ca:	5f 92       	push	r5
     6cc:	6f 92       	push	r6
     6ce:	7f 92       	push	r7
     6d0:	8f 92       	push	r8
     6d2:	9f 92       	push	r9
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	28 97       	sbiw	r28, 0x08	; 8
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	1c 01       	movw	r2, r24
     6fa:	49 83       	std	Y+1, r20	; 0x01
     6fc:	5a 83       	std	Y+2, r21	; 0x02
     6fe:	6b 83       	std	Y+3, r22	; 0x03
     700:	7c 83       	std	Y+4, r23	; 0x04
     702:	0d 83       	std	Y+5, r16	; 0x05
     704:	1e 83       	std	Y+6, r17	; 0x06
     706:	2f 83       	std	Y+7, r18	; 0x07
     708:	38 87       	std	Y+8, r19	; 0x08
	float c2g[2] = {0, 0};
	c2g[0] = goal[0] - c_wii[0];
     70a:	60 91 00 01 	lds	r22, 0x0100
     70e:	70 91 01 01 	lds	r23, 0x0101
     712:	88 27       	eor	r24, r24
     714:	77 fd       	sbrc	r23, 7
     716:	80 95       	com	r24
     718:	98 2f       	mov	r25, r24
     71a:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     71e:	20 91 40 01 	lds	r18, 0x0140
     722:	30 91 41 01 	lds	r19, 0x0141
     726:	40 91 42 01 	lds	r20, 0x0142
     72a:	50 91 43 01 	lds	r21, 0x0143
     72e:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     732:	4b 01       	movw	r8, r22
     734:	5c 01       	movw	r10, r24
	c2g[1] = goal[1] - c_wii[1];
     736:	60 91 02 01 	lds	r22, 0x0102
     73a:	70 91 03 01 	lds	r23, 0x0103
     73e:	88 27       	eor	r24, r24
     740:	77 fd       	sbrc	r23, 7
     742:	80 95       	com	r24
     744:	98 2f       	mov	r25, r24
     746:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     74a:	20 91 44 01 	lds	r18, 0x0144
     74e:	30 91 45 01 	lds	r19, 0x0145
     752:	40 91 46 01 	lds	r20, 0x0146
     756:	50 91 47 01 	lds	r21, 0x0147
     75a:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
	
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
     762:	a5 01       	movw	r20, r10
     764:	94 01       	movw	r18, r8
     766:	c5 01       	movw	r24, r10
     768:	b4 01       	movw	r22, r8
     76a:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     76e:	2b 01       	movw	r4, r22
     770:	3c 01       	movw	r6, r24
     772:	a7 01       	movw	r20, r14
     774:	96 01       	movw	r18, r12
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	c3 01       	movw	r24, r6
     784:	b2 01       	movw	r22, r4
     786:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
	c2g[0] = c2g[0] / sqrt(norm);
     78a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <sqrt>
     78e:	2b 01       	movw	r4, r22
     790:	3c 01       	movw	r6, r24
     792:	9b 01       	movw	r18, r22
     794:	ac 01       	movw	r20, r24
     796:	c5 01       	movw	r24, r10
     798:	b4 01       	movw	r22, r8
     79a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
     79e:	4b 01       	movw	r8, r22
     7a0:	5c 01       	movw	r10, r24
	c2g[1] = c2g[1] / sqrt(norm);
     7a2:	a3 01       	movw	r20, r6
     7a4:	92 01       	movw	r18, r4
     7a6:	c7 01       	movw	r24, r14
     7a8:	b6 01       	movw	r22, r12
     7aa:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
     7ae:	6b 01       	movw	r12, r22
     7b0:	7c 01       	movw	r14, r24
	
	float cos_alpha = c2g[0] * ypdir[0] + c2g[1] * ypdir[1];
     7b2:	20 91 38 01 	lds	r18, 0x0138
     7b6:	30 91 39 01 	lds	r19, 0x0139
     7ba:	40 91 3a 01 	lds	r20, 0x013A
     7be:	50 91 3b 01 	lds	r21, 0x013B
     7c2:	c5 01       	movw	r24, r10
     7c4:	b4 01       	movw	r22, r8
     7c6:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     7ca:	2b 01       	movw	r4, r22
     7cc:	3c 01       	movw	r6, r24
     7ce:	20 91 3c 01 	lds	r18, 0x013C
     7d2:	30 91 3d 01 	lds	r19, 0x013D
     7d6:	40 91 3e 01 	lds	r20, 0x013E
     7da:	50 91 3f 01 	lds	r21, 0x013F
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	c3 01       	movw	r24, r6
     7ec:	b2 01       	movw	r22, r4
     7ee:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
	alpha = acos(cos_alpha);
     7f2:	0e 94 84 11 	call	0x2308	; 0x2308 <acos>
     7f6:	2b 01       	movw	r4, r22
     7f8:	3c 01       	movw	r6, r24
	float c2g_wx;
	if(if_pos_sign == 1){
     7fa:	2a 94       	dec	r2
     7fc:	23 28       	or	r2, r3
     7fe:	c9 f4       	brne	.+50     	; 0x832 <cal_angle+0x16e>
		c2g_wx = costheta*c2g[0] + sintheta*c2g[1];
     800:	2d 81       	ldd	r18, Y+5	; 0x05
     802:	3e 81       	ldd	r19, Y+6	; 0x06
     804:	4f 81       	ldd	r20, Y+7	; 0x07
     806:	58 85       	ldd	r21, Y+8	; 0x08
     808:	c5 01       	movw	r24, r10
     80a:	b4 01       	movw	r22, r8
     80c:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     810:	4b 01       	movw	r8, r22
     812:	5c 01       	movw	r10, r24
     814:	29 81       	ldd	r18, Y+1	; 0x01
     816:	3a 81       	ldd	r19, Y+2	; 0x02
     818:	4b 81       	ldd	r20, Y+3	; 0x03
     81a:	5c 81       	ldd	r21, Y+4	; 0x04
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     824:	9b 01       	movw	r18, r22
     826:	ac 01       	movw	r20, r24
     828:	c5 01       	movw	r24, r10
     82a:	b4 01       	movw	r22, r8
     82c:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     830:	18 c0       	rjmp	.+48     	; 0x862 <cal_angle+0x19e>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];		
     832:	2d 81       	ldd	r18, Y+5	; 0x05
     834:	3e 81       	ldd	r19, Y+6	; 0x06
     836:	4f 81       	ldd	r20, Y+7	; 0x07
     838:	58 85       	ldd	r21, Y+8	; 0x08
     83a:	c5 01       	movw	r24, r10
     83c:	b4 01       	movw	r22, r8
     83e:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     842:	4b 01       	movw	r8, r22
     844:	5c 01       	movw	r10, r24
     846:	29 81       	ldd	r18, Y+1	; 0x01
     848:	3a 81       	ldd	r19, Y+2	; 0x02
     84a:	4b 81       	ldd	r20, Y+3	; 0x03
     84c:	5c 81       	ldd	r21, Y+4	; 0x04
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	c5 01       	movw	r24, r10
     85c:	b4 01       	movw	r22, r8
     85e:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
	}
	if (c2g_wx < 0){
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	a9 01       	movw	r20, r18
     868:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     86c:	88 23       	and	r24, r24
     86e:	4c f0       	brlt	.+18     	; 0x882 <cal_angle+0x1be>
	float norm = c2g[0]*c2g[0] + c2g[1]*c2g[1];
	c2g[0] = c2g[0] / sqrt(norm);
	c2g[1] = c2g[1] / sqrt(norm);
	
	float cos_alpha = c2g[0] * ypdir[0] + c2g[1] * ypdir[1];
	alpha = acos(cos_alpha);
     870:	40 92 6d 01 	sts	0x016D, r4
     874:	50 92 6e 01 	sts	0x016E, r5
     878:	60 92 6f 01 	sts	0x016F, r6
     87c:	70 92 70 01 	sts	0x0170, r7
     880:	0c c0       	rjmp	.+24     	; 0x89a <cal_angle+0x1d6>
	}
	else{
		c2g_wx = costheta*c2g[0] - sintheta*c2g[1];		
	}
	if (c2g_wx < 0){
		alpha = - alpha;
     882:	77 fa       	bst	r7, 7
     884:	70 94       	com	r7
     886:	77 f8       	bld	r7, 7
     888:	70 94       	com	r7
     88a:	40 92 6d 01 	sts	0x016D, r4
     88e:	50 92 6e 01 	sts	0x016E, r5
     892:	60 92 6f 01 	sts	0x016F, r6
     896:	70 92 70 01 	sts	0x0170, r7
	}
	m_usb_tx_string("alpha: ");
     89a:	8d ee       	ldi	r24, 0xED	; 237
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	m_usb_tx_int(alpha*10); // multiply X10
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e2       	ldi	r20, 0x20	; 32
     8a8:	51 e4       	ldi	r21, 0x41	; 65
     8aa:	60 91 6d 01 	lds	r22, 0x016D
     8ae:	70 91 6e 01 	lds	r23, 0x016E
     8b2:	80 91 6f 01 	lds	r24, 0x016F
     8b6:	90 91 70 01 	lds	r25, 0x0170
     8ba:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     8be:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
     8c2:	cb 01       	movw	r24, r22
     8c4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
	m_usb_tx_string("\n");
     8c8:	8b ee       	ldi	r24, 0xEB	; 235
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	
	PID_alpha(1, 0, 1);
     8d0:	e1 2c       	mov	r14, r1
     8d2:	f1 2c       	mov	r15, r1
     8d4:	00 e8       	ldi	r16, 0x80	; 128
     8d6:	1f e3       	ldi	r17, 0x3F	; 63
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	c8 01       	movw	r24, r16
     8e0:	b7 01       	movw	r22, r14
     8e2:	0e 94 9a 02 	call	0x534	; 0x534 <PID_alpha>
	
}
     8e6:	28 96       	adiw	r28, 0x08	; 8
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	3f 90       	pop	r3
     914:	2f 90       	pop	r2
     916:	08 95       	ret

00000918 <find_if_reach>:
		}
		OCR1C=250;
	}
}

int find_if_reach(float x, float y){
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	4b 01       	movw	r8, r22
     92e:	5c 01       	movw	r10, r24
     930:	69 01       	movw	r12, r18
     932:	7a 01       	movw	r14, r20
	int t = 100;
	float dist = (x - goal[0]) * (x - goal[0]) + (y - goal[1]) * (y - goal[1]);
     934:	60 91 00 01 	lds	r22, 0x0100
     938:	70 91 01 01 	lds	r23, 0x0101
     93c:	88 27       	eor	r24, r24
     93e:	77 fd       	sbrc	r23, 7
     940:	80 95       	com	r24
     942:	98 2f       	mov	r25, r24
     944:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	c5 01       	movw	r24, r10
     94e:	b4 01       	movw	r22, r8
     950:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     954:	4b 01       	movw	r8, r22
     956:	5c 01       	movw	r10, r24
     958:	60 91 02 01 	lds	r22, 0x0102
     95c:	70 91 03 01 	lds	r23, 0x0103
     960:	88 27       	eor	r24, r24
     962:	77 fd       	sbrc	r23, 7
     964:	80 95       	com	r24
     966:	98 2f       	mov	r25, r24
     968:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
     974:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     978:	6b 01       	movw	r12, r22
     97a:	7c 01       	movw	r14, r24
     97c:	a5 01       	movw	r20, r10
     97e:	94 01       	movw	r18, r8
     980:	c5 01       	movw	r24, r10
     982:	b4 01       	movw	r22, r8
     984:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     988:	4b 01       	movw	r8, r22
     98a:	5c 01       	movw	r10, r24
     98c:	a7 01       	movw	r20, r14
     98e:	96 01       	movw	r18, r12
     990:	c7 01       	movw	r24, r14
     992:	b6 01       	movw	r22, r12
     994:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     998:	9b 01       	movw	r18, r22
     99a:	ac 01       	movw	r20, r24
     99c:	c5 01       	movw	r24, r10
     99e:	b4 01       	movw	r22, r8
     9a0:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
	if (dist < t){
     9a4:	c1 e0       	ldi	r28, 0x01	; 1
     9a6:	d0 e0       	ldi	r29, 0x00	; 0
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	48 ec       	ldi	r20, 0xC8	; 200
     9ae:	52 e4       	ldi	r21, 0x42	; 66
     9b0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     9b4:	88 23       	and	r24, r24
     9b6:	14 f0       	brlt	.+4      	; 0x9bc <find_if_reach+0xa4>
     9b8:	c0 e0       	ldi	r28, 0x00	; 0
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
	}
	else
		return 0;
     9bc:	ce 01       	movw	r24, r28
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	08 95       	ret

000009d4 <localization>:
	m_usb_tx_int(sum/100);
	m_usb_tx_string("\n");
	m_green(OFF);
}

void localization(void){
     9d4:	2f 92       	push	r2
     9d6:	3f 92       	push	r3
     9d8:	4f 92       	push	r4
     9da:	5f 92       	push	r5
     9dc:	6f 92       	push	r6
     9de:	7f 92       	push	r7
     9e0:	8f 92       	push	r8
     9e2:	9f 92       	push	r9
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	cc 57       	subi	r28, 0x7C	; 124
     9fe:	d1 09       	sbc	r29, r1
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	m_green(ON);
     a0a:	6a 9a       	sbi	0x0d, 2	; 13
     a0c:	72 98       	cbi	0x0e, 2	; 14
	//unsigned int data[8] = {740, 272, 777, 282, 715, 311, 755, 356};
	//float x[4] = {data[0], data[2], data[4], data[6]};
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
     a0e:	60 91 48 01 	lds	r22, 0x0148
     a12:	70 91 49 01 	lds	r23, 0x0149
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     a1e:	69 83       	std	Y+1, r22	; 0x01
     a20:	7a 83       	std	Y+2, r23	; 0x02
     a22:	8b 83       	std	Y+3, r24	; 0x03
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	60 91 4e 01 	lds	r22, 0x014E
     a2a:	70 91 4f 01 	lds	r23, 0x014F
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     a36:	6d 83       	std	Y+5, r22	; 0x05
     a38:	7e 83       	std	Y+6, r23	; 0x06
     a3a:	8f 83       	std	Y+7, r24	; 0x07
     a3c:	98 87       	std	Y+8, r25	; 0x08
     a3e:	60 91 54 01 	lds	r22, 0x0154
     a42:	70 91 55 01 	lds	r23, 0x0155
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     a4e:	69 87       	std	Y+9, r22	; 0x09
     a50:	7a 87       	std	Y+10, r23	; 0x0a
     a52:	8b 87       	std	Y+11, r24	; 0x0b
     a54:	9c 87       	std	Y+12, r25	; 0x0c
     a56:	60 91 5a 01 	lds	r22, 0x015A
     a5a:	70 91 5b 01 	lds	r23, 0x015B
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     a66:	6d 87       	std	Y+13, r22	; 0x0d
     a68:	7e 87       	std	Y+14, r23	; 0x0e
     a6a:	8f 87       	std	Y+15, r24	; 0x0f
     a6c:	98 8b       	std	Y+16, r25	; 0x10
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
     a6e:	60 91 4a 01 	lds	r22, 0x014A
     a72:	70 91 4b 01 	lds	r23, 0x014B
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     a7e:	69 8b       	std	Y+17, r22	; 0x11
     a80:	7a 8b       	std	Y+18, r23	; 0x12
     a82:	8b 8b       	std	Y+19, r24	; 0x13
     a84:	9c 8b       	std	Y+20, r25	; 0x14
     a86:	60 91 50 01 	lds	r22, 0x0150
     a8a:	70 91 51 01 	lds	r23, 0x0151
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     a96:	6d 8b       	std	Y+21, r22	; 0x15
     a98:	7e 8b       	std	Y+22, r23	; 0x16
     a9a:	8f 8b       	std	Y+23, r24	; 0x17
     a9c:	98 8f       	std	Y+24, r25	; 0x18
     a9e:	60 91 56 01 	lds	r22, 0x0156
     aa2:	70 91 57 01 	lds	r23, 0x0157
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     aae:	69 8f       	std	Y+25, r22	; 0x19
     ab0:	7a 8f       	std	Y+26, r23	; 0x1a
     ab2:	8b 8f       	std	Y+27, r24	; 0x1b
     ab4:	9c 8f       	std	Y+28, r25	; 0x1c
     ab6:	60 91 5c 01 	lds	r22, 0x015C
     aba:	70 91 5d 01 	lds	r23, 0x015D
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 94 12 	call	0x2528	; 0x2528 <__floatunsisf>
     ac6:	6d 8f       	std	Y+29, r22	; 0x1d
     ac8:	7e 8f       	std	Y+30, r23	; 0x1e
     aca:	8f 8f       	std	Y+31, r24	; 0x1f
     acc:	98 a3       	std	Y+32, r25	; 0x20
     ace:	9e 01       	movw	r18, r28
     ad0:	2f 5f       	subi	r18, 0xFF	; 255
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	e9 96       	adiw	r28, 0x39	; 57
     ad6:	3f af       	std	Y+63, r19	; 0x3f
     ad8:	2e af       	std	Y+62, r18	; 0x3e
     ada:	e9 97       	sbiw	r28, 0x39	; 57
     adc:	ce 01       	movw	r24, r28
     ade:	41 96       	adiw	r24, 0x11	; 17
     ae0:	e3 96       	adiw	r28, 0x33	; 51
     ae2:	9f af       	std	Y+63, r25	; 0x3f
     ae4:	8e af       	std	Y+62, r24	; 0x3e
     ae6:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
     ae8:	ab 96       	adiw	r28, 0x2b	; 43
     aea:	1f ae       	std	Y+63, r1	; 0x3f
     aec:	1e ae       	std	Y+62, r1	; 0x3e
     aee:	ab 97       	sbiw	r28, 0x2b	; 43
	//float y[4] = {data[1], data[3], data[5], data[7]};
	float x[4] = {blobs[0], blobs[3], blobs[6], blobs[9]};
	float y[4] = {blobs[1], blobs[4], blobs[7], blobs[10]};
	float d[6];
	int from[6], to[6];
	int ind = 0;
     af0:	e7 96       	adiw	r28, 0x37	; 55
     af2:	1f ae       	std	Y+63, r1	; 0x3f
     af4:	1e ae       	std	Y+62, r1	; 0x3e
     af6:	e7 97       	sbiw	r28, 0x37	; 55
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     af8:	ab 96       	adiw	r28, 0x2b	; 43
     afa:	ae ad       	ldd	r26, Y+62	; 0x3e
     afc:	bf ad       	ldd	r27, Y+63	; 0x3f
     afe:	ab 97       	sbiw	r28, 0x2b	; 43
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	e5 96       	adiw	r28, 0x35	; 53
     b04:	bf af       	std	Y+63, r27	; 0x3f
     b06:	ae af       	std	Y+62, r26	; 0x3e
     b08:	e5 97       	sbiw	r28, 0x35	; 53
     b0a:	14 97       	sbiw	r26, 0x04	; 4
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <__stack+0x11>
     b0e:	ba c6       	rjmp	.+3444   	; 0x1884 <__stack+0xd85>
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
     b10:	e9 96       	adiw	r28, 0x39	; 57
     b12:	ee ad       	ldd	r30, Y+62	; 0x3e
     b14:	ff ad       	ldd	r31, Y+63	; 0x3f
     b16:	e9 97       	sbiw	r28, 0x39	; 57
     b18:	81 90       	ld	r8, Z+
     b1a:	91 90       	ld	r9, Z+
     b1c:	a1 90       	ld	r10, Z+
     b1e:	b1 90       	ld	r11, Z+
     b20:	e7 96       	adiw	r28, 0x37	; 55
     b22:	8e ad       	ldd	r24, Y+62	; 0x3e
     b24:	9f ad       	ldd	r25, Y+63	; 0x3f
     b26:	e7 97       	sbiw	r28, 0x37	; 55
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	29 e3       	ldi	r18, 0x39	; 57
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	2c 0f       	add	r18, r28
     b32:	3d 1f       	adc	r19, r29
     b34:	28 0f       	add	r18, r24
     b36:	39 1f       	adc	r19, r25
     b38:	a3 96       	adiw	r28, 0x23	; 35
     b3a:	3f af       	std	Y+63, r19	; 0x3f
     b3c:	2e af       	std	Y+62, r18	; 0x3e
     b3e:	a3 97       	sbiw	r28, 0x23	; 35
     b40:	a5 e4       	ldi	r26, 0x45	; 69
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	ac 0f       	add	r26, r28
     b46:	bd 1f       	adc	r27, r29
     b48:	a8 0f       	add	r26, r24
     b4a:	b9 1f       	adc	r27, r25
     b4c:	a7 96       	adiw	r28, 0x27	; 39
     b4e:	bf af       	std	Y+63, r27	; 0x3f
     b50:	ae af       	std	Y+62, r26	; 0x3e
     b52:	a7 97       	sbiw	r28, 0x27	; 39
     b54:	e7 96       	adiw	r28, 0x37	; 55
     b56:	8e ad       	ldd	r24, Y+62	; 0x3e
     b58:	9f ad       	ldd	r25, Y+63	; 0x3f
     b5a:	e7 97       	sbiw	r28, 0x37	; 55
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	0f 2e       	mov	r0, r31
     b66:	f1 e2       	ldi	r31, 0x21	; 33
     b68:	6f 2e       	mov	r6, r31
     b6a:	71 2c       	mov	r7, r1
     b6c:	f0 2d       	mov	r31, r0
     b6e:	6c 0e       	add	r6, r28
     b70:	7d 1e       	adc	r7, r29
     b72:	68 0e       	add	r6, r24
     b74:	79 1e       	adc	r7, r25
     b76:	e3 96       	adiw	r28, 0x33	; 51
     b78:	2e ad       	ldd	r18, Y+62	; 0x3e
     b7a:	3f ad       	ldd	r19, Y+63	; 0x3f
     b7c:	e3 97       	sbiw	r28, 0x33	; 51
     b7e:	2c 5f       	subi	r18, 0xFC	; 252
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	1f 01       	movw	r2, r30
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     b84:	e5 96       	adiw	r28, 0x35	; 53
     b86:	0e ad       	ldd	r16, Y+62	; 0x3e
     b88:	1f ad       	ldd	r17, Y+63	; 0x3f
     b8a:	e5 97       	sbiw	r28, 0x35	; 53
     b8c:	e1 96       	adiw	r28, 0x31	; 49
     b8e:	8c ae       	std	Y+60, r8	; 0x3c
     b90:	9d ae       	std	Y+61, r9	; 0x3d
     b92:	ae ae       	std	Y+62, r10	; 0x3e
     b94:	bf ae       	std	Y+63, r11	; 0x3f
     b96:	e1 97       	sbiw	r28, 0x31	; 49
     b98:	59 01       	movw	r10, r18
     b9a:	43 01       	movw	r8, r6
			if(x[i] != 1023 && y[i] != 1023 && x[j] != 1023 && y[j] != 1023)
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 ec       	ldi	r19, 0xC0	; 192
     ba0:	4f e7       	ldi	r20, 0x7F	; 127
     ba2:	54 e4       	ldi	r21, 0x44	; 68
     ba4:	e1 96       	adiw	r28, 0x31	; 49
     ba6:	6c ad       	ldd	r22, Y+60	; 0x3c
     ba8:	7d ad       	ldd	r23, Y+61	; 0x3d
     baa:	8e ad       	ldd	r24, Y+62	; 0x3e
     bac:	9f ad       	ldd	r25, Y+63	; 0x3f
     bae:	e1 97       	sbiw	r28, 0x31	; 49
     bb0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	09 f4       	brne	.+2      	; 0xbba <__stack+0xbb>
     bb8:	6c c0       	rjmp	.+216    	; 0xc92 <__stack+0x193>
     bba:	e3 96       	adiw	r28, 0x33	; 51
     bbc:	ae ad       	ldd	r26, Y+62	; 0x3e
     bbe:	bf ad       	ldd	r27, Y+63	; 0x3f
     bc0:	e3 97       	sbiw	r28, 0x33	; 51
     bc2:	cd 90       	ld	r12, X+
     bc4:	dd 90       	ld	r13, X+
     bc6:	ed 90       	ld	r14, X+
     bc8:	fc 90       	ld	r15, X
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 ec       	ldi	r19, 0xC0	; 192
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	54 e4       	ldi	r21, 0x44	; 68
     bd2:	c7 01       	movw	r24, r14
     bd4:	b6 01       	movw	r22, r12
     bd6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     bda:	88 23       	and	r24, r24
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <__stack+0xe1>
     bde:	59 c0       	rjmp	.+178    	; 0xc92 <__stack+0x193>
     be0:	f1 01       	movw	r30, r2
     be2:	40 80       	ld	r4, Z
     be4:	51 80       	ldd	r5, Z+1	; 0x01
     be6:	62 80       	ldd	r6, Z+2	; 0x02
     be8:	73 80       	ldd	r7, Z+3	; 0x03
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 ec       	ldi	r19, 0xC0	; 192
     bee:	4f e7       	ldi	r20, 0x7F	; 127
     bf0:	54 e4       	ldi	r21, 0x44	; 68
     bf2:	c3 01       	movw	r24, r6
     bf4:	b2 01       	movw	r22, r4
     bf6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     bfa:	88 23       	and	r24, r24
     bfc:	09 f4       	brne	.+2      	; 0xc00 <__stack+0x101>
     bfe:	49 c0       	rjmp	.+146    	; 0xc92 <__stack+0x193>
     c00:	d5 01       	movw	r26, r10
     c02:	8d 91       	ld	r24, X+
     c04:	9d 91       	ld	r25, X+
     c06:	0d 90       	ld	r0, X+
     c08:	bc 91       	ld	r27, X
     c0a:	a0 2d       	mov	r26, r0
     c0c:	ed 96       	adiw	r28, 0x3d	; 61
     c0e:	8c af       	std	Y+60, r24	; 0x3c
     c10:	9d af       	std	Y+61, r25	; 0x3d
     c12:	ae af       	std	Y+62, r26	; 0x3e
     c14:	bf af       	std	Y+63, r27	; 0x3f
     c16:	ed 97       	sbiw	r28, 0x3d	; 61
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 ec       	ldi	r19, 0xC0	; 192
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	54 e4       	ldi	r21, 0x44	; 68
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     c28:	88 23       	and	r24, r24
     c2a:	99 f1       	breq	.+102    	; 0xc92 <__stack+0x193>
			d[ind] = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));
     c2c:	a3 01       	movw	r20, r6
     c2e:	92 01       	movw	r18, r4
     c30:	e1 96       	adiw	r28, 0x31	; 49
     c32:	6c ad       	ldd	r22, Y+60	; 0x3c
     c34:	7d ad       	ldd	r23, Y+61	; 0x3d
     c36:	8e ad       	ldd	r24, Y+62	; 0x3e
     c38:	9f ad       	ldd	r25, Y+63	; 0x3f
     c3a:	e1 97       	sbiw	r28, 0x31	; 49
     c3c:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     c40:	2b 01       	movw	r4, r22
     c42:	3c 01       	movw	r6, r24
     c44:	ed 96       	adiw	r28, 0x3d	; 61
     c46:	2c ad       	ldd	r18, Y+60	; 0x3c
     c48:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4a:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4c:	5f ad       	ldd	r21, Y+63	; 0x3f
     c4e:	ed 97       	sbiw	r28, 0x3d	; 61
     c50:	c7 01       	movw	r24, r14
     c52:	b6 01       	movw	r22, r12
     c54:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     c58:	6b 01       	movw	r12, r22
     c5a:	7c 01       	movw	r14, r24
     c5c:	a3 01       	movw	r20, r6
     c5e:	92 01       	movw	r18, r4
     c60:	c3 01       	movw	r24, r6
     c62:	b2 01       	movw	r22, r4
     c64:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     c68:	2b 01       	movw	r4, r22
     c6a:	3c 01       	movw	r6, r24
     c6c:	a7 01       	movw	r20, r14
     c6e:	96 01       	movw	r18, r12
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	c3 01       	movw	r24, r6
     c7e:	b2 01       	movw	r22, r4
     c80:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
     c84:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <sqrt>
     c88:	f4 01       	movw	r30, r8
     c8a:	60 83       	st	Z, r22
     c8c:	71 83       	std	Z+1, r23	; 0x01
     c8e:	82 83       	std	Z+2, r24	; 0x02
     c90:	93 83       	std	Z+3, r25	; 0x03
			from[ind] = i;
     c92:	a3 96       	adiw	r28, 0x23	; 35
     c94:	ae ad       	ldd	r26, Y+62	; 0x3e
     c96:	bf ad       	ldd	r27, Y+63	; 0x3f
     c98:	a3 97       	sbiw	r28, 0x23	; 35
     c9a:	ab 96       	adiw	r28, 0x2b	; 43
     c9c:	ee ad       	ldd	r30, Y+62	; 0x3e
     c9e:	ff ad       	ldd	r31, Y+63	; 0x3f
     ca0:	ab 97       	sbiw	r28, 0x2b	; 43
     ca2:	ed 93       	st	X+, r30
     ca4:	fd 93       	st	X+, r31
     ca6:	a3 96       	adiw	r28, 0x23	; 35
     ca8:	bf af       	std	Y+63, r27	; 0x3f
     caa:	ae af       	std	Y+62, r26	; 0x3e
     cac:	a3 97       	sbiw	r28, 0x23	; 35
			to[ind] = j;
     cae:	a7 96       	adiw	r28, 0x27	; 39
     cb0:	ae ad       	ldd	r26, Y+62	; 0x3e
     cb2:	bf ad       	ldd	r27, Y+63	; 0x3f
     cb4:	a7 97       	sbiw	r28, 0x27	; 39
     cb6:	0d 93       	st	X+, r16
     cb8:	1d 93       	st	X+, r17
     cba:	a7 96       	adiw	r28, 0x27	; 39
     cbc:	bf af       	std	Y+63, r27	; 0x3f
     cbe:	ae af       	std	Y+62, r26	; 0x3e
     cc0:	a7 97       	sbiw	r28, 0x27	; 39
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
		for (j=i+1; j<4; j++){
     cc2:	0f 5f       	subi	r16, 0xFF	; 255
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	b4 e0       	ldi	r27, 0x04	; 4
     cc8:	2b 0e       	add	r2, r27
     cca:	31 1c       	adc	r3, r1
     ccc:	e4 e0       	ldi	r30, 0x04	; 4
     cce:	ae 0e       	add	r10, r30
     cd0:	b1 1c       	adc	r11, r1
     cd2:	f4 e0       	ldi	r31, 0x04	; 4
     cd4:	8f 0e       	add	r8, r31
     cd6:	91 1c       	adc	r9, r1
     cd8:	04 30       	cpi	r16, 0x04	; 4
     cda:	11 05       	cpc	r17, r1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <__stack+0x1e1>
     cde:	5e cf       	rjmp	.-324    	; 0xb9c <__stack+0x9d>
     ce0:	e7 96       	adiw	r28, 0x37	; 55
     ce2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ce4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ce6:	e7 97       	sbiw	r28, 0x37	; 55
     ce8:	e5 96       	adiw	r28, 0x35	; 53
     cea:	2e ad       	ldd	r18, Y+62	; 0x3e
     cec:	3f ad       	ldd	r19, Y+63	; 0x3f
     cee:	e5 97       	sbiw	r28, 0x35	; 53
     cf0:	82 1b       	sub	r24, r18
     cf2:	93 0b       	sbc	r25, r19
     cf4:	dc 01       	movw	r26, r24
     cf6:	14 96       	adiw	r26, 0x04	; 4
     cf8:	e7 96       	adiw	r28, 0x37	; 55
     cfa:	bf af       	std	Y+63, r27	; 0x3f
     cfc:	ae af       	std	Y+62, r26	; 0x3e
     cfe:	e7 97       	sbiw	r28, 0x37	; 55
     d00:	e9 96       	adiw	r28, 0x39	; 57
     d02:	ee ad       	ldd	r30, Y+62	; 0x3e
     d04:	ff ad       	ldd	r31, Y+63	; 0x3f
     d06:	e9 97       	sbiw	r28, 0x39	; 57
     d08:	34 96       	adiw	r30, 0x04	; 4
     d0a:	e9 96       	adiw	r28, 0x39	; 57
     d0c:	ff af       	std	Y+63, r31	; 0x3f
     d0e:	ee af       	std	Y+62, r30	; 0x3e
     d10:	e9 97       	sbiw	r28, 0x39	; 57
     d12:	e3 96       	adiw	r28, 0x33	; 51
     d14:	2e ad       	ldd	r18, Y+62	; 0x3e
     d16:	3f ad       	ldd	r19, Y+63	; 0x3f
     d18:	e3 97       	sbiw	r28, 0x33	; 51
     d1a:	2c 5f       	subi	r18, 0xFC	; 252
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	e3 96       	adiw	r28, 0x33	; 51
     d20:	3f af       	std	Y+63, r19	; 0x3f
     d22:	2e af       	std	Y+62, r18	; 0x3e
     d24:	e3 97       	sbiw	r28, 0x33	; 51
	float d[6];
	int from[6], to[6];
	int ind = 0;
	int i, j;
	
	for (i=0; i<3; i++){
     d26:	e5 96       	adiw	r28, 0x35	; 53
     d28:	8e ad       	ldd	r24, Y+62	; 0x3e
     d2a:	9f ad       	ldd	r25, Y+63	; 0x3f
     d2c:	e5 97       	sbiw	r28, 0x35	; 53
     d2e:	03 97       	sbiw	r24, 0x03	; 3
     d30:	49 f0       	breq	.+18     	; 0xd44 <__stack+0x245>
     d32:	e5 96       	adiw	r28, 0x35	; 53
     d34:	ae ad       	ldd	r26, Y+62	; 0x3e
     d36:	bf ad       	ldd	r27, Y+63	; 0x3f
     d38:	e5 97       	sbiw	r28, 0x35	; 53
     d3a:	ab 96       	adiw	r28, 0x2b	; 43
     d3c:	bf af       	std	Y+63, r27	; 0x3f
     d3e:	ae af       	std	Y+62, r26	; 0x3e
     d40:	ab 97       	sbiw	r28, 0x2b	; 43
     d42:	da ce       	rjmp	.-588    	; 0xaf8 <localization+0x124>
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
     d44:	e7 96       	adiw	r28, 0x37	; 55
     d46:	ee ad       	ldd	r30, Y+62	; 0x3e
     d48:	ff ad       	ldd	r31, Y+63	; 0x3f
     d4a:	e7 97       	sbiw	r28, 0x37	; 55
     d4c:	1e 16       	cp	r1, r30
     d4e:	1f 06       	cpc	r1, r31
     d50:	7c f5       	brge	.+94     	; 0xdb0 <__stack+0x2b1>
     d52:	7e 01       	movw	r14, r28
     d54:	f1 e2       	ldi	r31, 0x21	; 33
     d56:	ef 0e       	add	r14, r31
     d58:	f1 1c       	adc	r15, r1
     d5a:	81 2c       	mov	r8, r1
     d5c:	91 2c       	mov	r9, r1
     d5e:	c1 2c       	mov	r12, r1
     d60:	d1 2c       	mov	r13, r1
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	10 e0       	ldi	r17, 0x00	; 0
     d66:	e7 96       	adiw	r28, 0x37	; 55
     d68:	ae ac       	ldd	r10, Y+62	; 0x3e
     d6a:	bf ac       	ldd	r11, Y+63	; 0x3f
     d6c:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] > dmax){
     d6e:	d7 01       	movw	r26, r14
     d70:	4d 90       	ld	r4, X+
     d72:	5d 90       	ld	r5, X+
     d74:	6d 90       	ld	r6, X+
     d76:	7d 90       	ld	r7, X+
     d78:	7d 01       	movw	r14, r26
     d7a:	b6 01       	movw	r22, r12
     d7c:	88 27       	eor	r24, r24
     d7e:	77 fd       	sbrc	r23, 7
     d80:	80 95       	com	r24
     d82:	98 2f       	mov	r25, r24
     d84:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     d88:	9b 01       	movw	r18, r22
     d8a:	ac 01       	movw	r20, r24
     d8c:	c3 01       	movw	r24, r6
     d8e:	b2 01       	movw	r22, r4
     d90:	0e 94 86 13 	call	0x270c	; 0x270c <__gesf2>
     d94:	18 16       	cp	r1, r24
     d96:	34 f4       	brge	.+12     	; 0xda4 <__stack+0x2a5>
			indmax = i;
			dmax = d[i];
     d98:	c3 01       	movw	r24, r6
     d9a:	b2 01       	movw	r22, r4
     d9c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
     da0:	6b 01       	movw	r12, r22
     da2:	48 01       	movw	r8, r16
	}
	
	// find maximum
	int dmax = 0;
	int indmax = 0;
	for (i=0; i<ind; i++){
     da4:	0f 5f       	subi	r16, 0xFF	; 255
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	0a 15       	cp	r16, r10
     daa:	1b 05       	cpc	r17, r11
     dac:	01 f7       	brne	.-64     	; 0xd6e <__stack+0x26f>
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__stack+0x2b9>
     db0:	81 2c       	mov	r8, r1
     db2:	91 2c       	mov	r9, r1
     db4:	c1 2c       	mov	r12, r1
     db6:	d1 2c       	mov	r13, r1
		if(d[i] > dmax){
			indmax = i;
			dmax = d[i];
		}
	}
	m_usb_tx_string("dmax: ");
     db8:	82 ed       	ldi	r24, 0xD2	; 210
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	m_usb_tx_int(dmax);
     dc0:	c6 01       	movw	r24, r12
     dc2:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
	m_usb_tx_string("\n");
     dc6:	80 ed       	ldi	r24, 0xD0	; 208
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
     dce:	e7 96       	adiw	r28, 0x37	; 55
     dd0:	ee ad       	ldd	r30, Y+62	; 0x3e
     dd2:	ff ad       	ldd	r31, Y+63	; 0x3f
     dd4:	e7 97       	sbiw	r28, 0x37	; 55
     dd6:	1e 16       	cp	r1, r30
     dd8:	1f 06       	cpc	r1, r31
     dda:	dc f5       	brge	.+118    	; 0xe52 <__stack+0x353>
     ddc:	7e 01       	movw	r14, r28
     dde:	f1 e2       	ldi	r31, 0x21	; 33
     de0:	ef 0e       	add	r14, r31
     de2:	f1 1c       	adc	r15, r1
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
	int indmin = 0;
     de4:	21 2c       	mov	r2, r1
     de6:	31 2c       	mov	r3, r1
	}
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
     de8:	0f 2e       	mov	r0, r31
     dea:	f0 e1       	ldi	r31, 0x10	; 16
     dec:	af 2e       	mov	r10, r31
     dee:	f7 e2       	ldi	r31, 0x27	; 39
     df0:	bf 2e       	mov	r11, r31
     df2:	f0 2d       	mov	r31, r0
	int indmin = 0;
	for (i=0; i<ind; i++){
     df4:	00 e0       	ldi	r16, 0x00	; 0
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	a3 96       	adiw	r28, 0x23	; 35
     dfa:	df ae       	std	Y+63, r13	; 0x3f
     dfc:	ce ae       	std	Y+62, r12	; 0x3e
     dfe:	a3 97       	sbiw	r28, 0x23	; 35
     e00:	e7 96       	adiw	r28, 0x37	; 55
     e02:	ce ac       	ldd	r12, Y+62	; 0x3e
     e04:	df ac       	ldd	r13, Y+63	; 0x3f
     e06:	e7 97       	sbiw	r28, 0x37	; 55
		if(d[i] < dmin){
     e08:	d7 01       	movw	r26, r14
     e0a:	4d 90       	ld	r4, X+
     e0c:	5d 90       	ld	r5, X+
     e0e:	6d 90       	ld	r6, X+
     e10:	7d 90       	ld	r7, X+
     e12:	7d 01       	movw	r14, r26
     e14:	b5 01       	movw	r22, r10
     e16:	88 27       	eor	r24, r24
     e18:	77 fd       	sbrc	r23, 7
     e1a:	80 95       	com	r24
     e1c:	98 2f       	mov	r25, r24
     e1e:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     e22:	9b 01       	movw	r18, r22
     e24:	ac 01       	movw	r20, r24
     e26:	c3 01       	movw	r24, r6
     e28:	b2 01       	movw	r22, r4
     e2a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     e2e:	88 23       	and	r24, r24
     e30:	34 f4       	brge	.+12     	; 0xe3e <__stack+0x33f>
			indmin = i;
			dmin = d[i];
     e32:	c3 01       	movw	r24, r6
     e34:	b2 01       	movw	r22, r4
     e36:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
     e3a:	5b 01       	movw	r10, r22
     e3c:	18 01       	movw	r2, r16
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
	int indmin = 0;
	for (i=0; i<ind; i++){
     e3e:	0f 5f       	subi	r16, 0xFF	; 255
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	0c 15       	cp	r16, r12
     e44:	1d 05       	cpc	r17, r13
     e46:	01 f7       	brne	.-64     	; 0xe08 <__stack+0x309>
     e48:	a3 96       	adiw	r28, 0x23	; 35
     e4a:	ce ac       	ldd	r12, Y+62	; 0x3e
     e4c:	df ac       	ldd	r13, Y+63	; 0x3f
     e4e:	a3 97       	sbiw	r28, 0x23	; 35
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <__stack+0x363>
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
	int indmin = 0;
     e52:	21 2c       	mov	r2, r1
     e54:	31 2c       	mov	r3, r1
	}
	m_usb_tx_string("dmax: ");
	m_usb_tx_int(dmax);
	m_usb_tx_string("\n");
	// find minimum
	int dmin = 10000;
     e56:	0f 2e       	mov	r0, r31
     e58:	f0 e1       	ldi	r31, 0x10	; 16
     e5a:	af 2e       	mov	r10, r31
     e5c:	f7 e2       	ldi	r31, 0x27	; 39
     e5e:	bf 2e       	mov	r11, r31
     e60:	f0 2d       	mov	r31, r0
		if(d[i] < dmin){
			indmin = i;
			dmin = d[i];
		}
	}
	m_usb_tx_string("dmin: ");
     e62:	89 ec       	ldi	r24, 0xC9	; 201
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	m_usb_tx_int(dmin);
     e6a:	c5 01       	movw	r24, r10
     e6c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
	m_usb_tx_string("\n");
     e70:	87 ec       	ldi	r24, 0xC7	; 199
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	
	// find miss which point
	double actdmax = dmax * pix2act;
     e78:	b6 01       	movw	r22, r12
     e7a:	88 27       	eor	r24, r24
     e7c:	77 fd       	sbrc	r23, 7
     e7e:	80 95       	com	r24
     e80:	98 2f       	mov	r25, r24
     e82:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     e86:	20 91 10 01 	lds	r18, 0x0110
     e8a:	30 91 11 01 	lds	r19, 0x0111
     e8e:	40 91 12 01 	lds	r20, 0x0112
     e92:	50 91 13 01 	lds	r21, 0x0113
     e96:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
     e9a:	6b 01       	movw	r12, r22
     e9c:	7c 01       	movw	r14, r24
	m_usb_tx_string("actual max:");
     e9e:	8b eb       	ldi	r24, 0xBB	; 187
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	m_usb_tx_int(actdmax);
     ea6:	c7 01       	movw	r24, r14
     ea8:	b6 01       	movw	r22, r12
     eaa:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
     eae:	cb 01       	movw	r24, r22
     eb0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
	m_usb_tx_string("\n");
     eb4:	89 eb       	ldi	r24, 0xB9	; 185
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	
	int ca = 0;
	for(i = 1; i<4; i++){
		if(abs(actdmax - actmax[i-1])<threshold){
     ebc:	40 90 14 01 	lds	r4, 0x0114
     ec0:	50 90 15 01 	lds	r5, 0x0115
     ec4:	60 90 16 01 	lds	r6, 0x0116
     ec8:	70 90 17 01 	lds	r7, 0x0117
     ecc:	e4 e0       	ldi	r30, 0x04	; 4
     ece:	f1 e0       	ldi	r31, 0x01	; 1
     ed0:	a3 96       	adiw	r28, 0x23	; 35
     ed2:	ff af       	std	Y+63, r31	; 0x3f
     ed4:	ee af       	std	Y+62, r30	; 0x3e
     ed6:	a3 97       	sbiw	r28, 0x23	; 35
	double actdmax = dmax * pix2act;
	m_usb_tx_string("actual max:");
	m_usb_tx_int(actdmax);
	m_usb_tx_string("\n");
	
	int ca = 0;
     ed8:	00 e0       	ldi	r16, 0x00	; 0
     eda:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 1; i<4; i++){
     edc:	aa 24       	eor	r10, r10
     ede:	a3 94       	inc	r10
     ee0:	b1 2c       	mov	r11, r1
     ee2:	a7 96       	adiw	r28, 0x27	; 39
     ee4:	9f ae       	std	Y+63, r9	; 0x3f
     ee6:	8e ae       	std	Y+62, r8	; 0x3e
     ee8:	a7 97       	sbiw	r28, 0x27	; 39
     eea:	4f 01       	movw	r8, r30
		if(abs(actdmax - actmax[i-1])<threshold){
     eec:	d4 01       	movw	r26, r8
     eee:	2d 91       	ld	r18, X+
     ef0:	3d 91       	ld	r19, X+
     ef2:	4d 91       	ld	r20, X+
     ef4:	5d 91       	ld	r21, X+
     ef6:	4d 01       	movw	r8, r26
     ef8:	c7 01       	movw	r24, r14
     efa:	b6 01       	movw	r22, r12
     efc:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     f00:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
     f04:	9b 01       	movw	r18, r22
     f06:	77 23       	and	r23, r23
     f08:	24 f4       	brge	.+8      	; 0xf12 <__stack+0x413>
     f0a:	22 27       	eor	r18, r18
     f0c:	33 27       	eor	r19, r19
     f0e:	26 1b       	sub	r18, r22
     f10:	37 0b       	sbc	r19, r23
     f12:	b9 01       	movw	r22, r18
     f14:	88 27       	eor	r24, r24
     f16:	77 fd       	sbrc	r23, 7
     f18:	80 95       	com	r24
     f1a:	98 2f       	mov	r25, r24
     f1c:	0e 94 96 12 	call	0x252c	; 0x252c <__floatsisf>
     f20:	a3 01       	movw	r20, r6
     f22:	92 01       	movw	r18, r4
     f24:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     f28:	88 23       	and	r24, r24
     f2a:	0c f4       	brge	.+2      	; 0xf2e <__stack+0x42f>
     f2c:	85 01       	movw	r16, r10
	m_usb_tx_string("actual max:");
	m_usb_tx_int(actdmax);
	m_usb_tx_string("\n");
	
	int ca = 0;
	for(i = 1; i<4; i++){
     f2e:	bf ef       	ldi	r27, 0xFF	; 255
     f30:	ab 1a       	sub	r10, r27
     f32:	bb 0a       	sbc	r11, r27
     f34:	e4 e0       	ldi	r30, 0x04	; 4
     f36:	ae 16       	cp	r10, r30
     f38:	b1 04       	cpc	r11, r1
     f3a:	c1 f6       	brne	.-80     	; 0xeec <__stack+0x3ed>
     f3c:	a7 96       	adiw	r28, 0x27	; 39
     f3e:	8e ac       	ldd	r8, Y+62	; 0x3e
     f40:	9f ac       	ldd	r9, Y+63	; 0x3f
     f42:	a7 97       	sbiw	r28, 0x27	; 39
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
	float ref_vw[2] = {0, 1};
     f44:	65 96       	adiw	r28, 0x15	; 21
     f46:	1c ae       	std	Y+60, r1	; 0x3c
     f48:	1d ae       	std	Y+61, r1	; 0x3d
     f4a:	1e ae       	std	Y+62, r1	; 0x3e
     f4c:	1f ae       	std	Y+63, r1	; 0x3f
     f4e:	65 97       	sbiw	r28, 0x15	; 21
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 e8       	ldi	r26, 0x80	; 128
     f56:	bf e3       	ldi	r27, 0x3F	; 63
     f58:	69 96       	adiw	r28, 0x19	; 25
     f5a:	8c af       	std	Y+60, r24	; 0x3c
     f5c:	9d af       	std	Y+61, r25	; 0x3d
     f5e:	ae af       	std	Y+62, r26	; 0x3e
     f60:	bf af       	std	Y+63, r27	; 0x3f
     f62:	69 97       	sbiw	r28, 0x19	; 25
	
	m_usb_tx_string("case :");
     f64:	82 eb       	ldi	r24, 0xB2	; 178
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	m_usb_tx_int(ca);
     f6c:	c8 01       	movw	r24, r16
     f6e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
	m_usb_tx_string("\n");
     f72:	80 eb       	ldi	r24, 0xB0	; 176
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	
	switch(ca){
     f7a:	02 30       	cpi	r16, 0x02	; 2
     f7c:	11 05       	cpc	r17, r1
     f7e:	49 f1       	breq	.+82     	; 0xfd2 <__stack+0x4d3>
     f80:	03 30       	cpi	r16, 0x03	; 3
     f82:	11 05       	cpc	r17, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <__stack+0x489>
     f86:	58 c0       	rjmp	.+176    	; 0x1038 <__stack+0x539>
     f88:	01 30       	cpi	r16, 0x01	; 1
     f8a:	11 05       	cpc	r17, r1
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__stack+0x491>
     f8e:	91 c0       	rjmp	.+290    	; 0x10b2 <__stack+0x5b3>
		case 1: // not miss point 1 or point 4
		// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
		ref_pw[0] = 0; ref_pw[1] = 0;
		ref_vw[0] = 0; ref_vw[1] = 1;
     f90:	65 96       	adiw	r28, 0x15	; 21
     f92:	1c ae       	std	Y+60, r1	; 0x3c
     f94:	1d ae       	std	Y+61, r1	; 0x3d
     f96:	1e ae       	std	Y+62, r1	; 0x3e
     f98:	1f ae       	std	Y+63, r1	; 0x3f
     f9a:	65 97       	sbiw	r28, 0x15	; 21
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e8       	ldi	r26, 0x80	; 128
     fa2:	bf e3       	ldi	r27, 0x3F	; 63
     fa4:	69 96       	adiw	r28, 0x19	; 25
     fa6:	8c af       	std	Y+60, r24	; 0x3c
     fa8:	9d af       	std	Y+61, r25	; 0x3d
     faa:	ae af       	std	Y+62, r26	; 0x3e
     fac:	bf af       	std	Y+63, r27	; 0x3f
     fae:	69 97       	sbiw	r28, 0x19	; 25
		
		usb_tx_string("not miss\n");
     fb0:	86 ea       	ldi	r24, 0xA6	; 166
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	m_usb_tx_string("\n");
	
	switch(ca){
		case 1: // not miss point 1 or point 4
		// ref_pw[0] = 0; ref_pw[1] = -14.5 / pix2act;
		ref_pw[0] = 0; ref_pw[1] = 0;
     fb8:	ad 96       	adiw	r28, 0x2d	; 45
     fba:	1c ae       	std	Y+60, r1	; 0x3c
     fbc:	1d ae       	std	Y+61, r1	; 0x3d
     fbe:	1e ae       	std	Y+62, r1	; 0x3e
     fc0:	1f ae       	std	Y+63, r1	; 0x3f
     fc2:	ad 97       	sbiw	r28, 0x2d	; 45
     fc4:	e1 96       	adiw	r28, 0x31	; 49
     fc6:	1c ae       	std	Y+60, r1	; 0x3c
     fc8:	1d ae       	std	Y+61, r1	; 0x3d
     fca:	1e ae       	std	Y+62, r1	; 0x3e
     fcc:	1f ae       	std	Y+63, r1	; 0x3f
     fce:	e1 97       	sbiw	r28, 0x31	; 49
		ref_vw[0] = 0; ref_vw[1] = 1;
		
		usb_tx_string("not miss\n");
		break;
     fd0:	84 c0       	rjmp	.+264    	; 0x10da <__stack+0x5db>
		case 2: // miss point 4
		ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
     fd2:	20 91 10 01 	lds	r18, 0x0110
     fd6:	30 91 11 01 	lds	r19, 0x0111
     fda:	40 91 12 01 	lds	r20, 0x0112
     fde:	50 91 13 01 	lds	r21, 0x0113
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	88 e6       	ldi	r24, 0x68	; 104
     fe8:	91 e4       	ldi	r25, 0x41	; 65
     fea:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
     fee:	ad 96       	adiw	r28, 0x2d	; 45
     ff0:	6c af       	std	Y+60, r22	; 0x3c
     ff2:	7d af       	std	Y+61, r23	; 0x3d
     ff4:	8e af       	std	Y+62, r24	; 0x3e
     ff6:	9f af       	std	Y+63, r25	; 0x3f
     ff8:	ad 97       	sbiw	r28, 0x2d	; 45
		ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
     ffa:	84 e9       	ldi	r24, 0x94	; 148
     ffc:	97 e8       	ldi	r25, 0x87	; 135
     ffe:	a5 ee       	ldi	r26, 0xE5	; 229
    1000:	be e3       	ldi	r27, 0x3E	; 62
    1002:	65 96       	adiw	r28, 0x15	; 21
    1004:	8c af       	std	Y+60, r24	; 0x3c
    1006:	9d af       	std	Y+61, r25	; 0x3d
    1008:	ae af       	std	Y+62, r26	; 0x3e
    100a:	bf af       	std	Y+63, r27	; 0x3f
    100c:	65 97       	sbiw	r28, 0x15	; 21
    100e:	81 ea       	ldi	r24, 0xA1	; 161
    1010:	96 ed       	ldi	r25, 0xD6	; 214
    1012:	a4 e6       	ldi	r26, 0x64	; 100
    1014:	bf eb       	ldi	r27, 0xBF	; 191
    1016:	69 96       	adiw	r28, 0x19	; 25
    1018:	8c af       	std	Y+60, r24	; 0x3c
    101a:	9d af       	std	Y+61, r25	; 0x3d
    101c:	ae af       	std	Y+62, r26	; 0x3e
    101e:	bf af       	std	Y+63, r27	; 0x3f
    1020:	69 97       	sbiw	r28, 0x19	; 25
		usb_tx_string("miss 4\n");
    1022:	8e e9       	ldi	r24, 0x9E	; 158
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		ref_vw[0] = 0; ref_vw[1] = 1;
		
		usb_tx_string("not miss\n");
		break;
		case 2: // miss point 4
		ref_pw[0] = 0; ref_pw[1] = 14.5 / pix2act;
    102a:	e1 96       	adiw	r28, 0x31	; 49
    102c:	1c ae       	std	Y+60, r1	; 0x3c
    102e:	1d ae       	std	Y+61, r1	; 0x3d
    1030:	1e ae       	std	Y+62, r1	; 0x3e
    1032:	1f ae       	std	Y+63, r1	; 0x3f
    1034:	e1 97       	sbiw	r28, 0x31	; 49
		ref_vw[0] = 0.4483; ref_vw[1] = -0.8939;
		usb_tx_string("miss 4\n");
		break;
    1036:	51 c0       	rjmp	.+162    	; 0x10da <__stack+0x5db>
		case 3: // miss point 1
		ref_pw[0] = 11.655 / pix2act; ref_pw[1] = -8.741 / pix2act;
    1038:	c0 90 10 01 	lds	r12, 0x0110
    103c:	d0 90 11 01 	lds	r13, 0x0111
    1040:	e0 90 12 01 	lds	r14, 0x0112
    1044:	f0 90 13 01 	lds	r15, 0x0113
    1048:	a7 01       	movw	r20, r14
    104a:	96 01       	movw	r18, r12
    104c:	61 ee       	ldi	r22, 0xE1	; 225
    104e:	7a e7       	ldi	r23, 0x7A	; 122
    1050:	8a e3       	ldi	r24, 0x3A	; 58
    1052:	91 e4       	ldi	r25, 0x41	; 65
    1054:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
    1058:	e1 96       	adiw	r28, 0x31	; 49
    105a:	6c af       	std	Y+60, r22	; 0x3c
    105c:	7d af       	std	Y+61, r23	; 0x3d
    105e:	8e af       	std	Y+62, r24	; 0x3e
    1060:	9f af       	std	Y+63, r25	; 0x3f
    1062:	e1 97       	sbiw	r28, 0x31	; 49
    1064:	a7 01       	movw	r20, r14
    1066:	96 01       	movw	r18, r12
    1068:	63 e2       	ldi	r22, 0x23	; 35
    106a:	7b ed       	ldi	r23, 0xDB	; 219
    106c:	8b e0       	ldi	r24, 0x0B	; 11
    106e:	91 ec       	ldi	r25, 0xC1	; 193
    1070:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
    1074:	ad 96       	adiw	r28, 0x2d	; 45
    1076:	6c af       	std	Y+60, r22	; 0x3c
    1078:	7d af       	std	Y+61, r23	; 0x3d
    107a:	8e af       	std	Y+62, r24	; 0x3e
    107c:	9f af       	std	Y+63, r25	; 0x3f
    107e:	ad 97       	sbiw	r28, 0x2d	; 45
		ref_vw[0] = -0.9625; ref_vw[1] = 0.2711;
    1080:	86 e6       	ldi	r24, 0x66	; 102
    1082:	96 e6       	ldi	r25, 0x66	; 102
    1084:	a6 e7       	ldi	r26, 0x76	; 118
    1086:	bf eb       	ldi	r27, 0xBF	; 191
    1088:	65 96       	adiw	r28, 0x15	; 21
    108a:	8c af       	std	Y+60, r24	; 0x3c
    108c:	9d af       	std	Y+61, r25	; 0x3d
    108e:	ae af       	std	Y+62, r26	; 0x3e
    1090:	bf af       	std	Y+63, r27	; 0x3f
    1092:	65 97       	sbiw	r28, 0x15	; 21
    1094:	8f e9       	ldi	r24, 0x9F	; 159
    1096:	9d ec       	ldi	r25, 0xCD	; 205
    1098:	aa e8       	ldi	r26, 0x8A	; 138
    109a:	be e3       	ldi	r27, 0x3E	; 62
    109c:	69 96       	adiw	r28, 0x19	; 25
    109e:	8c af       	std	Y+60, r24	; 0x3c
    10a0:	9d af       	std	Y+61, r25	; 0x3d
    10a2:	ae af       	std	Y+62, r26	; 0x3e
    10a4:	bf af       	std	Y+63, r27	; 0x3f
    10a6:	69 97       	sbiw	r28, 0x19	; 25
		usb_tx_string("miss 1\n");
    10a8:	86 e9       	ldi	r24, 0x96	; 150
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		break;
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <__stack+0x5db>
		default:
		m_usb_tx_string("cannot calculate\n");
    10b2:	84 e8       	ldi	r24, 0x84	; 132
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		break;
	}
	
	if (ca > 0){
    10ba:	10 16       	cp	r1, r16
    10bc:	11 06       	cpc	r1, r17
    10be:	0c f0       	brlt	.+2      	; 0x10c2 <__stack+0x5c3>
    10c0:	9e c3       	rjmp	.+1852   	; 0x17fe <__stack+0xcff>
		if(abs(actdmax - actmax[i-1])<threshold){
			ca = i;
		}
	}
	
	float ref_pw[2] = {0, 0};
    10c2:	e1 96       	adiw	r28, 0x31	; 49
    10c4:	1c ae       	std	Y+60, r1	; 0x3c
    10c6:	1d ae       	std	Y+61, r1	; 0x3d
    10c8:	1e ae       	std	Y+62, r1	; 0x3e
    10ca:	1f ae       	std	Y+63, r1	; 0x3f
    10cc:	e1 97       	sbiw	r28, 0x31	; 49
    10ce:	ad 96       	adiw	r28, 0x2d	; 45
    10d0:	1c ae       	std	Y+60, r1	; 0x3c
    10d2:	1d ae       	std	Y+61, r1	; 0x3d
    10d4:	1e ae       	std	Y+62, r1	; 0x3e
    10d6:	1f ae       	std	Y+63, r1	; 0x3f
    10d8:	ad 97       	sbiw	r28, 0x2d	; 45
	
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
    10da:	f4 01       	movw	r30, r8
    10dc:	ee 0f       	add	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	2c 0f       	add	r18, r28
    10e6:	3d 1f       	adc	r19, r29
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	e0 ac       	ldd	r14, Z+56	; 0x38
    10ee:	f1 ac       	ldd	r15, Z+57	; 0x39
    10f0:	f1 01       	movw	r30, r2
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	e2 0f       	add	r30, r18
    10f8:	f3 1f       	adc	r31, r19
    10fa:	80 ad       	ldd	r24, Z+56	; 0x38
    10fc:	91 ad       	ldd	r25, Z+57	; 0x39
    10fe:	8e 15       	cp	r24, r14
    1100:	9f 05       	cpc	r25, r15
    1102:	71 f0       	breq	.+28     	; 0x1120 <__stack+0x621>
    1104:	f1 01       	movw	r30, r2
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	85 e4       	ldi	r24, 0x45	; 69
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	8c 0f       	add	r24, r28
    1110:	9d 1f       	adc	r25, r29
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	e8 16       	cp	r14, r24
    111c:	f9 06       	cpc	r15, r25
    111e:	69 f4       	brne	.+26     	; 0x113a <__stack+0x63b>
			coin_ind = from[indmax];
			other_ind = to[indmax];
    1120:	f4 01       	movw	r30, r8
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	a5 e4       	ldi	r26, 0x45	; 69
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ac 0f       	add	r26, r28
    112c:	bd 1f       	adc	r27, r29
    112e:	ea 0f       	add	r30, r26
    1130:	fb 1f       	adc	r31, r27
	if (ca > 0){
		// find coincide point and the other point of longest edge
		int coin_ind;
		int other_ind;
		if( from[indmin] == from[indmax] || to[indmin] == from[indmax]){
			coin_ind = from[indmax];
    1132:	67 01       	movw	r12, r14
			other_ind = to[indmax];
    1134:	e0 80       	ld	r14, Z
    1136:	f1 80       	ldd	r15, Z+1	; 0x01
    1138:	0b c0       	rjmp	.+22     	; 0x1150 <__stack+0x651>
		}
		else{
			coin_ind = to[indmax];
    113a:	f4 01       	movw	r30, r8
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	25 e4       	ldi	r18, 0x45	; 69
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	2c 0f       	add	r18, r28
    1146:	3d 1f       	adc	r19, r29
    1148:	e2 0f       	add	r30, r18
    114a:	f3 1f       	adc	r31, r19
    114c:	c0 80       	ld	r12, Z
    114e:	d1 80       	ldd	r13, Z+1	; 0x01
			other_ind = from[indmax];
		}
		
		m_usb_tx_string("coin_ind, other_ind:");
    1150:	8f e6       	ldi	r24, 0x6F	; 111
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(coin_ind);
    1158:	c6 01       	movw	r24, r12
    115a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("	");
    115e:	8d e6       	ldi	r24, 0x6D	; 109
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(other_ind);
    1166:	c7 01       	movw	r24, r14
    1168:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    116c:	8b e6       	ldi	r24, 0x6B	; 107
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		
		// calculate reference point and vector in camera frame
		float ref_pc[2] = {0,0};
		if (ca == 1){
    1174:	01 30       	cpi	r16, 0x01	; 1
    1176:	11 05       	cpc	r17, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <__stack+0x67d>
    117a:	44 c0       	rjmp	.+136    	; 0x1204 <__stack+0x705>
			ref_pc[0] = 0.5*(x[coin_ind] + x[other_ind]);
    117c:	cc 0c       	add	r12, r12
    117e:	dd 1c       	adc	r13, r13
    1180:	cc 0c       	add	r12, r12
    1182:	dd 1c       	adc	r13, r13
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	8c 0f       	add	r24, r28
    118a:	9d 1f       	adc	r25, r29
    118c:	c8 0e       	add	r12, r24
    118e:	d9 1e       	adc	r13, r25
    1190:	87 01       	movw	r16, r14
    1192:	00 0f       	add	r16, r16
    1194:	11 1f       	adc	r17, r17
    1196:	00 0f       	add	r16, r16
    1198:	11 1f       	adc	r17, r17
    119a:	08 0f       	add	r16, r24
    119c:	19 1f       	adc	r17, r25
    119e:	d8 01       	movw	r26, r16
    11a0:	2d 91       	ld	r18, X+
    11a2:	3d 91       	ld	r19, X+
    11a4:	4d 91       	ld	r20, X+
    11a6:	5c 91       	ld	r21, X
    11a8:	f6 01       	movw	r30, r12
    11aa:	60 81       	ld	r22, Z
    11ac:	71 81       	ldd	r23, Z+1	; 0x01
    11ae:	82 81       	ldd	r24, Z+2	; 0x02
    11b0:	93 81       	ldd	r25, Z+3	; 0x03
    11b2:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	5f e3       	ldi	r21, 0x3F	; 63
    11be:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    11c2:	a9 96       	adiw	r28, 0x29	; 41
    11c4:	6c af       	std	Y+60, r22	; 0x3c
    11c6:	7d af       	std	Y+61, r23	; 0x3d
    11c8:	8e af       	std	Y+62, r24	; 0x3e
    11ca:	9f af       	std	Y+63, r25	; 0x3f
    11cc:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = 0.5*(y[coin_ind] + y[other_ind]);
    11ce:	d8 01       	movw	r26, r16
    11d0:	50 96       	adiw	r26, 0x10	; 16
    11d2:	2d 91       	ld	r18, X+
    11d4:	3d 91       	ld	r19, X+
    11d6:	4d 91       	ld	r20, X+
    11d8:	5c 91       	ld	r21, X
    11da:	53 97       	sbiw	r26, 0x13	; 19
    11dc:	f6 01       	movw	r30, r12
    11de:	60 89       	ldd	r22, Z+16	; 0x10
    11e0:	71 89       	ldd	r23, Z+17	; 0x11
    11e2:	82 89       	ldd	r24, Z+18	; 0x12
    11e4:	93 89       	ldd	r25, Z+19	; 0x13
    11e6:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    11f6:	a5 96       	adiw	r28, 0x25	; 37
    11f8:	6c af       	std	Y+60, r22	; 0x3c
    11fa:	7d af       	std	Y+61, r23	; 0x3d
    11fc:	8e af       	std	Y+62, r24	; 0x3e
    11fe:	9f af       	std	Y+63, r25	; 0x3f
    1200:	a5 97       	sbiw	r28, 0x25	; 37
    1202:	1f c0       	rjmp	.+62     	; 0x1242 <__stack+0x743>
		}
		else{
			ref_pc[0] = x[coin_ind];
    1204:	f6 01       	movw	r30, r12
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	ee 0f       	add	r30, r30
    120c:	ff 1f       	adc	r31, r31
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	2c 0f       	add	r18, r28
    1214:	3d 1f       	adc	r19, r29
    1216:	e2 0f       	add	r30, r18
    1218:	f3 1f       	adc	r31, r19
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	a2 81       	ldd	r26, Z+2	; 0x02
    1220:	b3 81       	ldd	r27, Z+3	; 0x03
    1222:	a9 96       	adiw	r28, 0x29	; 41
    1224:	8c af       	std	Y+60, r24	; 0x3c
    1226:	9d af       	std	Y+61, r25	; 0x3d
    1228:	ae af       	std	Y+62, r26	; 0x3e
    122a:	bf af       	std	Y+63, r27	; 0x3f
    122c:	a9 97       	sbiw	r28, 0x29	; 41
			ref_pc[1] = y[coin_ind];
    122e:	80 89       	ldd	r24, Z+16	; 0x10
    1230:	91 89       	ldd	r25, Z+17	; 0x11
    1232:	a2 89       	ldd	r26, Z+18	; 0x12
    1234:	b3 89       	ldd	r27, Z+19	; 0x13
    1236:	a5 96       	adiw	r28, 0x25	; 37
    1238:	8c af       	std	Y+60, r24	; 0x3c
    123a:	9d af       	std	Y+61, r25	; 0x3d
    123c:	ae af       	std	Y+62, r26	; 0x3e
    123e:	bf af       	std	Y+63, r27	; 0x3f
    1240:	a5 97       	sbiw	r28, 0x25	; 37
		}
		m_usb_tx_string("ref_pc0, ref_pc1: ");
    1242:	88 e5       	ldi	r24, 0x58	; 88
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ref_pc[0]);
    124a:	a9 96       	adiw	r28, 0x29	; 41
    124c:	6c ad       	ldd	r22, Y+60	; 0x3c
    124e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1250:	8e ad       	ldd	r24, Y+62	; 0x3e
    1252:	9f ad       	ldd	r25, Y+63	; 0x3f
    1254:	a9 97       	sbiw	r28, 0x29	; 41
    1256:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    125a:	cb 01       	movw	r24, r22
    125c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("	");
    1260:	86 e5       	ldi	r24, 0x56	; 86
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ref_pc[1]);
    1268:	a5 96       	adiw	r28, 0x25	; 37
    126a:	6c ad       	ldd	r22, Y+60	; 0x3c
    126c:	7d ad       	ldd	r23, Y+61	; 0x3d
    126e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1270:	9f ad       	ldd	r25, Y+63	; 0x3f
    1272:	a5 97       	sbiw	r28, 0x25	; 37
    1274:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    1278:	cb 01       	movw	r24, r22
    127a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    127e:	84 e5       	ldi	r24, 0x54	; 84
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		
		float ref_vc[2] = {x[other_ind] - ref_pc[0], y[other_ind] - ref_pc[1]};
    1286:	ee 0c       	add	r14, r14
    1288:	ff 1c       	adc	r15, r15
    128a:	ee 0c       	add	r14, r14
    128c:	ff 1c       	adc	r15, r15
    128e:	a1 e0       	ldi	r26, 0x01	; 1
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ac 0f       	add	r26, r28
    1294:	bd 1f       	adc	r27, r29
    1296:	ea 0e       	add	r14, r26
    1298:	fb 1e       	adc	r15, r27
    129a:	a9 96       	adiw	r28, 0x29	; 41
    129c:	2c ad       	ldd	r18, Y+60	; 0x3c
    129e:	3d ad       	ldd	r19, Y+61	; 0x3d
    12a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    12a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    12a4:	a9 97       	sbiw	r28, 0x29	; 41
    12a6:	f7 01       	movw	r30, r14
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    12b4:	6d 96       	adiw	r28, 0x1d	; 29
    12b6:	6c af       	std	Y+60, r22	; 0x3c
    12b8:	7d af       	std	Y+61, r23	; 0x3d
    12ba:	8e af       	std	Y+62, r24	; 0x3e
    12bc:	9f af       	std	Y+63, r25	; 0x3f
    12be:	6d 97       	sbiw	r28, 0x1d	; 29
    12c0:	a5 96       	adiw	r28, 0x25	; 37
    12c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ca:	a5 97       	sbiw	r28, 0x25	; 37
    12cc:	d7 01       	movw	r26, r14
    12ce:	50 96       	adiw	r26, 0x10	; 16
    12d0:	6d 91       	ld	r22, X+
    12d2:	7d 91       	ld	r23, X+
    12d4:	8d 91       	ld	r24, X+
    12d6:	9c 91       	ld	r25, X
    12d8:	53 97       	sbiw	r26, 0x13	; 19
    12da:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    12de:	a1 96       	adiw	r28, 0x21	; 33
    12e0:	6c af       	std	Y+60, r22	; 0x3c
    12e2:	7d af       	std	Y+61, r23	; 0x3d
    12e4:	8e af       	std	Y+62, r24	; 0x3e
    12e6:	9f af       	std	Y+63, r25	; 0x3f
    12e8:	a1 97       	sbiw	r28, 0x21	; 33
		
		m_usb_tx_string("ref_vc0, ref_vc1 (unnormalize): ");
    12ea:	83 e3       	ldi	r24, 0x33	; 51
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ref_vc[0]);
    12f2:	6d 96       	adiw	r28, 0x1d	; 29
    12f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    12f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    12f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    12fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    12fc:	6d 97       	sbiw	r28, 0x1d	; 29
    12fe:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    1302:	cb 01       	movw	r24, r22
    1304:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("	");
    1308:	81 e3       	ldi	r24, 0x31	; 49
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ref_vc[1]);
    1310:	a1 96       	adiw	r28, 0x21	; 33
    1312:	6c ad       	ldd	r22, Y+60	; 0x3c
    1314:	7d ad       	ldd	r23, Y+61	; 0x3d
    1316:	8e ad       	ldd	r24, Y+62	; 0x3e
    1318:	9f ad       	ldd	r25, Y+63	; 0x3f
    131a:	a1 97       	sbiw	r28, 0x21	; 33
    131c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    1320:	cb 01       	movw	r24, r22
    1322:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    1326:	8f e2       	ldi	r24, 0x2F	; 47
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		
		float norm = sqrt(ref_vc[0]*ref_vc[0] + ref_vc[1]*ref_vc[1]);
    132e:	6d 96       	adiw	r28, 0x1d	; 29
    1330:	8c ac       	ldd	r8, Y+60	; 0x3c
    1332:	9d ac       	ldd	r9, Y+61	; 0x3d
    1334:	ae ac       	ldd	r10, Y+62	; 0x3e
    1336:	bf ac       	ldd	r11, Y+63	; 0x3f
    1338:	6d 97       	sbiw	r28, 0x1d	; 29
    133a:	a1 96       	adiw	r28, 0x21	; 33
    133c:	cc ac       	ldd	r12, Y+60	; 0x3c
    133e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1340:	ee ac       	ldd	r14, Y+62	; 0x3e
    1342:	ff ac       	ldd	r15, Y+63	; 0x3f
    1344:	a1 97       	sbiw	r28, 0x21	; 33
    1346:	a5 01       	movw	r20, r10
    1348:	94 01       	movw	r18, r8
    134a:	c5 01       	movw	r24, r10
    134c:	b4 01       	movw	r22, r8
    134e:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    1352:	2b 01       	movw	r4, r22
    1354:	3c 01       	movw	r6, r24
    1356:	a7 01       	movw	r20, r14
    1358:	96 01       	movw	r18, r12
    135a:	c7 01       	movw	r24, r14
    135c:	b6 01       	movw	r22, r12
    135e:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    1362:	9b 01       	movw	r18, r22
    1364:	ac 01       	movw	r20, r24
    1366:	c3 01       	movw	r24, r6
    1368:	b2 01       	movw	r22, r4
    136a:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
    136e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <sqrt>
    1372:	2b 01       	movw	r4, r22
    1374:	3c 01       	movw	r6, r24
		ref_vc[0] = ref_vc[0] / norm;
    1376:	9b 01       	movw	r18, r22
    1378:	ac 01       	movw	r20, r24
    137a:	c5 01       	movw	r24, r10
    137c:	b4 01       	movw	r22, r8
    137e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
    1382:	6d 96       	adiw	r28, 0x1d	; 29
    1384:	6c af       	std	Y+60, r22	; 0x3c
    1386:	7d af       	std	Y+61, r23	; 0x3d
    1388:	8e af       	std	Y+62, r24	; 0x3e
    138a:	9f af       	std	Y+63, r25	; 0x3f
    138c:	6d 97       	sbiw	r28, 0x1d	; 29
		ref_vc[1] = ref_vc[1] / norm;
    138e:	a3 01       	movw	r20, r6
    1390:	92 01       	movw	r18, r4
    1392:	c7 01       	movw	r24, r14
    1394:	b6 01       	movw	r22, r12
    1396:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
    139a:	a1 96       	adiw	r28, 0x21	; 33
    139c:	6c af       	std	Y+60, r22	; 0x3c
    139e:	7d af       	std	Y+61, r23	; 0x3d
    13a0:	8e af       	std	Y+62, r24	; 0x3e
    13a2:	9f af       	std	Y+63, r25	; 0x3f
    13a4:	a1 97       	sbiw	r28, 0x21	; 33
		
		m_usb_tx_string("ref_vc0, ref_vc1 (normalize): ");
    13a6:	80 e1       	ldi	r24, 0x10	; 16
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ref_vc[0]*1000);
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a e7       	ldi	r20, 0x7A	; 122
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	6d 96       	adiw	r28, 0x1d	; 29
    13b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    13ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    13bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    13be:	9f ad       	ldd	r25, Y+63	; 0x3f
    13c0:	6d 97       	sbiw	r28, 0x1d	; 29
    13c2:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    13c6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    13ca:	cb 01       	movw	r24, r22
    13cc:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("	");
    13d0:	8e e0       	ldi	r24, 0x0E	; 14
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ref_vc[1]*1000);
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a e7       	ldi	r20, 0x7A	; 122
    13de:	54 e4       	ldi	r21, 0x44	; 68
    13e0:	a1 96       	adiw	r28, 0x21	; 33
    13e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    13e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    13e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    13e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    13ea:	a1 97       	sbiw	r28, 0x21	; 33
    13ec:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    13f0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    13f4:	cb 01       	movw	r24, r22
    13f6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    13fa:	8c e0       	ldi	r24, 0x0C	; 12
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		
		// find rotation matrix
		float costheta = ref_vc[0]*ref_vw[0] + ref_vc[1]*ref_vw[1];
    1402:	65 96       	adiw	r28, 0x15	; 21
    1404:	2c ad       	ldd	r18, Y+60	; 0x3c
    1406:	3d ad       	ldd	r19, Y+61	; 0x3d
    1408:	4e ad       	ldd	r20, Y+62	; 0x3e
    140a:	5f ad       	ldd	r21, Y+63	; 0x3f
    140c:	65 97       	sbiw	r28, 0x15	; 21
    140e:	6d 96       	adiw	r28, 0x1d	; 29
    1410:	6c ad       	ldd	r22, Y+60	; 0x3c
    1412:	7d ad       	ldd	r23, Y+61	; 0x3d
    1414:	8e ad       	ldd	r24, Y+62	; 0x3e
    1416:	9f ad       	ldd	r25, Y+63	; 0x3f
    1418:	6d 97       	sbiw	r28, 0x1d	; 29
    141a:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    141e:	6b 01       	movw	r12, r22
    1420:	7c 01       	movw	r14, r24
    1422:	69 96       	adiw	r28, 0x19	; 25
    1424:	2c ad       	ldd	r18, Y+60	; 0x3c
    1426:	3d ad       	ldd	r19, Y+61	; 0x3d
    1428:	4e ad       	ldd	r20, Y+62	; 0x3e
    142a:	5f ad       	ldd	r21, Y+63	; 0x3f
    142c:	69 97       	sbiw	r28, 0x19	; 25
    142e:	a1 96       	adiw	r28, 0x21	; 33
    1430:	6c ad       	ldd	r22, Y+60	; 0x3c
    1432:	7d ad       	ldd	r23, Y+61	; 0x3d
    1434:	8e ad       	ldd	r24, Y+62	; 0x3e
    1436:	9f ad       	ldd	r25, Y+63	; 0x3f
    1438:	a1 97       	sbiw	r28, 0x21	; 33
    143a:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	c7 01       	movw	r24, r14
    1444:	b6 01       	movw	r22, r12
    1446:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
    144a:	4b 01       	movw	r8, r22
    144c:	5c 01       	movw	r10, r24
		float sintheta = sqrt(1 - costheta*costheta);
    144e:	9b 01       	movw	r18, r22
    1450:	ac 01       	movw	r20, r24
    1452:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	80 e8       	ldi	r24, 0x80	; 128
    1460:	9f e3       	ldi	r25, 0x3F	; 63
    1462:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    1466:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <sqrt>
    146a:	2b 01       	movw	r4, r22
    146c:	3c 01       	movw	r6, r24
		
		m_usb_tx_string("cos, sin:");
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(costheta*1000);
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4a e7       	ldi	r20, 0x7A	; 122
    147c:	54 e4       	ldi	r21, 0x44	; 68
    147e:	c5 01       	movw	r24, r10
    1480:	b4 01       	movw	r22, r8
    1482:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    1486:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    148a:	cb 01       	movw	r24, r22
    148c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("	");
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(sintheta*1000);
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	4a e7       	ldi	r20, 0x7A	; 122
    149e:	54 e4       	ldi	r21, 0x44	; 68
    14a0:	c3 01       	movw	r24, r6
    14a2:	b2 01       	movw	r22, r4
    14a4:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    14a8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    14ac:	cb 01       	movw	r24, r22
    14ae:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    14b2:	8e ef       	ldi	r24, 0xFE	; 254
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		
		
		int if_pos_sin = find_sign(costheta, sintheta, &ref_vc[0], &ref_vw[0]);
    14ba:	fe 01       	movw	r30, r28
    14bc:	ef 5a       	subi	r30, 0xAF	; 175
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	7f 01       	movw	r14, r30
    14c2:	8e 01       	movw	r16, r28
    14c4:	07 5a       	subi	r16, 0xA7	; 167
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	a3 01       	movw	r20, r6
    14ca:	92 01       	movw	r18, r4
    14cc:	c5 01       	movw	r24, r10
    14ce:	b4 01       	movw	r22, r8
    14d0:	0e 94 b6 01 	call	0x36c	; 0x36c <find_sign>
    14d4:	1c 01       	movw	r2, r24
		m_usb_tx_string("sign: ");
    14d6:	87 ef       	ldi	r24, 0xF7	; 247
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(if_pos_sin);
    14de:	c1 01       	movw	r24, r2
    14e0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    14e4:	85 ef       	ldi	r24, 0xF5	; 245
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		
		
		if(if_pos_sin == 1){
    14ec:	f1 e0       	ldi	r31, 0x01	; 1
    14ee:	2f 16       	cp	r2, r31
    14f0:	31 04       	cpc	r3, r1
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <__stack+0x9f7>
    14f4:	90 c0       	rjmp	.+288    	; 0x1616 <__stack+0xb17>
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - 512) + sintheta*(ref_pc[1] - 384);
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	54 e4       	ldi	r21, 0x44	; 68
    14fe:	a9 96       	adiw	r28, 0x29	; 41
    1500:	6c ad       	ldd	r22, Y+60	; 0x3c
    1502:	7d ad       	ldd	r23, Y+61	; 0x3d
    1504:	8e ad       	ldd	r24, Y+62	; 0x3e
    1506:	9f ad       	ldd	r25, Y+63	; 0x3f
    1508:	a9 97       	sbiw	r28, 0x29	; 41
    150a:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    150e:	a9 96       	adiw	r28, 0x29	; 41
    1510:	6c af       	std	Y+60, r22	; 0x3c
    1512:	7d af       	std	Y+61, r23	; 0x3d
    1514:	8e af       	std	Y+62, r24	; 0x3e
    1516:	9f af       	std	Y+63, r25	; 0x3f
    1518:	a9 97       	sbiw	r28, 0x29	; 41
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 ec       	ldi	r20, 0xC0	; 192
    1520:	53 e4       	ldi	r21, 0x43	; 67
    1522:	a5 96       	adiw	r28, 0x25	; 37
    1524:	6c ad       	ldd	r22, Y+60	; 0x3c
    1526:	7d ad       	ldd	r23, Y+61	; 0x3d
    1528:	8e ad       	ldd	r24, Y+62	; 0x3e
    152a:	9f ad       	ldd	r25, Y+63	; 0x3f
    152c:	a5 97       	sbiw	r28, 0x25	; 37
    152e:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    1532:	6b 01       	movw	r12, r22
    1534:	7c 01       	movw	r14, r24
    1536:	a5 01       	movw	r20, r10
    1538:	94 01       	movw	r18, r8
    153a:	a9 96       	adiw	r28, 0x29	; 41
    153c:	6c ad       	ldd	r22, Y+60	; 0x3c
    153e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1540:	8e ad       	ldd	r24, Y+62	; 0x3e
    1542:	9f ad       	ldd	r25, Y+63	; 0x3f
    1544:	a9 97       	sbiw	r28, 0x29	; 41
    1546:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    154a:	9b 01       	movw	r18, r22
    154c:	ac 01       	movw	r20, r24
    154e:	e1 96       	adiw	r28, 0x31	; 49
    1550:	6c ad       	ldd	r22, Y+60	; 0x3c
    1552:	7d ad       	ldd	r23, Y+61	; 0x3d
    1554:	8e ad       	ldd	r24, Y+62	; 0x3e
    1556:	9f ad       	ldd	r25, Y+63	; 0x3f
    1558:	e1 97       	sbiw	r28, 0x31	; 49
    155a:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    155e:	a5 96       	adiw	r28, 0x25	; 37
    1560:	6c af       	std	Y+60, r22	; 0x3c
    1562:	7d af       	std	Y+61, r23	; 0x3d
    1564:	8e af       	std	Y+62, r24	; 0x3e
    1566:	9f af       	std	Y+63, r25	; 0x3f
    1568:	a5 97       	sbiw	r28, 0x25	; 37
    156a:	a3 01       	movw	r20, r6
    156c:	92 01       	movw	r18, r4
    156e:	c7 01       	movw	r24, r14
    1570:	b6 01       	movw	r22, r12
    1572:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    1576:	9b 01       	movw	r18, r22
    1578:	ac 01       	movw	r20, r24
    157a:	a5 96       	adiw	r28, 0x25	; 37
    157c:	6c ad       	ldd	r22, Y+60	; 0x3c
    157e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1580:	8e ad       	ldd	r24, Y+62	; 0x3e
    1582:	9f ad       	ldd	r25, Y+63	; 0x3f
    1584:	a5 97       	sbiw	r28, 0x25	; 37
    1586:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
    158a:	60 93 40 01 	sts	0x0140, r22
    158e:	70 93 41 01 	sts	0x0141, r23
    1592:	80 93 42 01 	sts	0x0142, r24
    1596:	90 93 43 01 	sts	0x0143, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - 384) - sintheta*(ref_pc[0] - 512);
    159a:	a7 01       	movw	r20, r14
    159c:	96 01       	movw	r18, r12
    159e:	c5 01       	movw	r24, r10
    15a0:	b4 01       	movw	r22, r8
    15a2:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    15a6:	9b 01       	movw	r18, r22
    15a8:	ac 01       	movw	r20, r24
    15aa:	ad 96       	adiw	r28, 0x2d	; 45
    15ac:	6c ad       	ldd	r22, Y+60	; 0x3c
    15ae:	7d ad       	ldd	r23, Y+61	; 0x3d
    15b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    15b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    15b4:	ad 97       	sbiw	r28, 0x2d	; 45
    15b6:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    15ba:	6b 01       	movw	r12, r22
    15bc:	7c 01       	movw	r14, r24
    15be:	a9 96       	adiw	r28, 0x29	; 41
    15c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    15c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    15c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    15c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    15c8:	a9 97       	sbiw	r28, 0x29	; 41
    15ca:	c3 01       	movw	r24, r6
    15cc:	b2 01       	movw	r22, r4
    15ce:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	c7 01       	movw	r24, r14
    15d8:	b6 01       	movw	r22, r12
    15da:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    15de:	60 93 44 01 	sts	0x0144, r22
    15e2:	70 93 45 01 	sts	0x0145, r23
    15e6:	80 93 46 01 	sts	0x0146, r24
    15ea:	90 93 47 01 	sts	0x0147, r25
			ypdir[0] = -sintheta;
    15ee:	d3 01       	movw	r26, r6
    15f0:	c2 01       	movw	r24, r4
    15f2:	b0 58       	subi	r27, 0x80	; 128
    15f4:	80 93 38 01 	sts	0x0138, r24
    15f8:	90 93 39 01 	sts	0x0139, r25
    15fc:	a0 93 3a 01 	sts	0x013A, r26
    1600:	b0 93 3b 01 	sts	0x013B, r27
			ypdir[1] = costheta;
    1604:	80 92 3c 01 	sts	0x013C, r8
    1608:	90 92 3d 01 	sts	0x013D, r9
    160c:	a0 92 3e 01 	sts	0x013E, r10
    1610:	b0 92 3f 01 	sts	0x013F, r11
    1614:	94 c0       	rjmp	.+296    	; 0x173e <__stack+0xc3f>
		}
		else{
			c_wii[0] = ref_pw[0] - costheta*(ref_pc[0] - 512) - sintheta*(ref_pc[1] - 384);
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	54 e4       	ldi	r21, 0x44	; 68
    161e:	a9 96       	adiw	r28, 0x29	; 41
    1620:	6c ad       	ldd	r22, Y+60	; 0x3c
    1622:	7d ad       	ldd	r23, Y+61	; 0x3d
    1624:	8e ad       	ldd	r24, Y+62	; 0x3e
    1626:	9f ad       	ldd	r25, Y+63	; 0x3f
    1628:	a9 97       	sbiw	r28, 0x29	; 41
    162a:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    162e:	6b 01       	movw	r12, r22
    1630:	7c 01       	movw	r14, r24
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 ec       	ldi	r20, 0xC0	; 192
    1638:	53 e4       	ldi	r21, 0x43	; 67
    163a:	a5 96       	adiw	r28, 0x25	; 37
    163c:	6c ad       	ldd	r22, Y+60	; 0x3c
    163e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1640:	8e ad       	ldd	r24, Y+62	; 0x3e
    1642:	9f ad       	ldd	r25, Y+63	; 0x3f
    1644:	a5 97       	sbiw	r28, 0x25	; 37
    1646:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    164a:	a5 96       	adiw	r28, 0x25	; 37
    164c:	6c af       	std	Y+60, r22	; 0x3c
    164e:	7d af       	std	Y+61, r23	; 0x3d
    1650:	8e af       	std	Y+62, r24	; 0x3e
    1652:	9f af       	std	Y+63, r25	; 0x3f
    1654:	a5 97       	sbiw	r28, 0x25	; 37
    1656:	a5 01       	movw	r20, r10
    1658:	94 01       	movw	r18, r8
    165a:	c7 01       	movw	r24, r14
    165c:	b6 01       	movw	r22, r12
    165e:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	e1 96       	adiw	r28, 0x31	; 49
    1668:	6c ad       	ldd	r22, Y+60	; 0x3c
    166a:	7d ad       	ldd	r23, Y+61	; 0x3d
    166c:	8e ad       	ldd	r24, Y+62	; 0x3e
    166e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1670:	e1 97       	sbiw	r28, 0x31	; 49
    1672:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    1676:	a9 96       	adiw	r28, 0x29	; 41
    1678:	6c af       	std	Y+60, r22	; 0x3c
    167a:	7d af       	std	Y+61, r23	; 0x3d
    167c:	8e af       	std	Y+62, r24	; 0x3e
    167e:	9f af       	std	Y+63, r25	; 0x3f
    1680:	a9 97       	sbiw	r28, 0x29	; 41
    1682:	a3 01       	movw	r20, r6
    1684:	92 01       	movw	r18, r4
    1686:	a5 96       	adiw	r28, 0x25	; 37
    1688:	6c ad       	ldd	r22, Y+60	; 0x3c
    168a:	7d ad       	ldd	r23, Y+61	; 0x3d
    168c:	8e ad       	ldd	r24, Y+62	; 0x3e
    168e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1690:	a5 97       	sbiw	r28, 0x25	; 37
    1692:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    1696:	9b 01       	movw	r18, r22
    1698:	ac 01       	movw	r20, r24
    169a:	a9 96       	adiw	r28, 0x29	; 41
    169c:	6c ad       	ldd	r22, Y+60	; 0x3c
    169e:	7d ad       	ldd	r23, Y+61	; 0x3d
    16a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    16a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    16a4:	a9 97       	sbiw	r28, 0x29	; 41
    16a6:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    16aa:	60 93 40 01 	sts	0x0140, r22
    16ae:	70 93 41 01 	sts	0x0141, r23
    16b2:	80 93 42 01 	sts	0x0142, r24
    16b6:	90 93 43 01 	sts	0x0143, r25
			c_wii[1] = ref_pw[1] - costheta*(ref_pc[1] - 384) + sintheta*(ref_pc[0] - 512);
    16ba:	a5 96       	adiw	r28, 0x25	; 37
    16bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    16be:	3d ad       	ldd	r19, Y+61	; 0x3d
    16c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    16c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    16c4:	a5 97       	sbiw	r28, 0x25	; 37
    16c6:	c5 01       	movw	r24, r10
    16c8:	b4 01       	movw	r22, r8
    16ca:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	ad 96       	adiw	r28, 0x2d	; 45
    16d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    16d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    16d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16da:	9f ad       	ldd	r25, Y+63	; 0x3f
    16dc:	ad 97       	sbiw	r28, 0x2d	; 45
    16de:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
    16e2:	a5 96       	adiw	r28, 0x25	; 37
    16e4:	6c af       	std	Y+60, r22	; 0x3c
    16e6:	7d af       	std	Y+61, r23	; 0x3d
    16e8:	8e af       	std	Y+62, r24	; 0x3e
    16ea:	9f af       	std	Y+63, r25	; 0x3f
    16ec:	a5 97       	sbiw	r28, 0x25	; 37
    16ee:	a7 01       	movw	r20, r14
    16f0:	96 01       	movw	r18, r12
    16f2:	c3 01       	movw	r24, r6
    16f4:	b2 01       	movw	r22, r4
    16f6:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    16fa:	9b 01       	movw	r18, r22
    16fc:	ac 01       	movw	r20, r24
    16fe:	a5 96       	adiw	r28, 0x25	; 37
    1700:	6c ad       	ldd	r22, Y+60	; 0x3c
    1702:	7d ad       	ldd	r23, Y+61	; 0x3d
    1704:	8e ad       	ldd	r24, Y+62	; 0x3e
    1706:	9f ad       	ldd	r25, Y+63	; 0x3f
    1708:	a5 97       	sbiw	r28, 0x25	; 37
    170a:	0e 94 93 11 	call	0x2326	; 0x2326 <__addsf3>
    170e:	60 93 44 01 	sts	0x0144, r22
    1712:	70 93 45 01 	sts	0x0145, r23
    1716:	80 93 46 01 	sts	0x0146, r24
    171a:	90 93 47 01 	sts	0x0147, r25
			ypdir[0] = sintheta;
    171e:	40 92 38 01 	sts	0x0138, r4
    1722:	50 92 39 01 	sts	0x0139, r5
    1726:	60 92 3a 01 	sts	0x013A, r6
    172a:	70 92 3b 01 	sts	0x013B, r7
			ypdir[1] = costheta;
    172e:	80 92 3c 01 	sts	0x013C, r8
    1732:	90 92 3d 01 	sts	0x013D, r9
    1736:	a0 92 3e 01 	sts	0x013E, r10
    173a:	b0 92 3f 01 	sts	0x013F, r11
		}
		c_wii_last[0] = c_wii[0];
    173e:	60 91 40 01 	lds	r22, 0x0140
    1742:	70 91 41 01 	lds	r23, 0x0141
    1746:	80 91 42 01 	lds	r24, 0x0142
    174a:	90 91 43 01 	lds	r25, 0x0143
    174e:	60 93 30 01 	sts	0x0130, r22
    1752:	70 93 31 01 	sts	0x0131, r23
    1756:	80 93 32 01 	sts	0x0132, r24
    175a:	90 93 33 01 	sts	0x0133, r25
		c_wii_last[1] = c_wii[1];
    175e:	20 91 44 01 	lds	r18, 0x0144
    1762:	30 91 45 01 	lds	r19, 0x0145
    1766:	40 91 46 01 	lds	r20, 0x0146
    176a:	50 91 47 01 	lds	r21, 0x0147
    176e:	20 93 34 01 	sts	0x0134, r18
    1772:	30 93 35 01 	sts	0x0135, r19
    1776:	40 93 36 01 	sts	0x0136, r20
    177a:	50 93 37 01 	sts	0x0137, r21
		ypdir_last[0] = ypdir[0];
    177e:	c0 90 38 01 	lds	r12, 0x0138
    1782:	d0 90 39 01 	lds	r13, 0x0139
    1786:	e0 90 3a 01 	lds	r14, 0x013A
    178a:	f0 90 3b 01 	lds	r15, 0x013B
    178e:	c0 92 28 01 	sts	0x0128, r12
    1792:	d0 92 29 01 	sts	0x0129, r13
    1796:	e0 92 2a 01 	sts	0x012A, r14
    179a:	f0 92 2b 01 	sts	0x012B, r15
		ypdir_last[1] = ypdir[1];
    179e:	c0 90 3c 01 	lds	r12, 0x013C
    17a2:	d0 90 3d 01 	lds	r13, 0x013D
    17a6:	e0 90 3e 01 	lds	r14, 0x013E
    17aa:	f0 90 3f 01 	lds	r15, 0x013F
    17ae:	c0 92 2c 01 	sts	0x012C, r12
    17b2:	d0 92 2d 01 	sts	0x012D, r13
    17b6:	e0 92 2e 01 	sts	0x012E, r14
    17ba:	f0 92 2f 01 	sts	0x012F, r15
		
		int if_reach = find_if_reach(c_wii[0], c_wii[1]);
    17be:	0e 94 8c 04 	call	0x918	; 0x918 <find_if_reach>
		if (!if_reach){
    17c2:	89 2b       	or	r24, r25
    17c4:	99 f4       	brne	.+38     	; 0x17ec <__stack+0xced>
			cal_angle(if_pos_sin, sintheta, costheta);
    17c6:	95 01       	movw	r18, r10
    17c8:	84 01       	movw	r16, r8
    17ca:	b3 01       	movw	r22, r6
    17cc:	a2 01       	movw	r20, r4
    17ce:	c1 01       	movw	r24, r2
    17d0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <cal_angle>
			PID_alpha(1, 0, 1);
    17d4:	e1 2c       	mov	r14, r1
    17d6:	f1 2c       	mov	r15, r1
    17d8:	00 e8       	ldi	r16, 0x80	; 128
    17da:	1f e3       	ldi	r17, 0x3F	; 63
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	c8 01       	movw	r24, r16
    17e4:	b7 01       	movw	r22, r14
    17e6:	0e 94 9a 02 	call	0x534	; 0x534 <PID_alpha>
    17ea:	49 c0       	rjmp	.+146    	; 0x187e <__stack+0xd7f>
		}
		else{ // reach goal, stop
			OCR1B = 0;
    17ec:	10 92 8b 00 	sts	0x008B, r1
    17f0:	10 92 8a 00 	sts	0x008A, r1
			OCR1C = 0;
    17f4:	10 92 8d 00 	sts	0x008D, r1
    17f8:	10 92 8c 00 	sts	0x008C, r1
    17fc:	40 c0       	rjmp	.+128    	; 0x187e <__stack+0xd7f>
		}
	}
	else{
		c_wii[0] = c_wii_last[0];
    17fe:	80 91 30 01 	lds	r24, 0x0130
    1802:	90 91 31 01 	lds	r25, 0x0131
    1806:	a0 91 32 01 	lds	r26, 0x0132
    180a:	b0 91 33 01 	lds	r27, 0x0133
    180e:	80 93 40 01 	sts	0x0140, r24
    1812:	90 93 41 01 	sts	0x0141, r25
    1816:	a0 93 42 01 	sts	0x0142, r26
    181a:	b0 93 43 01 	sts	0x0143, r27
		c_wii[1] = c_wii_last[1];
    181e:	80 91 34 01 	lds	r24, 0x0134
    1822:	90 91 35 01 	lds	r25, 0x0135
    1826:	a0 91 36 01 	lds	r26, 0x0136
    182a:	b0 91 37 01 	lds	r27, 0x0137
    182e:	80 93 44 01 	sts	0x0144, r24
    1832:	90 93 45 01 	sts	0x0145, r25
    1836:	a0 93 46 01 	sts	0x0146, r26
    183a:	b0 93 47 01 	sts	0x0147, r27
		ypdir[0] = ypdir_last[0];
    183e:	80 91 28 01 	lds	r24, 0x0128
    1842:	90 91 29 01 	lds	r25, 0x0129
    1846:	a0 91 2a 01 	lds	r26, 0x012A
    184a:	b0 91 2b 01 	lds	r27, 0x012B
    184e:	80 93 38 01 	sts	0x0138, r24
    1852:	90 93 39 01 	sts	0x0139, r25
    1856:	a0 93 3a 01 	sts	0x013A, r26
    185a:	b0 93 3b 01 	sts	0x013B, r27
		ypdir[1] = ypdir_last[1];
    185e:	80 91 2c 01 	lds	r24, 0x012C
    1862:	90 91 2d 01 	lds	r25, 0x012D
    1866:	a0 91 2e 01 	lds	r26, 0x012E
    186a:	b0 91 2f 01 	lds	r27, 0x012F
    186e:	80 93 3c 01 	sts	0x013C, r24
    1872:	90 93 3d 01 	sts	0x013D, r25
    1876:	a0 93 3e 01 	sts	0x013E, r26
    187a:	b0 93 3f 01 	sts	0x013F, r27
	}
	m_green(OFF);
    187e:	6a 9a       	sbi	0x0d, 2	; 13
    1880:	72 9a       	sbi	0x0e, 2	; 14
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <__stack+0xdad>
    1884:	e9 96       	adiw	r28, 0x39	; 57
    1886:	2e ad       	ldd	r18, Y+62	; 0x3e
    1888:	3f ad       	ldd	r19, Y+63	; 0x3f
    188a:	e9 97       	sbiw	r28, 0x39	; 57
    188c:	2c 5f       	subi	r18, 0xFC	; 252
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	e9 96       	adiw	r28, 0x39	; 57
    1892:	3f af       	std	Y+63, r19	; 0x3f
    1894:	2e af       	std	Y+62, r18	; 0x3e
    1896:	e9 97       	sbiw	r28, 0x39	; 57
    1898:	e3 96       	adiw	r28, 0x33	; 51
    189a:	8e ad       	ldd	r24, Y+62	; 0x3e
    189c:	9f ad       	ldd	r25, Y+63	; 0x3f
    189e:	e3 97       	sbiw	r28, 0x33	; 51
    18a0:	04 96       	adiw	r24, 0x04	; 4
    18a2:	e3 96       	adiw	r28, 0x33	; 51
    18a4:	9f af       	std	Y+63, r25	; 0x3f
    18a6:	8e af       	std	Y+62, r24	; 0x3e
    18a8:	e3 97       	sbiw	r28, 0x33	; 51
    18aa:	43 ca       	rjmp	.-2938   	; 0xd32 <__stack+0x233>
}
    18ac:	c4 58       	subi	r28, 0x84	; 132
    18ae:	df 4f       	sbci	r29, 0xFF	; 255
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	9f 90       	pop	r9
    18d0:	8f 90       	pop	r8
    18d2:	7f 90       	pop	r7
    18d4:	6f 90       	pop	r6
    18d6:	5f 90       	pop	r5
    18d8:	4f 90       	pop	r4
    18da:	3f 90       	pop	r3
    18dc:	2f 90       	pop	r2
    18de:	08 95       	ret

000018e0 <main>:
void cal_angle(int if_pos_sign, float sintheta, float costheta);
void PID_alpha(float Kp, float Ki, float Kd);
int find_if_reach(float x, float y);

int main(void){
	m_clockdivide(0);
    18e0:	e1 e6       	ldi	r30, 0x61	; 97
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 e8       	ldi	r24, 0x80	; 128
    18e6:	80 83       	st	Z, r24
    18e8:	10 82       	st	Z, r1
	
	m_red(ON);
    18ea:	6e 9a       	sbi	0x0d, 6	; 13
    18ec:	76 98       	cbi	0x0e, 6	; 14
	m_usb_init();
    18ee:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <m_usb_init>
	while(!m_usb_isconnected());
    18f2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <m_usb_isconnected>
    18f6:	88 23       	and	r24, r24
    18f8:	e1 f3       	breq	.-8      	; 0x18f2 <main+0x12>
	m_red(OFF);
    18fa:	6e 9a       	sbi	0x0d, 6	; 13
    18fc:	76 9a       	sbi	0x0e, 6	; 14
	
	m_green(ON);
    18fe:	6a 9a       	sbi	0x0d, 2	; 13
    1900:	72 98       	cbi	0x0e, 2	; 14
	while(!m_wii_open());
    1902:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <m_wii_open>
    1906:	88 23       	and	r24, r24
    1908:	e1 f3       	breq	.-8      	; 0x1902 <main+0x22>
	m_green(OFF);
    190a:	6a 9a       	sbi	0x0d, 2	; 13
    190c:	72 9a       	sbi	0x0e, 2	; 14
		usb_tx_string("Press any key  \n");
	}
	dummy = m_usb_rx_char();
	*/
	//calibration();
	init_timer();
    190e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <init_timer>
		m_wii_read(&blobs[0]);
		
		localization();
		
		m_usb_tx_string("Position x:");
		m_usb_tx_int(c_wii[0]);
    1912:	0f 2e       	mov	r0, r31
    1914:	f0 e4       	ldi	r31, 0x40	; 64
    1916:	cf 2e       	mov	r12, r31
    1918:	f1 e0       	ldi	r31, 0x01	; 1
    191a:	df 2e       	mov	r13, r31
    191c:	f0 2d       	mov	r31, r0
		m_usb_tx_string("		y:");
		m_usb_tx_int(c_wii[1]);
    191e:	0f 2e       	mov	r0, r31
    1920:	f4 e4       	ldi	r31, 0x44	; 68
    1922:	ef 2e       	mov	r14, r31
    1924:	f1 e0       	ldi	r31, 0x01	; 1
    1926:	ff 2e       	mov	r15, r31
    1928:	f0 2d       	mov	r31, r0
		m_usb_tx_string("\n");
		
		m_usb_tx_string("Direction vx: 0.");
		m_usb_tx_int(ypdir[0]*1000);
    192a:	08 e3       	ldi	r16, 0x38	; 56
    192c:	11 e0       	ldi	r17, 0x01	; 1
		m_usb_tx_string("	vy: 0.");
		m_usb_tx_int(ypdir[1]*1000);
    192e:	cc e3       	ldi	r28, 0x3C	; 60
    1930:	d1 e0       	ldi	r29, 0x01	; 1
	*/
	//calibration();
	init_timer();
	
	while(1){
		m_wii_read(&blobs[0]);
    1932:	88 e4       	ldi	r24, 0x48	; 72
    1934:	91 e0       	ldi	r25, 0x01	; 1
    1936:	0e 94 e5 10 	call	0x21ca	; 0x21ca <m_wii_read>
		
		localization();
    193a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <localization>
		
		m_usb_tx_string("Position x:");
    193e:	8b ef       	ldi	r24, 0xFB	; 251
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(c_wii[0]);
    1946:	f6 01       	movw	r30, r12
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    1954:	cb 01       	movw	r24, r22
    1956:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("		y:");
    195a:	86 ef       	ldi	r24, 0xF6	; 246
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(c_wii[1]);
    1962:	f7 01       	movw	r30, r14
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    1970:	cb 01       	movw	r24, r22
    1972:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    1976:	84 ef       	ldi	r24, 0xF4	; 244
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		
		m_usb_tx_string("Direction vx: 0.");
    197e:	83 ee       	ldi	r24, 0xE3	; 227
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ypdir[0]*1000);
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a e7       	ldi	r20, 0x7A	; 122
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	f8 01       	movw	r30, r16
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    199c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    19a0:	cb 01       	movw	r24, r22
    19a2:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("	vy: 0.");
    19a6:	8b ed       	ldi	r24, 0xDB	; 219
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
		m_usb_tx_int(ypdir[1]*1000);
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	4a e7       	ldi	r20, 0x7A	; 122
    19b4:	54 e4       	ldi	r21, 0x44	; 68
    19b6:	68 81       	ld	r22, Y
    19b8:	79 81       	ldd	r23, Y+1	; 0x01
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	0e 94 8a 13 	call	0x2714	; 0x2714 <__mulsf3>
    19c2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fixsfsi>
    19c6:	cb 01       	movw	r24, r22
    19c8:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <m_usb_tx_int>
		m_usb_tx_string("\n");
    19cc:	89 ed       	ldi	r24, 0xD9	; 217
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <print_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19d4:	ff e3       	ldi	r31, 0x3F	; 63
    19d6:	2d e0       	ldi	r18, 0x0D	; 13
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	f1 50       	subi	r31, 0x01	; 1
    19dc:	20 40       	sbci	r18, 0x00	; 0
    19de:	80 40       	sbci	r24, 0x00	; 0
    19e0:	e1 f7       	brne	.-8      	; 0x19da <main+0xfa>
    19e2:	00 c0       	rjmp	.+0      	; 0x19e4 <main+0x104>
    19e4:	00 00       	nop
    19e6:	a5 cf       	rjmp	.-182    	; 0x1932 <main+0x52>

000019e8 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    19e8:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    19ea:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    19ec:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    19ee:	8c e0       	ldi	r24, 0x0C	; 12
    19f0:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    19f4:	e9 e6       	ldi	r30, 0x69	; 105
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 62       	ori	r24, 0x20	; 32
    19fc:	80 83       	st	Z, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 7e       	andi	r24, 0xEF	; 239
    1a02:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1a04:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1a06:	78 94       	sei
    1a08:	08 95       	ret

00001a0a <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1a10:	80 ea       	ldi	r24, 0xA0	; 160
    1a12:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1a16:	82 e1       	ldi	r24, 0x12	; 18
    1a18:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1a1a:	09 b4       	in	r0, 0x29	; 41
    1a1c:	00 fe       	sbrs	r0, 0
    1a1e:	fd cf       	rjmp	.-6      	; 0x1a1a <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1a20:	80 e9       	ldi	r24, 0x90	; 144
    1a22:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1a26:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1a2a:	10 92 63 01 	sts	0x0163, r1
	cdc_line_rtsdtr = 0;
    1a2e:	10 92 60 01 	sts	0x0160, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1a32:	8c e0       	ldi	r24, 0x0C	; 12
    1a34:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1a38:	78 94       	sei
    1a3a:	08 95       	ret

00001a3c <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    1a3c:	80 91 63 01 	lds	r24, 0x0163
}
    1a40:	08 95       	ret

00001a42 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1a46:	90 91 63 01 	lds	r25, 0x0163
    1a4a:	99 23       	and	r25, r25
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <m_usb_tx_char+0xe>
    1a4e:	4c c0       	rjmp	.+152    	; 0x1ae8 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1a50:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1a52:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1a54:	24 e0       	ldi	r18, 0x04	; 4
    1a56:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1a5a:	20 91 61 01 	lds	r18, 0x0161
    1a5e:	22 23       	and	r18, r18
    1a60:	49 f0       	breq	.+18     	; 0x1a74 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1a62:	20 91 e8 00 	lds	r18, 0x00E8
    1a66:	25 fd       	sbrc	r18, 5
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1a6a:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	41 c0       	rjmp	.+130    	; 0x1af2 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    1a70:	10 92 61 01 	sts	0x0161, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1a74:	30 91 e4 00 	lds	r19, 0x00E4
    1a78:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1a7a:	20 91 e8 00 	lds	r18, 0x00E8
    1a7e:	25 fd       	sbrc	r18, 5
    1a80:	24 c0       	rjmp	.+72     	; 0x1aca <m_usb_tx_char+0x88>
		SREG = intr_state;
    1a82:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1a84:	90 91 e4 00 	lds	r25, 0x00E4
    1a88:	93 17       	cp	r25, r19
    1a8a:	81 f0       	breq	.+32     	; 0x1aac <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1a8c:	90 91 63 01 	lds	r25, 0x0163
    1a90:	99 23       	and	r25, r25
    1a92:	61 f1       	breq	.+88     	; 0x1aec <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1a94:	a9 ee       	ldi	r26, 0xE9	; 233
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1a9a:	e8 ee       	ldi	r30, 0xE8	; 232
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1a9e:	c4 ee       	ldi	r28, 0xE4	; 228
    1aa0:	d0 e0       	ldi	r29, 0x00	; 0
    1aa2:	0d c0       	rjmp	.+26     	; 0x1abe <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1aa4:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1aa6:	98 81       	ld	r25, Y
    1aa8:	93 13       	cpse	r25, r19
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	80 93 61 01 	sts	0x0161, r24
			return -1;
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	1e c0       	rjmp	.+60     	; 0x1af2 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1ab6:	90 91 63 01 	lds	r25, 0x0163
    1aba:	99 23       	and	r25, r25
    1abc:	c9 f0       	breq	.+50     	; 0x1af0 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    1abe:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1ac0:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1ac2:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1ac4:	20 81       	ld	r18, Z
    1ac6:	25 ff       	sbrs	r18, 5
    1ac8:	ed cf       	rjmp	.-38     	; 0x1aa4 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1aca:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1ace:	80 91 e8 00 	lds	r24, 0x00E8
    1ad2:	85 fd       	sbrc	r24, 5
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <m_usb_tx_char+0x9a>
    1ad6:	8a e3       	ldi	r24, 0x3A	; 58
    1ad8:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1adc:	85 e0       	ldi	r24, 0x05	; 5
    1ade:	80 93 62 01 	sts	0x0162, r24
	SREG = intr_state;
    1ae2:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	05 c0       	rjmp	.+10     	; 0x1af2 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1aec:	8f ef       	ldi	r24, 0xFF	; 255
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <m_usb_tx_char+0xb0>
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	8f 93       	push	r24
    1b04:	9f 93       	push	r25
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1b0a:	e1 ee       	ldi	r30, 0xE1	; 225
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
        UDINT = 0;
    1b10:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1b12:	83 ff       	sbrs	r24, 3
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <__vector_10+0x40>
		UENUM = 0;
    1b16:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1b20:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1b24:	92 e1       	ldi	r25, 0x12	; 18
    1b26:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1b2a:	98 e0       	ldi	r25, 0x08	; 8
    1b2c:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1b30:	10 92 63 01 	sts	0x0163, r1
		cdc_line_rtsdtr = 0;
    1b34:	10 92 60 01 	sts	0x0160, r1
        }
	if (intbits & (1<<SOFI)) {
    1b38:	82 ff       	sbrs	r24, 2
    1b3a:	13 c0       	rjmp	.+38     	; 0x1b62 <__vector_10+0x6a>
		if (usb_configuration) {
    1b3c:	80 91 63 01 	lds	r24, 0x0163
    1b40:	88 23       	and	r24, r24
    1b42:	79 f0       	breq	.+30     	; 0x1b62 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1b44:	80 91 62 01 	lds	r24, 0x0162
			if (t) {
    1b48:	88 23       	and	r24, r24
    1b4a:	59 f0       	breq	.+22     	; 0x1b62 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	80 93 62 01 	sts	0x0162, r24
				if (!t) {
    1b52:	81 11       	cpse	r24, r1
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1b56:	84 e0       	ldi	r24, 0x04	; 4
    1b58:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1b5c:	8a e3       	ldi	r24, 0x3A	; 58
    1b5e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	0f 90       	pop	r0
    1b70:	1f 90       	pop	r1
    1b72:	18 95       	reti

00001b74 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	2f 93       	push	r18
    1b84:	3f 93       	push	r19
    1b86:	4f 93       	push	r20
    1b88:	5f 93       	push	r21
    1b8a:	6f 93       	push	r22
    1b8c:	7f 93       	push	r23
    1b8e:	8f 93       	push	r24
    1b90:	9f 93       	push	r25
    1b92:	af 93       	push	r26
    1b94:	bf 93       	push	r27
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1b9e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1ba2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1ba6:	83 ff       	sbrs	r24, 3
    1ba8:	4e c1       	rjmp	.+668    	; 0x1e46 <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    1baa:	e1 ef       	ldi	r30, 0xF1	; 241
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    1bb0:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1bb2:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1bb4:	80 81       	ld	r24, Z
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    1bba:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    1bbc:	50 81       	ld	r21, Z
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	75 2b       	or	r23, r21
                wLength = UEDATX;
    1bc4:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    1bc6:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1bc8:	82 ef       	ldi	r24, 0xF2	; 242
    1bca:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1bce:	46 30       	cpi	r20, 0x06	; 6
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <__vector_11+0x60>
    1bd2:	58 c0       	rjmp	.+176    	; 0x1c84 <__vector_11+0x110>
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1bd6:	81 e2       	ldi	r24, 0x21	; 33
    1bd8:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1bdc:	3b c1       	rjmp	.+630    	; 0x1e54 <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1bde:	c6 e0       	ldi	r28, 0x06	; 6
    1be0:	87 e0       	ldi	r24, 0x07	; 7
    1be2:	92 e0       	ldi	r25, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1be4:	fc 01       	movw	r30, r24
    1be6:	45 91       	lpm	r20, Z+
    1be8:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    1bea:	24 17       	cp	r18, r20
    1bec:	35 07       	cpc	r19, r21
    1bee:	11 f0       	breq	.+4      	; 0x1bf4 <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    1bf0:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1bf2:	23 c0       	rjmp	.+70     	; 0x1c3a <__vector_11+0xc6>
				}
				list += 2;
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1bf8:	45 91       	lpm	r20, Z+
    1bfa:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    1bfc:	64 17       	cp	r22, r20
    1bfe:	75 07       	cpc	r23, r21
    1c00:	11 f0       	breq	.+4      	; 0x1c06 <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    1c02:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1c04:	1a c0       	rjmp	.+52     	; 0x1c3a <__vector_11+0xc6>
				}
				list += 2;
    1c06:	fc 01       	movw	r30, r24
    1c08:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1c0a:	25 91       	lpm	r18, Z+
    1c0c:	34 91       	lpm	r19, Z
				list += 2;
    1c0e:	fc 01       	movw	r30, r24
    1c10:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1c12:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1c14:	8b 2f       	mov	r24, r27
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1c1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	19 f0       	breq	.+6      	; 0x1c26 <__vector_11+0xb2>
    1c20:	10 f0       	brcs	.+4      	; 0x1c26 <__vector_11+0xb2>
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	85 17       	cp	r24, r21
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <__vector_11+0xb8>
    1c2a:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1c2c:	a8 ee       	ldi	r26, 0xE8	; 232
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1c30:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c32:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1c34:	c1 ef       	ldi	r28, 0xF1	; 241
    1c36:	d0 e0       	ldi	r29, 0x00	; 0
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <__vector_11+0xcc>
    1c3a:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1c3c:	99 f6       	brne	.-90     	; 0x1be4 <__vector_11+0x70>
    1c3e:	cb cf       	rjmp	.-106    	; 0x1bd6 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1c40:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1c42:	98 2f       	mov	r25, r24
    1c44:	95 70       	andi	r25, 0x05	; 5
    1c46:	e1 f3       	breq	.-8      	; 0x1c40 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    1c48:	82 fd       	sbrc	r24, 2
    1c4a:	04 c1       	rjmp	.+520    	; 0x1e54 <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1c4c:	45 2f       	mov	r20, r21
    1c4e:	51 31       	cpi	r21, 0x11	; 17
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <__vector_11+0xe0>
    1c52:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    1c54:	44 23       	and	r20, r20
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <__vector_11+0xe6>
    1c58:	fa c0       	rjmp	.+500    	; 0x1e4e <__vector_11+0x2da>
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    1c5e:	94 91       	lpm	r25, Z
    1c60:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1c62:	81 50       	subi	r24, 0x01	; 1
    1c64:	31 96       	adiw	r30, 0x01	; 1
    1c66:	81 11       	cpse	r24, r1
    1c68:	fa cf       	rjmp	.-12     	; 0x1c5e <__vector_11+0xea>
    1c6a:	8f ef       	ldi	r24, 0xFF	; 255
    1c6c:	84 0f       	add	r24, r20
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	28 0f       	add	r18, r24
    1c74:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1c76:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c78:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1c7a:	51 11       	cpse	r21, r1
    1c7c:	e1 cf       	rjmp	.-62     	; 0x1c40 <__vector_11+0xcc>
    1c7e:	40 31       	cpi	r20, 0x10	; 16
    1c80:	f9 f2       	breq	.-66     	; 0x1c40 <__vector_11+0xcc>
    1c82:	e8 c0       	rjmp	.+464    	; 0x1e54 <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1c84:	45 30       	cpi	r20, 0x05	; 5
    1c86:	61 f4       	brne	.+24     	; 0x1ca0 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c88:	8e ef       	ldi	r24, 0xFE	; 254
    1c8a:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c8e:	e8 ee       	ldi	r30, 0xE8	; 232
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 ff       	sbrs	r24, 0
    1c96:	fd cf       	rjmp	.-6      	; 0x1c92 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1c98:	20 68       	ori	r18, 0x80	; 128
    1c9a:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1c9e:	da c0       	rjmp	.+436    	; 0x1e54 <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1ca0:	49 30       	cpi	r20, 0x09	; 9
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <__vector_11+0x132>
    1ca4:	36 c0       	rjmp	.+108    	; 0x1d12 <__vector_11+0x19e>
    1ca6:	c1 11       	cpse	r28, r1
    1ca8:	5f c0       	rjmp	.+190    	; 0x1d68 <__vector_11+0x1f4>
			usb_configuration = wValue;
    1caa:	20 93 63 01 	sts	0x0163, r18
			cdc_line_rtsdtr = 0;
    1cae:	10 92 60 01 	sts	0x0160, r1
			transmit_flush_timer = 0;
    1cb2:	10 92 62 01 	sts	0x0162, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cb6:	8e ef       	ldi	r24, 0xFE	; 254
    1cb8:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1cbc:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1cbe:	80 eb       	ldi	r24, 0xB0	; 176
    1cc0:	92 e0       	ldi	r25, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    1cc2:	c9 ee       	ldi	r28, 0xE9	; 233
    1cc4:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1cc6:	ab ee       	ldi	r26, 0xEB	; 235
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1cca:	6c ee       	ldi	r22, 0xEC	; 236
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1cce:	4d ee       	ldi	r20, 0xED	; 237
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1cd2:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	fc 01       	movw	r30, r24
    1cdc:	04 91       	lpm	r16, Z
				UECONX = en;
    1cde:	0c 93       	st	X, r16
				if (en) {
    1ce0:	00 23       	and	r16, r16
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    1ce4:	f9 01       	movw	r30, r18
    1ce6:	24 91       	lpm	r18, Z
    1ce8:	fb 01       	movw	r30, r22
    1cea:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    1cec:	9c 01       	movw	r18, r24
    1cee:	2d 5f       	subi	r18, 0xFD	; 253
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	32 96       	adiw	r30, 0x02	; 2
    1cf6:	84 91       	lpm	r24, Z
    1cf8:	fa 01       	movw	r30, r20
    1cfa:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1cfc:	1f 5f       	subi	r17, 0xFF	; 255
    1cfe:	15 30       	cpi	r17, 0x05	; 5
    1d00:	11 f0       	breq	.+4      	; 0x1d06 <__vector_11+0x192>
    1d02:	c9 01       	movw	r24, r18
    1d04:	e6 cf       	rjmp	.-52     	; 0x1cd2 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1d06:	ea ee       	ldi	r30, 0xEA	; 234
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8e e1       	ldi	r24, 0x1E	; 30
    1d0c:	80 83       	st	Z, r24
        		UERST = 0;
    1d0e:	10 82       	st	Z, r1
			return;
    1d10:	a1 c0       	rjmp	.+322    	; 0x1e54 <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1d12:	48 30       	cpi	r20, 0x08	; 8
    1d14:	81 f4       	brne	.+32     	; 0x1d36 <__vector_11+0x1c2>
    1d16:	c0 38       	cpi	r28, 0x80	; 128
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <__vector_11+0x1a8>
    1d1a:	42 c0       	rjmp	.+132    	; 0x1da0 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1d1c:	e8 ee       	ldi	r30, 0xE8	; 232
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	80 ff       	sbrs	r24, 0
    1d24:	fd cf       	rjmp	.-6      	; 0x1d20 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1d26:	80 91 63 01 	lds	r24, 0x0163
    1d2a:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d2e:	8e ef       	ldi	r24, 0xFE	; 254
    1d30:	80 93 e8 00 	sts	0x00E8, r24
    1d34:	8f c0       	rjmp	.+286    	; 0x1e54 <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1d36:	41 32       	cpi	r20, 0x21	; 33
    1d38:	b9 f4       	brne	.+46     	; 0x1d68 <__vector_11+0x1f4>
    1d3a:	c1 3a       	cpi	r28, 0xA1	; 161
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <__vector_11+0x1cc>
    1d3e:	40 c0       	rjmp	.+128    	; 0x1dc0 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1d40:	e8 ee       	ldi	r30, 0xE8	; 232
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	80 ff       	sbrs	r24, 0
    1d48:	fd cf       	rjmp	.-6      	; 0x1d44 <__vector_11+0x1d0>
    1d4a:	e8 e1       	ldi	r30, 0x18	; 24
    1d4c:	f1 e0       	ldi	r31, 0x01	; 1
    1d4e:	8f e1       	ldi	r24, 0x1F	; 31
    1d50:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1d52:	a1 ef       	ldi	r26, 0xF1	; 241
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	21 91       	ld	r18, Z+
    1d58:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1d5a:	e8 17       	cp	r30, r24
    1d5c:	f9 07       	cpc	r31, r25
    1d5e:	d9 f7       	brne	.-10     	; 0x1d56 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d60:	8e ef       	ldi	r24, 0xFE	; 254
    1d62:	80 93 e8 00 	sts	0x00E8, r24
    1d66:	76 c0       	rjmp	.+236    	; 0x1e54 <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1d68:	40 32       	cpi	r20, 0x20	; 32
    1d6a:	d1 f4       	brne	.+52     	; 0x1da0 <__vector_11+0x22c>
    1d6c:	c1 32       	cpi	r28, 0x21	; 33
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <__vector_11+0x1fe>
    1d70:	43 c0       	rjmp	.+134    	; 0x1df8 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1d72:	e8 ee       	ldi	r30, 0xE8	; 232
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	82 ff       	sbrs	r24, 2
    1d7a:	fd cf       	rjmp	.-6      	; 0x1d76 <__vector_11+0x202>
    1d7c:	e8 e1       	ldi	r30, 0x18	; 24
    1d7e:	f1 e0       	ldi	r31, 0x01	; 1
    1d80:	8f e1       	ldi	r24, 0x1F	; 31
    1d82:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1d84:	a1 ef       	ldi	r26, 0xF1	; 241
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	2c 91       	ld	r18, X
    1d8a:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1d8c:	e8 17       	cp	r30, r24
    1d8e:	f9 07       	cpc	r31, r25
    1d90:	d9 f7       	brne	.-10     	; 0x1d88 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1d92:	e8 ee       	ldi	r30, 0xE8	; 232
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	8b ef       	ldi	r24, 0xFB	; 251
    1d98:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d9a:	8e ef       	ldi	r24, 0xFE	; 254
    1d9c:	80 83       	st	Z, r24
    1d9e:	5a c0       	rjmp	.+180    	; 0x1e54 <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1da0:	42 32       	cpi	r20, 0x22	; 34
    1da2:	71 f4       	brne	.+28     	; 0x1dc0 <__vector_11+0x24c>
    1da4:	c1 32       	cpi	r28, 0x21	; 33
    1da6:	09 f0       	breq	.+2      	; 0x1daa <__vector_11+0x236>
    1da8:	4e c0       	rjmp	.+156    	; 0x1e46 <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    1daa:	20 93 60 01 	sts	0x0160, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1dae:	e8 ee       	ldi	r30, 0xE8	; 232
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 ff       	sbrs	r24, 0
    1db6:	fd cf       	rjmp	.-6      	; 0x1db2 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1db8:	8e ef       	ldi	r24, 0xFE	; 254
    1dba:	80 93 e8 00 	sts	0x00E8, r24
    1dbe:	4a c0       	rjmp	.+148    	; 0x1e54 <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1dc0:	41 11       	cpse	r20, r1
    1dc2:	1a c0       	rjmp	.+52     	; 0x1df8 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1dc4:	e8 ee       	ldi	r30, 0xE8	; 232
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 ff       	sbrs	r24, 0
    1dcc:	fd cf       	rjmp	.-6      	; 0x1dc8 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1dce:	c2 38       	cpi	r28, 0x82	; 130
    1dd0:	51 f4       	brne	.+20     	; 0x1de6 <__vector_11+0x272>
				UENUM = wIndex;
    1dd2:	e9 ee       	ldi	r30, 0xE9	; 233
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    1dd8:	80 91 eb 00 	lds	r24, 0x00EB
    1ddc:	85 fb       	bst	r24, 5
    1dde:	88 27       	eor	r24, r24
    1de0:	80 f9       	bld	r24, 0
				UENUM = 0;
    1de2:	10 82       	st	Z, r1
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1de6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1de8:	e1 ef       	ldi	r30, 0xF1	; 241
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 83       	st	Z, r24
			UEDATX = 0;
    1dee:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1df0:	8e ef       	ldi	r24, 0xFE	; 254
    1df2:	80 93 e8 00 	sts	0x00E8, r24
    1df6:	2e c0       	rjmp	.+92     	; 0x1e54 <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1df8:	84 2f       	mov	r24, r20
    1dfa:	8d 7f       	andi	r24, 0xFD	; 253
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	19 f5       	brne	.+70     	; 0x1e46 <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    1e00:	c2 30       	cpi	r28, 0x02	; 2
    1e02:	09 f5       	brne	.+66     	; 0x1e46 <__vector_11+0x2d2>
    1e04:	23 2b       	or	r18, r19
    1e06:	f9 f4       	brne	.+62     	; 0x1e46 <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    1e08:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1e0a:	8f ef       	ldi	r24, 0xFF	; 255
    1e0c:	86 0f       	add	r24, r22
    1e0e:	84 30       	cpi	r24, 0x04	; 4
    1e10:	d0 f4       	brcc	.+52     	; 0x1e46 <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e12:	8e ef       	ldi	r24, 0xFE	; 254
    1e14:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1e18:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    1e1c:	43 30       	cpi	r20, 0x03	; 3
    1e1e:	21 f4       	brne	.+8      	; 0x1e28 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1e20:	81 e2       	ldi	r24, 0x21	; 33
    1e22:	80 93 eb 00 	sts	0x00EB, r24
    1e26:	16 c0       	rjmp	.+44     	; 0x1e54 <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1e28:	89 e1       	ldi	r24, 0x19	; 25
    1e2a:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <__vector_11+0x2c4>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	6a 95       	dec	r22
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <__vector_11+0x2c0>
    1e3c:	ea ee       	ldi	r30, 0xEA	; 234
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 83       	st	Z, r24
					UERST = 0;
    1e42:	10 82       	st	Z, r1
    1e44:	07 c0       	rjmp	.+14     	; 0x1e54 <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1e46:	81 e2       	ldi	r24, 0x21	; 33
    1e48:	80 93 eb 00 	sts	0x00EB, r24
    1e4c:	03 c0       	rjmp	.+6      	; 0x1e54 <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e4e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1e50:	51 11       	cpse	r21, r1
    1e52:	f6 ce       	rjmp	.-532    	; 0x1c40 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	bf 91       	pop	r27
    1e5e:	af 91       	pop	r26
    1e60:	9f 91       	pop	r25
    1e62:	8f 91       	pop	r24
    1e64:	7f 91       	pop	r23
    1e66:	6f 91       	pop	r22
    1e68:	5f 91       	pop	r21
    1e6a:	4f 91       	pop	r20
    1e6c:	3f 91       	pop	r19
    1e6e:	2f 91       	pop	r18
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0f 90       	pop	r0
    1e7a:	1f 90       	pop	r1
    1e7c:	18 95       	reti

00001e7e <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1e84:	ec 01       	movw	r28, r24
    1e86:	21 96       	adiw	r28, 0x01	; 1
    1e88:	fc 01       	movw	r30, r24
    1e8a:	14 91       	lpm	r17, Z
		if (!c) break;
    1e8c:	11 23       	and	r17, r17
    1e8e:	69 f0       	breq	.+26     	; 0x1eaa <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    1e90:	1a 30       	cpi	r17, 0x0A	; 10
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <print_P+0x1c>
    1e94:	8d e0       	ldi	r24, 0x0D	; 13
    1e96:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <m_usb_tx_char>
		usb_tx_char(c);
    1e9a:	81 2f       	mov	r24, r17
    1e9c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	14 91       	lpm	r17, Z
    1ea4:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    1ea6:	11 11       	cpse	r17, r1
    1ea8:	f3 cf       	rjmp	.-26     	; 0x1e90 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	08 95       	ret

00001eb2 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	27 97       	sbiw	r28, 0x07	; 7
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1ece:	8e 01       	movw	r16, r28
    1ed0:	0f 5f       	subi	r16, 0xFF	; 255
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	27 e0       	ldi	r18, 0x07	; 7
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	11 92       	st	Z+, r1
    1eda:	2a 95       	dec	r18
    1edc:	e9 f7       	brne	.-6      	; 0x1ed8 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1ede:	4a e0       	ldi	r20, 0x0A	; 10
    1ee0:	b8 01       	movw	r22, r16
    1ee2:	0e 94 44 14 	call	0x2888	; 0x2888 <__itoa_ncheck>
    1ee6:	7e 01       	movw	r14, r28
    1ee8:	f8 e0       	ldi	r31, 0x08	; 8
    1eea:	ef 0e       	add	r14, r31
    1eec:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1eee:	f8 01       	movw	r30, r16
    1ef0:	81 91       	ld	r24, Z+
    1ef2:	8f 01       	movw	r16, r30
    1ef4:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1ef6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1efa:	0e 15       	cp	r16, r14
    1efc:	1f 05       	cpc	r17, r15
    1efe:	b9 f7       	brne	.-18     	; 0x1eee <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1f00:	27 96       	adiw	r28, 0x07	; 7
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	08 95       	ret

00001f1a <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1f1e:	ec eb       	ldi	r30, 0xBC	; 188
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	88 23       	and	r24, r24
    1f26:	34 f0       	brlt	.+12     	; 0x1f34 <twi_wait+0x1a>
    1f28:	2f 5f       	subi	r18, 0xFF	; 255
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	29 3e       	cpi	r18, 0xE9	; 233
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	38 07       	cpc	r19, r24
    1f32:	b9 f7       	brne	.-18     	; 0x1f22 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	28 3e       	cpi	r18, 0xE8	; 232
    1f38:	33 40       	sbci	r19, 0x03	; 3
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <twi_wait+0x24>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1f3e:	08 95       	ret

00001f40 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1f40:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1f44:	84 e8       	ldi	r24, 0x84	; 132
    1f46:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1f4a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <twi_wait>
    1f4e:	88 23       	and	r24, r24
    1f50:	19 f0       	breq	.+6      	; 0x1f58 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1f52:	80 91 b9 00 	lds	r24, 0x00B9
    1f56:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1f58:	08 95       	ret

00001f5a <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1f5a:	cf 93       	push	r28
    1f5c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1f5e:	94 ea       	ldi	r25, 0xA4	; 164
    1f60:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1f64:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <twi_wait>
    1f68:	88 23       	and	r24, r24
    1f6a:	61 f0       	breq	.+24     	; 0x1f84 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1f6c:	8c 2f       	mov	r24, r28
    1f6e:	88 0f       	add	r24, r24
    1f70:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1f74:	80 32       	cpi	r24, 0x20	; 32
    1f76:	29 f4       	brne	.+10     	; 0x1f82 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1f78:	84 e9       	ldi	r24, 0x94	; 148
    1f7a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <start_write+0x2a>
	}	
	return 1;	// success
    1f82:	81 e0       	ldi	r24, 0x01	; 1
}	
    1f84:	cf 91       	pop	r28
    1f86:	08 95       	ret

00001f88 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1f88:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1f8c:	88 e5       	ldi	r24, 0x58	; 88
    1f8e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <start_write>
    1f92:	88 23       	and	r24, r24
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <m_wii_open+0x10>
    1f96:	cd c0       	rjmp	.+410    	; 0x2132 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1f98:	80 e3       	ldi	r24, 0x30	; 48
    1f9a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <m_wii_open+0x1c>
    1fa2:	c9 c0       	rjmp	.+402    	; 0x2136 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    1faa:	88 23       	and	r24, r24
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <m_wii_open+0x28>
    1fae:	c5 c0       	rjmp	.+394    	; 0x213a <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1fb0:	84 e9       	ldi	r24, 0x94	; 148
    1fb2:	80 93 bc 00 	sts	0x00BC, r24
    1fb6:	83 ec       	ldi	r24, 0xC3	; 195
    1fb8:	99 e0       	ldi	r25, 0x09	; 9
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <m_wii_open+0x32>
    1fbe:	00 c0       	rjmp	.+0      	; 0x1fc0 <m_wii_open+0x38>
    1fc0:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1fc2:	88 e5       	ldi	r24, 0x58	; 88
    1fc4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <start_write>
    1fc8:	88 23       	and	r24, r24
    1fca:	09 f4       	brne	.+2      	; 0x1fce <m_wii_open+0x46>
    1fcc:	b8 c0       	rjmp	.+368    	; 0x213e <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    1fd4:	88 23       	and	r24, r24
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <m_wii_open+0x52>
    1fd8:	b4 c0       	rjmp	.+360    	; 0x2142 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    1fe0:	88 23       	and	r24, r24
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <m_wii_open+0x5e>
    1fe4:	b0 c0       	rjmp	.+352    	; 0x2146 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    1fec:	88 23       	and	r24, r24
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <m_wii_open+0x6a>
    1ff0:	ac c0       	rjmp	.+344    	; 0x214a <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <m_wii_open+0x76>
    1ffc:	a8 c0       	rjmp	.+336    	; 0x214e <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    2004:	88 23       	and	r24, r24
    2006:	09 f4       	brne	.+2      	; 0x200a <m_wii_open+0x82>
    2008:	a4 c0       	rjmp	.+328    	; 0x2152 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    2010:	88 23       	and	r24, r24
    2012:	09 f4       	brne	.+2      	; 0x2016 <m_wii_open+0x8e>
    2014:	a0 c0       	rjmp	.+320    	; 0x2156 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    201c:	88 23       	and	r24, r24
    201e:	09 f4       	brne	.+2      	; 0x2022 <m_wii_open+0x9a>
    2020:	9c c0       	rjmp	.+312    	; 0x215a <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2022:	80 e9       	ldi	r24, 0x90	; 144
    2024:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    2028:	88 23       	and	r24, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <m_wii_open+0xa6>
    202c:	98 c0       	rjmp	.+304    	; 0x215e <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    202e:	84 e9       	ldi	r24, 0x94	; 148
    2030:	80 93 bc 00 	sts	0x00BC, r24
    2034:	83 ec       	ldi	r24, 0xC3	; 195
    2036:	99 e0       	ldi	r25, 0x09	; 9
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <m_wii_open+0xb0>
    203c:	00 c0       	rjmp	.+0      	; 0x203e <m_wii_open+0xb6>
    203e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2040:	88 e5       	ldi	r24, 0x58	; 88
    2042:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <start_write>
    2046:	88 23       	and	r24, r24
    2048:	09 f4       	brne	.+2      	; 0x204c <m_wii_open+0xc4>
    204a:	8b c0       	rjmp	.+278    	; 0x2162 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    204c:	87 e0       	ldi	r24, 0x07	; 7
    204e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    2052:	88 23       	and	r24, r24
    2054:	09 f4       	brne	.+2      	; 0x2058 <m_wii_open+0xd0>
    2056:	87 c0       	rjmp	.+270    	; 0x2166 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    205e:	88 23       	and	r24, r24
    2060:	09 f4       	brne	.+2      	; 0x2064 <m_wii_open+0xdc>
    2062:	83 c0       	rjmp	.+262    	; 0x216a <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    2064:	81 e4       	ldi	r24, 0x41	; 65
    2066:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    206a:	88 23       	and	r24, r24
    206c:	09 f4       	brne	.+2      	; 0x2070 <m_wii_open+0xe8>
    206e:	7f c0       	rjmp	.+254    	; 0x216e <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2070:	84 e9       	ldi	r24, 0x94	; 148
    2072:	80 93 bc 00 	sts	0x00BC, r24
    2076:	83 ec       	ldi	r24, 0xC3	; 195
    2078:	99 e0       	ldi	r25, 0x09	; 9
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <m_wii_open+0xf2>
    207e:	00 c0       	rjmp	.+0      	; 0x2080 <m_wii_open+0xf8>
    2080:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2082:	88 e5       	ldi	r24, 0x58	; 88
    2084:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <start_write>
    2088:	88 23       	and	r24, r24
    208a:	09 f4       	brne	.+2      	; 0x208e <m_wii_open+0x106>
    208c:	72 c0       	rjmp	.+228    	; 0x2172 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    208e:	8a e1       	ldi	r24, 0x1A	; 26
    2090:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    2094:	88 23       	and	r24, r24
    2096:	09 f4       	brne	.+2      	; 0x209a <m_wii_open+0x112>
    2098:	6e c0       	rjmp	.+220    	; 0x2176 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    209a:	80 e4       	ldi	r24, 0x40	; 64
    209c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    20a0:	88 23       	and	r24, r24
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <m_wii_open+0x11e>
    20a4:	6a c0       	rjmp	.+212    	; 0x217a <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    20ac:	88 23       	and	r24, r24
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <m_wii_open+0x12a>
    20b0:	66 c0       	rjmp	.+204    	; 0x217e <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20b2:	84 e9       	ldi	r24, 0x94	; 148
    20b4:	80 93 bc 00 	sts	0x00BC, r24
    20b8:	83 ec       	ldi	r24, 0xC3	; 195
    20ba:	99 e0       	ldi	r25, 0x09	; 9
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <m_wii_open+0x134>
    20c0:	00 c0       	rjmp	.+0      	; 0x20c2 <m_wii_open+0x13a>
    20c2:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    20c4:	88 e5       	ldi	r24, 0x58	; 88
    20c6:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <start_write>
    20ca:	88 23       	and	r24, r24
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <m_wii_open+0x148>
    20ce:	59 c0       	rjmp	.+178    	; 0x2182 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    20d0:	83 e3       	ldi	r24, 0x33	; 51
    20d2:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    20d6:	88 23       	and	r24, r24
    20d8:	09 f4       	brne	.+2      	; 0x20dc <m_wii_open+0x154>
    20da:	55 c0       	rjmp	.+170    	; 0x2186 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    20e2:	88 23       	and	r24, r24
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <m_wii_open+0x160>
    20e6:	51 c0       	rjmp	.+162    	; 0x218a <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20e8:	84 e9       	ldi	r24, 0x94	; 148
    20ea:	80 93 bc 00 	sts	0x00BC, r24
    20ee:	83 ec       	ldi	r24, 0xC3	; 195
    20f0:	99 e0       	ldi	r25, 0x09	; 9
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <m_wii_open+0x16a>
    20f6:	00 c0       	rjmp	.+0      	; 0x20f8 <m_wii_open+0x170>
    20f8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    20fa:	88 e5       	ldi	r24, 0x58	; 88
    20fc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <start_write>
    2100:	88 23       	and	r24, r24
    2102:	09 f4       	brne	.+2      	; 0x2106 <m_wii_open+0x17e>
    2104:	44 c0       	rjmp	.+136    	; 0x218e <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    2106:	80 e3       	ldi	r24, 0x30	; 48
    2108:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    210c:	88 23       	and	r24, r24
    210e:	09 f4       	brne	.+2      	; 0x2112 <m_wii_open+0x18a>
    2110:	40 c0       	rjmp	.+128    	; 0x2192 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    2112:	88 e0       	ldi	r24, 0x08	; 8
    2114:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    2118:	88 23       	and	r24, r24
    211a:	e9 f1       	breq	.+122    	; 0x2196 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    211c:	84 e9       	ldi	r24, 0x94	; 148
    211e:	80 93 bc 00 	sts	0x00BC, r24
    2122:	83 ec       	ldi	r24, 0xC3	; 195
    2124:	99 e0       	ldi	r25, 0x09	; 9
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <m_wii_open+0x19e>
    212a:	00 c0       	rjmp	.+0      	; 0x212c <m_wii_open+0x1a4>
    212c:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2196:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2198:	08 95       	ret

0000219a <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    219a:	cf 93       	push	r28
    219c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    219e:	94 ea       	ldi	r25, 0xA4	; 164
    21a0:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    21a4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <twi_wait>
    21a8:	88 23       	and	r24, r24
    21aa:	69 f0       	breq	.+26     	; 0x21c6 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    21ac:	8c 2f       	mov	r24, r28
    21ae:	88 0f       	add	r24, r24
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    21b6:	88 34       	cpi	r24, 0x48	; 72
    21b8:	29 f4       	brne	.+10     	; 0x21c4 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    21ba:	84 e9       	ldi	r24, 0x94	; 148
    21bc:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <start_read+0x2c>
	}	
	return 1;	// success
    21c4:	81 e0       	ldi	r24, 0x01	; 1
}	
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	60 97       	sbiw	r28, 0x10	; 16
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	08 2f       	mov	r16, r24
    21e8:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    21ea:	fe 01       	movw	r30, r28
    21ec:	31 96       	adiw	r30, 0x01	; 1
    21ee:	80 e1       	ldi	r24, 0x10	; 16
    21f0:	df 01       	movw	r26, r30
    21f2:	1d 92       	st	X+, r1
    21f4:	8a 95       	dec	r24
    21f6:	e9 f7       	brne	.-6      	; 0x21f2 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    21f8:	88 e5       	ldi	r24, 0x58	; 88
    21fa:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <start_write>
    21fe:	88 23       	and	r24, r24
    2200:	09 f4       	brne	.+2      	; 0x2204 <m_wii_read+0x3a>
    2202:	6e c0       	rjmp	.+220    	; 0x22e0 <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    2204:	86 e3       	ldi	r24, 0x36	; 54
    2206:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <send_byte>
    220a:	88 23       	and	r24, r24
    220c:	09 f4       	brne	.+2      	; 0x2210 <m_wii_read+0x46>
    220e:	6a c0       	rjmp	.+212    	; 0x22e4 <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2210:	84 e9       	ldi	r24, 0x94	; 148
    2212:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2216:	b8 e0       	ldi	r27, 0x08	; 8
    2218:	ba 95       	dec	r27
    221a:	f1 f7       	brne	.-4      	; 0x2218 <m_wii_read+0x4e>
    221c:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    221e:	88 e5       	ldi	r24, 0x58	; 88
    2220:	0e 94 cd 10 	call	0x219a	; 0x219a <start_read>
    2224:	88 23       	and	r24, r24
    2226:	09 f4       	brne	.+2      	; 0x222a <m_wii_read+0x60>
    2228:	5f c0       	rjmp	.+190    	; 0x22e8 <m_wii_read+0x11e>
    222a:	be 01       	movw	r22, r28
    222c:	6f 5f       	subi	r22, 0xFF	; 255
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	9e 01       	movw	r18, r28
    2232:	20 5f       	subi	r18, 0xF0	; 240
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2236:	ec eb       	ldi	r30, 0xBC	; 188
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    223c:	4b eb       	ldi	r20, 0xBB	; 187
    223e:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2240:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2242:	80 81       	ld	r24, Z
    2244:	88 23       	and	r24, r24
    2246:	ec f7       	brge	.-6      	; 0x2242 <m_wii_read+0x78>
		temp[i] = TWDR;
    2248:	da 01       	movw	r26, r20
    224a:	8c 91       	ld	r24, X
    224c:	db 01       	movw	r26, r22
    224e:	8d 93       	st	X+, r24
    2250:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2252:	a2 17       	cp	r26, r18
    2254:	b3 07       	cpc	r27, r19
    2256:	a1 f7       	brne	.-24     	; 0x2240 <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2258:	84 e8       	ldi	r24, 0x84	; 132
    225a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    225e:	ec eb       	ldi	r30, 0xBC	; 188
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	88 23       	and	r24, r24
    2266:	ec f7       	brge	.-6      	; 0x2262 <m_wii_read+0x98>
	temp[15] = TWDR;
    2268:	80 91 bb 00 	lds	r24, 0x00BB
    226c:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    226e:	84 e9       	ldi	r24, 0x94	; 148
    2270:	80 93 bc 00 	sts	0x00BC, r24
    2274:	fe 01       	movw	r30, r28
    2276:	34 96       	adiw	r30, 0x04	; 4
    2278:	e0 2e       	mov	r14, r16
    227a:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    227c:	80 81       	ld	r24, Z
    227e:	98 2f       	mov	r25, r24
    2280:	90 73       	andi	r25, 0x30	; 48
    2282:	af 01       	movw	r20, r30
    2284:	42 50       	subi	r20, 0x02	; 2
    2286:	51 09       	sbc	r21, r1
    2288:	da 01       	movw	r26, r20
    228a:	4c 91       	ld	r20, X
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	b0 e1       	ldi	r27, 0x10	; 16
    2290:	9b 9f       	mul	r25, r27
    2292:	40 0d       	add	r20, r0
    2294:	51 1d       	adc	r21, r1
    2296:	11 24       	eor	r1, r1
    2298:	d7 01       	movw	r26, r14
    229a:	4d 93       	st	X+, r20
    229c:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    229e:	48 2f       	mov	r20, r24
    22a0:	40 7c       	andi	r20, 0xC0	; 192
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	44 0f       	add	r20, r20
    22a6:	55 1f       	adc	r21, r21
    22a8:	44 0f       	add	r20, r20
    22aa:	55 1f       	adc	r21, r21
    22ac:	bf 01       	movw	r22, r30
    22ae:	61 50       	subi	r22, 0x01	; 1
    22b0:	71 09       	sbc	r23, r1
    22b2:	db 01       	movw	r26, r22
    22b4:	9c 91       	ld	r25, X
    22b6:	49 0f       	add	r20, r25
    22b8:	51 1d       	adc	r21, r1
    22ba:	d7 01       	movw	r26, r14
    22bc:	13 96       	adiw	r26, 0x03	; 3
    22be:	5c 93       	st	X, r21
    22c0:	4e 93       	st	-X, r20
    22c2:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    22c4:	8f 70       	andi	r24, 0x0F	; 15
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	15 96       	adiw	r26, 0x05	; 5
    22ca:	9c 93       	st	X, r25
    22cc:	8e 93       	st	-X, r24
    22ce:	14 97       	sbiw	r26, 0x04	; 4
    22d0:	33 96       	adiw	r30, 0x03	; 3
    22d2:	b6 e0       	ldi	r27, 0x06	; 6
    22d4:	eb 0e       	add	r14, r27
    22d6:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    22d8:	2e 17       	cp	r18, r30
    22da:	3f 07       	cpc	r19, r31
    22dc:	79 f6       	brne	.-98     	; 0x227c <m_wii_read+0xb2>
    22de:	06 c0       	rjmp	.+12     	; 0x22ec <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
}
    22ee:	60 96       	adiw	r28, 0x10	; 16
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	08 95       	ret

00002308 <acos>:
    2308:	9f 93       	push	r25
    230a:	9f 77       	andi	r25, 0x7F	; 127
    230c:	4a d1       	rcall	.+660    	; 0x25a2 <__fp_arccos>
    230e:	0f 90       	pop	r0
    2310:	00 20       	and	r0, r0
    2312:	3a f4       	brpl	.+14     	; 0x2322 <acos+0x1a>
    2314:	90 58       	subi	r25, 0x80	; 128
    2316:	a2 ea       	ldi	r26, 0xA2	; 162
    2318:	2a ed       	ldi	r18, 0xDA	; 218
    231a:	3f e0       	ldi	r19, 0x0F	; 15
    231c:	49 e4       	ldi	r20, 0x49	; 73
    231e:	50 e4       	ldi	r21, 0x40	; 64
    2320:	13 d0       	rcall	.+38     	; 0x2348 <__addsf3x>
    2322:	ba c1       	rjmp	.+884    	; 0x2698 <__fp_round>

00002324 <__subsf3>:
    2324:	50 58       	subi	r21, 0x80	; 128

00002326 <__addsf3>:
    2326:	bb 27       	eor	r27, r27
    2328:	aa 27       	eor	r26, r26
    232a:	0e d0       	rcall	.+28     	; 0x2348 <__addsf3x>
    232c:	b5 c1       	rjmp	.+874    	; 0x2698 <__fp_round>
    232e:	a6 d1       	rcall	.+844    	; 0x267c <__fp_pscA>
    2330:	30 f0       	brcs	.+12     	; 0x233e <__addsf3+0x18>
    2332:	ab d1       	rcall	.+854    	; 0x268a <__fp_pscB>
    2334:	20 f0       	brcs	.+8      	; 0x233e <__addsf3+0x18>
    2336:	31 f4       	brne	.+12     	; 0x2344 <__addsf3+0x1e>
    2338:	9f 3f       	cpi	r25, 0xFF	; 255
    233a:	11 f4       	brne	.+4      	; 0x2340 <__addsf3+0x1a>
    233c:	1e f4       	brtc	.+6      	; 0x2344 <__addsf3+0x1e>
    233e:	76 c1       	rjmp	.+748    	; 0x262c <__fp_nan>
    2340:	0e f4       	brtc	.+2      	; 0x2344 <__addsf3+0x1e>
    2342:	e0 95       	com	r30
    2344:	e7 fb       	bst	r30, 7
    2346:	6c c1       	rjmp	.+728    	; 0x2620 <__fp_inf>

00002348 <__addsf3x>:
    2348:	e9 2f       	mov	r30, r25
    234a:	b7 d1       	rcall	.+878    	; 0x26ba <__fp_split3>
    234c:	80 f3       	brcs	.-32     	; 0x232e <__addsf3+0x8>
    234e:	ba 17       	cp	r27, r26
    2350:	62 07       	cpc	r22, r18
    2352:	73 07       	cpc	r23, r19
    2354:	84 07       	cpc	r24, r20
    2356:	95 07       	cpc	r25, r21
    2358:	18 f0       	brcs	.+6      	; 0x2360 <__addsf3x+0x18>
    235a:	71 f4       	brne	.+28     	; 0x2378 <__addsf3x+0x30>
    235c:	9e f5       	brtc	.+102    	; 0x23c4 <__addsf3x+0x7c>
    235e:	cf c1       	rjmp	.+926    	; 0x26fe <__fp_zero>
    2360:	0e f4       	brtc	.+2      	; 0x2364 <__addsf3x+0x1c>
    2362:	e0 95       	com	r30
    2364:	0b 2e       	mov	r0, r27
    2366:	ba 2f       	mov	r27, r26
    2368:	a0 2d       	mov	r26, r0
    236a:	0b 01       	movw	r0, r22
    236c:	b9 01       	movw	r22, r18
    236e:	90 01       	movw	r18, r0
    2370:	0c 01       	movw	r0, r24
    2372:	ca 01       	movw	r24, r20
    2374:	a0 01       	movw	r20, r0
    2376:	11 24       	eor	r1, r1
    2378:	ff 27       	eor	r31, r31
    237a:	59 1b       	sub	r21, r25
    237c:	99 f0       	breq	.+38     	; 0x23a4 <__addsf3x+0x5c>
    237e:	59 3f       	cpi	r21, 0xF9	; 249
    2380:	50 f4       	brcc	.+20     	; 0x2396 <__addsf3x+0x4e>
    2382:	50 3e       	cpi	r21, 0xE0	; 224
    2384:	68 f1       	brcs	.+90     	; 0x23e0 <__addsf3x+0x98>
    2386:	1a 16       	cp	r1, r26
    2388:	f0 40       	sbci	r31, 0x00	; 0
    238a:	a2 2f       	mov	r26, r18
    238c:	23 2f       	mov	r18, r19
    238e:	34 2f       	mov	r19, r20
    2390:	44 27       	eor	r20, r20
    2392:	58 5f       	subi	r21, 0xF8	; 248
    2394:	f3 cf       	rjmp	.-26     	; 0x237c <__addsf3x+0x34>
    2396:	46 95       	lsr	r20
    2398:	37 95       	ror	r19
    239a:	27 95       	ror	r18
    239c:	a7 95       	ror	r26
    239e:	f0 40       	sbci	r31, 0x00	; 0
    23a0:	53 95       	inc	r21
    23a2:	c9 f7       	brne	.-14     	; 0x2396 <__addsf3x+0x4e>
    23a4:	7e f4       	brtc	.+30     	; 0x23c4 <__addsf3x+0x7c>
    23a6:	1f 16       	cp	r1, r31
    23a8:	ba 0b       	sbc	r27, r26
    23aa:	62 0b       	sbc	r22, r18
    23ac:	73 0b       	sbc	r23, r19
    23ae:	84 0b       	sbc	r24, r20
    23b0:	ba f0       	brmi	.+46     	; 0x23e0 <__addsf3x+0x98>
    23b2:	91 50       	subi	r25, 0x01	; 1
    23b4:	a1 f0       	breq	.+40     	; 0x23de <__addsf3x+0x96>
    23b6:	ff 0f       	add	r31, r31
    23b8:	bb 1f       	adc	r27, r27
    23ba:	66 1f       	adc	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	c2 f7       	brpl	.-16     	; 0x23b2 <__addsf3x+0x6a>
    23c2:	0e c0       	rjmp	.+28     	; 0x23e0 <__addsf3x+0x98>
    23c4:	ba 0f       	add	r27, r26
    23c6:	62 1f       	adc	r22, r18
    23c8:	73 1f       	adc	r23, r19
    23ca:	84 1f       	adc	r24, r20
    23cc:	48 f4       	brcc	.+18     	; 0x23e0 <__addsf3x+0x98>
    23ce:	87 95       	ror	r24
    23d0:	77 95       	ror	r23
    23d2:	67 95       	ror	r22
    23d4:	b7 95       	ror	r27
    23d6:	f7 95       	ror	r31
    23d8:	9e 3f       	cpi	r25, 0xFE	; 254
    23da:	08 f0       	brcs	.+2      	; 0x23de <__addsf3x+0x96>
    23dc:	b3 cf       	rjmp	.-154    	; 0x2344 <__addsf3+0x1e>
    23de:	93 95       	inc	r25
    23e0:	88 0f       	add	r24, r24
    23e2:	08 f0       	brcs	.+2      	; 0x23e6 <__addsf3x+0x9e>
    23e4:	99 27       	eor	r25, r25
    23e6:	ee 0f       	add	r30, r30
    23e8:	97 95       	ror	r25
    23ea:	87 95       	ror	r24
    23ec:	08 95       	ret

000023ee <__cmpsf2>:
    23ee:	f4 d0       	rcall	.+488    	; 0x25d8 <__fp_cmp>
    23f0:	08 f4       	brcc	.+2      	; 0x23f4 <__cmpsf2+0x6>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	08 95       	ret

000023f6 <__divsf3>:
    23f6:	0c d0       	rcall	.+24     	; 0x2410 <__divsf3x>
    23f8:	4f c1       	rjmp	.+670    	; 0x2698 <__fp_round>
    23fa:	47 d1       	rcall	.+654    	; 0x268a <__fp_pscB>
    23fc:	40 f0       	brcs	.+16     	; 0x240e <__divsf3+0x18>
    23fe:	3e d1       	rcall	.+636    	; 0x267c <__fp_pscA>
    2400:	30 f0       	brcs	.+12     	; 0x240e <__divsf3+0x18>
    2402:	21 f4       	brne	.+8      	; 0x240c <__divsf3+0x16>
    2404:	5f 3f       	cpi	r21, 0xFF	; 255
    2406:	19 f0       	breq	.+6      	; 0x240e <__divsf3+0x18>
    2408:	0b c1       	rjmp	.+534    	; 0x2620 <__fp_inf>
    240a:	51 11       	cpse	r21, r1
    240c:	79 c1       	rjmp	.+754    	; 0x2700 <__fp_szero>
    240e:	0e c1       	rjmp	.+540    	; 0x262c <__fp_nan>

00002410 <__divsf3x>:
    2410:	54 d1       	rcall	.+680    	; 0x26ba <__fp_split3>
    2412:	98 f3       	brcs	.-26     	; 0x23fa <__divsf3+0x4>

00002414 <__divsf3_pse>:
    2414:	99 23       	and	r25, r25
    2416:	c9 f3       	breq	.-14     	; 0x240a <__divsf3+0x14>
    2418:	55 23       	and	r21, r21
    241a:	b1 f3       	breq	.-20     	; 0x2408 <__divsf3+0x12>
    241c:	95 1b       	sub	r25, r21
    241e:	55 0b       	sbc	r21, r21
    2420:	bb 27       	eor	r27, r27
    2422:	aa 27       	eor	r26, r26
    2424:	62 17       	cp	r22, r18
    2426:	73 07       	cpc	r23, r19
    2428:	84 07       	cpc	r24, r20
    242a:	38 f0       	brcs	.+14     	; 0x243a <__divsf3_pse+0x26>
    242c:	9f 5f       	subi	r25, 0xFF	; 255
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	44 1f       	adc	r20, r20
    2436:	aa 1f       	adc	r26, r26
    2438:	a9 f3       	breq	.-22     	; 0x2424 <__divsf3_pse+0x10>
    243a:	33 d0       	rcall	.+102    	; 0x24a2 <__divsf3_pse+0x8e>
    243c:	0e 2e       	mov	r0, r30
    243e:	3a f0       	brmi	.+14     	; 0x244e <__divsf3_pse+0x3a>
    2440:	e0 e8       	ldi	r30, 0x80	; 128
    2442:	30 d0       	rcall	.+96     	; 0x24a4 <__divsf3_pse+0x90>
    2444:	91 50       	subi	r25, 0x01	; 1
    2446:	50 40       	sbci	r21, 0x00	; 0
    2448:	e6 95       	lsr	r30
    244a:	00 1c       	adc	r0, r0
    244c:	ca f7       	brpl	.-14     	; 0x2440 <__divsf3_pse+0x2c>
    244e:	29 d0       	rcall	.+82     	; 0x24a2 <__divsf3_pse+0x8e>
    2450:	fe 2f       	mov	r31, r30
    2452:	27 d0       	rcall	.+78     	; 0x24a2 <__divsf3_pse+0x8e>
    2454:	66 0f       	add	r22, r22
    2456:	77 1f       	adc	r23, r23
    2458:	88 1f       	adc	r24, r24
    245a:	bb 1f       	adc	r27, r27
    245c:	26 17       	cp	r18, r22
    245e:	37 07       	cpc	r19, r23
    2460:	48 07       	cpc	r20, r24
    2462:	ab 07       	cpc	r26, r27
    2464:	b0 e8       	ldi	r27, 0x80	; 128
    2466:	09 f0       	breq	.+2      	; 0x246a <__divsf3_pse+0x56>
    2468:	bb 0b       	sbc	r27, r27
    246a:	80 2d       	mov	r24, r0
    246c:	bf 01       	movw	r22, r30
    246e:	ff 27       	eor	r31, r31
    2470:	93 58       	subi	r25, 0x83	; 131
    2472:	5f 4f       	sbci	r21, 0xFF	; 255
    2474:	2a f0       	brmi	.+10     	; 0x2480 <__divsf3_pse+0x6c>
    2476:	9e 3f       	cpi	r25, 0xFE	; 254
    2478:	51 05       	cpc	r21, r1
    247a:	68 f0       	brcs	.+26     	; 0x2496 <__divsf3_pse+0x82>
    247c:	d1 c0       	rjmp	.+418    	; 0x2620 <__fp_inf>
    247e:	40 c1       	rjmp	.+640    	; 0x2700 <__fp_szero>
    2480:	5f 3f       	cpi	r21, 0xFF	; 255
    2482:	ec f3       	brlt	.-6      	; 0x247e <__divsf3_pse+0x6a>
    2484:	98 3e       	cpi	r25, 0xE8	; 232
    2486:	dc f3       	brlt	.-10     	; 0x247e <__divsf3_pse+0x6a>
    2488:	86 95       	lsr	r24
    248a:	77 95       	ror	r23
    248c:	67 95       	ror	r22
    248e:	b7 95       	ror	r27
    2490:	f7 95       	ror	r31
    2492:	9f 5f       	subi	r25, 0xFF	; 255
    2494:	c9 f7       	brne	.-14     	; 0x2488 <__divsf3_pse+0x74>
    2496:	88 0f       	add	r24, r24
    2498:	91 1d       	adc	r25, r1
    249a:	96 95       	lsr	r25
    249c:	87 95       	ror	r24
    249e:	97 f9       	bld	r25, 7
    24a0:	08 95       	ret
    24a2:	e1 e0       	ldi	r30, 0x01	; 1
    24a4:	66 0f       	add	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	88 1f       	adc	r24, r24
    24aa:	bb 1f       	adc	r27, r27
    24ac:	62 17       	cp	r22, r18
    24ae:	73 07       	cpc	r23, r19
    24b0:	84 07       	cpc	r24, r20
    24b2:	ba 07       	cpc	r27, r26
    24b4:	20 f0       	brcs	.+8      	; 0x24be <__divsf3_pse+0xaa>
    24b6:	62 1b       	sub	r22, r18
    24b8:	73 0b       	sbc	r23, r19
    24ba:	84 0b       	sbc	r24, r20
    24bc:	ba 0b       	sbc	r27, r26
    24be:	ee 1f       	adc	r30, r30
    24c0:	88 f7       	brcc	.-30     	; 0x24a4 <__divsf3_pse+0x90>
    24c2:	e0 95       	com	r30
    24c4:	08 95       	ret

000024c6 <__fixsfsi>:
    24c6:	04 d0       	rcall	.+8      	; 0x24d0 <__fixunssfsi>
    24c8:	68 94       	set
    24ca:	b1 11       	cpse	r27, r1
    24cc:	19 c1       	rjmp	.+562    	; 0x2700 <__fp_szero>
    24ce:	08 95       	ret

000024d0 <__fixunssfsi>:
    24d0:	fc d0       	rcall	.+504    	; 0x26ca <__fp_splitA>
    24d2:	88 f0       	brcs	.+34     	; 0x24f6 <__fixunssfsi+0x26>
    24d4:	9f 57       	subi	r25, 0x7F	; 127
    24d6:	90 f0       	brcs	.+36     	; 0x24fc <__fixunssfsi+0x2c>
    24d8:	b9 2f       	mov	r27, r25
    24da:	99 27       	eor	r25, r25
    24dc:	b7 51       	subi	r27, 0x17	; 23
    24de:	a0 f0       	brcs	.+40     	; 0x2508 <__fixunssfsi+0x38>
    24e0:	d1 f0       	breq	.+52     	; 0x2516 <__fixunssfsi+0x46>
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	1a f0       	brmi	.+6      	; 0x24f2 <__fixunssfsi+0x22>
    24ec:	ba 95       	dec	r27
    24ee:	c9 f7       	brne	.-14     	; 0x24e2 <__fixunssfsi+0x12>
    24f0:	12 c0       	rjmp	.+36     	; 0x2516 <__fixunssfsi+0x46>
    24f2:	b1 30       	cpi	r27, 0x01	; 1
    24f4:	81 f0       	breq	.+32     	; 0x2516 <__fixunssfsi+0x46>
    24f6:	03 d1       	rcall	.+518    	; 0x26fe <__fp_zero>
    24f8:	b1 e0       	ldi	r27, 0x01	; 1
    24fa:	08 95       	ret
    24fc:	00 c1       	rjmp	.+512    	; 0x26fe <__fp_zero>
    24fe:	67 2f       	mov	r22, r23
    2500:	78 2f       	mov	r23, r24
    2502:	88 27       	eor	r24, r24
    2504:	b8 5f       	subi	r27, 0xF8	; 248
    2506:	39 f0       	breq	.+14     	; 0x2516 <__fixunssfsi+0x46>
    2508:	b9 3f       	cpi	r27, 0xF9	; 249
    250a:	cc f3       	brlt	.-14     	; 0x24fe <__fixunssfsi+0x2e>
    250c:	86 95       	lsr	r24
    250e:	77 95       	ror	r23
    2510:	67 95       	ror	r22
    2512:	b3 95       	inc	r27
    2514:	d9 f7       	brne	.-10     	; 0x250c <__fixunssfsi+0x3c>
    2516:	3e f4       	brtc	.+14     	; 0x2526 <__fixunssfsi+0x56>
    2518:	90 95       	com	r25
    251a:	80 95       	com	r24
    251c:	70 95       	com	r23
    251e:	61 95       	neg	r22
    2520:	7f 4f       	sbci	r23, 0xFF	; 255
    2522:	8f 4f       	sbci	r24, 0xFF	; 255
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	08 95       	ret

00002528 <__floatunsisf>:
    2528:	e8 94       	clt
    252a:	09 c0       	rjmp	.+18     	; 0x253e <__floatsisf+0x12>

0000252c <__floatsisf>:
    252c:	97 fb       	bst	r25, 7
    252e:	3e f4       	brtc	.+14     	; 0x253e <__floatsisf+0x12>
    2530:	90 95       	com	r25
    2532:	80 95       	com	r24
    2534:	70 95       	com	r23
    2536:	61 95       	neg	r22
    2538:	7f 4f       	sbci	r23, 0xFF	; 255
    253a:	8f 4f       	sbci	r24, 0xFF	; 255
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	99 23       	and	r25, r25
    2540:	a9 f0       	breq	.+42     	; 0x256c <__floatsisf+0x40>
    2542:	f9 2f       	mov	r31, r25
    2544:	96 e9       	ldi	r25, 0x96	; 150
    2546:	bb 27       	eor	r27, r27
    2548:	93 95       	inc	r25
    254a:	f6 95       	lsr	r31
    254c:	87 95       	ror	r24
    254e:	77 95       	ror	r23
    2550:	67 95       	ror	r22
    2552:	b7 95       	ror	r27
    2554:	f1 11       	cpse	r31, r1
    2556:	f8 cf       	rjmp	.-16     	; 0x2548 <__floatsisf+0x1c>
    2558:	fa f4       	brpl	.+62     	; 0x2598 <__floatsisf+0x6c>
    255a:	bb 0f       	add	r27, r27
    255c:	11 f4       	brne	.+4      	; 0x2562 <__floatsisf+0x36>
    255e:	60 ff       	sbrs	r22, 0
    2560:	1b c0       	rjmp	.+54     	; 0x2598 <__floatsisf+0x6c>
    2562:	6f 5f       	subi	r22, 0xFF	; 255
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	8f 4f       	sbci	r24, 0xFF	; 255
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	16 c0       	rjmp	.+44     	; 0x2598 <__floatsisf+0x6c>
    256c:	88 23       	and	r24, r24
    256e:	11 f0       	breq	.+4      	; 0x2574 <__floatsisf+0x48>
    2570:	96 e9       	ldi	r25, 0x96	; 150
    2572:	11 c0       	rjmp	.+34     	; 0x2596 <__floatsisf+0x6a>
    2574:	77 23       	and	r23, r23
    2576:	21 f0       	breq	.+8      	; 0x2580 <__floatsisf+0x54>
    2578:	9e e8       	ldi	r25, 0x8E	; 142
    257a:	87 2f       	mov	r24, r23
    257c:	76 2f       	mov	r23, r22
    257e:	05 c0       	rjmp	.+10     	; 0x258a <__floatsisf+0x5e>
    2580:	66 23       	and	r22, r22
    2582:	71 f0       	breq	.+28     	; 0x25a0 <__floatsisf+0x74>
    2584:	96 e8       	ldi	r25, 0x86	; 134
    2586:	86 2f       	mov	r24, r22
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	2a f0       	brmi	.+10     	; 0x2598 <__floatsisf+0x6c>
    258e:	9a 95       	dec	r25
    2590:	66 0f       	add	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	da f7       	brpl	.-10     	; 0x258e <__floatsisf+0x62>
    2598:	88 0f       	add	r24, r24
    259a:	96 95       	lsr	r25
    259c:	87 95       	ror	r24
    259e:	97 f9       	bld	r25, 7
    25a0:	08 95       	ret

000025a2 <__fp_arccos>:
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	1f 93       	push	r17
    25a8:	0f 93       	push	r16
    25aa:	8b 01       	movw	r16, r22
    25ac:	ec 01       	movw	r28, r24
    25ae:	ec ea       	ldi	r30, 0xAC	; 172
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	3f d0       	rcall	.+126    	; 0x2632 <__fp_powser>
    25b4:	71 d0       	rcall	.+226    	; 0x2698 <__fp_round>
    25b6:	98 01       	movw	r18, r16
    25b8:	ae 01       	movw	r20, r28
    25ba:	8b 01       	movw	r16, r22
    25bc:	ec 01       	movw	r28, r24
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	80 e8       	ldi	r24, 0x80	; 128
    25c4:	9f e3       	ldi	r25, 0x3F	; 63
    25c6:	ae de       	rcall	.-676    	; 0x2324 <__subsf3>
    25c8:	0c d1       	rcall	.+536    	; 0x27e2 <sqrt>
    25ca:	98 01       	movw	r18, r16
    25cc:	ae 01       	movw	r20, r28
    25ce:	0f 91       	pop	r16
    25d0:	1f 91       	pop	r17
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	aa c0       	rjmp	.+340    	; 0x272c <__mulsf3x>

000025d8 <__fp_cmp>:
    25d8:	99 0f       	add	r25, r25
    25da:	00 08       	sbc	r0, r0
    25dc:	55 0f       	add	r21, r21
    25de:	aa 0b       	sbc	r26, r26
    25e0:	e0 e8       	ldi	r30, 0x80	; 128
    25e2:	fe ef       	ldi	r31, 0xFE	; 254
    25e4:	16 16       	cp	r1, r22
    25e6:	17 06       	cpc	r1, r23
    25e8:	e8 07       	cpc	r30, r24
    25ea:	f9 07       	cpc	r31, r25
    25ec:	c0 f0       	brcs	.+48     	; 0x261e <__fp_cmp+0x46>
    25ee:	12 16       	cp	r1, r18
    25f0:	13 06       	cpc	r1, r19
    25f2:	e4 07       	cpc	r30, r20
    25f4:	f5 07       	cpc	r31, r21
    25f6:	98 f0       	brcs	.+38     	; 0x261e <__fp_cmp+0x46>
    25f8:	62 1b       	sub	r22, r18
    25fa:	73 0b       	sbc	r23, r19
    25fc:	84 0b       	sbc	r24, r20
    25fe:	95 0b       	sbc	r25, r21
    2600:	39 f4       	brne	.+14     	; 0x2610 <__fp_cmp+0x38>
    2602:	0a 26       	eor	r0, r26
    2604:	61 f0       	breq	.+24     	; 0x261e <__fp_cmp+0x46>
    2606:	23 2b       	or	r18, r19
    2608:	24 2b       	or	r18, r20
    260a:	25 2b       	or	r18, r21
    260c:	21 f4       	brne	.+8      	; 0x2616 <__fp_cmp+0x3e>
    260e:	08 95       	ret
    2610:	0a 26       	eor	r0, r26
    2612:	09 f4       	brne	.+2      	; 0x2616 <__fp_cmp+0x3e>
    2614:	a1 40       	sbci	r26, 0x01	; 1
    2616:	a6 95       	lsr	r26
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	81 1d       	adc	r24, r1
    261c:	81 1d       	adc	r24, r1
    261e:	08 95       	ret

00002620 <__fp_inf>:
    2620:	97 f9       	bld	r25, 7
    2622:	9f 67       	ori	r25, 0x7F	; 127
    2624:	80 e8       	ldi	r24, 0x80	; 128
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	08 95       	ret

0000262c <__fp_nan>:
    262c:	9f ef       	ldi	r25, 0xFF	; 255
    262e:	80 ec       	ldi	r24, 0xC0	; 192
    2630:	08 95       	ret

00002632 <__fp_powser>:
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	1f 93       	push	r17
    2638:	0f 93       	push	r16
    263a:	ff 92       	push	r15
    263c:	ef 92       	push	r14
    263e:	df 92       	push	r13
    2640:	7b 01       	movw	r14, r22
    2642:	8c 01       	movw	r16, r24
    2644:	68 94       	set
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <__fp_powser+0x20>
    2648:	da 2e       	mov	r13, r26
    264a:	ef 01       	movw	r28, r30
    264c:	6f d0       	rcall	.+222    	; 0x272c <__mulsf3x>
    264e:	fe 01       	movw	r30, r28
    2650:	e8 94       	clt
    2652:	a5 91       	lpm	r26, Z+
    2654:	25 91       	lpm	r18, Z+
    2656:	35 91       	lpm	r19, Z+
    2658:	45 91       	lpm	r20, Z+
    265a:	55 91       	lpm	r21, Z+
    265c:	ae f3       	brts	.-22     	; 0x2648 <__fp_powser+0x16>
    265e:	ef 01       	movw	r28, r30
    2660:	73 de       	rcall	.-794    	; 0x2348 <__addsf3x>
    2662:	fe 01       	movw	r30, r28
    2664:	97 01       	movw	r18, r14
    2666:	a8 01       	movw	r20, r16
    2668:	da 94       	dec	r13
    266a:	79 f7       	brne	.-34     	; 0x264a <__fp_powser+0x18>
    266c:	df 90       	pop	r13
    266e:	ef 90       	pop	r14
    2670:	ff 90       	pop	r15
    2672:	0f 91       	pop	r16
    2674:	1f 91       	pop	r17
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <__fp_pscA>:
    267c:	00 24       	eor	r0, r0
    267e:	0a 94       	dec	r0
    2680:	16 16       	cp	r1, r22
    2682:	17 06       	cpc	r1, r23
    2684:	18 06       	cpc	r1, r24
    2686:	09 06       	cpc	r0, r25
    2688:	08 95       	ret

0000268a <__fp_pscB>:
    268a:	00 24       	eor	r0, r0
    268c:	0a 94       	dec	r0
    268e:	12 16       	cp	r1, r18
    2690:	13 06       	cpc	r1, r19
    2692:	14 06       	cpc	r1, r20
    2694:	05 06       	cpc	r0, r21
    2696:	08 95       	ret

00002698 <__fp_round>:
    2698:	09 2e       	mov	r0, r25
    269a:	03 94       	inc	r0
    269c:	00 0c       	add	r0, r0
    269e:	11 f4       	brne	.+4      	; 0x26a4 <__fp_round+0xc>
    26a0:	88 23       	and	r24, r24
    26a2:	52 f0       	brmi	.+20     	; 0x26b8 <__fp_round+0x20>
    26a4:	bb 0f       	add	r27, r27
    26a6:	40 f4       	brcc	.+16     	; 0x26b8 <__fp_round+0x20>
    26a8:	bf 2b       	or	r27, r31
    26aa:	11 f4       	brne	.+4      	; 0x26b0 <__fp_round+0x18>
    26ac:	60 ff       	sbrs	r22, 0
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <__fp_round+0x20>
    26b0:	6f 5f       	subi	r22, 0xFF	; 255
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255
    26b4:	8f 4f       	sbci	r24, 0xFF	; 255
    26b6:	9f 4f       	sbci	r25, 0xFF	; 255
    26b8:	08 95       	ret

000026ba <__fp_split3>:
    26ba:	57 fd       	sbrc	r21, 7
    26bc:	90 58       	subi	r25, 0x80	; 128
    26be:	44 0f       	add	r20, r20
    26c0:	55 1f       	adc	r21, r21
    26c2:	59 f0       	breq	.+22     	; 0x26da <__fp_splitA+0x10>
    26c4:	5f 3f       	cpi	r21, 0xFF	; 255
    26c6:	71 f0       	breq	.+28     	; 0x26e4 <__fp_splitA+0x1a>
    26c8:	47 95       	ror	r20

000026ca <__fp_splitA>:
    26ca:	88 0f       	add	r24, r24
    26cc:	97 fb       	bst	r25, 7
    26ce:	99 1f       	adc	r25, r25
    26d0:	61 f0       	breq	.+24     	; 0x26ea <__fp_splitA+0x20>
    26d2:	9f 3f       	cpi	r25, 0xFF	; 255
    26d4:	79 f0       	breq	.+30     	; 0x26f4 <__fp_splitA+0x2a>
    26d6:	87 95       	ror	r24
    26d8:	08 95       	ret
    26da:	12 16       	cp	r1, r18
    26dc:	13 06       	cpc	r1, r19
    26de:	14 06       	cpc	r1, r20
    26e0:	55 1f       	adc	r21, r21
    26e2:	f2 cf       	rjmp	.-28     	; 0x26c8 <__fp_split3+0xe>
    26e4:	46 95       	lsr	r20
    26e6:	f1 df       	rcall	.-30     	; 0x26ca <__fp_splitA>
    26e8:	08 c0       	rjmp	.+16     	; 0x26fa <__fp_splitA+0x30>
    26ea:	16 16       	cp	r1, r22
    26ec:	17 06       	cpc	r1, r23
    26ee:	18 06       	cpc	r1, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	f1 cf       	rjmp	.-30     	; 0x26d6 <__fp_splitA+0xc>
    26f4:	86 95       	lsr	r24
    26f6:	71 05       	cpc	r23, r1
    26f8:	61 05       	cpc	r22, r1
    26fa:	08 94       	sec
    26fc:	08 95       	ret

000026fe <__fp_zero>:
    26fe:	e8 94       	clt

00002700 <__fp_szero>:
    2700:	bb 27       	eor	r27, r27
    2702:	66 27       	eor	r22, r22
    2704:	77 27       	eor	r23, r23
    2706:	cb 01       	movw	r24, r22
    2708:	97 f9       	bld	r25, 7
    270a:	08 95       	ret

0000270c <__gesf2>:
    270c:	65 df       	rcall	.-310    	; 0x25d8 <__fp_cmp>
    270e:	08 f4       	brcc	.+2      	; 0x2712 <__gesf2+0x6>
    2710:	8f ef       	ldi	r24, 0xFF	; 255
    2712:	08 95       	ret

00002714 <__mulsf3>:
    2714:	0b d0       	rcall	.+22     	; 0x272c <__mulsf3x>
    2716:	c0 cf       	rjmp	.-128    	; 0x2698 <__fp_round>
    2718:	b1 df       	rcall	.-158    	; 0x267c <__fp_pscA>
    271a:	28 f0       	brcs	.+10     	; 0x2726 <__mulsf3+0x12>
    271c:	b6 df       	rcall	.-148    	; 0x268a <__fp_pscB>
    271e:	18 f0       	brcs	.+6      	; 0x2726 <__mulsf3+0x12>
    2720:	95 23       	and	r25, r21
    2722:	09 f0       	breq	.+2      	; 0x2726 <__mulsf3+0x12>
    2724:	7d cf       	rjmp	.-262    	; 0x2620 <__fp_inf>
    2726:	82 cf       	rjmp	.-252    	; 0x262c <__fp_nan>
    2728:	11 24       	eor	r1, r1
    272a:	ea cf       	rjmp	.-44     	; 0x2700 <__fp_szero>

0000272c <__mulsf3x>:
    272c:	c6 df       	rcall	.-116    	; 0x26ba <__fp_split3>
    272e:	a0 f3       	brcs	.-24     	; 0x2718 <__mulsf3+0x4>

00002730 <__mulsf3_pse>:
    2730:	95 9f       	mul	r25, r21
    2732:	d1 f3       	breq	.-12     	; 0x2728 <__mulsf3+0x14>
    2734:	95 0f       	add	r25, r21
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	55 1f       	adc	r21, r21
    273a:	62 9f       	mul	r22, r18
    273c:	f0 01       	movw	r30, r0
    273e:	72 9f       	mul	r23, r18
    2740:	bb 27       	eor	r27, r27
    2742:	f0 0d       	add	r31, r0
    2744:	b1 1d       	adc	r27, r1
    2746:	63 9f       	mul	r22, r19
    2748:	aa 27       	eor	r26, r26
    274a:	f0 0d       	add	r31, r0
    274c:	b1 1d       	adc	r27, r1
    274e:	aa 1f       	adc	r26, r26
    2750:	64 9f       	mul	r22, r20
    2752:	66 27       	eor	r22, r22
    2754:	b0 0d       	add	r27, r0
    2756:	a1 1d       	adc	r26, r1
    2758:	66 1f       	adc	r22, r22
    275a:	82 9f       	mul	r24, r18
    275c:	22 27       	eor	r18, r18
    275e:	b0 0d       	add	r27, r0
    2760:	a1 1d       	adc	r26, r1
    2762:	62 1f       	adc	r22, r18
    2764:	73 9f       	mul	r23, r19
    2766:	b0 0d       	add	r27, r0
    2768:	a1 1d       	adc	r26, r1
    276a:	62 1f       	adc	r22, r18
    276c:	83 9f       	mul	r24, r19
    276e:	a0 0d       	add	r26, r0
    2770:	61 1d       	adc	r22, r1
    2772:	22 1f       	adc	r18, r18
    2774:	74 9f       	mul	r23, r20
    2776:	33 27       	eor	r19, r19
    2778:	a0 0d       	add	r26, r0
    277a:	61 1d       	adc	r22, r1
    277c:	23 1f       	adc	r18, r19
    277e:	84 9f       	mul	r24, r20
    2780:	60 0d       	add	r22, r0
    2782:	21 1d       	adc	r18, r1
    2784:	82 2f       	mov	r24, r18
    2786:	76 2f       	mov	r23, r22
    2788:	6a 2f       	mov	r22, r26
    278a:	11 24       	eor	r1, r1
    278c:	9f 57       	subi	r25, 0x7F	; 127
    278e:	50 40       	sbci	r21, 0x00	; 0
    2790:	8a f0       	brmi	.+34     	; 0x27b4 <__mulsf3_pse+0x84>
    2792:	e1 f0       	breq	.+56     	; 0x27cc <__mulsf3_pse+0x9c>
    2794:	88 23       	and	r24, r24
    2796:	4a f0       	brmi	.+18     	; 0x27aa <__mulsf3_pse+0x7a>
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	bb 1f       	adc	r27, r27
    279e:	66 1f       	adc	r22, r22
    27a0:	77 1f       	adc	r23, r23
    27a2:	88 1f       	adc	r24, r24
    27a4:	91 50       	subi	r25, 0x01	; 1
    27a6:	50 40       	sbci	r21, 0x00	; 0
    27a8:	a9 f7       	brne	.-22     	; 0x2794 <__mulsf3_pse+0x64>
    27aa:	9e 3f       	cpi	r25, 0xFE	; 254
    27ac:	51 05       	cpc	r21, r1
    27ae:	70 f0       	brcs	.+28     	; 0x27cc <__mulsf3_pse+0x9c>
    27b0:	37 cf       	rjmp	.-402    	; 0x2620 <__fp_inf>
    27b2:	a6 cf       	rjmp	.-180    	; 0x2700 <__fp_szero>
    27b4:	5f 3f       	cpi	r21, 0xFF	; 255
    27b6:	ec f3       	brlt	.-6      	; 0x27b2 <__mulsf3_pse+0x82>
    27b8:	98 3e       	cpi	r25, 0xE8	; 232
    27ba:	dc f3       	brlt	.-10     	; 0x27b2 <__mulsf3_pse+0x82>
    27bc:	86 95       	lsr	r24
    27be:	77 95       	ror	r23
    27c0:	67 95       	ror	r22
    27c2:	b7 95       	ror	r27
    27c4:	f7 95       	ror	r31
    27c6:	e7 95       	ror	r30
    27c8:	9f 5f       	subi	r25, 0xFF	; 255
    27ca:	c1 f7       	brne	.-16     	; 0x27bc <__mulsf3_pse+0x8c>
    27cc:	fe 2b       	or	r31, r30
    27ce:	88 0f       	add	r24, r24
    27d0:	91 1d       	adc	r25, r1
    27d2:	96 95       	lsr	r25
    27d4:	87 95       	ror	r24
    27d6:	97 f9       	bld	r25, 7
    27d8:	08 95       	ret
    27da:	11 f4       	brne	.+4      	; 0x27e0 <__mulsf3_pse+0xb0>
    27dc:	0e f4       	brtc	.+2      	; 0x27e0 <__mulsf3_pse+0xb0>
    27de:	26 cf       	rjmp	.-436    	; 0x262c <__fp_nan>
    27e0:	3e c0       	rjmp	.+124    	; 0x285e <__fp_mpack>

000027e2 <sqrt>:
    27e2:	73 df       	rcall	.-282    	; 0x26ca <__fp_splitA>
    27e4:	d0 f3       	brcs	.-12     	; 0x27da <__mulsf3_pse+0xaa>
    27e6:	99 23       	and	r25, r25
    27e8:	d9 f3       	breq	.-10     	; 0x27e0 <__mulsf3_pse+0xb0>
    27ea:	ce f3       	brts	.-14     	; 0x27de <__mulsf3_pse+0xae>
    27ec:	9f 57       	subi	r25, 0x7F	; 127
    27ee:	55 0b       	sbc	r21, r21
    27f0:	87 ff       	sbrs	r24, 7
    27f2:	43 d0       	rcall	.+134    	; 0x287a <__fp_norm2>
    27f4:	00 24       	eor	r0, r0
    27f6:	a0 e6       	ldi	r26, 0x60	; 96
    27f8:	40 ea       	ldi	r20, 0xA0	; 160
    27fa:	90 01       	movw	r18, r0
    27fc:	80 58       	subi	r24, 0x80	; 128
    27fe:	56 95       	lsr	r21
    2800:	97 95       	ror	r25
    2802:	28 f4       	brcc	.+10     	; 0x280e <sqrt+0x2c>
    2804:	80 5c       	subi	r24, 0xC0	; 192
    2806:	66 0f       	add	r22, r22
    2808:	77 1f       	adc	r23, r23
    280a:	88 1f       	adc	r24, r24
    280c:	20 f0       	brcs	.+8      	; 0x2816 <sqrt+0x34>
    280e:	26 17       	cp	r18, r22
    2810:	37 07       	cpc	r19, r23
    2812:	48 07       	cpc	r20, r24
    2814:	30 f4       	brcc	.+12     	; 0x2822 <sqrt+0x40>
    2816:	62 1b       	sub	r22, r18
    2818:	73 0b       	sbc	r23, r19
    281a:	84 0b       	sbc	r24, r20
    281c:	20 29       	or	r18, r0
    281e:	31 29       	or	r19, r1
    2820:	4a 2b       	or	r20, r26
    2822:	a6 95       	lsr	r26
    2824:	17 94       	ror	r1
    2826:	07 94       	ror	r0
    2828:	20 25       	eor	r18, r0
    282a:	31 25       	eor	r19, r1
    282c:	4a 27       	eor	r20, r26
    282e:	58 f7       	brcc	.-42     	; 0x2806 <sqrt+0x24>
    2830:	66 0f       	add	r22, r22
    2832:	77 1f       	adc	r23, r23
    2834:	88 1f       	adc	r24, r24
    2836:	20 f0       	brcs	.+8      	; 0x2840 <sqrt+0x5e>
    2838:	26 17       	cp	r18, r22
    283a:	37 07       	cpc	r19, r23
    283c:	48 07       	cpc	r20, r24
    283e:	30 f4       	brcc	.+12     	; 0x284c <sqrt+0x6a>
    2840:	62 0b       	sbc	r22, r18
    2842:	73 0b       	sbc	r23, r19
    2844:	84 0b       	sbc	r24, r20
    2846:	20 0d       	add	r18, r0
    2848:	31 1d       	adc	r19, r1
    284a:	41 1d       	adc	r20, r1
    284c:	a0 95       	com	r26
    284e:	81 f7       	brne	.-32     	; 0x2830 <sqrt+0x4e>
    2850:	b9 01       	movw	r22, r18
    2852:	84 2f       	mov	r24, r20
    2854:	91 58       	subi	r25, 0x81	; 129
    2856:	88 0f       	add	r24, r24
    2858:	96 95       	lsr	r25
    285a:	87 95       	ror	r24
    285c:	08 95       	ret

0000285e <__fp_mpack>:
    285e:	9f 3f       	cpi	r25, 0xFF	; 255
    2860:	31 f0       	breq	.+12     	; 0x286e <__fp_mpack_finite+0xc>

00002862 <__fp_mpack_finite>:
    2862:	91 50       	subi	r25, 0x01	; 1
    2864:	20 f4       	brcc	.+8      	; 0x286e <__fp_mpack_finite+0xc>
    2866:	87 95       	ror	r24
    2868:	77 95       	ror	r23
    286a:	67 95       	ror	r22
    286c:	b7 95       	ror	r27
    286e:	88 0f       	add	r24, r24
    2870:	91 1d       	adc	r25, r1
    2872:	96 95       	lsr	r25
    2874:	87 95       	ror	r24
    2876:	97 f9       	bld	r25, 7
    2878:	08 95       	ret

0000287a <__fp_norm2>:
    287a:	91 50       	subi	r25, 0x01	; 1
    287c:	50 40       	sbci	r21, 0x00	; 0
    287e:	66 0f       	add	r22, r22
    2880:	77 1f       	adc	r23, r23
    2882:	88 1f       	adc	r24, r24
    2884:	d2 f7       	brpl	.-12     	; 0x287a <__fp_norm2>
    2886:	08 95       	ret

00002888 <__itoa_ncheck>:
    2888:	bb 27       	eor	r27, r27
    288a:	4a 30       	cpi	r20, 0x0A	; 10
    288c:	31 f4       	brne	.+12     	; 0x289a <__itoa_ncheck+0x12>
    288e:	99 23       	and	r25, r25
    2890:	22 f4       	brpl	.+8      	; 0x289a <__itoa_ncheck+0x12>
    2892:	bd e2       	ldi	r27, 0x2D	; 45
    2894:	90 95       	com	r25
    2896:	81 95       	neg	r24
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__utoa_common>

0000289e <__utoa_ncheck>:
    289e:	bb 27       	eor	r27, r27

000028a0 <__utoa_common>:
    28a0:	fb 01       	movw	r30, r22
    28a2:	55 27       	eor	r21, r21
    28a4:	aa 27       	eor	r26, r26
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	aa 1f       	adc	r26, r26
    28ac:	a4 17       	cp	r26, r20
    28ae:	10 f0       	brcs	.+4      	; 0x28b4 <__utoa_common+0x14>
    28b0:	a4 1b       	sub	r26, r20
    28b2:	83 95       	inc	r24
    28b4:	50 51       	subi	r21, 0x10	; 16
    28b6:	b9 f7       	brne	.-18     	; 0x28a6 <__utoa_common+0x6>
    28b8:	a0 5d       	subi	r26, 0xD0	; 208
    28ba:	aa 33       	cpi	r26, 0x3A	; 58
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <__utoa_common+0x20>
    28be:	a9 5d       	subi	r26, 0xD9	; 217
    28c0:	a1 93       	st	Z+, r26
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	79 f7       	brne	.-34     	; 0x28a4 <__utoa_common+0x4>
    28c6:	b1 11       	cpse	r27, r1
    28c8:	b1 93       	st	Z+, r27
    28ca:	11 92       	st	Z+, r1
    28cc:	cb 01       	movw	r24, r22
    28ce:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <strrev>

000028d2 <strrev>:
    28d2:	dc 01       	movw	r26, r24
    28d4:	fc 01       	movw	r30, r24
    28d6:	67 2f       	mov	r22, r23
    28d8:	71 91       	ld	r23, Z+
    28da:	77 23       	and	r23, r23
    28dc:	e1 f7       	brne	.-8      	; 0x28d6 <strrev+0x4>
    28de:	32 97       	sbiw	r30, 0x02	; 2
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <strrev+0x18>
    28e2:	7c 91       	ld	r23, X
    28e4:	6d 93       	st	X+, r22
    28e6:	70 83       	st	Z, r23
    28e8:	62 91       	ld	r22, -Z
    28ea:	ae 17       	cp	r26, r30
    28ec:	bf 07       	cpc	r27, r31
    28ee:	c8 f3       	brcs	.-14     	; 0x28e2 <strrev+0x10>
    28f0:	08 95       	ret

000028f2 <_exit>:
    28f2:	f8 94       	cli

000028f4 <__stop_program>:
    28f4:	ff cf       	rjmp	.-2      	; 0x28f4 <__stop_program>

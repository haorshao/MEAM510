
golfer123.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000b24  00000bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000bc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b1  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000387  00000000  00000000  00001da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000693  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000358  00000000  00000000  000027bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000526  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001981  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  000049bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_10>
  2c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_11>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  68:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  6c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  70:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  74:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  78:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  7c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  80:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  84:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  8c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  90:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  94:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  98:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  9c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  a0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  a4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  a8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	0d 0a       	sbc	r0, r29
	...

000000af <descriptor_list>:
  af:	00 01 00 00 46 01 12 00 02 00 00 03 01 43 00 03     ....F........C..
  bf:	00 00 ff 00 04 01 03 09 04 eb 00 12 02 03 09 04     ................
  cf:	e3 00 06 03 03 09 04 d9 00 08                       ..........

000000d9 <string3>:
  d9:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e3 <string2>:
  e3:	06 03 4d 00 32 00 00 00                             ..M.2...

000000eb <string1>:
  eb:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  fb:	65 00 00 00                                         e...

000000ff <string0>:
  ff:	04 03 09 04                                         ....

00000103 <config1_descriptor>:
 103:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 113:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 123:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 133:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 143:	40 00 00                                            @..

00000146 <device_descriptor>:
 146:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 156:	03 01                                               ..

00000158 <endpoint_config_table>:
 158:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	da e0       	ldi	r29, 0x0A	; 10
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e4 e2       	ldi	r30, 0x24	; 36
 176:	fb e0       	ldi	r31, 0x0B	; 11
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	a8 30       	cpi	r26, 0x08	; 8
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	a8 e0       	ldi	r26, 0x08	; 8
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	ac 30       	cpi	r26, 0x0C	; 12
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
 198:	0c 94 90 05 	jmp	0xb20	; 0xb20 <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <main>:

volatile float dutyCycle;

int main(void)
{
	m_usb_init();
 1a0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <m_usb_init>

	m_clockdivide(0);//set the system clock frequency as 16MHz
 1a4:	e1 e6       	ldi	r30, 0x61	; 97
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	80 83       	st	Z, r24
 1ac:	10 82       	st	Z, r1

	clear(ADMUX,REFS1);//set the voltage reference
 1ae:	ac e7       	ldi	r26, 0x7C	; 124
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	8c 91       	ld	r24, X
 1b4:	8f 77       	andi	r24, 0x7F	; 127
 1b6:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
 1b8:	8c 91       	ld	r24, X
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);// set the ADC clock prescaler/128
 1be:	ea e7       	ldi	r30, 0x7A	; 122
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
 1c8:	80 81       	ld	r24, Z
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
 1ce:	80 81       	ld	r24, Z
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24

	set(DIDR0,ADC0D);// disable ADC0D digital inputs
 1d4:	ce e7       	ldi	r28, 0x7E	; 126
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
 1d8:	88 81       	ld	r24, Y
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	88 83       	st	Y, r24
	
	set(ADCSRA,ADATE);//set up the triggering as "free-running" mode.
 1de:	80 81       	ld	r24, Z
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	80 83       	st	Z, r24

	clear(ADCSRB,MUX5);//select F0 as analog input
 1e4:	cb e7       	ldi	r28, 0x7B	; 123
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	88 81       	ld	r24, Y
 1ea:	8f 7d       	andi	r24, 0xDF	; 223
 1ec:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
 1ee:	8c 91       	ld	r24, X
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
 1f4:	8c 91       	ld	r24, X
 1f6:	8d 7f       	andi	r24, 0xFD	; 253
 1f8:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
 1fa:	8c 91       	ld	r24, X
 1fc:	8e 7f       	andi	r24, 0xFE	; 254
 1fe:	8c 93       	st	X, r24

	set(ADCSRA,ADEN);// enable conversions
 200:	80 81       	ld	r24, Z
 202:	80 68       	ori	r24, 0x80	; 128
 204:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);
 206:	80 81       	ld	r24, Z
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	80 83       	st	Z, r24
	
	clear(TCCR1B,CS12);//set prescaler to /64
 20c:	e1 e8       	ldi	r30, 0x81	; 129
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	8b 7f       	andi	r24, 0xFB	; 251
 214:	80 83       	st	Z, r24
	set(TCCR1B,CS11);
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
 21c:	80 81       	ld	r24, Z
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	80 83       	st	Z, r24
	
	set(TCCR1B,WGM13);//(mode 15) UP to OCR1A, PWM mode
 222:	80 81       	ld	r24, Z
 224:	80 61       	ori	r24, 0x10	; 16
 226:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
 22e:	e0 e8       	ldi	r30, 0x80	; 128
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
 238:	80 81       	ld	r24, Z
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
	
	set(TCCR1A,COM1B1);//clear at OCR1B, set at rollover
 23e:	80 81       	ld	r24, Z
 240:	80 62       	ori	r24, 0x20	; 32
 242:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
 244:	80 81       	ld	r24, Z
 246:	8f 7e       	andi	r24, 0xEF	; 239
 248:	80 83       	st	Z, r24
	
	OCR1A=500;
 24a:	84 ef       	ldi	r24, 0xF4	; 244
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	90 93 89 00 	sts	0x0089, r25
 252:	80 93 88 00 	sts	0x0088, r24
	
	clear(DDRD,2);
 256:	52 98       	cbi	0x0a, 2	; 10
	clear(PORTD,2);
 258:	5a 98       	cbi	0x0b, 2	; 11
    set(DDRB,6);
 25a:	26 9a       	sbi	0x04, 6	; 4
	
	while(1){
		OCR1B=-0.0848*(float)ADC+511.7;
 25c:	08 e7       	ldi	r16, 0x78	; 120
 25e:	10 e0       	ldi	r17, 0x00	; 0
 260:	ca e8       	ldi	r28, 0x8A	; 138
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	f8 01       	movw	r30, r16
 266:	60 81       	ld	r22, Z
 268:	71 81       	ldd	r23, Z+1	; 0x01
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__floatunsisf>
 272:	2f e9       	ldi	r18, 0x9F	; 159
 274:	3b ea       	ldi	r19, 0xAB	; 171
 276:	4d ea       	ldi	r20, 0xAD	; 173
 278:	5d eb       	ldi	r21, 0xBD	; 189
 27a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__mulsf3>
 27e:	2a e9       	ldi	r18, 0x9A	; 154
 280:	39 ed       	ldi	r19, 0xD9	; 217
 282:	4f ef       	ldi	r20, 0xFF	; 255
 284:	53 e4       	ldi	r21, 0x43	; 67
 286:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__addsf3>
 28a:	0e 94 3e 04 	call	0x87c	; 0x87c <__fixunssfsi>
 28e:	79 83       	std	Y+1, r23	; 0x01
 290:	68 83       	st	Y, r22
			//OCR1B=((float)ADC/1024)*(float)100;
			m_usb_tx_int(OCR1B);
 292:	88 81       	ld	r24, Y
 294:	99 81       	ldd	r25, Y+1	; 0x01
 296:	0e 94 a5 03 	call	0x74a	; 0x74a <m_usb_tx_int>
			//dutyCycle=(1-(float)OCR1B/(float)OCR1A)*(float)100;
// 			m_usb_tx_int(dutyCycle);
            //m_usb_tx_int(ADC);
			m_usb_tx_string("\r\n");
 29a:	8c ea       	ldi	r24, 0xAC	; 172
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 8b 03 	call	0x716	; 0x716 <print_P>
			m_red(ON);
 2a2:	6e 9a       	sbi	0x0d, 6	; 13
 2a4:	76 98       	cbi	0x0e, 6	; 14
 2a6:	de cf       	rjmp	.-68     	; 0x264 <main+0xc4>

000002a8 <m_usb_init>:
			case 45: UEDATX = *buffer++;
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
			case 40: UEDATX = *buffer++;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2aa:	80 93 d7 00 	sts	0x00D7, r24
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
 2ae:	80 ea       	ldi	r24, 0xA0	; 160
 2b0:	80 93 d8 00 	sts	0x00D8, r24
 2b4:	82 e1       	ldi	r24, 0x12	; 18
 2b6:	89 bd       	out	0x29, r24	; 41
 2b8:	09 b4       	in	r0, 0x29	; 41
 2ba:	00 fe       	sbrs	r0, 0
			case 38: UEDATX = *buffer++;
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <m_usb_init+0x10>
 2be:	80 e9       	ldi	r24, 0x90	; 144
 2c0:	80 93 d8 00 	sts	0x00D8, r24
 2c4:	10 92 e0 00 	sts	0x00E0, r1
 2c8:	10 92 0b 01 	sts	0x010B, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2cc:	10 92 08 01 	sts	0x0108, r1
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	80 93 e2 00 	sts	0x00E2, r24
 2d6:	78 94       	sei
 2d8:	08 95       	ret

000002da <m_usb_tx_char>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
			case 36: UEDATX = *buffer++;
 2de:	90 91 0b 01 	lds	r25, 0x010B
 2e2:	99 23       	and	r25, r25
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <m_usb_tx_char+0xe>
 2e6:	4c c0       	rjmp	.+152    	; 0x380 <m_usb_tx_char+0xa6>
 2e8:	9f b7       	in	r25, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	24 e0       	ldi	r18, 0x04	; 4
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2ee:	20 93 e9 00 	sts	0x00E9, r18
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
			case 36: UEDATX = *buffer++;
			case 35: UEDATX = *buffer++;
 2f2:	20 91 09 01 	lds	r18, 0x0109
 2f6:	22 23       	and	r18, r18
 2f8:	49 f0       	breq	.+18     	; 0x30c <m_usb_tx_char+0x32>
 2fa:	20 91 e8 00 	lds	r18, 0x00E8
 2fe:	25 fd       	sbrc	r18, 5
			case 34: UEDATX = *buffer++;
 300:	03 c0       	rjmp	.+6      	; 0x308 <m_usb_tx_char+0x2e>
 302:	9f bf       	out	0x3f, r25	; 63
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	41 c0       	rjmp	.+130    	; 0x38a <m_usb_tx_char+0xb0>
 308:	10 92 09 01 	sts	0x0109, r1
 30c:	30 91 e4 00 	lds	r19, 0x00E4
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 310:	37 5e       	subi	r19, 0xE7	; 231
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
			case 36: UEDATX = *buffer++;
			case 35: UEDATX = *buffer++;
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
 312:	20 91 e8 00 	lds	r18, 0x00E8
 316:	25 fd       	sbrc	r18, 5
 318:	24 c0       	rjmp	.+72     	; 0x362 <m_usb_tx_char+0x88>
 31a:	9f bf       	out	0x3f, r25	; 63
 31c:	90 91 e4 00 	lds	r25, 0x00E4
 320:	93 17       	cp	r25, r19
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 322:	81 f0       	breq	.+32     	; 0x344 <m_usb_tx_char+0x6a>
 324:	90 91 0b 01 	lds	r25, 0x010B
 328:	99 23       	and	r25, r25
 32a:	61 f1       	breq	.+88     	; 0x384 <m_usb_tx_char+0xaa>
 32c:	a9 ee       	ldi	r26, 0xE9	; 233
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	44 e0       	ldi	r20, 0x04	; 4
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 332:	e8 ee       	ldi	r30, 0xE8	; 232
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	c4 ee       	ldi	r28, 0xE4	; 228
 338:	d0 e0       	ldi	r29, 0x00	; 0
 33a:	0d c0       	rjmp	.+26     	; 0x356 <m_usb_tx_char+0x7c>
 33c:	9f bf       	out	0x3f, r25	; 63
 33e:	98 81       	ld	r25, Y
 340:	93 13       	cpse	r25, r19
 342:	05 c0       	rjmp	.+10     	; 0x34e <m_usb_tx_char+0x74>
			case 30: UEDATX = *buffer++;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 09 01 	sts	0x0109, r24
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	1e c0       	rjmp	.+60     	; 0x38a <m_usb_tx_char+0xb0>
 34e:	90 91 0b 01 	lds	r25, 0x010B
 352:	99 23       	and	r25, r25
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 354:	c9 f0       	breq	.+50     	; 0x388 <m_usb_tx_char+0xae>
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
 356:	9f b7       	in	r25, 0x3f	; 63
 358:	f8 94       	cli
 35a:	4c 93       	st	X, r20
 35c:	20 81       	ld	r18, Z
 35e:	25 ff       	sbrs	r18, 5
 360:	ed cf       	rjmp	.-38     	; 0x33c <m_usb_tx_char+0x62>
 362:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
 366:	80 91 e8 00 	lds	r24, 0x00E8
 36a:	85 fd       	sbrc	r24, 5
 36c:	03 c0       	rjmp	.+6      	; 0x374 <m_usb_tx_char+0x9a>
 36e:	8a e3       	ldi	r24, 0x3A	; 58
 370:	80 93 e8 00 	sts	0x00E8, r24
 374:	85 e0       	ldi	r24, 0x05	; 5
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 376:	80 93 0a 01 	sts	0x010A, r24
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
 37a:	9f bf       	out	0x3f, r25	; 63
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	05 c0       	rjmp	.+10     	; 0x38a <m_usb_tx_char+0xb0>
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	03 c0       	rjmp	.+6      	; 0x38a <m_usb_tx_char+0xb0>
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	01 c0       	rjmp	.+2      	; 0x38a <m_usb_tx_char+0xb0>
			case 26: UEDATX = *buffer++;
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <__vector_10>:
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 398:	11 24       	eor	r1, r1
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
 3a2:	e1 ee       	ldi	r30, 0xE1	; 225
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	10 82       	st	Z, r1
			case 24: UEDATX = *buffer++;
 3aa:	83 ff       	sbrs	r24, 3
 3ac:	11 c0       	rjmp	.+34     	; 0x3d0 <__vector_10+0x40>
 3ae:	10 92 e9 00 	sts	0x00E9, r1
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	90 93 eb 00 	sts	0x00EB, r25
 3b8:	10 92 ec 00 	sts	0x00EC, r1
			case 23: UEDATX = *buffer++;
 3bc:	92 e1       	ldi	r25, 0x12	; 18
 3be:	90 93 ed 00 	sts	0x00ED, r25
 3c2:	98 e0       	ldi	r25, 0x08	; 8
 3c4:	90 93 f0 00 	sts	0x00F0, r25
 3c8:	10 92 0b 01 	sts	0x010B, r1
			case 22: UEDATX = *buffer++;
 3cc:	10 92 08 01 	sts	0x0108, r1
 3d0:	82 ff       	sbrs	r24, 2
 3d2:	13 c0       	rjmp	.+38     	; 0x3fa <__vector_10+0x6a>
 3d4:	80 91 0b 01 	lds	r24, 0x010B
 3d8:	88 23       	and	r24, r24
 3da:	79 f0       	breq	.+30     	; 0x3fa <__vector_10+0x6a>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3dc:	80 91 0a 01 	lds	r24, 0x010A
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
 3e0:	88 23       	and	r24, r24
 3e2:	59 f0       	breq	.+22     	; 0x3fa <__vector_10+0x6a>
 3e4:	81 50       	subi	r24, 0x01	; 1
 3e6:	80 93 0a 01 	sts	0x010A, r24
 3ea:	81 11       	cpse	r24, r1
 3ec:	06 c0       	rjmp	.+12     	; 0x3fa <__vector_10+0x6a>
			case 20: UEDATX = *buffer++;
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	80 93 e9 00 	sts	0x00E9, r24
 3f4:	8a e3       	ldi	r24, 0x3A	; 58
 3f6:	80 93 e8 00 	sts	0x00E8, r24
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3fe:	9f 91       	pop	r25
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
 400:	8f 91       	pop	r24
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_11>:
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
			case 18: UEDATX = *buffer++;
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 420:	5f 93       	push	r21
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
 436:	10 92 e9 00 	sts	0x00E9, r1
 43a:	80 91 e8 00 	lds	r24, 0x00E8
 43e:	83 ff       	sbrs	r24, 3
 440:	4e c1       	rjmp	.+668    	; 0x6de <__vector_11+0x2d2>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 442:	e1 ef       	ldi	r30, 0xF1	; 241
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	c0 81       	ld	r28, Z
 448:	40 81       	ld	r20, Z
 44a:	20 81       	ld	r18, Z
 44c:	80 81       	ld	r24, Z
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	38 2b       	or	r19, r24
 452:	80 81       	ld	r24, Z
			case 14: UEDATX = *buffer++;
 454:	50 81       	ld	r21, Z
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	bc 01       	movw	r22, r24
 45a:	75 2b       	or	r23, r21
 45c:	b0 81       	ld	r27, Z
 45e:	a0 81       	ld	r26, Z
 460:	82 ef       	ldi	r24, 0xF2	; 242
 462:	80 93 e8 00 	sts	0x00E8, r24
			case 13: UEDATX = *buffer++;
 466:	46 30       	cpi	r20, 0x06	; 6
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_11+0x60>
 46a:	58 c0       	rjmp	.+176    	; 0x51c <__vector_11+0x110>
 46c:	04 c0       	rjmp	.+8      	; 0x476 <__vector_11+0x6a>
 46e:	81 e2       	ldi	r24, 0x21	; 33
 470:	80 93 eb 00 	sts	0x00EB, r24
 474:	3b c1       	rjmp	.+630    	; 0x6ec <__vector_11+0x2e0>
			case 12: UEDATX = *buffer++;
 476:	c6 e0       	ldi	r28, 0x06	; 6
 478:	8f ea       	ldi	r24, 0xAF	; 175
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	fc 01       	movw	r30, r24
 47e:	45 91       	lpm	r20, Z+
 480:	54 91       	lpm	r21, Z
 482:	24 17       	cp	r18, r20
 484:	35 07       	cpc	r19, r21
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 486:	11 f0       	breq	.+4      	; 0x48c <__vector_11+0x80>
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
 488:	07 96       	adiw	r24, 0x07	; 7
 48a:	23 c0       	rjmp	.+70     	; 0x4d2 <__vector_11+0xc6>
 48c:	fc 01       	movw	r30, r24
 48e:	32 96       	adiw	r30, 0x02	; 2
 490:	45 91       	lpm	r20, Z+
 492:	54 91       	lpm	r21, Z
 494:	64 17       	cp	r22, r20
 496:	75 07       	cpc	r23, r21
			case 10: UEDATX = *buffer++;
 498:	11 f0       	breq	.+4      	; 0x49e <__vector_11+0x92>
 49a:	07 96       	adiw	r24, 0x07	; 7
 49c:	1a c0       	rjmp	.+52     	; 0x4d2 <__vector_11+0xc6>
 49e:	fc 01       	movw	r30, r24
 4a0:	34 96       	adiw	r30, 0x04	; 4
 4a2:	25 91       	lpm	r18, Z+
 4a4:	34 91       	lpm	r19, Z
 4a6:	fc 01       	movw	r30, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4a8:	36 96       	adiw	r30, 0x06	; 6
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
 4aa:	54 91       	lpm	r21, Z
 4ac:	8b 2f       	mov	r24, r27
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	9a 2b       	or	r25, r26
 4b2:	8f 3f       	cpi	r24, 0xFF	; 255
 4b4:	91 05       	cpc	r25, r1
 4b6:	19 f0       	breq	.+6      	; 0x4be <__vector_11+0xb2>
 4b8:	10 f0       	brcs	.+4      	; 0x4be <__vector_11+0xb2>
			#endif
			case  8: UEDATX = *buffer++;
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	85 17       	cp	r24, r21
 4c0:	08 f4       	brcc	.+2      	; 0x4c4 <__vector_11+0xb8>
 4c2:	58 2f       	mov	r21, r24
 4c4:	a8 ee       	ldi	r26, 0xE8	; 232
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	70 e1       	ldi	r23, 0x10	; 16
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ca:	6e ef       	ldi	r22, 0xFE	; 254
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
 4cc:	c1 ef       	ldi	r28, 0xF1	; 241
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__vector_11+0xcc>
 4d2:	c1 50       	subi	r28, 0x01	; 1
 4d4:	99 f6       	brne	.-90     	; 0x47c <__vector_11+0x70>
 4d6:	cb cf       	rjmp	.-106    	; 0x46e <__vector_11+0x62>
 4d8:	8c 91       	ld	r24, X
 4da:	98 2f       	mov	r25, r24
			case  6: UEDATX = *buffer++;
 4dc:	95 70       	andi	r25, 0x05	; 5
 4de:	e1 f3       	breq	.-8      	; 0x4d8 <__vector_11+0xcc>
 4e0:	82 fd       	sbrc	r24, 2
 4e2:	04 c1       	rjmp	.+520    	; 0x6ec <__vector_11+0x2e0>
 4e4:	45 2f       	mov	r20, r21
 4e6:	51 31       	cpi	r21, 0x11	; 17
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <__vector_11+0xe0>
 4ea:	47 2f       	mov	r20, r23
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ec:	44 23       	and	r20, r20
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__vector_11+0xe6>
 4f0:	fa c0       	rjmp	.+500    	; 0x6e6 <__vector_11+0x2da>
 4f2:	f9 01       	movw	r30, r18
 4f4:	84 2f       	mov	r24, r20
 4f6:	94 91       	lpm	r25, Z
 4f8:	98 83       	st	Y, r25
 4fa:	81 50       	subi	r24, 0x01	; 1
 4fc:	31 96       	adiw	r30, 0x01	; 1
			case  4: UEDATX = *buffer++;
 4fe:	81 11       	cpse	r24, r1
 500:	fa cf       	rjmp	.-12     	; 0x4f6 <__vector_11+0xea>
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	84 0f       	add	r24, r20
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	28 0f       	add	r18, r24
 50c:	39 1f       	adc	r19, r25
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 50e:	54 1b       	sub	r21, r20
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 510:	6c 93       	st	X, r22
 512:	51 11       	cpse	r21, r1
 514:	e1 cf       	rjmp	.-62     	; 0x4d8 <__vector_11+0xcc>
 516:	40 31       	cpi	r20, 0x10	; 16
 518:	f9 f2       	breq	.-66     	; 0x4d8 <__vector_11+0xcc>
 51a:	e8 c0       	rjmp	.+464    	; 0x6ec <__vector_11+0x2e0>
 51c:	45 30       	cpi	r20, 0x05	; 5
 51e:	61 f4       	brne	.+24     	; 0x538 <__vector_11+0x12c>
			case  2: UEDATX = *buffer++;
 520:	8e ef       	ldi	r24, 0xFE	; 254
 522:	80 93 e8 00 	sts	0x00E8, r24
 526:	e8 ee       	ldi	r30, 0xE8	; 232
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	80 ff       	sbrs	r24, 0
 52e:	fd cf       	rjmp	.-6      	; 0x52a <__vector_11+0x11e>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 530:	20 68       	ori	r18, 0x80	; 128
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
 532:	20 93 e3 00 	sts	0x00E3, r18
 536:	da c0       	rjmp	.+436    	; 0x6ec <__vector_11+0x2e0>
 538:	49 30       	cpi	r20, 0x09	; 9
 53a:	09 f0       	breq	.+2      	; 0x53e <__vector_11+0x132>
 53c:	36 c0       	rjmp	.+108    	; 0x5aa <__vector_11+0x19e>
 53e:	c1 11       	cpse	r28, r1
 540:	5f c0       	rjmp	.+190    	; 0x600 <__vector_11+0x1f4>
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 542:	20 93 0b 01 	sts	0x010B, r18
 546:	10 92 08 01 	sts	0x0108, r1
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 54a:	10 92 0a 01 	sts	0x010A, r1
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 54e:	8e ef       	ldi	r24, 0xFE	; 254
 550:	80 93 e8 00 	sts	0x00E8, r24
 554:	11 e0       	ldi	r17, 0x01	; 1
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 556:	88 e5       	ldi	r24, 0x58	; 88
	return 0;
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	c9 ee       	ldi	r28, 0xE9	; 233
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 55c:	d0 e0       	ldi	r29, 0x00	; 0
 55e:	ab ee       	ldi	r26, 0xEB	; 235
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	6c ee       	ldi	r22, 0xEC	; 236
 564:	70 e0       	ldi	r23, 0x00	; 0
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 566:	4d ee       	ldi	r20, 0xED	; 237
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	18 83       	st	Y, r17
 56c:	9c 01       	movw	r18, r24
 56e:	2f 5f       	subi	r18, 0xFF	; 255
 570:	3f 4f       	sbci	r19, 0xFF	; 255
 572:	fc 01       	movw	r30, r24
 574:	04 91       	lpm	r16, Z
 576:	0c 93       	st	X, r16
 578:	00 23       	and	r16, r16
 57a:	61 f0       	breq	.+24     	; 0x594 <__vector_11+0x188>
 57c:	f9 01       	movw	r30, r18
 57e:	24 91       	lpm	r18, Z
 580:	fb 01       	movw	r30, r22
 582:	20 83       	st	Z, r18
 584:	9c 01       	movw	r18, r24
 586:	2d 5f       	subi	r18, 0xFD	; 253
 588:	3f 4f       	sbci	r19, 0xFF	; 255
				UENUM = i;
				en = pgm_read_byte(cfg++);
				UECONX = en;
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
 58a:	fc 01       	movw	r30, r24
 58c:	32 96       	adiw	r30, 0x02	; 2
 58e:	84 91       	lpm	r24, Z
 590:	fa 01       	movw	r30, r20
 592:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 594:	1f 5f       	subi	r17, 0xFF	; 255
 596:	15 30       	cpi	r17, 0x05	; 5
 598:	11 f0       	breq	.+4      	; 0x59e <__vector_11+0x192>
 59a:	c9 01       	movw	r24, r18
 59c:	e6 cf       	rjmp	.-52     	; 0x56a <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 59e:	ea ee       	ldi	r30, 0xEA	; 234
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	8e e1       	ldi	r24, 0x1E	; 30
 5a4:	80 83       	st	Z, r24
        		UERST = 0;
 5a6:	10 82       	st	Z, r1
			return;
 5a8:	a1 c0       	rjmp	.+322    	; 0x6ec <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 5aa:	48 30       	cpi	r20, 0x08	; 8
 5ac:	81 f4       	brne	.+32     	; 0x5ce <__vector_11+0x1c2>
 5ae:	c0 38       	cpi	r28, 0x80	; 128
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__vector_11+0x1a8>
 5b2:	42 c0       	rjmp	.+132    	; 0x638 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5b4:	e8 ee       	ldi	r30, 0xE8	; 232
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 ff       	sbrs	r24, 0
 5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 5be:	80 91 0b 01 	lds	r24, 0x010B
 5c2:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c6:	8e ef       	ldi	r24, 0xFE	; 254
 5c8:	80 93 e8 00 	sts	0x00E8, r24
 5cc:	8f c0       	rjmp	.+286    	; 0x6ec <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 5ce:	41 32       	cpi	r20, 0x21	; 33
 5d0:	b9 f4       	brne	.+46     	; 0x600 <__vector_11+0x1f4>
 5d2:	c1 3a       	cpi	r28, 0xA1	; 161
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <__vector_11+0x1cc>
 5d6:	40 c0       	rjmp	.+128    	; 0x658 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5d8:	e8 ee       	ldi	r30, 0xE8	; 232
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	80 ff       	sbrs	r24, 0
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <__vector_11+0x1d0>
 5e2:	e0 e0       	ldi	r30, 0x00	; 0
 5e4:	f1 e0       	ldi	r31, 0x01	; 1
 5e6:	87 e0       	ldi	r24, 0x07	; 7
 5e8:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 5ea:	a1 ef       	ldi	r26, 0xF1	; 241
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	21 91       	ld	r18, Z+
 5f0:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 5f2:	e8 17       	cp	r30, r24
 5f4:	f9 07       	cpc	r31, r25
 5f6:	d9 f7       	brne	.-10     	; 0x5ee <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5f8:	8e ef       	ldi	r24, 0xFE	; 254
 5fa:	80 93 e8 00 	sts	0x00E8, r24
 5fe:	76 c0       	rjmp	.+236    	; 0x6ec <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 600:	40 32       	cpi	r20, 0x20	; 32
 602:	d1 f4       	brne	.+52     	; 0x638 <__vector_11+0x22c>
 604:	c1 32       	cpi	r28, 0x21	; 33
 606:	09 f0       	breq	.+2      	; 0x60a <__vector_11+0x1fe>
 608:	43 c0       	rjmp	.+134    	; 0x690 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 60a:	e8 ee       	ldi	r30, 0xE8	; 232
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	82 ff       	sbrs	r24, 2
 612:	fd cf       	rjmp	.-6      	; 0x60e <__vector_11+0x202>
 614:	e0 e0       	ldi	r30, 0x00	; 0
 616:	f1 e0       	ldi	r31, 0x01	; 1
 618:	87 e0       	ldi	r24, 0x07	; 7
 61a:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 61c:	a1 ef       	ldi	r26, 0xF1	; 241
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	2c 91       	ld	r18, X
 622:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 624:	e8 17       	cp	r30, r24
 626:	f9 07       	cpc	r31, r25
 628:	d9 f7       	brne	.-10     	; 0x620 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 62a:	e8 ee       	ldi	r30, 0xE8	; 232
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	8b ef       	ldi	r24, 0xFB	; 251
 630:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 632:	8e ef       	ldi	r24, 0xFE	; 254
 634:	80 83       	st	Z, r24
 636:	5a c0       	rjmp	.+180    	; 0x6ec <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 638:	42 32       	cpi	r20, 0x22	; 34
 63a:	71 f4       	brne	.+28     	; 0x658 <__vector_11+0x24c>
 63c:	c1 32       	cpi	r28, 0x21	; 33
 63e:	09 f0       	breq	.+2      	; 0x642 <__vector_11+0x236>
 640:	4e c0       	rjmp	.+156    	; 0x6de <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
 642:	20 93 08 01 	sts	0x0108, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 646:	e8 ee       	ldi	r30, 0xE8	; 232
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	80 ff       	sbrs	r24, 0
 64e:	fd cf       	rjmp	.-6      	; 0x64a <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 650:	8e ef       	ldi	r24, 0xFE	; 254
 652:	80 93 e8 00 	sts	0x00E8, r24
 656:	4a c0       	rjmp	.+148    	; 0x6ec <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 658:	41 11       	cpse	r20, r1
 65a:	1a c0       	rjmp	.+52     	; 0x690 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 65c:	e8 ee       	ldi	r30, 0xE8	; 232
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	80 ff       	sbrs	r24, 0
 664:	fd cf       	rjmp	.-6      	; 0x660 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 666:	c2 38       	cpi	r28, 0x82	; 130
 668:	51 f4       	brne	.+20     	; 0x67e <__vector_11+0x272>
				UENUM = wIndex;
 66a:	e9 ee       	ldi	r30, 0xE9	; 233
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 670:	80 91 eb 00 	lds	r24, 0x00EB
 674:	85 fb       	bst	r24, 5
 676:	88 27       	eor	r24, r24
 678:	80 f9       	bld	r24, 0
				UENUM = 0;
 67a:	10 82       	st	Z, r1
 67c:	01 c0       	rjmp	.+2      	; 0x680 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 67e:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 680:	e1 ef       	ldi	r30, 0xF1	; 241
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 83       	st	Z, r24
			UEDATX = 0;
 686:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 688:	8e ef       	ldi	r24, 0xFE	; 254
 68a:	80 93 e8 00 	sts	0x00E8, r24
 68e:	2e c0       	rjmp	.+92     	; 0x6ec <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 690:	84 2f       	mov	r24, r20
 692:	8d 7f       	andi	r24, 0xFD	; 253
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	19 f5       	brne	.+70     	; 0x6de <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
 698:	c2 30       	cpi	r28, 0x02	; 2
 69a:	09 f5       	brne	.+66     	; 0x6de <__vector_11+0x2d2>
 69c:	23 2b       	or	r18, r19
 69e:	f9 f4       	brne	.+62     	; 0x6de <__vector_11+0x2d2>
			i = wIndex & 0x7F;
 6a0:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	86 0f       	add	r24, r22
 6a6:	84 30       	cpi	r24, 0x04	; 4
 6a8:	d0 f4       	brcc	.+52     	; 0x6de <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6aa:	8e ef       	ldi	r24, 0xFE	; 254
 6ac:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 6b0:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
 6b4:	43 30       	cpi	r20, 0x03	; 3
 6b6:	21 f4       	brne	.+8      	; 0x6c0 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 6b8:	81 e2       	ldi	r24, 0x21	; 33
 6ba:	80 93 eb 00 	sts	0x00EB, r24
 6be:	16 c0       	rjmp	.+44     	; 0x6ec <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 6c0:	89 e1       	ldi	r24, 0x19	; 25
 6c2:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__vector_11+0x2c4>
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	6a 95       	dec	r22
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <__vector_11+0x2c0>
 6d4:	ea ee       	ldi	r30, 0xEA	; 234
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 83       	st	Z, r24
					UERST = 0;
 6da:	10 82       	st	Z, r1
 6dc:	07 c0       	rjmp	.+14     	; 0x6ec <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 6de:	81 e2       	ldi	r24, 0x21	; 33
 6e0:	80 93 eb 00 	sts	0x00EB, r24
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6e6:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 6e8:	51 11       	cpse	r21, r1
 6ea:	f6 ce       	rjmp	.-532    	; 0x4d8 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	bf 91       	pop	r27
 6f6:	af 91       	pop	r26
 6f8:	9f 91       	pop	r25
 6fa:	8f 91       	pop	r24
 6fc:	7f 91       	pop	r23
 6fe:	6f 91       	pop	r22
 700:	5f 91       	pop	r21
 702:	4f 91       	pop	r20
 704:	3f 91       	pop	r19
 706:	2f 91       	pop	r18
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	0f 90       	pop	r0
 712:	1f 90       	pop	r1
 714:	18 95       	reti

00000716 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 71c:	ec 01       	movw	r28, r24
 71e:	21 96       	adiw	r28, 0x01	; 1
 720:	fc 01       	movw	r30, r24
 722:	14 91       	lpm	r17, Z
		if (!c) break;
 724:	11 23       	and	r17, r17
 726:	69 f0       	breq	.+26     	; 0x742 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
 728:	1a 30       	cpi	r17, 0x0A	; 10
 72a:	19 f4       	brne	.+6      	; 0x732 <print_P+0x1c>
 72c:	8d e0       	ldi	r24, 0x0D	; 13
 72e:	0e 94 6d 01 	call	0x2da	; 0x2da <m_usb_tx_char>
		usb_tx_char(c);
 732:	81 2f       	mov	r24, r17
 734:	0e 94 6d 01 	call	0x2da	; 0x2da <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 738:	fe 01       	movw	r30, r28
 73a:	14 91       	lpm	r17, Z
 73c:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
 73e:	11 11       	cpse	r17, r1
 740:	f3 cf       	rjmp	.-26     	; 0x728 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	08 95       	ret

0000074a <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
 74a:	ef 92       	push	r14
 74c:	ff 92       	push	r15
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
 75a:	27 97       	sbiw	r28, 0x07	; 7
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 766:	8e 01       	movw	r16, r28
 768:	0f 5f       	subi	r16, 0xFF	; 255
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	27 e0       	ldi	r18, 0x07	; 7
 76e:	f8 01       	movw	r30, r16
 770:	11 92       	st	Z+, r1
 772:	2a 95       	dec	r18
 774:	e9 f7       	brne	.-6      	; 0x770 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 776:	4a e0       	ldi	r20, 0x0A	; 10
 778:	b8 01       	movw	r22, r16
 77a:	0e 94 5b 05 	call	0xab6	; 0xab6 <__itoa_ncheck>
 77e:	7e 01       	movw	r14, r28
 780:	f8 e0       	ldi	r31, 0x08	; 8
 782:	ef 0e       	add	r14, r31
 784:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 786:	f8 01       	movw	r30, r16
 788:	81 91       	ld	r24, Z+
 78a:	8f 01       	movw	r16, r30
 78c:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 78e:	0e 94 6d 01 	call	0x2da	; 0x2da <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 792:	0e 15       	cp	r16, r14
 794:	1f 05       	cpc	r17, r15
 796:	b9 f7       	brne	.-18     	; 0x786 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 798:	27 96       	adiw	r28, 0x07	; 7
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	f8 94       	cli
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	cd bf       	out	0x3d, r28	; 61
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	ff 90       	pop	r15
 7ae:	ef 90       	pop	r14
 7b0:	08 95       	ret

000007b2 <__subsf3>:
 7b2:	50 58       	subi	r21, 0x80	; 128

000007b4 <__addsf3>:
 7b4:	bb 27       	eor	r27, r27
 7b6:	aa 27       	eor	r26, r26
 7b8:	0e d0       	rcall	.+28     	; 0x7d6 <__addsf3x>
 7ba:	e0 c0       	rjmp	.+448    	; 0x97c <__fp_round>
 7bc:	d1 d0       	rcall	.+418    	; 0x960 <__fp_pscA>
 7be:	30 f0       	brcs	.+12     	; 0x7cc <__addsf3+0x18>
 7c0:	d6 d0       	rcall	.+428    	; 0x96e <__fp_pscB>
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__addsf3+0x18>
 7c4:	31 f4       	brne	.+12     	; 0x7d2 <__addsf3+0x1e>
 7c6:	9f 3f       	cpi	r25, 0xFF	; 255
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__addsf3+0x1a>
 7ca:	1e f4       	brtc	.+6      	; 0x7d2 <__addsf3+0x1e>
 7cc:	c6 c0       	rjmp	.+396    	; 0x95a <__fp_nan>
 7ce:	0e f4       	brtc	.+2      	; 0x7d2 <__addsf3+0x1e>
 7d0:	e0 95       	com	r30
 7d2:	e7 fb       	bst	r30, 7
 7d4:	bc c0       	rjmp	.+376    	; 0x94e <__fp_inf>

000007d6 <__addsf3x>:
 7d6:	e9 2f       	mov	r30, r25
 7d8:	e2 d0       	rcall	.+452    	; 0x99e <__fp_split3>
 7da:	80 f3       	brcs	.-32     	; 0x7bc <__addsf3+0x8>
 7dc:	ba 17       	cp	r27, r26
 7de:	62 07       	cpc	r22, r18
 7e0:	73 07       	cpc	r23, r19
 7e2:	84 07       	cpc	r24, r20
 7e4:	95 07       	cpc	r25, r21
 7e6:	18 f0       	brcs	.+6      	; 0x7ee <__addsf3x+0x18>
 7e8:	71 f4       	brne	.+28     	; 0x806 <__addsf3x+0x30>
 7ea:	9e f5       	brtc	.+102    	; 0x852 <__addsf3x+0x7c>
 7ec:	fa c0       	rjmp	.+500    	; 0x9e2 <__fp_zero>
 7ee:	0e f4       	brtc	.+2      	; 0x7f2 <__addsf3x+0x1c>
 7f0:	e0 95       	com	r30
 7f2:	0b 2e       	mov	r0, r27
 7f4:	ba 2f       	mov	r27, r26
 7f6:	a0 2d       	mov	r26, r0
 7f8:	0b 01       	movw	r0, r22
 7fa:	b9 01       	movw	r22, r18
 7fc:	90 01       	movw	r18, r0
 7fe:	0c 01       	movw	r0, r24
 800:	ca 01       	movw	r24, r20
 802:	a0 01       	movw	r20, r0
 804:	11 24       	eor	r1, r1
 806:	ff 27       	eor	r31, r31
 808:	59 1b       	sub	r21, r25
 80a:	99 f0       	breq	.+38     	; 0x832 <__addsf3x+0x5c>
 80c:	59 3f       	cpi	r21, 0xF9	; 249
 80e:	50 f4       	brcc	.+20     	; 0x824 <__addsf3x+0x4e>
 810:	50 3e       	cpi	r21, 0xE0	; 224
 812:	68 f1       	brcs	.+90     	; 0x86e <__addsf3x+0x98>
 814:	1a 16       	cp	r1, r26
 816:	f0 40       	sbci	r31, 0x00	; 0
 818:	a2 2f       	mov	r26, r18
 81a:	23 2f       	mov	r18, r19
 81c:	34 2f       	mov	r19, r20
 81e:	44 27       	eor	r20, r20
 820:	58 5f       	subi	r21, 0xF8	; 248
 822:	f3 cf       	rjmp	.-26     	; 0x80a <__addsf3x+0x34>
 824:	46 95       	lsr	r20
 826:	37 95       	ror	r19
 828:	27 95       	ror	r18
 82a:	a7 95       	ror	r26
 82c:	f0 40       	sbci	r31, 0x00	; 0
 82e:	53 95       	inc	r21
 830:	c9 f7       	brne	.-14     	; 0x824 <__addsf3x+0x4e>
 832:	7e f4       	brtc	.+30     	; 0x852 <__addsf3x+0x7c>
 834:	1f 16       	cp	r1, r31
 836:	ba 0b       	sbc	r27, r26
 838:	62 0b       	sbc	r22, r18
 83a:	73 0b       	sbc	r23, r19
 83c:	84 0b       	sbc	r24, r20
 83e:	ba f0       	brmi	.+46     	; 0x86e <__addsf3x+0x98>
 840:	91 50       	subi	r25, 0x01	; 1
 842:	a1 f0       	breq	.+40     	; 0x86c <__addsf3x+0x96>
 844:	ff 0f       	add	r31, r31
 846:	bb 1f       	adc	r27, r27
 848:	66 1f       	adc	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	c2 f7       	brpl	.-16     	; 0x840 <__addsf3x+0x6a>
 850:	0e c0       	rjmp	.+28     	; 0x86e <__addsf3x+0x98>
 852:	ba 0f       	add	r27, r26
 854:	62 1f       	adc	r22, r18
 856:	73 1f       	adc	r23, r19
 858:	84 1f       	adc	r24, r20
 85a:	48 f4       	brcc	.+18     	; 0x86e <__addsf3x+0x98>
 85c:	87 95       	ror	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f7 95       	ror	r31
 866:	9e 3f       	cpi	r25, 0xFE	; 254
 868:	08 f0       	brcs	.+2      	; 0x86c <__addsf3x+0x96>
 86a:	b3 cf       	rjmp	.-154    	; 0x7d2 <__addsf3+0x1e>
 86c:	93 95       	inc	r25
 86e:	88 0f       	add	r24, r24
 870:	08 f0       	brcs	.+2      	; 0x874 <__addsf3x+0x9e>
 872:	99 27       	eor	r25, r25
 874:	ee 0f       	add	r30, r30
 876:	97 95       	ror	r25
 878:	87 95       	ror	r24
 87a:	08 95       	ret

0000087c <__fixunssfsi>:
 87c:	98 d0       	rcall	.+304    	; 0x9ae <__fp_splitA>
 87e:	88 f0       	brcs	.+34     	; 0x8a2 <__fixunssfsi+0x26>
 880:	9f 57       	subi	r25, 0x7F	; 127
 882:	90 f0       	brcs	.+36     	; 0x8a8 <__fixunssfsi+0x2c>
 884:	b9 2f       	mov	r27, r25
 886:	99 27       	eor	r25, r25
 888:	b7 51       	subi	r27, 0x17	; 23
 88a:	a0 f0       	brcs	.+40     	; 0x8b4 <__fixunssfsi+0x38>
 88c:	d1 f0       	breq	.+52     	; 0x8c2 <__fixunssfsi+0x46>
 88e:	66 0f       	add	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	1a f0       	brmi	.+6      	; 0x89e <__fixunssfsi+0x22>
 898:	ba 95       	dec	r27
 89a:	c9 f7       	brne	.-14     	; 0x88e <__fixunssfsi+0x12>
 89c:	12 c0       	rjmp	.+36     	; 0x8c2 <__fixunssfsi+0x46>
 89e:	b1 30       	cpi	r27, 0x01	; 1
 8a0:	81 f0       	breq	.+32     	; 0x8c2 <__fixunssfsi+0x46>
 8a2:	9f d0       	rcall	.+318    	; 0x9e2 <__fp_zero>
 8a4:	b1 e0       	ldi	r27, 0x01	; 1
 8a6:	08 95       	ret
 8a8:	9c c0       	rjmp	.+312    	; 0x9e2 <__fp_zero>
 8aa:	67 2f       	mov	r22, r23
 8ac:	78 2f       	mov	r23, r24
 8ae:	88 27       	eor	r24, r24
 8b0:	b8 5f       	subi	r27, 0xF8	; 248
 8b2:	39 f0       	breq	.+14     	; 0x8c2 <__fixunssfsi+0x46>
 8b4:	b9 3f       	cpi	r27, 0xF9	; 249
 8b6:	cc f3       	brlt	.-14     	; 0x8aa <__fixunssfsi+0x2e>
 8b8:	86 95       	lsr	r24
 8ba:	77 95       	ror	r23
 8bc:	67 95       	ror	r22
 8be:	b3 95       	inc	r27
 8c0:	d9 f7       	brne	.-10     	; 0x8b8 <__fixunssfsi+0x3c>
 8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__fixunssfsi+0x56>
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	08 95       	ret

000008d4 <__floatunsisf>:
 8d4:	e8 94       	clt
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <__floatsisf+0x12>

000008d8 <__floatsisf>:
 8d8:	97 fb       	bst	r25, 7
 8da:	3e f4       	brtc	.+14     	; 0x8ea <__floatsisf+0x12>
 8dc:	90 95       	com	r25
 8de:	80 95       	com	r24
 8e0:	70 95       	com	r23
 8e2:	61 95       	neg	r22
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	99 23       	and	r25, r25
 8ec:	a9 f0       	breq	.+42     	; 0x918 <__floatsisf+0x40>
 8ee:	f9 2f       	mov	r31, r25
 8f0:	96 e9       	ldi	r25, 0x96	; 150
 8f2:	bb 27       	eor	r27, r27
 8f4:	93 95       	inc	r25
 8f6:	f6 95       	lsr	r31
 8f8:	87 95       	ror	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f1 11       	cpse	r31, r1
 902:	f8 cf       	rjmp	.-16     	; 0x8f4 <__floatsisf+0x1c>
 904:	fa f4       	brpl	.+62     	; 0x944 <__floatsisf+0x6c>
 906:	bb 0f       	add	r27, r27
 908:	11 f4       	brne	.+4      	; 0x90e <__floatsisf+0x36>
 90a:	60 ff       	sbrs	r22, 0
 90c:	1b c0       	rjmp	.+54     	; 0x944 <__floatsisf+0x6c>
 90e:	6f 5f       	subi	r22, 0xFF	; 255
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	8f 4f       	sbci	r24, 0xFF	; 255
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	16 c0       	rjmp	.+44     	; 0x944 <__floatsisf+0x6c>
 918:	88 23       	and	r24, r24
 91a:	11 f0       	breq	.+4      	; 0x920 <__floatsisf+0x48>
 91c:	96 e9       	ldi	r25, 0x96	; 150
 91e:	11 c0       	rjmp	.+34     	; 0x942 <__floatsisf+0x6a>
 920:	77 23       	and	r23, r23
 922:	21 f0       	breq	.+8      	; 0x92c <__floatsisf+0x54>
 924:	9e e8       	ldi	r25, 0x8E	; 142
 926:	87 2f       	mov	r24, r23
 928:	76 2f       	mov	r23, r22
 92a:	05 c0       	rjmp	.+10     	; 0x936 <__floatsisf+0x5e>
 92c:	66 23       	and	r22, r22
 92e:	71 f0       	breq	.+28     	; 0x94c <__floatsisf+0x74>
 930:	96 e8       	ldi	r25, 0x86	; 134
 932:	86 2f       	mov	r24, r22
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	2a f0       	brmi	.+10     	; 0x944 <__floatsisf+0x6c>
 93a:	9a 95       	dec	r25
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	da f7       	brpl	.-10     	; 0x93a <__floatsisf+0x62>
 944:	88 0f       	add	r24, r24
 946:	96 95       	lsr	r25
 948:	87 95       	ror	r24
 94a:	97 f9       	bld	r25, 7
 94c:	08 95       	ret

0000094e <__fp_inf>:
 94e:	97 f9       	bld	r25, 7
 950:	9f 67       	ori	r25, 0x7F	; 127
 952:	80 e8       	ldi	r24, 0x80	; 128
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	08 95       	ret

0000095a <__fp_nan>:
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	80 ec       	ldi	r24, 0xC0	; 192
 95e:	08 95       	ret

00000960 <__fp_pscA>:
 960:	00 24       	eor	r0, r0
 962:	0a 94       	dec	r0
 964:	16 16       	cp	r1, r22
 966:	17 06       	cpc	r1, r23
 968:	18 06       	cpc	r1, r24
 96a:	09 06       	cpc	r0, r25
 96c:	08 95       	ret

0000096e <__fp_pscB>:
 96e:	00 24       	eor	r0, r0
 970:	0a 94       	dec	r0
 972:	12 16       	cp	r1, r18
 974:	13 06       	cpc	r1, r19
 976:	14 06       	cpc	r1, r20
 978:	05 06       	cpc	r0, r21
 97a:	08 95       	ret

0000097c <__fp_round>:
 97c:	09 2e       	mov	r0, r25
 97e:	03 94       	inc	r0
 980:	00 0c       	add	r0, r0
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0xc>
 984:	88 23       	and	r24, r24
 986:	52 f0       	brmi	.+20     	; 0x99c <__fp_round+0x20>
 988:	bb 0f       	add	r27, r27
 98a:	40 f4       	brcc	.+16     	; 0x99c <__fp_round+0x20>
 98c:	bf 2b       	or	r27, r31
 98e:	11 f4       	brne	.+4      	; 0x994 <__fp_round+0x18>
 990:	60 ff       	sbrs	r22, 0
 992:	04 c0       	rjmp	.+8      	; 0x99c <__fp_round+0x20>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__fp_split3>:
 99e:	57 fd       	sbrc	r21, 7
 9a0:	90 58       	subi	r25, 0x80	; 128
 9a2:	44 0f       	add	r20, r20
 9a4:	55 1f       	adc	r21, r21
 9a6:	59 f0       	breq	.+22     	; 0x9be <__fp_splitA+0x10>
 9a8:	5f 3f       	cpi	r21, 0xFF	; 255
 9aa:	71 f0       	breq	.+28     	; 0x9c8 <__fp_splitA+0x1a>
 9ac:	47 95       	ror	r20

000009ae <__fp_splitA>:
 9ae:	88 0f       	add	r24, r24
 9b0:	97 fb       	bst	r25, 7
 9b2:	99 1f       	adc	r25, r25
 9b4:	61 f0       	breq	.+24     	; 0x9ce <__fp_splitA+0x20>
 9b6:	9f 3f       	cpi	r25, 0xFF	; 255
 9b8:	79 f0       	breq	.+30     	; 0x9d8 <__fp_splitA+0x2a>
 9ba:	87 95       	ror	r24
 9bc:	08 95       	ret
 9be:	12 16       	cp	r1, r18
 9c0:	13 06       	cpc	r1, r19
 9c2:	14 06       	cpc	r1, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	f2 cf       	rjmp	.-28     	; 0x9ac <__fp_split3+0xe>
 9c8:	46 95       	lsr	r20
 9ca:	f1 df       	rcall	.-30     	; 0x9ae <__fp_splitA>
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__fp_splitA+0x30>
 9ce:	16 16       	cp	r1, r22
 9d0:	17 06       	cpc	r1, r23
 9d2:	18 06       	cpc	r1, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	f1 cf       	rjmp	.-30     	; 0x9ba <__fp_splitA+0xc>
 9d8:	86 95       	lsr	r24
 9da:	71 05       	cpc	r23, r1
 9dc:	61 05       	cpc	r22, r1
 9de:	08 94       	sec
 9e0:	08 95       	ret

000009e2 <__fp_zero>:
 9e2:	e8 94       	clt

000009e4 <__fp_szero>:
 9e4:	bb 27       	eor	r27, r27
 9e6:	66 27       	eor	r22, r22
 9e8:	77 27       	eor	r23, r23
 9ea:	cb 01       	movw	r24, r22
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret

000009f0 <__mulsf3>:
 9f0:	0b d0       	rcall	.+22     	; 0xa08 <__mulsf3x>
 9f2:	c4 cf       	rjmp	.-120    	; 0x97c <__fp_round>
 9f4:	b5 df       	rcall	.-150    	; 0x960 <__fp_pscA>
 9f6:	28 f0       	brcs	.+10     	; 0xa02 <__mulsf3+0x12>
 9f8:	ba df       	rcall	.-140    	; 0x96e <__fp_pscB>
 9fa:	18 f0       	brcs	.+6      	; 0xa02 <__mulsf3+0x12>
 9fc:	95 23       	and	r25, r21
 9fe:	09 f0       	breq	.+2      	; 0xa02 <__mulsf3+0x12>
 a00:	a6 cf       	rjmp	.-180    	; 0x94e <__fp_inf>
 a02:	ab cf       	rjmp	.-170    	; 0x95a <__fp_nan>
 a04:	11 24       	eor	r1, r1
 a06:	ee cf       	rjmp	.-36     	; 0x9e4 <__fp_szero>

00000a08 <__mulsf3x>:
 a08:	ca df       	rcall	.-108    	; 0x99e <__fp_split3>
 a0a:	a0 f3       	brcs	.-24     	; 0x9f4 <__mulsf3+0x4>

00000a0c <__mulsf3_pse>:
 a0c:	95 9f       	mul	r25, r21
 a0e:	d1 f3       	breq	.-12     	; 0xa04 <__mulsf3+0x14>
 a10:	95 0f       	add	r25, r21
 a12:	50 e0       	ldi	r21, 0x00	; 0
 a14:	55 1f       	adc	r21, r21
 a16:	62 9f       	mul	r22, r18
 a18:	f0 01       	movw	r30, r0
 a1a:	72 9f       	mul	r23, r18
 a1c:	bb 27       	eor	r27, r27
 a1e:	f0 0d       	add	r31, r0
 a20:	b1 1d       	adc	r27, r1
 a22:	63 9f       	mul	r22, r19
 a24:	aa 27       	eor	r26, r26
 a26:	f0 0d       	add	r31, r0
 a28:	b1 1d       	adc	r27, r1
 a2a:	aa 1f       	adc	r26, r26
 a2c:	64 9f       	mul	r22, r20
 a2e:	66 27       	eor	r22, r22
 a30:	b0 0d       	add	r27, r0
 a32:	a1 1d       	adc	r26, r1
 a34:	66 1f       	adc	r22, r22
 a36:	82 9f       	mul	r24, r18
 a38:	22 27       	eor	r18, r18
 a3a:	b0 0d       	add	r27, r0
 a3c:	a1 1d       	adc	r26, r1
 a3e:	62 1f       	adc	r22, r18
 a40:	73 9f       	mul	r23, r19
 a42:	b0 0d       	add	r27, r0
 a44:	a1 1d       	adc	r26, r1
 a46:	62 1f       	adc	r22, r18
 a48:	83 9f       	mul	r24, r19
 a4a:	a0 0d       	add	r26, r0
 a4c:	61 1d       	adc	r22, r1
 a4e:	22 1f       	adc	r18, r18
 a50:	74 9f       	mul	r23, r20
 a52:	33 27       	eor	r19, r19
 a54:	a0 0d       	add	r26, r0
 a56:	61 1d       	adc	r22, r1
 a58:	23 1f       	adc	r18, r19
 a5a:	84 9f       	mul	r24, r20
 a5c:	60 0d       	add	r22, r0
 a5e:	21 1d       	adc	r18, r1
 a60:	82 2f       	mov	r24, r18
 a62:	76 2f       	mov	r23, r22
 a64:	6a 2f       	mov	r22, r26
 a66:	11 24       	eor	r1, r1
 a68:	9f 57       	subi	r25, 0x7F	; 127
 a6a:	50 40       	sbci	r21, 0x00	; 0
 a6c:	8a f0       	brmi	.+34     	; 0xa90 <__mulsf3_pse+0x84>
 a6e:	e1 f0       	breq	.+56     	; 0xaa8 <__mulsf3_pse+0x9c>
 a70:	88 23       	and	r24, r24
 a72:	4a f0       	brmi	.+18     	; 0xa86 <__mulsf3_pse+0x7a>
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	bb 1f       	adc	r27, r27
 a7a:	66 1f       	adc	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	91 50       	subi	r25, 0x01	; 1
 a82:	50 40       	sbci	r21, 0x00	; 0
 a84:	a9 f7       	brne	.-22     	; 0xa70 <__mulsf3_pse+0x64>
 a86:	9e 3f       	cpi	r25, 0xFE	; 254
 a88:	51 05       	cpc	r21, r1
 a8a:	70 f0       	brcs	.+28     	; 0xaa8 <__mulsf3_pse+0x9c>
 a8c:	60 cf       	rjmp	.-320    	; 0x94e <__fp_inf>
 a8e:	aa cf       	rjmp	.-172    	; 0x9e4 <__fp_szero>
 a90:	5f 3f       	cpi	r21, 0xFF	; 255
 a92:	ec f3       	brlt	.-6      	; 0xa8e <__mulsf3_pse+0x82>
 a94:	98 3e       	cpi	r25, 0xE8	; 232
 a96:	dc f3       	brlt	.-10     	; 0xa8e <__mulsf3_pse+0x82>
 a98:	86 95       	lsr	r24
 a9a:	77 95       	ror	r23
 a9c:	67 95       	ror	r22
 a9e:	b7 95       	ror	r27
 aa0:	f7 95       	ror	r31
 aa2:	e7 95       	ror	r30
 aa4:	9f 5f       	subi	r25, 0xFF	; 255
 aa6:	c1 f7       	brne	.-16     	; 0xa98 <__mulsf3_pse+0x8c>
 aa8:	fe 2b       	or	r31, r30
 aaa:	88 0f       	add	r24, r24
 aac:	91 1d       	adc	r25, r1
 aae:	96 95       	lsr	r25
 ab0:	87 95       	ror	r24
 ab2:	97 f9       	bld	r25, 7
 ab4:	08 95       	ret

00000ab6 <__itoa_ncheck>:
 ab6:	bb 27       	eor	r27, r27
 ab8:	4a 30       	cpi	r20, 0x0A	; 10
 aba:	31 f4       	brne	.+12     	; 0xac8 <__itoa_ncheck+0x12>
 abc:	99 23       	and	r25, r25
 abe:	22 f4       	brpl	.+8      	; 0xac8 <__itoa_ncheck+0x12>
 ac0:	bd e2       	ldi	r27, 0x2D	; 45
 ac2:	90 95       	com	r25
 ac4:	81 95       	neg	r24
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	0c 94 67 05 	jmp	0xace	; 0xace <__utoa_common>

00000acc <__utoa_ncheck>:
 acc:	bb 27       	eor	r27, r27

00000ace <__utoa_common>:
 ace:	fb 01       	movw	r30, r22
 ad0:	55 27       	eor	r21, r21
 ad2:	aa 27       	eor	r26, r26
 ad4:	88 0f       	add	r24, r24
 ad6:	99 1f       	adc	r25, r25
 ad8:	aa 1f       	adc	r26, r26
 ada:	a4 17       	cp	r26, r20
 adc:	10 f0       	brcs	.+4      	; 0xae2 <__utoa_common+0x14>
 ade:	a4 1b       	sub	r26, r20
 ae0:	83 95       	inc	r24
 ae2:	50 51       	subi	r21, 0x10	; 16
 ae4:	b9 f7       	brne	.-18     	; 0xad4 <__utoa_common+0x6>
 ae6:	a0 5d       	subi	r26, 0xD0	; 208
 ae8:	aa 33       	cpi	r26, 0x3A	; 58
 aea:	08 f0       	brcs	.+2      	; 0xaee <__utoa_common+0x20>
 aec:	a9 5d       	subi	r26, 0xD9	; 217
 aee:	a1 93       	st	Z+, r26
 af0:	00 97       	sbiw	r24, 0x00	; 0
 af2:	79 f7       	brne	.-34     	; 0xad2 <__utoa_common+0x4>
 af4:	b1 11       	cpse	r27, r1
 af6:	b1 93       	st	Z+, r27
 af8:	11 92       	st	Z+, r1
 afa:	cb 01       	movw	r24, r22
 afc:	0c 94 80 05 	jmp	0xb00	; 0xb00 <strrev>

00000b00 <strrev>:
 b00:	dc 01       	movw	r26, r24
 b02:	fc 01       	movw	r30, r24
 b04:	67 2f       	mov	r22, r23
 b06:	71 91       	ld	r23, Z+
 b08:	77 23       	and	r23, r23
 b0a:	e1 f7       	brne	.-8      	; 0xb04 <strrev+0x4>
 b0c:	32 97       	sbiw	r30, 0x02	; 2
 b0e:	04 c0       	rjmp	.+8      	; 0xb18 <strrev+0x18>
 b10:	7c 91       	ld	r23, X
 b12:	6d 93       	st	X+, r22
 b14:	70 83       	st	Z, r23
 b16:	62 91       	ld	r22, -Z
 b18:	ae 17       	cp	r26, r30
 b1a:	bf 07       	cpc	r27, r31
 b1c:	c8 f3       	brcs	.-14     	; 0xb10 <strrev+0x10>
 b1e:	08 95       	ret

00000b20 <_exit>:
 b20:	f8 94       	cli

00000b22 <__stop_program>:
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <__stop_program>


12345656.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001258  000012ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800108  00800108  000012f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016ef  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00002bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a16  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000554  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065e  00000000  00000000  00004138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000202f  00000000  00000000  00004796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  000067c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 00 	jmp	0x184	; 0x184 <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_3>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_10>
      2c:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_11>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_17>
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      54:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_21>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      68:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      6c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      78:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      7c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      80:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      84:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      88:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      8c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      90:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      94:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      98:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      9c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      a8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      ac:	05 a8       	ldd	r0, Z+53	; 0x35
      ae:	4c cd       	rjmp	.-1384   	; 0xfffffb48 <__eeprom_end+0xff7efb48>
      b0:	b2 d4       	rcall	.+2404   	; 0xa16 <__vector_11+0x1ce>
      b2:	4e b9       	out	0x0e, r20	; 14
      b4:	38 36       	cpi	r19, 0x68	; 104
      b6:	a9 02       	muls	r26, r25
      b8:	0c 50       	subi	r16, 0x0C	; 12
      ba:	b9 91       	ld	r27, Y+
      bc:	86 88       	ldd	r8, Z+22	; 0x16
      be:	08 3c       	cpi	r16, 0xC8	; 200
      c0:	a6 aa       	std	Z+54, r10	; 0x36
      c2:	aa 2a       	or	r10, r26
      c4:	be 00       	.word	0x00be	; ????
      c6:	00 00       	nop
      c8:	80 3f       	cpi	r24, 0xF0	; 240

000000ca <__trampolines_end>:
      ca:	0d 0a       	sbc	r0, r29
	...

000000cd <__c.1984>:
      cd:	0d 0a 00                                            ...

000000d0 <descriptor_list>:
      d0:	00 01 00 00 67 01 12 00 02 00 00 24 01 43 00 03     ....g......$.C..
      e0:	00 00 20 01 04 01 03 09 04 0c 01 12 02 03 09 04     .. .............
      f0:	04 01 06 03 03 09 04 fa 00 08                       ..........

000000fa <string3>:
      fa:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000104 <string2>:
     104:	06 03 4d 00 32 00 00 00                             ..M.2...

0000010c <string1>:
     10c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     11c:	65 00 00 00                                         e...

00000120 <string0>:
     120:	04 03 09 04                                         ....

00000124 <config1_descriptor>:
     124:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     134:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     144:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     154:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     164:	40 00 00                                            @..

00000167 <device_descriptor>:
     167:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     177:	03 01                                               ..

00000179 <endpoint_config_table>:
     179:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000184 <__ctors_end>:
     184:	11 24       	eor	r1, r1
     186:	1f be       	out	0x3f, r1	; 63
     188:	cf ef       	ldi	r28, 0xFF	; 255
     18a:	da e0       	ldi	r29, 0x0A	; 10
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	cd bf       	out	0x3d, r28	; 61

00000190 <__do_copy_data>:
     190:	11 e0       	ldi	r17, 0x01	; 1
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	e8 e5       	ldi	r30, 0x58	; 88
     198:	f2 e1       	ldi	r31, 0x12	; 18
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x10>
     19c:	05 90       	lpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a8 30       	cpi	r26, 0x08	; 8
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0xc>

000001a6 <__do_clear_bss>:
     1a6:	21 e0       	ldi	r18, 0x01	; 1
     1a8:	a8 e0       	ldi	r26, 0x08	; 8
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	af 31       	cpi	r26, 0x1F	; 31
     1b2:	b2 07       	cpc	r27, r18
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
     1ba:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <main>:
volatile int flag;


int main(void)
{
	m_clockdivide(0);//set the system clock frequency as 500KHz
     1c2:	e1 e6       	ldi	r30, 0x61	; 97
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 e8       	ldi	r24, 0x80	; 128
     1c8:	80 83       	st	Z, r24
     1ca:	10 82       	st	Z, r1
	m_usb_init();
     1cc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <m_usb_init>
	
	m_bus_init(); // enable mBUS
     1d0:	0e 94 a3 02 	call	0x546	; 0x546 <m_bus_init>
	m_rf_open(channel,RXADDRESS,PACKET_LENGTH); // configure mRF
     1d4:	43 e0       	ldi	r20, 0x03	; 3
     1d6:	67 e4       	ldi	r22, 0x47	; 71
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 b4 02 	call	0x568	; 0x568 <m_rf_open>
	
	clear(TCCR1B,CS12);//set prescaler to /64
     1de:	e1 e8       	ldi	r30, 0x81	; 129
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8b 7f       	andi	r24, 0xFB	; 251
     1e6:	80 83       	st	Z, r24
	set(TCCR1B,CS11);
     1e8:	80 81       	ld	r24, Z
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     1ee:	80 81       	ld	r24, Z
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	80 83       	st	Z, r24
	
	//OCR1A=2000000/(64*frequency);//set the value of OCR1A as 100
	//OCR1B=OCR1A/2

	set(TCCR1B,WGM13);//(mode 15) UP to OCR1A, PWM mode
     1f4:	80 81       	ld	r24, Z
     1f6:	80 61       	ori	r24, 0x10	; 16
     1f8:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     1fa:	80 81       	ld	r24, Z
     1fc:	88 60       	ori	r24, 0x08	; 8
     1fe:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
     200:	e0 e8       	ldi	r30, 0x80	; 128
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	82 60       	ori	r24, 0x02	; 2
     208:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
     20a:	80 81       	ld	r24, Z
     20c:	81 60       	ori	r24, 0x01	; 1
     20e:	80 83       	st	Z, r24
	set(TCCR1A,COM1B1);//set at OCR1B, clear at rollover
     210:	80 81       	ld	r24, Z
     212:	80 62       	ori	r24, 0x20	; 32
     214:	80 83       	st	Z, r24
	set(TCCR1A,COM1B0);
     216:	80 81       	ld	r24, Z
     218:	80 61       	ori	r24, 0x10	; 16
     21a:	80 83       	st	Z, r24
	
	set(TIMSK1,OCIE1A);//call an interrupt whenever (TCNT1 matches OCR1A)
     21c:	ef e6       	ldi	r30, 0x6F	; 111
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	82 60       	ori	r24, 0x02	; 2
     224:	80 83       	st	Z, r24
	sei();//enable global interrupt
     226:	78 94       	sei
	
	set(TCCR0B,WGM02); // MODE: up to OCR0A
     228:	85 b5       	in	r24, 0x25	; 37
     22a:	88 60       	ori	r24, 0x08	; 8
     22c:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A,WGM01); // ^
     22e:	84 b5       	in	r24, 0x24	; 36
     230:	82 60       	ori	r24, 0x02	; 2
     232:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A,WGM00); // ^
     234:	84 b5       	in	r24, 0x24	; 36
     236:	81 60       	ori	r24, 0x01	; 1
     238:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A,COM0B1); // clear at OCR0B, set at OCR0A
     23a:	84 b5       	in	r24, 0x24	; 36
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A,COM0B0); // ^
     240:	84 b5       	in	r24, 0x24	; 36
     242:	80 61       	ori	r24, 0x10	; 16
     244:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B,CS02); // set prescaler to /1024
     246:	85 b5       	in	r24, 0x25	; 37
     248:	84 60       	ori	r24, 0x04	; 4
     24a:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01); // ^
     24c:	85 b5       	in	r24, 0x25	; 37
     24e:	8d 7f       	andi	r24, 0xFD	; 253
     250:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00); // ^
     252:	85 b5       	in	r24, 0x25	; 37
     254:	81 60       	ori	r24, 0x01	; 1
     256:	85 bd       	out	0x25, r24	; 37
	
	set(TIMSK0,OCIE0A);
     258:	ee e6       	ldi	r30, 0x6E	; 110
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	82 60       	ori	r24, 0x02	; 2
     260:	80 83       	st	Z, r24
	
	OCR0A=10;
     262:	8a e0       	ldi	r24, 0x0A	; 10
     264:	87 bd       	out	0x27, r24	; 39
	
	set(DDRB,6);
     266:	26 9a       	sbi	0x04, 6	; 4
		if(flag==1){
			
			frequency= buffer[0]+256*buffer[1];
			//realFrequency=60;
			realFrequency=frequency/10;
			OCR1A=160000/(64*realFrequency);
     268:	0f 2e       	mov	r0, r31
     26a:	f8 e8       	ldi	r31, 0x88	; 136
     26c:	2f 2e       	mov	r2, r31
     26e:	31 2c       	mov	r3, r1
     270:	f0 2d       	mov	r31, r0
			
			
		}
		

		if(count>16*buffer[2]){
     272:	c0 e1       	ldi	r28, 0x10	; 16
     274:	d1 e0       	ldi	r29, 0x01	; 1
			
			clear(DDRB,6);
		count=0;}
		
		if(countsine<100){
			OCR1B=((double)OCR1A)/2.0+sin(((double)countsine)/((double)100)*2*pi)*((double)OCR1A)/2.0;//set the value of OCR1B
     276:	0f 2e       	mov	r0, r31
     278:	fa e8       	ldi	r31, 0x8A	; 138
     27a:	8f 2e       	mov	r8, r31
     27c:	91 2c       	mov	r9, r1
     27e:	f0 2d       	mov	r31, r0
	
	
	
	while(1){
		
		m_usb_tx_int(realFrequency);
     280:	80 91 17 01 	lds	r24, 0x0117
     284:	90 91 18 01 	lds	r25, 0x0118
     288:	0e 94 c3 05 	call	0xb86	; 0xb86 <m_usb_tx_int>
		m_usb_tx_string("\r\n");
     28c:	8d ec       	ldi	r24, 0xCD	; 205
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
		
		
		
		if(flag==1){
     294:	80 91 19 01 	lds	r24, 0x0119
     298:	90 91 1a 01 	lds	r25, 0x011A
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	09 f0       	breq	.+2      	; 0x2a2 <main+0xe0>
     2a0:	49 c0       	rjmp	.+146    	; 0x334 <main+0x172>
			
			frequency= buffer[0]+256*buffer[1];
     2a2:	ee e0       	ldi	r30, 0x0E	; 14
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	20 81       	ld	r18, Z
     2a8:	ef e0       	ldi	r30, 0x0F	; 15
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	80 81       	ld	r24, Z
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	98 2f       	mov	r25, r24
     2b2:	88 27       	eor	r24, r24
     2b4:	82 0f       	add	r24, r18
     2b6:	91 1d       	adc	r25, r1
     2b8:	90 93 16 01 	sts	0x0116, r25
     2bc:	80 93 15 01 	sts	0x0115, r24
			//realFrequency=60;
			realFrequency=frequency/10;
     2c0:	80 91 15 01 	lds	r24, 0x0115
     2c4:	90 91 16 01 	lds	r25, 0x0116
     2c8:	6a e0       	ldi	r22, 0x0A	; 10
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	0e 94 8c 08 	call	0x1118	; 0x1118 <__divmodhi4>
     2d0:	70 93 18 01 	sts	0x0118, r23
     2d4:	60 93 17 01 	sts	0x0117, r22
			OCR1A=160000/(64*realFrequency);
     2d8:	20 91 17 01 	lds	r18, 0x0117
     2dc:	30 91 18 01 	lds	r19, 0x0118
     2e0:	00 24       	eor	r0, r0
     2e2:	36 95       	lsr	r19
     2e4:	27 95       	ror	r18
     2e6:	07 94       	ror	r0
     2e8:	36 95       	lsr	r19
     2ea:	27 95       	ror	r18
     2ec:	07 94       	ror	r0
     2ee:	32 2f       	mov	r19, r18
     2f0:	20 2d       	mov	r18, r0
     2f2:	44 27       	eor	r20, r20
     2f4:	37 fd       	sbrc	r19, 7
     2f6:	40 95       	com	r20
     2f8:	54 2f       	mov	r21, r20
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	71 e7       	ldi	r23, 0x71	; 113
     2fe:	82 e0       	ldi	r24, 0x02	; 2
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 a0 08 	call	0x1140	; 0x1140 <__divmodsi4>
     306:	f1 01       	movw	r30, r2
     308:	31 83       	std	Z+1, r19	; 0x01
     30a:	20 83       	st	Z, r18
			set(DDRB,6);
     30c:	26 9a       	sbi	0x04, 6	; 4
			m_green(TOGGLE);
     30e:	6a 9a       	sbi	0x0d, 2	; 13
     310:	8e b1       	in	r24, 0x0e	; 14
     312:	f4 e0       	ldi	r31, 0x04	; 4
     314:	8f 27       	eor	r24, r31
     316:	8e b9       	out	0x0e, r24	; 14
			TCNT0=0;
     318:	16 bc       	out	0x26, r1	; 38
			count=0;
     31a:	10 92 08 01 	sts	0x0108, r1
     31e:	10 92 09 01 	sts	0x0109, r1
     322:	10 92 0a 01 	sts	0x010A, r1
     326:	10 92 0b 01 	sts	0x010B, r1
			flag=0;
     32a:	10 92 1a 01 	sts	0x011A, r1
     32e:	10 92 19 01 	sts	0x0119, r1
     332:	02 c0       	rjmp	.+4      	; 0x338 <main+0x176>
			
			}else{
			m_green(0);
     334:	6a 9a       	sbi	0x0d, 2	; 13
     336:	72 9a       	sbi	0x0e, 2	; 14
			
			
		}
		

		if(count>16*buffer[2]){
     338:	68 81       	ld	r22, Y
     33a:	c0 90 08 01 	lds	r12, 0x0108
     33e:	d0 90 09 01 	lds	r13, 0x0109
     342:	e0 90 0a 01 	lds	r14, 0x010A
     346:	f0 90 0b 01 	lds	r15, 0x010B
     34a:	80 e1       	ldi	r24, 0x10	; 16
     34c:	68 9f       	mul	r22, r24
     34e:	b0 01       	movw	r22, r0
     350:	11 24       	eor	r1, r1
     352:	88 27       	eor	r24, r24
     354:	77 fd       	sbrc	r23, 7
     356:	80 95       	com	r24
     358:	98 2f       	mov	r25, r24
     35a:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     35e:	a7 01       	movw	r20, r14
     360:	96 01       	movw	r18, r12
     362:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__cmpsf2>
     366:	88 23       	and	r24, r24
     368:	4c f4       	brge	.+18     	; 0x37c <main+0x1ba>
			
			clear(DDRB,6);
     36a:	26 98       	cbi	0x04, 6	; 4
		count=0;}
     36c:	10 92 08 01 	sts	0x0108, r1
     370:	10 92 09 01 	sts	0x0109, r1
     374:	10 92 0a 01 	sts	0x010A, r1
     378:	10 92 0b 01 	sts	0x010B, r1
		
		if(countsine<100){
     37c:	80 91 0c 01 	lds	r24, 0x010C
     380:	90 91 0d 01 	lds	r25, 0x010D
     384:	84 36       	cpi	r24, 0x64	; 100
     386:	91 05       	cpc	r25, r1
     388:	0c f0       	brlt	.+2      	; 0x38c <main+0x1ca>
     38a:	5c c0       	rjmp	.+184    	; 0x444 <main+0x282>
			OCR1B=((double)OCR1A)/2.0+sin(((double)countsine)/((double)100)*2*pi)*((double)OCR1A)/2.0;//set the value of OCR1B
     38c:	f1 01       	movw	r30, r2
     38e:	00 81       	ld	r16, Z
     390:	11 81       	ldd	r17, Z+1	; 0x01
     392:	60 91 0c 01 	lds	r22, 0x010C
     396:	70 91 0d 01 	lds	r23, 0x010D
     39a:	88 27       	eor	r24, r24
     39c:	77 fd       	sbrc	r23, 7
     39e:	80 95       	com	r24
     3a0:	98 2f       	mov	r25, r24
     3a2:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	48 ec       	ldi	r20, 0xC8	; 200
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__divsf3>
     3b2:	9b 01       	movw	r18, r22
     3b4:	ac 01       	movw	r20, r24
     3b6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     3ba:	2a ed       	ldi	r18, 0xDA	; 218
     3bc:	3f e0       	ldi	r19, 0x0F	; 15
     3be:	49 e4       	ldi	r20, 0x49	; 73
     3c0:	50 e4       	ldi	r21, 0x40	; 64
     3c2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     3c6:	0e 94 09 08 	call	0x1012	; 0x1012 <sin>
     3ca:	5b 01       	movw	r10, r22
     3cc:	6c 01       	movw	r12, r24
     3ce:	f1 01       	movw	r30, r2
     3d0:	e0 80       	ld	r14, Z
     3d2:	f1 80       	ldd	r15, Z+1	; 0x01
     3d4:	b8 01       	movw	r22, r16
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatunsisf>
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	5f e3       	ldi	r21, 0x3F	; 63
     3e6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     3ea:	2b 01       	movw	r4, r22
     3ec:	3c 01       	movw	r6, r24
     3ee:	b7 01       	movw	r22, r14
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatunsisf>
     3f8:	9b 01       	movw	r18, r22
     3fa:	ac 01       	movw	r20, r24
     3fc:	c6 01       	movw	r24, r12
     3fe:	b5 01       	movw	r22, r10
     400:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	5f e3       	ldi	r21, 0x3F	; 63
     40c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3>
     410:	9b 01       	movw	r18, r22
     412:	ac 01       	movw	r20, r24
     414:	c3 01       	movw	r24, r6
     416:	b2 01       	movw	r22, r4
     418:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     41c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fixunssfsi>
     420:	f4 01       	movw	r30, r8
     422:	71 83       	std	Z+1, r23	; 0x01
     424:	60 83       	st	Z, r22
			m_usb_tx_int(OCR1A);
     426:	f1 01       	movw	r30, r2
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	0e 94 c3 05 	call	0xb86	; 0xb86 <m_usb_tx_int>
			m_usb_tx_int(OCR1B);
     430:	f4 01       	movw	r30, r8
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	0e 94 c3 05 	call	0xb86	; 0xb86 <m_usb_tx_int>
			m_usb_tx_string("\r\n");
     43a:	8a ec       	ldi	r24, 0xCA	; 202
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 a9 05 	call	0xb52	; 0xb52 <print_P>
     442:	1e cf       	rjmp	.-452    	; 0x280 <main+0xbe>
			}else{
			countsine=0;
     444:	10 92 0d 01 	sts	0x010D, r1
     448:	10 92 0c 01 	sts	0x010C, r1
     44c:	19 cf       	rjmp	.-462    	; 0x280 <main+0xbe>

0000044e <__vector_3>:
	
	
}


ISR(INT2_vect){
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);
     470:	63 e0       	ldi	r22, 0x03	; 3
     472:	8e e0       	ldi	r24, 0x0E	; 14
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	0e 94 0a 03 	call	0x614	; 0x614 <m_rf_read>
	flag=1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	90 93 1a 01 	sts	0x011A, r25
     482:	80 93 19 01 	sts	0x0119, r24
	// 	OCR1A=2000000/(64*realFrequency);
	// 	set(DDRB,6);
	// 	m_green(TOGGLE);
	// 	TCNT0=0;

}
     486:	ff 91       	pop	r31
     488:	ef 91       	pop	r30
     48a:	bf 91       	pop	r27
     48c:	af 91       	pop	r26
     48e:	9f 91       	pop	r25
     490:	8f 91       	pop	r24
     492:	7f 91       	pop	r23
     494:	6f 91       	pop	r22
     496:	5f 91       	pop	r21
     498:	4f 91       	pop	r20
     49a:	3f 91       	pop	r19
     49c:	2f 91       	pop	r18
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_17>:
ISR(TIMER1_COMPA_vect){
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
	countsine++;
     4b6:	80 91 0c 01 	lds	r24, 0x010C
     4ba:	90 91 0d 01 	lds	r25, 0x010D
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	90 93 0d 01 	sts	0x010D, r25
     4c4:	80 93 0c 01 	sts	0x010C, r24
}
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	0f 90       	pop	r0
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	0f 90       	pop	r0
     4d2:	1f 90       	pop	r1
     4d4:	18 95       	reti

000004d6 <__vector_21>:

ISR(TIMER0_COMPA_vect){
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
	count++;
     4f8:	60 91 08 01 	lds	r22, 0x0108
     4fc:	70 91 09 01 	lds	r23, 0x0109
     500:	80 91 0a 01 	lds	r24, 0x010A
     504:	90 91 0b 01 	lds	r25, 0x010B
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e8       	ldi	r20, 0x80	; 128
     50e:	5f e3       	ldi	r21, 0x3F	; 63
     510:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     514:	60 93 08 01 	sts	0x0108, r22
     518:	70 93 09 01 	sts	0x0109, r23
     51c:	80 93 0a 01 	sts	0x010A, r24
     520:	90 93 0b 01 	sts	0x010B, r25
	
}
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     546:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     548:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     54a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     54c:	8c e0       	ldi	r24, 0x0C	; 12
     54e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     552:	e9 e6       	ldi	r30, 0x69	; 105
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	80 62       	ori	r24, 0x20	; 32
     55a:	80 83       	st	Z, r24
     55c:	80 81       	ld	r24, Z
     55e:	8f 7e       	andi	r24, 0xEF	; 239
     560:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     562:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     564:	78 94       	sei
     566:	08 95       	ret

00000568 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	18 2f       	mov	r17, r24
     570:	d6 2f       	mov	r29, r22
     572:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     574:	0e 94 a3 02 	call	0x546	; 0x546 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     578:	94 ea       	ldi	r25, 0xA4	; 164
     57a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     57e:	ec eb       	ldi	r30, 0xBC	; 188
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	90 81       	ld	r25, Z
     584:	99 23       	and	r25, r25
     586:	ec f7       	brge	.-6      	; 0x582 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     588:	90 e5       	ldi	r25, 0x50	; 80
     58a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     58e:	94 e8       	ldi	r25, 0x84	; 132
     590:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     594:	ec eb       	ldi	r30, 0xBC	; 188
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	90 81       	ld	r25, Z
     59a:	99 23       	and	r25, r25
     59c:	ec f7       	brge	.-6      	; 0x598 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     59e:	90 91 b9 00 	lds	r25, 0x00B9
     5a2:	98 7f       	andi	r25, 0xF8	; 248
     5a4:	90 32       	cpi	r25, 0x20	; 32
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     5a8:	84 e9       	ldi	r24, 0x94	; 148
     5aa:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	2d c0       	rjmp	.+90     	; 0x60c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     5b8:	84 e8       	ldi	r24, 0x84	; 132
     5ba:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5be:	ec eb       	ldi	r30, 0xBC	; 188
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	90 81       	ld	r25, Z
     5c4:	99 23       	and	r25, r25
     5c6:	ec f7       	brge	.-6      	; 0x5c2 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
     5c8:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
     5cc:	84 e8       	ldi	r24, 0x84	; 132
     5ce:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5d2:	ec eb       	ldi	r30, 0xBC	; 188
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	88 23       	and	r24, r24
     5da:	ec f7       	brge	.-6      	; 0x5d6 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
     5dc:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
     5e0:	84 e8       	ldi	r24, 0x84	; 132
     5e2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5e6:	ec eb       	ldi	r30, 0xBC	; 188
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	88 23       	and	r24, r24
     5ee:	ec f7       	brge	.-6      	; 0x5ea <m_rf_open+0x82>
	
	TWDR = packet_length;
     5f0:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
     5f4:	84 e8       	ldi	r24, 0x84	; 132
     5f6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     5fa:	ec eb       	ldi	r30, 0xBC	; 188
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	88 23       	and	r24, r24
     602:	ec f7       	brge	.-6      	; 0x5fe <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     604:	84 e9       	ldi	r24, 0x94	; 148
     606:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	08 95       	ret

00000614 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     61a:	24 ea       	ldi	r18, 0xA4	; 164
     61c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
     620:	ec eb       	ldi	r30, 0xBC	; 188
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	20 81       	ld	r18, Z
     626:	22 23       	and	r18, r18
     628:	ec f7       	brge	.-6      	; 0x624 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     62a:	21 e5       	ldi	r18, 0x51	; 81
     62c:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
     630:	24 e8       	ldi	r18, 0x84	; 132
     632:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     636:	ec eb       	ldi	r30, 0xBC	; 188
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	20 81       	ld	r18, Z
     63c:	22 23       	and	r18, r18
     63e:	ec f7       	brge	.-6      	; 0x63a <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     640:	20 91 b9 00 	lds	r18, 0x00B9
     644:	28 7f       	andi	r18, 0xF8	; 248
     646:	28 34       	cpi	r18, 0x48	; 72
     648:	29 f4       	brne	.+10     	; 0x654 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     64a:	84 e9       	ldi	r24, 0x94	; 148
     64c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	44 c0       	rjmp	.+136    	; 0x6dc <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     654:	24 ec       	ldi	r18, 0xC4	; 196
     656:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     65a:	ec eb       	ldi	r30, 0xBC	; 188
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	20 81       	ld	r18, Z
     660:	22 23       	and	r18, r18
     662:	ec f7       	brge	.-6      	; 0x65e <m_rf_read+0x4a>
	bytes = TWDR;
     664:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
     668:	16 13       	cpse	r17, r22
     66a:	0a c0       	rjmp	.+20     	; 0x680 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     66c:	41 2f       	mov	r20, r17
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	41 50       	subi	r20, 0x01	; 1
     672:	51 09       	sbc	r21, r1
     674:	14 16       	cp	r1, r20
     676:	15 06       	cpc	r1, r21
     678:	44 f0       	brlt	.+16     	; 0x68a <m_rf_read+0x76>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	1c c0       	rjmp	.+56     	; 0x6b8 <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     680:	84 e9       	ldi	r24, 0x94	; 148
     682:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	29 c0       	rjmp	.+82     	; 0x6dc <m_rf_read+0xc8>
     68a:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     690:	ec eb       	ldi	r30, 0xBC	; 188
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     696:	cb eb       	ldi	r28, 0xBB	; 187
     698:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     69a:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     69c:	60 81       	ld	r22, Z
     69e:	66 23       	and	r22, r22
     6a0:	ec f7       	brge	.-6      	; 0x69c <m_rf_read+0x88>
		buffer[i] = TWDR;
     6a2:	68 81       	ld	r22, Y
     6a4:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	24 17       	cp	r18, r20
     6ac:	35 07       	cpc	r19, r21
     6ae:	ac f3       	brlt	.-22     	; 0x69a <m_rf_read+0x86>
     6b0:	21 2f       	mov	r18, r17
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	21 50       	subi	r18, 0x01	; 1
     6b6:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     6b8:	44 e8       	ldi	r20, 0x84	; 132
     6ba:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     6be:	ec eb       	ldi	r30, 0xBC	; 188
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	40 81       	ld	r20, Z
     6c4:	44 23       	and	r20, r20
     6c6:	ec f7       	brge	.-6      	; 0x6c2 <m_rf_read+0xae>
	buffer[i++] = TWDR;
     6c8:	40 91 bb 00 	lds	r20, 0x00BB
     6cc:	fc 01       	movw	r30, r24
     6ce:	e2 0f       	add	r30, r18
     6d0:	f3 1f       	adc	r31, r19
     6d2:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     6d4:	84 e9       	ldi	r24, 0x94	; 148
     6d6:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	08 95       	ret

000006e4 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     6ea:	80 ea       	ldi	r24, 0xA0	; 160
     6ec:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     6f0:	82 e1       	ldi	r24, 0x12	; 18
     6f2:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     6f4:	09 b4       	in	r0, 0x29	; 41
     6f6:	00 fe       	sbrs	r0, 0
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     6fa:	80 e9       	ldi	r24, 0x90	; 144
     6fc:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     700:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     704:	10 92 14 01 	sts	0x0114, r1
	cdc_line_rtsdtr = 0;
     708:	10 92 11 01 	sts	0x0111, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     70c:	8c e0       	ldi	r24, 0x0C	; 12
     70e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     712:	78 94       	sei
     714:	08 95       	ret

00000716 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     71a:	90 91 14 01 	lds	r25, 0x0114
     71e:	99 23       	and	r25, r25
     720:	09 f4       	brne	.+2      	; 0x724 <m_usb_tx_char+0xe>
     722:	4c c0       	rjmp	.+152    	; 0x7bc <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     724:	9f b7       	in	r25, 0x3f	; 63
	cli();
     726:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     728:	24 e0       	ldi	r18, 0x04	; 4
     72a:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     72e:	20 91 12 01 	lds	r18, 0x0112
     732:	22 23       	and	r18, r18
     734:	49 f0       	breq	.+18     	; 0x748 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     736:	20 91 e8 00 	lds	r18, 0x00E8
     73a:	25 fd       	sbrc	r18, 5
     73c:	03 c0       	rjmp	.+6      	; 0x744 <m_usb_tx_char+0x2e>
			SREG = intr_state;
     73e:	9f bf       	out	0x3f, r25	; 63
			return -1;
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	41 c0       	rjmp	.+130    	; 0x7c6 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     744:	10 92 12 01 	sts	0x0112, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     748:	30 91 e4 00 	lds	r19, 0x00E4
     74c:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     74e:	20 91 e8 00 	lds	r18, 0x00E8
     752:	25 fd       	sbrc	r18, 5
     754:	24 c0       	rjmp	.+72     	; 0x79e <m_usb_tx_char+0x88>
		SREG = intr_state;
     756:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     758:	90 91 e4 00 	lds	r25, 0x00E4
     75c:	93 17       	cp	r25, r19
     75e:	81 f0       	breq	.+32     	; 0x780 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     760:	90 91 14 01 	lds	r25, 0x0114
     764:	99 23       	and	r25, r25
     766:	61 f1       	breq	.+88     	; 0x7c0 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     768:	a9 ee       	ldi	r26, 0xE9	; 233
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     76e:	e8 ee       	ldi	r30, 0xE8	; 232
     770:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     772:	c4 ee       	ldi	r28, 0xE4	; 228
     774:	d0 e0       	ldi	r29, 0x00	; 0
     776:	0d c0       	rjmp	.+26     	; 0x792 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     778:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     77a:	98 81       	ld	r25, Y
     77c:	93 13       	cpse	r25, r19
     77e:	05 c0       	rjmp	.+10     	; 0x78a <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 12 01 	sts	0x0112, r24
			return -1;
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	1e c0       	rjmp	.+60     	; 0x7c6 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     78a:	90 91 14 01 	lds	r25, 0x0114
     78e:	99 23       	and	r25, r25
     790:	c9 f0       	breq	.+50     	; 0x7c4 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     792:	9f b7       	in	r25, 0x3f	; 63
		cli();
     794:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     796:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     798:	20 81       	ld	r18, Z
     79a:	25 ff       	sbrs	r18, 5
     79c:	ed cf       	rjmp	.-38     	; 0x778 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     79e:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     7a2:	80 91 e8 00 	lds	r24, 0x00E8
     7a6:	85 fd       	sbrc	r24, 5
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <m_usb_tx_char+0x9a>
     7aa:	8a e3       	ldi	r24, 0x3A	; 58
     7ac:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	80 93 13 01 	sts	0x0113, r24
	SREG = intr_state;
     7b6:	9f bf       	out	0x3f, r25	; 63
	return 0;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <m_usb_tx_char+0xb0>
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     7de:	e1 ee       	ldi	r30, 0xE1	; 225
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
        UDINT = 0;
     7e4:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     7e6:	83 ff       	sbrs	r24, 3
     7e8:	11 c0       	rjmp	.+34     	; 0x80c <__vector_10+0x40>
		UENUM = 0;
     7ea:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     7f4:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     7f8:	92 e1       	ldi	r25, 0x12	; 18
     7fa:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     7fe:	98 e0       	ldi	r25, 0x08	; 8
     800:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     804:	10 92 14 01 	sts	0x0114, r1
		cdc_line_rtsdtr = 0;
     808:	10 92 11 01 	sts	0x0111, r1
        }
	if (intbits & (1<<SOFI)) {
     80c:	82 ff       	sbrs	r24, 2
     80e:	13 c0       	rjmp	.+38     	; 0x836 <__vector_10+0x6a>
		if (usb_configuration) {
     810:	80 91 14 01 	lds	r24, 0x0114
     814:	88 23       	and	r24, r24
     816:	79 f0       	breq	.+30     	; 0x836 <__vector_10+0x6a>
			t = transmit_flush_timer;
     818:	80 91 13 01 	lds	r24, 0x0113
			if (t) {
     81c:	88 23       	and	r24, r24
     81e:	59 f0       	breq	.+22     	; 0x836 <__vector_10+0x6a>
				transmit_flush_timer = --t;
     820:	81 50       	subi	r24, 0x01	; 1
     822:	80 93 13 01 	sts	0x0113, r24
				if (!t) {
     826:	81 11       	cpse	r24, r1
     828:	06 c0       	rjmp	.+12     	; 0x836 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     830:	8a e3       	ldi	r24, 0x3A	; 58
     832:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     872:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     876:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     87a:	83 ff       	sbrs	r24, 3
     87c:	4e c1       	rjmp	.+668    	; 0xb1a <__stack+0x1b>
                bmRequestType = UEDATX;
     87e:	e1 ef       	ldi	r30, 0xF1	; 241
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
     884:	40 81       	ld	r20, Z
                wValue = UEDATX;
     886:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     888:	80 81       	ld	r24, Z
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	38 2b       	or	r19, r24
                wIndex = UEDATX;
     88e:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
     890:	50 81       	ld	r21, Z
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	bc 01       	movw	r22, r24
     896:	75 2b       	or	r23, r21
                wLength = UEDATX;
     898:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
     89a:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     89c:	82 ef       	ldi	r24, 0xF2	; 242
     89e:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     8a2:	46 30       	cpi	r20, 0x06	; 6
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <__vector_11+0x60>
     8a6:	58 c0       	rjmp	.+176    	; 0x958 <__vector_11+0x110>
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     8aa:	81 e2       	ldi	r24, 0x21	; 33
     8ac:	80 93 eb 00 	sts	0x00EB, r24
					return;
     8b0:	3b c1       	rjmp	.+630    	; 0xb28 <__stack+0x29>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
     8b2:	c6 e0       	ldi	r28, 0x06	; 6
     8b4:	80 ed       	ldi	r24, 0xD0	; 208
     8b6:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
     8b8:	fc 01       	movw	r30, r24
     8ba:	45 91       	lpm	r20, Z+
     8bc:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
     8be:	24 17       	cp	r18, r20
     8c0:	35 07       	cpc	r19, r21
     8c2:	11 f0       	breq	.+4      	; 0x8c8 <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
     8c4:	07 96       	adiw	r24, 0x07	; 7
					continue;
     8c6:	23 c0       	rjmp	.+70     	; 0x90e <__vector_11+0xc6>
				}
				list += 2;
     8c8:	fc 01       	movw	r30, r24
     8ca:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     8cc:	45 91       	lpm	r20, Z+
     8ce:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
     8d0:	64 17       	cp	r22, r20
     8d2:	75 07       	cpc	r23, r21
     8d4:	11 f0       	breq	.+4      	; 0x8da <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
     8d6:	07 96       	adiw	r24, 0x07	; 7
					continue;
     8d8:	1a c0       	rjmp	.+52     	; 0x90e <__vector_11+0xc6>
				}
				list += 2;
     8da:	fc 01       	movw	r30, r24
     8dc:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     8de:	25 91       	lpm	r18, Z+
     8e0:	34 91       	lpm	r19, Z
				list += 2;
     8e2:	fc 01       	movw	r30, r24
     8e4:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     8e6:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     8e8:	8b 2f       	mov	r24, r27
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     8ee:	8f 3f       	cpi	r24, 0xFF	; 255
     8f0:	91 05       	cpc	r25, r1
     8f2:	19 f0       	breq	.+6      	; 0x8fa <__vector_11+0xb2>
     8f4:	10 f0       	brcs	.+4      	; 0x8fa <__vector_11+0xb2>
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	85 17       	cp	r24, r21
     8fc:	08 f4       	brcc	.+2      	; 0x900 <__vector_11+0xb8>
     8fe:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     900:	a8 ee       	ldi	r26, 0xE8	; 232
     902:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     904:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     906:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     908:	c1 ef       	ldi	r28, 0xF1	; 241
     90a:	d0 e0       	ldi	r29, 0x00	; 0
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__vector_11+0xcc>
     90e:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     910:	99 f6       	brne	.-90     	; 0x8b8 <__vector_11+0x70>
     912:	cb cf       	rjmp	.-106    	; 0x8aa <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     914:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     916:	98 2f       	mov	r25, r24
     918:	95 70       	andi	r25, 0x05	; 5
     91a:	e1 f3       	breq	.-8      	; 0x914 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
     91c:	82 fd       	sbrc	r24, 2
     91e:	04 c1       	rjmp	.+520    	; 0xb28 <__stack+0x29>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     920:	45 2f       	mov	r20, r21
     922:	51 31       	cpi	r21, 0x11	; 17
     924:	08 f0       	brcs	.+2      	; 0x928 <__vector_11+0xe0>
     926:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
     928:	44 23       	and	r20, r20
     92a:	09 f4       	brne	.+2      	; 0x92e <__vector_11+0xe6>
     92c:	fa c0       	rjmp	.+500    	; 0xb22 <__stack+0x23>
     92e:	f9 01       	movw	r30, r18
     930:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
     932:	94 91       	lpm	r25, Z
     934:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     936:	81 50       	subi	r24, 0x01	; 1
     938:	31 96       	adiw	r30, 0x01	; 1
     93a:	81 11       	cpse	r24, r1
     93c:	fa cf       	rjmp	.-12     	; 0x932 <__vector_11+0xea>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	84 0f       	add	r24, r20
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	28 0f       	add	r18, r24
     948:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     94a:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     94c:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     94e:	51 11       	cpse	r21, r1
     950:	e1 cf       	rjmp	.-62     	; 0x914 <__vector_11+0xcc>
     952:	40 31       	cpi	r20, 0x10	; 16
     954:	f9 f2       	breq	.-66     	; 0x914 <__vector_11+0xcc>
     956:	e8 c0       	rjmp	.+464    	; 0xb28 <__stack+0x29>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     958:	45 30       	cpi	r20, 0x05	; 5
     95a:	61 f4       	brne	.+24     	; 0x974 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     95c:	8e ef       	ldi	r24, 0xFE	; 254
     95e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     962:	e8 ee       	ldi	r30, 0xE8	; 232
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	80 ff       	sbrs	r24, 0
     96a:	fd cf       	rjmp	.-6      	; 0x966 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     96c:	20 68       	ori	r18, 0x80	; 128
     96e:	20 93 e3 00 	sts	0x00E3, r18
			return;
     972:	da c0       	rjmp	.+436    	; 0xb28 <__stack+0x29>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     974:	49 30       	cpi	r20, 0x09	; 9
     976:	09 f0       	breq	.+2      	; 0x97a <__vector_11+0x132>
     978:	36 c0       	rjmp	.+108    	; 0x9e6 <__vector_11+0x19e>
     97a:	c1 11       	cpse	r28, r1
     97c:	5f c0       	rjmp	.+190    	; 0xa3c <__vector_11+0x1f4>
			usb_configuration = wValue;
     97e:	20 93 14 01 	sts	0x0114, r18
			cdc_line_rtsdtr = 0;
     982:	10 92 11 01 	sts	0x0111, r1
			transmit_flush_timer = 0;
     986:	10 92 13 01 	sts	0x0113, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     98a:	8e ef       	ldi	r24, 0xFE	; 254
     98c:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     990:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     992:	89 e7       	ldi	r24, 0x79	; 121
     994:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     996:	c9 ee       	ldi	r28, 0xE9	; 233
     998:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     99a:	ab ee       	ldi	r26, 0xEB	; 235
     99c:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     99e:	6c ee       	ldi	r22, 0xEC	; 236
     9a0:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     9a2:	4d ee       	ldi	r20, 0xED	; 237
     9a4:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     9a6:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
     9a8:	9c 01       	movw	r18, r24
     9aa:	2f 5f       	subi	r18, 0xFF	; 255
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	fc 01       	movw	r30, r24
     9b0:	04 91       	lpm	r16, Z
				UECONX = en;
     9b2:	0c 93       	st	X, r16
				if (en) {
     9b4:	00 23       	and	r16, r16
     9b6:	61 f0       	breq	.+24     	; 0x9d0 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
     9b8:	f9 01       	movw	r30, r18
     9ba:	24 91       	lpm	r18, Z
     9bc:	fb 01       	movw	r30, r22
     9be:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
     9c0:	9c 01       	movw	r18, r24
     9c2:	2d 5f       	subi	r18, 0xFD	; 253
     9c4:	3f 4f       	sbci	r19, 0xFF	; 255
     9c6:	fc 01       	movw	r30, r24
     9c8:	32 96       	adiw	r30, 0x02	; 2
     9ca:	84 91       	lpm	r24, Z
     9cc:	fa 01       	movw	r30, r20
     9ce:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     9d0:	1f 5f       	subi	r17, 0xFF	; 255
     9d2:	15 30       	cpi	r17, 0x05	; 5
     9d4:	11 f0       	breq	.+4      	; 0x9da <__vector_11+0x192>
     9d6:	c9 01       	movw	r24, r18
     9d8:	e6 cf       	rjmp	.-52     	; 0x9a6 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     9da:	ea ee       	ldi	r30, 0xEA	; 234
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	8e e1       	ldi	r24, 0x1E	; 30
     9e0:	80 83       	st	Z, r24
        		UERST = 0;
     9e2:	10 82       	st	Z, r1
			return;
     9e4:	a1 c0       	rjmp	.+322    	; 0xb28 <__stack+0x29>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     9e6:	48 30       	cpi	r20, 0x08	; 8
     9e8:	81 f4       	brne	.+32     	; 0xa0a <__vector_11+0x1c2>
     9ea:	c0 38       	cpi	r28, 0x80	; 128
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__vector_11+0x1a8>
     9ee:	42 c0       	rjmp	.+132    	; 0xa74 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     9f0:	e8 ee       	ldi	r30, 0xE8	; 232
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	80 ff       	sbrs	r24, 0
     9f8:	fd cf       	rjmp	.-6      	; 0x9f4 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     9fa:	80 91 14 01 	lds	r24, 0x0114
     9fe:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a02:	8e ef       	ldi	r24, 0xFE	; 254
     a04:	80 93 e8 00 	sts	0x00E8, r24
     a08:	8f c0       	rjmp	.+286    	; 0xb28 <__stack+0x29>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     a0a:	41 32       	cpi	r20, 0x21	; 33
     a0c:	b9 f4       	brne	.+46     	; 0xa3c <__vector_11+0x1f4>
     a0e:	c1 3a       	cpi	r28, 0xA1	; 161
     a10:	09 f0       	breq	.+2      	; 0xa14 <__vector_11+0x1cc>
     a12:	40 c0       	rjmp	.+128    	; 0xa94 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     a14:	e8 ee       	ldi	r30, 0xE8	; 232
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	80 ff       	sbrs	r24, 0
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <__vector_11+0x1d0>
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     a26:	a1 ef       	ldi	r26, 0xF1	; 241
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	21 91       	ld	r18, Z+
     a2c:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     a2e:	e8 17       	cp	r30, r24
     a30:	f9 07       	cpc	r31, r25
     a32:	d9 f7       	brne	.-10     	; 0xa2a <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a34:	8e ef       	ldi	r24, 0xFE	; 254
     a36:	80 93 e8 00 	sts	0x00E8, r24
     a3a:	76 c0       	rjmp	.+236    	; 0xb28 <__stack+0x29>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     a3c:	40 32       	cpi	r20, 0x20	; 32
     a3e:	d1 f4       	brne	.+52     	; 0xa74 <__vector_11+0x22c>
     a40:	c1 32       	cpi	r28, 0x21	; 33
     a42:	09 f0       	breq	.+2      	; 0xa46 <__vector_11+0x1fe>
     a44:	43 c0       	rjmp	.+134    	; 0xacc <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     a46:	e8 ee       	ldi	r30, 0xE8	; 232
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	82 ff       	sbrs	r24, 2
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <__vector_11+0x202>
     a50:	e0 e0       	ldi	r30, 0x00	; 0
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	87 e0       	ldi	r24, 0x07	; 7
     a56:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     a58:	a1 ef       	ldi	r26, 0xF1	; 241
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	2c 91       	ld	r18, X
     a5e:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     a60:	e8 17       	cp	r30, r24
     a62:	f9 07       	cpc	r31, r25
     a64:	d9 f7       	brne	.-10     	; 0xa5c <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     a66:	e8 ee       	ldi	r30, 0xE8	; 232
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	8b ef       	ldi	r24, 0xFB	; 251
     a6c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a6e:	8e ef       	ldi	r24, 0xFE	; 254
     a70:	80 83       	st	Z, r24
     a72:	5a c0       	rjmp	.+180    	; 0xb28 <__stack+0x29>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     a74:	42 32       	cpi	r20, 0x22	; 34
     a76:	71 f4       	brne	.+28     	; 0xa94 <__vector_11+0x24c>
     a78:	c1 32       	cpi	r28, 0x21	; 33
     a7a:	09 f0       	breq	.+2      	; 0xa7e <__vector_11+0x236>
     a7c:	4e c0       	rjmp	.+156    	; 0xb1a <__stack+0x1b>
			cdc_line_rtsdtr = wValue;
     a7e:	20 93 11 01 	sts	0x0111, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     a82:	e8 ee       	ldi	r30, 0xE8	; 232
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	80 ff       	sbrs	r24, 0
     a8a:	fd cf       	rjmp	.-6      	; 0xa86 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a8c:	8e ef       	ldi	r24, 0xFE	; 254
     a8e:	80 93 e8 00 	sts	0x00E8, r24
     a92:	4a c0       	rjmp	.+148    	; 0xb28 <__stack+0x29>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     a94:	41 11       	cpse	r20, r1
     a96:	1a c0       	rjmp	.+52     	; 0xacc <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     a98:	e8 ee       	ldi	r30, 0xE8	; 232
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	80 ff       	sbrs	r24, 0
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     aa2:	c2 38       	cpi	r28, 0x82	; 130
     aa4:	51 f4       	brne	.+20     	; 0xaba <__vector_11+0x272>
				UENUM = wIndex;
     aa6:	e9 ee       	ldi	r30, 0xE9	; 233
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
     aac:	80 91 eb 00 	lds	r24, 0x00EB
     ab0:	85 fb       	bst	r24, 5
     ab2:	88 27       	eor	r24, r24
     ab4:	80 f9       	bld	r24, 0
				UENUM = 0;
     ab6:	10 82       	st	Z, r1
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     aba:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     abc:	e1 ef       	ldi	r30, 0xF1	; 241
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 83       	st	Z, r24
			UEDATX = 0;
     ac2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ac4:	8e ef       	ldi	r24, 0xFE	; 254
     ac6:	80 93 e8 00 	sts	0x00E8, r24
     aca:	2e c0       	rjmp	.+92     	; 0xb28 <__stack+0x29>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     acc:	84 2f       	mov	r24, r20
     ace:	8d 7f       	andi	r24, 0xFD	; 253
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	19 f5       	brne	.+70     	; 0xb1a <__stack+0x1b>
		  && bmRequestType == 0x02 && wValue == 0) {
     ad4:	c2 30       	cpi	r28, 0x02	; 2
     ad6:	09 f5       	brne	.+66     	; 0xb1a <__stack+0x1b>
     ad8:	23 2b       	or	r18, r19
     ada:	f9 f4       	brne	.+62     	; 0xb1a <__stack+0x1b>
			i = wIndex & 0x7F;
     adc:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	86 0f       	add	r24, r22
     ae2:	84 30       	cpi	r24, 0x04	; 4
     ae4:	d0 f4       	brcc	.+52     	; 0xb1a <__stack+0x1b>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ae6:	8e ef       	ldi	r24, 0xFE	; 254
     ae8:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     aec:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
     af0:	43 30       	cpi	r20, 0x03	; 3
     af2:	21 f4       	brne	.+8      	; 0xafc <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     af4:	81 e2       	ldi	r24, 0x21	; 33
     af6:	80 93 eb 00 	sts	0x00EB, r24
     afa:	16 c0       	rjmp	.+44     	; 0xb28 <__stack+0x29>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     afc:	89 e1       	ldi	r24, 0x19	; 25
     afe:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0xd>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	6a 95       	dec	r22
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <__stack+0x9>
     b10:	ea ee       	ldi	r30, 0xEA	; 234
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 83       	st	Z, r24
					UERST = 0;
     b16:	10 82       	st	Z, r1
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <__stack+0x29>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     b1a:	81 e2       	ldi	r24, 0x21	; 33
     b1c:	80 93 eb 00 	sts	0x00EB, r24
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <__stack+0x29>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b22:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     b24:	51 11       	cpse	r21, r1
     b26:	f6 ce       	rjmp	.-532    	; 0x914 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     b58:	ec 01       	movw	r28, r24
     b5a:	21 96       	adiw	r28, 0x01	; 1
     b5c:	fc 01       	movw	r30, r24
     b5e:	14 91       	lpm	r17, Z
		if (!c) break;
     b60:	11 23       	and	r17, r17
     b62:	69 f0       	breq	.+26     	; 0xb7e <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
     b64:	1a 30       	cpi	r17, 0x0A	; 10
     b66:	19 f4       	brne	.+6      	; 0xb6e <print_P+0x1c>
     b68:	8d e0       	ldi	r24, 0x0D	; 13
     b6a:	0e 94 8b 03 	call	0x716	; 0x716 <m_usb_tx_char>
		usb_tx_char(c);
     b6e:	81 2f       	mov	r24, r17
     b70:	0e 94 8b 03 	call	0x716	; 0x716 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     b74:	fe 01       	movw	r30, r28
     b76:	14 91       	lpm	r17, Z
     b78:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
     b7a:	11 11       	cpse	r17, r1
     b7c:	f3 cf       	rjmp	.-26     	; 0xb64 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	08 95       	ret

00000b86 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	27 97       	sbiw	r28, 0x07	; 7
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     ba2:	8e 01       	movw	r16, r28
     ba4:	0f 5f       	subi	r16, 0xFF	; 255
     ba6:	1f 4f       	sbci	r17, 0xFF	; 255
     ba8:	27 e0       	ldi	r18, 0x07	; 7
     baa:	f8 01       	movw	r30, r16
     bac:	11 92       	st	Z+, r1
     bae:	2a 95       	dec	r18
     bb0:	e9 f7       	brne	.-6      	; 0xbac <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bb2:	4a e0       	ldi	r20, 0x0A	; 10
     bb4:	b8 01       	movw	r22, r16
     bb6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__itoa_ncheck>
     bba:	7e 01       	movw	r14, r28
     bbc:	f8 e0       	ldi	r31, 0x08	; 8
     bbe:	ef 0e       	add	r14, r31
     bc0:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     bc2:	f8 01       	movw	r30, r16
     bc4:	81 91       	ld	r24, Z+
     bc6:	8f 01       	movw	r16, r30
     bc8:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     bca:	0e 94 8b 03 	call	0x716	; 0x716 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     bce:	0e 15       	cp	r16, r14
     bd0:	1f 05       	cpc	r17, r15
     bd2:	b9 f7       	brne	.-18     	; 0xbc2 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     bd4:	27 96       	adiw	r28, 0x07	; 7
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <__subsf3>:
     bee:	50 58       	subi	r21, 0x80	; 128

00000bf0 <__addsf3>:
     bf0:	bb 27       	eor	r27, r27
     bf2:	aa 27       	eor	r26, r26
     bf4:	0e d0       	rcall	.+28     	; 0xc12 <__addsf3x>
     bf6:	70 c1       	rjmp	.+736    	; 0xed8 <__fp_round>
     bf8:	61 d1       	rcall	.+706    	; 0xebc <__fp_pscA>
     bfa:	30 f0       	brcs	.+12     	; 0xc08 <__addsf3+0x18>
     bfc:	66 d1       	rcall	.+716    	; 0xeca <__fp_pscB>
     bfe:	20 f0       	brcs	.+8      	; 0xc08 <__addsf3+0x18>
     c00:	31 f4       	brne	.+12     	; 0xc0e <__addsf3+0x1e>
     c02:	9f 3f       	cpi	r25, 0xFF	; 255
     c04:	11 f4       	brne	.+4      	; 0xc0a <__addsf3+0x1a>
     c06:	1e f4       	brtc	.+6      	; 0xc0e <__addsf3+0x1e>
     c08:	56 c1       	rjmp	.+684    	; 0xeb6 <__fp_nan>
     c0a:	0e f4       	brtc	.+2      	; 0xc0e <__addsf3+0x1e>
     c0c:	e0 95       	com	r30
     c0e:	e7 fb       	bst	r30, 7
     c10:	4c c1       	rjmp	.+664    	; 0xeaa <__fp_inf>

00000c12 <__addsf3x>:
     c12:	e9 2f       	mov	r30, r25
     c14:	72 d1       	rcall	.+740    	; 0xefa <__fp_split3>
     c16:	80 f3       	brcs	.-32     	; 0xbf8 <__addsf3+0x8>
     c18:	ba 17       	cp	r27, r26
     c1a:	62 07       	cpc	r22, r18
     c1c:	73 07       	cpc	r23, r19
     c1e:	84 07       	cpc	r24, r20
     c20:	95 07       	cpc	r25, r21
     c22:	18 f0       	brcs	.+6      	; 0xc2a <__addsf3x+0x18>
     c24:	71 f4       	brne	.+28     	; 0xc42 <__addsf3x+0x30>
     c26:	9e f5       	brtc	.+102    	; 0xc8e <__addsf3x+0x7c>
     c28:	8a c1       	rjmp	.+788    	; 0xf3e <__fp_zero>
     c2a:	0e f4       	brtc	.+2      	; 0xc2e <__addsf3x+0x1c>
     c2c:	e0 95       	com	r30
     c2e:	0b 2e       	mov	r0, r27
     c30:	ba 2f       	mov	r27, r26
     c32:	a0 2d       	mov	r26, r0
     c34:	0b 01       	movw	r0, r22
     c36:	b9 01       	movw	r22, r18
     c38:	90 01       	movw	r18, r0
     c3a:	0c 01       	movw	r0, r24
     c3c:	ca 01       	movw	r24, r20
     c3e:	a0 01       	movw	r20, r0
     c40:	11 24       	eor	r1, r1
     c42:	ff 27       	eor	r31, r31
     c44:	59 1b       	sub	r21, r25
     c46:	99 f0       	breq	.+38     	; 0xc6e <__addsf3x+0x5c>
     c48:	59 3f       	cpi	r21, 0xF9	; 249
     c4a:	50 f4       	brcc	.+20     	; 0xc60 <__addsf3x+0x4e>
     c4c:	50 3e       	cpi	r21, 0xE0	; 224
     c4e:	68 f1       	brcs	.+90     	; 0xcaa <__addsf3x+0x98>
     c50:	1a 16       	cp	r1, r26
     c52:	f0 40       	sbci	r31, 0x00	; 0
     c54:	a2 2f       	mov	r26, r18
     c56:	23 2f       	mov	r18, r19
     c58:	34 2f       	mov	r19, r20
     c5a:	44 27       	eor	r20, r20
     c5c:	58 5f       	subi	r21, 0xF8	; 248
     c5e:	f3 cf       	rjmp	.-26     	; 0xc46 <__addsf3x+0x34>
     c60:	46 95       	lsr	r20
     c62:	37 95       	ror	r19
     c64:	27 95       	ror	r18
     c66:	a7 95       	ror	r26
     c68:	f0 40       	sbci	r31, 0x00	; 0
     c6a:	53 95       	inc	r21
     c6c:	c9 f7       	brne	.-14     	; 0xc60 <__addsf3x+0x4e>
     c6e:	7e f4       	brtc	.+30     	; 0xc8e <__addsf3x+0x7c>
     c70:	1f 16       	cp	r1, r31
     c72:	ba 0b       	sbc	r27, r26
     c74:	62 0b       	sbc	r22, r18
     c76:	73 0b       	sbc	r23, r19
     c78:	84 0b       	sbc	r24, r20
     c7a:	ba f0       	brmi	.+46     	; 0xcaa <__addsf3x+0x98>
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	a1 f0       	breq	.+40     	; 0xca8 <__addsf3x+0x96>
     c80:	ff 0f       	add	r31, r31
     c82:	bb 1f       	adc	r27, r27
     c84:	66 1f       	adc	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	c2 f7       	brpl	.-16     	; 0xc7c <__addsf3x+0x6a>
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <__addsf3x+0x98>
     c8e:	ba 0f       	add	r27, r26
     c90:	62 1f       	adc	r22, r18
     c92:	73 1f       	adc	r23, r19
     c94:	84 1f       	adc	r24, r20
     c96:	48 f4       	brcc	.+18     	; 0xcaa <__addsf3x+0x98>
     c98:	87 95       	ror	r24
     c9a:	77 95       	ror	r23
     c9c:	67 95       	ror	r22
     c9e:	b7 95       	ror	r27
     ca0:	f7 95       	ror	r31
     ca2:	9e 3f       	cpi	r25, 0xFE	; 254
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <__addsf3x+0x96>
     ca6:	b3 cf       	rjmp	.-154    	; 0xc0e <__addsf3+0x1e>
     ca8:	93 95       	inc	r25
     caa:	88 0f       	add	r24, r24
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <__addsf3x+0x9e>
     cae:	99 27       	eor	r25, r25
     cb0:	ee 0f       	add	r30, r30
     cb2:	97 95       	ror	r25
     cb4:	87 95       	ror	r24
     cb6:	08 95       	ret

00000cb8 <__cmpsf2>:
     cb8:	d4 d0       	rcall	.+424    	; 0xe62 <__fp_cmp>
     cba:	08 f4       	brcc	.+2      	; 0xcbe <__cmpsf2+0x6>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	08 95       	ret

00000cc0 <__divsf3>:
     cc0:	0c d0       	rcall	.+24     	; 0xcda <__divsf3x>
     cc2:	0a c1       	rjmp	.+532    	; 0xed8 <__fp_round>
     cc4:	02 d1       	rcall	.+516    	; 0xeca <__fp_pscB>
     cc6:	40 f0       	brcs	.+16     	; 0xcd8 <__divsf3+0x18>
     cc8:	f9 d0       	rcall	.+498    	; 0xebc <__fp_pscA>
     cca:	30 f0       	brcs	.+12     	; 0xcd8 <__divsf3+0x18>
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <__divsf3+0x16>
     cce:	5f 3f       	cpi	r21, 0xFF	; 255
     cd0:	19 f0       	breq	.+6      	; 0xcd8 <__divsf3+0x18>
     cd2:	eb c0       	rjmp	.+470    	; 0xeaa <__fp_inf>
     cd4:	51 11       	cpse	r21, r1
     cd6:	34 c1       	rjmp	.+616    	; 0xf40 <__fp_szero>
     cd8:	ee c0       	rjmp	.+476    	; 0xeb6 <__fp_nan>

00000cda <__divsf3x>:
     cda:	0f d1       	rcall	.+542    	; 0xefa <__fp_split3>
     cdc:	98 f3       	brcs	.-26     	; 0xcc4 <__divsf3+0x4>

00000cde <__divsf3_pse>:
     cde:	99 23       	and	r25, r25
     ce0:	c9 f3       	breq	.-14     	; 0xcd4 <__divsf3+0x14>
     ce2:	55 23       	and	r21, r21
     ce4:	b1 f3       	breq	.-20     	; 0xcd2 <__divsf3+0x12>
     ce6:	95 1b       	sub	r25, r21
     ce8:	55 0b       	sbc	r21, r21
     cea:	bb 27       	eor	r27, r27
     cec:	aa 27       	eor	r26, r26
     cee:	62 17       	cp	r22, r18
     cf0:	73 07       	cpc	r23, r19
     cf2:	84 07       	cpc	r24, r20
     cf4:	38 f0       	brcs	.+14     	; 0xd04 <__divsf3_pse+0x26>
     cf6:	9f 5f       	subi	r25, 0xFF	; 255
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	44 1f       	adc	r20, r20
     d00:	aa 1f       	adc	r26, r26
     d02:	a9 f3       	breq	.-22     	; 0xcee <__divsf3_pse+0x10>
     d04:	33 d0       	rcall	.+102    	; 0xd6c <__divsf3_pse+0x8e>
     d06:	0e 2e       	mov	r0, r30
     d08:	3a f0       	brmi	.+14     	; 0xd18 <__divsf3_pse+0x3a>
     d0a:	e0 e8       	ldi	r30, 0x80	; 128
     d0c:	30 d0       	rcall	.+96     	; 0xd6e <__divsf3_pse+0x90>
     d0e:	91 50       	subi	r25, 0x01	; 1
     d10:	50 40       	sbci	r21, 0x00	; 0
     d12:	e6 95       	lsr	r30
     d14:	00 1c       	adc	r0, r0
     d16:	ca f7       	brpl	.-14     	; 0xd0a <__divsf3_pse+0x2c>
     d18:	29 d0       	rcall	.+82     	; 0xd6c <__divsf3_pse+0x8e>
     d1a:	fe 2f       	mov	r31, r30
     d1c:	27 d0       	rcall	.+78     	; 0xd6c <__divsf3_pse+0x8e>
     d1e:	66 0f       	add	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	88 1f       	adc	r24, r24
     d24:	bb 1f       	adc	r27, r27
     d26:	26 17       	cp	r18, r22
     d28:	37 07       	cpc	r19, r23
     d2a:	48 07       	cpc	r20, r24
     d2c:	ab 07       	cpc	r26, r27
     d2e:	b0 e8       	ldi	r27, 0x80	; 128
     d30:	09 f0       	breq	.+2      	; 0xd34 <__divsf3_pse+0x56>
     d32:	bb 0b       	sbc	r27, r27
     d34:	80 2d       	mov	r24, r0
     d36:	bf 01       	movw	r22, r30
     d38:	ff 27       	eor	r31, r31
     d3a:	93 58       	subi	r25, 0x83	; 131
     d3c:	5f 4f       	sbci	r21, 0xFF	; 255
     d3e:	2a f0       	brmi	.+10     	; 0xd4a <__divsf3_pse+0x6c>
     d40:	9e 3f       	cpi	r25, 0xFE	; 254
     d42:	51 05       	cpc	r21, r1
     d44:	68 f0       	brcs	.+26     	; 0xd60 <__divsf3_pse+0x82>
     d46:	b1 c0       	rjmp	.+354    	; 0xeaa <__fp_inf>
     d48:	fb c0       	rjmp	.+502    	; 0xf40 <__fp_szero>
     d4a:	5f 3f       	cpi	r21, 0xFF	; 255
     d4c:	ec f3       	brlt	.-6      	; 0xd48 <__divsf3_pse+0x6a>
     d4e:	98 3e       	cpi	r25, 0xE8	; 232
     d50:	dc f3       	brlt	.-10     	; 0xd48 <__divsf3_pse+0x6a>
     d52:	86 95       	lsr	r24
     d54:	77 95       	ror	r23
     d56:	67 95       	ror	r22
     d58:	b7 95       	ror	r27
     d5a:	f7 95       	ror	r31
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	c9 f7       	brne	.-14     	; 0xd52 <__divsf3_pse+0x74>
     d60:	88 0f       	add	r24, r24
     d62:	91 1d       	adc	r25, r1
     d64:	96 95       	lsr	r25
     d66:	87 95       	ror	r24
     d68:	97 f9       	bld	r25, 7
     d6a:	08 95       	ret
     d6c:	e1 e0       	ldi	r30, 0x01	; 1
     d6e:	66 0f       	add	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	88 1f       	adc	r24, r24
     d74:	bb 1f       	adc	r27, r27
     d76:	62 17       	cp	r22, r18
     d78:	73 07       	cpc	r23, r19
     d7a:	84 07       	cpc	r24, r20
     d7c:	ba 07       	cpc	r27, r26
     d7e:	20 f0       	brcs	.+8      	; 0xd88 <__divsf3_pse+0xaa>
     d80:	62 1b       	sub	r22, r18
     d82:	73 0b       	sbc	r23, r19
     d84:	84 0b       	sbc	r24, r20
     d86:	ba 0b       	sbc	r27, r26
     d88:	ee 1f       	adc	r30, r30
     d8a:	88 f7       	brcc	.-30     	; 0xd6e <__divsf3_pse+0x90>
     d8c:	e0 95       	com	r30
     d8e:	08 95       	ret

00000d90 <__fixunssfsi>:
     d90:	bc d0       	rcall	.+376    	; 0xf0a <__fp_splitA>
     d92:	88 f0       	brcs	.+34     	; 0xdb6 <__fixunssfsi+0x26>
     d94:	9f 57       	subi	r25, 0x7F	; 127
     d96:	90 f0       	brcs	.+36     	; 0xdbc <__fixunssfsi+0x2c>
     d98:	b9 2f       	mov	r27, r25
     d9a:	99 27       	eor	r25, r25
     d9c:	b7 51       	subi	r27, 0x17	; 23
     d9e:	a0 f0       	brcs	.+40     	; 0xdc8 <__fixunssfsi+0x38>
     da0:	d1 f0       	breq	.+52     	; 0xdd6 <__fixunssfsi+0x46>
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	1a f0       	brmi	.+6      	; 0xdb2 <__fixunssfsi+0x22>
     dac:	ba 95       	dec	r27
     dae:	c9 f7       	brne	.-14     	; 0xda2 <__fixunssfsi+0x12>
     db0:	12 c0       	rjmp	.+36     	; 0xdd6 <__fixunssfsi+0x46>
     db2:	b1 30       	cpi	r27, 0x01	; 1
     db4:	81 f0       	breq	.+32     	; 0xdd6 <__fixunssfsi+0x46>
     db6:	c3 d0       	rcall	.+390    	; 0xf3e <__fp_zero>
     db8:	b1 e0       	ldi	r27, 0x01	; 1
     dba:	08 95       	ret
     dbc:	c0 c0       	rjmp	.+384    	; 0xf3e <__fp_zero>
     dbe:	67 2f       	mov	r22, r23
     dc0:	78 2f       	mov	r23, r24
     dc2:	88 27       	eor	r24, r24
     dc4:	b8 5f       	subi	r27, 0xF8	; 248
     dc6:	39 f0       	breq	.+14     	; 0xdd6 <__fixunssfsi+0x46>
     dc8:	b9 3f       	cpi	r27, 0xF9	; 249
     dca:	cc f3       	brlt	.-14     	; 0xdbe <__fixunssfsi+0x2e>
     dcc:	86 95       	lsr	r24
     dce:	77 95       	ror	r23
     dd0:	67 95       	ror	r22
     dd2:	b3 95       	inc	r27
     dd4:	d9 f7       	brne	.-10     	; 0xdcc <__fixunssfsi+0x3c>
     dd6:	3e f4       	brtc	.+14     	; 0xde6 <__fixunssfsi+0x56>
     dd8:	90 95       	com	r25
     dda:	80 95       	com	r24
     ddc:	70 95       	com	r23
     dde:	61 95       	neg	r22
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	8f 4f       	sbci	r24, 0xFF	; 255
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	08 95       	ret

00000de8 <__floatunsisf>:
     de8:	e8 94       	clt
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <__floatsisf+0x12>

00000dec <__floatsisf>:
     dec:	97 fb       	bst	r25, 7
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__floatsisf+0x12>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	99 23       	and	r25, r25
     e00:	a9 f0       	breq	.+42     	; 0xe2c <__floatsisf+0x40>
     e02:	f9 2f       	mov	r31, r25
     e04:	96 e9       	ldi	r25, 0x96	; 150
     e06:	bb 27       	eor	r27, r27
     e08:	93 95       	inc	r25
     e0a:	f6 95       	lsr	r31
     e0c:	87 95       	ror	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b7 95       	ror	r27
     e14:	f1 11       	cpse	r31, r1
     e16:	f8 cf       	rjmp	.-16     	; 0xe08 <__floatsisf+0x1c>
     e18:	fa f4       	brpl	.+62     	; 0xe58 <__floatsisf+0x6c>
     e1a:	bb 0f       	add	r27, r27
     e1c:	11 f4       	brne	.+4      	; 0xe22 <__floatsisf+0x36>
     e1e:	60 ff       	sbrs	r22, 0
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <__floatsisf+0x6c>
     e22:	6f 5f       	subi	r22, 0xFF	; 255
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	8f 4f       	sbci	r24, 0xFF	; 255
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	16 c0       	rjmp	.+44     	; 0xe58 <__floatsisf+0x6c>
     e2c:	88 23       	and	r24, r24
     e2e:	11 f0       	breq	.+4      	; 0xe34 <__floatsisf+0x48>
     e30:	96 e9       	ldi	r25, 0x96	; 150
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <__floatsisf+0x6a>
     e34:	77 23       	and	r23, r23
     e36:	21 f0       	breq	.+8      	; 0xe40 <__floatsisf+0x54>
     e38:	9e e8       	ldi	r25, 0x8E	; 142
     e3a:	87 2f       	mov	r24, r23
     e3c:	76 2f       	mov	r23, r22
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <__floatsisf+0x5e>
     e40:	66 23       	and	r22, r22
     e42:	71 f0       	breq	.+28     	; 0xe60 <__floatsisf+0x74>
     e44:	96 e8       	ldi	r25, 0x86	; 134
     e46:	86 2f       	mov	r24, r22
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	2a f0       	brmi	.+10     	; 0xe58 <__floatsisf+0x6c>
     e4e:	9a 95       	dec	r25
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	da f7       	brpl	.-10     	; 0xe4e <__floatsisf+0x62>
     e58:	88 0f       	add	r24, r24
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	97 f9       	bld	r25, 7
     e60:	08 95       	ret

00000e62 <__fp_cmp>:
     e62:	99 0f       	add	r25, r25
     e64:	00 08       	sbc	r0, r0
     e66:	55 0f       	add	r21, r21
     e68:	aa 0b       	sbc	r26, r26
     e6a:	e0 e8       	ldi	r30, 0x80	; 128
     e6c:	fe ef       	ldi	r31, 0xFE	; 254
     e6e:	16 16       	cp	r1, r22
     e70:	17 06       	cpc	r1, r23
     e72:	e8 07       	cpc	r30, r24
     e74:	f9 07       	cpc	r31, r25
     e76:	c0 f0       	brcs	.+48     	; 0xea8 <__fp_cmp+0x46>
     e78:	12 16       	cp	r1, r18
     e7a:	13 06       	cpc	r1, r19
     e7c:	e4 07       	cpc	r30, r20
     e7e:	f5 07       	cpc	r31, r21
     e80:	98 f0       	brcs	.+38     	; 0xea8 <__fp_cmp+0x46>
     e82:	62 1b       	sub	r22, r18
     e84:	73 0b       	sbc	r23, r19
     e86:	84 0b       	sbc	r24, r20
     e88:	95 0b       	sbc	r25, r21
     e8a:	39 f4       	brne	.+14     	; 0xe9a <__fp_cmp+0x38>
     e8c:	0a 26       	eor	r0, r26
     e8e:	61 f0       	breq	.+24     	; 0xea8 <__fp_cmp+0x46>
     e90:	23 2b       	or	r18, r19
     e92:	24 2b       	or	r18, r20
     e94:	25 2b       	or	r18, r21
     e96:	21 f4       	brne	.+8      	; 0xea0 <__fp_cmp+0x3e>
     e98:	08 95       	ret
     e9a:	0a 26       	eor	r0, r26
     e9c:	09 f4       	brne	.+2      	; 0xea0 <__fp_cmp+0x3e>
     e9e:	a1 40       	sbci	r26, 0x01	; 1
     ea0:	a6 95       	lsr	r26
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	81 1d       	adc	r24, r1
     ea6:	81 1d       	adc	r24, r1
     ea8:	08 95       	ret

00000eaa <__fp_inf>:
     eaa:	97 f9       	bld	r25, 7
     eac:	9f 67       	ori	r25, 0x7F	; 127
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <__fp_nan>:
     eb6:	9f ef       	ldi	r25, 0xFF	; 255
     eb8:	80 ec       	ldi	r24, 0xC0	; 192
     eba:	08 95       	ret

00000ebc <__fp_pscA>:
     ebc:	00 24       	eor	r0, r0
     ebe:	0a 94       	dec	r0
     ec0:	16 16       	cp	r1, r22
     ec2:	17 06       	cpc	r1, r23
     ec4:	18 06       	cpc	r1, r24
     ec6:	09 06       	cpc	r0, r25
     ec8:	08 95       	ret

00000eca <__fp_pscB>:
     eca:	00 24       	eor	r0, r0
     ecc:	0a 94       	dec	r0
     ece:	12 16       	cp	r1, r18
     ed0:	13 06       	cpc	r1, r19
     ed2:	14 06       	cpc	r1, r20
     ed4:	05 06       	cpc	r0, r21
     ed6:	08 95       	ret

00000ed8 <__fp_round>:
     ed8:	09 2e       	mov	r0, r25
     eda:	03 94       	inc	r0
     edc:	00 0c       	add	r0, r0
     ede:	11 f4       	brne	.+4      	; 0xee4 <__fp_round+0xc>
     ee0:	88 23       	and	r24, r24
     ee2:	52 f0       	brmi	.+20     	; 0xef8 <__fp_round+0x20>
     ee4:	bb 0f       	add	r27, r27
     ee6:	40 f4       	brcc	.+16     	; 0xef8 <__fp_round+0x20>
     ee8:	bf 2b       	or	r27, r31
     eea:	11 f4       	brne	.+4      	; 0xef0 <__fp_round+0x18>
     eec:	60 ff       	sbrs	r22, 0
     eee:	04 c0       	rjmp	.+8      	; 0xef8 <__fp_round+0x20>
     ef0:	6f 5f       	subi	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8f 4f       	sbci	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	08 95       	ret

00000efa <__fp_split3>:
     efa:	57 fd       	sbrc	r21, 7
     efc:	90 58       	subi	r25, 0x80	; 128
     efe:	44 0f       	add	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	59 f0       	breq	.+22     	; 0xf1a <__fp_splitA+0x10>
     f04:	5f 3f       	cpi	r21, 0xFF	; 255
     f06:	71 f0       	breq	.+28     	; 0xf24 <__fp_splitA+0x1a>
     f08:	47 95       	ror	r20

00000f0a <__fp_splitA>:
     f0a:	88 0f       	add	r24, r24
     f0c:	97 fb       	bst	r25, 7
     f0e:	99 1f       	adc	r25, r25
     f10:	61 f0       	breq	.+24     	; 0xf2a <__fp_splitA+0x20>
     f12:	9f 3f       	cpi	r25, 0xFF	; 255
     f14:	79 f0       	breq	.+30     	; 0xf34 <__fp_splitA+0x2a>
     f16:	87 95       	ror	r24
     f18:	08 95       	ret
     f1a:	12 16       	cp	r1, r18
     f1c:	13 06       	cpc	r1, r19
     f1e:	14 06       	cpc	r1, r20
     f20:	55 1f       	adc	r21, r21
     f22:	f2 cf       	rjmp	.-28     	; 0xf08 <__fp_split3+0xe>
     f24:	46 95       	lsr	r20
     f26:	f1 df       	rcall	.-30     	; 0xf0a <__fp_splitA>
     f28:	08 c0       	rjmp	.+16     	; 0xf3a <__fp_splitA+0x30>
     f2a:	16 16       	cp	r1, r22
     f2c:	17 06       	cpc	r1, r23
     f2e:	18 06       	cpc	r1, r24
     f30:	99 1f       	adc	r25, r25
     f32:	f1 cf       	rjmp	.-30     	; 0xf16 <__fp_splitA+0xc>
     f34:	86 95       	lsr	r24
     f36:	71 05       	cpc	r23, r1
     f38:	61 05       	cpc	r22, r1
     f3a:	08 94       	sec
     f3c:	08 95       	ret

00000f3e <__fp_zero>:
     f3e:	e8 94       	clt

00000f40 <__fp_szero>:
     f40:	bb 27       	eor	r27, r27
     f42:	66 27       	eor	r22, r22
     f44:	77 27       	eor	r23, r23
     f46:	cb 01       	movw	r24, r22
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__mulsf3>:
     f4c:	0b d0       	rcall	.+22     	; 0xf64 <__mulsf3x>
     f4e:	c4 cf       	rjmp	.-120    	; 0xed8 <__fp_round>
     f50:	b5 df       	rcall	.-150    	; 0xebc <__fp_pscA>
     f52:	28 f0       	brcs	.+10     	; 0xf5e <__mulsf3+0x12>
     f54:	ba df       	rcall	.-140    	; 0xeca <__fp_pscB>
     f56:	18 f0       	brcs	.+6      	; 0xf5e <__mulsf3+0x12>
     f58:	95 23       	and	r25, r21
     f5a:	09 f0       	breq	.+2      	; 0xf5e <__mulsf3+0x12>
     f5c:	a6 cf       	rjmp	.-180    	; 0xeaa <__fp_inf>
     f5e:	ab cf       	rjmp	.-170    	; 0xeb6 <__fp_nan>
     f60:	11 24       	eor	r1, r1
     f62:	ee cf       	rjmp	.-36     	; 0xf40 <__fp_szero>

00000f64 <__mulsf3x>:
     f64:	ca df       	rcall	.-108    	; 0xefa <__fp_split3>
     f66:	a0 f3       	brcs	.-24     	; 0xf50 <__mulsf3+0x4>

00000f68 <__mulsf3_pse>:
     f68:	95 9f       	mul	r25, r21
     f6a:	d1 f3       	breq	.-12     	; 0xf60 <__mulsf3+0x14>
     f6c:	95 0f       	add	r25, r21
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	55 1f       	adc	r21, r21
     f72:	62 9f       	mul	r22, r18
     f74:	f0 01       	movw	r30, r0
     f76:	72 9f       	mul	r23, r18
     f78:	bb 27       	eor	r27, r27
     f7a:	f0 0d       	add	r31, r0
     f7c:	b1 1d       	adc	r27, r1
     f7e:	63 9f       	mul	r22, r19
     f80:	aa 27       	eor	r26, r26
     f82:	f0 0d       	add	r31, r0
     f84:	b1 1d       	adc	r27, r1
     f86:	aa 1f       	adc	r26, r26
     f88:	64 9f       	mul	r22, r20
     f8a:	66 27       	eor	r22, r22
     f8c:	b0 0d       	add	r27, r0
     f8e:	a1 1d       	adc	r26, r1
     f90:	66 1f       	adc	r22, r22
     f92:	82 9f       	mul	r24, r18
     f94:	22 27       	eor	r18, r18
     f96:	b0 0d       	add	r27, r0
     f98:	a1 1d       	adc	r26, r1
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 9f       	mul	r23, r19
     f9e:	b0 0d       	add	r27, r0
     fa0:	a1 1d       	adc	r26, r1
     fa2:	62 1f       	adc	r22, r18
     fa4:	83 9f       	mul	r24, r19
     fa6:	a0 0d       	add	r26, r0
     fa8:	61 1d       	adc	r22, r1
     faa:	22 1f       	adc	r18, r18
     fac:	74 9f       	mul	r23, r20
     fae:	33 27       	eor	r19, r19
     fb0:	a0 0d       	add	r26, r0
     fb2:	61 1d       	adc	r22, r1
     fb4:	23 1f       	adc	r18, r19
     fb6:	84 9f       	mul	r24, r20
     fb8:	60 0d       	add	r22, r0
     fba:	21 1d       	adc	r18, r1
     fbc:	82 2f       	mov	r24, r18
     fbe:	76 2f       	mov	r23, r22
     fc0:	6a 2f       	mov	r22, r26
     fc2:	11 24       	eor	r1, r1
     fc4:	9f 57       	subi	r25, 0x7F	; 127
     fc6:	50 40       	sbci	r21, 0x00	; 0
     fc8:	8a f0       	brmi	.+34     	; 0xfec <__mulsf3_pse+0x84>
     fca:	e1 f0       	breq	.+56     	; 0x1004 <__mulsf3_pse+0x9c>
     fcc:	88 23       	and	r24, r24
     fce:	4a f0       	brmi	.+18     	; 0xfe2 <__mulsf3_pse+0x7a>
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	bb 1f       	adc	r27, r27
     fd6:	66 1f       	adc	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	a9 f7       	brne	.-22     	; 0xfcc <__mulsf3_pse+0x64>
     fe2:	9e 3f       	cpi	r25, 0xFE	; 254
     fe4:	51 05       	cpc	r21, r1
     fe6:	70 f0       	brcs	.+28     	; 0x1004 <__mulsf3_pse+0x9c>
     fe8:	60 cf       	rjmp	.-320    	; 0xeaa <__fp_inf>
     fea:	aa cf       	rjmp	.-172    	; 0xf40 <__fp_szero>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	ec f3       	brlt	.-6      	; 0xfea <__mulsf3_pse+0x82>
     ff0:	98 3e       	cpi	r25, 0xE8	; 232
     ff2:	dc f3       	brlt	.-10     	; 0xfea <__mulsf3_pse+0x82>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	e7 95       	ror	r30
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c1 f7       	brne	.-16     	; 0xff4 <__mulsf3_pse+0x8c>
    1004:	fe 2b       	or	r31, r30
    1006:	88 0f       	add	r24, r24
    1008:	91 1d       	adc	r25, r1
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <sin>:
    1012:	9f 93       	push	r25
    1014:	05 d0       	rcall	.+10     	; 0x1020 <__fp_rempio2>
    1016:	0f 90       	pop	r0
    1018:	07 fc       	sbrc	r0, 7
    101a:	ee 5f       	subi	r30, 0xFE	; 254
    101c:	28 c0       	rjmp	.+80     	; 0x106e <__fp_sinus>
    101e:	4b cf       	rjmp	.-362    	; 0xeb6 <__fp_nan>

00001020 <__fp_rempio2>:
    1020:	74 df       	rcall	.-280    	; 0xf0a <__fp_splitA>
    1022:	e8 f3       	brcs	.-6      	; 0x101e <sin+0xc>
    1024:	e8 94       	clt
    1026:	e0 e0       	ldi	r30, 0x00	; 0
    1028:	bb 27       	eor	r27, r27
    102a:	9f 57       	subi	r25, 0x7F	; 127
    102c:	f0 f0       	brcs	.+60     	; 0x106a <__fp_rempio2+0x4a>
    102e:	2a ed       	ldi	r18, 0xDA	; 218
    1030:	3f e0       	ldi	r19, 0x0F	; 15
    1032:	49 ec       	ldi	r20, 0xC9	; 201
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <__fp_rempio2+0x22>
    1036:	ee 0f       	add	r30, r30
    1038:	bb 0f       	add	r27, r27
    103a:	66 1f       	adc	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	28 f0       	brcs	.+10     	; 0x104c <__fp_rempio2+0x2c>
    1042:	b2 3a       	cpi	r27, 0xA2	; 162
    1044:	62 07       	cpc	r22, r18
    1046:	73 07       	cpc	r23, r19
    1048:	84 07       	cpc	r24, r20
    104a:	28 f0       	brcs	.+10     	; 0x1056 <__fp_rempio2+0x36>
    104c:	b2 5a       	subi	r27, 0xA2	; 162
    104e:	62 0b       	sbc	r22, r18
    1050:	73 0b       	sbc	r23, r19
    1052:	84 0b       	sbc	r24, r20
    1054:	e3 95       	inc	r30
    1056:	9a 95       	dec	r25
    1058:	72 f7       	brpl	.-36     	; 0x1036 <__fp_rempio2+0x16>
    105a:	80 38       	cpi	r24, 0x80	; 128
    105c:	30 f4       	brcc	.+12     	; 0x106a <__fp_rempio2+0x4a>
    105e:	9a 95       	dec	r25
    1060:	bb 0f       	add	r27, r27
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	d2 f7       	brpl	.-12     	; 0x105e <__fp_rempio2+0x3e>
    106a:	90 48       	sbci	r25, 0x80	; 128
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <__fp_mpack_finite>

0000106e <__fp_sinus>:
    106e:	ef 93       	push	r30
    1070:	e0 ff       	sbrs	r30, 0
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <__fp_sinus+0x12>
    1074:	a2 ea       	ldi	r26, 0xA2	; 162
    1076:	2a ed       	ldi	r18, 0xDA	; 218
    1078:	3f e0       	ldi	r19, 0x0F	; 15
    107a:	49 ec       	ldi	r20, 0xC9	; 201
    107c:	5f eb       	ldi	r21, 0xBF	; 191
    107e:	c9 dd       	rcall	.-1134   	; 0xc12 <__addsf3x>
    1080:	2b df       	rcall	.-426    	; 0xed8 <__fp_round>
    1082:	0f 90       	pop	r0
    1084:	03 94       	inc	r0
    1086:	01 fc       	sbrc	r0, 1
    1088:	90 58       	subi	r25, 0x80	; 128
    108a:	ec ea       	ldi	r30, 0xAC	; 172
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	0e c0       	rjmp	.+28     	; 0x10ac <__fp_powsodd>

00001090 <__fp_mpack>:
    1090:	9f 3f       	cpi	r25, 0xFF	; 255
    1092:	31 f0       	breq	.+12     	; 0x10a0 <__fp_mpack_finite+0xc>

00001094 <__fp_mpack_finite>:
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	20 f4       	brcc	.+8      	; 0x10a0 <__fp_mpack_finite+0xc>
    1098:	87 95       	ror	r24
    109a:	77 95       	ror	r23
    109c:	67 95       	ror	r22
    109e:	b7 95       	ror	r27
    10a0:	88 0f       	add	r24, r24
    10a2:	91 1d       	adc	r25, r1
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret

000010ac <__fp_powsodd>:
    10ac:	9f 93       	push	r25
    10ae:	8f 93       	push	r24
    10b0:	7f 93       	push	r23
    10b2:	6f 93       	push	r22
    10b4:	ff 93       	push	r31
    10b6:	ef 93       	push	r30
    10b8:	9b 01       	movw	r18, r22
    10ba:	ac 01       	movw	r20, r24
    10bc:	47 df       	rcall	.-370    	; 0xf4c <__mulsf3>
    10be:	ef 91       	pop	r30
    10c0:	ff 91       	pop	r31
    10c2:	05 d0       	rcall	.+10     	; 0x10ce <__fp_powser>
    10c4:	2f 91       	pop	r18
    10c6:	3f 91       	pop	r19
    10c8:	4f 91       	pop	r20
    10ca:	5f 91       	pop	r21
    10cc:	3f cf       	rjmp	.-386    	; 0xf4c <__mulsf3>

000010ce <__fp_powser>:
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	1f 93       	push	r17
    10d4:	0f 93       	push	r16
    10d6:	ff 92       	push	r15
    10d8:	ef 92       	push	r14
    10da:	df 92       	push	r13
    10dc:	7b 01       	movw	r14, r22
    10de:	8c 01       	movw	r16, r24
    10e0:	68 94       	set
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <__fp_powser+0x20>
    10e4:	da 2e       	mov	r13, r26
    10e6:	ef 01       	movw	r28, r30
    10e8:	3d df       	rcall	.-390    	; 0xf64 <__mulsf3x>
    10ea:	fe 01       	movw	r30, r28
    10ec:	e8 94       	clt
    10ee:	a5 91       	lpm	r26, Z+
    10f0:	25 91       	lpm	r18, Z+
    10f2:	35 91       	lpm	r19, Z+
    10f4:	45 91       	lpm	r20, Z+
    10f6:	55 91       	lpm	r21, Z+
    10f8:	ae f3       	brts	.-22     	; 0x10e4 <__fp_powser+0x16>
    10fa:	ef 01       	movw	r28, r30
    10fc:	8a dd       	rcall	.-1260   	; 0xc12 <__addsf3x>
    10fe:	fe 01       	movw	r30, r28
    1100:	97 01       	movw	r18, r14
    1102:	a8 01       	movw	r20, r16
    1104:	da 94       	dec	r13
    1106:	79 f7       	brne	.-34     	; 0x10e6 <__fp_powser+0x18>
    1108:	df 90       	pop	r13
    110a:	ef 90       	pop	r14
    110c:	ff 90       	pop	r15
    110e:	0f 91       	pop	r16
    1110:	1f 91       	pop	r17
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <__divmodhi4>:
    1118:	97 fb       	bst	r25, 7
    111a:	07 2e       	mov	r0, r23
    111c:	16 f4       	brtc	.+4      	; 0x1122 <__divmodhi4+0xa>
    111e:	00 94       	com	r0
    1120:	07 d0       	rcall	.+14     	; 0x1130 <__divmodhi4_neg1>
    1122:	77 fd       	sbrc	r23, 7
    1124:	09 d0       	rcall	.+18     	; 0x1138 <__divmodhi4_neg2>
    1126:	0e 94 bf 08 	call	0x117e	; 0x117e <__udivmodhi4>
    112a:	07 fc       	sbrc	r0, 7
    112c:	05 d0       	rcall	.+10     	; 0x1138 <__divmodhi4_neg2>
    112e:	3e f4       	brtc	.+14     	; 0x113e <__divmodhi4_exit>

00001130 <__divmodhi4_neg1>:
    1130:	90 95       	com	r25
    1132:	81 95       	neg	r24
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__divmodhi4_neg2>:
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255

0000113e <__divmodhi4_exit>:
    113e:	08 95       	ret

00001140 <__divmodsi4>:
    1140:	05 2e       	mov	r0, r21
    1142:	97 fb       	bst	r25, 7
    1144:	1e f4       	brtc	.+6      	; 0x114c <__divmodsi4+0xc>
    1146:	00 94       	com	r0
    1148:	0e 94 b7 08 	call	0x116e	; 0x116e <__negsi2>
    114c:	57 fd       	sbrc	r21, 7
    114e:	07 d0       	rcall	.+14     	; 0x115e <__divmodsi4_neg2>
    1150:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__udivmodsi4>
    1154:	07 fc       	sbrc	r0, 7
    1156:	03 d0       	rcall	.+6      	; 0x115e <__divmodsi4_neg2>
    1158:	4e f4       	brtc	.+18     	; 0x116c <__divmodsi4_exit>
    115a:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__negsi2>

0000115e <__divmodsi4_neg2>:
    115e:	50 95       	com	r21
    1160:	40 95       	com	r20
    1162:	30 95       	com	r19
    1164:	21 95       	neg	r18
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	4f 4f       	sbci	r20, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255

0000116c <__divmodsi4_exit>:
    116c:	08 95       	ret

0000116e <__negsi2>:
    116e:	90 95       	com	r25
    1170:	80 95       	com	r24
    1172:	70 95       	com	r23
    1174:	61 95       	neg	r22
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	08 95       	ret

0000117e <__udivmodhi4>:
    117e:	aa 1b       	sub	r26, r26
    1180:	bb 1b       	sub	r27, r27
    1182:	51 e1       	ldi	r21, 0x11	; 17
    1184:	07 c0       	rjmp	.+14     	; 0x1194 <__udivmodhi4_ep>

00001186 <__udivmodhi4_loop>:
    1186:	aa 1f       	adc	r26, r26
    1188:	bb 1f       	adc	r27, r27
    118a:	a6 17       	cp	r26, r22
    118c:	b7 07       	cpc	r27, r23
    118e:	10 f0       	brcs	.+4      	; 0x1194 <__udivmodhi4_ep>
    1190:	a6 1b       	sub	r26, r22
    1192:	b7 0b       	sbc	r27, r23

00001194 <__udivmodhi4_ep>:
    1194:	88 1f       	adc	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	5a 95       	dec	r21
    119a:	a9 f7       	brne	.-22     	; 0x1186 <__udivmodhi4_loop>
    119c:	80 95       	com	r24
    119e:	90 95       	com	r25
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	08 95       	ret

000011a6 <__udivmodsi4>:
    11a6:	a1 e2       	ldi	r26, 0x21	; 33
    11a8:	1a 2e       	mov	r1, r26
    11aa:	aa 1b       	sub	r26, r26
    11ac:	bb 1b       	sub	r27, r27
    11ae:	fd 01       	movw	r30, r26
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <__udivmodsi4_ep>

000011b2 <__udivmodsi4_loop>:
    11b2:	aa 1f       	adc	r26, r26
    11b4:	bb 1f       	adc	r27, r27
    11b6:	ee 1f       	adc	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	a2 17       	cp	r26, r18
    11bc:	b3 07       	cpc	r27, r19
    11be:	e4 07       	cpc	r30, r20
    11c0:	f5 07       	cpc	r31, r21
    11c2:	20 f0       	brcs	.+8      	; 0x11cc <__udivmodsi4_ep>
    11c4:	a2 1b       	sub	r26, r18
    11c6:	b3 0b       	sbc	r27, r19
    11c8:	e4 0b       	sbc	r30, r20
    11ca:	f5 0b       	sbc	r31, r21

000011cc <__udivmodsi4_ep>:
    11cc:	66 1f       	adc	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	1a 94       	dec	r1
    11d6:	69 f7       	brne	.-38     	; 0x11b2 <__udivmodsi4_loop>
    11d8:	60 95       	com	r22
    11da:	70 95       	com	r23
    11dc:	80 95       	com	r24
    11de:	90 95       	com	r25
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    11e4:	bd 01       	movw	r22, r26
    11e6:	cf 01       	movw	r24, r30
    11e8:	08 95       	ret

000011ea <__itoa_ncheck>:
    11ea:	bb 27       	eor	r27, r27
    11ec:	4a 30       	cpi	r20, 0x0A	; 10
    11ee:	31 f4       	brne	.+12     	; 0x11fc <__itoa_ncheck+0x12>
    11f0:	99 23       	and	r25, r25
    11f2:	22 f4       	brpl	.+8      	; 0x11fc <__itoa_ncheck+0x12>
    11f4:	bd e2       	ldi	r27, 0x2D	; 45
    11f6:	90 95       	com	r25
    11f8:	81 95       	neg	r24
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__utoa_common>

00001200 <__utoa_ncheck>:
    1200:	bb 27       	eor	r27, r27

00001202 <__utoa_common>:
    1202:	fb 01       	movw	r30, r22
    1204:	55 27       	eor	r21, r21
    1206:	aa 27       	eor	r26, r26
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	aa 1f       	adc	r26, r26
    120e:	a4 17       	cp	r26, r20
    1210:	10 f0       	brcs	.+4      	; 0x1216 <__utoa_common+0x14>
    1212:	a4 1b       	sub	r26, r20
    1214:	83 95       	inc	r24
    1216:	50 51       	subi	r21, 0x10	; 16
    1218:	b9 f7       	brne	.-18     	; 0x1208 <__utoa_common+0x6>
    121a:	a0 5d       	subi	r26, 0xD0	; 208
    121c:	aa 33       	cpi	r26, 0x3A	; 58
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__utoa_common+0x20>
    1220:	a9 5d       	subi	r26, 0xD9	; 217
    1222:	a1 93       	st	Z+, r26
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	79 f7       	brne	.-34     	; 0x1206 <__utoa_common+0x4>
    1228:	b1 11       	cpse	r27, r1
    122a:	b1 93       	st	Z+, r27
    122c:	11 92       	st	Z+, r1
    122e:	cb 01       	movw	r24, r22
    1230:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <strrev>

00001234 <strrev>:
    1234:	dc 01       	movw	r26, r24
    1236:	fc 01       	movw	r30, r24
    1238:	67 2f       	mov	r22, r23
    123a:	71 91       	ld	r23, Z+
    123c:	77 23       	and	r23, r23
    123e:	e1 f7       	brne	.-8      	; 0x1238 <strrev+0x4>
    1240:	32 97       	sbiw	r30, 0x02	; 2
    1242:	04 c0       	rjmp	.+8      	; 0x124c <strrev+0x18>
    1244:	7c 91       	ld	r23, X
    1246:	6d 93       	st	X+, r22
    1248:	70 83       	st	Z, r23
    124a:	62 91       	ld	r22, -Z
    124c:	ae 17       	cp	r26, r30
    124e:	bf 07       	cpc	r27, r31
    1250:	c8 f3       	brcs	.-14     	; 0x1244 <strrev+0x10>
    1252:	08 95       	ret

00001254 <_exit>:
    1254:	f8 94       	cli

00001256 <__stop_program>:
    1256:	ff cf       	rjmp	.-2      	; 0x1256 <__stop_program>


music4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001120  000011b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001120  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800108  00800108  000011bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b3  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00002a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a06  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000554  00000000  00000000  00003a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000653  00000000  00000000  00003fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000202f  00000000  00000000  00004607  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00006636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_3>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 b2 03 	jmp	0x764	; 0x764 <__vector_10>
      2c:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_11>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_17>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_21>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      ac:	05 a8       	ldd	r0, Z+53	; 0x35
      ae:	4c cd       	rjmp	.-1384   	; 0xfffffb48 <__eeprom_end+0xff7efb48>
      b0:	b2 d4       	rcall	.+2404   	; 0xa16 <__vector_11+0x236>
      b2:	4e b9       	out	0x0e, r20	; 14
      b4:	38 36       	cpi	r19, 0x68	; 104
      b6:	a9 02       	muls	r26, r25
      b8:	0c 50       	subi	r16, 0x0C	; 12
      ba:	b9 91       	ld	r27, Y+
      bc:	86 88       	ldd	r8, Z+22	; 0x16
      be:	08 3c       	cpi	r16, 0xC8	; 200
      c0:	a6 aa       	std	Z+54, r10	; 0x36
      c2:	aa 2a       	or	r10, r26
      c4:	be 00       	.word	0x00be	; ????
      c6:	00 00       	nop
      c8:	80 3f       	cpi	r24, 0xF0	; 240

000000ca <__trampolines_end>:
      ca:	0d 0a       	sbc	r0, r29
	...

000000cd <descriptor_list>:
      cd:	00 01 00 00 64 01 12 00 02 00 00 21 01 43 00 03     ....d......!.C..
      dd:	00 00 1d 01 04 01 03 09 04 09 01 12 02 03 09 04     ................
      ed:	01 01 06 03 03 09 04 f7 00 08                       ..........

000000f7 <string3>:
      f7:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000101 <string2>:
     101:	06 03 4d 00 32 00 00 00                             ..M.2...

00000109 <string1>:
     109:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     119:	65 00 00 00                                         e...

0000011d <string0>:
     11d:	04 03 09 04                                         ....

00000121 <config1_descriptor>:
     121:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     131:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     141:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     151:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     161:	40 00 00                                            @..

00000164 <device_descriptor>:
     164:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     174:	03 01                                               ..

00000176 <endpoint_config_table>:
     176:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000180 <__ctors_end>:
     180:	11 24       	eor	r1, r1
     182:	1f be       	out	0x3f, r1	; 63
     184:	cf ef       	ldi	r28, 0xFF	; 255
     186:	da e0       	ldi	r29, 0x0A	; 10
     188:	de bf       	out	0x3e, r29	; 62
     18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	e0 e2       	ldi	r30, 0x20	; 32
     194:	f1 e1       	ldi	r31, 0x11	; 17
     196:	02 c0       	rjmp	.+4      	; 0x19c <__do_copy_data+0x10>
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	a8 30       	cpi	r26, 0x08	; 8
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <__do_copy_data+0xc>

000001a2 <__do_clear_bss>:
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	a8 e0       	ldi	r26, 0x08	; 8
     1a6:	b1 e0       	ldi	r27, 0x01	; 1
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	ad 31       	cpi	r26, 0x1D	; 29
     1ae:	b2 07       	cpc	r27, r18
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 8e 08 	jmp	0x111c	; 0x111c <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
volatile double count=0;


int main(void)
{
	m_clockdivide(3);//set the system clock frequency as 500KHz
     1be:	e1 e6       	ldi	r30, 0x61	; 97
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 e8       	ldi	r24, 0x80	; 128
     1c4:	80 83       	st	Z, r24
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	80 83       	st	Z, r24
	m_usb_init();
     1ca:	0e 94 3e 03 	call	0x67c	; 0x67c <m_usb_init>
	
	m_bus_init(); // enable mBUS
     1ce:	0e 94 6f 02 	call	0x4de	; 0x4de <m_bus_init>
	m_rf_open(channel,RXADDRESS,PACKET_LENGTH); // configure mRF
     1d2:	43 e0       	ldi	r20, 0x03	; 3
     1d4:	67 e4       	ldi	r22, 0x47	; 71
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 80 02 	call	0x500	; 0x500 <m_rf_open>
	
	clear(TCCR1B,CS12);//set prescaler to /64
     1dc:	e1 e8       	ldi	r30, 0x81	; 129
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	8b 7f       	andi	r24, 0xFB	; 251
     1e4:	80 83       	st	Z, r24
	set(TCCR1B,CS11);
     1e6:	80 81       	ld	r24, Z
     1e8:	82 60       	ori	r24, 0x02	; 2
     1ea:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     1ec:	80 81       	ld	r24, Z
     1ee:	81 60       	ori	r24, 0x01	; 1
     1f0:	80 83       	st	Z, r24
	
	//OCR1A=2000000/(64*frequency);//set the value of OCR1A as 100
	//OCR1B=OCR1A/2

	set(TCCR1B,WGM13);//(mode 15) UP to OCR1A, PWM mode
     1f2:	80 81       	ld	r24, Z
     1f4:	80 61       	ori	r24, 0x10	; 16
     1f6:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
     1fc:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
     1fe:	e0 e8       	ldi	r30, 0x80	; 128
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	82 60       	ori	r24, 0x02	; 2
     206:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
     208:	80 81       	ld	r24, Z
     20a:	81 60       	ori	r24, 0x01	; 1
     20c:	80 83       	st	Z, r24
	set(TCCR1A,COM1B1);//set at OCR1B, clear at rollover
     20e:	80 81       	ld	r24, Z
     210:	80 62       	ori	r24, 0x20	; 32
     212:	80 83       	st	Z, r24
	set(TCCR1A,COM1B0);
     214:	80 81       	ld	r24, Z
     216:	80 61       	ori	r24, 0x10	; 16
     218:	80 83       	st	Z, r24
	
	set(TIMSK1,OCIE1A);//call an interrupt whenever (TCNT1 matches OCR1A)
     21a:	ef e6       	ldi	r30, 0x6F	; 111
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	82 60       	ori	r24, 0x02	; 2
     222:	80 83       	st	Z, r24
	sei();//enable global interrupt
     224:	78 94       	sei
	
	set(TCCR0B,WGM02); // MODE: up to OCR0A
     226:	85 b5       	in	r24, 0x25	; 37
     228:	88 60       	ori	r24, 0x08	; 8
     22a:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A,WGM01); // ^
     22c:	84 b5       	in	r24, 0x24	; 36
     22e:	82 60       	ori	r24, 0x02	; 2
     230:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A,WGM00); // ^
     232:	84 b5       	in	r24, 0x24	; 36
     234:	81 60       	ori	r24, 0x01	; 1
     236:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A,COM0B1); // clear at OCR0B, set at OCR0A
     238:	84 b5       	in	r24, 0x24	; 36
     23a:	80 62       	ori	r24, 0x20	; 32
     23c:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A,COM0B0); // ^
     23e:	84 b5       	in	r24, 0x24	; 36
     240:	80 61       	ori	r24, 0x10	; 16
     242:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B,CS02); // set prescaler to /1024
     244:	85 b5       	in	r24, 0x25	; 37
     246:	84 60       	ori	r24, 0x04	; 4
     248:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01); // ^
     24a:	85 b5       	in	r24, 0x25	; 37
     24c:	8d 7f       	andi	r24, 0xFD	; 253
     24e:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00); // ^
     250:	85 b5       	in	r24, 0x25	; 37
     252:	81 60       	ori	r24, 0x01	; 1
     254:	85 bd       	out	0x25, r24	; 37
	
	set(TIMSK0,OCIE0A);
     256:	ee e6       	ldi	r30, 0x6E	; 110
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	82 60       	ori	r24, 0x02	; 2
     25e:	80 83       	st	Z, r24
	
	OCR0A=10;
     260:	8a e0       	ldi	r24, 0x0A	; 10
     262:	87 bd       	out	0x27, r24	; 39
	
	set(DDRB,6);
     264:	26 9a       	sbi	0x04, 6	; 4
	
	
	
	while(1){
		
		m_usb_tx_int(buffer[2]);
     266:	00 e1       	ldi	r16, 0x10	; 16
     268:	11 e0       	ldi	r17, 0x01	; 1
		if(count>1.95*buffer[2]){
			
			clear(DDRB,6);
			count=0;}
		
		if(countsine<OCR1A){
     26a:	c8 e8       	ldi	r28, 0x88	; 136
     26c:	d0 e0       	ldi	r29, 0x00	; 0
			OCR1B=OCR1A/2.0+sin(countsine/OCR1A*2*pi)*OCR1A/2.0;//set the value of OCR1B
     26e:	0f 2e       	mov	r0, r31
     270:	fa e8       	ldi	r31, 0x8A	; 138
     272:	2f 2e       	mov	r2, r31
     274:	31 2c       	mov	r3, r1
     276:	f0 2d       	mov	r31, r0
	
	
	
	while(1){
		
		m_usb_tx_int(buffer[2]);
     278:	f8 01       	movw	r30, r16
     27a:	80 81       	ld	r24, Z
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <m_usb_tx_int>
		m_usb_tx_string("\r\n");
     282:	8a ec       	ldi	r24, 0xCA	; 202
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 75 05 	call	0xaea	; 0xaea <print_P>
		
		if(count>1.95*buffer[2]){
     28a:	f8 01       	movw	r30, r16
     28c:	60 81       	ld	r22, Z
     28e:	c0 90 08 01 	lds	r12, 0x0108
     292:	d0 90 09 01 	lds	r13, 0x0109
     296:	e0 90 0a 01 	lds	r14, 0x010A
     29a:	f0 90 0b 01 	lds	r15, 0x010B
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatsisf>
     2a8:	2a e9       	ldi	r18, 0x9A	; 154
     2aa:	39 e9       	ldi	r19, 0x99	; 153
     2ac:	49 ef       	ldi	r20, 0xF9	; 249
     2ae:	5f e3       	ldi	r21, 0x3F	; 63
     2b0:	0e 94 0a 07 	call	0xe14	; 0xe14 <__mulsf3>
     2b4:	a7 01       	movw	r20, r14
     2b6:	96 01       	movw	r18, r12
     2b8:	0e 94 28 06 	call	0xc50	; 0xc50 <__cmpsf2>
     2bc:	88 23       	and	r24, r24
     2be:	4c f4       	brge	.+18     	; 0x2d2 <main+0x114>
			
			clear(DDRB,6);
     2c0:	26 98       	cbi	0x04, 6	; 4
			count=0;}
     2c2:	10 92 08 01 	sts	0x0108, r1
     2c6:	10 92 09 01 	sts	0x0109, r1
     2ca:	10 92 0a 01 	sts	0x010A, r1
     2ce:	10 92 0b 01 	sts	0x010B, r1
		
		if(countsine<OCR1A){
     2d2:	20 91 0c 01 	lds	r18, 0x010C
     2d6:	30 91 0d 01 	lds	r19, 0x010D
     2da:	88 81       	ld	r24, Y
     2dc:	99 81       	ldd	r25, Y+1	; 0x01
     2de:	28 17       	cp	r18, r24
     2e0:	39 07       	cpc	r19, r25
     2e2:	08 f0       	brcs	.+2      	; 0x2e6 <main+0x128>
     2e4:	46 c0       	rjmp	.+140    	; 0x372 <main+0x1b4>
			OCR1B=OCR1A/2.0+sin(countsine/OCR1A*2*pi)*OCR1A/2.0;//set the value of OCR1B
     2e6:	c8 80       	ld	r12, Y
     2e8:	d9 80       	ldd	r13, Y+1	; 0x01
     2ea:	80 91 0c 01 	lds	r24, 0x010C
     2ee:	90 91 0d 01 	lds	r25, 0x010D
     2f2:	68 81       	ld	r22, Y
     2f4:	79 81       	ldd	r23, Y+1	; 0x01
     2f6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__udivmodhi4>
     2fa:	66 0f       	add	r22, r22
     2fc:	77 1f       	adc	r23, r23
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatunsisf>
     306:	2a ed       	ldi	r18, 0xDA	; 218
     308:	3f e0       	ldi	r19, 0x0F	; 15
     30a:	49 e4       	ldi	r20, 0x49	; 73
     30c:	50 e4       	ldi	r21, 0x40	; 64
     30e:	0e 94 0a 07 	call	0xe14	; 0xe14 <__mulsf3>
     312:	0e 94 6d 07 	call	0xeda	; 0xeda <sin>
     316:	4b 01       	movw	r8, r22
     318:	5c 01       	movw	r10, r24
     31a:	e8 80       	ld	r14, Y
     31c:	f9 80       	ldd	r15, Y+1	; 0x01
     31e:	b6 01       	movw	r22, r12
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatunsisf>
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	5f e3       	ldi	r21, 0x3F	; 63
     330:	0e 94 0a 07 	call	0xe14	; 0xe14 <__mulsf3>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	b7 01       	movw	r22, r14
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatunsisf>
     342:	9b 01       	movw	r18, r22
     344:	ac 01       	movw	r20, r24
     346:	c5 01       	movw	r24, r10
     348:	b4 01       	movw	r22, r8
     34a:	0e 94 0a 07 	call	0xe14	; 0xe14 <__mulsf3>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	5f e3       	ldi	r21, 0x3F	; 63
     356:	0e 94 0a 07 	call	0xe14	; 0xe14 <__mulsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	c3 01       	movw	r24, r6
     360:	b2 01       	movw	r22, r4
     362:	0e 94 c4 05 	call	0xb88	; 0xb88 <__addsf3>
     366:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fixunssfsi>
     36a:	f1 01       	movw	r30, r2
     36c:	71 83       	std	Z+1, r23	; 0x01
     36e:	60 83       	st	Z, r22
     370:	83 cf       	rjmp	.-250    	; 0x278 <main+0xba>
			}else{
			countsine=0;
     372:	10 92 0d 01 	sts	0x010D, r1
     376:	10 92 0c 01 	sts	0x010C, r1
     37a:	7e cf       	rjmp	.-260    	; 0x278 <main+0xba>

0000037c <__vector_3>:
	
	
}


ISR(INT2_vect){
     37c:	1f 92       	push	r1
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	0f 92       	push	r0
     384:	11 24       	eor	r1, r1
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);
     39e:	63 e0       	ldi	r22, 0x03	; 3
     3a0:	8e e0       	ldi	r24, 0x0E	; 14
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <m_rf_read>
	frequency= buffer[0]+256*buffer[1];
     3a8:	20 91 0e 01 	lds	r18, 0x010E
     3ac:	80 91 0f 01 	lds	r24, 0x010F
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	98 2f       	mov	r25, r24
     3b4:	88 27       	eor	r24, r24
     3b6:	82 0f       	add	r24, r18
     3b8:	91 1d       	adc	r25, r1
     3ba:	90 93 16 01 	sts	0x0116, r25
     3be:	80 93 15 01 	sts	0x0115, r24
	realFrequency=frequency/10;
     3c2:	80 91 15 01 	lds	r24, 0x0115
     3c6:	90 91 16 01 	lds	r25, 0x0116
     3ca:	6a e0       	ldi	r22, 0x0A	; 10
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	0e 94 04 08 	call	0x1008	; 0x1008 <__divmodhi4>
     3d2:	70 93 18 01 	sts	0x0118, r23
     3d6:	60 93 17 01 	sts	0x0117, r22
	OCR1A=2000000/(64*realFrequency);
     3da:	20 91 17 01 	lds	r18, 0x0117
     3de:	30 91 18 01 	lds	r19, 0x0118
     3e2:	00 24       	eor	r0, r0
     3e4:	36 95       	lsr	r19
     3e6:	27 95       	ror	r18
     3e8:	07 94       	ror	r0
     3ea:	36 95       	lsr	r19
     3ec:	27 95       	ror	r18
     3ee:	07 94       	ror	r0
     3f0:	32 2f       	mov	r19, r18
     3f2:	20 2d       	mov	r18, r0
     3f4:	44 27       	eor	r20, r20
     3f6:	37 fd       	sbrc	r19, 7
     3f8:	40 95       	com	r20
     3fa:	54 2f       	mov	r21, r20
     3fc:	60 e8       	ldi	r22, 0x80	; 128
     3fe:	74 e8       	ldi	r23, 0x84	; 132
     400:	8e e1       	ldi	r24, 0x1E	; 30
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 18 08 	call	0x1030	; 0x1030 <__divmodsi4>
     408:	30 93 89 00 	sts	0x0089, r19
     40c:	20 93 88 00 	sts	0x0088, r18
	set(DDRB,6);
     410:	26 9a       	sbi	0x04, 6	; 4
    m_green(TOGGLE);
     412:	6a 9a       	sbi	0x0d, 2	; 13
     414:	9e b1       	in	r25, 0x0e	; 14
     416:	84 e0       	ldi	r24, 0x04	; 4
     418:	89 27       	eor	r24, r25
     41a:	8e b9       	out	0x0e, r24	; 14
	TCNT0=0;
     41c:	16 bc       	out	0x26, r1	; 38
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_17>:
ISR(TIMER1_COMPA_vect){
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
	countsine++;
     44e:	80 91 0c 01 	lds	r24, 0x010C
     452:	90 91 0d 01 	lds	r25, 0x010D
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	90 93 0d 01 	sts	0x010D, r25
     45c:	80 93 0c 01 	sts	0x010C, r24
}
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <__vector_21>:

ISR(TIMER0_COMPA_vect){
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	2f 93       	push	r18
     47a:	3f 93       	push	r19
     47c:	4f 93       	push	r20
     47e:	5f 93       	push	r21
     480:	6f 93       	push	r22
     482:	7f 93       	push	r23
     484:	8f 93       	push	r24
     486:	9f 93       	push	r25
     488:	af 93       	push	r26
     48a:	bf 93       	push	r27
     48c:	ef 93       	push	r30
     48e:	ff 93       	push	r31
	count++;
     490:	60 91 08 01 	lds	r22, 0x0108
     494:	70 91 09 01 	lds	r23, 0x0109
     498:	80 91 0a 01 	lds	r24, 0x010A
     49c:	90 91 0b 01 	lds	r25, 0x010B
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e8       	ldi	r20, 0x80	; 128
     4a6:	5f e3       	ldi	r21, 0x3F	; 63
     4a8:	0e 94 c4 05 	call	0xb88	; 0xb88 <__addsf3>
     4ac:	60 93 08 01 	sts	0x0108, r22
     4b0:	70 93 09 01 	sts	0x0109, r23
     4b4:	80 93 0a 01 	sts	0x010A, r24
     4b8:	90 93 0b 01 	sts	0x010B, r25
	
     4bc:	ff 91       	pop	r31
     4be:	ef 91       	pop	r30
     4c0:	bf 91       	pop	r27
     4c2:	af 91       	pop	r26
     4c4:	9f 91       	pop	r25
     4c6:	8f 91       	pop	r24
     4c8:	7f 91       	pop	r23
     4ca:	6f 91       	pop	r22
     4cc:	5f 91       	pop	r21
     4ce:	4f 91       	pop	r20
     4d0:	3f 91       	pop	r19
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     4de:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     4e0:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     4e2:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     4e4:	8c e0       	ldi	r24, 0x0C	; 12
     4e6:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     4ea:	e9 e6       	ldi	r30, 0x69	; 105
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	80 62       	ori	r24, 0x20	; 32
     4f2:	80 83       	st	Z, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	8f 7e       	andi	r24, 0xEF	; 239
     4f8:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     4fa:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     4fc:	78 94       	sei
     4fe:	08 95       	ret

00000500 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	18 2f       	mov	r17, r24
     508:	d6 2f       	mov	r29, r22
     50a:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     50c:	0e 94 6f 02 	call	0x4de	; 0x4de <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     510:	94 ea       	ldi	r25, 0xA4	; 164
     512:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     516:	ec eb       	ldi	r30, 0xBC	; 188
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	90 81       	ld	r25, Z
     51c:	99 23       	and	r25, r25
     51e:	ec f7       	brge	.-6      	; 0x51a <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     520:	90 e5       	ldi	r25, 0x50	; 80
     522:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     526:	94 e8       	ldi	r25, 0x84	; 132
     528:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     52c:	ec eb       	ldi	r30, 0xBC	; 188
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	90 81       	ld	r25, Z
     532:	99 23       	and	r25, r25
     534:	ec f7       	brge	.-6      	; 0x530 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     536:	90 91 b9 00 	lds	r25, 0x00B9
     53a:	98 7f       	andi	r25, 0xF8	; 248
     53c:	90 32       	cpi	r25, 0x20	; 32
     53e:	29 f4       	brne	.+10     	; 0x54a <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     540:	84 e9       	ldi	r24, 0x94	; 148
     542:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	2d c0       	rjmp	.+90     	; 0x5a4 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     550:	84 e8       	ldi	r24, 0x84	; 132
     552:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     556:	ec eb       	ldi	r30, 0xBC	; 188
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	90 81       	ld	r25, Z
     55c:	99 23       	and	r25, r25
     55e:	ec f7       	brge	.-6      	; 0x55a <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
     560:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
     564:	84 e8       	ldi	r24, 0x84	; 132
     566:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     56a:	ec eb       	ldi	r30, 0xBC	; 188
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	88 23       	and	r24, r24
     572:	ec f7       	brge	.-6      	; 0x56e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
     574:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
     578:	84 e8       	ldi	r24, 0x84	; 132
     57a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     57e:	ec eb       	ldi	r30, 0xBC	; 188
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	88 23       	and	r24, r24
     586:	ec f7       	brge	.-6      	; 0x582 <m_rf_open+0x82>
	
	TWDR = packet_length;
     588:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
     58c:	84 e8       	ldi	r24, 0x84	; 132
     58e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     592:	ec eb       	ldi	r30, 0xBC	; 188
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	88 23       	and	r24, r24
     59a:	ec f7       	brge	.-6      	; 0x596 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     59c:	84 e9       	ldi	r24, 0x94	; 148
     59e:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	08 95       	ret

000005ac <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     5b2:	24 ea       	ldi	r18, 0xA4	; 164
     5b4:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
     5b8:	ec eb       	ldi	r30, 0xBC	; 188
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	20 81       	ld	r18, Z
     5be:	22 23       	and	r18, r18
     5c0:	ec f7       	brge	.-6      	; 0x5bc <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     5c2:	21 e5       	ldi	r18, 0x51	; 81
     5c4:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
     5c8:	24 e8       	ldi	r18, 0x84	; 132
     5ca:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     5ce:	ec eb       	ldi	r30, 0xBC	; 188
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	20 81       	ld	r18, Z
     5d4:	22 23       	and	r18, r18
     5d6:	ec f7       	brge	.-6      	; 0x5d2 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     5d8:	20 91 b9 00 	lds	r18, 0x00B9
     5dc:	28 7f       	andi	r18, 0xF8	; 248
     5de:	28 34       	cpi	r18, 0x48	; 72
     5e0:	29 f4       	brne	.+10     	; 0x5ec <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     5e2:	84 e9       	ldi	r24, 0x94	; 148
     5e4:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	44 c0       	rjmp	.+136    	; 0x674 <m_rf_read+0xc8>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     5ec:	24 ec       	ldi	r18, 0xC4	; 196
     5ee:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     5f2:	ec eb       	ldi	r30, 0xBC	; 188
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	20 81       	ld	r18, Z
     5f8:	22 23       	and	r18, r18
     5fa:	ec f7       	brge	.-6      	; 0x5f6 <m_rf_read+0x4a>
	bytes = TWDR;
     5fc:	10 91 bb 00 	lds	r17, 0x00BB
	if(bytes != packet_length){
     600:	16 13       	cpse	r17, r22
     602:	0a c0       	rjmp	.+20     	; 0x618 <m_rf_read+0x6c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     604:	41 2f       	mov	r20, r17
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	41 50       	subi	r20, 0x01	; 1
     60a:	51 09       	sbc	r21, r1
     60c:	14 16       	cp	r1, r20
     60e:	15 06       	cpc	r1, r21
     610:	44 f0       	brlt	.+16     	; 0x622 <m_rf_read+0x76>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	1c c0       	rjmp	.+56     	; 0x650 <m_rf_read+0xa4>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     618:	84 e9       	ldi	r24, 0x94	; 148
     61a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	29 c0       	rjmp	.+82     	; 0x674 <m_rf_read+0xc8>
     622:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     628:	ec eb       	ldi	r30, 0xBC	; 188
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     62e:	cb eb       	ldi	r28, 0xBB	; 187
     630:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     632:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     634:	60 81       	ld	r22, Z
     636:	66 23       	and	r22, r22
     638:	ec f7       	brge	.-6      	; 0x634 <m_rf_read+0x88>
		buffer[i] = TWDR;
     63a:	68 81       	ld	r22, Y
     63c:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     63e:	2f 5f       	subi	r18, 0xFF	; 255
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	24 17       	cp	r18, r20
     644:	35 07       	cpc	r19, r21
     646:	ac f3       	brlt	.-22     	; 0x632 <m_rf_read+0x86>
     648:	21 2f       	mov	r18, r17
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	31 09       	sbc	r19, r1
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     650:	44 e8       	ldi	r20, 0x84	; 132
     652:	40 93 bc 00 	sts	0x00BC, r20
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     656:	ec eb       	ldi	r30, 0xBC	; 188
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	40 81       	ld	r20, Z
     65c:	44 23       	and	r20, r20
     65e:	ec f7       	brge	.-6      	; 0x65a <m_rf_read+0xae>
	buffer[i++] = TWDR;
     660:	40 91 bb 00 	lds	r20, 0x00BB
     664:	fc 01       	movw	r30, r24
     666:	e2 0f       	add	r30, r18
     668:	f3 1f       	adc	r31, r19
     66a:	40 83       	st	Z, r20
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     66c:	84 e9       	ldi	r24, 0x94	; 148
     66e:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	08 95       	ret

0000067c <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     682:	80 ea       	ldi	r24, 0xA0	; 160
     684:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     688:	82 e1       	ldi	r24, 0x12	; 18
     68a:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     68c:	09 b4       	in	r0, 0x29	; 41
     68e:	00 fe       	sbrs	r0, 0
     690:	fd cf       	rjmp	.-6      	; 0x68c <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     692:	80 e9       	ldi	r24, 0x90	; 144
     694:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     698:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     69c:	10 92 14 01 	sts	0x0114, r1
	cdc_line_rtsdtr = 0;
     6a0:	10 92 11 01 	sts	0x0111, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     6a4:	8c e0       	ldi	r24, 0x0C	; 12
     6a6:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     6aa:	78 94       	sei
     6ac:	08 95       	ret

000006ae <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     6b2:	90 91 14 01 	lds	r25, 0x0114
     6b6:	99 23       	and	r25, r25
     6b8:	09 f4       	brne	.+2      	; 0x6bc <m_usb_tx_char+0xe>
     6ba:	4c c0       	rjmp	.+152    	; 0x754 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     6bc:	9f b7       	in	r25, 0x3f	; 63
	cli();
     6be:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     6c0:	24 e0       	ldi	r18, 0x04	; 4
     6c2:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     6c6:	20 91 12 01 	lds	r18, 0x0112
     6ca:	22 23       	and	r18, r18
     6cc:	49 f0       	breq	.+18     	; 0x6e0 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     6ce:	20 91 e8 00 	lds	r18, 0x00E8
     6d2:	25 fd       	sbrc	r18, 5
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <m_usb_tx_char+0x2e>
			SREG = intr_state;
     6d6:	9f bf       	out	0x3f, r25	; 63
			return -1;
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	41 c0       	rjmp	.+130    	; 0x75e <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     6dc:	10 92 12 01 	sts	0x0112, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     6e0:	30 91 e4 00 	lds	r19, 0x00E4
     6e4:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     6e6:	20 91 e8 00 	lds	r18, 0x00E8
     6ea:	25 fd       	sbrc	r18, 5
     6ec:	24 c0       	rjmp	.+72     	; 0x736 <m_usb_tx_char+0x88>
		SREG = intr_state;
     6ee:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     6f0:	90 91 e4 00 	lds	r25, 0x00E4
     6f4:	93 17       	cp	r25, r19
     6f6:	81 f0       	breq	.+32     	; 0x718 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     6f8:	90 91 14 01 	lds	r25, 0x0114
     6fc:	99 23       	and	r25, r25
     6fe:	61 f1       	breq	.+88     	; 0x758 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     700:	a9 ee       	ldi	r26, 0xE9	; 233
     702:	b0 e0       	ldi	r27, 0x00	; 0
     704:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     706:	e8 ee       	ldi	r30, 0xE8	; 232
     708:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     70a:	c4 ee       	ldi	r28, 0xE4	; 228
     70c:	d0 e0       	ldi	r29, 0x00	; 0
     70e:	0d c0       	rjmp	.+26     	; 0x72a <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     710:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     712:	98 81       	ld	r25, Y
     714:	93 13       	cpse	r25, r19
     716:	05 c0       	rjmp	.+10     	; 0x722 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 12 01 	sts	0x0112, r24
			return -1;
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	1e c0       	rjmp	.+60     	; 0x75e <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     722:	90 91 14 01 	lds	r25, 0x0114
     726:	99 23       	and	r25, r25
     728:	c9 f0       	breq	.+50     	; 0x75c <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     72a:	9f b7       	in	r25, 0x3f	; 63
		cli();
     72c:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     72e:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     730:	20 81       	ld	r18, Z
     732:	25 ff       	sbrs	r18, 5
     734:	ed cf       	rjmp	.-38     	; 0x710 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     736:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     73a:	80 91 e8 00 	lds	r24, 0x00E8
     73e:	85 fd       	sbrc	r24, 5
     740:	03 c0       	rjmp	.+6      	; 0x748 <m_usb_tx_char+0x9a>
     742:	8a e3       	ldi	r24, 0x3A	; 58
     744:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	80 93 13 01 	sts	0x0113, r24
	SREG = intr_state;
     74e:	9f bf       	out	0x3f, r25	; 63
	return 0;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	05 c0       	rjmp	.+10     	; 0x75e <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	03 c0       	rjmp	.+6      	; 0x75e <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	01 c0       	rjmp	.+2      	; 0x75e <m_usb_tx_char+0xb0>
     75c:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     776:	e1 ee       	ldi	r30, 0xE1	; 225
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
        UDINT = 0;
     77c:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     77e:	83 ff       	sbrs	r24, 3
     780:	11 c0       	rjmp	.+34     	; 0x7a4 <__vector_10+0x40>
		UENUM = 0;
     782:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     78c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     790:	92 e1       	ldi	r25, 0x12	; 18
     792:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     796:	98 e0       	ldi	r25, 0x08	; 8
     798:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     79c:	10 92 14 01 	sts	0x0114, r1
		cdc_line_rtsdtr = 0;
     7a0:	10 92 11 01 	sts	0x0111, r1
        }
	if (intbits & (1<<SOFI)) {
     7a4:	82 ff       	sbrs	r24, 2
     7a6:	13 c0       	rjmp	.+38     	; 0x7ce <__vector_10+0x6a>
		if (usb_configuration) {
     7a8:	80 91 14 01 	lds	r24, 0x0114
     7ac:	88 23       	and	r24, r24
     7ae:	79 f0       	breq	.+30     	; 0x7ce <__vector_10+0x6a>
			t = transmit_flush_timer;
     7b0:	80 91 13 01 	lds	r24, 0x0113
			if (t) {
     7b4:	88 23       	and	r24, r24
     7b6:	59 f0       	breq	.+22     	; 0x7ce <__vector_10+0x6a>
				transmit_flush_timer = --t;
     7b8:	81 50       	subi	r24, 0x01	; 1
     7ba:	80 93 13 01 	sts	0x0113, r24
				if (!t) {
     7be:	81 11       	cpse	r24, r1
     7c0:	06 c0       	rjmp	.+12     	; 0x7ce <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     7c8:	8a e3       	ldi	r24, 0x3A	; 58
     7ca:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ef 93       	push	r30
     808:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     80a:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     80e:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     812:	83 ff       	sbrs	r24, 3
     814:	4e c1       	rjmp	.+668    	; 0xab2 <__vector_11+0x2d2>
                bmRequestType = UEDATX;
     816:	e1 ef       	ldi	r30, 0xF1	; 241
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
     81c:	40 81       	ld	r20, Z
                wValue = UEDATX;
     81e:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     820:	80 81       	ld	r24, Z
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	38 2b       	or	r19, r24
                wIndex = UEDATX;
     826:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
     828:	50 81       	ld	r21, Z
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	bc 01       	movw	r22, r24
     82e:	75 2b       	or	r23, r21
                wLength = UEDATX;
     830:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
     832:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     834:	82 ef       	ldi	r24, 0xF2	; 242
     836:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     83a:	46 30       	cpi	r20, 0x06	; 6
     83c:	09 f0       	breq	.+2      	; 0x840 <__vector_11+0x60>
     83e:	58 c0       	rjmp	.+176    	; 0x8f0 <__vector_11+0x110>
     840:	04 c0       	rjmp	.+8      	; 0x84a <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     842:	81 e2       	ldi	r24, 0x21	; 33
     844:	80 93 eb 00 	sts	0x00EB, r24
					return;
     848:	3b c1       	rjmp	.+630    	; 0xac0 <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
     84a:	c6 e0       	ldi	r28, 0x06	; 6
     84c:	8d ec       	ldi	r24, 0xCD	; 205
     84e:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
     850:	fc 01       	movw	r30, r24
     852:	45 91       	lpm	r20, Z+
     854:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
     856:	24 17       	cp	r18, r20
     858:	35 07       	cpc	r19, r21
     85a:	11 f0       	breq	.+4      	; 0x860 <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
     85c:	07 96       	adiw	r24, 0x07	; 7
					continue;
     85e:	23 c0       	rjmp	.+70     	; 0x8a6 <__vector_11+0xc6>
				}
				list += 2;
     860:	fc 01       	movw	r30, r24
     862:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     864:	45 91       	lpm	r20, Z+
     866:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
     868:	64 17       	cp	r22, r20
     86a:	75 07       	cpc	r23, r21
     86c:	11 f0       	breq	.+4      	; 0x872 <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
     86e:	07 96       	adiw	r24, 0x07	; 7
					continue;
     870:	1a c0       	rjmp	.+52     	; 0x8a6 <__vector_11+0xc6>
				}
				list += 2;
     872:	fc 01       	movw	r30, r24
     874:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     876:	25 91       	lpm	r18, Z+
     878:	34 91       	lpm	r19, Z
				list += 2;
     87a:	fc 01       	movw	r30, r24
     87c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     87e:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     880:	8b 2f       	mov	r24, r27
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     886:	8f 3f       	cpi	r24, 0xFF	; 255
     888:	91 05       	cpc	r25, r1
     88a:	19 f0       	breq	.+6      	; 0x892 <__vector_11+0xb2>
     88c:	10 f0       	brcs	.+4      	; 0x892 <__vector_11+0xb2>
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	85 17       	cp	r24, r21
     894:	08 f4       	brcc	.+2      	; 0x898 <__vector_11+0xb8>
     896:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     898:	a8 ee       	ldi	r26, 0xE8	; 232
     89a:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     89c:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     89e:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     8a0:	c1 ef       	ldi	r28, 0xF1	; 241
     8a2:	d0 e0       	ldi	r29, 0x00	; 0
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__vector_11+0xcc>
     8a6:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     8a8:	99 f6       	brne	.-90     	; 0x850 <__vector_11+0x70>
     8aa:	cb cf       	rjmp	.-106    	; 0x842 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     8ac:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     8ae:	98 2f       	mov	r25, r24
     8b0:	95 70       	andi	r25, 0x05	; 5
     8b2:	e1 f3       	breq	.-8      	; 0x8ac <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
     8b4:	82 fd       	sbrc	r24, 2
     8b6:	04 c1       	rjmp	.+520    	; 0xac0 <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     8b8:	45 2f       	mov	r20, r21
     8ba:	51 31       	cpi	r21, 0x11	; 17
     8bc:	08 f0       	brcs	.+2      	; 0x8c0 <__vector_11+0xe0>
     8be:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
     8c0:	44 23       	and	r20, r20
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <__vector_11+0xe6>
     8c4:	fa c0       	rjmp	.+500    	; 0xaba <__vector_11+0x2da>
     8c6:	f9 01       	movw	r30, r18
     8c8:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
     8ca:	94 91       	lpm	r25, Z
     8cc:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     8ce:	81 50       	subi	r24, 0x01	; 1
     8d0:	31 96       	adiw	r30, 0x01	; 1
     8d2:	81 11       	cpse	r24, r1
     8d4:	fa cf       	rjmp	.-12     	; 0x8ca <__vector_11+0xea>
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	84 0f       	add	r24, r20
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	28 0f       	add	r18, r24
     8e0:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     8e2:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     8e4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     8e6:	51 11       	cpse	r21, r1
     8e8:	e1 cf       	rjmp	.-62     	; 0x8ac <__vector_11+0xcc>
     8ea:	40 31       	cpi	r20, 0x10	; 16
     8ec:	f9 f2       	breq	.-66     	; 0x8ac <__vector_11+0xcc>
     8ee:	e8 c0       	rjmp	.+464    	; 0xac0 <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     8f0:	45 30       	cpi	r20, 0x05	; 5
     8f2:	61 f4       	brne	.+24     	; 0x90c <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     8f4:	8e ef       	ldi	r24, 0xFE	; 254
     8f6:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     8fa:	e8 ee       	ldi	r30, 0xE8	; 232
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	80 ff       	sbrs	r24, 0
     902:	fd cf       	rjmp	.-6      	; 0x8fe <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     904:	20 68       	ori	r18, 0x80	; 128
     906:	20 93 e3 00 	sts	0x00E3, r18
			return;
     90a:	da c0       	rjmp	.+436    	; 0xac0 <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     90c:	49 30       	cpi	r20, 0x09	; 9
     90e:	09 f0       	breq	.+2      	; 0x912 <__vector_11+0x132>
     910:	36 c0       	rjmp	.+108    	; 0x97e <__vector_11+0x19e>
     912:	c1 11       	cpse	r28, r1
     914:	5f c0       	rjmp	.+190    	; 0x9d4 <__vector_11+0x1f4>
			usb_configuration = wValue;
     916:	20 93 14 01 	sts	0x0114, r18
			cdc_line_rtsdtr = 0;
     91a:	10 92 11 01 	sts	0x0111, r1
			transmit_flush_timer = 0;
     91e:	10 92 13 01 	sts	0x0113, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     922:	8e ef       	ldi	r24, 0xFE	; 254
     924:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     928:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     92a:	86 e7       	ldi	r24, 0x76	; 118
     92c:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     92e:	c9 ee       	ldi	r28, 0xE9	; 233
     930:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     932:	ab ee       	ldi	r26, 0xEB	; 235
     934:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     936:	6c ee       	ldi	r22, 0xEC	; 236
     938:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     93a:	4d ee       	ldi	r20, 0xED	; 237
     93c:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     93e:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
     940:	9c 01       	movw	r18, r24
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	fc 01       	movw	r30, r24
     948:	04 91       	lpm	r16, Z
				UECONX = en;
     94a:	0c 93       	st	X, r16
				if (en) {
     94c:	00 23       	and	r16, r16
     94e:	61 f0       	breq	.+24     	; 0x968 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
     950:	f9 01       	movw	r30, r18
     952:	24 91       	lpm	r18, Z
     954:	fb 01       	movw	r30, r22
     956:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
     958:	9c 01       	movw	r18, r24
     95a:	2d 5f       	subi	r18, 0xFD	; 253
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	fc 01       	movw	r30, r24
     960:	32 96       	adiw	r30, 0x02	; 2
     962:	84 91       	lpm	r24, Z
     964:	fa 01       	movw	r30, r20
     966:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     968:	1f 5f       	subi	r17, 0xFF	; 255
     96a:	15 30       	cpi	r17, 0x05	; 5
     96c:	11 f0       	breq	.+4      	; 0x972 <__vector_11+0x192>
     96e:	c9 01       	movw	r24, r18
     970:	e6 cf       	rjmp	.-52     	; 0x93e <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     972:	ea ee       	ldi	r30, 0xEA	; 234
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	80 83       	st	Z, r24
        		UERST = 0;
     97a:	10 82       	st	Z, r1
			return;
     97c:	a1 c0       	rjmp	.+322    	; 0xac0 <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     97e:	48 30       	cpi	r20, 0x08	; 8
     980:	81 f4       	brne	.+32     	; 0x9a2 <__vector_11+0x1c2>
     982:	c0 38       	cpi	r28, 0x80	; 128
     984:	09 f0       	breq	.+2      	; 0x988 <__vector_11+0x1a8>
     986:	42 c0       	rjmp	.+132    	; 0xa0c <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     988:	e8 ee       	ldi	r30, 0xE8	; 232
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	80 ff       	sbrs	r24, 0
     990:	fd cf       	rjmp	.-6      	; 0x98c <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     992:	80 91 14 01 	lds	r24, 0x0114
     996:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     99a:	8e ef       	ldi	r24, 0xFE	; 254
     99c:	80 93 e8 00 	sts	0x00E8, r24
     9a0:	8f c0       	rjmp	.+286    	; 0xac0 <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     9a2:	41 32       	cpi	r20, 0x21	; 33
     9a4:	b9 f4       	brne	.+46     	; 0x9d4 <__vector_11+0x1f4>
     9a6:	c1 3a       	cpi	r28, 0xA1	; 161
     9a8:	09 f0       	breq	.+2      	; 0x9ac <__vector_11+0x1cc>
     9aa:	40 c0       	rjmp	.+128    	; 0xa2c <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     9ac:	e8 ee       	ldi	r30, 0xE8	; 232
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	80 ff       	sbrs	r24, 0
     9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <__vector_11+0x1d0>
     9b6:	e0 e0       	ldi	r30, 0x00	; 0
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	87 e0       	ldi	r24, 0x07	; 7
     9bc:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     9be:	a1 ef       	ldi	r26, 0xF1	; 241
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	21 91       	ld	r18, Z+
     9c4:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     9c6:	e8 17       	cp	r30, r24
     9c8:	f9 07       	cpc	r31, r25
     9ca:	d9 f7       	brne	.-10     	; 0x9c2 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     9cc:	8e ef       	ldi	r24, 0xFE	; 254
     9ce:	80 93 e8 00 	sts	0x00E8, r24
     9d2:	76 c0       	rjmp	.+236    	; 0xac0 <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     9d4:	40 32       	cpi	r20, 0x20	; 32
     9d6:	d1 f4       	brne	.+52     	; 0xa0c <__vector_11+0x22c>
     9d8:	c1 32       	cpi	r28, 0x21	; 33
     9da:	09 f0       	breq	.+2      	; 0x9de <__vector_11+0x1fe>
     9dc:	43 c0       	rjmp	.+134    	; 0xa64 <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     9de:	e8 ee       	ldi	r30, 0xE8	; 232
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	82 ff       	sbrs	r24, 2
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <__vector_11+0x202>
     9e8:	e0 e0       	ldi	r30, 0x00	; 0
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	87 e0       	ldi	r24, 0x07	; 7
     9ee:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     9f0:	a1 ef       	ldi	r26, 0xF1	; 241
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	2c 91       	ld	r18, X
     9f6:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     9f8:	e8 17       	cp	r30, r24
     9fa:	f9 07       	cpc	r31, r25
     9fc:	d9 f7       	brne	.-10     	; 0x9f4 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     9fe:	e8 ee       	ldi	r30, 0xE8	; 232
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	8b ef       	ldi	r24, 0xFB	; 251
     a04:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a06:	8e ef       	ldi	r24, 0xFE	; 254
     a08:	80 83       	st	Z, r24
     a0a:	5a c0       	rjmp	.+180    	; 0xac0 <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     a0c:	42 32       	cpi	r20, 0x22	; 34
     a0e:	71 f4       	brne	.+28     	; 0xa2c <__vector_11+0x24c>
     a10:	c1 32       	cpi	r28, 0x21	; 33
     a12:	09 f0       	breq	.+2      	; 0xa16 <__vector_11+0x236>
     a14:	4e c0       	rjmp	.+156    	; 0xab2 <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
     a16:	20 93 11 01 	sts	0x0111, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     a1a:	e8 ee       	ldi	r30, 0xE8	; 232
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	80 ff       	sbrs	r24, 0
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a24:	8e ef       	ldi	r24, 0xFE	; 254
     a26:	80 93 e8 00 	sts	0x00E8, r24
     a2a:	4a c0       	rjmp	.+148    	; 0xac0 <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     a2c:	41 11       	cpse	r20, r1
     a2e:	1a c0       	rjmp	.+52     	; 0xa64 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     a30:	e8 ee       	ldi	r30, 0xE8	; 232
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	80 ff       	sbrs	r24, 0
     a38:	fd cf       	rjmp	.-6      	; 0xa34 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     a3a:	c2 38       	cpi	r28, 0x82	; 130
     a3c:	51 f4       	brne	.+20     	; 0xa52 <__vector_11+0x272>
				UENUM = wIndex;
     a3e:	e9 ee       	ldi	r30, 0xE9	; 233
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
     a44:	80 91 eb 00 	lds	r24, 0x00EB
     a48:	85 fb       	bst	r24, 5
     a4a:	88 27       	eor	r24, r24
     a4c:	80 f9       	bld	r24, 0
				UENUM = 0;
     a4e:	10 82       	st	Z, r1
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     a52:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     a54:	e1 ef       	ldi	r30, 0xF1	; 241
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 83       	st	Z, r24
			UEDATX = 0;
     a5a:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a5c:	8e ef       	ldi	r24, 0xFE	; 254
     a5e:	80 93 e8 00 	sts	0x00E8, r24
     a62:	2e c0       	rjmp	.+92     	; 0xac0 <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     a64:	84 2f       	mov	r24, r20
     a66:	8d 7f       	andi	r24, 0xFD	; 253
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	19 f5       	brne	.+70     	; 0xab2 <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
     a6c:	c2 30       	cpi	r28, 0x02	; 2
     a6e:	09 f5       	brne	.+66     	; 0xab2 <__vector_11+0x2d2>
     a70:	23 2b       	or	r18, r19
     a72:	f9 f4       	brne	.+62     	; 0xab2 <__vector_11+0x2d2>
			i = wIndex & 0x7F;
     a74:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	86 0f       	add	r24, r22
     a7a:	84 30       	cpi	r24, 0x04	; 4
     a7c:	d0 f4       	brcc	.+52     	; 0xab2 <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     a7e:	8e ef       	ldi	r24, 0xFE	; 254
     a80:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     a84:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
     a88:	43 30       	cpi	r20, 0x03	; 3
     a8a:	21 f4       	brne	.+8      	; 0xa94 <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     a8c:	81 e2       	ldi	r24, 0x21	; 33
     a8e:	80 93 eb 00 	sts	0x00EB, r24
     a92:	16 c0       	rjmp	.+44     	; 0xac0 <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     a94:	89 e1       	ldi	r24, 0x19	; 25
     a96:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <__vector_11+0x2c4>
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	6a 95       	dec	r22
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <__vector_11+0x2c0>
     aa8:	ea ee       	ldi	r30, 0xEA	; 234
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 83       	st	Z, r24
					UERST = 0;
     aae:	10 82       	st	Z, r1
     ab0:	07 c0       	rjmp	.+14     	; 0xac0 <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     ab2:	81 e2       	ldi	r24, 0x21	; 33
     ab4:	80 93 eb 00 	sts	0x00EB, r24
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     aba:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     abc:	51 11       	cpse	r21, r1
     abe:	f6 ce       	rjmp	.-532    	; 0x8ac <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     ac0:	ff 91       	pop	r31
     ac2:	ef 91       	pop	r30
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	bf 91       	pop	r27
     aca:	af 91       	pop	r26
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	7f 91       	pop	r23
     ad2:	6f 91       	pop	r22
     ad4:	5f 91       	pop	r21
     ad6:	4f 91       	pop	r20
     ad8:	3f 91       	pop	r19
     ada:	2f 91       	pop	r18
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     af0:	ec 01       	movw	r28, r24
     af2:	21 96       	adiw	r28, 0x01	; 1
     af4:	fc 01       	movw	r30, r24
     af6:	14 91       	lpm	r17, Z
		if (!c) break;
     af8:	11 23       	and	r17, r17
     afa:	69 f0       	breq	.+26     	; 0xb16 <__stack+0x17>
		if (c == '\n') usb_tx_char('\r');
     afc:	1a 30       	cpi	r17, 0x0A	; 10
     afe:	19 f4       	brne	.+6      	; 0xb06 <__stack+0x7>
     b00:	8d e0       	ldi	r24, 0x0D	; 13
     b02:	0e 94 57 03 	call	0x6ae	; 0x6ae <m_usb_tx_char>
		usb_tx_char(c);
     b06:	81 2f       	mov	r24, r17
     b08:	0e 94 57 03 	call	0x6ae	; 0x6ae <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     b0c:	fe 01       	movw	r30, r28
     b0e:	14 91       	lpm	r17, Z
     b10:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
     b12:	11 11       	cpse	r17, r1
     b14:	f3 cf       	rjmp	.-26     	; 0xafc <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	08 95       	ret

00000b1e <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	27 97       	sbiw	r28, 0x07	; 7
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     b3a:	8e 01       	movw	r16, r28
     b3c:	0f 5f       	subi	r16, 0xFF	; 255
     b3e:	1f 4f       	sbci	r17, 0xFF	; 255
     b40:	27 e0       	ldi	r18, 0x07	; 7
     b42:	f8 01       	movw	r30, r16
     b44:	11 92       	st	Z+, r1
     b46:	2a 95       	dec	r18
     b48:	e9 f7       	brne	.-6      	; 0xb44 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b4a:	4a e0       	ldi	r20, 0x0A	; 10
     b4c:	b8 01       	movw	r22, r16
     b4e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__itoa_ncheck>
     b52:	7e 01       	movw	r14, r28
     b54:	f8 e0       	ldi	r31, 0x08	; 8
     b56:	ef 0e       	add	r14, r31
     b58:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     b5a:	f8 01       	movw	r30, r16
     b5c:	81 91       	ld	r24, Z+
     b5e:	8f 01       	movw	r16, r30
     b60:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     b62:	0e 94 57 03 	call	0x6ae	; 0x6ae <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     b66:	0e 15       	cp	r16, r14
     b68:	1f 05       	cpc	r17, r15
     b6a:	b9 f7       	brne	.-18     	; 0xb5a <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     b6c:	27 96       	adiw	r28, 0x07	; 7
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	08 95       	ret

00000b86 <__subsf3>:
     b86:	50 58       	subi	r21, 0x80	; 128

00000b88 <__addsf3>:
     b88:	bb 27       	eor	r27, r27
     b8a:	aa 27       	eor	r26, r26
     b8c:	0e d0       	rcall	.+28     	; 0xbaa <__addsf3x>
     b8e:	08 c1       	rjmp	.+528    	; 0xda0 <__fp_round>
     b90:	f9 d0       	rcall	.+498    	; 0xd84 <__fp_pscA>
     b92:	30 f0       	brcs	.+12     	; 0xba0 <__addsf3+0x18>
     b94:	fe d0       	rcall	.+508    	; 0xd92 <__fp_pscB>
     b96:	20 f0       	brcs	.+8      	; 0xba0 <__addsf3+0x18>
     b98:	31 f4       	brne	.+12     	; 0xba6 <__addsf3+0x1e>
     b9a:	9f 3f       	cpi	r25, 0xFF	; 255
     b9c:	11 f4       	brne	.+4      	; 0xba2 <__addsf3+0x1a>
     b9e:	1e f4       	brtc	.+6      	; 0xba6 <__addsf3+0x1e>
     ba0:	ee c0       	rjmp	.+476    	; 0xd7e <__fp_nan>
     ba2:	0e f4       	brtc	.+2      	; 0xba6 <__addsf3+0x1e>
     ba4:	e0 95       	com	r30
     ba6:	e7 fb       	bst	r30, 7
     ba8:	e4 c0       	rjmp	.+456    	; 0xd72 <__fp_inf>

00000baa <__addsf3x>:
     baa:	e9 2f       	mov	r30, r25
     bac:	0a d1       	rcall	.+532    	; 0xdc2 <__fp_split3>
     bae:	80 f3       	brcs	.-32     	; 0xb90 <__addsf3+0x8>
     bb0:	ba 17       	cp	r27, r26
     bb2:	62 07       	cpc	r22, r18
     bb4:	73 07       	cpc	r23, r19
     bb6:	84 07       	cpc	r24, r20
     bb8:	95 07       	cpc	r25, r21
     bba:	18 f0       	brcs	.+6      	; 0xbc2 <__addsf3x+0x18>
     bbc:	71 f4       	brne	.+28     	; 0xbda <__addsf3x+0x30>
     bbe:	9e f5       	brtc	.+102    	; 0xc26 <__addsf3x+0x7c>
     bc0:	22 c1       	rjmp	.+580    	; 0xe06 <__fp_zero>
     bc2:	0e f4       	brtc	.+2      	; 0xbc6 <__addsf3x+0x1c>
     bc4:	e0 95       	com	r30
     bc6:	0b 2e       	mov	r0, r27
     bc8:	ba 2f       	mov	r27, r26
     bca:	a0 2d       	mov	r26, r0
     bcc:	0b 01       	movw	r0, r22
     bce:	b9 01       	movw	r22, r18
     bd0:	90 01       	movw	r18, r0
     bd2:	0c 01       	movw	r0, r24
     bd4:	ca 01       	movw	r24, r20
     bd6:	a0 01       	movw	r20, r0
     bd8:	11 24       	eor	r1, r1
     bda:	ff 27       	eor	r31, r31
     bdc:	59 1b       	sub	r21, r25
     bde:	99 f0       	breq	.+38     	; 0xc06 <__addsf3x+0x5c>
     be0:	59 3f       	cpi	r21, 0xF9	; 249
     be2:	50 f4       	brcc	.+20     	; 0xbf8 <__addsf3x+0x4e>
     be4:	50 3e       	cpi	r21, 0xE0	; 224
     be6:	68 f1       	brcs	.+90     	; 0xc42 <__addsf3x+0x98>
     be8:	1a 16       	cp	r1, r26
     bea:	f0 40       	sbci	r31, 0x00	; 0
     bec:	a2 2f       	mov	r26, r18
     bee:	23 2f       	mov	r18, r19
     bf0:	34 2f       	mov	r19, r20
     bf2:	44 27       	eor	r20, r20
     bf4:	58 5f       	subi	r21, 0xF8	; 248
     bf6:	f3 cf       	rjmp	.-26     	; 0xbde <__addsf3x+0x34>
     bf8:	46 95       	lsr	r20
     bfa:	37 95       	ror	r19
     bfc:	27 95       	ror	r18
     bfe:	a7 95       	ror	r26
     c00:	f0 40       	sbci	r31, 0x00	; 0
     c02:	53 95       	inc	r21
     c04:	c9 f7       	brne	.-14     	; 0xbf8 <__addsf3x+0x4e>
     c06:	7e f4       	brtc	.+30     	; 0xc26 <__addsf3x+0x7c>
     c08:	1f 16       	cp	r1, r31
     c0a:	ba 0b       	sbc	r27, r26
     c0c:	62 0b       	sbc	r22, r18
     c0e:	73 0b       	sbc	r23, r19
     c10:	84 0b       	sbc	r24, r20
     c12:	ba f0       	brmi	.+46     	; 0xc42 <__addsf3x+0x98>
     c14:	91 50       	subi	r25, 0x01	; 1
     c16:	a1 f0       	breq	.+40     	; 0xc40 <__addsf3x+0x96>
     c18:	ff 0f       	add	r31, r31
     c1a:	bb 1f       	adc	r27, r27
     c1c:	66 1f       	adc	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	88 1f       	adc	r24, r24
     c22:	c2 f7       	brpl	.-16     	; 0xc14 <__addsf3x+0x6a>
     c24:	0e c0       	rjmp	.+28     	; 0xc42 <__addsf3x+0x98>
     c26:	ba 0f       	add	r27, r26
     c28:	62 1f       	adc	r22, r18
     c2a:	73 1f       	adc	r23, r19
     c2c:	84 1f       	adc	r24, r20
     c2e:	48 f4       	brcc	.+18     	; 0xc42 <__addsf3x+0x98>
     c30:	87 95       	ror	r24
     c32:	77 95       	ror	r23
     c34:	67 95       	ror	r22
     c36:	b7 95       	ror	r27
     c38:	f7 95       	ror	r31
     c3a:	9e 3f       	cpi	r25, 0xFE	; 254
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <__addsf3x+0x96>
     c3e:	b3 cf       	rjmp	.-154    	; 0xba6 <__addsf3+0x1e>
     c40:	93 95       	inc	r25
     c42:	88 0f       	add	r24, r24
     c44:	08 f0       	brcs	.+2      	; 0xc48 <__addsf3x+0x9e>
     c46:	99 27       	eor	r25, r25
     c48:	ee 0f       	add	r30, r30
     c4a:	97 95       	ror	r25
     c4c:	87 95       	ror	r24
     c4e:	08 95       	ret

00000c50 <__cmpsf2>:
     c50:	6c d0       	rcall	.+216    	; 0xd2a <__fp_cmp>
     c52:	08 f4       	brcc	.+2      	; 0xc56 <__cmpsf2+0x6>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	08 95       	ret

00000c58 <__fixunssfsi>:
     c58:	bc d0       	rcall	.+376    	; 0xdd2 <__fp_splitA>
     c5a:	88 f0       	brcs	.+34     	; 0xc7e <__fixunssfsi+0x26>
     c5c:	9f 57       	subi	r25, 0x7F	; 127
     c5e:	90 f0       	brcs	.+36     	; 0xc84 <__fixunssfsi+0x2c>
     c60:	b9 2f       	mov	r27, r25
     c62:	99 27       	eor	r25, r25
     c64:	b7 51       	subi	r27, 0x17	; 23
     c66:	a0 f0       	brcs	.+40     	; 0xc90 <__fixunssfsi+0x38>
     c68:	d1 f0       	breq	.+52     	; 0xc9e <__fixunssfsi+0x46>
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	88 1f       	adc	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	1a f0       	brmi	.+6      	; 0xc7a <__fixunssfsi+0x22>
     c74:	ba 95       	dec	r27
     c76:	c9 f7       	brne	.-14     	; 0xc6a <__fixunssfsi+0x12>
     c78:	12 c0       	rjmp	.+36     	; 0xc9e <__fixunssfsi+0x46>
     c7a:	b1 30       	cpi	r27, 0x01	; 1
     c7c:	81 f0       	breq	.+32     	; 0xc9e <__fixunssfsi+0x46>
     c7e:	c3 d0       	rcall	.+390    	; 0xe06 <__fp_zero>
     c80:	b1 e0       	ldi	r27, 0x01	; 1
     c82:	08 95       	ret
     c84:	c0 c0       	rjmp	.+384    	; 0xe06 <__fp_zero>
     c86:	67 2f       	mov	r22, r23
     c88:	78 2f       	mov	r23, r24
     c8a:	88 27       	eor	r24, r24
     c8c:	b8 5f       	subi	r27, 0xF8	; 248
     c8e:	39 f0       	breq	.+14     	; 0xc9e <__fixunssfsi+0x46>
     c90:	b9 3f       	cpi	r27, 0xF9	; 249
     c92:	cc f3       	brlt	.-14     	; 0xc86 <__fixunssfsi+0x2e>
     c94:	86 95       	lsr	r24
     c96:	77 95       	ror	r23
     c98:	67 95       	ror	r22
     c9a:	b3 95       	inc	r27
     c9c:	d9 f7       	brne	.-10     	; 0xc94 <__fixunssfsi+0x3c>
     c9e:	3e f4       	brtc	.+14     	; 0xcae <__fixunssfsi+0x56>
     ca0:	90 95       	com	r25
     ca2:	80 95       	com	r24
     ca4:	70 95       	com	r23
     ca6:	61 95       	neg	r22
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	8f 4f       	sbci	r24, 0xFF	; 255
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	08 95       	ret

00000cb0 <__floatunsisf>:
     cb0:	e8 94       	clt
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <__floatsisf+0x12>

00000cb4 <__floatsisf>:
     cb4:	97 fb       	bst	r25, 7
     cb6:	3e f4       	brtc	.+14     	; 0xcc6 <__floatsisf+0x12>
     cb8:	90 95       	com	r25
     cba:	80 95       	com	r24
     cbc:	70 95       	com	r23
     cbe:	61 95       	neg	r22
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	8f 4f       	sbci	r24, 0xFF	; 255
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	99 23       	and	r25, r25
     cc8:	a9 f0       	breq	.+42     	; 0xcf4 <__floatsisf+0x40>
     cca:	f9 2f       	mov	r31, r25
     ccc:	96 e9       	ldi	r25, 0x96	; 150
     cce:	bb 27       	eor	r27, r27
     cd0:	93 95       	inc	r25
     cd2:	f6 95       	lsr	r31
     cd4:	87 95       	ror	r24
     cd6:	77 95       	ror	r23
     cd8:	67 95       	ror	r22
     cda:	b7 95       	ror	r27
     cdc:	f1 11       	cpse	r31, r1
     cde:	f8 cf       	rjmp	.-16     	; 0xcd0 <__floatsisf+0x1c>
     ce0:	fa f4       	brpl	.+62     	; 0xd20 <__floatsisf+0x6c>
     ce2:	bb 0f       	add	r27, r27
     ce4:	11 f4       	brne	.+4      	; 0xcea <__floatsisf+0x36>
     ce6:	60 ff       	sbrs	r22, 0
     ce8:	1b c0       	rjmp	.+54     	; 0xd20 <__floatsisf+0x6c>
     cea:	6f 5f       	subi	r22, 0xFF	; 255
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	8f 4f       	sbci	r24, 0xFF	; 255
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	16 c0       	rjmp	.+44     	; 0xd20 <__floatsisf+0x6c>
     cf4:	88 23       	and	r24, r24
     cf6:	11 f0       	breq	.+4      	; 0xcfc <__floatsisf+0x48>
     cf8:	96 e9       	ldi	r25, 0x96	; 150
     cfa:	11 c0       	rjmp	.+34     	; 0xd1e <__floatsisf+0x6a>
     cfc:	77 23       	and	r23, r23
     cfe:	21 f0       	breq	.+8      	; 0xd08 <__floatsisf+0x54>
     d00:	9e e8       	ldi	r25, 0x8E	; 142
     d02:	87 2f       	mov	r24, r23
     d04:	76 2f       	mov	r23, r22
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <__floatsisf+0x5e>
     d08:	66 23       	and	r22, r22
     d0a:	71 f0       	breq	.+28     	; 0xd28 <__floatsisf+0x74>
     d0c:	96 e8       	ldi	r25, 0x86	; 134
     d0e:	86 2f       	mov	r24, r22
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	2a f0       	brmi	.+10     	; 0xd20 <__floatsisf+0x6c>
     d16:	9a 95       	dec	r25
     d18:	66 0f       	add	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	88 1f       	adc	r24, r24
     d1e:	da f7       	brpl	.-10     	; 0xd16 <__floatsisf+0x62>
     d20:	88 0f       	add	r24, r24
     d22:	96 95       	lsr	r25
     d24:	87 95       	ror	r24
     d26:	97 f9       	bld	r25, 7
     d28:	08 95       	ret

00000d2a <__fp_cmp>:
     d2a:	99 0f       	add	r25, r25
     d2c:	00 08       	sbc	r0, r0
     d2e:	55 0f       	add	r21, r21
     d30:	aa 0b       	sbc	r26, r26
     d32:	e0 e8       	ldi	r30, 0x80	; 128
     d34:	fe ef       	ldi	r31, 0xFE	; 254
     d36:	16 16       	cp	r1, r22
     d38:	17 06       	cpc	r1, r23
     d3a:	e8 07       	cpc	r30, r24
     d3c:	f9 07       	cpc	r31, r25
     d3e:	c0 f0       	brcs	.+48     	; 0xd70 <__fp_cmp+0x46>
     d40:	12 16       	cp	r1, r18
     d42:	13 06       	cpc	r1, r19
     d44:	e4 07       	cpc	r30, r20
     d46:	f5 07       	cpc	r31, r21
     d48:	98 f0       	brcs	.+38     	; 0xd70 <__fp_cmp+0x46>
     d4a:	62 1b       	sub	r22, r18
     d4c:	73 0b       	sbc	r23, r19
     d4e:	84 0b       	sbc	r24, r20
     d50:	95 0b       	sbc	r25, r21
     d52:	39 f4       	brne	.+14     	; 0xd62 <__fp_cmp+0x38>
     d54:	0a 26       	eor	r0, r26
     d56:	61 f0       	breq	.+24     	; 0xd70 <__fp_cmp+0x46>
     d58:	23 2b       	or	r18, r19
     d5a:	24 2b       	or	r18, r20
     d5c:	25 2b       	or	r18, r21
     d5e:	21 f4       	brne	.+8      	; 0xd68 <__fp_cmp+0x3e>
     d60:	08 95       	ret
     d62:	0a 26       	eor	r0, r26
     d64:	09 f4       	brne	.+2      	; 0xd68 <__fp_cmp+0x3e>
     d66:	a1 40       	sbci	r26, 0x01	; 1
     d68:	a6 95       	lsr	r26
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	81 1d       	adc	r24, r1
     d6e:	81 1d       	adc	r24, r1
     d70:	08 95       	ret

00000d72 <__fp_inf>:
     d72:	97 f9       	bld	r25, 7
     d74:	9f 67       	ori	r25, 0x7F	; 127
     d76:	80 e8       	ldi	r24, 0x80	; 128
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	08 95       	ret

00000d7e <__fp_nan>:
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
     d80:	80 ec       	ldi	r24, 0xC0	; 192
     d82:	08 95       	ret

00000d84 <__fp_pscA>:
     d84:	00 24       	eor	r0, r0
     d86:	0a 94       	dec	r0
     d88:	16 16       	cp	r1, r22
     d8a:	17 06       	cpc	r1, r23
     d8c:	18 06       	cpc	r1, r24
     d8e:	09 06       	cpc	r0, r25
     d90:	08 95       	ret

00000d92 <__fp_pscB>:
     d92:	00 24       	eor	r0, r0
     d94:	0a 94       	dec	r0
     d96:	12 16       	cp	r1, r18
     d98:	13 06       	cpc	r1, r19
     d9a:	14 06       	cpc	r1, r20
     d9c:	05 06       	cpc	r0, r21
     d9e:	08 95       	ret

00000da0 <__fp_round>:
     da0:	09 2e       	mov	r0, r25
     da2:	03 94       	inc	r0
     da4:	00 0c       	add	r0, r0
     da6:	11 f4       	brne	.+4      	; 0xdac <__fp_round+0xc>
     da8:	88 23       	and	r24, r24
     daa:	52 f0       	brmi	.+20     	; 0xdc0 <__fp_round+0x20>
     dac:	bb 0f       	add	r27, r27
     dae:	40 f4       	brcc	.+16     	; 0xdc0 <__fp_round+0x20>
     db0:	bf 2b       	or	r27, r31
     db2:	11 f4       	brne	.+4      	; 0xdb8 <__fp_round+0x18>
     db4:	60 ff       	sbrs	r22, 0
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <__fp_round+0x20>
     db8:	6f 5f       	subi	r22, 0xFF	; 255
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	8f 4f       	sbci	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	08 95       	ret

00000dc2 <__fp_split3>:
     dc2:	57 fd       	sbrc	r21, 7
     dc4:	90 58       	subi	r25, 0x80	; 128
     dc6:	44 0f       	add	r20, r20
     dc8:	55 1f       	adc	r21, r21
     dca:	59 f0       	breq	.+22     	; 0xde2 <__fp_splitA+0x10>
     dcc:	5f 3f       	cpi	r21, 0xFF	; 255
     dce:	71 f0       	breq	.+28     	; 0xdec <__fp_splitA+0x1a>
     dd0:	47 95       	ror	r20

00000dd2 <__fp_splitA>:
     dd2:	88 0f       	add	r24, r24
     dd4:	97 fb       	bst	r25, 7
     dd6:	99 1f       	adc	r25, r25
     dd8:	61 f0       	breq	.+24     	; 0xdf2 <__fp_splitA+0x20>
     dda:	9f 3f       	cpi	r25, 0xFF	; 255
     ddc:	79 f0       	breq	.+30     	; 0xdfc <__fp_splitA+0x2a>
     dde:	87 95       	ror	r24
     de0:	08 95       	ret
     de2:	12 16       	cp	r1, r18
     de4:	13 06       	cpc	r1, r19
     de6:	14 06       	cpc	r1, r20
     de8:	55 1f       	adc	r21, r21
     dea:	f2 cf       	rjmp	.-28     	; 0xdd0 <__fp_split3+0xe>
     dec:	46 95       	lsr	r20
     dee:	f1 df       	rcall	.-30     	; 0xdd2 <__fp_splitA>
     df0:	08 c0       	rjmp	.+16     	; 0xe02 <__fp_splitA+0x30>
     df2:	16 16       	cp	r1, r22
     df4:	17 06       	cpc	r1, r23
     df6:	18 06       	cpc	r1, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	f1 cf       	rjmp	.-30     	; 0xdde <__fp_splitA+0xc>
     dfc:	86 95       	lsr	r24
     dfe:	71 05       	cpc	r23, r1
     e00:	61 05       	cpc	r22, r1
     e02:	08 94       	sec
     e04:	08 95       	ret

00000e06 <__fp_zero>:
     e06:	e8 94       	clt

00000e08 <__fp_szero>:
     e08:	bb 27       	eor	r27, r27
     e0a:	66 27       	eor	r22, r22
     e0c:	77 27       	eor	r23, r23
     e0e:	cb 01       	movw	r24, r22
     e10:	97 f9       	bld	r25, 7
     e12:	08 95       	ret

00000e14 <__mulsf3>:
     e14:	0b d0       	rcall	.+22     	; 0xe2c <__mulsf3x>
     e16:	c4 cf       	rjmp	.-120    	; 0xda0 <__fp_round>
     e18:	b5 df       	rcall	.-150    	; 0xd84 <__fp_pscA>
     e1a:	28 f0       	brcs	.+10     	; 0xe26 <__mulsf3+0x12>
     e1c:	ba df       	rcall	.-140    	; 0xd92 <__fp_pscB>
     e1e:	18 f0       	brcs	.+6      	; 0xe26 <__mulsf3+0x12>
     e20:	95 23       	and	r25, r21
     e22:	09 f0       	breq	.+2      	; 0xe26 <__mulsf3+0x12>
     e24:	a6 cf       	rjmp	.-180    	; 0xd72 <__fp_inf>
     e26:	ab cf       	rjmp	.-170    	; 0xd7e <__fp_nan>
     e28:	11 24       	eor	r1, r1
     e2a:	ee cf       	rjmp	.-36     	; 0xe08 <__fp_szero>

00000e2c <__mulsf3x>:
     e2c:	ca df       	rcall	.-108    	; 0xdc2 <__fp_split3>
     e2e:	a0 f3       	brcs	.-24     	; 0xe18 <__mulsf3+0x4>

00000e30 <__mulsf3_pse>:
     e30:	95 9f       	mul	r25, r21
     e32:	d1 f3       	breq	.-12     	; 0xe28 <__mulsf3+0x14>
     e34:	95 0f       	add	r25, r21
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	55 1f       	adc	r21, r21
     e3a:	62 9f       	mul	r22, r18
     e3c:	f0 01       	movw	r30, r0
     e3e:	72 9f       	mul	r23, r18
     e40:	bb 27       	eor	r27, r27
     e42:	f0 0d       	add	r31, r0
     e44:	b1 1d       	adc	r27, r1
     e46:	63 9f       	mul	r22, r19
     e48:	aa 27       	eor	r26, r26
     e4a:	f0 0d       	add	r31, r0
     e4c:	b1 1d       	adc	r27, r1
     e4e:	aa 1f       	adc	r26, r26
     e50:	64 9f       	mul	r22, r20
     e52:	66 27       	eor	r22, r22
     e54:	b0 0d       	add	r27, r0
     e56:	a1 1d       	adc	r26, r1
     e58:	66 1f       	adc	r22, r22
     e5a:	82 9f       	mul	r24, r18
     e5c:	22 27       	eor	r18, r18
     e5e:	b0 0d       	add	r27, r0
     e60:	a1 1d       	adc	r26, r1
     e62:	62 1f       	adc	r22, r18
     e64:	73 9f       	mul	r23, r19
     e66:	b0 0d       	add	r27, r0
     e68:	a1 1d       	adc	r26, r1
     e6a:	62 1f       	adc	r22, r18
     e6c:	83 9f       	mul	r24, r19
     e6e:	a0 0d       	add	r26, r0
     e70:	61 1d       	adc	r22, r1
     e72:	22 1f       	adc	r18, r18
     e74:	74 9f       	mul	r23, r20
     e76:	33 27       	eor	r19, r19
     e78:	a0 0d       	add	r26, r0
     e7a:	61 1d       	adc	r22, r1
     e7c:	23 1f       	adc	r18, r19
     e7e:	84 9f       	mul	r24, r20
     e80:	60 0d       	add	r22, r0
     e82:	21 1d       	adc	r18, r1
     e84:	82 2f       	mov	r24, r18
     e86:	76 2f       	mov	r23, r22
     e88:	6a 2f       	mov	r22, r26
     e8a:	11 24       	eor	r1, r1
     e8c:	9f 57       	subi	r25, 0x7F	; 127
     e8e:	50 40       	sbci	r21, 0x00	; 0
     e90:	8a f0       	brmi	.+34     	; 0xeb4 <__mulsf3_pse+0x84>
     e92:	e1 f0       	breq	.+56     	; 0xecc <__mulsf3_pse+0x9c>
     e94:	88 23       	and	r24, r24
     e96:	4a f0       	brmi	.+18     	; 0xeaa <__mulsf3_pse+0x7a>
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	bb 1f       	adc	r27, r27
     e9e:	66 1f       	adc	r22, r22
     ea0:	77 1f       	adc	r23, r23
     ea2:	88 1f       	adc	r24, r24
     ea4:	91 50       	subi	r25, 0x01	; 1
     ea6:	50 40       	sbci	r21, 0x00	; 0
     ea8:	a9 f7       	brne	.-22     	; 0xe94 <__mulsf3_pse+0x64>
     eaa:	9e 3f       	cpi	r25, 0xFE	; 254
     eac:	51 05       	cpc	r21, r1
     eae:	70 f0       	brcs	.+28     	; 0xecc <__mulsf3_pse+0x9c>
     eb0:	60 cf       	rjmp	.-320    	; 0xd72 <__fp_inf>
     eb2:	aa cf       	rjmp	.-172    	; 0xe08 <__fp_szero>
     eb4:	5f 3f       	cpi	r21, 0xFF	; 255
     eb6:	ec f3       	brlt	.-6      	; 0xeb2 <__mulsf3_pse+0x82>
     eb8:	98 3e       	cpi	r25, 0xE8	; 232
     eba:	dc f3       	brlt	.-10     	; 0xeb2 <__mulsf3_pse+0x82>
     ebc:	86 95       	lsr	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b7 95       	ror	r27
     ec4:	f7 95       	ror	r31
     ec6:	e7 95       	ror	r30
     ec8:	9f 5f       	subi	r25, 0xFF	; 255
     eca:	c1 f7       	brne	.-16     	; 0xebc <__mulsf3_pse+0x8c>
     ecc:	fe 2b       	or	r31, r30
     ece:	88 0f       	add	r24, r24
     ed0:	91 1d       	adc	r25, r1
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	97 f9       	bld	r25, 7
     ed8:	08 95       	ret

00000eda <sin>:
     eda:	9f 93       	push	r25
     edc:	05 d0       	rcall	.+10     	; 0xee8 <__fp_rempio2>
     ede:	0f 90       	pop	r0
     ee0:	07 fc       	sbrc	r0, 7
     ee2:	ee 5f       	subi	r30, 0xFE	; 254
     ee4:	28 c0       	rjmp	.+80     	; 0xf36 <__fp_sinus>
     ee6:	4b cf       	rjmp	.-362    	; 0xd7e <__fp_nan>

00000ee8 <__fp_rempio2>:
     ee8:	74 df       	rcall	.-280    	; 0xdd2 <__fp_splitA>
     eea:	e8 f3       	brcs	.-6      	; 0xee6 <sin+0xc>
     eec:	e8 94       	clt
     eee:	e0 e0       	ldi	r30, 0x00	; 0
     ef0:	bb 27       	eor	r27, r27
     ef2:	9f 57       	subi	r25, 0x7F	; 127
     ef4:	f0 f0       	brcs	.+60     	; 0xf32 <__fp_rempio2+0x4a>
     ef6:	2a ed       	ldi	r18, 0xDA	; 218
     ef8:	3f e0       	ldi	r19, 0x0F	; 15
     efa:	49 ec       	ldi	r20, 0xC9	; 201
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <__fp_rempio2+0x22>
     efe:	ee 0f       	add	r30, r30
     f00:	bb 0f       	add	r27, r27
     f02:	66 1f       	adc	r22, r22
     f04:	77 1f       	adc	r23, r23
     f06:	88 1f       	adc	r24, r24
     f08:	28 f0       	brcs	.+10     	; 0xf14 <__fp_rempio2+0x2c>
     f0a:	b2 3a       	cpi	r27, 0xA2	; 162
     f0c:	62 07       	cpc	r22, r18
     f0e:	73 07       	cpc	r23, r19
     f10:	84 07       	cpc	r24, r20
     f12:	28 f0       	brcs	.+10     	; 0xf1e <__fp_rempio2+0x36>
     f14:	b2 5a       	subi	r27, 0xA2	; 162
     f16:	62 0b       	sbc	r22, r18
     f18:	73 0b       	sbc	r23, r19
     f1a:	84 0b       	sbc	r24, r20
     f1c:	e3 95       	inc	r30
     f1e:	9a 95       	dec	r25
     f20:	72 f7       	brpl	.-36     	; 0xefe <__fp_rempio2+0x16>
     f22:	80 38       	cpi	r24, 0x80	; 128
     f24:	30 f4       	brcc	.+12     	; 0xf32 <__fp_rempio2+0x4a>
     f26:	9a 95       	dec	r25
     f28:	bb 0f       	add	r27, r27
     f2a:	66 1f       	adc	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	88 1f       	adc	r24, r24
     f30:	d2 f7       	brpl	.-12     	; 0xf26 <__fp_rempio2+0x3e>
     f32:	90 48       	sbci	r25, 0x80	; 128
     f34:	13 c0       	rjmp	.+38     	; 0xf5c <__fp_mpack_finite>

00000f36 <__fp_sinus>:
     f36:	ef 93       	push	r30
     f38:	e0 ff       	sbrs	r30, 0
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <__fp_sinus+0x12>
     f3c:	a2 ea       	ldi	r26, 0xA2	; 162
     f3e:	2a ed       	ldi	r18, 0xDA	; 218
     f40:	3f e0       	ldi	r19, 0x0F	; 15
     f42:	49 ec       	ldi	r20, 0xC9	; 201
     f44:	5f eb       	ldi	r21, 0xBF	; 191
     f46:	31 de       	rcall	.-926    	; 0xbaa <__addsf3x>
     f48:	2b df       	rcall	.-426    	; 0xda0 <__fp_round>
     f4a:	0f 90       	pop	r0
     f4c:	03 94       	inc	r0
     f4e:	01 fc       	sbrc	r0, 1
     f50:	90 58       	subi	r25, 0x80	; 128
     f52:	ec ea       	ldi	r30, 0xAC	; 172
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <__fp_powsodd>

00000f58 <__fp_mpack>:
     f58:	9f 3f       	cpi	r25, 0xFF	; 255
     f5a:	31 f0       	breq	.+12     	; 0xf68 <__fp_mpack_finite+0xc>

00000f5c <__fp_mpack_finite>:
     f5c:	91 50       	subi	r25, 0x01	; 1
     f5e:	20 f4       	brcc	.+8      	; 0xf68 <__fp_mpack_finite+0xc>
     f60:	87 95       	ror	r24
     f62:	77 95       	ror	r23
     f64:	67 95       	ror	r22
     f66:	b7 95       	ror	r27
     f68:	88 0f       	add	r24, r24
     f6a:	91 1d       	adc	r25, r1
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	97 f9       	bld	r25, 7
     f72:	08 95       	ret

00000f74 <__fp_powsodd>:
     f74:	9f 93       	push	r25
     f76:	8f 93       	push	r24
     f78:	7f 93       	push	r23
     f7a:	6f 93       	push	r22
     f7c:	ff 93       	push	r31
     f7e:	ef 93       	push	r30
     f80:	9b 01       	movw	r18, r22
     f82:	ac 01       	movw	r20, r24
     f84:	47 df       	rcall	.-370    	; 0xe14 <__mulsf3>
     f86:	ef 91       	pop	r30
     f88:	ff 91       	pop	r31
     f8a:	05 d0       	rcall	.+10     	; 0xf96 <__fp_powser>
     f8c:	2f 91       	pop	r18
     f8e:	3f 91       	pop	r19
     f90:	4f 91       	pop	r20
     f92:	5f 91       	pop	r21
     f94:	3f cf       	rjmp	.-386    	; 0xe14 <__mulsf3>

00000f96 <__fp_powser>:
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	1f 93       	push	r17
     f9c:	0f 93       	push	r16
     f9e:	ff 92       	push	r15
     fa0:	ef 92       	push	r14
     fa2:	df 92       	push	r13
     fa4:	7b 01       	movw	r14, r22
     fa6:	8c 01       	movw	r16, r24
     fa8:	68 94       	set
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <__fp_powser+0x20>
     fac:	da 2e       	mov	r13, r26
     fae:	ef 01       	movw	r28, r30
     fb0:	3d df       	rcall	.-390    	; 0xe2c <__mulsf3x>
     fb2:	fe 01       	movw	r30, r28
     fb4:	e8 94       	clt
     fb6:	a5 91       	lpm	r26, Z+
     fb8:	25 91       	lpm	r18, Z+
     fba:	35 91       	lpm	r19, Z+
     fbc:	45 91       	lpm	r20, Z+
     fbe:	55 91       	lpm	r21, Z+
     fc0:	ae f3       	brts	.-22     	; 0xfac <__fp_powser+0x16>
     fc2:	ef 01       	movw	r28, r30
     fc4:	f2 dd       	rcall	.-1052   	; 0xbaa <__addsf3x>
     fc6:	fe 01       	movw	r30, r28
     fc8:	97 01       	movw	r18, r14
     fca:	a8 01       	movw	r20, r16
     fcc:	da 94       	dec	r13
     fce:	79 f7       	brne	.-34     	; 0xfae <__fp_powser+0x18>
     fd0:	df 90       	pop	r13
     fd2:	ef 90       	pop	r14
     fd4:	ff 90       	pop	r15
     fd6:	0f 91       	pop	r16
     fd8:	1f 91       	pop	r17
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <__udivmodhi4>:
     fe0:	aa 1b       	sub	r26, r26
     fe2:	bb 1b       	sub	r27, r27
     fe4:	51 e1       	ldi	r21, 0x11	; 17
     fe6:	07 c0       	rjmp	.+14     	; 0xff6 <__udivmodhi4_ep>

00000fe8 <__udivmodhi4_loop>:
     fe8:	aa 1f       	adc	r26, r26
     fea:	bb 1f       	adc	r27, r27
     fec:	a6 17       	cp	r26, r22
     fee:	b7 07       	cpc	r27, r23
     ff0:	10 f0       	brcs	.+4      	; 0xff6 <__udivmodhi4_ep>
     ff2:	a6 1b       	sub	r26, r22
     ff4:	b7 0b       	sbc	r27, r23

00000ff6 <__udivmodhi4_ep>:
     ff6:	88 1f       	adc	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	5a 95       	dec	r21
     ffc:	a9 f7       	brne	.-22     	; 0xfe8 <__udivmodhi4_loop>
     ffe:	80 95       	com	r24
    1000:	90 95       	com	r25
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	08 95       	ret

00001008 <__divmodhi4>:
    1008:	97 fb       	bst	r25, 7
    100a:	07 2e       	mov	r0, r23
    100c:	16 f4       	brtc	.+4      	; 0x1012 <__divmodhi4+0xa>
    100e:	00 94       	com	r0
    1010:	07 d0       	rcall	.+14     	; 0x1020 <__divmodhi4_neg1>
    1012:	77 fd       	sbrc	r23, 7
    1014:	09 d0       	rcall	.+18     	; 0x1028 <__divmodhi4_neg2>
    1016:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__udivmodhi4>
    101a:	07 fc       	sbrc	r0, 7
    101c:	05 d0       	rcall	.+10     	; 0x1028 <__divmodhi4_neg2>
    101e:	3e f4       	brtc	.+14     	; 0x102e <__divmodhi4_exit>

00001020 <__divmodhi4_neg1>:
    1020:	90 95       	com	r25
    1022:	81 95       	neg	r24
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	08 95       	ret

00001028 <__divmodhi4_neg2>:
    1028:	70 95       	com	r23
    102a:	61 95       	neg	r22
    102c:	7f 4f       	sbci	r23, 0xFF	; 255

0000102e <__divmodhi4_exit>:
    102e:	08 95       	ret

00001030 <__divmodsi4>:
    1030:	05 2e       	mov	r0, r21
    1032:	97 fb       	bst	r25, 7
    1034:	1e f4       	brtc	.+6      	; 0x103c <__divmodsi4+0xc>
    1036:	00 94       	com	r0
    1038:	0e 94 2f 08 	call	0x105e	; 0x105e <__negsi2>
    103c:	57 fd       	sbrc	r21, 7
    103e:	07 d0       	rcall	.+14     	; 0x104e <__divmodsi4_neg2>
    1040:	0e 94 37 08 	call	0x106e	; 0x106e <__udivmodsi4>
    1044:	07 fc       	sbrc	r0, 7
    1046:	03 d0       	rcall	.+6      	; 0x104e <__divmodsi4_neg2>
    1048:	4e f4       	brtc	.+18     	; 0x105c <__divmodsi4_exit>
    104a:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__negsi2>

0000104e <__divmodsi4_neg2>:
    104e:	50 95       	com	r21
    1050:	40 95       	com	r20
    1052:	30 95       	com	r19
    1054:	21 95       	neg	r18
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
    1058:	4f 4f       	sbci	r20, 0xFF	; 255
    105a:	5f 4f       	sbci	r21, 0xFF	; 255

0000105c <__divmodsi4_exit>:
    105c:	08 95       	ret

0000105e <__negsi2>:
    105e:	90 95       	com	r25
    1060:	80 95       	com	r24
    1062:	70 95       	com	r23
    1064:	61 95       	neg	r22
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__udivmodsi4>:
    106e:	a1 e2       	ldi	r26, 0x21	; 33
    1070:	1a 2e       	mov	r1, r26
    1072:	aa 1b       	sub	r26, r26
    1074:	bb 1b       	sub	r27, r27
    1076:	fd 01       	movw	r30, r26
    1078:	0d c0       	rjmp	.+26     	; 0x1094 <__udivmodsi4_ep>

0000107a <__udivmodsi4_loop>:
    107a:	aa 1f       	adc	r26, r26
    107c:	bb 1f       	adc	r27, r27
    107e:	ee 1f       	adc	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	a2 17       	cp	r26, r18
    1084:	b3 07       	cpc	r27, r19
    1086:	e4 07       	cpc	r30, r20
    1088:	f5 07       	cpc	r31, r21
    108a:	20 f0       	brcs	.+8      	; 0x1094 <__udivmodsi4_ep>
    108c:	a2 1b       	sub	r26, r18
    108e:	b3 0b       	sbc	r27, r19
    1090:	e4 0b       	sbc	r30, r20
    1092:	f5 0b       	sbc	r31, r21

00001094 <__udivmodsi4_ep>:
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	1a 94       	dec	r1
    109e:	69 f7       	brne	.-38     	; 0x107a <__udivmodsi4_loop>
    10a0:	60 95       	com	r22
    10a2:	70 95       	com	r23
    10a4:	80 95       	com	r24
    10a6:	90 95       	com	r25
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	bd 01       	movw	r22, r26
    10ae:	cf 01       	movw	r24, r30
    10b0:	08 95       	ret

000010b2 <__itoa_ncheck>:
    10b2:	bb 27       	eor	r27, r27
    10b4:	4a 30       	cpi	r20, 0x0A	; 10
    10b6:	31 f4       	brne	.+12     	; 0x10c4 <__itoa_ncheck+0x12>
    10b8:	99 23       	and	r25, r25
    10ba:	22 f4       	brpl	.+8      	; 0x10c4 <__itoa_ncheck+0x12>
    10bc:	bd e2       	ldi	r27, 0x2D	; 45
    10be:	90 95       	com	r25
    10c0:	81 95       	neg	r24
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__utoa_common>

000010c8 <__utoa_ncheck>:
    10c8:	bb 27       	eor	r27, r27

000010ca <__utoa_common>:
    10ca:	fb 01       	movw	r30, r22
    10cc:	55 27       	eor	r21, r21
    10ce:	aa 27       	eor	r26, r26
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	aa 1f       	adc	r26, r26
    10d6:	a4 17       	cp	r26, r20
    10d8:	10 f0       	brcs	.+4      	; 0x10de <__utoa_common+0x14>
    10da:	a4 1b       	sub	r26, r20
    10dc:	83 95       	inc	r24
    10de:	50 51       	subi	r21, 0x10	; 16
    10e0:	b9 f7       	brne	.-18     	; 0x10d0 <__utoa_common+0x6>
    10e2:	a0 5d       	subi	r26, 0xD0	; 208
    10e4:	aa 33       	cpi	r26, 0x3A	; 58
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__utoa_common+0x20>
    10e8:	a9 5d       	subi	r26, 0xD9	; 217
    10ea:	a1 93       	st	Z+, r26
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	79 f7       	brne	.-34     	; 0x10ce <__utoa_common+0x4>
    10f0:	b1 11       	cpse	r27, r1
    10f2:	b1 93       	st	Z+, r27
    10f4:	11 92       	st	Z+, r1
    10f6:	cb 01       	movw	r24, r22
    10f8:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <strrev>

000010fc <strrev>:
    10fc:	dc 01       	movw	r26, r24
    10fe:	fc 01       	movw	r30, r24
    1100:	67 2f       	mov	r22, r23
    1102:	71 91       	ld	r23, Z+
    1104:	77 23       	and	r23, r23
    1106:	e1 f7       	brne	.-8      	; 0x1100 <strrev+0x4>
    1108:	32 97       	sbiw	r30, 0x02	; 2
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <strrev+0x18>
    110c:	7c 91       	ld	r23, X
    110e:	6d 93       	st	X+, r22
    1110:	70 83       	st	Z, r23
    1112:	62 91       	ld	r22, -Z
    1114:	ae 17       	cp	r26, r30
    1116:	bf 07       	cpc	r27, r31
    1118:	c8 f3       	brcs	.-14     	; 0x110c <strrev+0x10>
    111a:	08 95       	ret

0000111c <_exit>:
    111c:	f8 94       	cli

0000111e <__stop_program>:
    111e:	ff cf       	rjmp	.-2      	; 0x111e <__stop_program>
